{"sha":"2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJiYTBmNWU1YTY3NTFjMTVjMDcyY2Y5MzFhYWNmZTdhMTFhMjMzMGY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-19T08:48:05Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-19T08:48:05Z"},"message":"Removing all depreaction warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/0_8_X_ASL@1247354 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8947763f9d1e35980b5fe9d4df9481ee75b89f33","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8947763f9d1e35980b5fe9d4df9481ee75b89f33"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/comments","author":null,"committer":null,"parents":[{"sha":"9a4f44682b19f170b94cc6139f750ca0032a14d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a4f44682b19f170b94cc6139f750ca0032a14d2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9a4f44682b19f170b94cc6139f750ca0032a14d2"}],"stats":{"total":645,"additions":372,"deletions":273},"files":[{"sha":"ea731907d3834242e3619bb62301abad7cb3c337","filename":"build-tools/pom.xml","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/build-tools%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/build-tools%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fpom.xml?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -34,7 +34,7 @@\n             <groupId>javax.servlet</groupId>\n             <scope>provided</scope>\n         </dependency>\n-        \n+            \n         <dependency>\n             <groupId>org.apache.directory.server</groupId>\n             <artifactId>apacheds-all</artifactId>\n@@ -64,11 +64,6 @@\n             <groupId>org.springframework</groupId>\n             <artifactId>spring-webmvc</artifactId>\n         </dependency>\n-        <dependency>\n-            <groupId>org.springframework</groupId>\n-            <artifactId>spring-test</artifactId>\n-            <scope>compile</scope>\n-        </dependency>\n             \n         <dependency>\n             <groupId>com.h2database</groupId>"},{"sha":"d1c965b4293752ea0a3d879105aaaeab40e4b076","filename":"build-tools/src/main/java/org/syncope/buildtools/H2StartStopListener.java","status":"modified","additions":28,"deletions":7,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fbuildtools%2FH2StartStopListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fbuildtools%2FH2StartStopListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fbuildtools%2FH2StartStopListener.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -14,23 +14,23 @@\n package org.syncope.buildtools;\n \n import java.io.File;\n+import java.sql.Connection;\n import java.sql.SQLException;\n+import java.sql.Statement;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n import javax.sql.DataSource;\n import org.h2.tools.Server;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.core.io.ClassPathResource;\n-import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;\n-import org.springframework.test.jdbc.SimpleJdbcTestUtils;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.web.context.WebApplicationContext;\n import org.springframework.web.context.support.WebApplicationContextUtils;\n \n /**\n- * Utility serlvet context listener managing H2 test server instance\n- * (to be used as external resource).\n+ * Utility serlvet context listener managing H2 test server instance (to be used\n+ * as external resource).\n  */\n public class H2StartStopListener implements ServletContextListener {\n \n@@ -65,8 +65,29 @@ public void contextInitialized(final ServletContextEvent sce) {\n                 WebApplicationContextUtils.getWebApplicationContext(context);\n         DataSource datasource = ctx.getBean(DataSource.class);\n \n-        SimpleJdbcTestUtils.executeSqlScript(new SimpleJdbcTemplate(datasource),\n-                new ClassPathResource(\"/testdb.sql\"), false);\n+        Connection conn = null;\n+        Statement stmt = null;\n+        try {\n+            conn = DataSourceUtils.getConnection(datasource);\n+            stmt = conn.createStatement();\n+            stmt.executeUpdate(\"RUNSCRIPT FROM 'classpath:/testdb.sql'\");\n+        } catch (Exception e) {\n+            LOG.error(\"While loading data into testdb\", e);\n+        } finally {\n+            if (stmt != null) {\n+                try {\n+                    stmt.close();\n+                } catch (SQLException e) {\n+                }\n+            }\n+            if (conn != null) {\n+                try {\n+                    conn.close();\n+                } catch (SQLException e) {\n+                }\n+            }\n+            DataSourceUtils.releaseConnection(conn, datasource);\n+        }\n     }\n \n     @Override"},{"sha":"7f3736fb9524e55c6311ef987a0acaa73483d936","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -133,9 +133,7 @@ public List<AttributeTO> getVirtualAttributes() {\n         return virtualAttributes;\n     }\n \n-    public void setVirtualAttributes(\n-            final List<AttributeTO> virtualAttributes) {\n-\n+    public void setVirtualAttributes(final List<AttributeTO> virtualAttributes) {\n         this.virtualAttributes = virtualAttributes;\n     }\n "},{"sha":"fd5c055fd00b18380d697f325286c691f0deb487","filename":"client/src/main/java/org/syncope/client/util/AttributableOperations.java","status":"modified","additions":32,"deletions":14,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Futil%2FAttributableOperations.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -47,16 +47,26 @@ public static <T extends AbstractAttributableTO> T clone(final T original) {\n         return (T) SerializationUtils.clone(original);\n     }\n \n-    private static void populate(final Map<String, AttributeTO> updatedAttrs,\n+    private static void populate(\n+            final Map<String, AttributeTO> updatedAttrs,\n             final Map<String, AttributeTO> originalAttrs,\n             final AbstractAttributableMod result) {\n+        populate(updatedAttrs, originalAttrs, result, false);\n+    }\n+\n+    private static void populate(\n+            final Map<String, AttributeTO> updatedAttrs,\n+            final Map<String, AttributeTO> originalAttrs,\n+            final AbstractAttributableMod result,\n+            final boolean virtuals) {\n \n         for (Map.Entry<String, AttributeTO> entry : updatedAttrs.entrySet()) {\n-            AttributeMod attrMod = new AttributeMod();\n-            attrMod.setSchema(entry.getKey());\n+            AttributeMod mod = new AttributeMod();\n+            mod.setSchema(entry.getKey());\n \n             Set<String> updatedValues = new HashSet<String>(\n                     entry.getValue().getValues());\n+\n             Set<String> originalValues =\n                     originalAttrs.containsKey(entry.getKey())\n                     ? new HashSet<String>(\n@@ -67,18 +77,27 @@ private static void populate(final Map<String, AttributeTO> updatedAttrs,\n                 // avoid unwanted inputs\n                 updatedValues.remove(\"\");\n                 if (!entry.getValue().isReadonly()) {\n-                    attrMod.setValuesToBeAdded(\n-                            new ArrayList<String>(updatedValues));\n-                    if (!attrMod.isEmpty()) {\n-                        result.addAttributeToBeRemoved(attrMod.getSchema());\n+                    mod.setValuesToBeAdded(new ArrayList<String>(updatedValues));\n+\n+                    if (!mod.isEmpty()) {\n+                        if (virtuals) {\n+                            result.addVirtualAttributeToBeRemoved(\n+                                    mod.getSchema());\n+                        } else {\n+                            result.addAttributeToBeRemoved(mod.getSchema());\n+                        }\n                     }\n                 }\n \n-                attrMod.setValuesToBeRemoved(new ArrayList<String>(\n-                        originalValues));\n+                mod.setValuesToBeRemoved(\n+                        new ArrayList<String>(originalValues));\n \n-                if (!attrMod.isEmpty()) {\n-                    result.addAttributeToBeUpdated(attrMod);\n+                if (!mod.isEmpty()) {\n+                    if (virtuals) {\n+                        result.addVirtualAttributeToBeUpdated(mod);\n+                    } else {\n+                        result.addAttributeToBeUpdated(mod);\n+                    }\n                 }\n             }\n         }\n@@ -128,8 +147,7 @@ private static void diff(\n         originalAttrNames.removeAll(updatedAttrs.keySet());\n         result.setDerivedAttributesToBeRemoved(originalAttrNames);\n \n-        Set<String> updatedAttrNames =\n-                new HashSet<String>(updatedAttrs.keySet());\n+        Set<String> updatedAttrNames = new HashSet<String>(updatedAttrs.keySet());\n         updatedAttrNames.removeAll(originalAttrs.keySet());\n         result.setDerivedAttributesToBeAdded(updatedAttrNames);\n \n@@ -141,7 +159,7 @@ private static void diff(\n         originalAttrNames.removeAll(updatedAttrs.keySet());\n         result.setVirtualAttributesToBeRemoved(originalAttrNames);\n \n-        populate(updatedAttrs, originalAttrs, result);\n+        populate(updatedAttrs, originalAttrs, result, true);\n \n         // 5. resources\n         Set<String> updatedRes = new HashSet<String>(updated.getResources());"},{"sha":"532f3fe6d4f1a085c7ea845c1813969222d2e1f3","filename":"console/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fpom.xml?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -103,8 +103,8 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>commons-httpclient</groupId>\n-            <artifactId>commons-httpclient</artifactId>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n         </dependency>\n         \n         <!-- TEST -->"},{"sha":"088da030adc32503f414f36c7038d68964e1efaa","filename":"console/src/main/java/org/syncope/console/pages/Login.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -18,11 +18,13 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n-import org.apache.commons.httpclient.HttpClient;\n-import org.apache.commons.httpclient.HttpMethod;\n-import org.apache.commons.httpclient.UsernamePasswordCredentials;\n-import org.apache.commons.httpclient.auth.AuthScope;\n-import org.apache.commons.httpclient.methods.GetMethod;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.util.EntityUtils;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -46,7 +48,7 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.http.client.CommonsClientHttpRequestFactory;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n import org.springframework.web.client.RestTemplate;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -188,10 +190,11 @@ public Page createPage() {\n     }\n \n     private String[] authenticate(final String userId, final String password) {\n-        //1.Set provided credentials to check\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(\n-                AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(userId, password));\n \n         //2.Search authorizations for user specified by credentials\n@@ -210,9 +213,9 @@ private String[] authenticate(final String userId, final String password) {\n     private String getCoreVersion() {\n         String version = \"\";\n         try {\n-            HttpMethod get = new GetMethod(baseURL + \"../version.jsp\");\n-            httpClient.executeMethod(get);\n-            version = get.getResponseBodyAsString().trim();\n+            HttpGet get = new HttpGet(baseURL + \"../version.jsp\");\n+            HttpResponse response = httpClient.execute(get);\n+            version = EntityUtils.toString(response.getEntity()).trim();\n         } catch (IOException e) {\n             LOG.error(\"While fetching core version\", e);\n             getSession().error(e.getMessage());"},{"sha":"21214d363c2e3ed97ff8d555d973b91aaeff00d2","filename":"console/src/main/java/org/syncope/console/pages/UserModalPage.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -55,7 +55,6 @@ public enum Mode {\n         ADMIN,\n         SELF,\n         TEMPLATE;\n-\n     }\n \n     private static final long serialVersionUID = 5002005009737457667L;\n@@ -250,14 +249,12 @@ protected void onSubmit(final AjaxRequestTarget target,\n                     if (updatedUserTO.getId() == 0) {\n                         switch (mode) {\n                             case SELF:\n-                                requestRestClient.requestCreate(\n-                                        updatedUserTO);\n+                                requestRestClient.requestCreate(updatedUserTO);\n                                 break;\n \n                             case ADMIN:\n                             default:\n-                                userTO = userRestClient.create(\n-                                        updatedUserTO);\n+                                userTO = userRestClient.create(updatedUserTO);\n                                 if (userRequestTO != null) {\n                                     requestRestClient.delete(\n                                             userRequestTO.getId());"},{"sha":"a4d08fb82676859bf0c89bf074d647cf675b072f","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -47,30 +47,22 @@\n         <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n     </bean>\n \n-    <bean id=\"httpClientParams\" class=\"org.apache.commons.httpclient.params.HttpClientParams\" scope=\"prototype\">\n-        <property name=\"authenticationPreemptive\" value=\"true\"/>\n-        <property name=\"connectionManagerClass\"\n-                  value=\"org.apache.commons.httpclient.MultiThreadedHttpConnectionManager\"/>\n-    </bean>\n-\n-    <bean id=\"httpClient\" class=\"org.apache.commons.httpclient.HttpClient\" scope=\"prototype\">\n+    <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager\"/>\n+    <bean id=\"httpClientParams\" class=\"org.apache.http.params.SyncBasicHttpParams\"/>\n+    <bean id=\"httpClient\" class=\"org.apache.http.impl.client.ContentEncodingHttpClient\">\n+        <constructor-arg ref=\"httpClientConnManager\"/>\n         <constructor-arg ref=\"httpClientParams\"/>\n     </bean>\n-\n-    <bean id=\"httpClientFactory\" class=\"org.springframework.http.client.CommonsClientHttpRequestFactory\" scope=\"prototype\">\n+    <bean id=\"httpClientFactory\" class=\"org.springframework.http.client.HttpComponentsClientHttpRequestFactory\">\n         <constructor-arg ref=\"httpClient\"/>\n     </bean>\n-\n-    <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\" scope=\"session\">\n+    <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n         <constructor-arg ref=\"httpClientFactory\"/>\n \n-        <property name=\"messageConverters\" ref=\"mappingJacksonHttpMessageConverter\"/>\n         <property name=\"errorHandler\">\n             <bean id=\"syncopeClientErrorHandler\"\n-            class=\"org.syncope.client.validation.SyncopeClientErrorHandler\"/>\n+                  class=\"org.syncope.client.validation.SyncopeClientErrorHandler\"/>\n         </property>\n-\n-        <aop:scoped-proxy/>\n     </bean>\n \n     <bean id=\"preferenceManager\" class=\"org.syncope.console.commons.PreferenceManager\"/>"},{"sha":"0836ce95a5747075a7c7616832cbd6f7ae5ea1cc","filename":"core/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -259,8 +259,8 @@\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n-            <groupId>commons-httpclient</groupId>\n-            <artifactId>commons-httpclient</artifactId>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <dependency>"},{"sha":"3118836f3886e1be79556facc34260530f6a01be","filename":"core/src/main/java/org/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":20,"deletions":12,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -54,8 +54,8 @@\n \n /**\n  * Intercept calls to ConnectorFacade's methods and check if the correspondant\n- * connector instance has been configured to allow every single operation:\n- * if not, simply do nothig.\n+ * connector instance has been configured to allow every single operation: if\n+ * not, simply do nothig.\n  */\n public class ConnectorFacadeProxy {\n \n@@ -72,13 +72,14 @@ public class ConnectorFacadeProxy {\n \n     /**\n      * Set of configure connecto instance capabilities.\n+     *\n      * @see org.syncope.core.persistence.beans.ConnInstance\n      */\n     private final Set<ConnectorCapability> capabitilies;\n \n     /**\n-     * Use the passed connector instance to build a ConnectorFacade that will\n-     * be used to make all wrapped calls.\n+     * Use the passed connector instance to build a ConnectorFacade that will be\n+     * used to make all wrapped calls.\n      *\n      * @param connInstance the connector instance configuration\n      * @param connBundleManager connector bundle loader\n@@ -174,31 +175,36 @@ public ConnectorFacadeProxy(\n                     } else if (Integer.class.equals(propertySchemaClass)\n                             || int.class.equals(propertySchemaClass)) {\n \n-                        propertyValue = Integer.parseInt(\n+                        propertyValue =\n+                                Integer.parseInt(\n                                 property.getValues().iterator().next().toString());\n \n                     } else if (Long.class.equals(propertySchemaClass)\n                             || long.class.equals(propertySchemaClass)) {\n \n-                        propertyValue = Long.parseLong(\n+                        propertyValue =\n+                                Long.parseLong(\n                                 property.getValues().iterator().next().toString());\n \n                     } else if (Float.class.equals(propertySchemaClass)\n                             || float.class.equals(propertySchemaClass)) {\n \n-                        propertyValue = Float.parseFloat(\n+                        propertyValue =\n+                                Float.parseFloat(\n                                 property.getValues().iterator().next().toString());\n \n                     } else if (Double.class.equals(propertySchemaClass)\n                             || double.class.equals(propertySchemaClass)) {\n \n-                        propertyValue = Double.parseDouble(\n+                        propertyValue =\n+                                Double.parseDouble(\n                                 property.getValues().iterator().next().toString());\n \n                     } else if (Boolean.class.equals(propertySchemaClass)\n                             || boolean.class.equals(propertySchemaClass)) {\n \n-                        propertyValue = Boolean.parseBoolean(\n+                        propertyValue =\n+                                Boolean.parseBoolean(\n                                 property.getValues().iterator().next().toString());\n \n                     } else if (URI.class.equals(propertySchemaClass)) {\n@@ -438,8 +444,8 @@ public ConnectorObject getObject(\n     }\n \n     /**\n-     * Get remote object used by the propagation manager in order to choose\n-     * for a create (object doesn't exist) or an update (object exists).\n+     * Get remote object used by the propagation manager in order to choose for\n+     * a create (object doesn't exist) or an update (object exists).\n      *\n      * @param propagationMode propagation mode\n      * @param operationType resource operation type\n@@ -530,7 +536,7 @@ public Attribute getObjectAttribute(\n     }\n \n     /**\n-     * \n+     *\n      * @param objectClass ConnId's object class\n      * @param uid ConnId's Uid\n      * @param options ConnId's OperationOptions\n@@ -562,6 +568,7 @@ public Set<Attribute> getObjectAttributes(\n \n     /**\n      * Return resource schema names.\n+     *\n      * @param showall return __NAME__ and __PASSWORD__ attribute if true.\n      * @return a list of schema names.\n      */\n@@ -575,6 +582,7 @@ public Set<String> getSchema(final boolean showall) {\n                 for (AttributeInfo attrInfo : info.getAttributeInfo()) {\n                     if (showall || (!\"__NAME__\".equals(attrInfo.getName())\n                             && !\"__PASSWORD__\".equals(attrInfo.getName()))) {\n+\n                         resourceSchemaNames.add(attrInfo.getName());\n                     }\n                 }"},{"sha":"4e94a4d775fdfe3c6ad3e5303f206ea8a82ce84d","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -32,7 +32,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.GrantedAuthorityImpl;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n@@ -76,6 +76,7 @@\n \n /**\n  * Job for executing synchronization tasks.\n+ *\n  * @see org.syncope.core.scheduling.Job\n  * @see SyncTask\n  */\n@@ -145,8 +146,8 @@ public void setActions(final SyncJobActions actions) {\n     }\n \n     /**\n-     * Extract password value from passed value (if instance of GuardedString\n-     * or GuardedByteArray).\n+     * Extract password value from passed value (if instance of GuardedString or\n+     * GuardedByteArray).\n      *\n      * @param pwd received from the underlying connector\n      * @return password value\n@@ -775,6 +776,7 @@ private void deleteUsers(final SyncDelta delta,\n \n     /**\n      * Create a textual report of the synchronization, based on the trace level.\n+     *\n      * @param syncResults Sync results\n      * @param syncTraceLevel Sync trace level\n      * @param dryRun dry run?\n@@ -900,7 +902,7 @@ private void setupSecurity() {\n                 new ArrayList<GrantedAuthority>();\n \n         for (Entitlement entitlement : entitlementDAO.findAll()) {\n-            authorities.add(new GrantedAuthorityImpl(entitlement.getName()));\n+            authorities.add(new SimpleGrantedAuthority(entitlement.getName()));\n         }\n \n         final UserDetails userDetails = new User("},{"sha":"41bf05e40008f66b80b74342893583aa6352ce22","filename":"core/src/main/java/org/syncope/core/security/SyncopeUserDetailsService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -19,7 +19,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.dao.DataAccessException;\n-import org.springframework.security.core.authority.GrantedAuthorityImpl;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UserDetailsService;\n@@ -57,12 +57,12 @@ public void setAdminUser(String adminUser) {\n     public UserDetails loadUserByUsername(final String username)\n             throws UsernameNotFoundException, DataAccessException {\n \n-        Set<GrantedAuthorityImpl> authorities =\n-                new HashSet<GrantedAuthorityImpl>();\n+        Set<SimpleGrantedAuthority> authorities =\n+                new HashSet<SimpleGrantedAuthority>();\n         if (adminUser.equals(username)) {\n             for (Entitlement entitlement : entitlementDAO.findAll()) {\n                 authorities.add(\n-                        new GrantedAuthorityImpl(entitlement.getName()));\n+                        new SimpleGrantedAuthority(entitlement.getName()));\n             }\n         } else {\n             final SyncopeUser user = userDAO.find(username);\n@@ -84,8 +84,8 @@ public UserDetails loadUserByUsername(final String username)\n             }\n             for (SyncopeRole role : roles) {\n                 for (Entitlement entitlement : role.getEntitlements()) {\n-                    authorities.add(new GrantedAuthorityImpl(\n-                            entitlement.getName()));\n+                    authorities.add(\n+                            new SimpleGrantedAuthority(entitlement.getName()));\n                 }\n             }\n         }"},{"sha":"ebba2f028e42be679c2ae1ad749028ecb02a47c0","filename":"core/src/test/java/org/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":13,"deletions":16,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -19,7 +19,6 @@\n import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.AbstractTest;\n import org.syncope.core.persistence.beans.PasswordPolicy;\n@@ -37,40 +36,39 @@ public class PolicyTest extends AbstractTest {\n     private PolicyDAO policyDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<Policy> policies = policyDAO.findAll();\n         assertNotNull(policies);\n         assertFalse(policies.isEmpty());\n     }\n \n     @Test\n-    public final void findById() {\n+    public void findById() {\n         Policy policy = policyDAO.find(1L);\n         assertNotNull(\"findById did not work\", policy);\n     }\n \n     @Test\n-    public final void findByType() {\n+    public void findByType() {\n         List<? extends Policy> policies = policyDAO.find(PolicyType.SYNC);\n         assertNotNull(\"findById did not work\", policies);\n         assertFalse(policies.isEmpty());\n     }\n \n     @Test\n-    public final void findGlobalPasswordPolicy() {\n+    public void findGlobalPasswordPolicy() {\n         PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n         assertNotNull(\"findById did not work\", policy);\n \n         assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n \n         assertEquals(\"invalid policy values\",\n-                8, ((PasswordPolicySpec) policy.getSpecification()).getMinLength());\n+                8,\n+                ((PasswordPolicySpec) policy.getSpecification()).getMinLength());\n     }\n \n-    @Test\n-    @ExpectedException(value = InvalidEntityException.class)\n-    public final void saveInvalidPolicy() {\n-\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveInvalidPolicy() {\n         PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n@@ -82,9 +80,8 @@ public final void saveInvalidPolicy() {\n         policyDAO.save(policy);\n     }\n \n-    @Test\n-    @ExpectedException(value = InvalidEntityException.class)\n-    public final void saveSecondPasswordPolicy() {\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveSecondPasswordPolicy() {\n         PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n@@ -97,7 +94,7 @@ public final void saveSecondPasswordPolicy() {\n     }\n \n     @Test\n-    public final void create() {\n+    public void create() {\n         SyncPolicy policy = new SyncPolicy();\n         policy.setSpecification(new SyncPolicySpec());\n         policy.setDescription(\"Sync policy\");\n@@ -109,7 +106,7 @@ public final void create() {\n     }\n \n     @Test\n-    public final void update() {\n+    public void update() {\n         PasswordPolicySpec specification = new PasswordPolicySpec();\n         specification.setMaxLength(8);\n         specification.setMinLength(6);\n@@ -131,7 +128,7 @@ public final void update() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         Policy policy = policyDAO.find(1L);\n         assertNotNull(\"find to delete did not work\", policy);\n "},{"sha":"52c31f3302ff9f3078b60ce28fd2358861e9b6f0","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -21,7 +21,6 @@\n import org.connid.bundles.soap.WebServiceConnector;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.ExternalResource;\n@@ -37,7 +36,7 @@ public class ResourceTest extends AbstractTest {\n     private ResourceDAO resourceDAO;\n \n     @Test\n-    public final void findById() {\n+    public void findById() {\n         ExternalResource resource =\n                 resourceDAO.find(\"ws-target-resource-1\");\n \n@@ -73,21 +72,21 @@ public final void findById() {\n     }\n \n     @Test\n-    public final void findAllByPriority() {\n+    public void findAllByPriority() {\n         List<ExternalResource> resources = resourceDAO.findAllByPriority();\n         assertNotNull(resources);\n         assertFalse(resources.isEmpty());\n     }\n \n     @Test\n-    public final void getAccountId() {\n+    public void getAccountId() {\n         SchemaMapping mapping = resourceDAO.getMappingForAccountId(\n                 \"ws-target-resource-2\");\n         assertEquals(\"fullname\", mapping.getIntAttrName());\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-basic-save\");\n         resource.setPropagationPriority(2);\n@@ -116,9 +115,8 @@ public final void save() {\n         assertTrue(actual.isPropagationPrimary());\n     }\n \n-    @Test\n-    @ExpectedException(value = InvalidEntityException.class)\n-    public final void saveInvalidMappingIntAttr() {\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveInvalidMappingIntAttr() {\n \n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-basic-save-invalid\");\n@@ -136,9 +134,8 @@ public final void saveInvalidMappingIntAttr() {\n         assertNotNull(actual);\n     }\n \n-    @Test\n-    @ExpectedException(value = InvalidEntityException.class)\n-    public final void saveInvalidMappingExtAttr() {\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveInvalidMappingExtAttr() {\n \n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-basic-save-invalid\");\n@@ -165,7 +162,7 @@ public final void saveInvalidMappingExtAttr() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n         assertNotNull(resource);\n "},{"sha":"86e8919cb978fd5b7e71a3fd7459c61f45bfa2fb","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -19,7 +19,6 @@\n import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.role.RSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n@@ -37,7 +36,7 @@ public class SchemaTest extends AbstractTest {\n     private SchemaDAO schemaDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n         assertEquals(11, userList.size());\n \n@@ -46,15 +45,15 @@ public final void findAll() {\n     }\n \n     @Test\n-    public final void findByName() {\n+    public void findByName() {\n         USchema attributeSchema =\n                 schemaDAO.find(\"fullname\", USchema.class);\n         assertNotNull(\"did not find expected attribute schema\",\n                 attributeSchema);\n     }\n \n     @Test\n-    public final void getAttributes() {\n+    public void getAttributes() {\n         List<RSchema> schemas = schemaDAO.findAll(RSchema.class);\n         assertNotNull(schemas);\n         assertFalse(schemas.isEmpty());\n@@ -68,7 +67,7 @@ public final void getAttributes() {\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         USchema attributeSchema = new USchema();\n         attributeSchema.setName(\"secondaryEmail\");\n         attributeSchema.setType(SchemaType.String);\n@@ -84,9 +83,8 @@ public final void save() {\n         assertEquals(attributeSchema, actual);\n     }\n \n-    @Test\n-    @ExpectedException(InvalidEntityException.class)\n-    public final void saveNonValid() {\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveNonValid() {\n         USchema attributeSchema = new USchema();\n         attributeSchema.setName(\"secondaryEmail\");\n         attributeSchema.setType(SchemaType.String);\n@@ -100,7 +98,7 @@ public final void saveNonValid() {\n     }\n \n     @Test\n-    public final void checkForEnumType() {\n+    public void checkForEnumType() {\n         RSchema schema = new RSchema();\n         schema.setType(SchemaType.Enum);\n         schema.setName(\"color\");\n@@ -122,16 +120,15 @@ public final void checkForEnumType() {\n         assertNotNull(actual);\n     }\n \n-    @Test\n-    @ExpectedException(value = InvalidEntityException.class)\n-    public final void saveInvalidSchema() {\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveInvalidSchema() {\n         USchema schema = new USchema();\n         schema.setName(\"username\");\n         schemaDAO.save(schema);\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         USchema schema = schemaDAO.find(\"fullname\", USchema.class);\n \n         schemaDAO.delete(schema.getName(), AttributableUtil.USER);"},{"sha":"a0143611d16cf489add63c19537051f28cf954b1","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -14,14 +14,13 @@\n  */\n package org.syncope.core.persistence.dao;\n \n-import java.util.Date;\n import static org.junit.Assert.*;\n \n+import java.util.Date;\n import java.util.List;\n import java.util.Set;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.AbstractTest;\n@@ -85,15 +84,13 @@ public void findByDerAttributeValue()\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n     }\n \n-    @Test\n-    @ExpectedException(value = InvalidSearchConditionException.class)\n+    @Test(expected = InvalidSearchConditionException.class)\n     public void findByInvalidDerAttrValue()\n             throws InvalidSearchConditionException {\n         userDAO.findByDerAttrValue(\"cn\", \"Antonio, Maria, Rossi\");\n     }\n \n-    @Test\n-    @ExpectedException(value = InvalidSearchConditionException.class)\n+    @Test(expected = InvalidSearchConditionException.class)\n     public void findByInvalidDerAttrExpression()\n             throws InvalidSearchConditionException {\n         userDAO.findByDerAttrValue(\"noschema\", \"Antonio, Maria\");"},{"sha":"72e7ab05c138d13160bfe9a62415638ed03b7cd6","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -67,7 +67,7 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    public final void createWithPasswordPolicy() {\n+    public void createWithPasswordPolicy() {\n         final String resourceName = \"resourceWithPasswordPolicy\";\n \n         PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n@@ -92,7 +92,7 @@ public final void createWithPasswordPolicy() {\n      * @see http://code.google.com/p/syncope/issues/detail?id=42\n      */\n     @Test\n-    public final void issue42() {\n+    public void issue42() {\n         USchema userId = schemaDAO.find(\"userId\", USchema.class);\n \n         Set<SchemaMapping> beforeUserIdMappings = new HashSet<SchemaMapping>();\n@@ -150,7 +150,7 @@ public final void issue42() {\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         ExternalResource resource = new ExternalResource();\n         resource.setName(\"ws-target-resource-save\");\n \n@@ -235,7 +235,7 @@ public final void save() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n         assertNotNull(\"find to delete did not work\", resource);\n "},{"sha":"65a2db16bad7aaadf7ec36241511ab35022b27a2","filename":"core/src/test/java/org/syncope/core/rest/AbstractTest.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -15,14 +15,15 @@\n package org.syncope.core.rest;\n \n import javax.sql.DataSource;\n-import org.apache.commons.httpclient.UsernamePasswordCredentials;\n-import org.apache.commons.httpclient.auth.AuthScope;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.impl.client.DefaultHttpClient;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.client.CommonsClientHttpRequestFactory;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.web.client.RestTemplate;\n@@ -51,8 +52,11 @@ public abstract class AbstractTest {\n \n     @Before\n     public void setupRestTemplate() {\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"admin\", \"password\"));\n     }\n }"},{"sha":"9b380a7f98e77ada18366cc26597318f3ffb1e81","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":45,"deletions":29,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -20,11 +20,12 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.commons.httpclient.UsernamePasswordCredentials;\n-import org.apache.commons.httpclient.auth.AuthScope;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.impl.client.DefaultHttpClient;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.client.CommonsClientHttpRequestFactory;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n import org.springframework.web.client.HttpClientErrorException;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.NodeCond;\n@@ -80,8 +81,11 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n \n@@ -127,17 +131,20 @@ public void testUserRead() {\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n \n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n         assertNotNull(readUserTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"user2\", \"password\"));\n \n         HttpClientErrorException exception = null;\n@@ -170,8 +177,11 @@ public void testUserSearch() {\n                 userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n \n@@ -191,8 +201,8 @@ public void testUserSearch() {\n         }\n         assertTrue(userIds.contains(1L));\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"user2\", \"password\"));\n \n         matchedUsers = Arrays.asList(\n@@ -226,8 +236,11 @@ public void checkFailedLogins() {\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n \n@@ -241,8 +254,8 @@ public void checkFailedLogins() {\n \n         // authentications failed ...\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n \n@@ -279,8 +292,8 @@ public void checkFailedLogins() {\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(new Integer(2), readUserTO.getFailedLogins());\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n \n@@ -309,8 +322,11 @@ public void checkUserSuspension() {\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n \n@@ -324,8 +340,8 @@ public void checkUserSuspension() {\n \n         // authentications failed ...\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n \n@@ -376,8 +392,8 @@ public void checkUserSuspension() {\n         assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n \n         // last authentication before suspension\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n \n@@ -406,8 +422,8 @@ public void checkUserSuspension() {\n \n         // check for authentication\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n \n@@ -432,8 +448,8 @@ public void checkUserSuspension() {\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n "},{"sha":"0490acede5a78e0af0c83b193033f4b2288039cf","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -14,13 +14,13 @@\n  */\n package org.syncope.core.rest;\n \n-import java.io.IOException;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.IOException;\n import java.io.InputStream;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -33,7 +33,6 @@\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n@@ -73,8 +72,7 @@ public static void init() {\n         assertNotNull(bundlesDirectory);\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n     public void createWithException() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n@@ -305,7 +303,7 @@ public void getSchemaNames() {\n         assertFalse(schemaNames.isEmpty());\n \n         schemaNames = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"connector/schema/{resourceName}/list?showAll=true\",\n+                BASE_URL + \"connector/schema/{resourceName}/list\",\n                 String[].class, \"resource-testdb\"));\n         assertNotNull(schemaNames);\n         assertEquals(1, schemaNames.size());"},{"sha":"c05f5d5d6809623a701c13dd06386ca85aa7d260","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -24,7 +24,6 @@\n import java.util.Set;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n@@ -37,8 +36,7 @@\n \n public class ResourceTestITCase extends AbstractTest {\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n     public void createExistingResource() {\n         final String resourceName = \"ws-target-resource-1\";\n         ResourceTO resourceTO = new ResourceTO();\n@@ -212,9 +210,8 @@ public void createWithWrongMapping() {\n         assertNotNull(t);\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void createWithoutExtAttr() {\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void createWithoutExtAttr() {\n         String resourceName = \"ws-target-resource-create-wrong\";\n         ResourceTO resourceTO = new ResourceTO();\n "},{"sha":"8c99b5bc110875f3fd438a97548f346f9acac9bd","filename":"core/src/test/java/org/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":38,"deletions":11,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -13,15 +13,18 @@\n  */\n package org.syncope.core.rest;\n \n+import java.security.Principal;\n import static org.junit.Assert.*;\n \n import java.util.Arrays;\n import java.util.List;\n-import org.apache.commons.httpclient.UsernamePasswordCredentials;\n-import org.apache.commons.httpclient.auth.AuthScope;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.impl.client.DefaultHttpClient;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.client.CommonsClientHttpRequestFactory;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.AttributeCond;\n@@ -37,8 +40,11 @@ public class UserRequestTestITCase extends AbstractTest {\n \n     @Test\n     public void selfRead() {\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"user1\", \"password\"));\n \n         try {\n@@ -85,8 +91,23 @@ public void create() {\n         assertNotNull(configurationTO);\n \n         // 4. be anonymous\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY, null);\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n+                new Credentials() {\n+\n+                    @Override\n+                    public Principal getUserPrincipal() {\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public String getPassword() {\n+                        return null;\n+                    }\n+                });\n \n         // 5. now request user create works\n         UserRequestTO request = restTemplate.postForObject(\n@@ -136,8 +157,11 @@ public void update() {\n         }\n \n         // 3. auth as user just created\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(userTO.getUsername(),\n                 initialPassword));\n \n@@ -202,8 +226,11 @@ public void delete() {\n         }\n \n         // 3. auth as user just created\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(userTO.getUsername(),\n                 initialPassword));\n "},{"sha":"db5a11d6cf0eb43f10c0333d670f5184ab80b80d","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":97,"deletions":63,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -25,14 +25,14 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.httpclient.UsernamePasswordCredentials;\n-import org.apache.commons.httpclient.auth.AuthScope;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.impl.client.DefaultHttpClient;\n import org.junit.Test;\n import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.client.CommonsClientHttpRequestFactory;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.mod.MembershipMod;\n@@ -49,6 +49,7 @@\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowFormPropertyTO;\n import org.syncope.client.to.WorkflowFormTO;\n+import org.syncope.client.util.AttributableOperations;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -114,7 +115,7 @@ public static UserTO getSampleTO(final String email) {\n     }\n \n     @Test\n-    public final void createUserWithNoPropagation() {\n+    public void createUserWithNoPropagation() {\n         // get task list\n         List<PropagationTaskTO> tasks = Arrays.asList(\n                 restTemplate.getForObject(\n@@ -189,13 +190,14 @@ public final void createUserWithNoPropagation() {\n     }\n \n     @Test\n-    /* This test has been introduced to verify and solve the following issue:\n-     * http://code.google.com/p/syncope/issues/detail?id=172.\n-     * Creations of a new user without having a global password policy stored\n-     * into the local repository used to fail with a null pointer exception.\n-     * This bug has been fixed introducing a simple control.\n+    /*\n+     * This test has been introduced to verify and solve the following issue:\n+     * http://code.google.com/p/syncope/issues/detail?id=172. Creations of a new\n+     * user without having a global password policy stored into the local\n+     * repository used to fail with a null pointer exception. This bug has been\n+     * fixed introducing a simple control.\n      */\n-    public final void issue172() {\n+    public void issue172() {\n         PolicyTO policyTO = restTemplate.getForObject(\n                 BASE_URL + \"policy/read/{id}\", PasswordPolicyTO.class, 2L);\n \n@@ -238,7 +240,7 @@ public final void issue172() {\n     }\n \n     @Test\n-    public final void issue186() {\n+    public void issue186() {\n         // 1. create an user with strict mandatory attributes only\n         UserTO userTO = new UserTO();\n         userTO.setUsername(\"issue186@syncope-idm.org\");\n@@ -315,7 +317,7 @@ public final void issue186() {\n     }\n \n     @Test\n-    public final void issue147() {\n+    public void issue147() {\n         // 1. create an user wihtout role nor resources\n         UserTO userTO = getSampleTO(\"issue147@syncope-idm.org\");\n \n@@ -348,7 +350,7 @@ public final void issue147() {\n     }\n \n     @Test\n-    public final void createUserWithDbPropagation() {\n+    public void createUserWithDbPropagation() {\n         UserTO userTO = new UserTO();\n         userTO.setPassword(\"password\");\n         userTO.setUsername(\"yyy@yyy.yyy\");\n@@ -383,19 +385,17 @@ public final void createUserWithDbPropagation() {\n                 userTO.getPropagationStatusMap().get(\"resource-testdb\"));\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void createWithInvalidPassword() {\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void createWithInvalidPassword() {\n         UserTO userTO = getSampleTO(\"invalidpasswd@syncope-idm.org\");\n         userTO.setPassword(\"pass\");\n \n         restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void createWithInvalidUsername() {\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void createWithInvalidUsername() {\n         UserTO userTO = getSampleTO(\"invalidusername@syncope-idm.org\");\n         userTO.setUsername(\"us\");\n \n@@ -408,9 +408,8 @@ public final void createWithInvalidUsername() {\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void createWithInvalidPasswordByRes() {\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void createWithInvalidPasswordByRes() {\n         UserTO userTO = getSampleTO(\"invalidPwdByRes@passwd.com\");\n \n         // configured to be minLength=16\n@@ -423,9 +422,8 @@ public final void createWithInvalidPasswordByRes() {\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void createWithInvalidPasswordByRole() {\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void createWithInvalidPasswordByRole() {\n         UserTO userTO = getSampleTO(\"invalidPwdByRole@passwd.com\");\n \n         // configured to be minLength=16\n@@ -440,9 +438,8 @@ public final void createWithInvalidPasswordByRole() {\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void createWithException() {\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void createWithException() {\n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"userId\");\n         attributeTO.addValue(\"userId@nowhere.org\");\n@@ -455,7 +452,7 @@ public final void createWithException() {\n     }\n \n     @Test\n-    public final void create() {\n+    public void create() {\n         // get task list\n         List<PropagationTaskTO> tasks = Arrays.asList(\n                 restTemplate.getForObject(\n@@ -588,7 +585,7 @@ public final void create() {\n     }\n \n     @Test\n-    public final void createWithRequiredValueMissing() {\n+    public void createWithRequiredValueMissing() {\n         UserTO userTO = getSampleTO(\"a.b@c.it\");\n \n         AttributeTO type = null;\n@@ -644,7 +641,7 @@ public final void createWithRequiredValueMissing() {\n     }\n \n     @Test\n-    public final void createWithReject() {\n+    public void createWithReject() {\n         UserTO userTO = getSampleTO(\"createWithReject@syncope-idm.org\");\n \n         // User with role 9 are defined in workflow as subject to approval\n@@ -670,10 +667,12 @@ public final void createWithReject() {\n \n         // 3. claim task from user1, not in role 7 (designated for \n         // approval in workflow definition): fail\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n-                new UsernamePasswordCredentials(\n-                \"user1\", \"password\"));\n+        HttpComponentsClientHttpRequestFactory requestFactory =\n+                ((HttpComponentsClientHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\"user1\", \"password\"));\n \n         SyncopeClientException sce = null;\n         try {\n@@ -686,10 +685,9 @@ public final void createWithReject() {\n         assertNotNull(sce);\n \n         // 4. claim task from user4, in to role 7\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n-                new UsernamePasswordCredentials(\n-                \"user4\", \"password\"));\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).\n+                getCredentialsProvider().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\"user4\", \"password\"));\n \n         form = restTemplate.getForObject(\n                 BASE_URL + \"user/workflow/form/claim/{taskId}\",\n@@ -714,7 +712,7 @@ public final void createWithReject() {\n     }\n \n     @Test\n-    public final void createWithApproval() {\n+    public void createWithApproval() {\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n         UserTO userTO = getSampleTO(\"createWithApproval@syncope-idm.org\");\n@@ -793,7 +791,7 @@ public final void createWithApproval() {\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         try {\n             restTemplate.delete(BASE_URL + \"user/delete/{userId}\", 0);\n         } catch (HttpStatusCodeException e) {\n@@ -815,15 +813,15 @@ public final void delete() {\n     }\n \n     @Test\n-    public final void count() {\n+    public void count() {\n         Integer count = restTemplate.getForObject(\n                 BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n \n     @Test\n-    public final void searchCount() {\n+    public void searchCount() {\n         AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n         isNullCond.setSchema(\"loginDate\");\n         NodeCond searchCond = NodeCond.getLeafCond(isNullCond);\n@@ -835,7 +833,7 @@ public final void searchCount() {\n     }\n \n     @Test\n-    public final void list() {\n+    public void list() {\n         List<UserTO> users = Arrays.asList(\n                 restTemplate.getForObject(\n                 BASE_URL + \"user/list.json\", UserTO[].class));\n@@ -847,7 +845,7 @@ public final void list() {\n     }\n \n     @Test\n-    public final void paginatedList() {\n+    public void paginatedList() {\n         List<UserTO> users = Arrays.asList(restTemplate.getForObject(\n                 BASE_URL + \"user/list/{page}/{size}.json\",\n                 UserTO[].class, 1, 2));\n@@ -877,7 +875,7 @@ public final void paginatedList() {\n     }\n \n     @Test\n-    public final void read() {\n+    public void read() {\n         UserTO userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n \n@@ -887,7 +885,7 @@ public final void read() {\n     }\n \n     @Test\n-    public final void search() {\n+    public void search() {\n         // LIKE\n         AttributeCond fullnameLeafCond1 =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n@@ -934,7 +932,7 @@ public final void search() {\n     }\n \n     @Test\n-    public final void searchByUsernameAndId() {\n+    public void searchByUsernameAndId() {\n         final SyncopeUserCond usernameLeafCond =\n                 new SyncopeUserCond(SyncopeUserCond.Type.EQ);\n         usernameLeafCond.setSchema(\"username\");\n@@ -963,7 +961,7 @@ public final void searchByUsernameAndId() {\n     }\n \n     @Test\n-    public final void searchUserByResourceName() {\n+    public void searchUserByResourceName() {\n         ResourceCond ws2 = new ResourceCond();\n         ws2.setResourceName(\"ws-target-resource2\");\n \n@@ -993,7 +991,7 @@ public final void searchUserByResourceName() {\n     }\n \n     @Test\n-    public final void paginatedSearch() {\n+    public void paginatedSearch() {\n         // LIKE\n         AttributeCond fullnameLeafCond1 =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n@@ -1040,7 +1038,7 @@ public final void paginatedSearch() {\n     }\n \n     @Test\n-    public final void updateWithouPassword() {\n+    public void updateWithouPassword() {\n         UserTO userTO = getSampleTO(\"updatewithout@password.com\");\n \n         userTO = restTemplate.postForObject(\n@@ -1060,9 +1058,8 @@ public final void updateWithouPassword() {\n         assertFalse(userTO.getDerivedAttributeMap().containsKey(\"cn\"));\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void updateInvalidPassword() {\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void updateInvalidPassword() {\n         UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n \n         userTO = restTemplate.postForObject(\n@@ -1077,9 +1074,8 @@ public final void updateInvalidPassword() {\n                 BASE_URL + \"user/update\", userMod, UserTO.class);\n     }\n \n-    @Test\n-    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n-    public final void updateSamePassword() {\n+    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    public void updateSamePassword() {\n         UserTO userTO = getSampleTO(\"updatesame@password.com\");\n \n         userTO = restTemplate.postForObject(\n@@ -1095,7 +1091,7 @@ public final void updateSamePassword() {\n     }\n \n     @Test\n-    public final void update() {\n+    public void update() {\n         UserTO userTO = getSampleTO(\"g.h@t.com\");\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -1217,7 +1213,7 @@ public void updatePasswordOnly() {\n     }\n \n     @Test\n-    public final void verifyTaskRegistration() {\n+    public void verifyTaskRegistration() {\n         // get task list\n         List<PropagationTaskTO> tasks = Arrays.asList(\n                 restTemplate.getForObject(\n@@ -1332,7 +1328,7 @@ public final void verifyTaskRegistration() {\n     }\n \n     @Test\n-    public final void suspendReactivate() {\n+    public void suspendReactivate() {\n         UserTO userTO = getSampleTO(\"suspendReactivate@syncope-idm.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -1358,8 +1354,7 @@ public final void suspendReactivate() {\n         assertEquals(\"active\", userTO.getStatus());\n     }\n \n-    @ExpectedException(EmptyResultDataAccessException.class)\n-    @Test\n+    @Test(expected = EmptyResultDataAccessException.class)\n     public void issue213() {\n         UserTO userTO = getSampleTO(\"issue213@syncope-idm.org\");\n         userTO.addResource(\"resource-testdb\");\n@@ -1403,4 +1398,43 @@ public void issue234() {\n         assertNotNull(userTO);\n         assertEquals(\"1issue234@syncope-idm.org\", userTO.getUsername());\n     }\n+\n+    @Test\n+    public void issue270() {\n+        // 1. create a new user without virtual attributes\n+        UserTO original = getSampleTO(\"issue270@syncope-idm.org\");\n+        // be sure to remove all virtual attributes\n+        original.setVirtualAttributes(Collections.EMPTY_LIST);\n+\n+        original = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", original, UserTO.class);\n+\n+        assertNotNull(original);\n+        assertTrue(original.getVirtualAttributes().isEmpty());\n+\n+        UserTO toBeUpdated = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, original.getId());\n+\n+        AttributeTO virtual = new AttributeTO();\n+        virtual.setSchema(\"virtualdata\");\n+        virtual.addValue(\"virtualvalue\");\n+\n+        toBeUpdated.addVirtualAttribute(virtual);\n+\n+        // 2. try to update by adding a resource, but no password: must fail\n+        UserMod userMod = AttributableOperations.diff(toBeUpdated, original);\n+\n+        assertNotNull(userMod);\n+\n+        toBeUpdated = restTemplate.postForObject(\n+                BASE_URL + \"user/update\", userMod, UserTO.class);\n+\n+        assertNotNull(toBeUpdated);\n+        assertFalse(toBeUpdated.getVirtualAttributes().isEmpty());\n+        assertNotNull(toBeUpdated.getVirtualAttributes().get(0));\n+\n+        assertEquals(virtual.getSchema(),\n+                toBeUpdated.getVirtualAttributes().get(0).getSchema());\n+    }\n }"},{"sha":"78db75ef60ff1db4d86c43f6769d4e64be21e119","filename":"core/src/test/notifications/java/org/syncope/core/notification/NotificationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -30,7 +30,7 @@\n import org.springframework.security.authentication.TestingAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.authority.GrantedAuthorityImpl;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n@@ -131,7 +131,7 @@ public void setupSecurity() {\n                 new ArrayList<GrantedAuthority>();\n         for (Entitlement entitlement : entitlementDAO.findAll()) {\n             authorities.add(\n-                    new GrantedAuthorityImpl(entitlement.getName()));\n+                    new SimpleGrantedAuthority(entitlement.getName()));\n         }\n \n         UserDetails userDetails = new User(adminUser, \"FAKE_PASSWORD\","},{"sha":"658dcbd6f19d53205e08d9b30ee3234e8e22c107","filename":"core/src/test/resources/restClientContext.xml","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -17,23 +17,21 @@\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n-    <bean id=\"httpClientParams\" class=\"org.apache.commons.httpclient.params.HttpClientParams\">\n-        <property name=\"authenticationPreemptive\" value=\"true\"/>\n-        <property name=\"connectionManagerClass\"\n-                  value=\"org.apache.commons.httpclient.MultiThreadedHttpConnectionManager\"/>\n-    </bean>\n-    <bean id=\"httpClient\" class=\"org.apache.commons.httpclient.HttpClient\">\n+    <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager\"/>\n+    <bean id=\"httpClientParams\" class=\"org.apache.http.params.SyncBasicHttpParams\"/>\n+    <bean id=\"httpClient\" class=\"org.apache.http.impl.client.ContentEncodingHttpClient\">\n+        <constructor-arg ref=\"httpClientConnManager\"/>\n         <constructor-arg ref=\"httpClientParams\"/>\n     </bean>\n-    <bean id=\"httpClientFactory\" class=\"org.springframework.http.client.CommonsClientHttpRequestFactory\">\n+    <bean id=\"httpClientFactory\" class=\"org.springframework.http.client.HttpComponentsClientHttpRequestFactory\">\n         <constructor-arg ref=\"httpClient\"/>\n     </bean>\n     <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n         <constructor-arg ref=\"httpClientFactory\"/>\n \n         <property name=\"errorHandler\">\n             <bean id=\"syncopeClientErrorHandler\"\n-            class=\"org.syncope.client.validation.SyncopeClientErrorHandler\"/>\n+                  class=\"org.syncope.client.validation.SyncopeClientErrorHandler\"/>\n         </property>\n     </bean>\n "},{"sha":"2123c4343c63c586945fdea747015650e1f680a7","filename":"pom.xml","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ba0f5e5a6751c15c072cf931aacfe7a11a2330f/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=2ba0f5e5a6751c15c072cf931aacfe7a11a2330f","patch":"@@ -82,7 +82,8 @@\n \n         <commons-jexl.version>2.1.1</commons-jexl.version>\n         <commons-lang.version>2.6</commons-lang.version>\n-        <commons-httpclient.version>3.1</commons-httpclient.version>\n+        \n+        <httpcomponents.version>4.1.2</httpcomponents.version>\n \n         <javamail-specs.version>1.6</javamail-specs.version>\n         <javamail-provider.version>1.8.2</javamail-provider.version>\n@@ -197,9 +198,9 @@\n             </dependency>\n \n             <dependency>\n-                <groupId>commons-httpclient</groupId>\n-                <artifactId>commons-httpclient</artifactId>\n-                <version>${commons-httpclient.version}</version>\n+                <groupId>org.apache.httpcomponents</groupId>\n+                <artifactId>httpclient</artifactId>\n+                <version>${httpcomponents.version}</version>\n             </dependency>\n \n             <dependency>\n@@ -565,6 +566,8 @@\n                     <configuration>\n                         <source>${targetJdk}</source>\n                         <target>${targetJdk}</target>\n+                        <showWarnings>true</showWarnings>\n+                        <showDeprecation>true</showDeprecation>\n                     </configuration>\n                 </plugin>\n                 <plugin>"}]}