{"sha":"2c97d9d1993f282e5bbed67d9ba78d6243edb011","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJjOTdkOWQxOTkzZjI4MmU1YmJlZDY3ZDliYTc4ZDYyNDNlZGIwMTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-05-07T10:29:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-05-07T10:29:35Z"},"message":"[SYNCOPE-1552] Completing with support for JPA JSON","tree":{"sha":"aec7b5912a2b2128557cf60a264487f77a35c67e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/aec7b5912a2b2128557cf60a264487f77a35c67e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2c97d9d1993f282e5bbed67d9ba78d6243edb011","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c97d9d1993f282e5bbed67d9ba78d6243edb011","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2c97d9d1993f282e5bbed67d9ba78d6243edb011","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2c97d9d1993f282e5bbed67d9ba78d6243edb011/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"70bc86225cae2148426f13d7cd341b6db9c7ec15","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/70bc86225cae2148426f13d7cd341b6db9c7ec15","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/70bc86225cae2148426f13d7cd341b6db9c7ec15"}],"stats":{"total":193,"additions":104,"deletions":89},"files":[{"sha":"6ec8c852784eba675699e5e2d7e667ef357de3c1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -57,7 +57,7 @@ public static List<LogStatement> getLastLogStatements(final String appender, fin\n \n         return result;\n     }\n-    \n+\n     public static List<LoggerTO> listLogs() {\n         List<LoggerTO> logs = getService(LoggerService.class).list(LoggerType.LOG);\n         logs.sort(Comparator.comparing(LoggerTO::getKey));\n@@ -119,7 +119,8 @@ public List<AuditEntry> search(\n             final AuditElements.Result result,\n             final SortParam<String> sort) {\n \n-        AuditQuery query = new AuditQuery.Builder(key).\n+        AuditQuery query = new AuditQuery.Builder().\n+                entityKey(key).\n                 size(size).\n                 page(page).\n                 type(type).\n@@ -139,7 +140,8 @@ public int count(\n             final List<String> events,\n             final AuditElements.Result result) {\n \n-        AuditQuery query = new AuditQuery.Builder(key).\n+        AuditQuery query = new AuditQuery.Builder().\n+                entityKey(key).\n                 page(1).\n                 size(1).\n                 type(type)."},{"sha":"ab5fa6577054fb910e23e9efb0071909e4123ef0","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AuditQuery.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAuditQuery.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import io.swagger.v3.oas.annotations.media.ArraySchema;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n@@ -34,16 +35,16 @@ public class AuditQuery extends AbstractQuery {\n \n     public static class Builder extends AbstractQuery.Builder<AuditQuery, Builder> {\n \n-        public Builder(final String entityKey) {\n-            super();\n-            getInstance().setEntityKey(entityKey);\n-        }\n-\n         @Override\n         protected AuditQuery newInstance() {\n             return new AuditQuery();\n         }\n \n+        public Builder entityKey(final String entityKey) {\n+            getInstance().setEntityKey(entityKey);\n+            return this;\n+        }\n+\n         public Builder type(final AuditElements.EventCategoryType type) {\n             getInstance().setType(type);\n             return this;\n@@ -87,7 +88,8 @@ public Builder result(final AuditElements.Result result) {\n \n     private AuditElements.Result result;\n \n-    @Parameter(name = JAXRSService.PARAM_ENTITY_KEY, description = \"audit entity key to match\", schema =\n+    @Parameter(name = JAXRSService.PARAM_ENTITY_KEY, in = ParameterIn.QUERY,\n+            description = \"audit entity key to match\", schema =\n             @Schema(implementation = String.class, example = \"50592942-73ec-44c4-a377-e859524245e4\"))\n     public String getEntityKey() {\n         return entityKey;"},{"sha":"67157f1423d7f0a50338305f9acdfb6e4008bb50","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":16,"deletions":14,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -101,7 +101,7 @@ public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n \n     @Autowired\n     private AuditManager auditManager;\n-    \n+\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n@@ -421,22 +421,24 @@ public Pair<Integer, List<AuditEntry>> search(\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_CREATE + \"')\")\n     public void create(final AuditEntry auditEntry) {\n-        boolean auditRequested = auditManager.auditRequested(auditEntry.getWho(),\n-            auditEntry.getLogger().getType(),\n-            auditEntry.getLogger().getCategory(),\n-            auditEntry.getLogger().getSubcategory(),\n-            auditEntry.getLogger().getEvent());\n-\n-        if (auditRequested) {\n-            auditManager.audit(auditEntry.getWho(),\n+        boolean auditRequested = auditManager.auditRequested(\n+                auditEntry.getWho(),\n                 auditEntry.getLogger().getType(),\n                 auditEntry.getLogger().getCategory(),\n                 auditEntry.getLogger().getSubcategory(),\n-                auditEntry.getLogger().getEvent(),\n-                auditEntry.getLogger().getResult(),\n-                auditEntry.getBefore(),\n-                auditEntry.getOutput(),\n-                auditEntry.getInputs());\n+                auditEntry.getLogger().getEvent());\n+\n+        if (auditRequested) {\n+            auditManager.audit(\n+                    auditEntry.getWho(),\n+                    auditEntry.getLogger().getType(),\n+                    auditEntry.getLogger().getCategory(),\n+                    auditEntry.getLogger().getSubcategory(),\n+                    auditEntry.getLogger().getEvent(),\n+                    auditEntry.getLogger().getResult(),\n+                    auditEntry.getBefore(),\n+                    auditEntry.getOutput(),\n+                    auditEntry.getInputs());\n         }\n     }\n "},{"sha":"cd9be153dd0e4123160a8a58e3fd60a3c9fcbd52","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONLoggerDAO.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONLoggerDAO.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -29,17 +29,23 @@ private static class MyMessageCriteriaBuilder extends JSONMessageCriteriaBuilder\n \n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n-            query.append('(').append(AUDIT_MESSAGE_COLUMN).append(\" -> '$.before' LIKE '%\").append(entityKey).\n-                    append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" -> '$.input' LIKE '%\").append(entityKey).\n-                    append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" -> '$.output' LIKE '%\").append(entityKey).\n-                    append(\"%')\");\n+            if (entityKey != null) {\n+                query.append('(').append(AUDIT_MESSAGE_COLUMN).append(\"->'$.before' LIKE '%\").append(entityKey).\n+                        append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\"->'$.input' LIKE '%\").append(entityKey).\n+                        append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\"->'$.output' LIKE '%\").append(entityKey).\n+                        append(\"%')\");\n+            }\n \n             if (!containers.isEmpty()) {\n-                query.append(\" AND (\").\n-                        append(containers.stream().map(container -> \"JSON_CONTAINS(\" + AUDIT_MESSAGE_COLUMN + \", '\"\n+                if (entityKey != null) {\n+                    query.append(\" AND (\");\n+                }\n+                query.append(containers.stream().map(container -> \"JSON_CONTAINS(\" + AUDIT_MESSAGE_COLUMN + \", '\"\n                         + POJOHelper.serialize(container).replace(\"'\", \"''\")\n-                        + \"')\").collect(Collectors.joining(\" OR \"))).\n-                        append(')');\n+                        + \"')\").collect(Collectors.joining(\" OR \")));\n+                if (entityKey != null) {\n+                    query.append(')');\n+                }\n             }\n \n             return query.toString();"},{"sha":"7663f7eabe92d792c42584c07c92e18527a9faeb","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONLoggerDAO.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONLoggerDAO.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -30,17 +30,23 @@ private static class PGMessageCriteriaBuilder extends JSONMessageCriteriaBuilder\n \n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n-            query.append('(').append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'before' LIKE '%\").append(entityKey).\n-                    append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'input' LIKE '%\").append(entityKey).\n-                    append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'output' LIKE '%\").append(entityKey).\n-                    append(\"%')\");\n+            if (entityKey != null) {\n+                query.append('(').append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'before' LIKE '%\").append(entityKey).\n+                        append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'input' LIKE '%\").append(entityKey).\n+                        append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'output' LIKE '%\").append(entityKey).\n+                        append(\"%')\");\n+            }\n \n             if (!containers.isEmpty()) {\n-                query.append(\" AND (\").\n-                        append(containers.stream().map(container -> AUDIT_MESSAGE_COLUMN + \" @> '\"\n+                if (entityKey != null) {\n+                    query.append(\" AND (\");\n+                }\n+                query.append(containers.stream().map(container -> AUDIT_MESSAGE_COLUMN + \" @> '\"\n                         + POJOHelper.serialize(container).replace(\"'\", \"''\")\n-                        + \"'::jsonb\").collect(Collectors.joining(\" OR \"))).\n-                        append(')');\n+                        + \"'::jsonb\").collect(Collectors.joining(\" OR \")));\n+                if (entityKey != null) {\n+                    query.append(')');\n+                }\n             }\n \n             return query.toString();"},{"sha":"1683d0b5c649cc30987ecc39439ea1bf1e755287","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -2382,6 +2382,8 @@ $$ }&#10;\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AUTHENTICATION]:[validate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n "},{"sha":"a596eeb8fea466a36ab103ec72f277cc70446d7f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/DomainConfFactory.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FDomainConfFactory.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -24,12 +24,14 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Map;\n import java.util.Objects;\n-\n import javax.persistence.EntityManagerFactory;\n import javax.sql.DataSource;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n import org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n@@ -44,9 +46,6 @@\n import org.springframework.orm.jpa.JpaTransactionManager;\n import org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.persistence.api.DomainRegistry;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @Component\n public class DomainConfFactory implements DomainRegistry, EnvironmentAware {\n@@ -84,7 +83,6 @@ private static void registerBeanDefinition(final String name, final BeanDefiniti\n \n     @Override\n     public void register(final Domain domain) {\n-        // localDomainDataSource\n         HikariConfig hikariConfig = new HikariConfig();\n         hikariConfig.setDriverClassName(domain.getJdbcDriver());\n         hikariConfig.setJdbcUrl(domain.getJdbcURL());\n@@ -95,14 +93,12 @@ public void register(final Domain domain) {\n         hikariConfig.setMaximumPoolSize(domain.getPoolMaxActive());\n         hikariConfig.setMinimumIdle(domain.getPoolMinIdle());\n \n-        HikariDataSource localDomainDataSource = new HikariDataSource(hikariConfig);\n-\n         // domainDataSource\n         registerBeanDefinition(\n                 domain.getKey() + \"DataSource\",\n                 BeanDefinitionBuilder.rootBeanDefinition(JndiObjectFactoryBean.class).\n                         addPropertyValue(\"jndiName\", \"java:comp/env/jdbc/syncope\" + domain.getKey() + \"DataSource\").\n-                        addPropertyValue(\"defaultObject\", localDomainDataSource).\n+                        addPropertyValue(\"defaultObject\", new HikariDataSource(hikariConfig)).\n                         getBeanDefinition());\n         DataSource initedDataSource = ApplicationContextProvider.getBeanFactory().\n                 getBean(domain.getKey() + \"DataSource\", DataSource.class);\n@@ -137,8 +133,8 @@ public void register(final Domain domain) {\n         if (env.containsProperty(\"openjpaMetaDataFactory\")) {\n             emf.addPropertyValue(\"jpaPropertyMap\", Map.of(\n                     \"openjpa.MetaDataFactory\",\n-                    Objects.requireNonNull(env.getProperty(\"openjpaMetaDataFactory\"))\n-                        .replace(\"##orm##\", domain.getOrm())));\n+                    Objects.requireNonNull(env.getProperty(\"openjpaMetaDataFactory\")).\n+                            replace(\"##orm##\", domain.getOrm())));\n         }\n         registerBeanDefinition(domain.getKey() + \"EntityManagerFactory\", emf.getBeanDefinition());\n         ApplicationContextProvider.getBeanFactory().getBean(domain.getKey() + \"EntityManagerFactory\");"},{"sha":"954386e171d7ee1ce15abff50b961dabc2407dea","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/MasterDomain.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -59,7 +59,7 @@ public class MasterDomain {\n \n     @Autowired\n     private Environment env;\n-    \n+\n     @Value(\"${Master.driverClassName}\")\n     private String driverClassName;\n \n@@ -96,9 +96,9 @@ public class MasterDomain {\n     @Value(\"${content.directory}\")\n     private String contentDirectory;\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"localMasterDataSource\")\n-    public DataSource localMasterDataSource() {\n+    @Bean(name = \"MasterDataSource\")\n+    @ConditionalOnMissingBean(name = \"MasterDataSource\")\n+    public JndiObjectFactoryBean masterDataSource() {\n         HikariConfig hikariConfig = new HikariConfig();\n         hikariConfig.setDriverClassName(driverClassName);\n         hikariConfig.setJdbcUrl(url);\n@@ -107,15 +107,10 @@ public DataSource localMasterDataSource() {\n         hikariConfig.setTransactionIsolation(transactionIsolation);\n         hikariConfig.setMaximumPoolSize(maximumPoolSize);\n         hikariConfig.setMinimumIdle(minimumIdle);\n-        return new HikariDataSource(hikariConfig);\n-    }\n \n-    @Bean(name = \"MasterDataSource\")\n-    @ConditionalOnMissingBean(name = \"MasterDataSource\")\n-    public JndiObjectFactoryBean masterDataSource() {\n         JndiObjectFactoryBean masterDataSource = new JndiObjectFactoryBean();\n         masterDataSource.setJndiName(\"java:comp/env/jdbc/syncopeMasterDataSource\");\n-        masterDataSource.setDefaultObject(localMasterDataSource());\n+        masterDataSource.setDefaultObject(new HikariDataSource(hikariConfig));\n         return masterDataSource;\n     }\n \n@@ -151,21 +146,21 @@ public DomainEntityManagerFactoryBean masterEntityManagerFactory() {\n         DomainEntityManagerFactoryBean masterEntityManagerFactory = new DomainEntityManagerFactoryBean();\n         masterEntityManagerFactory.setMappingResources(orm);\n         masterEntityManagerFactory.setPersistenceUnitName(\"Master\");\n-        \n+\n         masterEntityManagerFactory.setDataSource(Objects.requireNonNull((DataSource) masterDataSource().getObject()));\n         masterEntityManagerFactory.setJpaVendorAdapter(vendorAdapter);\n         masterEntityManagerFactory.setCommonEntityManagerFactoryConf(commonEMFConf);\n \n         if (env.containsProperty(\"openjpaMetaDataFactory\")) {\n             masterEntityManagerFactory.setJpaPropertyMap(Map.of(\n-                \"openjpa.MetaDataFactory\",\n-                Objects.requireNonNull(env.getProperty(\"openjpaMetaDataFactory\")).replace(\"##orm##\", orm)));\n+                    \"openjpa.MetaDataFactory\",\n+                    Objects.requireNonNull(env.getProperty(\"openjpaMetaDataFactory\")).replace(\"##orm##\", orm)));\n         }\n \n         return masterEntityManagerFactory;\n     }\n \n-    @Bean(name = {\"MasterTransactionManager\", \"Master\"})\n+    @Bean(name = { \"MasterTransactionManager\", \"Master\" })\n     @ConditionalOnMissingBean(name = \"MasterTransactionManager\")\n     public PlatformTransactionManager transactionManager() {\n         return new JpaTransactionManager(Objects.requireNonNull(masterEntityManagerFactory().getObject()));\n@@ -184,7 +179,7 @@ public ResourceWithFallbackLoader masterProperties() {\n     @ConditionalOnMissingBean(name = \"MasterContentXML\")\n     public InputStream masterContentXML() throws IOException {\n         ResourceWithFallbackLoader masterContentXML =\n-            ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n+                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n         masterContentXML.setPrimary(\"file:\" + contentDirectory + \"/domains/MasterContent.xml\");\n         masterContentXML.setFallback(\"classpath:domains/MasterContent.xml\");\n         return masterContentXML.getResource().getInputStream();\n@@ -194,7 +189,7 @@ public InputStream masterContentXML() throws IOException {\n     @ConditionalOnMissingBean(name = \"MasterKeymasterConfParamsJSON\")\n     public InputStream masterKeymasterConfParamsJSON() throws IOException {\n         ResourceWithFallbackLoader keymasterConfParamsJSON =\n-            ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n+                ctx.getBeanFactory().createBean(ResourceWithFallbackLoader.class);\n         keymasterConfParamsJSON.setPrimary(\"file:\" + contentDirectory + \"/domains/MasterKeymasterConfParams.json\");\n         keymasterConfParamsJSON.setFallback(\"classpath:domains/MasterKeymasterConfParams.json\");\n         return keymasterConfParamsJSON.getResource().getInputStream();"},{"sha":"c96481a748e70b406185cbd5b1d6da492a527822","filename":"fit/core-reference/src/main/resources/application-embedded.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fapplication-embedded.properties?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -20,8 +20,9 @@ spring.devtools.livereload.enabled=false\n spring.devtools.restart.enabled=false\n \n # H2\n-#spring.h2.console.enabled=true\n-#spring.h2.console.path=/h2\n+spring.h2.console.enabled=true\n+spring.h2.console.path=/h2\n+\n # Datasource\n spring.datasource.url=jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=-1\n spring.datasource.username=sa"},{"sha":"3fb543b29864431472382797638f83508472eabc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -77,7 +77,7 @@ public void userReadAndSearchYieldsNoAudit() {\n         UserTO userTO = createUser(UserITCase.getUniqueSample(\"audit@syncope.org\")).getEntity();\n         assertNotNull(userTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder(userTO.getKey()).build();\n+        AuditQuery query = new AuditQuery.Builder().entityKey(userTO.getKey()).build();\n         List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n         assertEquals(1, entries.size());\n \n@@ -98,7 +98,7 @@ public void findByUser() {\n         UserTO userTO = createUser(UserITCase.getUniqueSample(\"audit@syncope.org\")).getEntity();\n         assertNotNull(userTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder(userTO.getKey()).orderBy(\"event_date desc\").\n+        AuditQuery query = new AuditQuery.Builder().entityKey(userTO.getKey()).orderBy(\"event_date desc\").\n                 page(1).size(1).build();\n         AuditEntry entry = query(query, MAX_WAIT_SECONDS, true);\n         assertNotNull(entry);\n@@ -110,7 +110,8 @@ public void findByUserAndOther() {\n         UserTO userTO = createUser(UserITCase.getUniqueSample(\"audit-2@syncope.org\")).getEntity();\n         assertNotNull(userTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder(userTO.getKey()).\n+        AuditQuery query = new AuditQuery.Builder().\n+                entityKey(userTO.getKey()).\n                 orderBy(\"event_date desc\").\n                 page(1).\n                 size(1).\n@@ -129,7 +130,7 @@ public void findByGroup() {\n         GroupTO groupTO = createGroup(GroupITCase.getBasicSample(\"AuditGroup\")).getEntity();\n         assertNotNull(groupTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder(groupTO.getKey()).orderBy(\"event_date desc\").\n+        AuditQuery query = new AuditQuery.Builder().entityKey(groupTO.getKey()).orderBy(\"event_date desc\").\n                 page(1).size(1).build();\n         AuditEntry entry = query(query, MAX_WAIT_SECONDS, true);\n         assertNotNull(entry);\n@@ -141,7 +142,7 @@ public void groupReadAndSearchYieldsNoAudit() {\n         GroupTO groupTO = createGroup(GroupITCase.getBasicSample(\"AuditGroupSearch\")).getEntity();\n         assertNotNull(groupTO.getKey());\n \n-        AuditQuery query = new AuditQuery.Builder(groupTO.getKey()).build();\n+        AuditQuery query = new AuditQuery.Builder().entityKey(groupTO.getKey()).build();\n         List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n         assertEquals(1, entries.size());\n \n@@ -161,7 +162,7 @@ public void groupReadAndSearchYieldsNoAudit() {\n     public void findByAnyObject() {\n         AnyObjectTO anyObjectTO = createAnyObject(AnyObjectITCase.getSample(\"Italy\")).getEntity();\n         assertNotNull(anyObjectTO.getKey());\n-        AuditQuery query = new AuditQuery.Builder(anyObjectTO.getKey()).orderBy(\"event_date desc\").\n+        AuditQuery query = new AuditQuery.Builder().entityKey(anyObjectTO.getKey()).orderBy(\"event_date desc\").\n                 page(1).size(1).build();\n         AuditEntry entry = query(query, MAX_WAIT_SECONDS, true);\n         assertNotNull(entry);\n@@ -173,7 +174,7 @@ public void anyObjectReadAndSearchYieldsNoAudit() {\n         AnyObjectTO anyObjectTO = createAnyObject(AnyObjectITCase.getSample(\"USA\")).getEntity();\n         assertNotNull(anyObjectTO);\n \n-        AuditQuery query = new AuditQuery.Builder(anyObjectTO.getKey()).build();\n+        AuditQuery query = new AuditQuery.Builder().entityKey(anyObjectTO.getKey()).build();\n         List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n         assertEquals(1, entries.size());\n \n@@ -192,7 +193,8 @@ public void anyObjectReadAndSearchYieldsNoAudit() {\n     public void findByConnector() throws JsonProcessingException {\n         String connectorKey = \"74141a3b-0762-4720-a4aa-fc3e374ef3ef\";\n \n-        AuditQuery query = new AuditQuery.Builder(connectorKey).\n+        AuditQuery query = new AuditQuery.Builder().\n+                entityKey(connectorKey).\n                 orderBy(\"event_date desc\").\n                 type(AuditElements.EventCategoryType.LOGIC).\n                 category(\"ConnectorLogic\")."},{"sha":"960da372206edcbe3e04c7c58ee466d4d9737cf5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2c97d9d1993f282e5bbed67d9ba78d6243edb011/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2c97d9d1993f282e5bbed67d9ba78d6243edb011/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=2c97d9d1993f282e5bbed67d9ba78d6243edb011","patch":"@@ -38,7 +38,6 @@\n import java.util.List;\n import java.util.Properties;\n import java.util.UUID;\n-\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n@@ -276,25 +275,27 @@ private static boolean logFileContains(final Path path, final String message, fi\n \n     @Test\n     public void saveAuditEvent() {\n-        AuditLoggerName logger = new AuditLoggerName(EventCategoryType.WA, \"LoggerLogic\",\n-            AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(), \"validate\",\n-            AuditElements.Result.SUCCESS);\n         AuditEntry auditEntry = new AuditEntry();\n-        String who = \"syncope-user \" + UUID.randomUUID().toString();\n-        auditEntry.setWho(who);\n-        auditEntry.setLogger(logger);\n+        auditEntry.setWho(\"syncope-user \" + UUID.randomUUID().toString());\n+        auditEntry.setLogger(new AuditLoggerName(\n+                EventCategoryType.WA,\n+                \"LoggerLogic\",\n+                AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n+                \"validate\",\n+                AuditElements.Result.SUCCESS));\n         auditEntry.setDate(new Date());\n         auditEntry.setBefore(UUID.randomUUID().toString());\n         auditEntry.setOutput(UUID.randomUUID().toString());\n         assertDoesNotThrow(() -> loggerService.create(auditEntry));\n \n-        AuditQuery query = new AuditQuery();\n-        query.setSize(1);\n-        query.setType(auditEntry.getLogger().getType());\n-        query.setResult(auditEntry.getLogger().getResult());\n-        query.setCategory(auditEntry.getLogger().getCategory());\n-        query.setEvents(List.of(auditEntry.getLogger().getEvent()));\n-        PagedResult<AuditEntry> events = loggerService.search(query);\n+        PagedResult<AuditEntry> events = loggerService.search(new AuditQuery.Builder().\n+                size(1).\n+                type(auditEntry.getLogger().getType()).\n+                category(auditEntry.getLogger().getCategory()).\n+                subcategory(auditEntry.getLogger().getSubcategory()).\n+                event(auditEntry.getLogger().getEvent()).\n+                result(auditEntry.getLogger().getResult()).\n+                build());\n         assertNotNull(events);\n         assertEquals(1, events.getSize());\n     }"}]}