{"sha":"f5bea20150bbe32a60bd88d222a0f5d9b806909f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY1YmVhMjAxNTBiYmUzMmE2MGJkODhkMjIyYTBmNWQ5YjgwNjkwOWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-05-22T13:38:33Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-05-22T13:38:33Z"},"message":"[SYNCOPE-86] Fixed incorrect NotificationTask merge\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1341472 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8493eee9845f7be112839b1c820f87759f2f4bc6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8493eee9845f7be112839b1c820f87759f2f4bc6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f5bea20150bbe32a60bd88d222a0f5d9b806909f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f5bea20150bbe32a60bd88d222a0f5d9b806909f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f5bea20150bbe32a60bd88d222a0f5d9b806909f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f5bea20150bbe32a60bd88d222a0f5d9b806909f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"461ea51472d1978afcbaa4484b05ba417e444c72","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/461ea51472d1978afcbaa4484b05ba417e444c72","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/461ea51472d1978afcbaa4484b05ba417e444c72"}],"stats":{"total":117,"additions":91,"deletions":26},"files":[{"sha":"ed85e873e5d678d32e84d12bbf3d7186eda08c31","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=f5bea20150bbe32a60bd88d222a0f5d9b806909f","patch":"@@ -246,15 +246,18 @@ private String getRecipientEmail(\n     }\n \n     /**\n-     * Store execution of a NotificationTask.\n+     * Store execution of a NotificationTask and update latest execution status of related NotificationTask.\n      *\n      * @param execution task execution.\n      * @return merged task execution.\n      */\n-    public TaskExec storeExecution(final TaskExec execution) {\n+    public TaskExec storeExecAndUpdateLatestExecStatus(final TaskExec execution) {\n         NotificationTask task = taskDAO.find(execution.getTask().getId());\n-        execution.setTask(task);\n-        return taskExecDAO.save(execution);\n+        task.addExec(execution);\n+        task.setLatestExecStatus(execution.getStatus());\n+        task = taskDAO.save(task);\n+        // NotificationTasks always have a single execution at most\n+        return task.getExecs().get(0);\n     }\n \n     /**"},{"sha":"422249573dd9cf1710c5e25f60287c315675b13a","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=f5bea20150bbe32a60bd88d222a0f5d9b806909f","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest.data;\n \n-import java.io.InvalidClassException;\n import javassist.NotFoundException;\n import org.apache.commons.lang.StringUtils;\n import org.quartz.Scheduler;\n@@ -50,7 +49,6 @@\n import org.apache.syncope.core.persistence.beans.Task;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.persistence.dao.TaskExecDAO;\n import org.apache.syncope.core.util.JexlUtil;\n import org.apache.syncope.core.util.TaskUtil;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n@@ -67,9 +65,6 @@ public class TaskDataBinder {\n \n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n \n-    @Autowired\n-    private TaskExecDAO taskExecDAO;\n-\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n@@ -229,8 +224,8 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n         switch (taskUtil) {\n             case PROPAGATION:\n                 if (!(task instanceof PropagationTask)) {\n-                    throw new ClassCastException(\"taskUtil is type Propagation but task is not PropagationTask: \" + task.\n-                            getClass().getName());\n+                    throw new ClassCastException(\"taskUtil is type Propagation but task is not PropagationTask: \"\n+                            + task.getClass().getName());\n                 }\n \n                 ((PropagationTaskTO) taskTO).setResource(((PropagationTask) task).getResource().getName());"},{"sha":"81fdd73d1643c5c2f7eae59934d8d6969e850601","filename":"core/src/main/java/org/apache/syncope/core/scheduling/NotificationJob.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java?ref=f5bea20150bbe32a60bd88d222a0f5d9b806909f","patch":"@@ -188,7 +188,6 @@ public TaskExec executeSingle(final NotificationTask task) {\n                     e.printStackTrace(new PrintWriter(exceptionWriter));\n \n                     if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n-\n                         execution.setMessage(exceptionWriter.toString());\n                     }\n \n@@ -201,11 +200,11 @@ public TaskExec executeSingle(final NotificationTask task) {\n         }\n \n         if (hasToBeRegistered(execution)) {\n-            execution = notificationManager.storeExecution(execution);\n+            execution = notificationManager.storeExecAndUpdateLatestExecStatus(execution);\n+        } else {\n+            notificationManager.updateLatestExecStatus(execution);\n         }\n \n-        notificationManager.updateLatestExecStatus(execution);\n-\n         return execution;\n     }\n "},{"sha":"b5ae18b1a0df5099803491040d1ed5022c87c936","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":74,"deletions":5,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=f5bea20150bbe32a60bd88d222a0f5d9b806909f","patch":"@@ -23,11 +23,14 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.client.search.MembershipCond;\n+import org.apache.syncope.client.search.NodeCond;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.client.to.MembershipTO;\n+import org.apache.syncope.client.to.NotificationTO;\n import org.apache.syncope.client.to.NotificationTaskTO;\n import org.apache.syncope.client.to.TaskExecTO;\n import org.apache.syncope.client.to.PropagationTaskTO;\n@@ -37,6 +40,8 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.core.scheduling.TestSyncJobActions;\n+import org.apache.syncope.types.IntMappingType;\n+import org.apache.syncope.types.TraceLevel;\n \n public class TaskTestITCase extends AbstractTest {\n \n@@ -464,12 +469,11 @@ public void dryRun() {\n     public void issueSYNCOPE81() {\n         NotificationTaskTO taskTO = restTemplate.getForObject(\n                 BASE_URL + \"task/read/{taskId}\", NotificationTaskTO.class, 8L);\n-\n         assertNotNull(taskTO);\n \n-        int executionNumber = taskTO.getExecutions().size();\n+        int executions = taskTO.getExecutions().size();\n \n-        if (executionNumber == 0) {\n+        if (executions == 0) {\n             // generate an execution in order to verify the deletion of a notification task with one or more executions\n \n             TaskExecTO execution = restTemplate.postForObject(\n@@ -479,7 +483,7 @@ public void issueSYNCOPE81() {\n             int i = 0;\n             int maxit = 50;\n \n-            // wait for sync completion (executions incremented)\n+            // wait for task exec completion (executions incremented)\n             do {\n                 try {\n                     Thread.sleep(1000);\n@@ -493,12 +497,77 @@ public void issueSYNCOPE81() {\n                 assertNotNull(taskTO.getExecutions());\n \n                 i++;\n-            } while (executionNumber == taskTO.getExecutions().size() && i < maxit);\n+            } while (executions == taskTO.getExecutions().size() && i < maxit);\n \n             assertFalse(taskTO.getExecutions().isEmpty());\n         }\n \n         taskTO = restTemplate.getForObject(BASE_URL + \"task/delete/{taskId}\", NotificationTaskTO.class, taskTO.getId());\n         assertNotNull(taskTO);\n     }\n+\n+    @Test\n+    public void issueSYNCOPE86() {\n+        // 1. create suitable notification for subsequent tests\n+        NotificationTO notification = new NotificationTO();\n+        notification.setTraceLevel(TraceLevel.FAILURES);\n+        notification.addEvent(\"create\");\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setRoleId(7L);\n+        notification.setAbout(NodeCond.getLeafCond(membCond));\n+\n+        membCond = new MembershipCond();\n+        membCond.setRoleId(8L);\n+        notification.setRecipients(NodeCond.getLeafCond(membCond));\n+        notification.setSelfAsRecipient(true);\n+\n+        notification.setRecipientAttrName(\"email\");\n+        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+\n+        String sender = \"syncope86@syncope.apache.org\";\n+        notification.setSender(sender);\n+        String subject = \"Test notification SYNCOPE-86\";\n+        notification.setSubject(subject);\n+        notification.setTemplate(\"optin\");\n+\n+        notification = restTemplate.postForObject(BASE_URL + \"notification/create.json\",\n+                notification, NotificationTO.class);\n+        assertNotNull(notification);\n+\n+        // 2. create user\n+        UserTO userTO = UserTestITCase.getSampleTO(\"syncope86@syncope.apache.org\");\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\", userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        // 3. get NotificationTaskTO for user just created\n+        List<NotificationTaskTO> tasks = Arrays.asList(restTemplate.getForObject(BASE_URL + \"task/notification/list\",\n+                NotificationTaskTO[].class));\n+        assertNotNull(tasks);\n+        assertFalse(tasks.isEmpty());\n+\n+        NotificationTaskTO taskTO = null;\n+        for (NotificationTaskTO task : tasks) {\n+            if (sender.equals(task.getSender())) {\n+                taskTO = task;\n+            }\n+        }\n+        assertNotNull(taskTO);\n+        assertTrue(taskTO.getExecutions().isEmpty());\n+\n+        // 4. execute the generated NotificationTask\n+        TaskExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"task/execute/{taskId}\", null, TaskExecTO.class, taskTO.getId());\n+        assertNotNull(execution);\n+\n+        // 5. verify\n+        taskTO = restTemplate.getForObject(BASE_URL + \"task/read/{taskId}\", NotificationTaskTO.class,\n+                taskTO.getId());\n+        assertNotNull(taskTO);\n+        assertEquals(1, taskTO.getExecutions().size());\n+    }\n }"},{"sha":"6c32b02d8cff8d50960752026d3b6065ea517a4d","filename":"core/src/test/notifications/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=f5bea20150bbe32a60bd88d222a0f5d9b806909f","patch":"@@ -87,8 +87,7 @@ public class NotificationTest {\n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            NotificationTest.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(NotificationTest.class);\n \n     private static String smtpHost;\n "},{"sha":"691e4202a280dc71d2f70ed7335013412943b7ea","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f5bea20150bbe32a60bd88d222a0f5d9b806909f/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=f5bea20150bbe32a60bd88d222a0f5d9b806909f","patch":"@@ -27,7 +27,7 @@ under the License.\n   <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"MD5\"/>\n   <SyncopeConf confKey=\"createRequest.allowed\" confValue=\"true\"/>\n \n-    <!-- sample policies -->\n+  <!-- sample policies -->\n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"sync policy 1\" type=\"GLOBAL_SYNC\" specification=\"%3Corg.apache.syncope.types.SyncPolicySpec%2F%3E\"/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" specification=\"%3Corg.apache.syncope.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E1%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E8%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Efalse%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Efalse%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Efalse%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Efalse%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Efalse%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Efalse%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.types.PasswordPolicySpec%3E\"/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3Corg.apache.syncope.types.SyncPolicySpec%3E%0A++%3CalternativeSearchAttrs%3E%0A++++%3Cstring%3Eusername%3C%2Fstring%3E%0A++++%3Cstring%3Efirstname%3C%2Fstring%3E%0A++%3C%2FalternativeSearchAttrs%3E%0A++%3CconflictResolutionAction%3EALL%3C%2FconflictResolutionAction%3E%0A%3C%2Forg.apache.syncope.types.SyncPolicySpec%3E\"/>\n@@ -492,11 +492,11 @@ under the License.\n   <Task DTYPE=\"SyncTask\" id=\"7\" resource_name=\"resource-testdb\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         jobClassName=\"org.apache.syncope.core.scheduling.SyncJob\"/>\n-\n-  <Task DTYPE=\"NotificationTask\" id=\"8\" sender=\"admin@prova.org\" subject=\"notification\" textBody=\"\" htmlBody=\"\" traceLevel=\"ALL\"/>\n+  <Task DTYPE=\"NotificationTask\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for SYNCOPE-81\" \n+        textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <NotificationTask_Recipients notificationtask_id=\"8\" element=\"recipient@prova.org\"/>\n \n-    <!-- Authentication and authorization -->\n+  <!-- Authentication and authorization -->\n   <Entitlement name=\"base\"/>\n   <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n   <Entitlement name=\"SCHEMA_CREATE\"/>"}]}