{"sha":"a4c9cfbecc96ef444e58348da772a891c7afef01","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE0YzljZmJlY2M5NmVmNDQ0ZTU4MzQ4ZGE3NzJhODkxYzdhZmVmMDE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-07-18T12:01:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-07-18T12:01:19Z"},"message":"[SYNCOPE-906] Feature provided","tree":{"sha":"e6679d2485d1177de02c3091e331dceb4bbb0da6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e6679d2485d1177de02c3091e331dceb4bbb0da6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a4c9cfbecc96ef444e58348da772a891c7afef01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a4c9cfbecc96ef444e58348da772a891c7afef01","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a4c9cfbecc96ef444e58348da772a891c7afef01","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a4c9cfbecc96ef444e58348da772a891c7afef01/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"31dfc1c51663ee08588dbf671a95148cee257c1a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31dfc1c51663ee08588dbf671a95148cee257c1a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/31dfc1c51663ee08588dbf671a95148cee257c1a"}],"stats":{"total":113,"additions":74,"deletions":39},"files":[{"sha":"1d09753b519970e26988aadd7fa162031ed84722","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FMembershipCond.java?ref=a4c9cfbecc96ef444e58348da772a891c7afef01","patch":"@@ -22,18 +22,18 @@ public class MembershipCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = -728155256293925989L;\n \n-    private String groupKey;\n+    private String group;\n \n-    public String getGroupKey() {\n-        return groupKey;\n+    public String getGroup() {\n+        return group;\n     }\n \n-    public void setGroupKey(final String groupKey) {\n-        this.groupKey = groupKey;\n+    public void setGroup(final String group) {\n+        this.group = group;\n     }\n \n     @Override\n     public final boolean isValid() {\n-        return groupKey != null;\n+        return group != null;\n     }\n }"},{"sha":"069278ed3bc5bcc6c77a9183ff245878ee0a0294","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipCond.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipCond.java?ref=a4c9cfbecc96ef444e58348da772a891c7afef01","patch":"@@ -22,18 +22,18 @@ public class RelationshipCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = 6865985945516722103L;\n \n-    private String anyObjectKey;\n+    private String anyObject;\n \n-    public String getAnyObjectKey() {\n-        return anyObjectKey;\n+    public String getAnyObject() {\n+        return anyObject;\n     }\n \n-    public void setAnyObjectKey(final String anyObjectKey) {\n-        this.anyObjectKey = anyObjectKey;\n+    public void setAnyObject(final String anyObject) {\n+        this.anyObject = anyObject;\n     }\n \n     @Override\n     public final boolean isValid() {\n-        return anyObjectKey != null;\n+        return anyObject != null;\n     }\n }"},{"sha":"76c752b2e1c52e314dd3dd3709c20df37874f9f2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=a4c9cfbecc96ef444e58348da772a891c7afef01","patch":"@@ -106,13 +106,13 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n \n                         case GROUPS:\n                             MembershipCond groupCond = new MembershipCond();\n-                            groupCond.setGroupKey(value);\n+                            groupCond.setGroup(value);\n                             leaf = SearchCond.getLeafCond(groupCond);\n                             break;\n \n                         case RELATIONSHIPS:\n                             RelationshipCond relationshipCond = new RelationshipCond();\n-                            relationshipCond.setAnyObjectKey(value);\n+                            relationshipCond.setAnyObject(value);\n                             leaf = SearchCond.getLeafCond(relationshipCond);\n                             break;\n "},{"sha":"c5306dd536324f4bc29c9ea6be0fe4f6aefeff49","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=a4c9cfbecc96ef444e58348da772a891c7afef01","patch":"@@ -96,7 +96,7 @@ public void relationships() {\n         assertEquals(SpecialAttr.RELATIONSHIPS + \"==ca20ffca-1305-442f-be9a-3723a0cd88ca\", fiqlExpression);\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n-        relationshipCond.setAnyObjectKey(\"ca20ffca-1305-442f-be9a-3723a0cd88ca\");\n+        relationshipCond.setAnyObject(\"ca20ffca-1305-442f-be9a-3723a0cd88ca\");\n         SearchCond simpleCond = SearchCond.getLeafCond(relationshipCond);\n \n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n@@ -126,7 +126,7 @@ public void groups() {\n         assertEquals(SpecialAttr.GROUPS + \"==e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\", fiqlExpression);\n \n         MembershipCond groupCond = new MembershipCond();\n-        groupCond.setGroupKey(\"e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\");\n+        groupCond.setGroup(\"e7ff94e8-19c9-4f0a-b8b7-28327edbf6ed\");\n         SearchCond simpleCond = SearchCond.getLeafCond(groupCond);\n \n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));"},{"sha":"ae802fdde5d80a1cc0b76a8a3967824c675f1167","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":43,"deletions":5,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=a4c9cfbecc96ef444e58348da772a891c7afef01","patch":"@@ -65,6 +65,8 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -533,6 +535,17 @@ private String getQuery(final RelationshipTypeCond cond, final boolean not, fina\n     private String getQuery(final RelationshipCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n+        String rightAnyObjectKey;\n+        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getAnyObject()).matches()) {\n+            rightAnyObjectKey = cond.getAnyObject();\n+        } else {\n+            AnyObject anyObject = anyObjectDAO.findByName(cond.getAnyObject());\n+            rightAnyObjectKey = anyObject == null ? null : anyObject.getKey();\n+        }\n+        if (rightAnyObjectKey == null) {\n+            return EMPTY_QUERY;\n+        }\n+\n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n@@ -544,7 +557,7 @@ private String getQuery(final RelationshipCond cond, final boolean not, final Li\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.relationship().name).append(\" WHERE \").\n-                append(\"right_any_id=?\").append(setParameter(parameters, cond.getAnyObjectKey())).\n+                append(\"right_any_id=?\").append(setParameter(parameters, rightAnyObjectKey)).\n                 append(')');\n \n         return query.toString();\n@@ -553,6 +566,17 @@ private String getQuery(final RelationshipCond cond, final boolean not, final Li\n     private String getQuery(final MembershipCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n+        String groupKey;\n+        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getGroup()).matches()) {\n+            groupKey = cond.getGroup();\n+        } else {\n+            Group group = groupDAO.findByName(cond.getGroup());\n+            groupKey = group == null ? null : group.getKey();\n+        }\n+        if (groupKey == null) {\n+            return EMPTY_QUERY;\n+        }\n+\n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n@@ -564,7 +588,7 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.membership().name).append(\" WHERE \").\n-                append(\"group_id=?\").append(setParameter(parameters, cond.getGroupKey())).\n+                append(\"group_id=?\").append(setParameter(parameters, groupKey)).\n                 append(')');\n \n         if (not) {\n@@ -575,7 +599,7 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dyngroupmembership().name).append(\" WHERE \").\n-                append(\"group_id=?\").append(setParameter(parameters, cond.getGroupKey())).\n+                append(\"group_id=?\").append(setParameter(parameters, groupKey)).\n                 append(')');\n \n         return query.toString();\n@@ -668,6 +692,20 @@ private String getQuery(final AssignableCond cond, final List<Object> parameters\n     private String getQuery(final MemberCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n+        String memberKey;\n+        if (SyncopeConstants.UUID_PATTERN.matcher(cond.getMember()).matches()) {\n+            memberKey = cond.getMember();\n+        } else {\n+            Any member = userDAO.findByUsername(cond.getMember());\n+            if (member == null) {\n+                member = anyObjectDAO.findByName(cond.getMember());\n+            }\n+            memberKey = member == null ? null : member.getKey();\n+        }\n+        if (memberKey == null) {\n+            return EMPTY_QUERY;\n+        }\n+\n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n@@ -679,7 +717,7 @@ private String getQuery(final MemberCond cond, final boolean not, final List<Obj\n \n         query.append(\"SELECT DISTINCT group_id AS any_id FROM \").\n                 append(new SearchSupport(AnyTypeKind.USER).membership().name).append(\" WHERE \").\n-                append(\"any_id=?\").append(setParameter(parameters, cond.getMember())).\n+                append(\"any_id=?\").append(setParameter(parameters, memberKey)).\n                 append(')');\n \n         if (not) {\n@@ -690,7 +728,7 @@ private String getQuery(final MemberCond cond, final boolean not, final List<Obj\n \n         query.append(\"SELECT DISTINCT group_id AS any_id FROM \").\n                 append(new SearchSupport(AnyTypeKind.ANY_OBJECT).membership().name).append(\" WHERE \").\n-                append(\"any_id=?\").append(setParameter(parameters, cond.getMember())).\n+                append(\"any_id=?\").append(setParameter(parameters, memberKey)).\n                 append(')');\n \n         return query.toString();"},{"sha":"aa891a3f36e4ef880b164aac17d08239cf698c30","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=a4c9cfbecc96ef444e58348da772a891c7afef01","patch":"@@ -78,7 +78,7 @@ public void anyObjectMatch() {\n         assertNotNull(anyObject);\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n-        relationshipCond.setAnyObjectKey(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");\n+        relationshipCond.setAnyObject(\"Canon MF 8030cn\");\n         assertTrue(searchDAO.matches(anyObject, SearchCond.getLeafCond(relationshipCond), AnyTypeKind.ANY_OBJECT));\n \n         RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n@@ -92,10 +92,10 @@ public void userMatch() {\n         assertNotNull(user);\n \n         MembershipCond groupCond = new MembershipCond();\n-        groupCond.setGroupKey(\"a3c1a693-a6be-483f-a2b3-5cfec146f4bf\");\n+        groupCond.setGroup(\"secretary\");\n         assertFalse(searchDAO.matches(user, SearchCond.getLeafCond(groupCond), AnyTypeKind.USER));\n \n-        groupCond.setGroupKey(\"37d15e4c-cdc1-460b-a591-8505c8133806\");\n+        groupCond.setGroup(\"root\");\n         assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(groupCond), AnyTypeKind.USER));\n \n         RoleCond roleCond = new RoleCond();\n@@ -106,7 +106,7 @@ public void userMatch() {\n         assertNotNull(user);\n \n         RelationshipCond relationshipCond = new RelationshipCond();\n-        relationshipCond.setAnyObjectKey(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n+        relationshipCond.setAnyObject(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n         assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(relationshipCond), AnyTypeKind.USER));\n \n         RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n@@ -133,7 +133,7 @@ public void searchWithLikeCondition() {\n         fullnameLeafCond.setExpression(\"%o%\");\n \n         MembershipCond groupCond = new MembershipCond();\n-        groupCond.setGroupKey(\"37d15e4c-cdc1-460b-a591-8505c8133806\");\n+        groupCond.setGroup(\"root\");\n \n         AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n         loginDateCond.setSchema(\"loginDate\");\n@@ -197,7 +197,7 @@ public void searchByPageAndSize() {\n         fullnameLeafCond.setExpression(\"%o%\");\n \n         MembershipCond groupCond = new MembershipCond();\n-        groupCond.setGroupKey(\"37d15e4c-cdc1-460b-a591-8505c8133806\");\n+        groupCond.setGroup(\"root\");\n \n         AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n         loginDateCond.setSchema(\"loginDate\");\n@@ -228,14 +228,14 @@ public void searchByPageAndSize() {\n     @Test\n     public void searchByGroup() {\n         MembershipCond groupCond = new MembershipCond();\n-        groupCond.setGroupKey(\"37d15e4c-cdc1-460b-a591-8505c8133806\");\n+        groupCond.setGroup(\"root\");\n \n         List<User> users = searchDAO.search(SearchCond.getLeafCond(groupCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n         groupCond = new MembershipCond();\n-        groupCond.setGroupKey(\"a3c1a693-a6be-483f-a2b3-5cfec146f4bf\");\n+        groupCond.setGroup(\"secretary\");\n \n         users = searchDAO.search(SearchCond.getNotLeafCond(groupCond), AnyTypeKind.USER);\n         assertNotNull(users);"},{"sha":"f324359c395c73ffd61fc81cfb443f4a17d35e5f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4c9cfbecc96ef444e58348da772a891c7afef01/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=a4c9cfbecc96ef444e58348da772a891c7afef01","patch":"@@ -82,7 +82,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         result.append(\"provision\\n\\n\");\n \n         MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setGroupKey(groupKey);\n+        membershipCond.setGroup(groupKey);\n         List<User> users = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.USER);\n         for (User user : users) {\n             List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n@@ -101,7 +101,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         }\n \n         membershipCond = new MembershipCond();\n-        membershipCond.setGroupKey(groupKey);\n+        membershipCond.setGroup(groupKey);\n         List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.ANY_OBJECT);\n         for (AnyObject anyObject : anyObjects) {\n             List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION"},{"sha":"2d9a20deb9e397b71d7a906cee83c333d674119f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a4c9cfbecc96ef444e58348da772a891c7afef01/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a4c9cfbecc96ef444e58348da772a891c7afef01/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=a4c9cfbecc96ef444e58348da772a891c7afef01","patch":"@@ -104,8 +104,7 @@ public void searchByGroupNameAndKey() {\n     public void searchByGroup() {\n         PagedResult<UserTO> matchingUsers = userService.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().\n-                        inGroups(\"37d15e4c-cdc1-460b-a591-8505c8133806\").query()).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(\"root\").query()).\n                 build());\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n@@ -296,7 +295,7 @@ public void searchByRelationship() {\n         PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(new AnyQuery.Builder().realm(\n                 SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n-                        inRelationships(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\").query()).\n+                        inRelationships(\"Canon MF 8030cn\").query()).\n                 build());\n         assertNotNull(anyObjects);\n         assertTrue(IterableUtils.matchesAny(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n@@ -308,8 +307,7 @@ public boolean evaluate(final AnyObjectTO anyObject) {\n         }));\n \n         PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().\n-                        inRelationships(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").query()).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRelationships(\"HP LJ 1300n\").query()).\n                 build());\n         assertNotNull(users);\n         assertTrue(IterableUtils.matchesAny(users.getResult(), new Predicate<UserTO>() {\n@@ -395,9 +393,8 @@ public boolean evaluate(final AnyObjectTO anyObject) {\n \n     @Test\n     public void member() {\n-        PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(\"/\").page(1).size(1000).\n-                fiql(SyncopeClient.getGroupSearchConditionBuilder().\n-                        withMembers(\"1417acbe-cbf6-4277-9372-e75e04f97000\").query()).\n+        PagedResult<GroupTO> groups = groupService.search(new AnyQuery.Builder().realm(\"/\").\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().withMembers(\"rossini\").query()).\n                 build());\n         assertNotNull(groups);\n "}]}