{"sha":"34a979f9965eca8fef12c1edb5156ab2940bc48b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM0YTk3OWY5OTY1ZWNhOGZlZjEyYzFlZGI1MTU2YWIyOTQwYmM0OGI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-08-21T15:34:29Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-08-21T15:34:29Z"},"message":"Small improvement: allow to specify more attrs to get when reading from External Resources","tree":{"sha":"748bfc5c5a1787dd525f7a1bd0cc571a06441f9e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/748bfc5c5a1787dd525f7a1bd0cc571a06441f9e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/34a979f9965eca8fef12c1edb5156ab2940bc48b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a979f9965eca8fef12c1edb5156ab2940bc48b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/34a979f9965eca8fef12c1edb5156ab2940bc48b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/34a979f9965eca8fef12c1edb5156ab2940bc48b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a32f5ada6ad2dc47ebb4ffdf2df48a48211c1f69","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a32f5ada6ad2dc47ebb4ffdf2df48a48211c1f69","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a32f5ada6ad2dc47ebb4ffdf2df48a48211c1f69"}],"stats":{"total":92,"additions":87,"deletions":5},"files":[{"sha":"152993aa81f59e2b4502382e797e68fe348de331","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ReconQuery.java","status":"modified","additions":39,"deletions":1,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a979f9965eca8fef12c1edb5156ab2940bc48b/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a979f9965eca8fef12c1edb5156ab2940bc48b/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FReconQuery.java?ref=34a979f9965eca8fef12c1edb5156ab2940bc48b","patch":"@@ -18,11 +18,20 @@\n  */\n package org.apache.syncope.common.rest.api.beans;\n \n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n-public class ReconQuery {\n+public class ReconQuery implements Serializable {\n+\n+    private static final long serialVersionUID = -3797021989909461591L;\n \n     public static class Builder {\n \n@@ -44,6 +53,24 @@ public Builder connObjectKeyValue(final String connObjectKeyValue) {\n             return this;\n         }\n \n+        public Builder moreAttrsToGet(final String... moreAttrsToGet) {\n+            if (moreAttrsToGet != null) {\n+                Set<String> matg = Optional.ofNullable(instance.getMoreAttrsToGet()).orElseGet(() -> new HashSet<>());\n+                matg.addAll(Stream.of(moreAttrsToGet).collect(Collectors.toSet()));\n+                instance.setMoreAttrsToGet(matg);\n+            }\n+            return this;\n+        }\n+\n+        public Builder moreAttrsToGet(final Collection<String> moreAttrsToGet) {\n+            if (moreAttrsToGet != null) {\n+                Set<String> matg = Optional.ofNullable(instance.getMoreAttrsToGet()).orElseGet(() -> new HashSet<>());\n+                matg.addAll(moreAttrsToGet);\n+                instance.setMoreAttrsToGet(matg);\n+            }\n+            return this;\n+        }\n+\n         public ReconQuery build() {\n             return instance;\n         }\n@@ -57,6 +84,8 @@ public ReconQuery build() {\n \n     private String connObjectKeyValue;\n \n+    private Set<String> moreAttrsToGet;\n+\n     public String getAnyTypeKey() {\n         return anyTypeKey;\n     }\n@@ -94,4 +123,13 @@ public String getConnObjectKeyValue() {\n     public void setConnObjectKeyValue(final String connObjectKeyValue) {\n         this.connObjectKeyValue = connObjectKeyValue;\n     }\n+\n+    public Set<String> getMoreAttrsToGet() {\n+        return moreAttrsToGet;\n+    }\n+\n+    @QueryParam(\"moreAttrsToGet\")\n+    public void setMoreAttrsToGet(final Set<String> moreAttrsToGet) {\n+        this.moreAttrsToGet = moreAttrsToGet;\n+    }\n }"},{"sha":"dd86b2fa1d1787663dfa24edf3e2d4137774bef3","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ConnObjectTOQuery.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a979f9965eca8fef12c1edb5156ab2940bc48b/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a979f9965eca8fef12c1edb5156ab2940bc48b/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FConnObjectTOQuery.java?ref=34a979f9965eca8fef12c1edb5156ab2940bc48b","patch":"@@ -19,6 +19,12 @@\n package org.apache.syncope.common.rest.api.beans;\n \n import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.ws.rs.DefaultValue;\n@@ -55,6 +61,24 @@ public Builder fiql(final String fiql) {\n             return this;\n         }\n \n+        public Builder moreAttrsToGet(final String... moreAttrsToGet) {\n+            if (moreAttrsToGet != null) {\n+                Set<String> matg = Optional.ofNullable(instance.getMoreAttrsToGet()).orElseGet(() -> new HashSet<>());\n+                matg.addAll(Stream.of(moreAttrsToGet).collect(Collectors.toSet()));\n+                instance.setMoreAttrsToGet(matg);\n+            }\n+            return this;\n+        }\n+\n+        public Builder moreAttrsToGet(final Collection<String> moreAttrsToGet) {\n+            if (moreAttrsToGet != null) {\n+                Set<String> matg = Optional.ofNullable(instance.getMoreAttrsToGet()).orElseGet(() -> new HashSet<>());\n+                matg.addAll(moreAttrsToGet);\n+                instance.setMoreAttrsToGet(matg);\n+            }\n+            return this;\n+        }\n+\n         public ConnObjectTOQuery build() {\n             return instance;\n         }\n@@ -68,6 +92,8 @@ public ConnObjectTOQuery build() {\n \n     private String fiql;\n \n+    private Set<String> moreAttrsToGet;\n+\n     public Integer getSize() {\n         return size == null\n                 ? 25\n@@ -110,4 +136,13 @@ public String getFiql() {\n     public void setFiql(final String fiql) {\n         this.fiql = fiql;\n     }\n+\n+    public Set<String> getMoreAttrsToGet() {\n+        return moreAttrsToGet;\n+    }\n+\n+    @QueryParam(\"moreAttrsToGet\")\n+    public void setMoreAttrsToGet(final Set<String> moreAttrsToGet) {\n+        this.moreAttrsToGet = moreAttrsToGet;\n+    }\n }"},{"sha":"3ef81ac18d75e640a260335d21cfc15ab5d9af7c","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a979f9965eca8fef12c1edb5156ab2940bc48b/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a979f9965eca8fef12c1edb5156ab2940bc48b/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=34a979f9965eca8fef12c1edb5156ab2940bc48b","patch":"@@ -87,6 +87,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.CollectionUtils;\n \n @Component\n public class ReconciliationLogic extends AbstractTransactionalLogic<EntityTO> {\n@@ -236,12 +237,16 @@ public ReconStatus status(final ReconQuery query) {\n                         }\n                     });\n \n+            Optional<String[]> moreAttrsToGet = CollectionUtils.isEmpty(query.getMoreAttrsToGet())\n+                    ? Optional.empty()\n+                    : Optional.of(query.getMoreAttrsToGet().toArray(new String[0]));\n+\n             outboundMatcher.matchByConnObjectKeyValue(\n                     connFactory.getConnector(provision.getResource()),\n                     connObjectKeyItem,\n                     query.getConnObjectKeyValue(),\n                     provision,\n-                    Optional.empty(),\n+                    moreAttrsToGet,\n                     Optional.empty()).\n                     ifPresent(connObj -> {\n                         status.setOnResource(ConnObjectUtils.getConnObjectTO(connObj.getAttributes()));\n@@ -360,7 +365,7 @@ public void pull(final ReconQuery query, final PullTaskTO pullTask) {\n         }\n         if (provision.getMapping().getConnObjectKeyItem().isEmpty()) {\n             throw new NotFoundException(\n-                \"ConnObjectKey cannot be determined for mapping \" + provision.getMapping().getKey());\n+                    \"ConnObjectKey cannot be determined for mapping \" + provision.getMapping().getKey());\n         }\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);"},{"sha":"9b80531bb4f359db147b46fbabc0c6170f364210","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/34a979f9965eca8fef12c1edb5156ab2940bc48b/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/34a979f9965eca8fef12c1edb5156ab2940bc48b/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=34a979f9965eca8fef12c1edb5156ab2940bc48b","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -109,15 +110,18 @@ public PagedConnObjectTOResult searchConnObjects(\n             final String key, final String anyTypeKey, final ConnObjectTOQuery query) {\n \n         Filter filter = null;\n-        Set<String> moreAttrsToGet = Set.of();\n+        Set<String> moreAttrsToGet = new HashSet<>();\n+        if (query.getMoreAttrsToGet() != null) {\n+            moreAttrsToGet.addAll(query.getMoreAttrsToGet());\n+        }\n         if (StringUtils.isNotBlank(query.getFiql())) {\n             try {\n                 FilterVisitor visitor = new FilterVisitor();\n                 SearchCondition<SearchBean> sc = searchContext.getCondition(query.getFiql(), SearchBean.class);\n                 sc.accept(visitor);\n \n                 filter = visitor.getQuery();\n-                moreAttrsToGet = visitor.getAttrs();\n+                moreAttrsToGet.addAll(visitor.getAttrs());\n             } catch (Exception e) {\n                 LOG.error(\"Invalid FIQL expression: {}\", query.getFiql(), e);\n "}]}