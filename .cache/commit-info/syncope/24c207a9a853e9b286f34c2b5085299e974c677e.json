{"sha":"24c207a9a853e9b286f34c2b5085299e974c677e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI0YzIwN2E5YTg1M2U5YjI4NmYzNGMyYjUwODUyOTllOTc0YzY3N2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-21T10:31:10Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-12-21T10:31:10Z"},"message":"[SYNCOPE-44] Enhancing search: AttributableCond now with boolean and relationship fields support, EntitlementCond added\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1424852 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"592e7cf6c2e0748efd0f38a448a038358e504c5c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/592e7cf6c2e0748efd0f38a448a038358e504c5c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/24c207a9a853e9b286f34c2b5085299e974c677e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24c207a9a853e9b286f34c2b5085299e974c677e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/24c207a9a853e9b286f34c2b5085299e974c677e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24c207a9a853e9b286f34c2b5085299e974c677e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"2e75481428f31cb352d2f9c7435877256ae63184","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2e75481428f31cb352d2f9c7435877256ae63184","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2e75481428f31cb352d2f9c7435877256ae63184"}],"stats":{"total":380,"additions":296,"deletions":84},"files":[{"sha":"7ce65107d06ca4d423c11f22ad483aa66b4e271b","filename":"client/src/main/java/org/apache/syncope/client/search/AttributableCond.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FAttributableCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FAttributableCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FAttributableCond.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -19,16 +19,16 @@\n package org.apache.syncope.client.search;\n \n /**\n- * Search condition to be applied when comparing bean attribute values.\n+ * Search condition to be applied when comparing bean field values.\n  */\n-public class AttributableCond extends AttributeCond {\n+public class AttributableCond extends AttributeCond implements SearchCond {\n \n     private static final long serialVersionUID = -1880319220462653955L;\n \n     public AttributableCond() {\n     }\n \n-    public AttributableCond(Type conditionType) {\n+    public AttributableCond(final Type conditionType) {\n         super(conditionType);\n     }\n }"},{"sha":"0d2d0d6848494c343b5bb3b9f70591b010623a4e","filename":"client/src/main/java/org/apache/syncope/client/search/AttributeCond.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FAttributeCond.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -23,7 +23,7 @@\n /**\n  * Search condition to be applied when comparing attribute values.\n  */\n-public class AttributeCond extends AbstractBaseBean {\n+public class AttributeCond extends AbstractBaseBean implements SearchCond {\n \n     private static final long serialVersionUID = 3275277728404021417L;\n \n@@ -79,7 +79,8 @@ public final void setType(final Type conditionType) {\n         this.type = conditionType;\n     }\n \n-    public final boolean checkValidity() {\n+    @Override\n+    public final boolean isValid() {\n         return type != null && schema != null && (type == Type.ISNULL || type == Type.ISNOTNULL || expression != null);\n     }\n }"},{"sha":"18c2c6b1f3c5973b6afb0cbcda5d8159cc3f7515","filename":"client/src/main/java/org/apache/syncope/client/search/EntitlementCond.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FEntitlementCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FEntitlementCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FEntitlementCond.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.search;\n+\n+import org.apache.syncope.client.AbstractBaseBean;\n+\n+public class EntitlementCond extends AbstractBaseBean implements SearchCond {\n+\n+    private static final long serialVersionUID = -4077781080368377428L;\n+\n+    private String expression;\n+\n+    public String getExpression() {\n+        return expression;\n+    }\n+\n+    public void setExpression(final String expression) {\n+        this.expression = expression;\n+    }\n+\n+    @Override\n+    public boolean isValid() {\n+        return expression != null;\n+    }\n+}"},{"sha":"97ca2912bcf828012e024f205fd7ab37d509957e","filename":"client/src/main/java/org/apache/syncope/client/search/MembershipCond.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FMembershipCond.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -23,7 +23,7 @@\n /**\n  * Search condition to be applied when searching for memberships.\n  */\n-public class MembershipCond extends AbstractBaseBean {\n+public class MembershipCond extends AbstractBaseBean implements SearchCond {\n \n     private static final long serialVersionUID = -728155256293925989L;\n \n@@ -51,7 +51,8 @@ public void setRoleName(String roleName) {\n         this.roleName = roleName;\n     }\n \n-    public final boolean checkValidity() {\n+    @Override\n+    public final boolean isValid() {\n         return !(roleId == null && roleName == null);\n     }\n }"},{"sha":"8c8044e8d125ffbc7e4ede7decc80182a1365d02","filename":"client/src/main/java/org/apache/syncope/client/search/NodeCond.java","status":"modified","additions":63,"deletions":31,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.search;\n \n import org.apache.syncope.client.AbstractBaseBean;\n+import org.codehaus.jackson.annotate.JsonIgnore;\n \n public class NodeCond extends AbstractBaseBean {\n \n@@ -28,6 +29,7 @@ public enum Type {\n         NOT_LEAF,\n         AND,\n         OR\n+\n     }\n \n     private Type type;\n@@ -40,6 +42,8 @@ public enum Type {\n \n     private ResourceCond resourceCond;\n \n+    private EntitlementCond entitlementCond;\n+\n     private NodeCond leftNodeCond;\n \n     private NodeCond rightNodeCond;\n@@ -80,6 +84,15 @@ public static NodeCond getLeafCond(final ResourceCond resourceCond) {\n         return nodeCond;\n     }\n \n+    public static NodeCond getLeafCond(final EntitlementCond entitlementCond) {\n+        NodeCond nodeCond = new NodeCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.entitlementCond = entitlementCond;\n+\n+        return nodeCond;\n+    }\n+\n     public static NodeCond getNotLeafCond(final AttributableCond syncopeUserCond) {\n         NodeCond nodeCond = getLeafCond(syncopeUserCond);\n         nodeCond.type = Type.NOT_LEAF;\n@@ -104,8 +117,13 @@ public static NodeCond getNotLeafCond(final ResourceCond resourceCond) {\n         return nodeCond;\n     }\n \n-    public static NodeCond getAndCond(final NodeCond leftCond, final NodeCond rightCond) {\n+    public static NodeCond getNotLeafCond(final EntitlementCond entitlementCond) {\n+        NodeCond nodeCond = getLeafCond(entitlementCond);\n+        nodeCond.type = Type.NOT_LEAF;\n+        return nodeCond;\n+    }\n \n+    public static NodeCond getAndCond(final NodeCond leftCond, final NodeCond rightCond) {\n         NodeCond nodeCond = new NodeCond();\n \n         nodeCond.type = Type.AND;\n@@ -116,7 +134,6 @@ public static NodeCond getAndCond(final NodeCond leftCond, final NodeCond rightC\n     }\n \n     public static NodeCond getOrCond(final NodeCond leftCond, final NodeCond rightCond) {\n-\n         NodeCond nodeCond = new NodeCond();\n \n         nodeCond.type = Type.OR;\n@@ -126,85 +143,100 @@ public static NodeCond getOrCond(final NodeCond leftCond, final NodeCond rightCo\n         return nodeCond;\n     }\n \n+    public AttributableCond getAttributableCond() {\n+        return attributableCond;\n+    }\n+\n+    public void setAttributableCond(final AttributableCond attributableCond) {\n+        this.attributableCond = attributableCond;\n+    }\n+\n     public AttributeCond getAttributeCond() {\n         return attributeCond;\n     }\n \n-    public final void setAttributeCond(final AttributeCond attributeCond) {\n+    public void setAttributeCond(final AttributeCond attributeCond) {\n         this.attributeCond = attributeCond;\n     }\n \n-    public final MembershipCond getMembershipCond() {\n+    public MembershipCond getMembershipCond() {\n         return membershipCond;\n     }\n \n-    public final ResourceCond getResourceCond() {\n-        return resourceCond;\n+    public void setMembershipCond(final MembershipCond membershipCond) {\n+        this.membershipCond = membershipCond;\n     }\n \n-    public final void setMembershipCond(final MembershipCond membershipCond) {\n-        this.membershipCond = membershipCond;\n+    public ResourceCond getResourceCond() {\n+        return resourceCond;\n     }\n \n     public void setResourceCond(final ResourceCond resourceCond) {\n         this.resourceCond = resourceCond;\n     }\n \n-    public AttributableCond getAttributableCond() {\n-        return attributableCond;\n+    public EntitlementCond getEntitlementCond() {\n+        return entitlementCond;\n     }\n \n-    public void setAttributableCond(final AttributableCond attributableCond) {\n-        this.attributableCond = attributableCond;\n+    public void setEntitlementCond(final EntitlementCond entitlementCond) {\n+        this.entitlementCond = entitlementCond;\n     }\n \n-    public final NodeCond getLeftNodeCond() {\n+    public NodeCond getLeftNodeCond() {\n         return leftNodeCond;\n     }\n \n-    public final void setLeftNodeCond(final NodeCond leftNodeCond) {\n+    public void setLeftNodeCond(final NodeCond leftNodeCond) {\n         this.leftNodeCond = leftNodeCond;\n     }\n \n-    public final NodeCond getRightNodeCond() {\n+    public NodeCond getRightNodeCond() {\n         return rightNodeCond;\n     }\n \n-    public final void setRightNodeCond(final NodeCond rightNodeCond) {\n+    public void setRightNodeCond(final NodeCond rightNodeCond) {\n         this.rightNodeCond = rightNodeCond;\n     }\n \n-    public final Type getType() {\n+    public Type getType() {\n         return type;\n     }\n \n-    public final void setType(final Type type) {\n+    public void setType(final Type type) {\n         this.type = type;\n     }\n \n-    public final boolean checkValidity() {\n+    @JsonIgnore\n+    public boolean isValid() {\n+        boolean isValid = false;\n+\n         if (type == null) {\n-            return false;\n+            return isValid;\n         }\n \n         switch (type) {\n             case LEAF:\n             case NOT_LEAF:\n-                return (attributableCond != null && attributeCond == null && membershipCond == null\n-                        && resourceCond == null && attributableCond.checkValidity())\n-                        || (attributableCond == null && attributeCond != null && membershipCond == null\n-                                && resourceCond == null && attributeCond.checkValidity())\n-                        || (attributableCond == null && attributeCond == null && membershipCond != null\n-                                && resourceCond == null && membershipCond.checkValidity())\n-                        || (attributableCond == null && attributeCond == null && membershipCond == null\n-                                && resourceCond != null && resourceCond.checkValidity());\n+                isValid = (attributableCond != null || attributeCond != null || membershipCond != null\n+                        || resourceCond != null || entitlementCond != null)\n+                        && (attributableCond == null || attributableCond.isValid())\n+                        && (attributeCond == null || attributeCond.isValid())\n+                        && (membershipCond == null || membershipCond.isValid())\n+                        && (resourceCond == null || resourceCond.isValid())\n+                        && (entitlementCond == null || entitlementCond.isValid());\n+                break;\n+\n             case AND:\n             case OR:\n-                return (leftNodeCond == null || rightNodeCond == null)\n+                isValid = (leftNodeCond == null || rightNodeCond == null)\n                         ? false\n-                        : leftNodeCond.checkValidity() && rightNodeCond.checkValidity();\n+                        : leftNodeCond.isValid() && rightNodeCond.isValid();\n+                break;\n+\n             default:\n-                return false;\n         }\n+\n+        return isValid;\n     }\n }"},{"sha":"d634db4089dcc8634b4a72f690589b785be274c1","filename":"client/src/main/java/org/apache/syncope/client/search/ResourceCond.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FResourceCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FResourceCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FResourceCond.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -23,7 +23,7 @@\n /**\n  * Search condition to be applied when searching for associated resources.\n  */\n-public class ResourceCond extends AbstractBaseBean {\n+public class ResourceCond extends AbstractBaseBean implements SearchCond {\n \n     private String resourceName;\n \n@@ -35,7 +35,8 @@ public void setResourceName(String resourceName) {\n         this.resourceName = resourceName;\n     }\n \n-    public final boolean checkValidity() {\n+    @Override\n+    public final boolean isValid() {\n         return resourceName != null;\n     }\n }"},{"sha":"5baf115f8398f7145fbb4bfa7764cfd150d7dc6b","filename":"client/src/main/java/org/apache/syncope/client/search/SearchCond.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fsearch%2FSearchCond.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.search;\n+\n+import org.codehaus.jackson.annotate.JsonIgnore;\n+\n+public interface SearchCond {\n+\n+    @JsonIgnore\n+    boolean isValid();\n+}"},{"sha":"c4038f755b5fda3f59f278347b6f245585a4e0b5","filename":"client/src/test/java/org/apache/syncope/client/test/JSONTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -52,7 +52,7 @@ public void testSearchCondition() throws IOException {\n         final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameCond), NodeCond.getLeafCond(\n                 membershipCond));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         ObjectMapper mapper = new ObjectMapper();\n "},{"sha":"b307b3b2e0b53f37594926d1cdf33b261778d5c5","filename":"console/src/main/java/org/apache/syncope/console/pages/Roles.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -137,7 +137,7 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n     private void doSearch(final AjaxRequestTarget target, final NodeCond searchCond,\n             final AbstractSearchResultPanel resultsetPanel) {\n \n-        if (searchCond == null || !searchCond.checkValidity()) {\n+        if (searchCond == null || !searchCond.isValid()) {\n             error(getString(\"search_error\"));\n             return;\n         }"},{"sha":"dc878f328d8833a5d0cb616e2abc2e9bf778fe5e","filename":"console/src/main/java/org/apache/syncope/console/pages/UserOwnerSelectModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -78,7 +78,7 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n     private void doSearch(final AjaxRequestTarget target, final NodeCond searchCond,\n             final AbstractSearchResultPanel resultsetPanel) {\n \n-        if (searchCond == null || !searchCond.checkValidity()) {\n+        if (searchCond == null || !searchCond.isValid()) {\n             error(getString(\"search_error\"));\n             return;\n         }"},{"sha":"a8ac0a2743545e5d54dc48e31fa182cbf763bfca","filename":"console/src/main/java/org/apache/syncope/console/pages/Users.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -128,7 +128,7 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n     private void doSearch(final AjaxRequestTarget target, final NodeCond searchCond,\n             final AbstractSearchResultPanel resultsetPanel) {\n \n-        if (searchCond == null || !searchCond.checkValidity()) {\n+        if (searchCond == null || !searchCond.isValid()) {\n             error(getString(\"search_error\"));\n             return;\n         }"},{"sha":"fd2473da706f08fcb39d54c5a635132351eb5af4","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -118,7 +118,7 @@ public String toString() {\n             method = BeanUtils.findMethod(getClass(), \"getName\");\n         }\n \n-        StringBuffer result = new StringBuffer().append(getClass().getSimpleName()).append(\"[\");\n+        StringBuffer result = new StringBuffer().append(getClass().getSimpleName()).append('[');\n         if (method != null) {\n             try {\n                 result.append(method.invoke(this));\n@@ -128,7 +128,7 @@ public String toString() {\n                 }\n             }\n         }\n-        result.append(\"]\");\n+        result.append(']');\n \n         return result.toString();\n     }"},{"sha":"b47c4ab7564571241448d307c2d035dc3837f88f","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttributableSearchDAOImpl.java","status":"modified","additions":68,"deletions":11,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -18,31 +18,39 @@\n  */\n package org.apache.syncope.core.persistence.dao.impl;\n \n+import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import javax.persistence.Entity;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n import javax.validation.ValidationException;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n import org.apache.syncope.client.search.AttributableCond;\n import org.apache.syncope.client.search.AttributeCond;\n+import org.apache.syncope.client.search.EntitlementCond;\n import org.apache.syncope.client.search.MembershipCond;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.search.ResourceCond;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n+import org.apache.syncope.core.persistence.beans.Entitlement;\n+import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.types.AttributableType;\n import org.apache.syncope.types.SchemaType;\n+import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -131,12 +139,12 @@ public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRole\n     public <T extends AbstractAttributable> List<T> search(final Set<Long> adminRoles, final NodeCond searchCondition,\n             final int page, final int itemsPerPage, final AttributableUtil attrUtil) {\n \n-        List<T> result = Collections.EMPTY_LIST;\n+        List<T> result = Collections.<T>emptyList();\n \n         if (adminRoles != null && (!adminRoles.isEmpty() || roleDAO.findAll().isEmpty())) {\n             LOG.debug(\"Search condition:\\n{}\", searchCondition);\n \n-            if (searchCondition.checkValidity()) {\n+            if (searchCondition.isValid()) {\n                 try {\n                     result = doSearch(adminRoles, searchCondition, page, itemsPerPage, attrUtil);\n                 } catch (Exception e) {\n@@ -170,9 +178,7 @@ public <T extends AbstractAttributable> boolean matches(final T user, final Node\n         fillWithParameters(query, parameters);\n \n         // 5. executes query\n-        List<T> result = query.getResultList();\n-\n-        return !result.isEmpty();\n+        return !query.getResultList().isEmpty();\n     }\n \n     private int setParameter(final List<Object> parameters, final Object parameter) {\n@@ -281,6 +287,10 @@ private StringBuilder getQuery(final NodeCond nodeCond, final List<Object> param\n                     query.append(getQuery(nodeCond.getResourceCond(), nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n                             parameters, attrUtil));\n                 }\n+                if (nodeCond.getEntitlementCond() != null) {\n+                    query.append(getQuery(nodeCond.getEntitlementCond(), nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n+                            parameters, attrUtil));\n+                }\n                 if (nodeCond.getAttributeCond() != null) {\n                     query.append(getQuery(nodeCond.getAttributeCond(), nodeCond.getType() == NodeCond.Type.NOT_LEAF,\n                             parameters, attrUtil));\n@@ -333,7 +343,7 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n             query.append(\"role_name=?\").append(setParameter(parameters, cond.getRoleName()));\n         }\n \n-        query.append(\")\");\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -355,7 +365,21 @@ private String getQuery(final ResourceCond cond, final boolean not, final List<O\n \n         query.append(\"resource_name=?\").append(setParameter(parameters, cond.getResourceName()));\n \n-        query.append(\")\");\n+        query.append(')');\n+\n+        return query.toString();\n+    }\n+\n+    private String getQuery(final EntitlementCond cond, final boolean not, final List<Object> parameters,\n+            final AttributableUtil attrUtil) {\n+\n+        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT role_id AS subject_id FROM \").\n+                append(SyncopeRole.class.getSimpleName()).append('_').append(Entitlement.class.getSimpleName()).\n+                append(\" WHERE entitlement_name \");\n+        if (not) {\n+            query.append(\" NOT \");\n+        }\n+        query.append(\" LIKE '%\").append(cond.getExpression()).append(\"%'\");\n \n         return query.toString();\n     }\n@@ -383,14 +407,11 @@ private void fillAttributeQuery(final StringBuilder query, final AbstractAttrVal\n \n             case LIKE:\n                 if (schema.getType() == SchemaType.String || schema.getType() == SchemaType.Enum) {\n-\n                     query.append(column);\n                     if (not) {\n                         query.append(\" NOT \");\n                     }\n-\n                     query.append(\" LIKE '\").append(cond.getExpression()).append(\"'\");\n-\n                 } else {\n                     if (!(cond instanceof AttributableCond)) {\n                         query.append(\"' AND\");\n@@ -487,7 +508,7 @@ private String getFieldName(final SchemaType type) {\n     }\n \n     private String getQuery(final AttributeCond cond, final boolean not, final List<Object> parameters,\n-            AttributableUtil attrUtil) {\n+            final AttributableUtil attrUtil) {\n \n         AbstractSchema schema = schemaDAO.find(cond.getSchema(), attrUtil.schemaClass());\n         if (schema == null) {\n@@ -543,6 +564,42 @@ private String getQuery(final AttributableCond cond, final boolean not, final Li\n             }\n         }\n \n+        // Deal with Attirbutable Integer fields logically mapping to boolean values\n+        // (SyncopeRole.inheritAttributes, for example)\n+        boolean foundBooleanMin = false;\n+        boolean foundBooleanMax = false;\n+        if (Integer.class.equals(attributableClassField.getType())) {\n+            for (Annotation annotation : attributableClassField.getAnnotations()) {\n+                if (Min.class.equals(annotation.annotationType())) {\n+                    foundBooleanMin = ((Min) annotation).value() == 0;\n+                } else if (Max.class.equals(annotation.annotationType())) {\n+                    foundBooleanMax = ((Max) annotation).value() == 1;\n+                }\n+            }\n+        }\n+        if (foundBooleanMin && foundBooleanMax) {\n+            if (\"true\".equalsIgnoreCase(cond.getExpression())) {\n+                cond.setExpression(\"1\");\n+            } else if (\"false\".equalsIgnoreCase(cond.getExpression())) {\n+                cond.setExpression(\"0\");\n+            }\n+        }\n+\n+        // Deal with Attributable fields representing relationships to other entities\n+        // Only _id and _name are suppored\n+        if (attributableClassField.getType().getAnnotation(Entity.class) != null) {\n+            if (BeanUtils.findDeclaredMethodWithMinimalParameters(\n+                    attributableClassField.getType(), \"getId\") != null) {\n+\n+                cond.setSchema(cond.getSchema() + \"_id\");\n+            }\n+            if (BeanUtils.findDeclaredMethodWithMinimalParameters(\n+                    attributableClassField.getType(), \"getName\") != null) {\n+\n+                cond.setSchema(cond.getSchema() + \"_name\");\n+            }\n+        }\n+\n         AbstractAttrValue attrValue = attrUtil.newAttrValue();\n         try {\n             if (cond.getType() != AttributeCond.Type.LIKE && cond.getType() != AttributeCond.Type.ISNULL"},{"sha":"779675a46701c8748b2d4c82fd8e1198f133e325","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/NotificationValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -43,14 +43,14 @@ public boolean isValid(final Notification value, final ConstraintValidatorContex\n             context.buildConstraintViolationWithTemplate(\"No events\").addNode(\n                     EntityViolationType.InvalidNotification.toString()).addNode(\"events\").addConstraintViolation();\n         }\n-        if (!value.getAbout().checkValidity()) {\n+        if (!value.getAbout().isValid()) {\n             isValid = false;\n \n             context.buildConstraintViolationWithTemplate(\"Invalid about search condition\").addNode(\n                     EntityViolationType.InvalidNotification.toString()).addNode(\"about\").addConstraintViolation();\n         }\n         if (value.getRecipients() != null) {\n-            if (!value.getRecipients().checkValidity() && !value.isSelfAsRecipient()) {\n+            if (!value.getRecipients().isValid() && !value.isSelfAsRecipient()) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\"Invalid recipients search condition\").addNode("},{"sha":"4695213703d94d569600f34fc713c21490113fe5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -215,7 +215,7 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n         LOG.debug(\"Role search called with condition {}\", searchCondition);\n \n-        if (!searchCondition.checkValidity()) {\n+        if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n@@ -241,7 +241,7 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n-        if (!searchCondition.checkValidity()) {\n+        if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }"},{"sha":"18b4d3d3224e6a8381322c0942d8d98794f8ef18","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -142,7 +142,7 @@ public ModelAndView count() {\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n \n-        if (!searchCondition.checkValidity()) {\n+        if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }\n@@ -247,7 +247,7 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n         LOG.debug(\"User search called with condition {}\", searchCondition);\n \n-        if (!searchCondition.checkValidity()) {\n+        if (!searchCondition.isValid()) {\n             LOG.error(\"Invalid search condition: {}\", searchCondition);\n             throw new InvalidSearchConditionException();\n         }"},{"sha":"0081949ff8fe2d58e48b58bd7b75201dbebb48d7","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttributableSearchTest.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -104,11 +104,11 @@ public void searchWithLikeCondition() {\n         NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(\n                 membershipCond));\n \n-        assertTrue(subCond.checkValidity());\n+        assertTrue(subCond.isValid());\n \n         NodeCond cond = NodeCond.getAndCond(subCond, NodeCond.getLeafCond(loginDateCond));\n \n-        assertTrue(cond.checkValidity());\n+        assertTrue(cond.isValid());\n \n         List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n                 AttributableUtil.getInstance(AttributableType.USER));\n@@ -123,7 +123,7 @@ public void searchWithNotCondition() {\n         fullnameLeafCond.setExpression(\"fabio.martelli\");\n \n         final NodeCond cond = NodeCond.getNotLeafCond(fullnameLeafCond);\n-        assertTrue(cond.checkValidity());\n+        assertTrue(cond.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n                 AttributableUtil.getInstance(AttributableType.USER));\n@@ -144,7 +144,7 @@ public void searchByBoolean() {\n         coolLeafCond.setExpression(\"true\");\n \n         final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n-        assertTrue(cond.checkValidity());\n+        assertTrue(cond.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n                 AttributableUtil.getInstance(AttributableType.USER));\n@@ -170,11 +170,11 @@ public void searchByPageAndSize() {\n         NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(\n                 membershipCond));\n \n-        assertTrue(subCond.checkValidity());\n+        assertTrue(subCond.isValid());\n \n         NodeCond cond = NodeCond.getAndCond(subCond, NodeCond.getLeafCond(loginDateCond));\n \n-        assertTrue(cond.checkValidity());\n+        assertTrue(cond.isValid());\n \n         List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond, 1, 2,\n                 AttributableUtil.getInstance(AttributableType.USER));\n@@ -239,7 +239,7 @@ public void searchByResource() {\n \n         NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getLeafCond(ws1));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         List<SyncopeUser> users = searchDAO.search(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n@@ -284,7 +284,7 @@ public void searchByRolenameAndId() {\n         final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(rolenameLeafCond),\n                 NodeCond.getLeafCond(idRightCond));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         final List<SyncopeRole> matchingRoles = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.ROLE));\n@@ -323,7 +323,7 @@ public void searchById() {\n         idLeafCond.setExpression(\"2\");\n \n         NodeCond searchCondition = NodeCond.getLeafCond(idLeafCond);\n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         List<SyncopeUser> matchingUsers =\n                 searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n@@ -338,7 +338,7 @@ public void searchById() {\n         idLeafCond.setExpression(\"4\");\n \n         searchCondition = NodeCond.getNotLeafCond(idLeafCond);\n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n                 AttributableUtil.getInstance(AttributableType.USER));\n@@ -358,7 +358,7 @@ public void issue202() {\n \n         final NodeCond searchCondition =\n                 NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getNotLeafCond(ws1));\n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n@@ -374,7 +374,7 @@ public void issue242() {\n         cond.setExpression(\"test%\");\n \n         final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n@@ -389,7 +389,7 @@ public void issueSYNCOPE46() {\n         cond.setExpression(\"%user%\");\n \n         final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));"},{"sha":"ea5d6dcb35a4848a0c17a2da9983257f83a67633","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/NotificationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -48,9 +48,9 @@ public void find() {\n         assertNotNull(notification.getEvents());\n         assertFalse(notification.getEvents().isEmpty());\n         assertNotNull(notification.getAbout());\n-        assertTrue(notification.getAbout().checkValidity());\n+        assertTrue(notification.getAbout().isValid());\n         assertNotNull(notification.getRecipients());\n-        assertTrue(notification.getRecipients().checkValidity());\n+        assertTrue(notification.getRecipients().isValid());\n     }\n \n     @Test"},{"sha":"d1ed8fa0147110a0c3c17397862040f4b25e95d8","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/AttributableSearchTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FAttributableSearchTest.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -68,7 +68,7 @@ public void issueSYNCOPE95() {\n         coolLeafCond.setExpression(\"true\");\n \n         final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n-        assertTrue(cond.checkValidity());\n+        assertTrue(cond.isValid());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond,\n                 AttributableUtil.getInstance(AttributableType.USER));"},{"sha":"69c0e53361b9af3ca34cbe70d82f77b23f6bf0b7","filename":"core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java","status":"modified","additions":57,"deletions":5,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24c207a9a853e9b286f34c2b5085299e974c677e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java?ref=24c207a9a853e9b286f34c2b5085299e974c677e","patch":"@@ -26,6 +26,7 @@\n import java.util.Set;\n import org.apache.syncope.client.search.AttributableCond;\n import org.apache.syncope.client.search.AttributeCond;\n+import org.apache.syncope.client.search.EntitlementCond;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.search.ResourceCond;\n import org.apache.syncope.client.to.RoleTO;\n@@ -51,7 +52,7 @@ public void searchUser() {\n         NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(\n                 fullnameLeafCond2));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n                 UserTO[].class));\n@@ -92,7 +93,7 @@ public void searchByUsernameAndId() {\n         final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond.\n                 getLeafCond(idRightCond));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         final List<UserTO> matchingUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\",\n                 searchCondition, UserTO[].class));\n@@ -116,7 +117,7 @@ public void searchByRolenameAndId() {\n         final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(rolenameLeafCond),\n                 NodeCond.getLeafCond(idRightCond));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n                 searchCondition, RoleTO[].class));\n@@ -137,7 +138,7 @@ public void searchUserByResourceName() {\n \n         NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getLeafCond(ws1));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search\", searchCondition,\n                 UserTO[].class));\n@@ -167,7 +168,7 @@ public void paginatedSearch() {\n         NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond1), NodeCond.getLeafCond(\n                 fullnameLeafCond2));\n \n-        assertTrue(searchCondition.checkValidity());\n+        assertTrue(searchCondition.isValid());\n \n         List<UserTO> matchedUsers = Arrays.asList(restTemplate.postForObject(BASE_URL + \"user/search/{page}/{size}\",\n                 searchCondition, UserTO[].class, 1, 2));\n@@ -205,4 +206,55 @@ public void searchCount() {\n         assertNotNull(count);\n         assertTrue(count > 0);\n     }\n+\n+    @Test\n+    public void searchByBooleanAttributableCond() {\n+        final AttributableCond cond = new AttributableCond(AttributableCond.Type.EQ);\n+        cond.setSchema(\"inheritAttributes\");\n+        cond.setExpression(\"true\");\n+\n+        final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n+\n+        final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n+                searchCondition, RoleTO[].class));\n+        assertNotNull(matchingRoles);\n+        assertFalse(matchingRoles.isEmpty());\n+    }\n+\n+    @Test\n+    public void searchByEntitlement() {\n+        final EntitlementCond cond = new EntitlementCond();\n+        cond.setExpression(\"USER\");\n+\n+        final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n+        assertTrue(searchCondition.isValid());\n+\n+        final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n+                searchCondition, RoleTO[].class));\n+        assertNotNull(matchingRoles);\n+        assertFalse(matchingRoles.isEmpty());\n+    }\n+\n+    @Test\n+    public void searchByRelationshipAttributableCond() {\n+        final AttributableCond userOwnerCond = new AttributableCond(AttributableCond.Type.EQ);\n+        userOwnerCond.setSchema(\"userOwner\");\n+        userOwnerCond.setExpression(\"5\");\n+\n+        final AttributableCond ppolicyCond = new AttributableCond(AttributableCond.Type.ISNOTNULL);\n+        ppolicyCond.setSchema(\"passwordPolicy\");\n+\n+        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getLeafCond(userOwnerCond),\n+                NodeCond.getLeafCond(ppolicyCond));\n+\n+        assertTrue(searchCondition.isValid());\n+\n+        final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n+                searchCondition, RoleTO[].class));\n+\n+        assertNotNull(matchingRoles);\n+        assertEquals(1, matchingRoles.size());\n+        assertEquals(\"director\", matchingRoles.iterator().next().getName());\n+        assertEquals(6L, matchingRoles.iterator().next().getId());\n+    }\n }"}]}