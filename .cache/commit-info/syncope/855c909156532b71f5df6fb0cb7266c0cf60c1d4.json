{"sha":"855c909156532b71f5df6fb0cb7266c0cf60c1d4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg1NWM5MDkxNTY1MzJiNzFmNWRmNmZiMGNiNzI2NmMwY2Y2MGMxZDQ=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-03-09T14:04:15Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2016-03-09T14:04:15Z"},"message":"[SYNCOPE-775] fixes the issue improving search panels","tree":{"sha":"84dc8cc59efbd0e2a058f4cb8e818221e9343296","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/84dc8cc59efbd0e2a058f4cb8e818221e9343296"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/855c909156532b71f5df6fb0cb7266c0cf60c1d4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/855c909156532b71f5df6fb0cb7266c0cf60c1d4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/855c909156532b71f5df6fb0cb7266c0cf60c1d4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/855c909156532b71f5df6fb0cb7266c0cf60c1d4/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"f171f9d31bf39586b21d9db59955a111ce412312","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f171f9d31bf39586b21d9db59955a111ce412312","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f171f9d31bf39586b21d9db59955a111ce412312"}],"stats":{"total":479,"additions":336,"deletions":143},"files":[{"sha":"b3918e12cf6e27acd1b75f4ba5f32eae46970d26","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -21,8 +21,8 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n@@ -61,7 +61,9 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected IModel<List<SearchClause.Type>> types;\n \n-    protected IModel<List<Pair<Long, String>>> groupNames;\n+    protected IModel<Map<Long, String>> groupNames;\n+\n+    protected IModel<List<String>> roleNames;\n \n     protected IModel<List<SearchClause>> model;\n \n@@ -127,7 +129,7 @@ protected AbstractSearchPanel(\n         final SearchClausePanel searchClausePanel = new SearchClausePanel(\"panel\", \"panel\",\n                 Model.of(new SearchClause()),\n                 required,\n-                types, anames, dnames, groupNames, resourceNames);\n+                types, anames, dnames, groupNames, roleNames, resourceNames);\n \n         if (enableSearch) {\n             searchClausePanel.enableSearch();"},{"sha":"9342fa3b30c09dd2e04e45b88954e791f9f2be1d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -19,8 +19,9 @@\n package org.apache.syncope.client.console.panels.search;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n-import org.apache.commons.lang3.tuple.Pair;\n+import java.util.Map;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -69,32 +70,37 @@ protected void populate() {\n \n             @Override\n             protected List<SearchClause.Type> load() {\n-                List<SearchClause.Type> result = new ArrayList<SearchClause.Type>();\n-                result.add(SearchClause.Type.ATTRIBUTE);\n-                result.add(SearchClause.Type.MEMBERSHIP);\n-                result.add(SearchClause.Type.RESOURCE);\n-                return result;\n+                return getAvailableTypes();\n             }\n         };\n \n-        this.groupNames = new LoadableDetachableModel<List<Pair<Long, String>>>() {\n+        this.groupNames = new LoadableDetachableModel<Map<Long, String>>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;\n \n             @Override\n-            protected List<Pair<Long, String>> load() {\n+            protected Map<Long, String> load() {\n                 List<GroupTO> groupTOs = groupRestClient.list(\"/\",\n                         -1, -1,\n                         new SortParam<>(\"name\", true),\n                         null);\n \n-                List<Pair<Long, String>> result = new ArrayList<>(groupTOs.size());\n+                final Map<Long, String> result = new HashMap<>(groupTOs.size());\n                 for (GroupTO group : groupTOs) {\n-                    result.add(Pair.of(group.getKey(), group.getName()));\n+                    result.put(group.getKey(), group.getName());\n                 }\n \n                 return result;\n             }\n         };\n     }\n+\n+    protected List<SearchClause.Type> getAvailableTypes() {\n+        List<SearchClause.Type> result = new ArrayList<SearchClause.Type>();\n+        result.add(SearchClause.Type.ATTRIBUTE);\n+        result.add(SearchClause.Type.GROUP_MEMBERSHIP);\n+        result.add(SearchClause.Type.RESOURCE);\n+        result.add(SearchClause.Type.RELATIONSHIP);\n+        return result;\n+    }\n }"},{"sha":"5780cf127145b8b42c2ae5f2f8e3e2dddc93f923","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSearchPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.lang3.tuple.Pair;\n+import java.util.Map;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -65,13 +65,13 @@ protected List<SearchClause.Type> load() {\n             }\n         };\n \n-        this.groupNames = new LoadableDetachableModel<List<Pair<Long, String>>>() {\n+        this.groupNames = new LoadableDetachableModel<Map<Long, String>>() {\n \n             private static final long serialVersionUID = 5275935387613157437L;\n \n             @Override\n-            protected List<Pair<Long, String>> load() {\n-                return Collections.<Pair<Long, String>>emptyList();\n+            protected Map<Long, String> load() {\n+                return Collections.<Long, String>emptyMap();\n             }\n         };\n     }"},{"sha":"b5732edcdb81f9ed4349c331cbebb721a48210dc","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClause.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClause.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -38,9 +38,10 @@ public enum Operator {\n     public enum Type {\n \n         ATTRIBUTE,\n-        MEMBERSHIP,\n+        GROUP_MEMBERSHIP,\n+        ROLE_MEMBERSHIP,\n         RESOURCE,\n-        ENTITLEMENT;\n+        RELATIONSHIP;\n \n     }\n "},{"sha":"c756c42781b3c20808a8bcf58783c5f91502cdf5","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":159,"deletions":72,"changes":231,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -25,19 +25,21 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.collections4.functors.StringValueTransformer;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.search.SearchClause.Comparator;\n import org.apache.syncope.client.console.panels.search.SearchClause.Operator;\n import org.apache.syncope.client.console.panels.search.SearchClause.Type;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n+import org.apache.syncope.common.rest.api.service.RelationshipTypeService;\n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -68,15 +70,17 @@ public class SearchClausePanel extends FieldPanel<SearchClause> {\n \n     private final IModel<List<String>> dnames;\n \n-    private final IModel<List<Pair<Long, String>>> groupNames;\n+    private final IModel<Map<Long, String>> groupNames;\n+\n+    private final IModel<List<String>> roleNames;\n \n     private final IModel<List<String>> resourceNames;\n \n     private IModel<SearchClause> clause;\n \n     private final LoadableDetachableModel<List<Comparator>> comparators;\n \n-    private final LoadableDetachableModel<List<Pair<Long, String>>> properties;\n+    private final LoadableDetachableModel<List<String>> properties;\n \n     private final Fragment operatorFragment;\n \n@@ -92,7 +96,8 @@ public SearchClausePanel(\n             final IModel<List<SearchClause.Type>> types,\n             final IModel<List<String>> anames,\n             final IModel<List<String>> dnames,\n-            final IModel<List<Pair<Long, String>>> groupNames,\n+            final IModel<Map<Long, String>> groupNames,\n+            final IModel<List<String>> roleNames,\n             final IModel<List<String>> resourceNames\n     ) {\n \n@@ -105,6 +110,7 @@ public SearchClausePanel(\n         this.anames = anames;\n         this.dnames = dnames;\n         this.groupNames = groupNames;\n+        this.roleNames = roleNames;\n         this.resourceNames = resourceNames;\n \n         searchButton = new AjaxSubmitLink(\"search\") {\n@@ -144,23 +150,33 @@ protected List<Comparator> load() {\n                     case ATTRIBUTE:\n                         return Arrays.asList(SearchClause.Comparator.values());\n \n-                    case MEMBERSHIP:\n+                    case ROLE_MEMBERSHIP:\n+                    case GROUP_MEMBERSHIP:\n                     case RESOURCE:\n-                        return Arrays.asList(SearchClause.Comparator.EQUALS, SearchClause.Comparator.NOT_EQUALS);\n+                        return Arrays.asList(\n+                                SearchClause.Comparator.EQUALS,\n+                                SearchClause.Comparator.NOT_EQUALS);\n+\n+                    case RELATIONSHIP:\n+                        return Arrays.asList(\n+                                SearchClause.Comparator.IS_NOT_NULL,\n+                                SearchClause.Comparator.IS_NULL,\n+                                SearchClause.Comparator.EQUALS,\n+                                SearchClause.Comparator.NOT_EQUALS);\n                     default:\n                         return Collections.<Comparator>emptyList();\n                 }\n             }\n         };\n \n-        properties = new LoadableDetachableModel<List<Pair<Long, String>>>() {\n+        properties = new LoadableDetachableModel<List<String>>() {\n \n             private static final long serialVersionUID = 1L;\n \n             @Override\n-            protected List<Pair<Long, String>> load() {\n+            protected List<String> load() {\n                 if (field.getModel().getObject() == null || field.getModel().getObject().getType() == null) {\n-                    return Collections.<Pair<Long, String>>emptyList();\n+                    return Collections.<String>emptyList();\n                 }\n \n                 switch (field.getModel().getObject().getType()) {\n@@ -170,28 +186,39 @@ protected List<Pair<Long, String>> load() {\n                             names.addAll(anames.getObject());\n                         }\n                         Collections.sort(names);\n-                        return CollectionUtils.collect(names, new Transformer<String, Pair<Long, String>>() {\n+                        return names;\n \n-                            @Override\n-                            public Pair<Long, String> transform(final String input) {\n-                                return Pair.of(-1L, input);\n-                            }\n-                        }, new ArrayList<Pair<Long, String>>());\n+                    case GROUP_MEMBERSHIP:\n+                        final List<String> groups = CollectionUtils.collect(groupNames.getObject().keySet(),\n+                                StringValueTransformer.<Long>stringValueTransformer(), new ArrayList<String>());\n \n-                    case MEMBERSHIP:\n-                        return groupNames.getObject();\n+                        Collections.sort(groups);\n+                        return groups;\n+\n+                    case ROLE_MEMBERSHIP:\n+                        final List<String> roles = new ArrayList<>(roleNames.getObject());\n+                        Collections.sort(roles);\n+                        return roles;\n \n                     case RESOURCE:\n-                        return CollectionUtils.collect(resourceNames.getObject(),\n-                                new Transformer<String, Pair<Long, String>>() {\n+                        final List<String> resources = new ArrayList<>(resourceNames.getObject());\n+                        Collections.sort(resources);\n+                        return resources;\n+\n+                    case RELATIONSHIP:\n+                        final List<String> relations = CollectionUtils.collect(\n+                                SyncopeConsoleSession.get().getService(RelationshipTypeService.class).list(),\n+                                new Transformer<RelationshipTypeTO, String>() {\n \n                             @Override\n-                            public Pair<Long, String> transform(final String input) {\n-                                return Pair.of(-1L, input);\n+                            public String transform(final RelationshipTypeTO input) {\n+                                return input.getKey();\n                             }\n-                        }, new ArrayList<Pair<Long, String>>());\n+                        }, new ArrayList<String>());\n+                        return relations;\n+\n                     default:\n-                        return Collections.<Pair<Long, String>>emptyList();\n+                        return Collections.<String>emptyList();\n                 }\n             }\n         };\n@@ -293,29 +320,18 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             operatorContainer.add(searchButtonFragment);\n         }\n \n-        final AjaxDropDownChoicePanel<Pair<Long, String>> property = new AjaxDropDownChoicePanel<>(\n-                \"property\", \"property\", new PropertyModel<Pair<Long, String>>(searchClause, \"property\") {\n-\n-            private static final long serialVersionUID = -8430020195995502040L;\n+        final AjaxDropDownChoicePanel<String> property = new AjaxDropDownChoicePanel<>(\n+                \"property\", \"property\", new PropertyModel<String>(searchClause, \"property\"));\n+        property.hideLabel().setRequired(required).setOutputMarkupId(true);\n+        property.setChoices(properties);\n+        property.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n-            @Override\n-            public Pair<Long, String> getObject() {\n-                return Pair.of(\n-                        searchClause.getType() == Type.MEMBERSHIP && searchClause.getProperty() != null\n-                                ? Long.parseLong(searchClause.getProperty()) : -1L,\n-                        searchClause.getProperty());\n-            }\n+            private static final long serialVersionUID = -1107858522700306810L;\n \n             @Override\n-            public void setObject(final Pair<Long, String> object) {\n-                if (object != null) {\n-                    searchClause.setProperty(\n-                            object.getLeft() >= 0 ? String.valueOf(object.getLeft()) : object.getRight());\n-                }\n+            protected void onUpdate(final AjaxRequestTarget target) {\n             }\n         });\n-        property.hideLabel().setRequired(required).setOutputMarkupId(true);\n-        property.setChoices(properties);\n         field.add(property);\n \n         final AjaxDropDownChoicePanel<SearchClause.Comparator> comparator = new AjaxDropDownChoicePanel<>(\n@@ -340,6 +356,10 @@ public void setObject(final Pair<Long, String> object) {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n+                final SearchClause searchClause = new SearchClause();\n+                searchClause.setType(Type.valueOf(type.getDefaultModelObjectAsString()));\n+                SearchClausePanel.this.clause.setObject(searchClause);\n+\n                 setFieldAccess(searchClause.getType(), property, comparator, value);\n                 target.add(property);\n                 target.add(comparator);\n@@ -354,7 +374,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                if (type.getModelObject() == SearchClause.Type.ATTRIBUTE) {\n+                if (type.getModelObject() == SearchClause.Type.ATTRIBUTE\n+                        || type.getModelObject() == SearchClause.Type.RELATIONSHIP) {\n                     if (comparator.getModelObject() == SearchClause.Comparator.IS_NULL\n                             || comparator.getModelObject() == SearchClause.Comparator.IS_NOT_NULL) {\n \n@@ -365,6 +386,22 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     }\n                     target.add(value);\n                 }\n+\n+                if (type.getModelObject() == SearchClause.Type.RELATIONSHIP) {\n+                    if (comparator.getModelObject() == SearchClause.Comparator.EQUALS\n+                            || comparator.getModelObject() == SearchClause.Comparator.NOT_EQUALS) {\n+                        property.setEnabled(false);\n+                    } else {\n+                        property.setEnabled(true);\n+                    }\n+\n+                    final SearchClause searchClause = new SearchClause();\n+                    searchClause.setType(Type.valueOf(type.getDefaultModelObjectAsString()));\n+                    searchClause.setComparator(comparator.getModelObject());\n+                    SearchClausePanel.this.clause.setObject(searchClause);\n+\n+                    target.add(property);\n+                }\n             }\n         });\n \n@@ -375,11 +412,15 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n     private void setFieldAccess(\n             final Type type,\n-            final AjaxDropDownChoicePanel<Pair<Long, String>> property,\n+            final AjaxDropDownChoicePanel<String> property,\n             final FieldPanel<Comparator> comparator,\n             final FieldPanel<String> value) {\n \n         if (type != null) {\n+            property.setEnabled(true);\n+            comparator.setEnabled(true);\n+            value.setEnabled(true);\n+\n             switch (type) {\n                 case ATTRIBUTE:\n                     if (!comparator.isEnabled()) {\n@@ -391,17 +432,41 @@ private void setFieldAccess(\n                             && comparator.getModelObject() != SearchClause.Comparator.IS_NOT_NULL);\n                     property.setChoiceRenderer(new DefaultChoiceRender());\n                     break;\n-                case MEMBERSHIP:\n+\n+                case ROLE_MEMBERSHIP:\n+                    property.setChoiceRenderer(new DefaultChoiceRender());\n+                    value.setEnabled(false);\n+                    value.setModelObject(\"\");\n+                    break;\n+\n+                case GROUP_MEMBERSHIP:\n                     property.setChoiceRenderer(new GroupChoiceRender());\n                     value.setEnabled(false);\n                     value.setModelObject(\"\");\n                     break;\n+\n                 case RESOURCE:\n                     property.setChoiceRenderer(new DefaultChoiceRender());\n                     value.setEnabled(false);\n                     value.setModelObject(\"\");\n                     break;\n+\n+                case RELATIONSHIP:\n+                    property.setChoiceRenderer(new DefaultChoiceRender());\n+                    if (comparator.getModelObject() == SearchClause.Comparator.IS_NULL\n+                            || comparator.getModelObject() == SearchClause.Comparator.IS_NOT_NULL) {\n+                        value.setEnabled(false);\n+                        value.setModelObject(\"\");\n+                        property.setEnabled(true);\n+                    } else {\n+                        value.setEnabled(true);\n+                        property.setEnabled(false);\n+                        property.setModelObject(null);\n+                    }\n+                    break;\n+\n                 default:\n+                    break;\n             }\n         }\n     }\n@@ -459,7 +524,7 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n-                    case MEMBERSHIP:\n+                    case GROUP_MEMBERSHIP:\n                         switch (object) {\n                             case EQUALS:\n                                 display = \"IN\";\n@@ -473,6 +538,7 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n+                    case ROLE_MEMBERSHIP:\n                     case RESOURCE:\n                         switch (object) {\n                             case EQUALS:\n@@ -487,6 +553,28 @@ public Object getDisplayValue(final SearchClause.Comparator object) {\n                                 display = StringUtils.EMPTY;\n                         }\n                         break;\n+                    case RELATIONSHIP:\n+                        switch (object) {\n+                            case IS_NOT_NULL:\n+                                display = \"EXIST\";\n+                                break;\n+\n+                            case IS_NULL:\n+                                display = \"NOT EXIST\";\n+                                break;\n+\n+                            case EQUALS:\n+                                display = \"WITH\";\n+                                break;\n+\n+                            case NOT_EQUALS:\n+                                display = \"NOT WITH\";\n+                                break;\n+\n+                            default:\n+                                display = StringUtils.EMPTY;\n+                        }\n+                        break;\n                     default:\n                         display = object.toString();\n                 }\n@@ -502,20 +590,28 @@ public String getIdValue(final SearchClause.Comparator object, final int index)\n             public SearchClause.Comparator getObject(\n                     final String id, final IModel<? extends List<? extends SearchClause.Comparator>> choices) {\n \n+                if (id == null) {\n+                    return SearchClause.Comparator.EQUALS;\n+                }\n+\n                 final SearchClause.Comparator res;\n                 switch (id) {\n                     case \"HAS\":\n                     case \"IN\":\n+                    case \"WITH\":\n                         res = SearchClause.Comparator.EQUALS;\n                         break;\n                     case \"HAS NOT\":\n                     case \"NOT IN\":\n+                    case \"NOT WITH\":\n                         res = SearchClause.Comparator.NOT_EQUALS;\n                         break;\n                     case \"NULL\":\n+                    case \"NOT EXIST\":\n                         res = SearchClause.Comparator.IS_NULL;\n                         break;\n                     case \"NOT NULL\":\n+                    case \"EXIST\":\n                         res = SearchClause.Comparator.IS_NOT_NULL;\n                         break;\n                     case \"==\":\n@@ -549,7 +645,7 @@ public SearchClause.Comparator getObject(\n     @Override\n     public FieldPanel<SearchClause> clone() {\n         final SearchClausePanel panel = new SearchClausePanel(\n-                getId(), name, null, required, types, anames, dnames, groupNames, resourceNames);\n+                getId(), name, null, required, types, anames, dnames, groupNames, roleNames, resourceNames);\n         panel.setReadOnly(this.isReadOnly());\n         panel.setRequired(this.isRequired());\n         if (searchButton.isEnabled()) {\n@@ -558,30 +654,23 @@ public FieldPanel<SearchClause> clone() {\n         return panel;\n     }\n \n-    private class DefaultChoiceRender implements IChoiceRenderer<Pair<Long, String>> {\n+    private class DefaultChoiceRender implements IChoiceRenderer<String> {\n \n         private static final long serialVersionUID = -8034248752951761058L;\n \n         @Override\n-        public Object getDisplayValue(final Pair<Long, String> object) {\n-            return object.getRight();\n+        public Object getDisplayValue(final String object) {\n+            return object;\n         }\n \n         @Override\n-        public String getIdValue(final Pair<Long, String> object, final int index) {\n-            return object.getRight();\n+        public String getIdValue(final String object, final int index) {\n+            return object;\n         }\n \n         @Override\n-        public Pair<Long, String> getObject(\n-                final String id, final IModel<? extends List<? extends Pair<Long, String>>> choices) {\n-            return IterableUtils.find(choices.getObject(), new Predicate<Pair<Long, String>>() {\n-\n-                @Override\n-                public boolean evaluate(final Pair<Long, String> object) {\n-                    return id.equals(object.getRight());\n-                }\n-            });\n+        public String getObject(final String id, final IModel<? extends List<? extends String>> choices) {\n+            return id;\n         }\n     }\n \n@@ -590,20 +679,18 @@ private class GroupChoiceRender extends DefaultChoiceRender {\n         private static final long serialVersionUID = -8034248752951761058L;\n \n         @Override\n-        public String getIdValue(final Pair<Long, String> object, final int index) {\n-            return String.valueOf(object.getLeft());\n+        public String getIdValue(final String object, final int index) {\n+            return object;\n         }\n \n         @Override\n-        public Pair<Long, String> getObject(\n-                final String id, final IModel<? extends List<? extends Pair<Long, String>>> choices) {\n-            return IterableUtils.find(choices.getObject(), new Predicate<Pair<Long, String>>() {\n+        public String getObject(final String id, final IModel<? extends List<? extends String>> choices) {\n+            return id;\n+        }\n \n-                @Override\n-                public boolean evaluate(final Pair<Long, String> object) {\n-                    return id.equals(String.valueOf(object.getLeft()));\n-                }\n-            });\n+        @Override\n+        public Object getDisplayValue(final String object) {\n+            return groupNames.getObject().get(Long.parseLong(object));\n         }\n     }\n "},{"sha":"0d539558708c7f62b8fd84840310033f1af6acfe","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":68,"deletions":3,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -118,7 +118,7 @@ public static SearchClause getPrimitiveSearchClause(final SearchCondition<Search\n         LOG.info(\"Condition: \" + sc.getCondition());\n \n         if (SpecialAttr.GROUPS.toString().equals(property)) {\n-            res.setType(SearchClause.Type.MEMBERSHIP);\n+            res.setType(SearchClause.Type.GROUP_MEMBERSHIP);\n             res.setProperty(value);\n         } else if (SpecialAttr.RESOURCES.toString().equals(property)) {\n             res.setType(SearchClause.Type.RESOURCE);\n@@ -170,11 +170,12 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n         boolean notTheFirst = false;\n \n         for (SearchClause clause : clauses) {\n-            if (clause.getType() != null && StringUtils.isNotBlank(clause.getProperty())) {\n+            if (clause.getType() != null && (SearchClause.Type.RELATIONSHIP == clause.getType()\n+                    || StringUtils.isNotBlank(clause.getProperty()))) {\n                 prevCondition = condition;\n \n                 switch (clause.getType()) {\n-                    case MEMBERSHIP:\n+                    case GROUP_MEMBERSHIP:\n                         Long groupId = NumberUtils.toLong(clause.getProperty().split(\" \")[0]);\n \n                         if (builder instanceof UserFiqlSearchConditionBuilder) {\n@@ -239,6 +240,70 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n                                 break;\n                         }\n                         break;\n+\n+                    case ROLE_MEMBERSHIP:\n+                        switch (clause.getComparator()) {\n+                            case EQUALS:\n+                                condition = ((UserFiqlSearchConditionBuilder) builder).inRoles(clause.getProperty());\n+                                break;\n+                            case NOT_EQUALS:\n+                                condition = ((UserFiqlSearchConditionBuilder) builder).notInRoles(clause.getProperty());\n+                                break;\n+                            default:\n+                                break;\n+                        }\n+                        break;\n+\n+                    case RELATIONSHIP:\n+                        String relationship = clause.getProperty();\n+                        String value = clause.getValue();\n+\n+                        // This condition could be avoided by providing a refactoring of the common lib\n+                        if (builder instanceof UserFiqlSearchConditionBuilder) {\n+                            switch (clause.getComparator()) {\n+                                case IS_NOT_NULL:\n+                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                            inRelationshipTypes(relationship);\n+                                    break;\n+                                case IS_NULL:\n+                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                            notInRelationshipTypes(relationship);\n+                                    break;\n+                                case EQUALS:\n+                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                            inRelationships(Long.parseLong(value));\n+                                    break;\n+                                case NOT_EQUALS:\n+                                    condition = ((UserFiqlSearchConditionBuilder) builder).\n+                                            notInRelationships(Long.parseLong(value));\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                        } else {\n+                            switch (clause.getComparator()) {\n+                                case IS_NOT_NULL:\n+                                    condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n+                                            inRelationshipTypes(relationship);\n+                                    break;\n+                                case IS_NULL:\n+                                    condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n+                                            notInRelationshipTypes(relationship);\n+                                    break;\n+                                case EQUALS:\n+                                    condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n+                                            inRelationships(Long.parseLong(value));\n+                                    break;\n+                                case NOT_EQUALS:\n+                                    condition = ((AnyObjectFiqlSearchConditionBuilder) builder).\n+                                            notInRelationships(Long.parseLong(value));\n+                                    break;\n+                                default:\n+                                    break;\n+                            }\n+                        }\n+                        break;\n+\n                     default:\n                         break;\n                 }"},{"sha":"2949130cef17377a8ad0ae68825d9d5a3077020b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -18,14 +18,22 @@\n  */\n package org.apache.syncope.client.console.panels.search;\n \n+import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n \n public final class UserSearchPanel extends AnyObjectSearchPanel {\n \n     private static final long serialVersionUID = -1769527800450203738L;\n \n+    private final RoleRestClient roleRestClient = new RoleRestClient();\n+\n     public static class Builder extends AnyObjectSearchPanel.Builder {\n \n         private static final long serialVersionUID = 6308997285778809578L;\n@@ -44,4 +52,36 @@ private UserSearchPanel(final String id, final Builder builder) {\n         super(id, AnyTypeKind.USER, builder);\n     }\n \n+    @Override\n+    protected void populate() {\n+        super.populate();\n+\n+        this.roleNames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return CollectionUtils.collect(roleRestClient.list(), new Transformer<RoleTO, String>() {\n+\n+                    @Override\n+                    public String transform(final RoleTO input) {\n+                        return input.getKey();\n+                    }\n+                }, new ArrayList<String>());\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected List<SearchClause.Type> getAvailableTypes() {\n+        List<SearchClause.Type> result = new ArrayList<SearchClause.Type>();\n+        result.add(SearchClause.Type.ATTRIBUTE);\n+        result.add(SearchClause.Type.ROLE_MEMBERSHIP);\n+        result.add(SearchClause.Type.GROUP_MEMBERSHIP);\n+        result.add(SearchClause.Type.RESOURCE);\n+        result.add(SearchClause.Type.RELATIONSHIP);\n+        return result;\n+    }\n+\n }"},{"sha":"f362a38c8929590cf647c00e923697da5fab95b2","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/list/ConnConfPropertyListView.java","status":"modified","additions":7,"deletions":16,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -36,7 +36,6 @@\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.ComponentTag;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.CheckBox;\n import org.apache.wicket.markup.html.form.FormComponent;\n import org.apache.wicket.markup.html.form.PasswordTextField;\n@@ -70,9 +69,8 @@ public ConnConfPropertyListView(\n     protected void populateItem(final ListItem<ConnConfProperty> item) {\n         final ConnConfProperty property = item.getModelObject();\n \n-        final Label label = new Label(\"connPropAttrSchema\", StringUtils.isBlank(property.getSchema().getDisplayName())\n-                ? property.getSchema().getName() : property.getSchema().getDisplayName());\n-        item.add(label);\n+        final String label = StringUtils.isBlank(property.getSchema().getDisplayName())\n+                ? property.getSchema().getName() : property.getSchema().getDisplayName();\n \n         final FieldPanel<? extends Serializable> field;\n         boolean required = false;\n@@ -82,8 +80,7 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n                 || Constants.GUARDED_STRING.equalsIgnoreCase(property.getSchema().getType())\n                 || Constants.GUARDED_BYTE_ARRAY.equalsIgnoreCase(property.getSchema().getType())) {\n \n-            field = new AjaxPasswordFieldPanel(\n-                    \"panel\", label.getDefaultModelObjectAsString(), new Model<String>(), false);\n+            field = new AjaxPasswordFieldPanel(\"panel\", label, new Model<String>(), false);\n             ((PasswordTextField) field.getField()).setResetPassword(false);\n \n             required = property.getSchema().isRequired();\n@@ -102,16 +99,12 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n             if (ClassUtils.isAssignable(Number.class, propertySchemaClass)) {\n                 @SuppressWarnings(\"unchecked\")\n                 Class<Number> numberClass = (Class<Number>) propertySchemaClass;\n-                field = new AjaxSpinnerFieldPanel.Builder<>().build(\n-                        \"panel\", label.getDefaultModelObjectAsString(), numberClass, new Model<Number>());\n-\n+                field = new AjaxSpinnerFieldPanel.Builder<>().build(\"panel\", label, numberClass, new Model<Number>());\n                 required = property.getSchema().isRequired();\n             } else if (ClassUtils.isAssignable(Boolean.class, propertySchemaClass)) {\n-                field = new AjaxCheckBoxPanel(\n-                        \"panel\", label.getDefaultModelObjectAsString(), new Model<Boolean>(), false);\n+                field = new AjaxCheckBoxPanel(\"panel\", label, new Model<Boolean>(), false);\n             } else {\n-                field = new AjaxTextFieldPanel(\n-                        \"panel\", label.getDefaultModelObjectAsString(), new Model<String>(), false);\n+                field = new AjaxTextFieldPanel(\"panel\", label, new Model<String>(), false);\n                 required = property.getSchema().isRequired();\n             }\n \n@@ -126,9 +119,7 @@ protected void populateItem(final ListItem<ConnConfProperty> item) {\n         if (isArray) {\n             final MultiFieldPanel multiFieldPanel = new MultiFieldPanel.Builder(\n                     new PropertyModel<List<String>>(property, \"values\")).setEventTemplate(true).build(\n-                            \"panel\",\n-                            label.getDefaultModelObjectAsString(),\n-                            field);\n+                    \"panel\", label, field);\n             item.add(multiFieldPanel);\n             fieldPanel = multiFieldPanel;\n         } else {"},{"sha":"445564ac6c669a4dbfc4262b0b323ffae6698303","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Ownership.java","status":"modified","additions":29,"deletions":30,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -188,38 +188,37 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             ownerContainer.add(userSearchFragment);\n         }\n \n-        final AjaxTextFieldPanel userOwner\n-                = new AjaxTextFieldPanel(\"userOwner\", \"userOwner\",\n-                        new PropertyModel<String>(groupHandler.getInnerObject(), \"userOwner\") {\n+        final AjaxTextFieldPanel userOwner = new AjaxTextFieldPanel(\n+                \"userOwner\", \"userOwner\", new PropertyModel<String>(groupHandler.getInnerObject(), \"userOwner\") {\n \n-                    private static final long serialVersionUID = -3743432456095828573L;\n+            private static final long serialVersionUID = -3743432456095828573L;\n \n-                    @Override\n-                    public String getObject() {\n-                        if (groupHandler.getInnerObject().getUserOwner() == null) {\n-                            return StringUtils.EMPTY;\n-                        } else {\n-                            UserTO userTO = userRestClient.read(groupHandler.getInnerObject().getUserOwner());\n-                            if (userTO == null) {\n-                                return StringUtils.EMPTY;\n-                            } else {\n-                                return String.format(\"[%d] %s\", userTO.getKey(), userTO.getUsername());\n-                            }\n-                        }\n+            @Override\n+            public String getObject() {\n+                if (groupHandler.getInnerObject().getUserOwner() == null) {\n+                    return StringUtils.EMPTY;\n+                } else {\n+                    UserTO userTO = userRestClient.read(groupHandler.getInnerObject().getUserOwner());\n+                    if (userTO == null) {\n+                        return StringUtils.EMPTY;\n+                    } else {\n+                        return String.format(\"[%d] %s\", userTO.getKey(), userTO.getUsername());\n                     }\n+                }\n+            }\n \n-                    @Override\n-                    public void setObject(final String object) {\n-                        if (StringUtils.isBlank(object)) {\n-                            groupHandler.getInnerObject().setUserOwner(null);\n-                        } else {\n-                            final Matcher matcher = owner.matcher(object);\n-                            if (matcher.matches()) {\n-                                groupHandler.getInnerObject().setUserOwner(Long.parseLong(matcher.group(1)));\n-                            }\n-                        }\n+            @Override\n+            public void setObject(final String object) {\n+                if (StringUtils.isBlank(object)) {\n+                    groupHandler.getInnerObject().setUserOwner(null);\n+                } else {\n+                    final Matcher matcher = owner.matcher(object);\n+                    if (matcher.matches()) {\n+                        groupHandler.getInnerObject().setUserOwner(Long.parseLong(matcher.group(1)));\n                     }\n-                }, false);\n+                }\n+            }\n+        }, false);\n         userOwner.setPlaceholder(\"userOwner\");\n         userOwner.hideLabel();\n         userOwner.setReadOnly(true).setOutputMarkupId(true);\n@@ -237,8 +236,8 @@ public void onClick(final AjaxRequestTarget target) {\n         };\n         userSearchFragment.add(userOwnerReset);\n \n-        final AjaxTextFieldPanel groupOwner = new AjaxTextFieldPanel(\"groupOwner\", \"groupOwner\",\n-                new PropertyModel<String>(groupHandler.getInnerObject(), \"groupOwner\") {\n+        final AjaxTextFieldPanel groupOwner = new AjaxTextFieldPanel(\n+                \"groupOwner\", \"groupOwner\", new PropertyModel<String>(groupHandler.getInnerObject(), \"groupOwner\") {\n \n             private static final long serialVersionUID = -3743432456095828573L;\n \n@@ -292,7 +291,7 @@ public void onEvent(final IEvent<?> event) {\n             final AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n             if (Ownership.this.isGroupOwnership.getObject()) {\n                 final String fiql = SearchUtils.buildFIQL(\n-                        groupSearchPanel.getModel().getObject(), SyncopeClient.getUserSearchConditionBuilder());\n+                        groupSearchPanel.getModel().getObject(), SyncopeClient.getGroupSearchConditionBuilder());\n                 groupSearchResultPanel.search(fiql, target);\n             } else {\n                 final String fiql = SearchUtils.buildFIQL("},{"sha":"6764cca18e1506edc7480dbc3b7898ddc36bebaf","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -177,8 +177,7 @@ private List<RelationshipTO> getCurrentRelationships() {\n                 : Collections.<RelationshipTO>emptyList();\n     }\n \n-    private void addRelationship(\n-            final Map<String, List<RelationshipTO>> relationships, final RelationshipTO... rels) {\n+    private void addRelationship(final Map<String, List<RelationshipTO>> relationships, final RelationshipTO... rels) {\n \n         for (RelationshipTO relationship : rels) {\n             final List<RelationshipTO> listrels;"},{"sha":"683fef744224b58759ccb8e448032e7963c3da70","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/search/SearchClausePanel.html","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -20,6 +20,10 @@\n   <head><title></title></head>\n   <body>\n     <wicket:extend>\n+      <wicket:enclosure child=\"field-label\">\n+        <label wicket:id=\"field-label\">[LABEL]</label><span wicket:id=\"required\"/>\n+        <span wicket:id=\"externalAction\"/>\n+      </wicket:enclosure>\n       <span wicket:id=\"container\"  class=\"clause\">\n         <div wicket:id=\"operatorContainer\" class=\"field operator\"><span wicket:id=\"operator\"/></div>\n         <span wicket:id=\"type\" class=\"field type\"/>"},{"sha":"c1ac29791f905c64e8cf253616a72999ee7099a7","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/AbstractFieldPanel.html","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/855c909156532b71f5df6fb0cb7266c0cf60c1d4/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.html?ref=855c909156532b71f5df6fb0cb7266c0cf60c1d4","patch":"@@ -18,7 +18,6 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n-\n     <wicket:fragment wicket:id=\"requiredFragment\">\n       <span wicket:id=\"requiredLabel\"/>\n     </wicket:fragment>"}]}