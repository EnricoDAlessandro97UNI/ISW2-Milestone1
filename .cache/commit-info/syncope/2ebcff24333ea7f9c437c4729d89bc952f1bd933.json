{"sha":"2ebcff24333ea7f9c437c4729d89bc952f1bd933","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJlYmNmZjI0MzMzZWE3ZjljNDM3YzQ3MjlkODliYzk1MmYxYmQ5MzM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-03T10:16:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-10T06:34:14Z"},"message":"[SYNCOPE-956] IT using Groovy implementations","tree":{"sha":"84c7d2f035e7a2fabb33d2464a50db255dd0ae8a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/84c7d2f035e7a2fabb33d2464a50db255dd0ae8a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2ebcff24333ea7f9c437c4729d89bc952f1bd933","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2ebcff24333ea7f9c437c4729d89bc952f1bd933","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2ebcff24333ea7f9c437c4729d89bc952f1bd933","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2ebcff24333ea7f9c437c4729d89bc952f1bd933/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d5b5792269ed931100ac9b6526790253c4133763","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5b5792269ed931100ac9b6526790253c4133763","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d5b5792269ed931100ac9b6526790253c4133763"}],"stats":{"total":426,"additions":255,"deletions":171},"files":[{"sha":"c4945fd3281119ae921b79701772b0a03655b773","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAImplementation.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAImplementation.java?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -28,9 +28,11 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.ImplementationCheck;\n \n @Entity\n @Table(name = JPAImplementation.TABLE)\n+@ImplementationCheck\n @Cacheable\n public class JPAImplementation extends AbstractProvidedKeyEntity implements Implementation {\n "},{"sha":"a613f875412916954564fd35b4e1abcd8092cace","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationCheck.java?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = ImplementationValidator.class)\n+@Documented\n+public @interface ImplementationCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.implementation}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"095a97def141cfb2fe4341d54c76bcf9e84971bc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ImplementationValidator.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FImplementationValidator.java?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+\n+public class ImplementationValidator extends AbstractValidator<ImplementationCheck, Implementation> {\n+\n+    @Override\n+    public boolean isValid(final Implementation resource, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        if (resource.getKey() == null || !KEY_PATTERN.matcher(resource.getKey()).matches()) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidKey, \"Invalid implementation key\")).\n+                    addPropertyNode(\"key\").addConstraintViolation();\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+}"},{"sha":"6c79367d52080d14784c2a7c69bb972757c5e480","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueLogicActions.java","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d5b5792269ed931100ac9b6526790253c4133763/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java?ref=d5b5792269ed931100ac9b6526790253c4133763","patch":"@@ -1,75 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core.reference;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.core.provisioning.api.LogicActions;\n-\n-/**\n- * Class for integration tests: transform (by making it double) any attribute value for defined schema.\n- */\n-public class DoubleValueLogicActions implements LogicActions {\n-\n-    private static final String NAME = \"makeItDouble\";\n-\n-    @Override\n-    public <A extends AnyTO> A beforeCreate(final A input) {\n-        for (AttrTO attr : input.getPlainAttrs()) {\n-            if (NAME.equals(attr.getSchema())) {\n-                List<String> values = new ArrayList<>(attr.getValues().size());\n-                for (String value : attr.getValues()) {\n-                    try {\n-                        values.add(String.valueOf(2 * Long.parseLong(value)));\n-                    } catch (NumberFormatException e) {\n-                        // ignore\n-                    }\n-                }\n-                attr.getValues().clear();\n-                attr.getValues().addAll(values);\n-            }\n-        }\n-\n-        return input;\n-    }\n-\n-    @Override\n-    public <M extends AnyPatch> M beforeUpdate(final M input) {\n-        for (AttrPatch patch : input.getPlainAttrs()) {\n-            if (NAME.equals(patch.getAttrTO().getSchema())) {\n-                List<String> values = new ArrayList<>(patch.getAttrTO().getValues().size());\n-                for (String value : patch.getAttrTO().getValues()) {\n-                    try {\n-                        values.add(String.valueOf(2 * Long.parseLong(value)));\n-                    } catch (NumberFormatException e) {\n-                        // ignore\n-                    }\n-                }\n-                patch.getAttrTO().getValues().clear();\n-                patch.getAttrTO().getValues().addAll(values);\n-            }\n-        }\n-\n-        return input;\n-    }\n-}"},{"sha":"d4467e8f8fbbfdc759a65ac207862b5ea3415ac9","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -146,19 +146,16 @@ public class ITImplementationLookup implements ImplementationLookup {\n             put(ImplementationType.PASSWORD_RULE, classNames);\n \n             classNames = new HashSet<>();\n-            classNames.add(PrefixItemTransformer.class.getName());\n             put(ImplementationType.ITEM_TRANSFORMER, classNames);\n \n             classNames = new HashSet<>();\n             classNames.add(TestSampleJobDelegate.class.getName());\n             put(ImplementationType.TASKJOB_DELEGATE, classNames);\n \n             classNames = new HashSet<>();\n-            classNames.add(TestReconciliationFilterBuilder.class.getName());\n             put(ImplementationType.RECON_FILTER_BUILDER, classNames);\n \n             classNames = new HashSet<>();\n-            classNames.add(DoubleValueLogicActions.class.getName());\n             put(ImplementationType.LOGIC_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n@@ -179,7 +176,6 @@ public class ITImplementationLookup implements ImplementationLookup {\n             put(ImplementationType.PUSH_ACTIONS, classNames);\n \n             classNames = new HashSet<>();\n-            classNames.add(TestPullRule.class.getName());\n             put(ImplementationType.PULL_CORRELATION_RULE, classNames);\n \n             classNames = new HashSet<>();"},{"sha":"052cc3d5a1144cefa30bad7a9dfa291ec5b351df","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -25,9 +25,12 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n@@ -46,22 +49,22 @@\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.core.reference.TestPullRule;\n import org.junit.jupiter.api.Test;\n \n public class PolicyITCase extends AbstractITCase {\n \n-    private PullPolicyTO buildPullPolicyTO() {\n+    private PullPolicyTO buildPullPolicyTO() throws IOException {\n         ImplementationTO corrRule = null;\n         try {\n-            corrRule = implementationService.read(TestPullRule.class.getSimpleName());\n+            corrRule = implementationService.read(\"TestPullRule\");\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 corrRule = new ImplementationTO();\n-                corrRule.setKey(TestPullRule.class.getSimpleName());\n-                corrRule.setEngine(ImplementationEngine.JAVA);\n+                corrRule.setKey(\"TestPullRule\");\n+                corrRule.setEngine(ImplementationEngine.GROOVY);\n                 corrRule.setType(ImplementationType.PULL_CORRELATION_RULE);\n-                corrRule.setBody(TestPullRule.class.getName());\n+                corrRule.setBody(IOUtils.toString(\n+                        getClass().getResourceAsStream(\"/TestPullRule.groovy\"), StandardCharsets.UTF_8));\n                 Response response = implementationService.create(corrRule);\n                 corrRule = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n                 assertNotNull(corrRule);\n@@ -127,14 +130,13 @@ public void createMissingDescription() {\n     }\n \n     @Test\n-    public void create() {\n+    public void create() throws IOException {\n         PullPolicyTO policy = buildPullPolicyTO();\n \n         PullPolicyTO policyTO = createPolicy(policy);\n \n         assertNotNull(policyTO);\n-        assertEquals(TestPullRule.class.getSimpleName(),\n-                policyTO.getSpecification().getCorrelationRules().get(AnyTypeKind.USER.name()));\n+        assertEquals(\"TestPullRule\", policyTO.getSpecification().getCorrelationRules().get(AnyTypeKind.USER.name()));\n     }\n \n     @Test\n@@ -167,7 +169,7 @@ public void update() {\n     }\n \n     @Test\n-    public void delete() {\n+    public void delete() throws IOException {\n         PullPolicyTO policy = buildPullPolicyTO();\n \n         PullPolicyTO policyTO = createPolicy(policy);\n@@ -185,8 +187,8 @@ public void delete() {\n \n     @Test\n     public void getPullCorrelationRuleJavaClasses() {\n-        assertEquals(1, syncopeService.platform().\n-                getJavaImplInfo(ImplementationType.PULL_CORRELATION_RULE).get().getClasses().size());\n+        assertTrue(syncopeService.platform().\n+                getJavaImplInfo(ImplementationType.PULL_CORRELATION_RULE).get().getClasses().isEmpty());\n     }\n \n     @Test"},{"sha":"848b97c96b4da703e0bf24da649e3c93eb49d240","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -30,6 +30,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Locale;\n@@ -85,10 +86,7 @@\n import org.apache.syncope.core.provisioning.java.pushpull.LDAPPasswordPullActions;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.FlowableDetector;\n-import org.apache.syncope.fit.core.reference.PrefixItemTransformer;\n-import org.apache.syncope.fit.core.reference.TestReconciliationFilterBuilder;\n import org.apache.syncope.fit.core.reference.TestPullActions;\n-import org.apache.syncope.fit.core.reference.TestPullRule;\n import org.identityconnectors.framework.common.objects.Name;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n@@ -418,7 +416,7 @@ public void reconcileFromLDAP() {\n     }\n \n     @Test\n-    public void reconcileFromScriptedSQL() {\n+    public void reconcileFromScriptedSQL() throws IOException {\n         // 0. reset sync token and set MappingItemTransformer\n         ResourceTO resource = resourceService.read(RESOURCE_NAME_DBSCRIPTED);\n         ResourceTO originalResource = SerializationUtils.clone(resource);\n@@ -429,11 +427,14 @@ public void reconcileFromScriptedSQL() {\n                 filter(object -> \"location\".equals(object.getIntAttrName())).findFirst().get();\n         assertNotNull(mappingItem);\n \n+        final String prefix = \"PREFIX_\";\n+\n         ImplementationTO transformer = new ImplementationTO();\n-        transformer.setKey(PrefixItemTransformer.class.getSimpleName());\n-        transformer.setEngine(ImplementationEngine.JAVA);\n+        transformer.setKey(\"PrefixItemTransformer\");\n+        transformer.setEngine(ImplementationEngine.GROOVY);\n         transformer.setType(ImplementationType.ITEM_TRANSFORMER);\n-        transformer.setBody(PrefixItemTransformer.class.getName());\n+        transformer.setBody(IOUtils.toString(\n+                getClass().getResourceAsStream(\"/PrefixItemTransformer.groovy\"), StandardCharsets.UTF_8));\n         Response response = implementationService.create(transformer);\n         transformer = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n         assertNotNull(transformer);\n@@ -455,7 +456,7 @@ public void reconcileFromScriptedSQL() {\n             // 1. create printer on external resource\n             AnyObjectTO anyObjectTO = AnyObjectITCase.getSampleTO(\"pull\");\n             String originalLocation = anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0);\n-            assertFalse(originalLocation.startsWith(PrefixItemTransformer.PREFIX));\n+            assertFalse(originalLocation.startsWith(prefix));\n \n             anyObjectTO = createAnyObject(anyObjectTO).getEntity();\n             assertNotNull(anyObjectTO);\n@@ -464,10 +465,8 @@ public void reconcileFromScriptedSQL() {\n             // (location starts with given prefix on external resource)\n             ConnObjectTO connObjectTO = resourceService.\n                     readConnObject(RESOURCE_NAME_DBSCRIPTED, anyObjectTO.getType(), anyObjectTO.getKey());\n-            assertFalse(anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0).\n-                    startsWith(PrefixItemTransformer.PREFIX));\n-            assertTrue(connObjectTO.getAttr(\"LOCATION\").get().getValues().get(0).\n-                    startsWith(PrefixItemTransformer.PREFIX));\n+            assertFalse(anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0).startsWith(prefix));\n+            assertTrue(connObjectTO.getAttr(\"LOCATION\").get().getValues().get(0).startsWith(prefix));\n \n             // 3. unlink any existing printer and delete from Syncope (printer is now only on external resource)\n             PagedResult<AnyObjectTO> matchingPrinters = anyObjectService.search(\n@@ -505,7 +504,7 @@ public void reconcileFromScriptedSQL() {\n     }\n \n     @Test\n-    public void filteredReconciliation() {\n+    public void filteredReconciliation() throws IOException {\n         String user1OnTestPull = UUID.randomUUID().toString();\n         String user2OnTestPull = UUID.randomUUID().toString();\n \n@@ -521,10 +520,11 @@ public void filteredReconciliation() {\n \n             // 2. create new pull task for test-db, with reconciliation filter (surname 'Rossi') \n             ImplementationTO reconFilterBuilder = new ImplementationTO();\n-            reconFilterBuilder.setKey(TestReconciliationFilterBuilder.class.getSimpleName());\n-            reconFilterBuilder.setEngine(ImplementationEngine.JAVA);\n+            reconFilterBuilder.setKey(\"TestReconFilterBuilder\");\n+            reconFilterBuilder.setEngine(ImplementationEngine.GROOVY);\n             reconFilterBuilder.setType(ImplementationType.RECON_FILTER_BUILDER);\n-            reconFilterBuilder.setBody(TestReconciliationFilterBuilder.class.getName());\n+            reconFilterBuilder.setBody(IOUtils.toString(\n+                    getClass().getResourceAsStream(\"/TestReconFilterBuilder.groovy\"), StandardCharsets.UTF_8));\n             Response response = implementationService.create(reconFilterBuilder);\n             reconFilterBuilder = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n             assertNotNull(reconFilterBuilder);\n@@ -749,20 +749,21 @@ public void issueSYNCOPE230() {\n     }\n \n     @Test\n-    public void issueSYNCOPE258() {\n+    public void issueSYNCOPE258() throws IOException {\n         // -----------------------------\n         // Add a custom correlation rule\n         // -----------------------------\n         ImplementationTO corrRule = null;\n         try {\n-            corrRule = implementationService.read(TestPullRule.class.getSimpleName());\n+            corrRule = implementationService.read(\"TestPullRule\");\n         } catch (SyncopeClientException e) {\n             if (e.getType().getResponseStatus() == Response.Status.NOT_FOUND) {\n                 corrRule = new ImplementationTO();\n-                corrRule.setKey(TestPullRule.class.getSimpleName());\n-                corrRule.setEngine(ImplementationEngine.JAVA);\n+                corrRule.setKey(\"TestPullRule\");\n+                corrRule.setEngine(ImplementationEngine.GROOVY);\n                 corrRule.setType(ImplementationType.PULL_CORRELATION_RULE);\n-                corrRule.setBody(TestPullRule.class.getName());\n+                corrRule.setBody(IOUtils.toString(\n+                        getClass().getResourceAsStream(\"/TestPullRule.groovy\"), StandardCharsets.UTF_8));\n                 Response response = implementationService.create(corrRule);\n                 corrRule = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n                 assertNotNull(corrRule);"},{"sha":"2c289069dd8223dfbf6f85ea76a3c0afbd3c650d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -27,6 +27,7 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n import java.util.Base64;\n import java.util.Collection;\n import java.util.Collections;\n@@ -78,7 +79,6 @@\n import org.apache.syncope.core.provisioning.java.propagation.LDAPPasswordPropagationActions;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n-import org.apache.syncope.fit.core.reference.DoubleValueLogicActions;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.jupiter.api.Test;\n@@ -798,12 +798,13 @@ public void issueSYNCOPE402() {\n     }\n \n     @Test\n-    public void issueSYNCOPE420() {\n+    public void issueSYNCOPE420() throws IOException {\n         ImplementationTO logicActions = new ImplementationTO();\n-        logicActions.setKey(DoubleValueLogicActions.class.getSimpleName());\n-        logicActions.setEngine(ImplementationEngine.JAVA);\n+        logicActions.setKey(\"DoubleValueLogicActions\");\n+        logicActions.setEngine(ImplementationEngine.GROOVY);\n         logicActions.setType(ImplementationType.LOGIC_ACTIONS);\n-        logicActions.setBody(DoubleValueLogicActions.class.getName());\n+        logicActions.setBody(org.apache.commons.io.IOUtils.toString(\n+                getClass().getResourceAsStream(\"/DoubleValueLogicActions.groovy\"), StandardCharsets.UTF_8));\n         Response response = implementationService.create(logicActions);\n         logicActions = getObject(response.getLocation(), ImplementationService.class, ImplementationTO.class);\n         assertNotNull(logicActions);"},{"sha":"a7bc87ddd6de8d28e10d5f3a8aeaf9e9423645ca","filename":"fit/core-reference/src/test/resources/DoubleValueLogicActions.groovy","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import groovy.transform.CompileStatic\n+import org.apache.syncope.common.lib.patch.AnyPatch\n+import org.apache.syncope.common.lib.patch.AttrPatch\n+import org.apache.syncope.common.lib.to.AnyTO\n+import org.apache.syncope.common.lib.to.AttrTO\n+import org.apache.syncope.core.provisioning.api.LogicActions\n+\n+/**\n+ * Class for integration tests: transform (by making it double) any attribute value for defined schema.\n+ */\n+@CompileStatic\n+class DoubleValueLogicActions implements LogicActions {\n+  \n+  private static final String NAME = \"makeItDouble\";\n+\n+  @Override\n+  <A extends AnyTO> A beforeCreate(final A input) {\n+    for (AttrTO attr : input.getPlainAttrs()) {\n+      if (NAME.equals(attr.getSchema())) {\n+        List<String> values = new ArrayList<String>(attr.getValues().size());\n+        for (String value : attr.getValues()) {\n+          try {\n+            values.add(String.valueOf(2 * Long.parseLong(value)));\n+          } catch (NumberFormatException e) {\n+            // ignore\n+          }\n+        }\n+        attr.getValues().clear();\n+        attr.getValues().addAll(values);\n+      }\n+    }\n+\n+    return input;\n+  }\n+\n+  @Override\n+  <M extends AnyPatch> M beforeUpdate(final M input) {\n+    for (AttrPatch patch : input.getPlainAttrs()) {\n+      if (NAME.equals(patch.getAttrTO().getSchema())) {\n+        List<String> values = new ArrayList<String>(patch.getAttrTO().getValues().size());\n+        for (String value : patch.getAttrTO().getValues()) {\n+          try {\n+            values.add(String.valueOf(2 * Long.parseLong(value)));\n+          } catch (NumberFormatException e) {\n+            // ignore\n+          }\n+        }\n+        patch.getAttrTO().getValues().clear();\n+        patch.getAttrTO().getValues().addAll(values);\n+      }\n+    }\n+\n+    return input;\n+  }\n+}"},{"sha":"c26aef150c0c6e41e9b80baf540f41ca861a649c","filename":"fit/core-reference/src/test/resources/PrefixItemTransformer.groovy","status":"renamed","additions":30,"deletions":29,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FPrefixItemTransformer.groovy?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -16,9 +16,8 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.fit.core.reference;\n-\n import java.util.ArrayList;\n+import groovy.transform.CompileStatic\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.EntityTO;\n@@ -27,40 +26,42 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n \n-public class PrefixItemTransformer implements ItemTransformer {\n-\n-    public static final String PREFIX = \"PREFIX_\";\n+@CompileStatic\n+class PrefixItemTransformer implements ItemTransformer {\n+\t\n+  public static String PREFIX = \"PREFIX_\";\n \n-    @Override\n-    public List<PlainAttrValue> beforePropagation(\n-            final Item item,\n-            final Entity entity,\n-            final List<PlainAttrValue> values) {\n+  @Override\n+  List<PlainAttrValue> beforePropagation(\n+    Item item,\n+    Entity entity,\n+    List<PlainAttrValue> values) {\n \n-        if (values == null || values.isEmpty() || values.get(0).getStringValue() == null) {\n-            return values;\n-        } else {\n-            String value = values.get(0).getStringValue();\n-            values.get(0).setStringValue(PREFIX + value);\n+    if (values == null || values.isEmpty() || values.get(0).getStringValue() == null) {\n+      return values;\n+    } else {\n+      String value = values.get(0).getStringValue();\n+      values.get(0).setStringValue(PREFIX + value);\n \n-            return values;\n-        }\n+      return values;\n     }\n+  }\n \n-    @Override\n-    public List<Object> beforePull(\n-            final Item item,\n-            final EntityTO entityTO,\n-            final List<Object> values) {\n+  @Override\n+  List<Object> beforePull(\n+    Item item,\n+    EntityTO entityTO,\n+    List<Object> values) {\n \n-        if (values == null || values.isEmpty() || values.get(0) == null) {\n-            return values;\n-        } else {\n-            List<Object> newValues = new ArrayList<>(values);\n-            newValues.set(0, StringUtils.substringAfter(values.get(0).toString(), PREFIX));\n+    if (values == null || values.isEmpty() || values.get(0) == null) {\n+      return values;\n+    } else {\n+      List<Object> newValues = new ArrayList<>(values);\n+      newValues.set(0, StringUtils.substringAfter(values.get(0).toString(), PREFIX));\n \n-            return newValues;\n-        }\n+      return newValues;\n     }\n+  }\n \n }\n+","previous_filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/PrefixItemTransformer.java"},{"sha":"3203c7b8a21f7e6949bc58178edfa540fbe0a2e7","filename":"fit/core-reference/src/test/resources/TestPullRule.groovy","status":"renamed","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestPullRule.groovy?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -16,8 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.fit.core.reference;\n-\n+import groovy.transform.CompileStatic\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -26,15 +25,16 @@\n /**\n  * Test pull rule relying on <tt>email</tt> attribute value.\n  */\n-public class TestPullRule implements PullCorrelationRule {\n+@CompileStatic\n+class TestPullRule implements PullCorrelationRule {\n \n-    @Override\n-    public SearchCond getSearchCond(final ConnectorObject connObj) {\n-        AttributeCond cond = new AttributeCond();\n-        cond.setSchema(\"email\");\n-        cond.setType(AttributeCond.Type.EQ);\n-        cond.setExpression(connObj.getName().getNameValue());\n+  @Override\n+  SearchCond getSearchCond(final ConnectorObject connObj) {\n+    AttributeCond cond = new AttributeCond();\n+    cond.setSchema(\"email\");\n+    cond.setType(AttributeCond.Type.EQ);\n+    cond.setExpression(connObj.getName().getNameValue());\n \n-        return SearchCond.getLeafCond(cond);\n-    }\n+    return SearchCond.getLeafCond(cond);\n+  }\n }","previous_filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullRule.java"},{"sha":"b7ebe49a4be6983adf1238438b27a01aeee90559","filename":"fit/core-reference/src/test/resources/TestReconFilterBuilder.groovy","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestReconFilterBuilder.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestReconFilterBuilder.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FTestReconFilterBuilder.groovy?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -16,20 +16,20 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.fit.core.reference;\n-\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n+import groovy.transform.CompileStatic\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n \n-public class TestReconciliationFilterBuilder implements ReconFilterBuilder {\n+@CompileStatic\n+class TestReconFilterBuilder implements ReconFilterBuilder {\n \n-    private static final Filter EQUALS = FilterBuilder.equalTo(AttributeBuilder.build(\"SURNAME\", \"Rossi\"));\n+  private static final Filter EQUALS = FilterBuilder.equalTo(AttributeBuilder.build(\"SURNAME\", \"Rossi\"));\n \n-    @Override\n-    public Filter build() {\n-        return EQUALS;\n-    }\n+  @Override\n+  Filter build() {\n+    return EQUALS;\n+  }\n \n }","previous_filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestReconciliationFilterBuilder.java"},{"sha":"a3fe0d68a5e12bb26bb023d987f646ef5b96dd22","filename":"fit/core-reference/src/test/resources/log4j2.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -33,6 +33,14 @@ under the License.\n   </appenders>\n \n   <loggers>\n+    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n     <asyncLogger name=\"org.apache.syncope.fit\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>"},{"sha":"edd7463f9779af681ba8443a04a80f90e144d101","filename":"pom.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2ebcff24333ea7f9c437c4729d89bc952f1bd933/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2ebcff24333ea7f9c437c4729d89bc952f1bd933/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=2ebcff24333ea7f9c437c4729d89bc952f1bd933","patch":"@@ -736,12 +736,6 @@ under the License.\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-jdbc</artifactId>\n         <version>${openjpa.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>junit</groupId>\n-            <artifactId>junit</artifactId>\n-          </exclusion>\n-        </exclusions>\n       </dependency>\n       <dependency>\n         <groupId>org.apache.openjpa</groupId>"}]}