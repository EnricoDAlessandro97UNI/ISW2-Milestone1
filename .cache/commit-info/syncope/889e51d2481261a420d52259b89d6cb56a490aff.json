{"sha":"889e51d2481261a420d52259b89d6cb56a490aff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg4OWU1MWQyNDgxMjYxYTQyMGQ1MjI1OWI4OWQ2Y2I1NmE0OTBhZmY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-01T14:23:18Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-01T14:23:18Z"},"message":"Added unique value constraint to schema\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"69cae77494d21efbf020b96cacbddf3cb6888476","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/69cae77494d21efbf020b96cacbddf3cb6888476"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/889e51d2481261a420d52259b89d6cb56a490aff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/889e51d2481261a420d52259b89d6cb56a490aff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/889e51d2481261a420d52259b89d6cb56a490aff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/889e51d2481261a420d52259b89d6cb56a490aff/comments","author":null,"committer":null,"parents":[{"sha":"40a52770858f866f3c3cb631fd1c75f09f9ff19d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/40a52770858f866f3c3cb631fd1c75f09f9ff19d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/40a52770858f866f3c3cb631fd1c75f09f9ff19d"}],"stats":{"total":476,"additions":291,"deletions":185},"files":[{"sha":"99e24e9edc67d7b1059e9942e317acf43eb67e37","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -25,6 +25,7 @@ public class SchemaTO extends AbstractBaseTO {\n     private boolean virtual;\n     private boolean mandatory;\n     private boolean multivalue;\n+    private boolean uniquevalue;\n     private String conversionPattern;\n     private String validatorClass;\n     private Set<String> derivedSchemas;\n@@ -66,6 +67,14 @@ public void setMultivalue(boolean multivalue) {\n         this.multivalue = multivalue;\n     }\n \n+    public boolean isUniquevalue() {\n+        return uniquevalue;\n+    }\n+\n+    public void setUniquevalue(boolean uniquevalue) {\n+        this.uniquevalue = uniquevalue;\n+    }\n+\n     public String getName() {\n         return name;\n     }"},{"sha":"f2c624287306ab13c5e7239f9d71a1b49268cd4e","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -16,27 +16,30 @@\n \n public enum SyncopeClientExceptionType {\n \n-    NotFound(\n-    \"Syncope.NotFound\",\n-    \"Syncope.NotFound.entity\"),\n+    InvalidDerivedSchemas(\n+    \"Syncope.InvalidDerivedSchemas\",\n+    \"Syncope.InvalidDerivedSchemas.derivedSchemaName\"),\n     InvalidResources(\n     \"Syncope.InvalidResources\",\n     \"Syncope.InvalidResources.resourceName\"),\n     InvalidRoles(\n     \"Syncope.InvalidRoles\",\n     \"Syncope.InvalidRoles.roleName\"),\n-    InvalidDerivedSchemas(\n-    \"Syncope.InvalidDerivedSchemas\",\n-    \"Syncope.InvalidDerivedSchemas.derivedSchemaName\"),\n     InvalidSchemas(\n     \"Syncope.InvalidSchemas\",\n     \"Syncope.InvalidSchemas.schemaName\"),\n-    UserRequiredValuesMissing(\n-    \"Syncope.RequiredValuesMissing\",\n-    \"Syncope.RequiredValuesMissing.attributeName\"),\n-    UserInvalidValues(\n+    InvalidUniques(\n+    \"Syncope.InvalidUniques\",\n+    \"Syncope.InvalidUniques.attributeName\"),\n+    InvalidValues(\n     \"Syncope.InvalidValues\",\n-    \"Syncope.InvalidValues.attributeName\");\n+    \"Syncope.InvalidValues.attributeName\"),\n+    NotFound(\n+    \"Syncope.NotFound\",\n+    \"Syncope.NotFound.entity\"),\n+    RequiredValuesMissing(\n+    \"Syncope.RequiredValuesMissing\",\n+    \"Syncope.RequiredValuesMissing.attributeName\");\n     private String headerValue;\n     private String elementHeaderName;\n "},{"sha":"2ec1c3fc9888cf6949faddfb733a03e27dc99766","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttribute.java","status":"modified","additions":14,"deletions":50,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -14,15 +14,14 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.text.DecimalFormat;\n-import java.text.SimpleDateFormat;\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n-import org.syncope.core.persistence.validation.ValidationException;\n+import org.syncope.core.persistence.validation.ParseException;\n+import org.syncope.core.persistence.validation.ValidationFailedException;\n \n @MappedSuperclass\n public abstract class AbstractAttribute extends AbstractBaseBean {\n@@ -35,30 +34,20 @@ public Long getId() {\n         return id;\n     }\n \n-    public <T extends AbstractAttributeValue> void addValue(\n-            Object value, T attributeValue) throws ValidationException {\n+    public <T extends AbstractAttributeValue> T addValue(String value,\n+            T attributeValue) throws ParseException, ValidationFailedException {\n \n-        T actualValue =\n-                getSchema().getValidator().getValue(value, attributeValue);\n+        T actualValue = getSchema().getValidator().getValue(value,\n+                attributeValue);\n         actualValue.setAttribute(this);\n \n         if (!getSchema().isMultivalue()) {\n             getAttributeValues().clear();\n         }\n \n         addAttributeValue(actualValue);\n-    }\n-\n-    public <T extends AbstractAttributeValue> void removeValue(\n-            Object value, T attributeValue) throws ValidationException {\n-\n-        T actualValue =\n-                getSchema().getValidator().getValue(value, attributeValue);\n \n-        removeAttributeValue(actualValue);\n-        if (!getAttributeValues().isEmpty() && !getSchema().isMultivalue()) {\n-            getAttributeValues().clear();\n-        }\n+        return actualValue;\n     }\n \n     public abstract <T extends AbstractAttributable> T getOwner();\n@@ -69,45 +58,20 @@ public <T extends AbstractAttributeValue> void removeValue(\n \n     public abstract <T extends AbstractSchema> void setSchema(T schema);\n \n-    public abstract <T extends AbstractAttributeValue> boolean addAttributeValue(T attributeValue);\n+    public abstract <T extends AbstractAttributeValue> boolean addAttributeValue(\n+            T attributeValue);\n \n-    public abstract <T extends AbstractAttributeValue> boolean removeAttributeValue(T attributeValue);\n+    public abstract <T extends AbstractAttributeValue> boolean removeAttributeValue(\n+            T attributeValue);\n \n     public abstract Set<? extends AbstractAttributeValue> getAttributeValues();\n \n-    public Set<String> getStringAttributeValues() {\n+    public Set<String> getAttributeValuesAsStrings() {\n         Set<? extends AbstractAttributeValue> values = getAttributeValues();\n+        \n         Set<String> result = new HashSet<String>(values.size());\n-\n-        String stringValue = \"\";\n         for (AbstractAttributeValue attributeValue : values) {\n-            switch (getSchema().getType()) {\n-\n-                case String:\n-                    stringValue = (String) attributeValue.getValue();\n-                    break;\n-\n-                case Boolean:\n-                    stringValue = ((Boolean) attributeValue.getValue()).toString();\n-                    break;\n-\n-                case Long:\n-                    stringValue = getSchema().getFormatter(\n-                            DecimalFormat.class).format(attributeValue.getValue());\n-                    break;\n-\n-                case Double:\n-                    stringValue = getSchema().getFormatter(\n-                            DecimalFormat.class).format(attributeValue.getValue());\n-                    break;\n-\n-                case Date:\n-                    stringValue = getSchema().getFormatter(\n-                            SimpleDateFormat.class).format(attributeValue.getValue());\n-                    break;\n-            }\n-\n-            result.add(stringValue);\n+            result.add(attributeValue.getValueAsString());\n         }\n \n         return result;"},{"sha":"a94f054e667c031063f7656335c994929ea20ace","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributeValue.java","status":"modified","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -14,6 +14,8 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.text.DecimalFormat;\n+import java.text.SimpleDateFormat;\n import java.util.Date;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n@@ -39,22 +41,42 @@ public Long getId() {\n         return id;\n     }\n \n+    public Boolean getBooleanValue() {\n+        return booleanValue;\n+    }\n+\n     public void setBooleanValue(Boolean booleanValue) {\n         this.booleanValue = booleanValue;\n     }\n \n+    public Date getDateValue() {\n+        return dateValue;\n+    }\n+\n     public void setDateValue(Date dateValue) {\n         this.dateValue = dateValue;\n     }\n \n+    public Double getDoubleValue() {\n+        return doubleValue;\n+    }\n+\n     public void setDoubleValue(Double doubleValue) {\n         this.doubleValue = doubleValue;\n     }\n \n+    public Long getLongValue() {\n+        return longValue;\n+    }\n+\n     public void setLongValue(Long longValue) {\n         this.longValue = longValue;\n     }\n \n+    public String getStringValue() {\n+        return stringValue;\n+    }\n+\n     public void setStringValue(String stringValue) {\n         this.stringValue = stringValue;\n     }\n@@ -67,6 +89,37 @@ public <T> T getValue() {\n                 ? longValue : stringValue))));\n     }\n \n+    public String getValueAsString() {\n+        String result = null;\n+\n+        switch (getAttribute().getSchema().getType()) {\n+\n+            case String:\n+                result = stringValue;\n+                break;\n+\n+            case Boolean:\n+                result = booleanValue.toString();\n+                break;\n+\n+            case Long:\n+                result = getAttribute().getSchema().getFormatter(\n+                        DecimalFormat.class).format(longValue);\n+                break;\n+\n+            case Double:\n+                result = getAttribute().getSchema().getFormatter(\n+                        DecimalFormat.class).format(doubleValue);\n+                break;\n+\n+            case Date:\n+                result = getAttribute().getSchema().getFormatter(\n+                        SimpleDateFormat.class).format(dateValue);\n+        }\n+\n+        return result;\n+    }\n+\n     public abstract <T extends AbstractAttribute> T getAttribute();\n \n     public abstract <T extends AbstractAttribute> void setAttribute("},{"sha":"efca9bd34dd2593944810d6af649eb3cb0a8176e","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":24,"deletions":15,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -28,7 +28,6 @@\n import javax.persistence.Transient;\n import org.syncope.core.persistence.validation.AttributeBasicValidator;\n import org.syncope.core.persistence.validation.AttributeValidator;\n-import org.syncope.core.persistence.validation.ValidatorInstantiationException;\n import org.syncope.types.SchemaType;\n \n @MappedSuperclass\n@@ -45,6 +44,7 @@ public abstract class AbstractSchema extends AbstractBaseBean {\n     private boolean virtual;\n     private boolean mandatory;\n     private boolean multivalue;\n+    private boolean uniquevalue;\n     @Column(nullable = true)\n     private String conversionPattern;\n     @Column(nullable = true)\n@@ -57,6 +57,7 @@ public AbstractSchema() {\n         virtual = false;\n         mandatory = false;\n         multivalue = false;\n+        uniquevalue = false;\n     }\n \n     public String getName() {\n@@ -99,9 +100,15 @@ public void setMultivalue(boolean multivalue) {\n         this.multivalue = multivalue;\n     }\n \n-    public AttributeValidator getValidator()\n-            throws ValidatorInstantiationException {\n+    public boolean isUniquevalue() {\n+        return uniquevalue;\n+    }\n+\n+    public void setUniquevalue(boolean uniquevalue) {\n+        this.uniquevalue = uniquevalue;\n+    }\n \n+    public AttributeValidator getValidator() {\n         if (validator != null) {\n             return validator;\n         }\n@@ -111,20 +118,20 @@ public AttributeValidator getValidator()\n                 Constructor validatorConstructor =\n                         Class.forName(getValidatorClass()).getConstructor(\n                         new Class[]{getClass().getSuperclass()});\n-                validator = (AttributeValidator) validatorConstructor.newInstance(this);\n+                validator =\n+                        (AttributeValidator) validatorConstructor.newInstance(\n+                        this);\n             } catch (Exception e) {\n-                throw new ValidatorInstantiationException(\n-                        \"Could not instantiate validator of type \" + getValidatorClass(), e);\n-            }\n-        } else {\n-            try {\n-                validator = new AttributeBasicValidator(this);\n-            } catch (ClassNotFoundException cnfe) {\n-                throw new ValidatorInstantiationException(\n-                        \"Could not instantiate basic validator\", cnfe);\n+                log.error(\"Could not instantiate validator of type \"\n+                        + getValidatorClass()\n+                        + \", reverting to AttributeBasicValidator\", e);\n             }\n         }\n \n+        if (validator == null) {\n+            validator = new AttributeBasicValidator(this);\n+        }\n+\n         return validator;\n     }\n \n@@ -138,15 +145,17 @@ public void setValidatorClass(String validatorClass) {\n \n     public String getConversionPattern() {\n         if (!getType().isConversionPatternNeeded()) {\n-            log.warn(\"Conversion pattern is not needed: \" + \"this attribute type is \" + getType());\n+            log.warn(\"Conversion pattern is not needed: \"\n+                    + \"this attribute type is \" + getType());\n         }\n \n         return conversionPattern;\n     }\n \n     public void setConversionPattern(String conversionPattern) {\n         if (!getType().isConversionPatternNeeded()) {\n-            log.warn(\"Conversion pattern will be ignored: \" + \"this attribute type is \" + getType());\n+            log.warn(\"Conversion pattern will be ignored: \"\n+                    + \"this attribute type is \" + getType());\n         }\n \n         this.conversionPattern = conversionPattern;"},{"sha":"e009d250da6dc22ddca838de8cb55e131052018a","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeValueDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -23,6 +23,9 @@ public interface AttributeValueDAO extends DAO {\n \n     <T extends AbstractAttributeValue> List<T> findAll(Class<T> reference);\n \n+    <T extends AbstractAttributeValue> boolean existingAttributeValue(\n+            T attributeValue);\n+\n     <T extends AbstractAttributeValue> T save(T attributeValue);\n \n     <T extends AbstractAttributeValue> void delete(Long id, Class<T> reference);"},{"sha":"28b36741cba821c0c31c5a22503ecab4edcf8ea2","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -16,14 +16,15 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.validation.UniqueValueException;\n \n public interface SchemaDAO extends DAO {\n \n     <T extends AbstractSchema> T find(String name, Class<T> reference);\n \n     <T extends AbstractSchema> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractSchema> T save(T schema);\n+    <T extends AbstractSchema> T save(T schema) throws UniqueValueException;\n \n     <T extends AbstractSchema> void delete(String name, Class<T> reference);\n }"},{"sha":"61bb5d77119ed7e0fe73faf8a868780a1d0d0e70","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeValueDAOImpl.java","status":"modified","additions":27,"deletions":3,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -28,12 +28,34 @@ public class AttributeValueDAOImpl extends AbstractDAOImpl\n     @Override\n     public <T extends AbstractAttributeValue> T find(\n             Long id, Class<T> reference) {\n-        \n+\n         return entityManager.find(reference, id);\n     }\n \n     @Override\n-    public <T extends AbstractAttributeValue> List<T> findAll(Class<T> reference) {\n+    public <T extends AbstractAttributeValue> boolean existingAttributeValue(\n+            T attributeValue) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + attributeValue.getClass().getSimpleName()\n+                + \" e WHERE (e.stringValue IS NOT NULL AND e.stringValue = :stringValue)\"\n+                + \" OR (e.booleanValue IS NOT NULL AND e.booleanValue = :booleanValue)\"\n+                + \" OR (e.dateValue IS NOT NULL AND e.dateValue = :dateValue)\"\n+                + \" OR (e.longValue IS NOT NULL AND e.longValue = :longValue)\"\n+                + \" OR (e.doubleValue IS NOT NULL AND e.doubleValue = :doubleValue)\");\n+        query.setParameter(\"stringValue\", attributeValue.getStringValue());\n+        query.setParameter(\"booleanValue\", attributeValue.getBooleanValue());\n+        query.setParameter(\"dateValue\", attributeValue.getDateValue());\n+        query.setParameter(\"longValue\", attributeValue.getLongValue());\n+        query.setParameter(\"doubleValue\", attributeValue.getDoubleValue());\n+\n+        return !query.getResultList().isEmpty();\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributeValue> List<T> findAll(\n+            Class<T> reference) {\n+\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();\n@@ -47,7 +69,9 @@ public <T extends AbstractAttributeValue> T save(T attributeValue) {\n \n     @Override\n     @Transactional\n-    public <T extends AbstractAttributeValue> void delete(Long id, Class<T> reference) {\n+    public <T extends AbstractAttributeValue> void delete(Long id,\n+            Class<T> reference) {\n+\n         T attributeValue = find(id, reference);\n         if (attributeValue == null) {\n             return;"},{"sha":"13310086e4e3356fbd9ee9fcadc810b877b29e36","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -29,6 +29,7 @@\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SchemaMappingDAO;\n+import org.syncope.core.persistence.validation.UniqueValueException;\n \n @Repository\n public class SchemaDAOImpl extends AbstractDAOImpl\n@@ -53,7 +54,13 @@ public <T extends AbstractSchema> List<T> findAll(Class<T> reference) {\n \n     @Override\n     @Transactional\n-    public <T extends AbstractSchema> T save(T schema) {\n+    public <T extends AbstractSchema> T save(T schema)\n+            throws UniqueValueException {\n+\n+        if (schema.isMultivalue() && schema.isUniquevalue()) {\n+            throw new UniqueValueException(schema);\n+        }\n+\n         return entityManager.merge(schema);\n     }\n "},{"sha":"473c3f4fcb0590f0c5c9eefac7bc5fdc857a4dd0","filename":"core/src/main/java/org/syncope/core/persistence/validation/AlwaysTrueValidator.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAlwaysTrueValidator.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -19,8 +19,7 @@\n \n public class AlwaysTrueValidator extends AttributeValidator {\n \n-    public AlwaysTrueValidator(AbstractSchema schema)\n-            throws ClassNotFoundException {\n+    public AlwaysTrueValidator(AbstractSchema schema) {\n \n         super(schema);\n     }"},{"sha":"57d84e16138cf1831dae90dea851c8cabafc42bf","filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeBasicValidator.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeBasicValidator.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -19,9 +19,8 @@\n \n public class AttributeBasicValidator extends AttributeValidator {\n \n-    public AttributeBasicValidator(AbstractSchema schema)\n-            throws ClassNotFoundException {\n-        \n+    public AttributeBasicValidator(AbstractSchema schema) {\n+\n         super(schema);\n     }\n "},{"sha":"9b22c12c41e79b6b66c384b9bc325634ad5a1cbb","filename":"core/src/main/java/org/syncope/core/persistence/validation/AttributeValidator.java","status":"modified","additions":14,"deletions":46,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FAttributeValidator.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -23,29 +23,24 @@\n public abstract class AttributeValidator {\n \n     final protected AbstractSchema schema;\n-    final protected Class attributeClass;\n \n-    public AttributeValidator(AbstractSchema schema)\n-            throws ClassNotFoundException {\n+    public AttributeValidator(AbstractSchema schema) {\n \n         this.schema = schema;\n-        this.attributeClass = Class.forName(schema.getType().getClassName());\n     }\n \n-    public <T extends AbstractAttributeValue> T getValue(Object value,\n-            T attributeValue) throws ValidationException {\n+    public <T extends AbstractAttributeValue> T getValue(String value,\n+            T attributeValue)\n+            throws ParseException, ValidationFailedException {\n \n-        attributeValue = value instanceof String\n-                ? parseValue((String) value, attributeValue)\n-                : parseValue(value, attributeValue);\n+        attributeValue = parseValue(value, attributeValue);\n         doValidate(attributeValue);\n \n         return attributeValue;\n     }\n \n-    protected <T extends AbstractAttributeValue> T parseValue(String value,\n+    private <T extends AbstractAttributeValue> T parseValue(String value,\n             T attributeValue) throws ParseException {\n-\n         Exception exception = null;\n \n         switch (schema.getType()) {\n@@ -60,17 +55,19 @@ protected <T extends AbstractAttributeValue> T parseValue(String value,\n \n             case Long:\n                 try {\n-                    attributeValue.setLongValue(Long.valueOf(schema.getFormatter(\n-                            DecimalFormat.class).parse(value).longValue()));\n+                    attributeValue.setLongValue(Long.valueOf(\n+                            schema.getFormatter(DecimalFormat.class).parse(\n+                            value).longValue()));\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n                 }\n                 break;\n \n             case Double:\n                 try {\n-                    attributeValue.setDoubleValue(Double.valueOf(schema.getFormatter(\n-                            DecimalFormat.class).parse(value).doubleValue()));\n+                    attributeValue.setDoubleValue(Double.valueOf(\n+                            schema.getFormatter(DecimalFormat.class).parse(\n+                            value).doubleValue()));\n                 } catch (java.text.ParseException pe) {\n                     exception = pe;\n                 }\n@@ -87,37 +84,8 @@ protected <T extends AbstractAttributeValue> T parseValue(String value,\n         }\n \n         if (exception != null) {\n-            throw new ParseException(\n-                    \"While trying to parse '\" + value + \"'\", exception);\n-        }\n-\n-        return attributeValue;\n-    }\n-\n-    protected <T extends AbstractAttributeValue> T parseValue(Object value,\n-            T attributeValue) throws ParseException {\n-\n-        switch (schema.getType()) {\n-\n-            case String:\n-                attributeValue.setStringValue((String) value);\n-                break;\n-\n-            case Boolean:\n-                attributeValue.setBooleanValue((Boolean) value);\n-                break;\n-\n-            case Long:\n-                attributeValue.setLongValue((Long) value);\n-                break;\n-\n-            case Double:\n-                attributeValue.setDoubleValue((Double) value);\n-                break;\n-\n-            case Date:\n-                attributeValue.setDateValue((Date) value);\n-                break;\n+            throw new ParseException(\"While trying to parse '\" + value + \"'\",\n+                    exception);\n         }\n \n         return attributeValue;"},{"sha":"6c5cc3c5c9d45d93f65be3469b80189fdd5ffa80","filename":"core/src/main/java/org/syncope/core/persistence/validation/EmailAddressValidator.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FEmailAddressValidator.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -25,8 +25,7 @@ public class EmailAddressValidator extends AttributeValidator {\n             \"^[\\\\w\\\\-]([\\\\.\\\\w])+[\\\\w]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,4}$\",\n             Pattern.CASE_INSENSITIVE);\n \n-    public EmailAddressValidator(AbstractSchema schema)\n-            throws ClassNotFoundException {\n+    public EmailAddressValidator(AbstractSchema schema) {\n \n         super(schema);\n     }"},{"sha":"3126a6fafacea818ae556b29b378f43d9b3c0a87","filename":"core/src/main/java/org/syncope/core/persistence/validation/ParseException.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FParseException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FParseException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FParseException.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -16,10 +16,6 @@\n \n public class ParseException extends ValidationException {\n \n-    public ParseException(Throwable cause) {\n-        super(cause);\n-    }\n-\n     public ParseException(String message, Throwable cause) {\n         super(message, cause);\n     }"},{"sha":"7d1ec605e84673e973f9fe93eae9e6b62806cceb","filename":"core/src/main/java/org/syncope/core/persistence/validation/UniqueValueException.java","status":"renamed","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FUniqueValueException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FUniqueValueException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FUniqueValueException.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -14,9 +14,12 @@\n  */\n package org.syncope.core.persistence.validation;\n \n-public class ValidatorInstantiationException extends ValidationException {\n+import org.syncope.core.persistence.beans.AbstractSchema;\n \n-    public ValidatorInstantiationException(String message, Throwable cause) {\n-        super(message, cause);\n+public class UniqueValueException extends ValidationException {\n+\n+    public UniqueValueException(AbstractSchema schema) {\n+        super(\"A schema cannot be multivalue and uniquevalue at the same time\"\n+                + schema);\n     }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/validation/ValidatorInstantiationException.java"},{"sha":"876491dbb55b087aa7d10bca001510c626573053","filename":"core/src/main/java/org/syncope/core/persistence/validation/ValidationException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2FValidationException.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.core.persistence.validation;\n \n-public class ValidationException extends Exception {\n+public abstract class ValidationException extends Exception {\n \n     public ValidationException(String message) {\n         super(message);"},{"sha":"32760cb53e9d2ae1ffbc0c5ab7e2914a2b74d08b","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -23,7 +23,6 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientErrorHandler;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.Attributable;\n import org.syncope.types.SyncopeClientExceptionType;\n \n public abstract class AbstractController {\n@@ -52,7 +51,7 @@ protected <T> T throwCompositeException(\n         for (SyncopeClientException exception :\n                 compositeErrorException.getExceptions()) {\n \n-            response.setHeader(\n+            response.addHeader(\n                     SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                     exception.getType().getHeaderValue());\n "},{"sha":"060dc0cce44be7a0a1aba71ce5380e55f1d729a8","filename":"core/src/main/java/org/syncope/core/rest/controller/Attributable.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -12,14 +12,14 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence;\n+package org.syncope.core.rest.controller;\n \n import org.syncope.core.persistence.beans.role.RoleDerivedSchema;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n \n-public enum Attributable {\n+enum Attributable {\n \n     USER, ROLE;\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/Attributable.java"},{"sha":"2971fc7cb1ba03bf060ae3e5e3401ba7331c5627","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -27,6 +27,7 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.SchemaTOs;\n+import org.syncope.core.persistence.validation.UniqueValueException;\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -44,7 +45,8 @@ public class SchemaController extends AbstractController {\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public SchemaTO create(HttpServletResponse response,\n             @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n-            throws InstantiationException, IllegalAccessException {\n+            throws InstantiationException, IllegalAccessException,\n+            UniqueValueException {\n \n         Class reference = getAttributable(kind).getSchemaClass();\n         AbstractSchema schema = schemaDataBinder.createSchema(schemaTO,\n@@ -109,7 +111,8 @@ public SchemaTO read(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public SchemaTO update(HttpServletResponse response,\n             @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n-            throws InstantiationException, IllegalAccessException {\n+            throws InstantiationException, IllegalAccessException,\n+            UniqueValueException {\n \n         return create(response, schemaTO, kind);\n     }"},{"sha":"9bcd606d0df02e2feb7323e876eea24eaae8d8e5","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -24,6 +24,7 @@\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.validation.UniqueValueException;\n \n @Component\n public class SchemaDataBinder {\n@@ -45,7 +46,8 @@ public SchemaDataBinder(SchemaDAO schemaDAO,\n \n     public <T extends AbstractSchema, K extends AbstractDerivedSchema> T createSchema(\n             SchemaTO schemaTO, Class<T> reference, Class<K> derivedReference)\n-            throws InstantiationException, IllegalAccessException {\n+            throws InstantiationException, IllegalAccessException,\n+            UniqueValueException {\n \n         T schema = reference.newInstance();\n         BeanUtils.copyProperties(schemaTO, schema, ignoreSchemaProperties);"},{"sha":"a0eb4b36ed8490d6497ac77e6bf97bd72b0d2348","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":30,"deletions":6,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -38,6 +38,7 @@\n import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.AttributeValueDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -51,23 +52,27 @@ public class UserDataBinder {\n \n     private static final Logger log = LoggerFactory.getLogger(\n             UserDataBinder.class);\n-    private static final String[] ignoreProperties = {\"attributes\",\n-        \"derivedAttributes\", \"roles\", \"resources\"};\n+    private static final String[] ignoreProperties = {\n+        \"attributes\", \"derivedAttributes\", \"roles\", \"resources\"\n+    };\n     private SyncopeUserDAO syncopeUserDAO;\n     private SchemaDAO schemaDAO;\n+    private AttributeValueDAO attributeValueDAO;\n     private DerivedSchemaDAO derivedSchemaDAO;\n     private SyncopeRoleDAO syncopeRoleDAO;\n     private ResourceDAO resourceDAO;\n \n     @Autowired\n     public UserDataBinder(SyncopeUserDAO syncopeUserDAO,\n             SchemaDAO schemaDAO,\n+            AttributeValueDAO attributeValueDAO,\n             DerivedSchemaDAO derivedSchemaDAO,\n             SyncopeRoleDAO syncopeRoleDAO,\n             ResourceDAO resourceDAO) {\n \n         this.syncopeUserDAO = syncopeUserDAO;\n         this.schemaDAO = schemaDAO;\n+        this.attributeValueDAO = attributeValueDAO;\n         this.derivedSchemaDAO = derivedSchemaDAO;\n         this.syncopeRoleDAO = syncopeRoleDAO;\n         this.resourceDAO = resourceDAO;\n@@ -83,9 +88,11 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n                 SyncopeClientExceptionType.InvalidSchemas);\n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n-                SyncopeClientExceptionType.UserRequiredValuesMissing);\n+                SyncopeClientExceptionType.RequiredValuesMissing);\n         SyncopeClientException invalidValues = new SyncopeClientException(\n-                SyncopeClientExceptionType.UserInvalidValues);\n+                SyncopeClientExceptionType.InvalidValues);\n+        SyncopeClientException invalidUniques = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidUniques);\n         SyncopeClientException invalidDerivedSchemas =\n                 new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidDerivedSchemas);\n@@ -126,13 +133,27 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n                     attributeValue = new UserAttributeValue();\n \n                     try {\n-                        attribute.addValue(value, attributeValue);\n+                        attributeValue = attribute.addValue(value,\n+                                attributeValue);\n                     } catch (ValidationException e) {\n                         log.error(\"Invalid value for attribute \"\n                                 + schema.getName() + \": \" + value, e);\n \n                         invalidValues.addElement(schema.getName());\n                     }\n+\n+                    // if the schema is uniquevalue, check the uniqueness\n+                    if (schema.isUniquevalue()\n+                            && attributeValueDAO.existingAttributeValue(\n+                            attributeValue)) {\n+\n+                        log.error(\"Unique value schema \" + schema.getName()\n+                                + \" with no unique value: \"\n+                                + attributeValue.getValueAsString());\n+\n+                        invalidUniques.addElement(schema.getName());\n+                        attribute.setAttributeValues(Collections.EMPTY_SET);\n+                    }\n                 }\n \n                 if (!attribute.getAttributeValues().isEmpty()) {\n@@ -207,6 +228,9 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n         if (!invalidValues.getElements().isEmpty()) {\n             compositeErrorException.addException(invalidValues);\n         }\n+        if (!invalidUniques.getElements().isEmpty()) {\n+            compositeErrorException.addException(invalidUniques);\n+        }\n         if (!invalidDerivedSchemas.getElements().isEmpty()) {\n             compositeErrorException.addException(invalidDerivedSchemas);\n         }\n@@ -234,7 +258,7 @@ public UserTO getUserTO(SyncopeUser user) {\n         for (AbstractAttribute attribute : user.getAttributes()) {\n             attributeTO = new AttributeTO();\n             attributeTO.setSchema(attribute.getSchema().getName());\n-            attributeTO.setValues(attribute.getStringAttributeValues());\n+            attributeTO.setValues(attribute.getAttributeValuesAsStrings());\n \n             userTO.addAttribute(attributeTO);\n         }"},{"sha":"cf218b6c472b390b6d093042d551ae5a82442267","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -23,6 +23,7 @@\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.validation.UniqueValueException;\n import org.syncope.types.SchemaType;\n \n @Transactional\n@@ -57,8 +58,12 @@ public final void save() {\n                 \"org.syncope.core.validation.EmailAddressValidator\");\n         attributeSchema.setMandatory(false);\n         attributeSchema.setMultivalue(true);\n-\n-        schemaDAO.save(attributeSchema);\n+        \n+        try {\n+            schemaDAO.save(attributeSchema);\n+        } catch (UniqueValueException e) {\n+            log.error(\"Unexpected exception\", e);\n+        }\n \n         UserSchema actual = schemaDAO.find(\"secondaryEmail\", UserSchema.class);\n         assertNotNull(\"expected save to work\", actual);"},{"sha":"6fa2c8a22e725cc235dd6c14fe2dc240286d39db","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":57,"deletions":21,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -26,6 +26,8 @@\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.UserTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.types.SyncopeClientExceptionType;\n \n public class UserTestITCase extends AbstractTestITCase {\n \n@@ -47,32 +49,66 @@ public void createWithException() {\n     public void create() {\n         UserTO userTO = new UserTO();\n \n-        AttributeTO attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"username\");\n-        attributeTO.addValue(\"fchicchiricco\");\n-        userTO.addAttribute(attributeTO);\n-\n-        attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"surname\");\n-        attributeTO.addValue(\"Chicchiriccò\");\n-        userTO.addAttribute(attributeTO);\n-\n-        attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"email\");\n-        attributeTO.addValue(\"chicchiricco@gmail.com\");\n-        attributeTO.addValue(\"syncope@googlecode.com\");\n-        userTO.addAttribute(attributeTO);\n-\n-        attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"loginDate\");\n-        attributeTO.addValue(\"2010-06-30\");\n-        attributeTO.addValue(\"2010-07-01\");\n-        userTO.addAttribute(attributeTO);\n+        AttributeTO usernameTO = new AttributeTO();\n+        usernameTO.setSchema(\"username\");\n+        usernameTO.addValue(\"fchicchiricco\");\n+        userTO.addAttribute(usernameTO);\n+\n+        AttributeTO surnameTO = new AttributeTO();\n+        surnameTO.setSchema(\"surname\");\n+        surnameTO.addValue(\"Chicchiriccò\");\n+        userTO.addAttribute(surnameTO);\n+\n+        AttributeTO emailTO = new AttributeTO();\n+        emailTO.setSchema(\"email\");\n+        emailTO.addValue(\"chicchiricco@gmail.com\");\n+        emailTO.addValue(\"syncope@googlecode.com\");\n+        userTO.addAttribute(emailTO);\n+\n+        AttributeTO loginDateTO = new AttributeTO();\n+        loginDateTO.setSchema(\"loginDate\");\n+        loginDateTO.addValue(\"2010-06-30\");\n+        loginDateTO.addValue(\"2010-07-01\");\n+        userTO.addAttribute(loginDateTO);\n \n         UserTO newUserTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n         userTO.setId(newUserTO.getId());\n         assertEquals(userTO, userTO);\n+\n+        userTO = new UserTO();\n+\n+        usernameTO = new AttributeTO();\n+        usernameTO.setSchema(\"username\");\n+        usernameTO.addValue(\"fchicchiricco\");\n+        userTO.addAttribute(usernameTO);\n+\n+        surnameTO = new AttributeTO();\n+        surnameTO.setSchema(\"surname\");\n+        surnameTO.addValue(\"Martelli\");\n+        userTO.addAttribute(surnameTO);\n+\n+        emailTO = new AttributeTO();\n+        emailTO.setSchema(\"email\");\n+        emailTO.addValue(\"syncope@googlecode.com\");\n+        userTO.addAttribute(emailTO);\n+\n+        loginDateTO = new AttributeTO();\n+        loginDateTO.setSchema(\"loginDate\");\n+        loginDateTO.addValue(\"2010-07-01\");\n+        userTO.addAttribute(loginDateTO);\n+\n+        SyncopeClientException syncopeClientException = null;\n+        try {\n+            restTemplate.postForObject(BASE_URL + \"user/create\",\n+                    userTO, UserTO.class);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            syncopeClientException =\n+                    e.getException(SyncopeClientExceptionType.InvalidUniques);\n+        }\n+        assertNotNull(syncopeClientException);\n+        assertTrue(syncopeClientException.getElements().contains(\"username\"));\n+        assertTrue(syncopeClientException.getElements().contains(\"email\"));\n     }\n \n     @Test"},{"sha":"30434701b20b52bb3b5f034e72727d8c79010b70","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/889e51d2481261a420d52259b89d6cb56a490aff/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=889e51d2481261a420d52259b89d6cb56a490aff","patch":"@@ -35,22 +35,22 @@\n     <SyncopeUser_SyncopeRole users_id=\"4\" roles_id=\"7\"/>\n \n     <UserSchema name=\"username\" type=\"String\" virtual=\"false\"\n-                mandatory=\"true\" multivalue=\"false\"/>\n+                mandatory=\"true\" multivalue=\"false\" uniquevalue=\"true\"/>\n     <UserSchema name=\"loginDate\" type=\"Date\" virtual=\"false\"\n-                mandatory=\"false\" multivalue=\"true\"\n+                mandatory=\"false\" multivalue=\"true\" uniquevalue=\"false\"\n                 conversionPattern=\"yyyy-MM-dd\"/>\n     <UserSchema name=\"firstname\" type=\"String\" virtual=\"false\"\n-                mandatory=\"false\" multivalue=\"false\"/>\n+                mandatory=\"false\" multivalue=\"false\" uniquevalue=\"false\"/>\n     <UserSchema name=\"surname\" type=\"String\" virtual=\"false\"\n-                mandatory=\"true\" multivalue=\"false\"/>\n+                mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n     <UserSchema name=\"email\" type=\"String\" virtual=\"false\"\n-                mandatory=\"false\" multivalue=\"true\"\n+                mandatory=\"false\" multivalue=\"true\" uniquevalue=\"true\"\n                 validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n \n     <RoleSchema name=\"icon\" type=\"String\" virtual=\"false\"\n-                mandatory=\"false\" multivalue=\"false\"/>\n+                mandatory=\"false\" multivalue=\"false\" uniquevalue=\"false\"/>\n     <RoleSchema name=\"show\" type=\"Boolean\" virtual=\"false\"\n-                mandatory=\"false\" multivalue=\"false\"/>\n+                mandatory=\"false\" multivalue=\"false\" uniquevalue=\"false\"/>\n \n     <UserAttribute id=\"100\" owner_id=\"1\" schema_name=\"username\"/>\n     <UserAttribute id=\"200\" owner_id=\"1\" schema_name=\"loginDate\"/>"}]}