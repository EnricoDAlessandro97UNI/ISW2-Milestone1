{"sha":"db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRiNjg0YmM0ZWU3YTZkYzhkZWRmZTAyMDJmZjIwYWIxZTkxNTk1ZTE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-13T14:27:30Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-01-13T14:27:30Z"},"message":"Improving, improving, improving performance\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246729 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f90ac806ccb4094421116737cc59a2625ae31553","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f90ac806ccb4094421116737cc59a2625ae31553"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/comments","author":null,"committer":null,"parents":[{"sha":"1867c69f6f0d7ba73c1e101fc24d2fde76a3736c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1867c69f6f0d7ba73c1e101fc24d2fde76a3736c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1867c69f6f0d7ba73c1e101fc24d2fde76a3736c"}],"stats":{"total":174,"additions":60,"deletions":114},"files":[{"sha":"32505a9b441c6601f99a15195e7279b67bf22420","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -245,17 +245,6 @@ public <T extends Format> T getFormatter() {\n         return result;\n     }\n \n-    public abstract <T extends AbstractAttr> boolean addAttribute(\n-            T attribute);\n-\n-    public abstract <T extends AbstractAttr> boolean removeAttribute(\n-            T attribute);\n-\n-    public abstract List<? extends AbstractAttr> getAttributes();\n-\n-    public abstract void setAttributes(\n-            List<? extends AbstractAttr> attributes);\n-\n     public abstract <T extends AbstractDerSchema> boolean addDerivedSchema(\n             T derivedSchema);\n "},{"sha":"375e448e6e8861a86d2fc91ea3377a4ae6758902","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MSchema.java","status":"modified","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMSchema.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -18,48 +18,22 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n-import javax.persistence.OneToMany;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class MSchema extends AbstractSchema {\n \n-    @OneToMany(mappedBy = \"schema\")\n-    private List<MAttr> attributes;\n-\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<MDerSchema> derivedSchemas;\n \n     public MSchema() {\n-        attributes = new ArrayList<MAttr>();\n         derivedSchemas = new ArrayList<MDerSchema>();\n     }\n \n-    @Override\n-    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n-        return attributes.add((MAttr) attribute);\n-    }\n-\n-    @Override\n-    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n-        return attributes.remove((MAttr) attribute);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractAttr> getAttributes() {\n-        return attributes;\n-    }\n-\n-    @Override\n-    public void setAttributes(List<? extends AbstractAttr> attributes) {\n-        this.attributes = (List<MAttr>) attributes;\n-    }\n-\n     @Override\n     public <T extends AbstractDerSchema> boolean addDerivedSchema(\n             final T derivedSchema) {"},{"sha":"ac6fb7cd1321ad1509d178c4a3c80d249068e9db","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RSchema.java","status":"modified","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRSchema.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -18,48 +18,22 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n-import javax.persistence.OneToMany;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class RSchema extends AbstractSchema {\n \n-    @OneToMany(mappedBy = \"schema\")\n-    private List<RAttr> attributes;\n-\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<RDerSchema> derivedSchemas;\n \n     public RSchema() {\n-        attributes = new ArrayList<RAttr>();\n         derivedSchemas = new ArrayList<RDerSchema>();\n     }\n \n-    @Override\n-    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n-        return attributes.add((RAttr) attribute);\n-    }\n-\n-    @Override\n-    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n-        return attributes.remove((RAttr) attribute);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractAttr> getAttributes() {\n-        return attributes;\n-    }\n-\n-    @Override\n-    public void setAttributes(List<? extends AbstractAttr> attributes) {\n-        this.attributes = (List<RAttr>) attributes;\n-    }\n-\n     @Override\n     public <T extends AbstractDerSchema> boolean addDerivedSchema(\n             T derivedSchema) {"},{"sha":"c8b8e219d8cc91cea37aa4ed5a10a35377bebe6b","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/USchema.java","status":"modified","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUSchema.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -18,48 +18,22 @@\n import java.util.List;\n import javax.persistence.Entity;\n import javax.persistence.ManyToMany;\n-import javax.persistence.OneToMany;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n-import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class USchema extends AbstractSchema {\n \n-    @OneToMany(mappedBy = \"schema\")\n-    private List<UAttr> attributes;\n-\n     @ManyToMany(mappedBy = \"schemas\")\n     private List<UDerSchema> derivedSchemas;\n \n     public USchema() {\n-        attributes = new ArrayList<UAttr>();\n         derivedSchemas = new ArrayList<UDerSchema>();\n     }\n \n-    @Override\n-    public <T extends AbstractAttr> boolean addAttribute(T attribute) {\n-        return attributes.add((UAttr) attribute);\n-    }\n-\n-    @Override\n-    public <T extends AbstractAttr> boolean removeAttribute(T attribute) {\n-        return attributes.remove((UAttr) attribute);\n-    }\n-\n-    @Override\n-    public List<? extends AbstractAttr> getAttributes() {\n-        return attributes;\n-    }\n-\n-    @Override\n-    public void setAttributes(List<? extends AbstractAttr> attributes) {\n-        this.attributes = (List<UAttr>) attributes;\n-    }\n-\n     @Override\n     public <T extends AbstractDerSchema> boolean addDerivedSchema(\n             T derivedSchema) {"},{"sha":"fc8bd6866b33eaeb8a250f2011d6188e94ee60ee","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.core.persistence.util.AttributableUtil;\n@@ -25,6 +26,9 @@ public interface SchemaDAO extends DAO {\n \n     <T extends AbstractSchema> List<T> findAll(Class<T> reference);\n \n+    <T extends AbstractAttr> List<T> getAttributes(\n+            AbstractSchema schema, Class<T> reference);\n+\n     <T extends AbstractSchema> T save(T schema)\n             throws InvalidEntityException;\n "},{"sha":"a229daf5e800cdf82d48e1dd115cec8dee6793d1","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -47,4 +47,6 @@ SyncopeUser save(SyncopeUser syncopeUser)\n             throws InvalidEntityException;\n \n     void delete(Long id);\n+\n+    void delete(SyncopeUser user);\n }"},{"sha":"bcf1ad676beb7d135dec09a6fad5803d8046c1d1","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeDAOImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -61,7 +61,6 @@ public <T extends AbstractAttr> void delete(final T attribute) {\n         if (attribute.getOwner() != null) {\n             attribute.getOwner().removeAttribute(attribute);\n         }\n-        attribute.getSchema().removeAttribute(attribute);\n \n         entityManager.remove(attribute);\n     }"},{"sha":"90ecbf486bc00920b3815e7cfbb0aea1af4f7f15","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -56,6 +56,18 @@ public <T extends AbstractSchema> List<T> findAll(\n         return query.getResultList();\n     }\n \n+    @Override\n+    public <T extends AbstractAttr> List<T> getAttributes(\n+            AbstractSchema schema, Class<T> reference) {\n+\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n+                + \" WHERE e.schema=:schema\");\n+        query.setParameter(\"schema\", schema);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public <T extends AbstractSchema> T save(final T schema) {\n         return entityManager.merge(schema);\n@@ -75,15 +87,15 @@ public void delete(final String name,\n         }\n         schema.getDerivedSchemas().clear();\n \n-        Set<Long> attributeIds =\n-                new HashSet<Long>(schema.getAttributes().size());\n-        Class attributeClass = null;\n-        for (AbstractAttr attribute : schema.getAttributes()) {\n+        List<? extends AbstractAttr> attributes = getAttributes(schema,\n+                attributableUtil.attributeClass());\n+\n+        Set<Long> attributeIds = new HashSet<Long>(attributes.size());\n+        for (AbstractAttr attribute : attributes) {\n             attributeIds.add(attribute.getId());\n-            attributeClass = attribute.getClass();\n         }\n         for (Long attributeId : attributeIds) {\n-            attributeDAO.delete(attributeId, attributeClass);\n+            attributeDAO.delete(attributeId, attributableUtil.attributeClass());\n         }\n \n         resourceDAO.deleteMappings(name, attributableUtil.sourceMappingType());"},{"sha":"e09a810f7b8da6639e6b531f28d4e5ef0171bd46","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -221,6 +221,11 @@ public void delete(final Long id) {\n             return;\n         }\n \n+        delete(user);\n+    }\n+\n+    @Override\n+    public void delete(final SyncopeUser user) {\n         // Not calling membershipDAO.delete() here because it would try\n         // to save this user as well, thus going into\n         // ConcurrentModificationException"},{"sha":"8f5cdfc8fb230dbcc7af9171ecfbff4f9a9b4d9c","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -30,6 +30,7 @@\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.util.AttributableUtil;\n \n @Controller\n @RequestMapping(\"/schema\")\n@@ -56,7 +57,7 @@ public SchemaTO create(final HttpServletResponse response,\n         schema = schemaDAO.save(schema);\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return schemaDataBinder.getSchemaTO(schema);\n+        return schemaDataBinder.getSchemaTO(schema, getAttributableUtil(kind));\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n@@ -81,12 +82,14 @@ public void delete(@PathVariable(\"kind\") final String kind,\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{kind}/list\")\n     public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n-        Class reference = getAttributableUtil(kind).schemaClass();\n-        List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n+        AttributableUtil attributableUtil = getAttributableUtil(kind);\n+        List<AbstractSchema> schemas = schemaDAO.findAll(\n+                attributableUtil.schemaClass());\n \n         List<SchemaTO> schemaTOs = new ArrayList<SchemaTO>(schemas.size());\n         for (AbstractSchema schema : schemas) {\n-            schemaTOs.add(schemaDataBinder.getSchemaTO(schema));\n+            schemaTOs.add(schemaDataBinder.getSchemaTO(\n+                    schema, attributableUtil));\n         }\n \n         return schemaTOs;\n@@ -99,14 +102,15 @@ public SchemaTO read(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String schemaName)\n             throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).schemaClass();\n-        AbstractSchema schema = schemaDAO.find(schemaName, reference);\n+        AttributableUtil attributableUtil = getAttributableUtil(kind);\n+        AbstractSchema schema = schemaDAO.find(schemaName,\n+                attributableUtil.schemaClass());\n         if (schema == null) {\n             LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n             throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n \n-        return schemaDataBinder.getSchemaTO(schema);\n+        return schemaDataBinder.getSchemaTO(schema, attributableUtil);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n@@ -116,17 +120,17 @@ public SchemaTO update(@RequestBody final SchemaTO schemaTO,\n             @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).schemaClass();\n-        AbstractSchema schema = schemaDAO.find(schemaTO.getName(), reference);\n+        AttributableUtil attributableUtil = getAttributableUtil(kind);\n+        AbstractSchema schema = schemaDAO.find(schemaTO.getName(),\n+                attributableUtil.schemaClass());\n         if (schema == null) {\n             LOG.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n             throw new NotFoundException(\"Schema '\" + schemaTO.getName() + \"'\");\n         }\n \n-        schema = schemaDataBinder.update(schemaTO,\n-                schema, getAttributableUtil(kind).derivedSchemaClass());\n+        schema = schemaDataBinder.update(schemaTO, schema, attributableUtil);\n         schema = schemaDAO.save(schema);\n \n-        return schemaDataBinder.getSchemaTO(schema);\n+        return schemaDataBinder.getSchemaTO(schema, attributableUtil);\n     }\n }"},{"sha":"491daab0119bcd02fcec3fc257f2353d3d39aec9","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=db684bc4ee7a6dc8dedfe0202ff20ab1e91595e1","patch":"@@ -31,6 +31,8 @@\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.util.AttributableUtil;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n@@ -45,6 +47,9 @@ public class SchemaDataBinder {\n     private static final String[] ignoreSchemaProperties = {\n         \"derivedSchemas\", \"attributes\"};\n \n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n \n@@ -116,20 +121,21 @@ public <T extends AbstractDerSchema> AbstractSchema create(\n     public <T extends AbstractDerSchema> AbstractSchema update(\n             final SchemaTO schemaTO,\n             AbstractSchema schema,\n-            final Class<T> derivedReference)\n+            final AttributableUtil attributableUtil)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n-        schema = populate(schema, schemaTO, derivedReference, scce);\n+        schema = populate(schema, schemaTO,\n+                attributableUtil.derivedSchemaClass(), scce);\n \n         boolean validationExceptionFound = false;\n         AbstractAttr attribute;\n         AbstractAttrValue attributeValue;\n-        for (Iterator<? extends AbstractAttr> aItor =\n-                schema.getAttributes().iterator();\n+        for (Iterator<? extends AbstractAttr> aItor = schemaDAO.getAttributes(\n+                schema, attributableUtil.attributeClass()).iterator();\n                 aItor.hasNext() && !validationExceptionFound;) {\n \n             attribute = aItor.next();\n@@ -160,14 +166,17 @@ public <T extends AbstractDerSchema> AbstractSchema update(\n         return schema;\n     }\n \n-    public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema) {\n+    public <T extends AbstractSchema> SchemaTO getSchemaTO(T schema,\n+            final AttributableUtil attributableUtil) {\n+\n         SchemaTO schemaTO = new SchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO, ignoreSchemaProperties);\n \n         for (AbstractDerSchema derivedSchema : schema.getDerivedSchemas()) {\n             schemaTO.addDerivedSchema(derivedSchema.getName());\n         }\n-        schemaTO.setAttributes(schema.getAttributes().size());\n+        schemaTO.setAttributes(schemaDAO.getAttributes(\n+                schema, attributableUtil.attributeClass()).size());\n \n         return schemaTO;\n     }"}]}