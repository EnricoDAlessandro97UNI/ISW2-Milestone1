{"sha":"58cb9ced9e5ea6d4249e657cd39bf2317422b59e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU4Y2I5Y2VkOWU1ZWE2ZDQyNDllNjU3Y2QzOWJmMjMxNzQyMmI1OWU=","commit":{"author":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-22T10:59:18Z"},"committer":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-22T10:59:18Z"},"message":"[SYNCOPE-256]: Added client exception mapper\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1436834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e89538dcb4dc43e3ff4b9ef692b029efbdb28417","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e89538dcb4dc43e3ff4b9ef692b029efbdb28417"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/58cb9ced9e5ea6d4249e657cd39bf2317422b59e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/58cb9ced9e5ea6d4249e657cd39bf2317422b59e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/58cb9ced9e5ea6d4249e657cd39bf2317422b59e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/comments","author":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"committer":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"parents":[{"sha":"4524afe878d9df9353ee2e3a2f2dd3a60093b5af","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4524afe878d9df9353ee2e3a2f2dd3a60093b5af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4524afe878d9df9353ee2e3a2f2dd3a60093b5af"}],"stats":{"total":161,"additions":148,"deletions":13},"files":[{"sha":"fac3fa8f40f94d8664b2192a53c62e0b8d6af87e","filename":"client/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=58cb9ced9e5ea6d4249e657cd39bf2317422b59e","patch":"@@ -53,6 +53,11 @@ under the License.\n       <artifactId>javax.ws.rs-api</artifactId>\n     </dependency>\n \n+\t<dependency>\n+\t  <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-web</artifactId>"},{"sha":"d49c7ab9e4ba94151643500cfabcf67f002f346b","filename":"client/src/main/java/org/apache/syncope/client/rest/utils/RestClientExceptionMapper.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java?ref=58cb9ced9e5ea6d4249e657cd39bf2317422b59e","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.rest.utils;\r\n+\r\n+import java.security.AccessControlException;\r\n+import java.util.ArrayList;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.ext.ExceptionMapper;\r\n+import javax.ws.rs.ext.Provider;\r\n+\r\n+import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n+import org.apache.http.HttpStatus;\r\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n+import org.apache.syncope.common.validation.SyncopeClientErrorHandler;\r\n+import org.apache.syncope.common.validation.SyncopeClientException;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+@Provider\r\n+public class RestClientExceptionMapper implements ExceptionMapper<Exception>,\r\n+\t\tResponseExceptionMapper<Exception> {\r\n+\r\n+    private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\r\n+\r\n+    @Override\r\n+\tpublic Response toResponse(Exception e) {\r\n+\t\tthrow new UnsupportedOperationException(\"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic Exception fromResponse(Response response) {\r\n+\t\tException ex = null;\r\n+\t\tint statusCode = response.getStatus();\r\n+\t\t\r\n+\t\t// 1. Check for composite exception in HTTP header \r\n+\t\tSyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n+\t\tif (scce != null) {\r\n+\t\t\tex = scce;\r\n+\t\t\t\r\n+\t\t\t// 2. TODO Map  SC_FORBIDDEN\r\n+//\t\t} else if (statusCode == HttpStatus.SC_FORBIDDEN) {\r\n+//\t\t\tex = new UnauthorizedRoleException(-1L);\r\n+\t\t\t\r\n+\t\t\t// 3. Map  SC_UNAUTHORIZED\r\n+\t\t} else if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n+\t\t\tex = new AccessControlException(\"Remote unauthorized exception\");\r\n+\t\t\t\r\n+\t\t} else {\r\n+\t\t\t// 3. All other codes are mapped to runtime exception with HTTP code information \r\n+\t\t\tex = new RuntimeException(String.format(\r\n+\t\t\t\t\t\"Remote exception with status code: %s\",\r\n+\t\t\t\t\tResponse.Status.fromStatusCode(statusCode).name()));\r\n+\t\t}\r\n+        LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n+\t\treturn ex;\r\n+\t}\r\n+\t\r\n+\tprivate SyncopeClientCompositeErrorException checkCompositeException(Response response) {\r\n+\t\tint statusCode = response.getStatus();\r\n+        List<Object> exceptionTypesInHeaders = response.getHeaders().get(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n+        if (exceptionTypesInHeaders == null) {\r\n+            LOG.debug(\"No \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \" provided\");\r\n+            return null;\r\n+        }\r\n+\r\n+\t\tSyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(\r\n+\t\t\t\torg.springframework.http.HttpStatus.valueOf(statusCode));\r\n+\r\n+        Set<String> handledExceptions = new HashSet<String>();\r\n+        for (Object exceptionTypeValue : exceptionTypesInHeaders) {\r\n+        \tString exceptionTypeAsString = (String) exceptionTypeValue; \r\n+            SyncopeClientExceptionType exceptionType = null;\r\n+            try {\r\n+                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\r\n+            } catch (IllegalArgumentException e) {\r\n+                LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString, e);\r\n+            }\r\n+            if (exceptionType != null) {\r\n+                handledExceptions.add(exceptionTypeAsString);\r\n+\r\n+                SyncopeClientException clientException = new SyncopeClientException();\r\n+                clientException.setType(exceptionType);\r\n+                if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n+                        && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n+                \t// TODO: update clientException to support list of objects\r\n+                \tList<Object> elementsObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n+                \tList<String> elementsStringList = new ArrayList<String>();\r\n+                \tfor (Object elementObject : elementsObjectList) {\r\n+                \t\tif (elementObject instanceof String) {\r\n+                \t\t\telementsStringList.add((String) elementObject);\r\n+                \t\t}\r\n+                \t}\r\n+                    clientException.setElements(elementsStringList);\r\n+                }\r\n+                compositeException.addException(clientException);\r\n+            }\r\n+        }\r\n+\r\n+        exceptionTypesInHeaders.removeAll(handledExceptions);\r\n+        if (!exceptionTypesInHeaders.isEmpty()) {\r\n+            LOG.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\r\n+        }\r\n+\r\n+        if (compositeException.hasExceptions()) {\r\n+            return compositeException;\r\n+        }\r\n+        \r\n+        return null;\r\n+\t}\r\n+}\r"},{"sha":"20237b4a5e70ca29b46447a1ca8c6e8258c27c91","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/QueryResourceInfoComperator.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComperator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComperator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FQueryResourceInfoComperator.java?ref=58cb9ced9e5ea6d4249e657cd39bf2317422b59e","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.core.rest;\r\n+package org.apache.syncope.core.rest.utils;\r\n \r\n import java.util.List;\r\n import java.util.Map;\r","previous_filename":"core/src/main/java/org/apache/syncope/core/rest/QueryResourceInfoComperator.java"},{"sha":"ef3d0b63fb4dcc4c962c21bf2d6b5fcc1f3a9202","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"renamed","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=58cb9ced9e5ea6d4249e657cd39bf2317422b59e","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.core.rest;\r\n+package org.apache.syncope.core.rest.utils;\r\n \r\n import java.util.Map.Entry;\r\n import java.util.Set;\r\n@@ -193,15 +193,6 @@ private Response processServerErrorExceptions(Exception ex) {\n                             : ex.getCause().getMessage());\r\n             response = responseBuilder.build();\r\n \r\n-        } else if (ex instanceof PersistenceException) {\r\n-            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n-                    SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\r\n-            responseBuilder.header(SyncopeClientExceptionType.GenericPersistence.getElementHeaderName(),\r\n-                    ex.getCause() == null\r\n-                            ? ex.getMessage()\r\n-                            : ex.getCause().getMessage());\r\n-            response = responseBuilder.build();\r\n-\r\n         } else if (ex instanceof ConfigurationException) {\r\n             responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n                     SyncopeClientExceptionType.InvalidExternalResource.getHeaderValue());\r\n@@ -274,6 +265,14 @@ private Response processBadRequestExceptions(Exception ex) {\n             responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n                     SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\r\n             response = responseBuilder.build();\r\n+        } else if (ex instanceof PersistenceException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.GenericPersistence.getElementHeaderName(),\r\n+                    ex.getCause() == null\r\n+                            ? ex.getMessage()\r\n+                            : ex.getCause().getMessage());\r\n+            response = responseBuilder.build();\r\n         }\r\n \r\n         return response;\r","previous_filename":"core/src/main/java/org/apache/syncope/core/rest/RestServiceExceptionMapper.java"},{"sha":"5b5de71a6f767315a86c3b70507e2afca92c22db","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/58cb9ced9e5ea6d4249e657cd39bf2317422b59e/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=58cb9ced9e5ea6d4249e657cd39bf2317422b59e","patch":"@@ -62,7 +62,7 @@ under the License.\n     <property name=\"mapper\" ref=\"jacksonObjectMapper\"/>\n   </bean>\n \n-  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.core.rest.RestServiceExceptionMapper\"/>\n+  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.core.rest.utils.RestServiceExceptionMapper\"/>\n \n   <jaxrs:server id=\"restContainer\" address=\"/\">\n     <jaxrs:serviceBeans>\n@@ -71,7 +71,7 @@ under the License.\n       <ref bean=\"entitlementServiceImpl\"/>\n     </jaxrs:serviceBeans>\n     <jaxrs:resourceComparator>\n-      <bean id=\"myServiceComparator\" class=\"org.apache.syncope.core.rest.QueryResourceInfoComperator\"/>\n+      <bean id=\"myServiceComparator\" class=\"org.apache.syncope.core.rest.utils.QueryResourceInfoComperator\"/>\n     </jaxrs:resourceComparator>\n     <jaxrs:providers>\n       <ref bean=\"jaxbProvider\"/>"}]}