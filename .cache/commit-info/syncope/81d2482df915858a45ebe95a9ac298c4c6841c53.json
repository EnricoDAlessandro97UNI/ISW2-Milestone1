{"sha":"81d2482df915858a45ebe95a9ac298c4c6841c53","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgxZDI0ODJkZjkxNTg1OGE0NWViZTk1YTlhYzI5OGM0YzY4NDFjNTM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-17T14:34:03Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-17T14:34:03Z"},"message":"Fixes issue 138\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a97393e5557be65841a85bed9d9ed5db09d1e339","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a97393e5557be65841a85bed9d9ed5db09d1e339"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/81d2482df915858a45ebe95a9ac298c4c6841c53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/81d2482df915858a45ebe95a9ac298c4c6841c53","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/81d2482df915858a45ebe95a9ac298c4c6841c53","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/81d2482df915858a45ebe95a9ac298c4c6841c53/comments","author":null,"committer":null,"parents":[{"sha":"aabce0854d82827ec255d293e30c6ef163566579","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aabce0854d82827ec255d293e30c6ef163566579","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aabce0854d82827ec255d293e30c6ef163566579"}],"stats":{"total":183,"additions":157,"deletions":26},"files":[{"sha":"05eb8362b26525024131b0ea77e8285da10fe8ec","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81d2482df915858a45ebe95a9ac298c4c6841c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81d2482df915858a45ebe95a9ac298c4c6841c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=81d2482df915858a45ebe95a9ac298c4c6841c53","patch":"@@ -15,9 +15,11 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n@@ -119,6 +121,39 @@ public void setResources(Set<TargetResource> resources) {\n         this.targetResources = resources;\n     }\n \n+    protected Map<AbstractSchema, AbstractAttr> getAttributesMap() {\n+        final Map<AbstractSchema, AbstractAttr> map =\n+                new HashMap<AbstractSchema, AbstractAttr>();\n+\n+        for (AbstractAttr attr : getAttributes()) {\n+            map.put((AbstractSchema) attr.getSchema(), attr);\n+        }\n+\n+        return map;\n+    }\n+\n+    protected Map<AbstractDerSchema, AbstractDerAttr> getDerivedAttributesMap() {\n+        final Map<AbstractDerSchema, AbstractDerAttr> map =\n+                new HashMap<AbstractDerSchema, AbstractDerAttr>();\n+\n+        for (AbstractDerAttr attr : getDerivedAttributes()) {\n+            map.put((AbstractDerSchema) attr.getDerivedSchema(), attr);\n+        }\n+\n+        return map;\n+    }\n+\n+    protected Map<AbstractVirSchema, AbstractVirAttr> getVirtualAttributesMap() {\n+        final Map<AbstractVirSchema, AbstractVirAttr> map =\n+                new HashMap<AbstractVirSchema, AbstractVirAttr>();\n+\n+        for (AbstractVirAttr attr : getVirtualAttributes()) {\n+            map.put((AbstractVirSchema) attr.getVirtualSchema(), attr);\n+        }\n+\n+        return map;\n+    }\n+\n     public abstract Long getId();\n \n     public abstract <T extends AbstractAttr> boolean addAttribute("},{"sha":"ade06e65f7026be074cf5c4776980e23e8e9d962","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":93,"deletions":19,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81d2482df915858a45ebe95a9ac298c4c6841c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81d2482df915858a45ebe95a9ac298c4c6841c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=81d2482df915858a45ebe95a9ac298c4c6841c53","patch":"@@ -15,8 +15,11 @@\n package org.syncope.core.persistence.beans.role;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n@@ -36,7 +39,10 @@\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n+import org.syncope.core.persistence.beans.AbstractDerSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.AbstractVirSchema;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.Policy;\n \n@@ -223,51 +229,119 @@ public void setInheritAttributes(boolean inheritAttributes) {\n         this.inheritAttributes = getBooleanAsInteger(inheritAttributes);\n     }\n \n+    /**\n+     * Get all inherited attributes from the ancestors.\n+     * @return a list of inherited and only inherited attributes.\n+     */\n     public List<RAttr> findInheritedAttributes() {\n-        List<RAttr> result = new ArrayList<RAttr>(attributes);\n+        final Map<RSchema, RAttr> result = new HashMap<RSchema, RAttr>();\n+\n         if (isInheritAttributes() && getParent() != null) {\n-            result.addAll(getParent().findInheritedAttributes());\n+            final Map<AbstractSchema, AbstractAttr> attrMap = getAttributesMap();\n+\n+            // Add attributes not specialized\n+            for (RAttr attr : (Collection<RAttr>) getParent().getAttributes()) {\n+                if (!attrMap.containsKey(attr.getSchema())) {\n+                    result.put((RSchema) attr.getSchema(), attr);\n+                }\n+            }\n+\n+            // Add attributes not specialized and not already added\n+            for (RAttr attr : getParent().findInheritedAttributes()) {\n+                if (!attrMap.containsKey(attr.getSchema())\n+                        && !result.containsKey((RSchema) attr.getSchema())) {\n+                    result.put((RSchema) attr.getSchema(), attr);\n+                }\n+            }\n         }\n \n-        return result;\n+        return new ArrayList<RAttr>(result.values());\n     }\n \n     public boolean isInheritDerivedAttributes() {\n         return isBooleanAsInteger(inheritDerivedAttributes);\n     }\n \n-    public boolean isInheritVirtualAttributes() {\n-        return isBooleanAsInteger(inheritVirtualAttributes);\n-    }\n-\n     public void setInheritDerivedAttributes(boolean inheritDerivedAttributes) {\n         this.inheritDerivedAttributes =\n                 getBooleanAsInteger(inheritDerivedAttributes);\n \n     }\n \n-    public void setInheritVirtualAttributes(boolean inheritVirtualAttributes) {\n-        this.inheritVirtualAttributes =\n-                getBooleanAsInteger(inheritVirtualAttributes);\n-\n-    }\n-\n+    /**\n+     * Get all inherited derived attributes from the ancestors.\n+     * @return a list of inherited and only inherited attributes.\n+     */\n     public List<RDerAttr> findInheritedDerivedAttributes() {\n-        List<RDerAttr> result = new ArrayList<RDerAttr>(derivedAttributes);\n+        final Map<RDerSchema, RDerAttr> result =\n+                new HashMap<RDerSchema, RDerAttr>();\n+\n         if (isInheritDerivedAttributes() && getParent() != null) {\n-            result.addAll(getParent().findInheritedDerivedAttributes());\n+            final Map<AbstractDerSchema, AbstractDerAttr> attrMap =\n+                    getDerivedAttributesMap();\n+\n+            // Add attributes not specialized\n+            for (RDerAttr attr :\n+                    (Collection<RDerAttr>) getParent().getDerivedAttributes()) {\n+                if (!attrMap.containsKey(attr.getDerivedSchema())) {\n+                    result.put((RDerSchema) attr.getDerivedSchema(), attr);\n+                }\n+            }\n+\n+            // Add attributes not specialized and not already added\n+            for (RDerAttr attr : getParent().findInheritedDerivedAttributes()) {\n+                if (!attrMap.containsKey(attr.getDerivedSchema())\n+                        && !result.containsKey(\n+                        (RDerSchema) attr.getDerivedSchema())) {\n+                    result.put((RDerSchema) attr.getDerivedSchema(), attr);\n+                }\n+            }\n         }\n \n-        return result;\n+        return new ArrayList<RDerAttr>(result.values());\n     }\n \n+    public boolean isInheritVirtualAttributes() {\n+        return isBooleanAsInteger(inheritVirtualAttributes);\n+    }\n+\n+    public void setInheritVirtualAttributes(boolean inheritVirtualAttributes) {\n+        this.inheritVirtualAttributes =\n+                getBooleanAsInteger(inheritVirtualAttributes);\n+\n+    }\n+\n+    /**\n+     * Get all inherited virtual attributes from the ancestors.\n+     * @return a list of inherited and only inherited attributes.\n+     */\n     public List<RVirAttr> findInheritedVirtualAttributes() {\n-        List<RVirAttr> result = new ArrayList<RVirAttr>(virtualAttributes);\n+        final Map<RVirSchema, RVirAttr> result =\n+                new HashMap<RVirSchema, RVirAttr>();\n+\n         if (isInheritVirtualAttributes() && getParent() != null) {\n-            result.addAll(getParent().findInheritedVirtualAttributes());\n+            final Map<AbstractVirSchema, AbstractVirAttr> attrMap =\n+                    getVirtualAttributesMap();\n+\n+            // Add attributes not specialized\n+            for (RVirAttr attr :\n+                    (Collection<RVirAttr>) getParent().getVirtualAttributes()) {\n+                if (!attrMap.containsKey(attr.getVirtualSchema())) {\n+                    result.put((RVirSchema) attr.getVirtualSchema(), attr);\n+                }\n+            }\n+\n+            // Add attributes not specialized and not already added\n+            for (RVirAttr attr : getParent().findInheritedVirtualAttributes()) {\n+                if (!attrMap.containsKey(attr.getVirtualSchema())\n+                        && !result.containsKey(\n+                        (RVirSchema) attr.getVirtualSchema())) {\n+                    result.put((RVirSchema) attr.getVirtualSchema(), attr);\n+                }\n+            }\n         }\n \n-        return result;\n+        return new ArrayList<RVirAttr>(result.values());\n     }\n \n     public Policy getPasswordPolicy() {"},{"sha":"07b943c35d50c6721e09dd4a1cc93e95f9ceef8a","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":28,"deletions":6,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81d2482df915858a45ebe95a9ac298c4c6841c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81d2482df915858a45ebe95a9ac298c4c6841c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=81d2482df915858a45ebe95a9ac298c4c6841c53","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.rest.data;\n \n+import java.util.List;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.syncope.core.util.AttributableUtil;\n import org.springframework.http.HttpStatus;\n@@ -23,6 +24,9 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.role.RAttr;\n+import org.syncope.core.persistence.beans.role.RDerAttr;\n+import org.syncope.core.persistence.beans.role.RVirAttr;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.propagation.PropagationByResource;\n@@ -133,17 +137,20 @@ public PropagationByResource update(SyncopeRole role, RoleMod roleMod)\n \n         // inherited attributes\n         if (roleMod.getInheritAttributes() != null) {\n-            role.setInheritAttributes(roleMod.getInheritAttributes());\n+            role.setInheritAttributes(\n+                    roleMod.getInheritAttributes());\n         }\n \n         // inherited derived attributes\n         if (roleMod.getInheritDerivedAttributes() != null) {\n-            role.setInheritDerivedAttributes(roleMod.getInheritDerivedAttributes());\n+            role.setInheritDerivedAttributes(\n+                    roleMod.getInheritDerivedAttributes());\n         }\n \n         // inherited virtual attributes\n         if (roleMod.getInheritVirtualAttributes() != null) {\n-            role.setInheritVirtualAttributes(roleMod.getInheritVirtualAttributes());\n+            role.setInheritVirtualAttributes(\n+                    roleMod.getInheritVirtualAttributes());\n         }\n \n         // entitlements\n@@ -177,10 +184,25 @@ public RoleTO getRoleTO(SyncopeRole role) {\n             roleTO.setParent(role.getParent().getId());\n         }\n \n+        // -------------------------\n+        // Retrieve all [derived/virtual] attributes (inherited and not)\n+        // -------------------------\n+        final List<RAttr> allAttributes = role.findInheritedAttributes();\n+        allAttributes.addAll((List<RAttr>) role.getAttributes());\n+\n+        final List<RDerAttr> allDerAttributes =\n+                role.findInheritedDerivedAttributes();\n+        allDerAttributes.addAll((List<RDerAttr>) role.getDerivedAttributes());\n+\n+        final List<RVirAttr> allVirAttributes =\n+                role.findInheritedVirtualAttributes();\n+        allVirAttributes.addAll((List<RVirAttr>) role.getVirtualAttributes());\n+        // -------------------------\n+\n         fillTO(roleTO,\n-                role.findInheritedAttributes(),\n-                role.findInheritedDerivedAttributes(),\n-                role.findInheritedVirtualAttributes(),\n+                allAttributes,\n+                allDerAttributes,\n+                allVirAttributes,\n                 role.getTargetResources());\n \n         for (Entitlement entitlement : role.getEntitlements()) {"},{"sha":"a712d5b740cc78f8afdd9a33e90bbfb881ac0cfb","filename":"core/src/test/java/org/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81d2482df915858a45ebe95a9ac298c4c6841c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81d2482df915858a45ebe95a9ac298c4c6841c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=81d2482df915858a45ebe95a9ac298c4c6841c53","patch":"@@ -52,7 +52,7 @@ public final void find() {\n     public final void inheritedAttributes() {\n         SyncopeRole director = roleDAO.find(7L);\n \n-        assertEquals(2, director.findInheritedAttributes().size());\n+        assertEquals(1, director.findInheritedAttributes().size());\n     }\n \n     @Test"}]}