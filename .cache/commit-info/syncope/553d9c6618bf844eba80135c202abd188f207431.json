{"sha":"553d9c6618bf844eba80135c202abd188f207431","node_id":"C_kwDOJfYA1toAKDU1M2Q5YzY2MThiZjg0NGViYTgwMTM1YzIwMmFiZDE4OGYyMDc0MzE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-03-30T18:38:29Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-03-30T18:38:29Z"},"message":"[SYNCOPE-1670] Enable for graceful shutdown (#332)","tree":{"sha":"e275162bc5b0af14c62d104c9f434c95afc2385e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e275162bc5b0af14c62d104c9f434c95afc2385e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/553d9c6618bf844eba80135c202abd188f207431","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRKOlCRBK7hj4Ov3rIwAAgeAIAA0VAXEmN80o6Ci7s3KmPQRd\nOKlkI1i/bZNgZTuySbgOQkv5kWgqTcu+3ZUegujt1T8rxEpKELmRt4zybG7/rBbG\nPgYlXq9seTNmlC43c43hYF1ukJ1pK/m4ZenvN16l9rxCICxKMRlHHiQL/uuRUZC0\n1ICjuFowVOTfzjTLuRbvXPOZQWLbSM49KEiklH931m0JlJvhIZf1/fTX4COvReu/\neNd90x2fQmrv72mbRs7dEcO4R/ddtTmcnZISbeHo5syTpgG3ndK95maV6sYuVQ/E\nyUnQ5r4LuYi+sFlbja43VRZ08SSDOZLPmKJlKZugtN+slRR6tUP8xs/7tYZrS+k=\n=n9WS\n-----END PGP SIGNATURE-----\n","payload":"tree e275162bc5b0af14c62d104c9f434c95afc2385e\nparent 764c25e00f7b870704f1eff9f699fe51caa96e15\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1648665509 +0200\ncommitter GitHub <noreply@github.com> 1648665509 +0200\n\n[SYNCOPE-1670] Enable for graceful shutdown (#332)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/553d9c6618bf844eba80135c202abd188f207431","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/553d9c6618bf844eba80135c202abd188f207431","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/553d9c6618bf844eba80135c202abd188f207431/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"764c25e00f7b870704f1eff9f699fe51caa96e15","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/764c25e00f7b870704f1eff9f699fe51caa96e15","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/764c25e00f7b870704f1eff9f699fe51caa96e15"}],"stats":{"total":724,"additions":480,"deletions":244},"files":[{"sha":"489bdd635520ff6763bad2c48729220d2d53e04c","filename":"client/idrepo/console/src/main/resources/console.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -30,6 +30,9 @@ management.endpoint.health.show-details=ALWAYS\n \n service.discovery.address=http://localhost:8080/syncope-console/\n \n+server.shutdown=graceful\n+spring.lifecycle.timeout-per-shutdown-phase=30s\n+\n wicket.core.csrf.enabled=false\n \n logging.config=classpath:/log4j2.xml"},{"sha":"ff0bd6aa200f4150c3354eb127ee9444f433bd70","filename":"client/idrepo/enduser/src/main/resources/enduser.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fresources%2Fenduser.properties?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -30,6 +30,9 @@ management.endpoint.health.show-details=ALWAYS\n \n service.discovery.address=http://localhost:8080/syncope-enduser/\n \n+server.shutdown=graceful\n+spring.lifecycle.timeout-per-shutdown-phase=30s\n+\n wicket.core.csrf.enabled=false\n \n logging.config=classpath:/log4j2.xml"},{"sha":"abbf86d4b907368da606f46d01e18fdb98b0c099","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/startstop/KeymasterStart.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fstartstop%2FKeymasterStart.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fstartstop%2FKeymasterStart.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fstartstop%2FKeymasterStart.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -22,8 +22,7 @@\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n \n-public class KeymasterStart extends KeymasterStartStop\n-        implements ApplicationListener<ContextRefreshedEvent> {\n+public class KeymasterStart extends KeymasterStartStop implements ApplicationListener<ContextRefreshedEvent> {\n \n     public KeymasterStart(final NetworkService.Type networkServiceType) {\n         super(networkServiceType);"},{"sha":"81270569a7817231c32f18acb63a50dec9c20b7f","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/startstop/KeymasterStop.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fstartstop%2FKeymasterStop.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fstartstop%2FKeymasterStop.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2Fstartstop%2FKeymasterStop.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -22,8 +22,7 @@\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextClosedEvent;\n \n-public class KeymasterStop extends KeymasterStartStop\n-        implements ApplicationListener<ContextClosedEvent> {\n+public class KeymasterStop extends KeymasterStartStop implements ApplicationListener<ContextClosedEvent> {\n \n     public KeymasterStop(final NetworkService.Type networkServiceType) {\n         super(networkServiceType);"},{"sha":"bbb7d88b2d30c3c3c1c0e1e40fe3717ff94123b6","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"modified","additions":87,"deletions":60,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -106,8 +106,10 @@ public class IdRepoLogicContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public LogicInvocationHandler logicInvocationHandler(final NotificationManager notificationManager,\n-                                                         final AuditManager auditManager) {\n+    public LogicInvocationHandler logicInvocationHandler(\n+            final NotificationManager notificationManager,\n+            final AuditManager auditManager) {\n+\n         return new LogicInvocationHandler(notificationManager, auditManager);\n     }\n \n@@ -125,8 +127,11 @@ public AuditAccessor auditAccessor(final AuditConfDAO auditConfDAO) {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AuditLoader auditLoader(final AuditAccessor auditAccessor, final ImplementationLookup implementationLookup,\n-                                   final LogicProperties logicProperties) {\n+    public AuditLoader auditLoader(\n+            final AuditAccessor auditAccessor,\n+            final ImplementationLookup implementationLookup,\n+            final LogicProperties logicProperties) {\n+\n         return new AuditLoader(auditAccessor, implementationLookup, logicProperties);\n     }\n \n@@ -150,9 +155,11 @@ public IdRepoImplementationTypeLoader idRepoImplementationTypeLoader() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AccessTokenLogic accessTokenLogic(final AccessTokenDataBinder binder,\n-                                             final AccessTokenDAO accessTokenDAO,\n-                                             final SecurityProperties securityProperties) {\n+    public AccessTokenLogic accessTokenLogic(\n+            final AccessTokenDataBinder binder,\n+            final AccessTokenDAO accessTokenDAO,\n+            final SecurityProperties securityProperties) {\n+\n         return new AccessTokenLogic(securityProperties, binder, accessTokenDAO);\n     }\n \n@@ -179,16 +186,20 @@ public AnyObjectLogic anyObjectLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AnyTypeClassLogic anyTypeClassLogic(final AnyTypeClassDataBinder binder,\n-                                               final AnyTypeClassDAO anyTypeClassDAO) {\n+    public AnyTypeClassLogic anyTypeClassLogic(\n+            final AnyTypeClassDataBinder binder,\n+            final AnyTypeClassDAO anyTypeClassDAO) {\n+\n         return new AnyTypeClassLogic(binder, anyTypeClassDAO);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public AnyTypeLogic anyTypeLogic(final AnyTypeDataBinder binder,\n-                                     final AnyTypeDAO anyTypeDAO,\n-                                     final AnyObjectDAO anyObjectDAO) {\n+    public AnyTypeLogic anyTypeLogic(\n+            final AnyTypeDataBinder binder,\n+            final AnyTypeDAO anyTypeDAO,\n+            final AnyObjectDAO anyObjectDAO) {\n+\n         return new AnyTypeLogic(binder, anyTypeDAO, anyObjectDAO);\n     }\n \n@@ -222,9 +233,11 @@ public AuditLogic auditLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public DelegationLogic delegationLogic(final DelegationDataBinder binder,\n-                                           final UserDAO userDAO,\n-                                           final DelegationDAO delegationDAO) {\n+    public DelegationLogic delegationLogic(\n+            final DelegationDataBinder binder,\n+            final UserDAO userDAO,\n+            final DelegationDAO delegationDAO) {\n+\n         return new DelegationLogic(binder, delegationDAO, userDAO);\n     }\n \n@@ -239,22 +252,24 @@ public DynRealmLogic dynRealmLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public GroupLogic groupLogic(final GroupProvisioningManager provisioningManager,\n-                                 final JobManager jobManager,\n-                                 final TemplateUtils templateUtils,\n-                                 final EntityFactory entityFactory,\n-                                 final RealmDAO realmDAO,\n-                                 final AnyTypeDAO anyTypeDAO,\n-                                 final UserDAO userDAO,\n-                                 final GroupDAO groupDAO,\n-                                 final AnySearchDAO anySearchDAO,\n-                                 final SchedulerFactoryBean scheduler,\n-                                 final TaskDAO taskDAO,\n-                                 final ConfParamOps confParamOps,\n-                                 final GroupDataBinder groupDataBinder,\n-                                 final TaskDataBinder taskDataBinder,\n-                                 final ImplementationDAO implementationDAO,\n-                                 final SecurityProperties securityProperties) {\n+    public GroupLogic groupLogic(\n+            final GroupProvisioningManager provisioningManager,\n+            final JobManager jobManager,\n+            final TemplateUtils templateUtils,\n+            final EntityFactory entityFactory,\n+            final RealmDAO realmDAO,\n+            final AnyTypeDAO anyTypeDAO,\n+            final UserDAO userDAO,\n+            final GroupDAO groupDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final SchedulerFactoryBean scheduler,\n+            final TaskDAO taskDAO,\n+            final ConfParamOps confParamOps,\n+            final GroupDataBinder groupDataBinder,\n+            final TaskDataBinder taskDataBinder,\n+            final ImplementationDAO implementationDAO,\n+            final SecurityProperties securityProperties) {\n+\n         return new GroupLogic(\n                 realmDAO,\n                 anyTypeDAO,\n@@ -276,15 +291,17 @@ public GroupLogic groupLogic(final GroupProvisioningManager provisioningManager,\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ImplementationLogic implementationLogic(final ImplementationDataBinder binder,\n-                                                   final PlainSchemaDAO plainSchemaDAO,\n-                                                   final RealmDAO realmDAO,\n-                                                   final PolicyDAO policyDAO,\n-                                                   final ReportDAO reportDAO,\n-                                                   final TaskDAO taskDAO,\n-                                                   final ExternalResourceDAO externalResourceDAO,\n-                                                   final ImplementationDAO implementationDAO,\n-                                                   final NotificationDAO notificationDAO) {\n+    public ImplementationLogic implementationLogic(\n+            final ImplementationDataBinder binder,\n+            final PlainSchemaDAO plainSchemaDAO,\n+            final RealmDAO realmDAO,\n+            final PolicyDAO policyDAO,\n+            final ReportDAO reportDAO,\n+            final TaskDAO taskDAO,\n+            final ExternalResourceDAO externalResourceDAO,\n+            final ImplementationDAO implementationDAO,\n+            final NotificationDAO notificationDAO) {\n+\n         return new ImplementationLogic(\n                 binder,\n                 implementationDAO,\n@@ -299,18 +316,22 @@ public ImplementationLogic implementationLogic(final ImplementationDataBinder bi\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public MailTemplateLogic mailTemplateLogic(final MailTemplateDAO mailTemplateDAO,\n-                                               final EntityFactory entityFactory,\n-                                               final NotificationDAO notificationDAO) {\n+    public MailTemplateLogic mailTemplateLogic(\n+            final MailTemplateDAO mailTemplateDAO,\n+            final EntityFactory entityFactory,\n+            final NotificationDAO notificationDAO) {\n+\n         return new MailTemplateLogic(mailTemplateDAO, notificationDAO, entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public NotificationLogic notificationLogic(final NotificationDataBinder binder,\n-                                               final JobManager jobManager,\n-                                               final SchedulerFactoryBean scheduler,\n-                                               final NotificationDAO notificationDAO) {\n+    public NotificationLogic notificationLogic(\n+            final NotificationDataBinder binder,\n+            final JobManager jobManager,\n+            final SchedulerFactoryBean scheduler,\n+            final NotificationDAO notificationDAO) {\n+\n         return new NotificationLogic(jobManager, scheduler, notificationDAO, binder);\n     }\n \n@@ -326,11 +347,13 @@ public PolicyLogic policyLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public RealmLogic realmLogic(final RealmDataBinder binder,\n-                                 final RealmDAO realmDAO,\n-                                 final AnySearchDAO anySearchDAO,\n-                                 final PropagationManager propagationManager,\n-                                 final PropagationTaskExecutor taskExecutor) {\n+    public RealmLogic realmLogic(\n+            final RealmDataBinder binder,\n+            final RealmDAO realmDAO,\n+            final AnySearchDAO anySearchDAO,\n+            final PropagationManager propagationManager,\n+            final PropagationTaskExecutor taskExecutor) {\n+\n         return new RealmLogic(realmDAO, anySearchDAO, binder, propagationManager, taskExecutor);\n     }\n \n@@ -359,9 +382,11 @@ public ReportLogic reportLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ReportTemplateLogic reportTemplateLogic(final ReportTemplateDAO reportTemplateDAO,\n-                                                   final ReportDAO reportDAO,\n-                                                   final EntityFactory entityFactory) {\n+    public ReportTemplateLogic reportTemplateLogic(\n+            final ReportTemplateDAO reportTemplateDAO,\n+            final ReportDAO reportDAO,\n+            final EntityFactory entityFactory) {\n+\n         return new ReportTemplateLogic(reportTemplateDAO, reportDAO, entityFactory);\n     }\n \n@@ -376,11 +401,13 @@ public RoleLogic roleLogic(\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public SchemaLogic schemaLogic(final SchemaDataBinder binder,\n-                                   final VirSchemaDAO virSchemaDAO,\n-                                   final AnyTypeClassDAO anyTypeClassDAO,\n-                                   final DerSchemaDAO derSchemaDAO,\n-                                   final PlainSchemaDAO plainSchemaDAO) {\n+    public SchemaLogic schemaLogic(\n+            final SchemaDataBinder binder,\n+            final VirSchemaDAO virSchemaDAO,\n+            final AnyTypeClassDAO anyTypeClassDAO,\n+            final DerSchemaDAO derSchemaDAO,\n+            final PlainSchemaDAO plainSchemaDAO) {\n+\n         return new SchemaLogic(plainSchemaDAO, derSchemaDAO, virSchemaDAO, anyTypeClassDAO, binder);\n     }\n "},{"sha":"cb7df8718bf482e19c68d489272bac650e214f6f","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"modified","additions":18,"deletions":7,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ThreadPoolExecutor;\n import javax.servlet.ServletRequestListener;\n import org.apache.cxf.Bus;\n import org.apache.cxf.endpoint.Server;\n@@ -124,6 +125,7 @@\n import org.apache.syncope.core.rest.cxf.service.UserSelfServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.UserServiceImpl;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -133,17 +135,23 @@\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n \n @PropertySource(\"classpath:errorMessages.properties\")\n+@EnableConfigurationProperties(RESTProperties.class)\n @Configuration(proxyBeanMethods = false)\n public class IdRepoRESTCXFContext {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public ThreadPoolTaskExecutor batchExecutor() {\n-        ThreadPoolTaskExecutor batchExecutor = new ThreadPoolTaskExecutor();\n-        batchExecutor.setCorePoolSize(10);\n-        batchExecutor.setThreadNamePrefix(\"Batch-\");\n-        batchExecutor.initialize();\n-        return batchExecutor;\n+    public ThreadPoolTaskExecutor batchExecutor(final RESTProperties props) {\n+        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n+        executor.setCorePoolSize(props.getBatchExecutor().getCorePoolSize());\n+        executor.setMaxPoolSize(props.getBatchExecutor().getMaxPoolSize());\n+        executor.setQueueCapacity(props.getBatchExecutor().getQueueCapacity());\n+        executor.setAwaitTerminationSeconds(props.getBatchExecutor().getAwaitTerminationSeconds());\n+        executor.setWaitForTasksToCompleteOnShutdown(true);\n+        executor.setThreadNamePrefix(\"Batch-\");\n+        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());\n+        executor.initialize();\n+        return executor;\n     }\n \n     @ConditionalOnMissingBean\n@@ -475,8 +483,11 @@ public UserSelfService userSelfService(final UserLogic userLogic, final SyncopeL\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public UserService userService(final UserDAO userDAO, final UserLogic userLogic,\n+    public UserService userService(\n+            final UserDAO userDAO,\n+            final UserLogic userLogic,\n             final SearchCondVisitor searchCondVisitor) {\n+\n         return new UserServiceImpl(searchCondVisitor, userDAO, userLogic);\n     }\n }"},{"sha":"78176ee4b7a81e933a41f21be0db3b8e3ac10799","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RESTProperties.java","status":"renamed","additions":8,"deletions":17,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRESTProperties.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -16,26 +16,17 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.job;\n+package org.apache.syncope.core.rest.cxf;\n \n-import org.springframework.beans.factory.DisposableBean;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+import org.apache.syncope.core.provisioning.java.ExecutorProperties;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n \n-/**\n- * Clean shutdown for Quartz scheduler.\n- */\n-public class SchedulerShutdown implements DisposableBean {\n-\n-    private final ApplicationContext ctx;\n+@ConfigurationProperties(\"rest\")\n+public class RESTProperties {\n \n-    public SchedulerShutdown(final ApplicationContext ctx) {\n-        this.ctx = ctx;\n-    }\n+    private final ExecutorProperties batchExecutor = new ExecutorProperties();\n \n-    @Override\n-    public void destroy() throws Exception {\n-        SchedulerFactoryBean scheduler = ctx.getBean(SchedulerFactoryBean.class);\n-        scheduler.getScheduler().shutdown();\n+    public ExecutorProperties getBatchExecutor() {\n+        return batchExecutor;\n     }\n }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SchedulerShutdown.java"},{"sha":"9f6f2b3e86bf1b31759dd6f30f02dbbab527c0b6","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/SyncopeCoreLoader.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -25,14 +25,14 @@\n public interface SyncopeCoreLoader extends Ordered {\n \n     /**\n-     * Perform generic (not related to any domain) initialization operations.\n+     * Perform generic (not related to any domain) init operations.\n      */\n     default void load() {\n         // nothing to do\n     }\n \n     /**\n-     * Perform initialization operations on the given domain.\n+     * Perform init operations on the given domain.\n      *\n      * @param domain domain to initialize\n      * @param datasource db access for the given domain\n@@ -42,11 +42,18 @@ default void load(String domain, DataSource datasource) {\n     }\n \n     /**\n-     * Perform closing operations on the given domain.\n+     * Perform dispose operations on the given domain.\n      *\n      * @param domain domain to unload\n      */\n     default void unload(String domain) {\n         // nothing to do        \n     }\n+\n+    /**\n+     * Perform generic (not related to any domain) dispose operations.\n+     */\n+    default void unload() {\n+        // nothing to do\n+    }\n }"},{"sha":"e701849537aa72eeb16004dc1f1010e6d19dfdce","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/MasterDomain.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FMasterDomain.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -24,7 +24,6 @@\n import java.io.InputStream;\n import java.util.Map;\n import java.util.Objects;\n-\n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf;\n@@ -69,9 +68,10 @@ public JndiObjectFactoryBean masterDataSource(final PersistenceProperties props)\n     @ConditionalOnMissingBean(name = \"MasterDataSourceInitializer\")\n     @Bean(name = \"MasterDataSourceInitializer\")\n     public DataSourceInitializer masterDataSourceInitializer(\n-        final PersistenceProperties props,\n-        @Qualifier(\"MasterDataSource\")\n-        final JndiObjectFactoryBean masterDataSource) {\n+            final PersistenceProperties props,\n+            @Qualifier(\"MasterDataSource\")\n+            final JndiObjectFactoryBean masterDataSource) {\n+\n         ResourceDatabasePopulator databasePopulator = new ResourceDatabasePopulator();\n         databasePopulator.setContinueOnError(true);\n         databasePopulator.setIgnoreFailedDrops(true);\n@@ -89,10 +89,11 @@ public DataSourceInitializer masterDataSourceInitializer(\n     @DependsOn(\"commonEMFConf\")\n     @Bean(name = \"MasterEntityManagerFactory\")\n     public DomainEntityManagerFactoryBean masterEntityManagerFactory(\n-        final PersistenceProperties props,\n-        @Qualifier(\"MasterDataSource\")\n-        final JndiObjectFactoryBean masterDataSource,\n-        final CommonEntityManagerFactoryConf commonEMFConf) {\n+            final PersistenceProperties props,\n+            @Qualifier(\"MasterDataSource\")\n+            final JndiObjectFactoryBean masterDataSource,\n+            final CommonEntityManagerFactoryConf commonEMFConf) {\n+\n         OpenJpaVendorAdapter vendorAdapter = new OpenJpaVendorAdapter();\n         vendorAdapter.setShowSql(false);\n         vendorAdapter.setGenerateDdl(true);\n@@ -117,20 +118,25 @@ public DomainEntityManagerFactoryBean masterEntityManagerFactory(\n     @ConditionalOnMissingBean(name = \"MasterTransactionManager\")\n     @Bean(name = { \"MasterTransactionManager\", \"Master\" })\n     public PlatformTransactionManager transactionManager(\n-        @Qualifier(\"MasterEntityManagerFactory\")\n-        final DomainEntityManagerFactoryBean masterEntityManagerFactory) {\n+            @Qualifier(\"MasterEntityManagerFactory\")\n+            final DomainEntityManagerFactoryBean masterEntityManagerFactory) {\n+\n         return new JpaTransactionManager(Objects.requireNonNull(masterEntityManagerFactory.getObject()));\n     }\n \n     @Bean(name = \"MasterContentXML\")\n-    public InputStream masterContentXML(final ResourceLoader resourceLoader,\n-                                        final PersistenceProperties props) throws IOException {\n+    public InputStream masterContentXML(\n+            final ResourceLoader resourceLoader,\n+            final PersistenceProperties props) throws IOException {\n+\n         return resourceLoader.getResource(props.getDomain().get(0).getContent()).getInputStream();\n     }\n \n     @Bean(name = \"MasterKeymasterConfParamsJSON\")\n-    public InputStream masterKeymasterConfParamsJSON(final ResourceLoader resourceLoader,\n-                                                     final PersistenceProperties props) throws IOException {\n+    public InputStream masterKeymasterConfParamsJSON(\n+            final ResourceLoader resourceLoader,\n+            final PersistenceProperties props) throws IOException {\n+\n         return resourceLoader.getResource(props.getDomain().get(0).getKeymasterConfParams()).getInputStream();\n     }\n "},{"sha":"c38af10a13c4e379210110fe32aea9c54cfe0d17","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -136,6 +136,7 @@\n import org.apache.syncope.core.spring.security.SecurityProperties;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -237,9 +238,10 @@ public DomainRegistry domainRegistry(final Environment env) {\n     @Bean\n     public RuntimeDomainLoader runtimeDomainLoader(\n             final DomainHolder domainHolder,\n-            final DomainRegistry domainRegistry) {\n+            final DomainRegistry domainRegistry,\n+            final ListableBeanFactory beanFactory) {\n \n-        return new RuntimeDomainLoader(domainHolder, domainRegistry);\n+        return new RuntimeDomainLoader(domainHolder, domainRegistry, beanFactory);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"bd2f90b6cba2eee14e49ff0170f00dddc54d8bc5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/RuntimeDomainLoader.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.aop.support.AopUtils;\n+import org.springframework.beans.factory.ListableBeanFactory;\n \n public class RuntimeDomainLoader implements DomainWatcher {\n \n@@ -37,9 +38,16 @@ public class RuntimeDomainLoader implements DomainWatcher {\n \n     protected final DomainRegistry domainRegistry;\n \n-    public RuntimeDomainLoader(final DomainHolder domainHolder, final DomainRegistry domainRegistry) {\n+    protected final ListableBeanFactory beanFactory;\n+\n+    public RuntimeDomainLoader(\n+            final DomainHolder domainHolder,\n+            final DomainRegistry domainRegistry,\n+            final ListableBeanFactory beanFactory) {\n+\n         this.domainHolder = domainHolder;\n         this.domainRegistry = domainRegistry;\n+        this.beanFactory = beanFactory;\n     }\n \n     @Override\n@@ -70,14 +78,14 @@ public void removed(final String domain) {\n         if (domainHolder.getDomains().containsKey(domain)) {\n             LOG.info(\"Domain {} unregistration\", domain);\n \n-            ApplicationContextProvider.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().\n-                    stream().sorted(Comparator.comparing(SyncopeCoreLoader::getOrder).reversed()).\n+            beanFactory.getBeansOfType(SyncopeCoreLoader.class).values().stream().\n+                    sorted(Comparator.comparing(SyncopeCoreLoader::getOrder).reversed()).\n                     forEachOrdered(loader -> {\n                         String loaderName = AopUtils.getTargetClass(loader).getName();\n \n-                        LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n+                        LOG.debug(\"[{}] Starting dispose on domain '{}'\", loaderName, domain);\n                         loader.unload(domain);\n-                        LOG.debug(\"[{}] Completed on domain '{}'\", loaderName, domain);\n+                        LOG.debug(\"[{}] Dispose completed on domain '{}'\", loaderName, domain);\n                     });\n \n             domainRegistry.unregister(domain);"},{"sha":"c41272329395d2e3ef9ce6bd736e9db9999a4fde","filename":"core/provisioning-api/pom.xml","status":"modified","additions":11,"deletions":20,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fpom.xml?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -39,37 +39,28 @@ under the License.\n \n   <dependencies>\n     <dependency>\n-      <groupId>org.apache.commons</groupId>\n-      <artifactId>commons-jexl3</artifactId>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-quartz</artifactId>\n     </dependency>\n \n     <dependency>\n-      <groupId>com.fasterxml.jackson.core</groupId>\n-      <artifactId>jackson-core</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.fasterxml.jackson.module</groupId>\n-      <artifactId>jackson-module-afterburner</artifactId>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-api</artifactId>\n+      <version>${project.version}</version>\n     </dependency>\n \n     <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-context</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-tx</artifactId>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-jexl3</artifactId>\n     </dependency>\n \n     <dependency>\n-      <groupId>org.quartz-scheduler</groupId>\n-      <artifactId>quartz</artifactId>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-core</artifactId>\n     </dependency>\n-\n     <dependency>\n-      <groupId>org.apache.syncope.core</groupId>\n-      <artifactId>syncope-core-persistence-api</artifactId>\n-      <version>${project.version}</version>\n+      <groupId>com.fasterxml.jackson.module</groupId>\n+      <artifactId>jackson-module-afterburner</artifactId>\n     </dependency>\n \n     <dependency>"},{"sha":"d01a5bb34457516ae1188009ed33a3daa9471c45","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ExecutorProperties.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FExecutorProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FExecutorProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FExecutorProperties.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+public class ExecutorProperties {\n+\n+    private int corePoolSize = 5;\n+\n+    private int maxPoolSize = 25;\n+\n+    private int queueCapacity = 100;\n+\n+    private int awaitTerminationSeconds = 5;\n+\n+    public int getCorePoolSize() {\n+        return corePoolSize;\n+    }\n+\n+    public void setCorePoolSize(final int corePoolSize) {\n+        this.corePoolSize = corePoolSize;\n+    }\n+\n+    public int getMaxPoolSize() {\n+        return maxPoolSize;\n+    }\n+\n+    public void setMaxPoolSize(final int maxPoolSize) {\n+        this.maxPoolSize = maxPoolSize;\n+    }\n+\n+    public int getQueueCapacity() {\n+        return queueCapacity;\n+    }\n+\n+    public void setQueueCapacity(final int queueCapacity) {\n+        this.queueCapacity = queueCapacity;\n+    }\n+\n+    public int getAwaitTerminationSeconds() {\n+        return awaitTerminationSeconds;\n+    }\n+\n+    public void setAwaitTerminationSeconds(final int awaitTerminationSeconds) {\n+        this.awaitTerminationSeconds = awaitTerminationSeconds;\n+    }\n+}"},{"sha":"766ddb71f91c6184f740a587404e7298639e9163","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":28,"deletions":26,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -156,7 +156,6 @@\n import org.apache.syncope.core.provisioning.java.data.wa.WAClientAppDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.job.DefaultJobManager;\n import org.apache.syncope.core.provisioning.java.job.SchedulerDBInit;\n-import org.apache.syncope.core.provisioning.java.job.SchedulerShutdown;\n import org.apache.syncope.core.provisioning.java.job.SyncopeSpringBeanJobFactory;\n import org.apache.syncope.core.provisioning.java.job.SystemLoadReporterJob;\n import org.apache.syncope.core.provisioning.java.job.notification.DefaultNotificationJobDelegate;\n@@ -220,25 +219,27 @@ public AsyncConnectorFacade asyncConnectorFacade() {\n     /**\n      * Annotated as {@code @Primary} because it will be used by {@code @Async} in {@link AsyncConnectorFacade}.\n      *\n-     * @param provisioningProperties configuration properties\n-     *\n+     * @param props configuration properties\n      * @return executor\n      */\n     @Bean\n     @Primary\n-    public ThreadPoolTaskExecutor asyncConnectorFacadeExecutor(final ProvisioningProperties provisioningProperties) {\n+    public ThreadPoolTaskExecutor asyncConnectorFacadeExecutor(final ProvisioningProperties props) {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n-        executor.setCorePoolSize(provisioningProperties.getAsyncConnectorFacadeExecutor().getCorePoolSize());\n-        executor.setMaxPoolSize(provisioningProperties.getAsyncConnectorFacadeExecutor().getMaxPoolSize());\n-        executor.setQueueCapacity(provisioningProperties.getAsyncConnectorFacadeExecutor().getQueueCapacity());\n+        executor.setCorePoolSize(props.getAsyncConnectorFacadeExecutor().getCorePoolSize());\n+        executor.setMaxPoolSize(props.getAsyncConnectorFacadeExecutor().getMaxPoolSize());\n+        executor.setQueueCapacity(props.getAsyncConnectorFacadeExecutor().getQueueCapacity());\n+        executor.setAwaitTerminationSeconds(props.getAsyncConnectorFacadeExecutor().getAwaitTerminationSeconds());\n+        executor.setWaitForTasksToCompleteOnShutdown(true);\n         executor.setThreadNamePrefix(\"AsyncConnectorFacadeExecutor-\");\n         executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());\n         executor.initialize();\n         return executor;\n     }\n \n     @Bean\n-    public AsyncConfigurer asyncConfigurer(@Qualifier(\"asyncConnectorFacadeExecutor\")\n+    public AsyncConfigurer asyncConfigurer(\n+            @Qualifier(\"asyncConnectorFacadeExecutor\")\n             final ThreadPoolTaskExecutor asyncConnectorFacadeExecutor) {\n \n         return new AsyncConfigurer() {\n@@ -253,16 +254,18 @@ public Executor getAsyncExecutor() {\n     /**\n      * Used by {@link org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor}.\n      *\n-     * @param provisioningProperties the provisioning properties\n+     * @param props the provisioning properties\n      * @return executor thread pool task executor\n      */\n     @Bean\n-    public ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor(\n-            final ProvisioningProperties provisioningProperties) {\n+    public ThreadPoolTaskExecutor propagationTaskExecutorAsyncExecutor(final ProvisioningProperties props) {\n         ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n-        executor.setCorePoolSize(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getCorePoolSize());\n-        executor.setMaxPoolSize(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getMaxPoolSize());\n-        executor.setQueueCapacity(provisioningProperties.getPropagationTaskExecutorAsyncExecutor().getQueueCapacity());\n+        executor.setCorePoolSize(props.getPropagationTaskExecutorAsyncExecutor().getCorePoolSize());\n+        executor.setMaxPoolSize(props.getPropagationTaskExecutorAsyncExecutor().getMaxPoolSize());\n+        executor.setQueueCapacity(props.getPropagationTaskExecutorAsyncExecutor().getQueueCapacity());\n+        executor.setWaitForTasksToCompleteOnShutdown(true);\n+        executor.setAwaitTerminationSeconds(\n+                props.getPropagationTaskExecutorAsyncExecutor().getAwaitTerminationSeconds());\n         executor.setThreadNamePrefix(\"PropagationTaskExecutor-\");\n         executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());\n         executor.initialize();\n@@ -287,12 +290,11 @@ public SchedulerDBInit quartzDataSourceInit(final ProvisioningProperties provisi\n     @DependsOn(\"quartzDataSourceInit\")\n     @Lazy(false)\n     @Bean\n-    public SchedulerFactoryBean scheduler(final ApplicationContext ctx,\n-            final ProvisioningProperties provisioningProperties) {\n+    public SchedulerFactoryBean scheduler(final ApplicationContext ctx, final ProvisioningProperties props) {\n         SchedulerFactoryBean scheduler = new SchedulerFactoryBean();\n         scheduler.setAutoStartup(true);\n         scheduler.setApplicationContext(ctx);\n-        scheduler.setWaitForJobsToCompleteOnShutdown(true);\n+        scheduler.setWaitForJobsToCompleteOnShutdown(props.getQuartz().isWaitForJobsToCompleteOnShutdown());\n         scheduler.setOverwriteExistingJobs(true);\n         scheduler.setDataSource(masterDataSource);\n         scheduler.setTransactionManager(masterTransactionManager);\n@@ -301,28 +303,28 @@ public SchedulerFactoryBean scheduler(final ApplicationContext ctx,\n         Properties quartzProperties = new Properties();\n         quartzProperties.setProperty(\n                 \"org.quartz.scheduler.idleWaitTime\",\n-                String.valueOf(provisioningProperties.getQuartz().getIdleWaitTime()));\n+                String.valueOf(props.getQuartz().getIdleWaitTime()));\n         quartzProperties.setProperty(\n                 \"org.quartz.jobStore.misfireThreshold\",\n-                String.valueOf(provisioningProperties.getQuartz().getMisfireThreshold()));\n+                String.valueOf(props.getQuartz().getMisfireThreshold()));\n         quartzProperties.setProperty(\n                 \"org.quartz.jobStore.driverDelegateClass\",\n-                provisioningProperties.getQuartz().getDelegate().getName());\n+                props.getQuartz().getDelegate().getName());\n+        quartzProperties.setProperty(\n+                \"org.quartz.jobStore.class\",\n+                \"org.springframework.scheduling.quartz.LocalDataSourceJobStore\");\n+        quartzProperties.setProperty(\"org.quartz.threadPool.makeThreadsDaemons\", \"true\");\n+        quartzProperties.setProperty(\"org.quartz.scheduler.makeSchedulerThreadDaemon\", \"true\");\n         quartzProperties.setProperty(\"org.quartz.jobStore.isClustered\", \"true\");\n         quartzProperties.setProperty(\"org.quartz.jobStore.clusterCheckinInterval\", \"20000\");\n-        quartzProperties.setProperty(\"org.quartz.scheduler.instanceName\", \"ClusteredScheduler\");\n+        quartzProperties.setProperty(\"org.quartz.scheduler.instanceName\", \"SyncopeClusteredScheduler\");\n         quartzProperties.setProperty(\"org.quartz.scheduler.instanceId\", \"AUTO\");\n         quartzProperties.setProperty(\"org.quartz.scheduler.jmx.export\", \"true\");\n         scheduler.setQuartzProperties(quartzProperties);\n \n         return scheduler;\n     }\n \n-    @Bean\n-    public SchedulerShutdown schedulerShutdown(final ApplicationContext ctx) {\n-        return new SchedulerShutdown(ctx);\n-    }\n-\n     @ConditionalOnMissingBean\n     @Bean\n     public JobManager jobManager("},{"sha":"7375f3da7ef625a1e08280493da476bcfb89b373","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningProperties.java","status":"modified","additions":10,"deletions":33,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningProperties.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -28,39 +28,6 @@\n @ConfigurationProperties(\"provisioning\")\n public class ProvisioningProperties {\n \n-    public static class ExecutorProperties {\n-\n-        private int corePoolSize = 5;\n-\n-        private int maxPoolSize = 25;\n-\n-        private int queueCapacity = 100;\n-\n-        public int getCorePoolSize() {\n-            return corePoolSize;\n-        }\n-\n-        public void setCorePoolSize(final int corePoolSize) {\n-            this.corePoolSize = corePoolSize;\n-        }\n-\n-        public int getMaxPoolSize() {\n-            return maxPoolSize;\n-        }\n-\n-        public void setMaxPoolSize(final int maxPoolSize) {\n-            this.maxPoolSize = maxPoolSize;\n-        }\n-\n-        public int getQueueCapacity() {\n-            return queueCapacity;\n-        }\n-\n-        public void setQueueCapacity(final int queueCapacity) {\n-            this.queueCapacity = queueCapacity;\n-        }\n-    }\n-\n     public static class QuartzProperties {\n \n         private Class<? extends DriverDelegate> delegate;\n@@ -69,6 +36,8 @@ public static class QuartzProperties {\n \n         private boolean disableInstance = false;\n \n+        private boolean waitForJobsToCompleteOnShutdown = true;\n+\n         private int idleWaitTime = 30000;\n \n         private int misfireThreshold = 60000;\n@@ -97,6 +66,14 @@ public void setDisableInstance(final boolean disableInstance) {\n             this.disableInstance = disableInstance;\n         }\n \n+        public boolean isWaitForJobsToCompleteOnShutdown() {\n+            return waitForJobsToCompleteOnShutdown;\n+        }\n+\n+        public void setWaitForJobsToCompleteOnShutdown(final boolean waitForJobsToCompleteOnShutdown) {\n+            this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown;\n+        }\n+\n         public int getIdleWaitTime() {\n             return idleWaitTime;\n         }"},{"sha":"48f1e46dba21a7a890bc7f2e411745b5ca1c85bc","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreApplication.java","status":"modified","additions":32,"deletions":20,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreApplication.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -22,7 +22,6 @@\n import org.apache.cxf.spring.boot.autoconfigure.openapi.OpenApiAutoConfiguration;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n-import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.common.lib.info.SystemInfo;\n import org.apache.syncope.core.logic.LogicProperties;\n@@ -66,6 +65,7 @@\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n+import org.springframework.beans.factory.ListableBeanFactory;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.actuate.mail.MailHealthIndicator;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n@@ -76,6 +76,7 @@\n import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\n import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;\n import org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration;\n+import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n@@ -87,14 +88,17 @@\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n \n-@SpringBootApplication(exclude = {\n-    ErrorMvcAutoConfiguration.class,\n-    HttpMessageConvertersAutoConfiguration.class,\n-    OpenApiAutoConfiguration.class,\n-    DataSourceAutoConfiguration.class,\n-    DataSourceTransactionManagerAutoConfiguration.class,\n-    JdbcTemplateAutoConfiguration.class,\n-    QuartzAutoConfiguration.class }, proxyBeanMethods = false)\n+@SpringBootApplication(\n+        exclude = {\n+            ErrorMvcAutoConfiguration.class,\n+            HttpMessageConvertersAutoConfiguration.class,\n+            OpenApiAutoConfiguration.class,\n+            DataSourceAutoConfiguration.class,\n+            DataSourceTransactionManagerAutoConfiguration.class,\n+            JdbcTemplateAutoConfiguration.class,\n+            QuartzAutoConfiguration.class,\n+            TaskExecutionAutoConfiguration.class },\n+        proxyBeanMethods = false)\n @EnableTransactionManagement\n public class SyncopeCoreApplication extends SpringBootServletInitializer {\n \n@@ -109,6 +113,24 @@ protected SpringApplicationBuilder configure(final SpringApplicationBuilder buil\n         return builder.properties(Map.of(\"spring.config.name\", \"core\")).sources(SyncopeCoreApplication.class);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public TaskExecutorUnloader taskExecutorUnloader(final ListableBeanFactory beanFactory) {\n+        return new TaskExecutorUnloader(beanFactory);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public SyncopeCoreStart keymasterStart(final DomainHolder domainHolder) {\n+        return new SyncopeCoreStart(domainHolder);\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public KeymasterStop keymasterStop(final DomainHolder domainHolder) {\n+        return new SyncopeCoreStop(domainHolder);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public SyncopeCoreInfoContributor syncopeCoreInfoContributor(\n@@ -218,21 +240,11 @@ public EntityCacheEndpoint entityCacheEndpoint(final EntityCacheDAO entityCacheD\n         return new EntityCacheEndpoint(entityCacheDAO);\n     }\n \n-    @ConditionalOnMissingBean\n-    @Bean\n-    public SyncopeCoreStart keymasterStart(final DomainHolder domainHolder) {\n-        return new SyncopeCoreStart(domainHolder);\n-    }\n-\n-    @Bean\n-    public KeymasterStop keymasterStop() {\n-        return new KeymasterStop(NetworkService.Type.CORE);\n-    }\n-\n     @Bean\n     public SyncopeStarterEventListener syncopeCoreEventListener(\n             @Qualifier(\"syncopeCoreInfoContributor\")\n             final SyncopeCoreInfoContributor syncopeCoreInfoContributor) {\n+\n         return new DefaultSyncopeStarterEventListener(syncopeCoreInfoContributor);\n     }\n "},{"sha":"5a272388fca06f6221c6158c6f578cf4d76acfeb","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreStart.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStart.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStart.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStart.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -30,7 +30,7 @@\n import org.springframework.core.Ordered;\n \n /**\n- * Take care of all initializations needed by Syncope Core to run up and safe.\n+ * Take care of all inits needed by Syncope Core to run up and safe.\n  */\n public class SyncopeCoreStart extends KeymasterStart implements Ordered {\n \n@@ -55,17 +55,17 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n                 forEachOrdered(loader -> {\n                     String loaderName = AopUtils.getTargetClass(loader).getName();\n \n-                    LOG.debug(\"[{}] Starting initialization\", loaderName);\n+                    LOG.debug(\"[{}#{}] Starting init\", loaderName, loader.getOrder());\n \n                     loader.load();\n \n                     domainHolder.getDomains().forEach((domain, datasource) -> {\n-                        LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n+                        LOG.debug(\"[{}] Starting init on domain '{}'\", loaderName, domain);\n                         loader.load(domain, datasource);\n-                        LOG.debug(\"[{}] Completed on domain '{}'\", loaderName, domain);\n+                        LOG.debug(\"[{}] Init completed on domain '{}'\", loaderName, domain);\n                     });\n \n-                    LOG.debug(\"[{}] Initialization completed\", loaderName);\n+                    LOG.debug(\"[{}] Init completed\", loaderName);\n                 });\n \n         super.onApplicationEvent(event);"},{"sha":"d55afc79fd56933f3a526b370143b69c5e796c5a","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/SyncopeCoreStop.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStop.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStop.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FSyncopeCoreStop.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.starter;\n+\n+import java.util.Comparator;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.context.event.ContextClosedEvent;\n+import org.springframework.core.Ordered;\n+\n+/**\n+ * Take care of all disposal needed by Syncope Core to shut down gracefully..\n+ */\n+public class SyncopeCoreStop extends KeymasterStop implements Ordered {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeCoreStop.class);\n+\n+    private final DomainHolder domainHolder;\n+\n+    public SyncopeCoreStop(final DomainHolder domainHolder) {\n+        super(NetworkService.Type.CORE);\n+        this.domainHolder = domainHolder;\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void onApplicationEvent(final ContextClosedEvent event) {\n+        event.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().stream().\n+                sorted(Comparator.comparing(SyncopeCoreLoader::getOrder).reversed()).\n+                forEachOrdered(loader -> {\n+                    String loaderName = AopUtils.getTargetClass(loader).getName();\n+\n+                    LOG.debug(\"[{}#{}] Starting dispose\", loaderName, loader.getOrder());\n+\n+                    domainHolder.getDomains().forEach((domain, datasource) -> {\n+                        LOG.debug(\"[{}] Starting dispose on domain '{}'\", loaderName, domain);\n+                        loader.unload(domain);\n+                        LOG.debug(\"[{}] Dispose completed on domain '{}'\", loaderName, domain);\n+                    });\n+\n+                    loader.unload();\n+\n+                    LOG.debug(\"[{}] Dispose completed\", loaderName);\n+                });\n+\n+        super.onApplicationEvent(event);\n+    }\n+}"},{"sha":"5363b63b1408a61a0602390f979bac8dd8e52f66","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/TaskExecutorUnloader.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FTaskExecutorUnloader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FTaskExecutorUnloader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2FTaskExecutorUnloader.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.starter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.ListableBeanFactory;\n+import org.springframework.scheduling.concurrent.ExecutorConfigurationSupport;\n+\n+public class TaskExecutorUnloader implements SyncopeCoreLoader {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(TaskExecutorUnloader.class);\n+\n+    protected final ListableBeanFactory beanFactory;\n+\n+    protected final Map<String, ExecutorConfigurationSupport> tptes = new HashMap<>();\n+\n+    public TaskExecutorUnloader(final ListableBeanFactory beanFactory) {\n+        this.beanFactory = beanFactory;\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return Integer.MIN_VALUE;\n+    }\n+\n+    @Override\n+    public void load() {\n+        tptes.putAll(beanFactory.getBeansOfType(ExecutorConfigurationSupport.class));\n+    }\n+\n+    @Override\n+    public void unload() {\n+        tptes.forEach((name, tpte) -> {\n+            LOG.info(\"Shutting down ThreadPoolTaskExecutor {}...\", name);\n+            try {\n+                tpte.shutdown();\n+\n+                LOG.info(\"Successfully shut down ThreadPoolTaskExecutor {}\", name);\n+            } catch (Exception e) {\n+                LOG.error(\"While shutting down ThreadPoolTaskExecutor {}\", name, e);\n+            }\n+        });\n+    }\n+}"},{"sha":"bee222e60d2ce3c7e08452b3de7ef96a22e7b494","filename":"core/starter/src/main/resources/core.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fcore.properties?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -34,6 +34,9 @@ management.endpoint.health.show-details=ALWAYS\n \n service.discovery.address=http://localhost:8080/syncope/rest/\n \n+server.shutdown=graceful\n+spring.lifecycle.timeout-per-shutdown-phase=30s\n+\n ###############\n # Persistence #\n ###############"},{"sha":"5651f9d534eb1029563177b4e105fbd27fac1859","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngine.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngine.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngine.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngine.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -58,7 +58,7 @@ public String getName() {\n \n     @Override\n     public void close() {\n-        engines.get(AuthContextUtils.getDomain()).close();\n+        engines.values().forEach(ProcessEngine::close);\n     }\n \n     @Override"},{"sha":"25ae72e078a6aafef39e79e34a13075b29846d5c","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import javax.annotation.PreDestroy;\n import javax.sql.DataSource;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n@@ -33,7 +34,6 @@\n import org.flowable.spring.SpringProcessEngineConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.DisposableBean;\n import org.springframework.beans.factory.FactoryBean;\n import org.springframework.context.ApplicationContext;\n import org.springframework.transaction.PlatformTransactionManager;\n@@ -42,8 +42,7 @@\n  * Spring factory for {@link DomainProcessEngine} which takes the provided {@link SpringProcessEngineConfiguration} as\n  * template for each of the configured Syncope domains.\n  */\n-public class DomainProcessEngineFactoryBean\n-        implements FactoryBean<DomainProcessEngine>, DisposableBean, SyncopeCoreLoader {\n+public class DomainProcessEngineFactoryBean implements FactoryBean<DomainProcessEngine>, SyncopeCoreLoader {\n \n     private static final Logger LOG = LoggerFactory.getLogger(DomainProcessEngineFactoryBean.class);\n \n@@ -120,8 +119,8 @@ public boolean isSingleton() {\n         return true;\n     }\n \n-    @Override\n-    public void destroy() throws Exception {\n+    @PreDestroy\n+    public void preDestroy() {\n         if (engine != null) {\n             engine.close();\n         }"},{"sha":"3926b090e6f463f22d89e916cdc829bbe9439061","filename":"fit/core-reference/src/main/resources/core-embedded.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fcore-embedded.properties?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -63,6 +63,7 @@ persistence.domain[1].adminCipherAlgorithm=SHA\n \n provisioning.quartz.delegate=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n provisioning.quartz.sql=tables_h2.sql\n+provisioning.quartz.waitForJobsToCompleteOnShutdown=false\n \n provisioning.connIdLocation=${connid.location},\\\n connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}"},{"sha":"a33fe6e8e0a726d9ed79a906b8d920506de51b0a","filename":"pom.xml","status":"modified","additions":12,"deletions":22,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -418,8 +418,6 @@ under the License.\n \n     <jasypt.version>1.9.3</jasypt.version>\n \n-    <quartz.version>2.3.2</quartz.version>\n-\n     <cocoon.version>3.0.0-alpha-3</cocoon.version>\n \n     <groovy.version>4.0.1</groovy.version>\n@@ -918,6 +916,18 @@ under the License.\n         </exclusions>\n       </dependency>\n \n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-quartz</artifactId>\n+        <version>${spring-boot.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-logging</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n+\n       <dependency>\n         <groupId>org.springframework.boot</groupId>\n         <artifactId>spring-boot-starter-logging</artifactId>\n@@ -1158,26 +1168,6 @@ under the License.\n         <version>${jasypt.version}</version>\n       </dependency>\n \n-      <dependency>\n-        <groupId>org.quartz-scheduler</groupId>\n-        <artifactId>quartz</artifactId>\n-        <version>${quartz.version}</version>\n-        <exclusions>\n-          <exclusion>\n-            <groupId>com.zaxxer</groupId>\n-            <artifactId>HikariCP-java7</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.mchange</groupId>\n-            <artifactId>c3p0</artifactId>\n-          </exclusion>\n-          <exclusion>\n-            <groupId>com.mchange</groupId>\n-            <artifactId>mchange-commons-java</artifactId>\n-          </exclusion>\n-        </exclusions>\n-      </dependency>\n-\n       <dependency>\n         <groupId>org.apache.cocoon.sax</groupId>\n         <artifactId>cocoon-sax</artifactId>"},{"sha":"1e42d3efbc4dc8732dc9e1ce729844bb2a0039fb","filename":"sra/src/main/resources/sra.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -27,6 +27,9 @@ spring.cloud.discovery.client.health-indicator.enabled=false\n \n service.discovery.address=http://localhost:8080/\n \n+server.shutdown=graceful\n+spring.lifecycle.timeout-per-shutdown-phase=30s\n+\n logging.config=classpath:log4j2.xml\n \n sra.anonymousUser=${anonymousUser}"},{"sha":"bd29731b54e35534800154743f0bade57434a20c","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/553d9c6618bf844eba80135c202abd188f207431/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/553d9c6618bf844eba80135c202abd188f207431/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=553d9c6618bf844eba80135c202abd188f207431","patch":"@@ -58,6 +58,9 @@ spring.main.lazy-initialization=false\n \n service.discovery.address=http://localhost:8080/syncope-wa/\n \n+server.shutdown=graceful\n+spring.lifecycle.timeout-per-shutdown-phase=30s\n+\n wa.anonymousUser=${anonymousUser}\n wa.anonymousKey=${anonymousKey}\n "}]}