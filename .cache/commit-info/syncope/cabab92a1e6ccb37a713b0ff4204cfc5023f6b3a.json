{"sha":"cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNhYmFiOTJhMWU2Y2NiMzdhNzEzYjBmZjQyMDRjZmM1MDIzZjZiM2E=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-03-03T09:52:54Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-03-03T09:52:54Z"},"message":"(Fixes isse #85)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246802 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd61f102c1cd1ac551d843e2b0b5aba97a00770a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cd61f102c1cd1ac551d843e2b0b5aba97a00770a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/comments","author":null,"committer":null,"parents":[{"sha":"494e8a3e6c614ce8c3061048c159152bb5e4bee5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/494e8a3e6c614ce8c3061048c159152bb5e4bee5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/494e8a3e6c614ce8c3061048c159152bb5e4bee5"}],"stats":{"total":1335,"additions":1027,"deletions":308},"files":[{"sha":"3b11ffdbe929f89aa3b2ef8f893d4a8ba021fe47","filename":"client/src/main/java/org/syncope/client/search/PaginatedUserContainer.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedUserContainer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedUserContainer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FPaginatedUserContainer.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -18,7 +18,7 @@\n import org.syncope.client.AbstractBaseBean;\n import org.syncope.client.to.UserTO;\n \n-public class PaginatedResult extends AbstractBaseBean {\n+public class PaginatedUserContainer extends AbstractBaseBean {\n \n     private List<UserTO> records;\n ","previous_filename":"client/src/main/java/org/syncope/client/search/PaginatedResult.java"},{"sha":"4b4d6b8505f6833e52e76054b7c9b0150821f050","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -26,7 +26,9 @@ public enum EntityViolationType {\n     InvalidSchema(\n     \"org.syncope.core.validation.attrvalue.invalidSchema\"),\n     InvalidValueList(\n-    \"org.syncope.core.validation.attr.invalidValueList\");\n+    \"org.syncope.core.validation.attr.invalidValueList\"),\n+    InvalidEntitlementName(\n+    \"org.syncope.core.validation.entitlement.invalidName\");\n \n     private String message;\n "},{"sha":"2eed2a77d82ac15f86a0e7d346805af5f11f3351","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -19,6 +19,12 @@ public enum SyncopeClientExceptionType {\n     Deadlock(\n     \"Syncope.Deadlock\",\n     \"\"),\n+    DuplicateUniqueValue(\n+    \"Syncope.DuplicateUniqueValue\",\n+    \"Syncope.DuplicateUniqueValue.name\"),\n+    GenericPersistence(\n+    \"Syncope.GenericPersistence\",\n+    \"Syncope.GenericPersistence.cause\"),\n     InvalidPassword(\n     \"Syncope.InvalidPassword\",\n     \"Syncope.InvalidPassword.reason\"),\n@@ -37,12 +43,6 @@ public enum SyncopeClientExceptionType {\n     InvalidTaskExecutionReport(\n     \"Syncope.InvalidTaskExecutionReport\",\n     \"Syncope.InvalidTaskExecutionReport.element\"),\n-    DuplicateUniqueValue(\n-    \"Syncope.DuplicateUniqueValue\",\n-    \"Syncope.DuplicateUniqueValue.name\"),\n-    GenericPersistence(\n-    \"Syncope.GenericPersistence\",\n-    \"Syncope.GenericPersistence.cause\"),\n     InvalidSchemaMapping(\n     \"Syncope.InvalidSchemaMapping\",\n     \"\"),\n@@ -64,6 +64,9 @@ public enum SyncopeClientExceptionType {\n     RequiredValuesMissing(\n     \"Syncope.RequiredValuesMissing\",\n     \"Syncope.RequiredValuesMissing.attributeName\"),\n+    UnauthorizedRole(\n+    \"Syncope.UnauthorizedRole\",\n+    \"Syncope.UnauthorizedRole.id\"),\n     Unknown(\n     \"Syncope.Unknown\",\n     \"\"),"},{"sha":"78f98ac53058e80ed223ec275b624c4a5ad45a2c","filename":"console/src/main/java/org/syncope/console/SyncopeApplication.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -22,12 +22,12 @@\n import org.apache.wicket.RestartResponseAtInterceptPageException;\n import org.apache.wicket.Session;\n import org.apache.wicket.authorization.IUnauthorizedComponentInstantiationListener;\n+import org.apache.wicket.authorization.UnauthorizedInstantiationException;\n import org.apache.wicket.authorization.strategies.role.IRoleCheckingStrategy;\n import org.apache.wicket.authorization.strategies.role.RoleAuthorizationStrategy;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n-import org.apache.wicket.protocol.http.PageExpiredException;\n import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.protocol.http.WebRequest;\n import org.apache.wicket.protocol.http.WebResponse;\n@@ -176,7 +176,7 @@ public void onUnauthorizedInstantiation(final Component component) {\n         SyncopeSession.get().invalidate();\n \n         if (component instanceof Page) {\n-            throw new PageExpiredException(component.toString());\n+            throw new UnauthorizedInstantiationException(component.getClass());\n         }\n \n         throw new RestartResponseAtInterceptPageException(Login.class);"},{"sha":"67fe48d9a15bbd7d0d853b7bc9f083453af9da1e","filename":"console/src/main/java/org/syncope/console/SyncopeRequestCycle.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeRequestCycle.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeRequestCycle.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeRequestCycle.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -18,13 +18,13 @@\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.Response;\n import org.apache.wicket.authorization.UnauthorizedInstantiationException;\n-import org.apache.wicket.markup.html.pages.AccessDeniedPage;\n import org.apache.wicket.markup.html.pages.ExceptionErrorPage;\n import org.apache.wicket.model.StringResourceModel;\n import org.apache.wicket.protocol.http.PageExpiredException;\n import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.protocol.http.WebRequest;\n import org.apache.wicket.protocol.http.WebRequestCycle;\n+import org.springframework.web.client.HttpClientErrorException;\n import org.springframework.web.client.RestClientException;\n import org.syncope.console.pages.ErrorPage;\n \n@@ -50,41 +50,43 @@ public SyncopeRequestCycle(final WebApplication application,\n     public final Page onRuntimeException(final Page cause,\n             final RuntimeException e) {\n \n-        if (e instanceof UnauthorizedInstantiationException) {\n-            return new AccessDeniedPage();\n-        }\n+        Page errorPage;\n+        PageParameters errorParameters = new PageParameters();\n+        errorParameters.add(\"errorTitle\",\n+                new StringResourceModel(\"alert\", null).getString());\n \n-        if (e instanceof PageExpiredException\n-                || !((SyncopeSession) getSession()).isAuthenticated()) {\n+        if (e instanceof UnauthorizedInstantiationException) {\n+            errorParameters.add(\"errorMessage\", new StringResourceModel(\n+                    \"unauthorizedInstantiationException\", null).getString());\n \n-            PageParameters errorParameters = new PageParameters();\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e instanceof HttpClientErrorException) {\n+            errorParameters.add(\"errorMessage\",\n+                    new StringResourceModel(\"httpClientException\", null).\n+                    getString());\n \n-            errorParameters.add(\"errorTitle\",\n-                    new StringResourceModel(\"alert\", null).getString());\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e instanceof PageExpiredException\n+                || !((SyncopeSession) getSession()).isAuthenticated()) {\n \n             errorParameters.add(\"errorMessage\",\n                     new StringResourceModel(\"pageExpiredException\", null).\n                     getString());\n \n-            return new ErrorPage(errorParameters);\n-        }\n-\n-        if (e.getCause() != null && e.getCause().getCause() != null\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e.getCause() != null && e.getCause().getCause() != null\n                 && e.getCause().getCause() instanceof RestClientException) {\n \n-            PageParameters errorParameters = new PageParameters();\n-\n-            errorParameters.add(\"errorTitle\",\n-                    new StringResourceModel(\"alert\", null).getString());\n-\n             errorParameters.add(\"errorMessage\",\n                     new StringResourceModel(\"restClientException\", null).\n                     getString());\n \n-            return new ErrorPage(errorParameters);\n+            errorPage = new ErrorPage(errorParameters);\n+        } else {\n+            // redirect to default Wicket error page\n+            errorPage = new ExceptionErrorPage(e, cause);\n         }\n \n-        //Redirect to default Wicket error page\n-        return new ExceptionErrorPage(e, cause);\n+        return errorPage;\n     }\n }"},{"sha":"3c72e78a843f95b5af9f38e09e6d570e5e1da640","filename":"console/src/main/java/org/syncope/console/pages/ErrorPage.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FErrorPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FErrorPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FErrorPage.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -24,12 +24,12 @@\n  */\n public class ErrorPage extends BasePage {\n \n-    public ErrorPage(PageParameters parameters) {\n+    public ErrorPage(final PageParameters parameters) {\n         super(parameters);\n-        \n-        add(new Label(\"errorTitle\",new Model<String>(\n+\n+        add(new Label(\"errorTitle\", new Model<String>(\n                 parameters.getString(\"errorTitle\"))));\n-        add(new Label(\"errorMessage\",new Model<String>(\n+        add(new Label(\"errorMessage\", new Model<String>(\n                 parameters.getString(\"errorMessage\"))));\n \n         add(new BookmarkablePageLink(\"home\", getApplication().getHomePage()));"},{"sha":"d12fc907de259050656a662ee446604627235091","filename":"console/src/main/java/org/syncope/console/pages/UserModalPage.java","status":"modified","additions":2,"deletions":13,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -352,9 +352,6 @@ public void onComponentTag(final Component component,\n             @Override\n             protected void onSubmit(AjaxRequestTarget target, Form form) {\n                 UserTO userTO = (UserTO) form.getDefaultModelObject();\n-\n-                boolean res = false;\n-\n                 try {\n                     userTO.setResources(getResourcesSet(resourcesPalette.\n                             getModelCollection()));\n@@ -368,20 +365,12 @@ protected void onSubmit(AjaxRequestTarget target, Form form) {\n \n                         //Update user just if it is changed\n                         if (userMod != null) {\n-                            res = userRestClient.updateUser(userMod);\n-                            if (!res) {\n-                                error(getString(\"error_updating\"));\n-                            }\n-\n+                            userRestClient.updateUser(userMod);\n                         }\n-\n                     }\n \n-                    Users callerPage = (Users) basePage;\n-                    callerPage.setOperationResult(true);\n-\n+                    ((Users) basePage).setOperationResult(true);\n                     window.close(target);\n-\n                 } catch (SyncopeClientCompositeErrorException e) {\n                     LOG.error(\"While creating or updating user\", e);\n                     error(getString(\"error\") + \":\" + e.getMessage());"},{"sha":"886c838f618ecbacf8c5a15708faf631c75d7e2f","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -49,7 +49,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n+import org.syncope.client.search.PaginatedUserContainer;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.UserTO;\n@@ -153,11 +153,11 @@ public class Users extends BasePage {\n \n     private NodeCond nodeCond;\n \n-    private PaginatedResult paginatedUsers;\n+    private PaginatedUserContainer paginatedUsers;\n \n     private Boolean firstLoad = Boolean.TRUE;\n \n-    private PaginatedResult paginatedSearchUsers;\n+    private PaginatedUserContainer paginatedSearchUsers;\n \n     private ListView navigation;\n \n@@ -1269,9 +1269,9 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         add(paginatorSearchForm);\n     }\n \n-    public PaginatedResult getPaginatedUsers(int page, int size) {\n+    public PaginatedUserContainer getPaginatedUsers(int page, int size) {\n \n-        PaginatedResult paginatedResult =\n+        PaginatedUserContainer paginatedResult =\n                 userRestClient.getPaginatedUser(page, size);\n \n         return paginatedResult;"},{"sha":"a86131659cd4ce55fdac2b13276d8b31d2dbb89d","filename":"console/src/main/java/org/syncope/console/rest/UserRestClient.java","status":"modified","additions":13,"deletions":18,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -19,7 +19,7 @@\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n+import org.syncope.client.search.PaginatedUserContainer;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n@@ -43,11 +43,11 @@ public List<UserTO> getAllUsers() {\n     /**\n      * Create a new user and start off the workflow.\n      * @param userTO instance\n+     * @throws SyncopeClientCompositeErrorException\n      */\n-    public void createUser(UserTO userTO)\n+    public void createUser(final UserTO userTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        // Create user\n         restTemplate.postForObject(baseURL\n                 + \"user/create\", userTO, UserTO.class);\n     }\n@@ -57,16 +57,11 @@ public void createUser(UserTO userTO)\n      * @param userTO\n      * @return true is the opertion ends succesfully, false otherwise\n      */\n-    public boolean updateUser(UserMod userModTO)\n+    public void updateUser(UserMod userModTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        UserTO newUserTO = null;\n-\n-        newUserTO = restTemplate.postForObject(\n-                baseURL\n-                + \"user/update\", userModTO, UserTO.class);\n-\n-        return userModTO.getId() == newUserTO.getId();\n+        restTemplate.postForObject(baseURL + \"user/update\",\n+                userModTO, UserTO.class);\n     }\n \n     public void deleteUser(String id) {\n@@ -109,32 +104,32 @@ public List<UserTO> searchUsers(NodeCond nodeSearchCondition)\n      * @param userTO\n      * @return UserTOs\n      */\n-    public List<UserTO> paginatedSearchUsers(NodeCond nodeSearchCondition,\n+    public List<UserTO> paginatedSearchUsers(NodeCond nodeSearchCond,\n             int page, int size)\n             throws SyncopeClientCompositeErrorException {\n \n-        final PaginatedResult paginatedResult =\n+        final PaginatedUserContainer paginatedResult =\n                 restTemplate.postForObject(\n                 baseURL + \"user/paginatedSearch/{page}/{size}\",\n-                nodeSearchCondition, PaginatedResult.class, page, size);\n+                nodeSearchCond, PaginatedUserContainer.class, page, size);\n \n         return paginatedResult.getRecords();\n     }\n \n-    public PaginatedResult paginatedSearchUser(NodeCond nodeSearchCondition,\n+    public PaginatedUserContainer paginatedSearchUser(NodeCond nodeSearchCond,\n             int page, int size)\n             throws SyncopeClientCompositeErrorException {\n \n         return restTemplate.postForObject(\n                 baseURL + \"user/paginatedSearch/{page}/{size}\",\n-                nodeSearchCondition, PaginatedResult.class, page, size);\n+                nodeSearchCond, PaginatedUserContainer.class, page, size);\n     }\n \n-    public PaginatedResult getPaginatedUser(int page, int size)\n+    public PaginatedUserContainer getPaginatedUser(int page, int size)\n             throws SyncopeClientCompositeErrorException {\n \n         return restTemplate.getForObject(\n                 baseURL + \"user/paginatedList/{page}/{size}\",\n-                PaginatedResult.class, page, size);\n+                PaginatedUserContainer.class, page, size);\n     }\n }"},{"sha":"2fa4cf057923ae8ed1306fd0ea78f0d7be5f3e4c","filename":"console/src/main/resources/org/syncope/console/SyncopeApplication.properties","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.properties?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -1,4 +1,4 @@\n-#Men\\u00F9\n+#Men\\u00f9\n users=Users\n roles=Roles\n configuration=Configuration\n@@ -10,7 +10,10 @@ logout=Logout\n schema=Schema\n operation_succeded=Operation executed successfully\n operation_error=Error occurred during the requested operation\n-restClientException=Services connection error.\n-pageExpiredException=Session expired.Please login again.\n alert=Alert:\n confirmDelete=Do you really want to delete the selected item?\n+\n+unauthorizedInstantiationException=Missing authorization.\n+httpClientException=Missing authorization while contacting Syncope core.\n+restClientException=Error while contacting Syncope core.\n+pageExpiredException=Session expired: please login again.\n\\ No newline at end of file"},{"sha":"8c9d8841094f59af78688da08c6bd9fc84f5a9f1","filename":"console/src/main/resources/org/syncope/console/SyncopeApplication_it.properties","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication_it.properties?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -1,4 +1,4 @@\n-#Men\\u00F9\n+#Men\\u00f9\n users=Utenti\n roles=Ruoli\n configuration=Configurazione\n@@ -9,8 +9,11 @@ logout=Logout\n schema=Schema\n tasks=Task\n operation_succeded=Operazione eseguita con successo\n-operation_error=Attenzione si \\u00E8 verificato un errore durante l'esecuzione dell'operazione richiesta\n-restClientException=Errore di connessione ai servizi di Syncope.\n+operation_error=Attenzione si \\u00e8 verificato un errore durante l'esecuzione dell'operazione richiesta\n alert=Attenzione:\n confirmDelete=Vuoi davvero procedere con la cancellazione?\n-pageExpiredException=La sessione \\u00E8 scaduta.Per favore effettuare di nuovo il login.\n+\n+unauthorizedInstantiationException=Autorizzazione mancante.\n+httpClientException=Autorizzazione mancante durante la comunicazione con Syncope core.\n+restClientException=Errore durante la comunicazione con Syncope core.\n+pageExpiredException=Sessione scaduta: eseguire di nuovo l'accesso.\n\\ No newline at end of file"},{"sha":"9fbeac83f69f9cce81c1930633d6e9c02ce37110","filename":"console/src/main/resources/org/syncope/console/pages/WelcomePage.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -33,7 +33,7 @@\n             }\n         </style>\n     </head>\n-    <body>\n+    <body style=\"text-align:center\">\n         <div id=\"splash\">\n             <img src=\"img/logo.png\" alt=\"syncope\" title=\"syncope\" id=\"logo\" />\n             <h2><wicket:message key=\"welcome\"/> <strong><span wicket:id=\"userId\"/></strong>!</h2>"},{"sha":"c395856f78ac8863d1623ed82574b3de0caa7054","filename":"console/src/test/resources/content.xml","status":"modified","additions":56,"deletions":17,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -19,6 +19,7 @@\n     starting value for SyncopeUser.id is 1000 -->\n     <hibernate_sequences sequence_name=\"SEQ_SyncopeUser\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_SyncopeRole\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_Membership\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_SchemaMapping\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_ConnectorInstance\" sequence_next_hi_value=\"10\"/>\n     <hibernate_sequences sequence_name=\"SEQ_UAttr\" sequence_next_hi_value=\"1000\"/>\n@@ -27,14 +28,18 @@\n     <hibernate_sequences sequence_name=\"SEQ_UAttrValue\" sequence_next_hi_value=\"1000\"/>\n     <hibernate_sequences sequence_name=\"SEQ_RAttrValue\" sequence_next_hi_value=\"1000\"/>\n     <hibernate_sequences sequence_name=\"SEQ_MAttrValue\" sequence_next_hi_value=\"1000\"/>\n-\n+    <hibernate_sequences sequence_name=\"SEQ_JPACurrentStep\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_JPAHistoryStep\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_JPAPropertySetItem\" sequence_next_hi_value=\"10\"/>\n+    <hibernate_sequences sequence_name=\"SEQ_JPAWorkflowEntry\" sequence_next_hi_value=\"10\"/>\n+    \n     <SyncopeConf confKey=\"token.length\" confValue=\"256\"/>\n     <SyncopeConf confKey=\"token.expireTime\" confValue=\"60\"/>\n     <SyncopeConf confKey=\"token.encryption.key\" confValue=\"1abcdefghil3mnopqrstuvz2\"/>\n     <SyncopeConf confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n     <SyncopeConf confKey=\"optin.email.from\" confValue=\"syncope@googlecode.com\"/>\n     <SyncopeConf confKey=\"optin.email.subject\" confValue=\"Welcome to Syncope!\"/>\n-    <SyncopeConf confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n+    <SyncopeConf confKey=\"identityconnectors.bundle.directory\" confValue=\"/var/tmp/bundles\"/>\n                           \n     <SyncopeUser id=\"1\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n     <SyncopeUser id=\"2\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n@@ -137,26 +142,47 @@\n     <ConnectorInstance id=\"100\" displayName=\"ConnectorInstance100\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n-                       version=\"${project.version}\"\n-                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+                       version=\"0.4-SNAPSHOT\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"SYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"SYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"SYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"ASYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"ASYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"ASYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"RESOLVE\"/>\n \n     <ConnectorInstance id=\"101\" displayName=\"ConnectorInstance101\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n-                       version=\"${project.version}\"\n-                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+                       version=\"0.4-SNAPSHOT\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"SYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"SYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"SYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"ASYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"ASYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"ASYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"RESOLVE\"/>\n \n     <ConnectorInstance id=\"102\" displayName=\"ConnectorInstance102\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n-                       version=\"${project.version}\"\n-                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+                       version=\"0.4-SNAPSHOT\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"SYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"SYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"SYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"ASYNC_CREATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"ASYNC_UPDATE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"ASYNC_DELETE\"/>\n+    <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"RESOLVE\"/>\n \n     <ConnectorInstance id=\"103\" displayName=\"ConnectorInstance103\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n-                       version=\"${project.version}\"\n-                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+                       version=\"0.4-SNAPSHOT\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n \n     <TargetResource name=\"ws-target-resource-1\" connector_id=\"100\" forceMandatoryConstraint=\"1\" optionalPropagationMode=\"ASYNC\"/>\n     <TargetResource name=\"ws-target-resource-2\" connector_id=\"100\" forceMandatoryConstraint=\"1\" optionalPropagationMode=\"ASYNC\"/>\n@@ -257,13 +283,6 @@\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n     <TaskExecution id=\"1\" task_id=\"1\" workflowId=\"0\"/>\n \n-    <Entitlement name=\"base\"/>\n-    <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n-\n-    <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"1\"/>\n-    <SyncopeRole_Entitlement entitlements_name=\"advanced\" roles_id=\"1\"/>\n-    <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"2\"/>\n-\n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n \n     <RSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"icon\" />\n@@ -273,6 +292,8 @@\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n \n     <!-- Authentication and authorization -->\n+    <Entitlement name=\"base\"/>\n+    <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n     <Entitlement name=\"SCHEMA_LIST\"/>\n     <Entitlement name=\"SCHEMA_CREATE\"/>\n     <Entitlement name=\"SCHEMA_READ\"/>\n@@ -311,6 +332,24 @@\n     <Entitlement name=\"TASK_DELETE\"/>\n     <Entitlement name=\"LOG_LIST\"/>\n     <Entitlement name=\"LOG_SET_LEVEL\"/>\n+    <Entitlement name=\"ROLE_1\"/>\n+    <Entitlement name=\"ROLE_2\"/>\n+    <Entitlement name=\"ROLE_3\"/>\n+    <Entitlement name=\"ROLE_4\"/>\n+    <Entitlement name=\"ROLE_5\"/>\n+    <Entitlement name=\"ROLE_6\"/>\n+    <Entitlement name=\"ROLE_7\"/>\n+    <Entitlement name=\"ROLE_8\"/>\n \n+    <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"1\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"advanced\" roles_id=\"1\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"2\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"SCHEMA_READ\" roles_id=\"8\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"ROLE_LIST\" roles_id=\"8\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"USER_READ\" roles_id=\"2\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"USER_LIST\" roles_id=\"2\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"USER_READ\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"USER_LIST\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"ROLE_8\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"ROLE_1\" roles_id=\"7\"/>\n </dataset>"},{"sha":"e17bc0e3c5bae587924f3cd602b72f8ca7462dab","filename":"core/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -268,7 +268,7 @@\n     </dependencies>\n \n     <build>\n-        <finalName>${parent.artifactId}</finalName>\n+        <finalName>${project.parent.artifactId}</finalName>\n \n         <plugins>\n "},{"sha":"6202bf1f7786b24a71b98570e0bac9be8bb902be","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceLoader.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -35,7 +35,7 @@\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n-import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.util.ApplicationContextManager;\n \n /**\n  * Load identity connector instances on application startup."},{"sha":"0303af0ee424866380fd1aca6869050f298f39fd","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -21,7 +21,7 @@\n import org.syncope.core.persistence.validation.attrvalue.ParseException;\n import org.syncope.core.persistence.validation.attrvalue.InvalidAttrValueException;\n import org.syncope.core.persistence.validation.entity.AttrCheck;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n \n @MappedSuperclass\n @AttrCheck"},{"sha":"4bffbe0ee8bb7da6d20de824d4941e155346598a","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -27,7 +27,7 @@\n import org.apache.commons.jexl2.JexlException;\n import org.apache.commons.jexl2.MapContext;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.util.ApplicationContextManager;\n \n /**\n  * @see http://commons.apache.org/jexl/reference/index.html"},{"sha":"205d776c7c455f65519aff3703e3f8329ae18be5","filename":"core/src/main/java/org/syncope/core/persistence/beans/Entitlement.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -24,9 +24,11 @@\n import javax.persistence.ManyToMany;\n import org.hibernate.annotations.Cache;\n import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.syncope.core.persistence.validation.entity.EntitlementCheck;\n \n @Entity\n @Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n+@EntitlementCheck\n public class Entitlement extends AbstractBaseBean {\n \n     @Id"},{"sha":"79b42448f745d83b84ca5cdef8348d4aae3babbc","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -36,7 +36,7 @@\n import org.hibernate.annotations.Cascade;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.util.ApplicationContextManager;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.ResourceOperationType;\n "},{"sha":"625cedf89d96159aa3e163eea37fc53a624182c5","filename":"core/src/main/java/org/syncope/core/persistence/dao/EntitlementDAO.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -15,7 +15,9 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import javassist.NotFoundException;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface EntitlementDAO extends DAO {\n@@ -27,5 +29,9 @@ public interface EntitlementDAO extends DAO {\n     Entitlement save(Entitlement entitlement)\n             throws InvalidEntityException;\n \n+    Entitlement save(SyncopeRole role);\n+\n     void delete(String name);\n+\n+    void delete(Entitlement entitlement);\n }"},{"sha":"e46c56381de9a973807f858b3ef7f332ef3403f2","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -18,7 +18,7 @@\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n \n public interface SchemaDAO extends DAO {\n "},{"sha":"6aa7937ed958725f451ced0ad0d153dab3d25999","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserDAO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -15,6 +15,7 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import java.util.Set;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n@@ -30,11 +31,11 @@ public interface UserDAO extends DAO {\n     SyncopeUser findByAttrUniqueValue(String schemaName,\n             UAttrValue attrUniqueValue);\n \n-    List<SyncopeUser> findAll();\n+    List<SyncopeUser> findAll(Set<Long> adminRoles);\n \n-    List<SyncopeUser> findAll(int page, int itemsPerPage);\n+    List<SyncopeUser> findAll(Set<Long> adminRoles, int page, int itemsPerPage);\n \n-    Integer count();\n+    Integer count(Set<Long> adminRoles);\n \n     SyncopeUser save(SyncopeUser user)\n             throws InvalidEntityException;"},{"sha":"3984223f467a8faf602c0a8efae81e71fcd1964a","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserSearchDAO.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -15,26 +15,28 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import java.util.Set;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n+import org.syncope.client.search.PaginatedUserContainer;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n public interface UserSearchDAO extends DAO {\n \n     /**\n+     * @param adminRoles the set of admin roles owned by the caller\n      * @param searchCondition the search condition\n-     * @param searchCondition\n      * @return the list of users matchin the given search condition\n      */\n-    List<SyncopeUser> search(NodeCond searchCondition);\n+    List<SyncopeUser> search(Set<Long> adminRoles, NodeCond searchCondition);\n \n     /**\n+     * @param adminRoles the set of admin roles owned by the caller\n      * @param searchCondition the search condition\n      * @param page position of the first result, start from 1\n      * @param itemsPerPage number of results per page\n      * @param paginatedResult result to be sent to the REST caller\n      * @return the list of users matchin the given search condition\n      */\n-    List<SyncopeUser> search(NodeCond searchCondition,\n-            int page, int itemsPerPage, PaginatedResult paginatedResult);\n+    List<SyncopeUser> search(Set<Long> adminRoles, NodeCond searchCondition,\n+            int page, int itemsPerPage, PaginatedUserContainer paginatedResult);\n }"},{"sha":"12f5f9028b3283a1ce824d3de9501932082b1861","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"modified","additions":22,"deletions":12,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -16,23 +16,24 @@\n \n import java.util.List;\n import javax.persistence.Query;\n-import org.hibernate.Session;\n+import org.hibernate.CacheMode;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.util.EntitlementUtil;\n \n @Repository\n public class EntitlementDAOImpl extends AbstractDAOImpl\n         implements EntitlementDAO {\n \n     @Autowired\n-    private RoleDAO syncopeRoleDAO;\n+    private RoleDAO roleDAO;\n \n     @Override\n-    public Entitlement find(String name) {\n+    public Entitlement find(final String name) {\n         return entityManager.find(Entitlement.class, name);\n     }\n \n@@ -41,33 +42,42 @@ public List<Entitlement> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM Entitlement e\");\n         query.setHint(\"org.hibernate.cacheable\", true);\n-        query.setHint(\"org.hibernate.cacheRegion\",\n-                Entitlement.class.getName());\n+        query.setHint(\"org.hibernate.cacheMode\", CacheMode.REFRESH);\n \n         return query.getResultList();\n     }\n \n     @Override\n-    public Entitlement save(Entitlement entitlement) {\n+    public Entitlement save(final Entitlement entitlement) {\n         return entityManager.merge(entitlement);\n     }\n \n     @Override\n-    public void delete(String name) {\n+    public Entitlement save(final SyncopeRole role) {\n+        Entitlement roleEnt = new Entitlement();\n+        roleEnt.setName(EntitlementUtil.getEntitlementName(role.getId()));\n+        roleEnt.setDescription(\"Entitlement for managing role \" + role.getId());\n+\n+        return save(roleEnt);\n+    }\n+\n+    @Override\n+    public void delete(final String name) {\n         Entitlement entitlement = find(name);\n         if (entitlement == null) {\n             return;\n         }\n \n+        delete(entitlement);\n+    }\n+\n+    @Override\n+    public void delete(final Entitlement entitlement) {\n         for (SyncopeRole role : entitlement.getRoles()) {\n             role.removeEntitlement(entitlement);\n-            syncopeRoleDAO.save(role);\n+            roleDAO.save(role);\n         }\n \n         entityManager.remove(entitlement);\n-\n-        // Make empty Entitlement query cache\n-        ((Session) entityManager.getDelegate()).getSessionFactory().\n-                evictQueries(Entitlement.class.getName());\n     }\n }"},{"sha":"c92fa15ce378dd9ddcf2acd8916acebae602593a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -18,15 +18,21 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.util.EntitlementUtil;\n \n @Repository\n public class RoleDAOImpl extends AbstractDAOImpl implements RoleDAO {\n \n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n     @Override\n     public SyncopeRole find(final Long id) {\n         Query query = entityManager.createQuery(\n@@ -108,8 +114,11 @@ public List<Membership> getMemberships(final SyncopeRole role) {\n     }\n \n     @Override\n-    public SyncopeRole save(final SyncopeRole syncopeRole) {\n-        return entityManager.merge(syncopeRole);\n+    public SyncopeRole save(final SyncopeRole role) {\n+        final SyncopeRole savedRole = entityManager.merge(role);\n+        entitlementDAO.save(savedRole);\n+\n+        return savedRole;\n     }\n \n     @Override\n@@ -143,5 +152,7 @@ public void delete(final Long id) {\n \n         role.setParent(null);\n         entityManager.remove(role);\n+\n+        entitlementDAO.delete(EntitlementUtil.getEntitlementName(id));\n     }\n }"},{"sha":"ce29e84294417618f8a39503dd2617429309fa42","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -26,7 +26,7 @@\n import org.syncope.core.persistence.dao.AttrDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n \n @Repository\n public class SchemaDAOImpl extends AbstractDAOImpl"},{"sha":"894d0bfe64a256253fb279fbaed49c97b76107ae","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":70,"deletions":12,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -14,9 +14,11 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.lang.Long;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n@@ -45,7 +47,8 @@ public class UserDAOImpl extends AbstractDAOImpl\n     @Override\n     public SyncopeUser find(final Long id) {\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM SyncopeUser e WHERE e.id = :id\");\n+                \"SELECT e FROM \" + SyncopeUser.class.getSimpleName() + \" e \"\n+                + \"WHERE e.id = :id\");\n         query.setHint(\"org.hibernate.cacheable\", true);\n         query.setParameter(\"id\", id);\n \n@@ -59,7 +62,8 @@ public SyncopeUser find(final Long id) {\n     @Override\n     public SyncopeUser findByWorkflowId(final Long workflowId) {\n         Query query = entityManager.createQuery(\n-                \"SELECT e FROM SyncopeUser e WHERE e.workflowId = :workflowId\");\n+                \"SELECT e FROM \" + SyncopeUser.class.getSimpleName() + \" e \"\n+                + \"WHERE e.workflowId = :workflowId\");\n         query.setHint(\"org.hibernate.cacheable\", true);\n         query.setParameter(\"workflowId\", workflowId);\n \n@@ -137,33 +141,87 @@ public SyncopeUser findByAttrUniqueValue(final String schemaName,\n         return result.isEmpty() ? null : result.iterator().next();\n     }\n \n+    private StringBuilder getFindAllQuery(final Set<Long> adminRoles) {\n+        final StringBuilder queryString = new StringBuilder(\n+                \"SELECT id FROM SyncopeUser WHERE id NOT IN (\");\n+\n+        if (adminRoles == null || adminRoles.isEmpty()) {\n+            queryString.append(\"SELECT syncopeUser_id AS id FROM Membership\");\n+        } else {\n+            queryString.append(\"SELECT syncopeUser_id FROM Membership M1 \").\n+                    append(\"WHERE syncopeRole_id IN (\");\n+            queryString.append(\"SELECT syncopeRole_id FROM Membership M2 \").\n+                    append(\"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").\n+                    append(\"AND syncopeRole_id NOT IN (\");\n+\n+            queryString.append(\"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n+            boolean firstRole = true;\n+            for (Long adminRoleId : adminRoles) {\n+                if (firstRole) {\n+                    queryString.append(\" WHERE\");\n+                    firstRole = false;\n+                } else {\n+                    queryString.append(\" OR\");\n+                }\n+\n+                queryString.append(\" id=\").append(adminRoleId);\n+            }\n+\n+            queryString.append(\"))\");\n+        }\n+        queryString.append(\")\");\n+\n+        return queryString;\n+    }\n+\n     @Override\n-    public final List<SyncopeUser> findAll() {\n-        return findAll(-1, -1);\n+    public final List<SyncopeUser> findAll(final Set<Long> adminRoles) {\n+        return findAll(adminRoles, -1, -1);\n     }\n \n     @Override\n-    public final List<SyncopeUser> findAll(\n+    public final List<SyncopeUser> findAll(final Set<Long> adminRoles,\n             final int page, final int itemsPerPage) {\n \n-        final Query query = entityManager.createQuery(\n-                \"SELECT e FROM SyncopeUser e ORDER BY e.id\");\n+        final Query query = entityManager.createNativeQuery(\n+                getFindAllQuery(adminRoles).toString());\n \n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n \n         if (itemsPerPage > 0) {\n             query.setMaxResults(itemsPerPage);\n         }\n \n-        return query.getResultList();\n+        List<Number> userIds = new ArrayList<Number>();\n+        userIds.addAll(query.getResultList());\n+\n+        List<SyncopeUser> result =\n+                new ArrayList<SyncopeUser>(userIds.size());\n+\n+        SyncopeUser user;\n+        for (Number userId : userIds) {\n+            user = find(userId.longValue());\n+            if (user == null) {\n+                LOG.error(\"Could not find user with id {}, \"\n+                        + \"even though returned by the native query\", userId);\n+            } else {\n+                result.add(user);\n+            }\n+        }\n+\n+        return result;\n     }\n \n     @Override\n-    public final Integer count() {\n-        final Query query = entityManager.createQuery(\n-                \"SELECT count(e.id) FROM SyncopeUser e\");\n+    public final Integer count(final Set<Long> adminRoles) {\n+        StringBuilder queryString = getFindAllQuery(adminRoles);\n+        queryString.insert(0, \"SELECT COUNT(id) FROM (\");\n+        queryString.append(\") count_user_id\");\n+\n+        Query countQuery =\n+                entityManager.createNativeQuery(queryString.toString());\n \n-        return ((Long) query.getSingleResult()).intValue();\n+        return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n     @Override"},{"sha":"c6c8d40f56c6cec56b02e44047d7773725121ece","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":84,"deletions":12,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -32,7 +32,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n+import org.syncope.client.search.PaginatedUserContainer;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n import org.syncope.core.persistence.beans.user.USchema;\n@@ -63,15 +63,18 @@ public UserSearchDAOImpl() {\n     }\n \n     @Override\n-    public List<SyncopeUser> search(final NodeCond searchCondition) {\n-        return search(searchCondition, -1, -1, null);\n+    public List<SyncopeUser> search(final Set<Long> adminRoles,\n+            final NodeCond searchCondition) {\n+\n+        return search(adminRoles, searchCondition, -1, -1, null);\n     }\n \n     @Override\n-    public List<SyncopeUser> search(final NodeCond searchCondition,\n+    public List<SyncopeUser> search(final Set<Long> adminRoles,\n+            final NodeCond searchCondition,\n             final int page,\n             final int itemsPerPage,\n-            final PaginatedResult paginatedResult) {\n+            final PaginatedUserContainer paginatedResult) {\n \n         List<SyncopeUser> result;\n \n@@ -83,7 +86,7 @@ public List<SyncopeUser> search(final NodeCond searchCondition,\n         }\n \n         try {\n-            result = doSearch(searchCondition,\n+            result = doSearch(adminRoles, searchCondition,\n                     page, itemsPerPage, paginatedResult);\n         } catch (Throwable t) {\n             LOG.error(\"While searching users\", t);\n@@ -123,15 +126,81 @@ private void fillWithParameters(final Query query,\n         }\n     }\n \n-    private List<SyncopeUser> doSearch(final NodeCond nodeCond,\n+    private void addAdminRolesFilter(final Set<Long> adminRoles,\n+            final StringBuilder queryString) {\n+\n+        final StringBuilder adminRolesFilter = new StringBuilder();\n+\n+        adminRolesFilter.append(\"SELECT syncopeUser_id FROM Membership M1 \").\n+                append(\"WHERE syncopeRole_id IN (\");\n+        adminRolesFilter.append(\"SELECT syncopeRole_id FROM Membership M2 \").\n+                append(\"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").\n+                append(\"AND syncopeRole_id NOT IN (\");\n+\n+        adminRolesFilter.append(\"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n+        boolean firstRole = true;\n+        for (Long adminRoleId : adminRoles) {\n+            if (firstRole) {\n+                adminRolesFilter.append(\" WHERE\");\n+                firstRole = false;\n+            } else {\n+                adminRolesFilter.append(\" OR\");\n+            }\n+\n+            adminRolesFilter.append(\" id=\").append(adminRoleId);\n+        }\n+\n+        adminRolesFilter.append(\")))\");\n+\n+        queryString.insert(0, \"SELECT user_id FROM (\");\n+        queryString.append(\") WHERE user_id NOT IN (\");\n+        queryString.append(adminRolesFilter);\n+    }\n+\n+    private List<SyncopeUser> doSearch(final Set<Long> adminRoles,\n+            final NodeCond nodeCond,\n             final int page, final int itemsPerPage,\n-            final PaginatedResult paginatedResult) {\n+            final PaginatedUserContainer paginatedResult) {\n \n         Map<Integer, Object> parameters = Collections.synchronizedMap(\n                 new HashMap<Integer, Object>());\n \n+        // 1. get the query string from the search condition\n         StringBuilder queryString = getQuery(nodeCond, parameters);\n \n+        // 2. take into account administrative roles\n+        final StringBuilder adminRolesFilter = new StringBuilder();\n+        if (adminRoles == null || adminRoles.isEmpty()) {\n+            adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").\n+                    append(\"FROM Membership\");\n+        } else {\n+            adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").\n+                    append(\"FROM Membership M1 \").\n+                    append(\"WHERE syncopeRole_id IN (\");\n+            adminRolesFilter.append(\"SELECT syncopeRole_id FROM Membership M2 \").\n+                    append(\"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").\n+                    append(\"AND syncopeRole_id NOT IN (\");\n+            adminRolesFilter.append(\n+                    \"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n+            boolean firstRole = true;\n+            for (Long adminRoleId : adminRoles) {\n+                if (firstRole) {\n+                    adminRolesFilter.append(\" WHERE\");\n+                    firstRole = false;\n+                } else {\n+                    adminRolesFilter.append(\" OR\");\n+                }\n+\n+                adminRolesFilter.append(\" id=\").append(adminRoleId);\n+            }\n+            adminRolesFilter.append(\"))\");\n+        }\n+\n+        queryString.insert(0, \"SELECT user_id FROM (\");\n+        queryString.append(\") WHERE user_id NOT IN (\");\n+        queryString.append(adminRolesFilter).append(\")\");\n+\n+        // 3. prepare the search query\n         Query query = entityManager.createNativeQuery(queryString.toString());\n \n         // page starts from 1, while setFirtResult() starts from 0\n@@ -140,12 +209,14 @@ private List<SyncopeUser> doSearch(final NodeCond nodeCond,\n         if (itemsPerPage >= 0) {\n             query.setMaxResults(itemsPerPage);\n         }\n+\n+        // 4. populate the search query with parameter values\n         fillWithParameters(query, parameters);\n \n         LOG.debug(\"Native query\\n{}\\nwith parameters\\n{}\",\n                 queryString.toString(), parameters);\n \n-        // Avoiding duplicates (set)\n+        // 5. Prepare the result (avoiding duplicates - set)\n         Set<Number> userIds = new HashSet<Number>();\n         userIds.addAll(query.getResultList());\n \n@@ -163,6 +234,7 @@ private List<SyncopeUser> doSearch(final NodeCond nodeCond,\n             }\n         }\n \n+        // 6. (if it's the case, paginate)\n         if (paginatedResult != null) {\n             queryString.insert(0, \"SELECT COUNT(user_id) FROM (\");\n             queryString.append(\") count_user_id\");\n@@ -248,9 +320,9 @@ private String getQuery(final MembershipCond cond,\n             paramKey = setParameter(random, parameters, cond.getRoleId());\n             query.append(\"role_id=:param\").append(paramKey);\n         } else if (cond.getRoleName() != null) {\n-                paramKey = setParameter(random, parameters, cond.getRoleName());\n-                query.append(\"role_name=:param\").append(paramKey);\n-            }\n+            paramKey = setParameter(random, parameters, cond.getRoleName());\n+            query.append(\"role_name=:param\").append(paramKey);\n+        }\n \n         if (not) {\n             query.append(\")\");"},{"sha":"b986f7728f8aa0accf18e711854dbb9fe2507810","filename":"core/src/main/java/org/syncope/core/persistence/validation/attrvalue/EmailAddressValidator.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FEmailAddressValidator.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -25,17 +25,16 @@ public class EmailAddressValidator extends AbstractValidator {\n             \"^[\\\\w\\\\-]([\\\\.\\\\w])+[\\\\w]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,4}$\",\n             Pattern.CASE_INSENSITIVE);\n \n-    public EmailAddressValidator(AbstractSchema schema) {\n+    public EmailAddressValidator(final AbstractSchema schema) {\n         super(schema);\n     }\n \n     @Override\n-    protected void doValidate(AbstractAttrValue attributeValue)\n+    protected void doValidate(final AbstractAttrValue attributeValue)\n             throws InvalidAttrValueException {\n \n-        CharSequence emailAddress = attributeValue.getValue();\n-        Matcher matcher = EMAIL_PATTERN.matcher(emailAddress);\n-\n+        Matcher matcher = EMAIL_PATTERN.matcher(\n+                (CharSequence) attributeValue.getValue());\n         if (!matcher.matches()) {\n             throw new InvalidAttrValueException(attributeValue);\n         }"},{"sha":"75836b349339cd199a1885edf1522e1abd4559c1","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/EntitlementCheck.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementCheck.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -0,0 +1,38 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = EntitlementValidator.class)\n+@Documented\n+public @interface EntitlementCheck {\n+\n+    String message() default \"{org.syncope.core.validation.entitlement}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"b9145170eef03afb010a2ad80a721719e3d5308c","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/EntitlementValidator.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementValidator.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.types.EntityViolationType;\n+\n+public class EntitlementValidator extends AbstractValidator\n+        implements ConstraintValidator<EntitlementCheck, Entitlement> {\n+\n+    private static final Pattern ROLE_ENTITLEMENT_NAME_PATTERN =\n+            Pattern.compile(\"^ROLE_([\\\\d])+\");\n+\n+    @Override\n+    public void initialize(final EntitlementCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final Entitlement object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid = false;\n+\n+        if (object == null) {\n+            isValid = true;\n+        } else {\n+            if (object.getName() == null) {\n+                isValid = false;\n+            } else {\n+                Matcher matcher = ROLE_ENTITLEMENT_NAME_PATTERN.matcher(\n+                        object.getName());\n+                isValid = !matcher.matches();\n+            }\n+\n+            if (!isValid) {\n+                LOG.error(object + \" cannot have name \"\n+                        + \"starting by ROLE_\");\n+\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        EntityViolationType.InvalidEntitlementName.toString()).\n+                        addNode(object.toString()).\n+                        addConstraintViolation();\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"2742bc4925f6d6b2af0f817fa3e174b07d4db67a","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -15,7 +15,7 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.TypeMismatchException;"},{"sha":"88561e811221a860a12f33c4c53f5da2661851e0","filename":"core/src/main/java/org/syncope/core/rest/controller/AuthenticationController.java","status":"modified","additions":2,"deletions":14,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -15,17 +15,15 @@\n package org.syncope.core.rest.controller;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.core.GrantedAuthority;\n-import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n+import org.syncope.core.util.EntitlementUtil;\n \n @Controller\n @RequestMapping(\"/auth\")\n@@ -49,16 +47,6 @@ public List<String> listEntitlements() {\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/entitlements\")\n     public Set<String> getEntitlements() {\n-        Set<String> result = new HashSet<String>(\n-                SecurityContextHolder.getContext().\n-                getAuthentication().getAuthorities().size());\n-        for (GrantedAuthority authority :\n-                SecurityContextHolder.getContext().\n-                getAuthentication().getAuthorities()) {\n-\n-            result.add(authority.getAuthority());\n-        }\n-\n-        return result;\n+        return EntitlementUtil.getOwnedEntitlementNames();\n     }\n }"},{"sha":"940db56c4fd37fd4cc5595ccd59154939d438a6f","filename":"core/src/main/java/org/syncope/core/rest/controller/InvalidSearchConditionException.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FInvalidSearchConditionException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FInvalidSearchConditionException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FInvalidSearchConditionException.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -2,17 +2,17 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.rest.data;\n+package org.syncope.core.rest.controller;\n \n public class InvalidSearchConditionException extends Exception {\n }","previous_filename":"core/src/main/java/org/syncope/core/rest/data/InvalidSearchConditionException.java"},{"sha":"33b72b1b19511a275afbd2805f99d9bb8176d0ac","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":57,"deletions":18,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -16,6 +16,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -31,6 +32,7 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.rest.data.RoleDataBinder;\n+import org.syncope.core.util.EntitlementUtil;\n \n @Controller\n @RequestMapping(\"/role\")\n@@ -45,12 +47,21 @@ public class RoleController extends AbstractController {\n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n-    public RoleTO create(HttpServletResponse response,\n-            @RequestBody RoleTO roleTO)\n-            throws SyncopeClientCompositeErrorException {\n+    public RoleTO create(final HttpServletResponse response,\n+            final @RequestBody RoleTO roleTO)\n+            throws SyncopeClientCompositeErrorException,\n+            UnauthorizedRoleException {\n \n         LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        if (roleTO.getParent() != 0\n+                && !allowedRoleIds.contains(roleTO.getParent())) {\n+\n+            throw new UnauthorizedRoleException(roleTO.getParent());\n+        }\n+\n         SyncopeRole role;\n         try {\n             role = roleDataBinder.create(roleTO);\n@@ -69,26 +80,35 @@ public RoleTO create(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{roleId}\")\n     public void delete(@PathVariable(\"roleId\") Long roleId)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + roleId + \"'\");\n-\n             throw new NotFoundException(\"Role \" + String.valueOf(roleId));\n         }\n \n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        if (!allowedRoleIds.contains(role.getId())) {\n+            throw new UnauthorizedRoleException(role.getId());\n+        }\n+\n         roleDAO.delete(roleId);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     public List<RoleTO> list() {\n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+\n         List<SyncopeRole> roles = roleDAO.findAll();\n-        List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n+        List<RoleTO> roleTOs = new ArrayList<RoleTO>();\n         for (SyncopeRole role : roles) {\n-            roleTOs.add(roleDataBinder.getRoleTO(role));\n+            if (allowedRoleIds.contains(role.getId())) {\n+                roleTOs.add(roleDataBinder.getRoleTO(role));\n+            }\n         }\n \n         return roleTOs;\n@@ -98,15 +118,21 @@ public List<RoleTO> list() {\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/parent/{roleId}\")\n     public RoleTO parent(@PathVariable(\"roleId\") Long roleId)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + roleId + \"'\");\n-\n             throw new NotFoundException(\"Role \" + String.valueOf(roleId));\n         }\n \n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        if (role.getParent() != null\n+                && !allowedRoleIds.contains(role.getParent().getId())) {\n+\n+            throw new UnauthorizedRoleException(role.getParent().getId());\n+        }\n+\n         return role.getParent() == null ? null\n                 : roleDataBinder.getRoleTO(role.getParent());\n     }\n@@ -115,11 +141,15 @@ public RoleTO parent(@PathVariable(\"roleId\") Long roleId)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/children/{roleId}\")\n     public List<RoleTO> children(@PathVariable(\"roleId\") Long roleId) {\n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n \n         List<SyncopeRole> roles = roleDAO.findChildren(roleId);\n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n         for (SyncopeRole role : roles) {\n-            roleTOs.add(roleDataBinder.getRoleTO(role));\n+            if (allowedRoleIds.contains(role.getId())) {\n+                roleTOs.add(roleDataBinder.getRoleTO(role));\n+            }\n         }\n \n         return roleTOs;\n@@ -129,34 +159,43 @@ public List<RoleTO> children(@PathVariable(\"roleId\") Long roleId) {\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{roleId}\")\n     public RoleTO read(@PathVariable(\"roleId\") Long roleId)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + roleId + \"'\");\n-\n             throw new NotFoundException(String.valueOf(roleId));\n         }\n \n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        if (!allowedRoleIds.contains(role.getId())) {\n+\n+            throw new UnauthorizedRoleException(role.getId());\n+        }\n+\n         return roleDataBinder.getRoleTO(role);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public RoleTO update(@RequestBody RoleMod roleMod)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         LOG.debug(\"Role update called with parameter {}\", roleMod);\n \n         SyncopeRole role = roleDAO.find(roleMod.getId());\n         if (role == null) {\n-            LOG.error(\"Could not find role '\" + roleMod.getId() + \"'\");\n-\n             throw new NotFoundException(\n                     \"Role \" + String.valueOf(roleMod.getId()));\n         }\n \n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        if (!allowedRoleIds.contains(role.getId())) {\n+            throw new UnauthorizedRoleException(role.getId());\n+        }\n+\n         roleDataBinder.update(role, roleMod);\n         role = roleDAO.save(role);\n "},{"sha":"28b64cbdaf753aa372d263205824070346fbe8db","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -30,7 +30,7 @@\n import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n \n @Controller\n @RequestMapping(\"/schema\")"},{"sha":"3fcdccb0895dcac83a934ebd32bb3294429ab060","filename":"core/src/main/java/org/syncope/core/rest/controller/UnauthorizedRoleException.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUnauthorizedRoleException.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -0,0 +1,36 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class UnauthorizedRoleException extends Exception {\n+\n+    private final Set<Long> roleIds;\n+\n+    public UnauthorizedRoleException(final Set<Long> roleIds) {\n+        super(\"Missing entitlement for role(s) \" + roleIds);\n+        this.roleIds = roleIds;\n+    }\n+\n+    public UnauthorizedRoleException(final Long roleId) {\n+        this(Collections.singleton(roleId));\n+    }\n+\n+    public Set<Long> getRoleIds() {\n+        return roleIds;\n+    }\n+}"},{"sha":"61d0503d0aa1166538c10140dc8dec85f8b6f4f1","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":70,"deletions":42,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -46,7 +46,7 @@\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n+import org.syncope.client.search.PaginatedUserContainer;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -56,8 +56,8 @@\n import org.syncope.core.persistence.dao.UserSearchDAO;\n import org.syncope.core.persistence.propagation.PropagationManager;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n-import org.syncope.core.rest.data.InvalidSearchConditionException;\n import org.syncope.core.rest.data.UserDataBinder.CheckInResult;\n+import org.syncope.core.util.EntitlementUtil;\n import org.syncope.core.workflow.Constants;\n import org.syncope.core.workflow.WFUtils;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -85,19 +85,32 @@ public class UserController extends AbstractController {\n     private PropagationManager propagationManager;\n \n     private SyncopeUser getUserFromId(final Long userId)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeUser user = userDAO.find(userId);\n         if (user == null) {\n             throw new NotFoundException(\"User \" + userId);\n         }\n \n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        Set<Long> notAdminRoleIds = new HashSet<Long>();\n+        for (SyncopeRole role : user.getRoles()) {\n+            if (!adminRoleIds.contains(role.getId())) {\n+                notAdminRoleIds.add(role.getId());\n+            }\n+        }\n+        if (!notAdminRoleIds.isEmpty()) {\n+            throw new UnauthorizedRoleException(notAdminRoleIds);\n+        }\n+\n         return user;\n     }\n \n     private UserTO executeAction(UserTO userTO, String actionName,\n             Map<String, Object> moreInputs)\n-            throws WorkflowException, NotFoundException {\n+            throws WorkflowException, NotFoundException,\n+            UnauthorizedRoleException {\n \n         SyncopeUser user = getUserFromId(userTO.getId());\n \n@@ -119,10 +132,12 @@ private UserTO executeAction(UserTO userTO, String actionName,\n         return userDataBinder.getUserTO(user, workflow);\n     }\n \n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/activate\")\n     public UserTO activate(@RequestBody UserTO userTO)\n-            throws WorkflowException, NotFoundException {\n+            throws WorkflowException, NotFoundException,\n+            UnauthorizedRoleException {\n \n         return executeAction(userTO, Constants.ACTION_ACTIVATE,\n                 Collections.singletonMap(\n@@ -133,7 +148,8 @@ public UserTO activate(@RequestBody UserTO userTO)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/generateToken/{userId}\")\n     public UserTO generateToken(@PathVariable(\"userId\") Long userId)\n-            throws WorkflowException, NotFoundException {\n+            throws WorkflowException, NotFoundException,\n+            UnauthorizedRoleException {\n \n         UserTO userTO = new UserTO();\n         userTO.setId(userId);\n@@ -145,7 +161,8 @@ public UserTO generateToken(@PathVariable(\"userId\") Long userId)\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/verifyToken\")\n     public UserTO verifyToken(@RequestBody UserTO userTO)\n-            throws WorkflowException, NotFoundException {\n+            throws WorkflowException, NotFoundException,\n+            UnauthorizedRoleException {\n \n         return executeAction(userTO, Constants.ACTION_VERIFY_TOKEN,\n                 Collections.singletonMap(\n@@ -158,12 +175,9 @@ public UserTO verifyToken(@RequestBody UserTO userTO)\n     @Transactional(readOnly = true)\n     public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n             @RequestParam(\"password\") final String password)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = userDAO.find(userId);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n-        }\n+        SyncopeUser user = getUserFromId(userId);\n \n         SyncopeUser passwordUser = new SyncopeUser();\n         passwordUser.setPassword(password);\n@@ -177,7 +191,8 @@ public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n     value = \"/list\")\n     @Transactional(readOnly = true)\n     public List<UserTO> list() {\n-        List<SyncopeUser> users = userDAO.findAll();\n+        List<SyncopeUser> users = userDAO.findAll(EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames()));\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user, workflow));\n@@ -190,17 +205,20 @@ public List<UserTO> list() {\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/paginatedList/{page}/{size}\")\n     @Transactional(readOnly = true)\n-    public PaginatedResult paginatedList(\n+    public PaginatedUserContainer paginatedList(\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size) {\n \n-        PaginatedResult paginatedResult = new PaginatedResult();\n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+\n+        PaginatedUserContainer paginatedResult = new PaginatedUserContainer();\n         paginatedResult.setPageNumber(page);\n         paginatedResult.setPageSize(size);\n \n-        paginatedResult.setTotalRecords(userDAO.count());\n+        paginatedResult.setTotalRecords(userDAO.count(adminRoleIds));\n \n-        List<SyncopeUser> users = userDAO.findAll(page, size);\n+        List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user, workflow));\n@@ -217,12 +235,9 @@ public PaginatedResult paginatedList(\n     value = \"/read/{userId}\")\n     @Transactional(readOnly = true)\n     public UserTO read(@PathVariable(\"userId\") Long userId)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = userDAO.find(userId);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n-        }\n+        SyncopeUser user = getUserFromId(userId);\n \n         return userDataBinder.getUserTO(user, workflow);\n     }\n@@ -232,12 +247,9 @@ public UserTO read(@PathVariable(\"userId\") Long userId)\n     value = \"/actions/{userId}\")\n     @Transactional(readOnly = true)\n     public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = userDAO.find(userId);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n-        }\n+        SyncopeUser user = getUserFromId(userId);\n \n         WorkflowActionsTO result = new WorkflowActionsTO();\n \n@@ -266,7 +278,9 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n             throw new InvalidSearchConditionException();\n         }\n \n-        List<SyncopeUser> matchingUsers = userSearchDAO.search(searchCondition);\n+        List<SyncopeUser> matchingUsers = userSearchDAO.search(\n+                EntitlementUtil.getRoleIds(EntitlementUtil.\n+                getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user, workflow));\n@@ -279,15 +293,15 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/paginatedSearch/{page}/{size}\")\n     @Transactional(readOnly = true)\n-    public PaginatedResult paginatedSearch(\n+    public PaginatedUserContainer paginatedSearch(\n             @RequestBody final NodeCond searchCondition,\n             @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size)\n             throws InvalidSearchConditionException {\n \n         LOG.debug(\"User search called with condition {}\", searchCondition);\n \n-        PaginatedResult paginatedResult = new PaginatedResult();\n+        PaginatedUserContainer paginatedResult = new PaginatedUserContainer();\n         paginatedResult.setPageNumber(page);\n         paginatedResult.setPageSize(size);\n \n@@ -297,6 +311,8 @@ public PaginatedResult paginatedSearch(\n         }\n \n         final List<SyncopeUser> matchingUsers = userSearchDAO.search(\n+                EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames()),\n                 searchCondition, page, size, paginatedResult);\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n@@ -315,12 +331,9 @@ public PaginatedResult paginatedSearch(\n     value = \"/status/{userId}\")\n     @Transactional(readOnly = true)\n     public ModelAndView getStatus(@PathVariable(\"userId\") Long userId)\n-            throws NotFoundException {\n+            throws NotFoundException, UnauthorizedRoleException {\n \n-        SyncopeUser user = userDAO.find(userId);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userId);\n-        }\n+        SyncopeUser user = getUserFromId(userId);\n \n         List<Step> currentSteps = workflow.getCurrentSteps(\n                 user.getWorkflowId());\n@@ -372,7 +385,7 @@ public UserTO create(HttpServletResponse response,\n             required = false) Set<String> mandatoryResources)\n             throws SyncopeClientCompositeErrorException,\n             DataIntegrityViolationException, WorkflowException,\n-            PropagationException, NotFoundException {\n+            PropagationException, NotFoundException, UnauthorizedRoleException {\n \n         LOG.debug(\"User create called with parameters {}\\n{}\\n{}\",\n                 new Object[]{userTO, mandatoryRoles, mandatoryResources});\n@@ -408,6 +421,22 @@ public UserTO create(HttpServletResponse response,\n         // The user to be created\n         SyncopeUser user = new SyncopeUser();\n         userDataBinder.create(user, userTO);\n+\n+        // Check if roles requested for this user are allowed to be\n+        // administrated by the caller\n+        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(\n+                EntitlementUtil.getOwnedEntitlementNames());\n+        Set<Long> notAdminRoleIds = new HashSet<Long>();\n+        for (SyncopeRole role : user.getRoles()) {\n+            if (!adminRoleIds.contains(role.getId())) {\n+                notAdminRoleIds.add(role.getId());\n+            }\n+        }\n+        if (!notAdminRoleIds.isEmpty()) {\n+            throw new UnauthorizedRoleException(notAdminRoleIds);\n+        }\n+\n+        // Create the user\n         user = userDAO.save(user);\n \n         // Now that user is created locally, let's propagate\n@@ -458,15 +487,13 @@ public UserTO update(@RequestBody UserMod userMod,\n             required = false) Set<Long> mandatoryRoles,\n             @RequestParam(value = \"mandatoryResources\",\n             required = false) Set<String> mandatoryResources)\n-            throws NotFoundException, PropagationException, WorkflowException {\n+            throws NotFoundException, PropagationException, WorkflowException,\n+            UnauthorizedRoleException {\n \n         LOG.debug(\"User update called with parameters {}\\n{}\\n{}\",\n                 new Object[]{userMod, mandatoryRoles, mandatoryResources});\n \n-        SyncopeUser user = userDAO.find(userMod.getId());\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + userMod.getId());\n-        }\n+        SyncopeUser user = getUserFromId(userMod.getId());\n \n         // First of all, let's check if update is allowed\n         Map<String, Object> inputs = new HashMap<String, Object>();\n@@ -506,7 +533,8 @@ public void delete(@PathVariable(\"userId\") Long userId,\n             required = false) Set<Long> mandatoryRoles,\n             @RequestParam(value = \"mandatoryResources\",\n             required = false) Set<String> mandatoryResources)\n-            throws NotFoundException, WorkflowException, PropagationException {\n+            throws NotFoundException, WorkflowException, PropagationException,\n+            UnauthorizedRoleException {\n \n         SyncopeUser user = getUserFromId(userId);\n "},{"sha":"4a5380d9f5da02f603d7e5560291e39f14665614","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.core.rest.data;\n \n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;"},{"sha":"5ff4ad11a7cf8940c1d54980f48f03aef999b67b","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -15,7 +15,7 @@\n package org.syncope.core.rest.data;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.RoleMod;"},{"sha":"000886da7513dfb3bcd0ba11b0ac49bfef65d931","filename":"core/src/main/java/org/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -32,7 +32,7 @@\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component"},{"sha":"5deb16910824c3bde49e50444729c16fbd15e51e","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -14,7 +14,7 @@\n  */\n package org.syncope.core.rest.data;\n \n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import com.opensymphony.workflow.Workflow;\n import com.opensymphony.workflow.spi.Step;\n import java.util.HashSet;"},{"sha":"ec33dbbc6e42939dac7eddc6da2262d273e3b779","filename":"core/src/main/java/org/syncope/core/security/NullSecurityContextRepository.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FNullSecurityContextRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FNullSecurityContextRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FNullSecurityContextRepository.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -0,0 +1,48 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.security;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.web.context.HttpRequestResponseHolder;\n+import org.springframework.security.web.context.SecurityContextRepository;\n+\n+/**\n+ * To be used until switching to Spring Security 3.1 which provides a similar\n+ * class by default.\n+ */\n+public class NullSecurityContextRepository\n+        implements SecurityContextRepository {\n+\n+    @Override\n+    public final SecurityContext loadContext(\n+            final HttpRequestResponseHolder requestResponseHolder) {\n+\n+        return SecurityContextHolder.createEmptyContext();\n+    }\n+\n+    @Override\n+    public void saveContext(final SecurityContext context,\n+            final HttpServletRequest request,\n+            final HttpServletResponse response) {\n+    }\n+\n+    @Override\n+    public final boolean containsContext(final HttpServletRequest request) {\n+        return false;\n+    }\n+}"},{"sha":"b6cd0adfc8d27b69bacaf37c760edbd328f411a2","filename":"core/src/main/java/org/syncope/core/security/SyncopeUserDetailsService.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -28,6 +28,7 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.EntitlementDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n \n @Configurable\n@@ -36,6 +37,9 @@ public class SyncopeUserDetailsService implements UserDetailsService {\n     @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n@@ -53,7 +57,6 @@ public void setAdminUser(String adminUser) {\n     public UserDetails loadUserByUsername(final String username)\n             throws UsernameNotFoundException, DataAccessException {\n \n-        User result;\n         Set<GrantedAuthorityImpl> authorities =\n                 new HashSet<GrantedAuthorityImpl>();\n         if (adminUser.equals(username)) {\n@@ -76,7 +79,17 @@ public UserDetails loadUserByUsername(final String username)\n                         \"Could not find any user with id \" + id);\n             }\n \n-            for (SyncopeRole role : user.getRoles()) {\n+            // Give entitlements based on roles owned by user,\n+            // considering role inheritance as well\n+            Set<SyncopeRole> roles = user.getRoles();\n+            Set<Long> roleIds = new HashSet<Long>(roles.size());\n+            for (SyncopeRole role : roles) {\n+                roleIds.add(role.getId());\n+            }\n+            for (Long roleId : roleIds) {\n+                roles.addAll(roleDAO.findChildren(roleId));\n+            }\n+            for (SyncopeRole role : roles) {\n                 for (Entitlement entitlement : role.getEntitlements()) {\n                     authorities.add(new GrantedAuthorityImpl(\n                             entitlement.getName()));"},{"sha":"02d644243053f8eb568814eb07edebc57aab0958","filename":"core/src/main/java/org/syncope/core/util/ApplicationContextManager.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.util;\n+package org.syncope.core.util;\n \n import org.springframework.context.ConfigurableApplicationContext;\n ","previous_filename":"core/src/main/java/org/syncope/core/persistence/util/ApplicationContextManager.java"},{"sha":"286a938be9c77685907217bb7abd094edb9a283b","filename":"core/src/main/java/org/syncope/core/util/ApplicationContextProvider.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.util;\n+package org.syncope.core.util;\n \n import org.springframework.beans.BeansException;\n import org.springframework.context.ApplicationContext;","previous_filename":"core/src/main/java/org/syncope/core/persistence/util/ApplicationContextProvider.java"},{"sha":"28db877d20ce8bcc0cdda60ab9bb2d687f4639cb","filename":"core/src/main/java/org/syncope/core/util/AttributableUtil.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.util;\n+package org.syncope.core.util;\n \n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;","previous_filename":"core/src/main/java/org/syncope/core/persistence/util/AttributableUtil.java"},{"sha":"981531bcd6b2a709dfb24b2009ecff57f14eaaa8","filename":"core/src/main/java/org/syncope/core/util/EncryptionUtil.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEncryptionUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEncryptionUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEncryptionUtil.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.persistence.util;\n+package org.syncope.core.util;\n \n import javax.crypto.Cipher;\n import javax.crypto.SecretKey;","previous_filename":"core/src/main/java/org/syncope/core/persistence/util/EncryptionUtil.java"},{"sha":"98aec88122678f311a43797848055f2bc342f3df","filename":"core/src/main/java/org/syncope/core/util/EntitlementUtil.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.util;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.syncope.core.persistence.beans.Entitlement;\n+\n+public class EntitlementUtil {\n+\n+    private static final Pattern ROLE_ENTITLEMENT_NAME_PATTERN =\n+            Pattern.compile(\"^ROLE_([\\\\d])+\");\n+\n+    public static Set<String> getOwnedEntitlementNames() {\n+        Set<String> result = new HashSet<String>(\n+                SecurityContextHolder.getContext().\n+                getAuthentication().getAuthorities().size());\n+        for (GrantedAuthority authority :\n+                SecurityContextHolder.getContext().\n+                getAuthentication().getAuthorities()) {\n+\n+            result.add(authority.getAuthority());\n+        }\n+\n+        return result;\n+    }\n+\n+    public static String getEntitlementName(final Long roleId) {\n+        return \"ROLE_\" + roleId;\n+    }\n+\n+    public static boolean isRoleEntitlement(final String entitlementName) {\n+        return ROLE_ENTITLEMENT_NAME_PATTERN.matcher(entitlementName).matches();\n+    }\n+\n+    public static Long getRoleId(final String entitlementName) {\n+        Long result = null;\n+\n+        if (isRoleEntitlement(entitlementName)) {\n+            try {\n+                result = Long.valueOf(entitlementName.substring(\n+                        entitlementName.indexOf(\"_\") + 1));\n+            } catch (Throwable t) {\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public static Set<Long> getRoleIds(final Set<String> entitlements) {\n+        Set<Long> result = new HashSet<Long>();\n+\n+        Long roleId;\n+        for (String entitlement : entitlements) {\n+            if (isRoleEntitlement(entitlement)) {\n+                roleId = getRoleId(entitlement);\n+                if (roleId != null) {\n+                    result.add(roleId);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public static Set<Long> getRoleIds(final List<Entitlement> entitlements) {\n+        Set<String> names = new HashSet<String>(entitlements.size());\n+        for (Entitlement entitlement : entitlements) {\n+            names.add(entitlement.getName());\n+        }\n+        return getRoleIds(names);\n+    }\n+}"},{"sha":"fbb38d1fa8ace5cdddf0f9e7104902cbdbe9e110","filename":"core/src/main/java/org/syncope/core/workflow/OSWorkflowComponent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FOSWorkflowComponent.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -18,7 +18,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.syncope.core.persistence.util.ApplicationContextManager;\n+import org.syncope.core.util.ApplicationContextManager;\n \n public abstract class OSWorkflowComponent {\n "},{"sha":"a6945f6ebebed549cbf6bd7c020effeafaf2f1ba","filename":"core/src/main/java/org/syncope/core/workflow/StoreAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FStoreAttrValue.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -26,7 +26,7 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import org.syncope.types.SchemaType;\n \n public class StoreAttrValue extends OSWorkflowComponent"},{"sha":"7483848d082e5b4d3b2e6b0a21f414990e04aa82","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -25,7 +25,11 @@\n        http://www.springframework.org/schema/oxm/spring-oxm.xsd\">\n \n     <context:component-scan base-package=\"org.syncope.core.rest.controller\"/>\n-    \n+\n+    <bean id=\"adminUser\" class=\"java.lang.String\">\n+        <constructor-arg value=\"${adminUser}\"/>\n+    </bean>\n+\n     <bean id=\"jacksonObjectMapper\" class=\"org.syncope.core.rest.jackson.UnwrappedObjectMapper\"/>\n     \n     <bean id=\"mappingJacksonHttpMessageConverter\""},{"sha":"ee82eb4d6a3a11b7aea2975b793b7f80c26b9f4d","filename":"core/src/main/resources/securityContext.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -22,7 +22,9 @@\n \n     <security:global-method-security pre-post-annotations=\"enabled\"/>\n \n-    <security:http>\n+    <bean id=\"securityContextRepository\" class='org.syncope.core.security.NullSecurityContextRepository'/>\n+\n+    <security:http security-context-repository-ref=\"securityContextRepository\">\n         <security:http-basic/>\n         <security:intercept-url pattern=\"/**\"/>\n     </security:http>"},{"sha":"740c6dd7826a22838b01cdfeb41a021008fd456e","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -26,6 +26,6 @@\n         </property>\n     </bean>\n \n-    <bean class=\"org.syncope.core.persistence.util.ApplicationContextProvider\"/>\n+    <bean class=\"org.syncope.core.util.ApplicationContextProvider\"/>\n \n </beans>"},{"sha":"5c9ffdbf2b04eb2ab09a448d06bdeafc0dea65e8","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -1,9 +1,10 @@\n-<%@page isErrorPage=\"true\" contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n+<%@page isErrorPage=\"true\" session=\"false\" contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n <%@page import=\"org.hibernate.exception.ConstraintViolationException\"%>\n <%@page import=\"javax.persistence.PersistenceException\"%>\n <%@page import=\"org.springframework.dao.DataIntegrityViolationException\"%>\n <%@page import=\"org.hibernate.exception.LockAcquisitionException\"%>\n-<%@page import=\"org.syncope.core.rest.data.InvalidSearchConditionException\"%>\n+<%@page import=\"org.syncope.core.rest.controller.InvalidSearchConditionException\"%>\n+<%@page import=\"org.syncope.core.rest.controller.UnauthorizedRoleException\"%>\n <%@page import=\"org.syncope.core.persistence.dao.MissingConfKeyException\"%>\n <%@page import=\"org.syncope.client.validation.SyncopeClientException\"%>\n <%@page import=\"org.syncope.client.validation.SyncopeClientCompositeErrorException\"%>\n@@ -88,6 +89,18 @@\n                         getHeaderValue());\n \n                 statusCode = HttpServletResponse.SC_BAD_REQUEST;\n+            } else if (ex instanceof UnauthorizedRoleException) {\n+                response.setHeader(\n+                        SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n+                        SyncopeClientExceptionType.UnauthorizedRole.\n+                        getHeaderValue());\n+                for (Long roleId : ((UnauthorizedRoleException) ex).getRoleIds()) {\n+                    response.setHeader(\n+                            SyncopeClientExceptionType.UnauthorizedRole.\n+                            getElementHeaderName(), roleId.toString());\n+                }\n+\n+                statusCode = HttpServletResponse.SC_UNAUTHORIZED;\n             } else if (ex.getCause() instanceof LockAcquisitionException) {\n                 response.setHeader(\n                         SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,"},{"sha":"9bd50e75dcbe51e71acd41e54083e99719e2ab2e","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -27,7 +27,7 @@\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrUniqueValue;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import org.syncope.types.EntityViolationType;\n \n @Transactional"},{"sha":"632e579631d756b7e87730e5d6b8e61113e29215","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -34,8 +34,9 @@ public class EntitlementTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n+        // 40 real entitlements + 8 role entitlements\n         assertEquals(\"did not get expected number of entitlements \",\n-                40, list.size());\n+                48, list.size());\n     }\n \n     @Test"},{"sha":"9af440751649c675f59de4ad085ad54bb78e56f7","filename":"core/src/test/java/org/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -25,7 +25,7 @@\n import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.role.RAttr;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.SchemaType;\n "},{"sha":"8a55dbda63fa63f6f3604e2a601708f758ba9e0a","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":28,"deletions":9,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -46,6 +46,7 @@\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.util.EntitlementUtil;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n@@ -65,6 +66,9 @@ public class UserSearchTest {\n     @Autowired\n     private UserSearchDAO searchDAO;\n \n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n     @Autowired\n     private DataSource dataSource;\n \n@@ -153,7 +157,8 @@ public final void searchWithLikeCondition() {\n \n         assertTrue(cond.checkValidity());\n \n-        List<SyncopeUser> users = searchDAO.search(cond);\n+        List<SyncopeUser> users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -168,7 +173,8 @@ public final void searchWithNotCondition() {\n         final NodeCond cond = NodeCond.getNotLeafCond(usernameLeafCond);\n         assertTrue(cond.checkValidity());\n \n-        final List<SyncopeUser> users = searchDAO.search(cond);\n+        final List<SyncopeUser> users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n@@ -189,7 +195,8 @@ public final void searchByBoolean() {\n         final NodeCond cond = NodeCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.checkValidity());\n \n-        final List<SyncopeUser> users = searchDAO.search(cond);\n+        final List<SyncopeUser> users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n@@ -221,11 +228,15 @@ public final void searchByPageAndSize() {\n \n         assertTrue(cond.checkValidity());\n \n-        List<SyncopeUser> users = searchDAO.search(cond, 1, 2, null);\n+        List<SyncopeUser> users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                cond, 1, 2, null);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n-        users = searchDAO.search(cond, 2, 2, null);\n+        users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                cond, 2, 2, null);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n@@ -236,14 +247,18 @@ public final void searchByMembership() {\n         membershipCond.setRoleId(1L);\n \n         List<SyncopeUser> users =\n-                searchDAO.search(NodeCond.getLeafCond(membershipCond));\n+                searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                NodeCond.getLeafCond(membershipCond));\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n         membershipCond = new MembershipCond();\n         membershipCond.setRoleId(5L);\n \n-        users = searchDAO.search(NodeCond.getNotLeafCond(membershipCond));\n+        users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                NodeCond.getNotLeafCond(membershipCond));\n         assertNotNull(users);\n         assertEquals(3, users.size());\n     }\n@@ -255,7 +270,9 @@ public void searchByIsNull() {\n         coolLeafCond.setSchema(\"cool\");\n \n         List<SyncopeUser> users =\n-                searchDAO.search(NodeCond.getLeafCond(coolLeafCond));\n+                searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                NodeCond.getLeafCond(coolLeafCond));\n         assertNotNull(users);\n         assertEquals(3, users.size());\n \n@@ -264,7 +281,9 @@ public void searchByIsNull() {\n         coolLeafCond.setSchema(\"cool\");\n \n         users =\n-                searchDAO.search(NodeCond.getLeafCond(coolLeafCond));\n+                searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                NodeCond.getLeafCond(coolLeafCond));\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }"},{"sha":"8415ff83e9a3944c3402f28a2f3e7c9feaced76c","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -17,48 +17,58 @@\n import static org.junit.Assert.*;\n \n import java.util.List;\n+import java.util.Set;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n+import org.syncope.core.util.EntitlementUtil;\n \n @Transactional\n public class UserTest extends AbstractTest {\n \n     @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n     @Test\n     public final void findAll() {\n-        List<SyncopeUser> list = userDAO.findAll();\n+        List<SyncopeUser> list = userDAO.findAll(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()));\n         assertEquals(\"did not get expected number of users \", 4, list.size());\n     }\n \n     @Test\n     public final void count() {\n-        Integer count = userDAO.count();\n+        Integer count = userDAO.count(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()));\n         assertNotNull(count);\n         assertEquals(4, count.intValue());\n     }\n \n     @Test\n     public final void findAllByPageAndSize() {\n+        Set<Long> allRoleIds =\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll());\n+\n         // get first page\n-        List<SyncopeUser> list = userDAO.findAll(1, 2);\n+        List<SyncopeUser> list = userDAO.findAll(allRoleIds, 1, 2);\n         assertEquals(\"did not get expected number of users \", 2, list.size());\n \n         // get second page\n-        list = userDAO.findAll(2, 2);\n+        list = userDAO.findAll(allRoleIds, 2, 2);\n         assertEquals(\"did not get expected number of users \", 2, list.size());\n \n         // get second page with uncomplete set\n-        list = userDAO.findAll(2, 3);\n+        list = userDAO.findAll(allRoleIds, 2, 3);\n         assertEquals(\"did not get expected number of users \", 1, list.size());\n \n         // get unexistent page\n-        list = userDAO.findAll(3, 2);\n+        list = userDAO.findAll(allRoleIds, 3, 2);\n         assertEquals(\"did not get expected number of users \", 0, list.size());\n     }\n "},{"sha":"083ea7bacf0f48bf5cee9958933c3d3754bd7ee9","filename":"core/src/test/java/org/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -31,7 +31,7 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.AbstractTest;\n-import org.syncope.core.persistence.util.AttributableUtil;\n+import org.syncope.core.util.AttributableUtil;\n import org.syncope.types.SourceMappingType;\n \n @Transactional"},{"sha":"4704a96590c493acb6b501196bfb6864752161a4","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":125,"deletions":9,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -18,21 +18,25 @@\n \n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import org.apache.commons.httpclient.UsernamePasswordCredentials;\n import org.apache.commons.httpclient.auth.AuthScope;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.client.CommonsClientHttpRequestFactory;\n import org.springframework.web.client.HttpClientErrorException;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.UserTO;\n+import org.syncope.core.util.EntitlementUtil;\n import org.syncope.types.SchemaType;\n \n public class AuthenticationTestITCase extends AbstractTest {\n@@ -91,22 +95,36 @@ public void testEntitlements() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"1\", \"password\"));\n \n-        List<String> authEnts = Arrays.asList(\n-                restTemplate.getForObject(BASE_URL\n-                + \"auth/entitlements.json\", String[].class));\n+        String[] entsArray = restTemplate.getForObject(BASE_URL\n+                + \"auth/entitlements.json\", String[].class);\n+        Set<String> authEnts = new HashSet<String>(entsArray.length);\n+        authEnts.addAll(Arrays.asList(entsArray));\n \n-        List<String> dbEnts = new ArrayList<String>();\n+        // This call will return only the roles that the calling user\n+        // has right to administer\n+        List<RoleTO> roleTOs = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"role/list.json\", RoleTO[].class));\n+        assertNotNull(roleTOs);\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+\n+        Set<String> dbEnts = new HashSet<String>();\n         dbEnts.add(\"base\");\n         dbEnts.add(\"advanced\");\n         dbEnts.add(\"SCHEMA_READ\");\n-        assertEquals(dbEnts, authEnts);\n+        dbEnts.add(\"USER_READ\");\n+        dbEnts.add(\"USER_LIST\");\n+        dbEnts.add(\"ROLE_LIST\");\n+        for (RoleTO roleTO : roleTOs) {\n+            dbEnts.add(EntitlementUtil.getEntitlementName(roleTO.getId()));\n+        }\n \n-        // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n+        assertEquals(authEnts, dbEnts);\n     }\n \n     @Test\n-    public void testAuthorization() {\n+    public void testUserSchemaAuthorization() {\n         // 0. create a role that can only read schemas\n         RoleTO authRoleTO = new RoleTO();\n         authRoleTO.setName(\"authRole\");\n@@ -173,4 +191,102 @@ public void testAuthorization() {\n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n     }\n+\n+    @Test\n+    public void testUserRead() {\n+        UserTO userTO = getSampleTO(\"testuserread@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                Long.valueOf(userTO.getId()).toString(), \"password\"));\n+\n+        UserTO readUserTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n+        assertNotNull(readUserTO);\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\"2\", \"password\"));\n+\n+        HttpClientErrorException exception = null;\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n+        } catch (HttpClientErrorException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+        assertEquals(HttpStatus.UNAUTHORIZED, exception.getStatusCode());\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+    }\n+\n+    @Test\n+    public void testUserSearch() {\n+        UserTO userTO = getSampleTO(\"testusersearch@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                Long.valueOf(userTO.getId()).toString(), \"password\"));\n+\n+        AttributeCond isNullCond = new AttributeCond(\n+                AttributeCond.Type.ISNOTNULL);\n+        isNullCond.setSchema(\"loginDate\");\n+        NodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n+\n+        List<UserTO> matchedUsers = Arrays.asList(\n+                restTemplate.postForObject(BASE_URL + \"user/search\",\n+                searchCondition, UserTO[].class));\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.isEmpty());\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n+        for (UserTO user : matchedUsers) {\n+            userIds.add(user.getId());\n+        }\n+        assertTrue(userIds.contains(1L));\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\"2\", \"password\"));\n+\n+        matchedUsers = Arrays.asList(\n+                restTemplate.postForObject(BASE_URL + \"user/search\",\n+                searchCondition, UserTO[].class));\n+        assertNotNull(matchedUsers);\n+        userIds = new HashSet<Long>(matchedUsers.size());\n+        for (UserTO user : matchedUsers) {\n+            userIds.add(user.getId());\n+        }\n+        assertFalse(userIds.contains(1L));\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+    }\n }"},{"sha":"6b8da59087ec6f770a956b40f8acb352bd0246cb","filename":"core/src/test/java/org/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -41,7 +41,7 @@ public void createWithException() {\n         newRoleTO.addAttribute(attributeTO);\n \n         restTemplate.postForObject(BASE_URL + \"role/create\",\n-                                   newRoleTO, RoleTO.class);\n+                newRoleTO, RoleTO.class);\n     }\n \n     @Test\n@@ -55,7 +55,7 @@ public void create() {\n         icon.addValue(\"anIcon\");\n \n         RoleTO newRoleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n-                                                      roleTO, RoleTO.class);\n+                roleTO, RoleTO.class);\n \n         roleTO.setId(newRoleTO.getId());\n         assertEquals(roleTO, newRoleTO);\n@@ -69,10 +69,10 @@ public void delete() {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n \n-        restTemplate.delete(BASE_URL + \"role/delete/{roleId}\", 7);\n+        restTemplate.delete(BASE_URL + \"role/delete/{roleId}\", 5);\n         try {\n             restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\",\n-                                      RoleTO.class, 2);\n+                    RoleTO.class, 2);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n@@ -121,7 +121,7 @@ public void update() {\n         roleTO.addAttribute(icon);\n \n         roleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n-                                            roleTO, RoleTO.class);\n+                roleTO, RoleTO.class);\n \n         assertEquals(1, roleTO.getAttributes().size());\n \n@@ -135,7 +135,7 @@ public void update() {\n         roleMod.addAttributeToBeUpdated(attributeMod);\n \n         roleTO = restTemplate.postForObject(BASE_URL + \"role/update\",\n-                                            roleMod, RoleTO.class);\n+                roleMod, RoleTO.class);\n \n         assertEquals(\"finalRole\", roleTO.getName());\n         assertEquals(2, roleTO.getAttributes().size());"},{"sha":"aa8353df81528047e6ecced4ddba2c0bc1f2c5d2","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -35,7 +35,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n-import org.syncope.client.search.PaginatedResult;\n+import org.syncope.client.search.PaginatedUserContainer;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n@@ -395,9 +395,9 @@ public final void list() {\n     @Test\n     public final void paginatedList() {\n \n-        PaginatedResult paginatedResult = restTemplate.getForObject(\n+        PaginatedUserContainer paginatedResult = restTemplate.getForObject(\n                 BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n-                PaginatedResult.class, 1, 2);\n+                PaginatedUserContainer.class, 1, 2);\n \n         List<UserTO> users = paginatedResult.getRecords();\n \n@@ -411,17 +411,17 @@ public final void paginatedList() {\n \n         paginatedResult = restTemplate.getForObject(\n                 BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n-                PaginatedResult.class, 2, 2);\n+                PaginatedUserContainer.class, 2, 2);\n \n         users = paginatedResult.getRecords();\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n         assertEquals(2, users.size());\n \n-        PaginatedResult result = restTemplate.getForObject(\n+        PaginatedUserContainer result = restTemplate.getForObject(\n                 BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n-                PaginatedResult.class, 100, 2);\n+                PaginatedUserContainer.class, 100, 2);\n \n         users = result.getRecords();\n \n@@ -526,9 +526,9 @@ public final void paginatedSearch() {\n \n         assertTrue(searchCondition.checkValidity());\n \n-        PaginatedResult result = restTemplate.postForObject(\n+        PaginatedUserContainer result = restTemplate.postForObject(\n                 BASE_URL + \"user/paginatedSearch/{page}/{size}\",\n-                searchCondition, PaginatedResult.class, 1, 2);\n+                searchCondition, PaginatedUserContainer.class, 1, 2);\n \n         List<UserTO> matchedUsers = result.getRecords();\n         assertNotNull(matchedUsers);\n@@ -543,9 +543,9 @@ public final void paginatedSearch() {\n         isNullCond.setSchema(\"loginDate\");\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n-        PaginatedResult paginatedResult = restTemplate.postForObject(\n+        PaginatedUserContainer paginatedResult = restTemplate.postForObject(\n                 BASE_URL + \"user/paginatedSearch/{page}/{size}\",\n-                searchCondition, PaginatedResult.class, 1, 2);\n+                searchCondition, PaginatedUserContainer.class, 1, 2);\n \n         matchedUsers = paginatedResult.getRecords();\n "},{"sha":"c395856f78ac8863d1623ed82574b3de0caa7054","filename":"core/src/test/resources/content.xml","status":"modified","additions":25,"deletions":12,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -39,7 +39,7 @@\n     <SyncopeConf confKey=\"smtp.host\" confValue=\"smtp.ngi.it\"/>\n     <SyncopeConf confKey=\"optin.email.from\" confValue=\"syncope@googlecode.com\"/>\n     <SyncopeConf confKey=\"optin.email.subject\" confValue=\"Welcome to Syncope!\"/>\n-    <SyncopeConf confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n+    <SyncopeConf confKey=\"identityconnectors.bundle.directory\" confValue=\"/var/tmp/bundles\"/>\n                           \n     <SyncopeUser id=\"1\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n     <SyncopeUser id=\"2\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n@@ -142,7 +142,7 @@\n     <ConnectorInstance id=\"100\" displayName=\"ConnectorInstance100\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n-                       version=\"${project.version}\"\n+                       version=\"0.4-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n     <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"SYNC_CREATE\"/>\n     <ConnectorInstance_capabilities ConnectorInstance_id=\"100\" element=\"SYNC_UPDATE\"/>\n@@ -155,7 +155,7 @@\n     <ConnectorInstance id=\"101\" displayName=\"ConnectorInstance101\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n-                       version=\"${project.version}\"\n+                       version=\"0.4-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n     <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"SYNC_CREATE\"/>\n     <ConnectorInstance_capabilities ConnectorInstance_id=\"101\" element=\"SYNC_UPDATE\"/>\n@@ -168,7 +168,7 @@\n     <ConnectorInstance id=\"102\" displayName=\"ConnectorInstance102\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n-                       version=\"${project.version}\"\n+                       version=\"0.4-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n     <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"SYNC_CREATE\"/>\n     <ConnectorInstance_capabilities ConnectorInstance_id=\"102\" element=\"SYNC_UPDATE\"/>\n@@ -181,7 +181,7 @@\n     <ConnectorInstance id=\"103\" displayName=\"ConnectorInstance103\"\n                        bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n                        connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n-                       version=\"${project.version}\"\n+                       version=\"0.4-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A9080%2Fwstarget%2Fservices%2Fprovisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Eorg.syncope.identityconnectors.bundles.staticwebservice.provisioning.interfaces.Provisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n \n     <TargetResource name=\"ws-target-resource-1\" connector_id=\"100\" forceMandatoryConstraint=\"1\" optionalPropagationMode=\"ASYNC\"/>\n@@ -283,13 +283,6 @@\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E\"/>\n     <TaskExecution id=\"1\" task_id=\"1\" workflowId=\"0\"/>\n \n-    <Entitlement name=\"base\"/>\n-    <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n-\n-    <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"1\"/>\n-    <SyncopeRole_Entitlement entitlements_name=\"advanced\" roles_id=\"1\"/>\n-    <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"2\"/>\n-\n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n \n     <RSchemaDerivation derivedSchemas_name=\"displayProperty\" schemas_name=\"icon\" />\n@@ -299,6 +292,8 @@\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n \n     <!-- Authentication and authorization -->\n+    <Entitlement name=\"base\"/>\n+    <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n     <Entitlement name=\"SCHEMA_LIST\"/>\n     <Entitlement name=\"SCHEMA_CREATE\"/>\n     <Entitlement name=\"SCHEMA_READ\"/>\n@@ -337,6 +332,24 @@\n     <Entitlement name=\"TASK_DELETE\"/>\n     <Entitlement name=\"LOG_LIST\"/>\n     <Entitlement name=\"LOG_SET_LEVEL\"/>\n+    <Entitlement name=\"ROLE_1\"/>\n+    <Entitlement name=\"ROLE_2\"/>\n+    <Entitlement name=\"ROLE_3\"/>\n+    <Entitlement name=\"ROLE_4\"/>\n+    <Entitlement name=\"ROLE_5\"/>\n+    <Entitlement name=\"ROLE_6\"/>\n+    <Entitlement name=\"ROLE_7\"/>\n+    <Entitlement name=\"ROLE_8\"/>\n \n+    <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"1\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"advanced\" roles_id=\"1\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"2\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"SCHEMA_READ\" roles_id=\"8\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"ROLE_LIST\" roles_id=\"8\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"USER_READ\" roles_id=\"2\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"USER_LIST\" roles_id=\"2\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"USER_READ\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"USER_LIST\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"ROLE_8\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"ROLE_1\" roles_id=\"7\"/>\n </dataset>"},{"sha":"202f9948d5fc96ddf8a9a4f2d143c8de998d51b8","filename":"core/src/test/resources/exploredb.jsp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -5,7 +5,7 @@\n <%@page import=\"java.sql.ResultSet\"%>\n <%@page import=\"java.sql.Statement\"%>\n <%@page import=\"java.sql.Connection\"%>\n-<%@page import=\"org.syncope.core.persistence.util.ApplicationContextManager\"%>\n+<%@page import=\"org.syncope.core.util.ApplicationContextManager\"%>\n <%@page import=\"org.springframework.context.ConfigurableApplicationContext\"%>\n <%@page import=\"org.syncope.core.persistence.DefaultContentLoader\"%>\n <%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%>"},{"sha":"d833a2545665b0de7769bcecafb756e559a50807","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=cabab92a1e6ccb37a713b0ff4204cfc5023f6b3a","patch":"@@ -114,7 +114,7 @@\n \n         <hibernate.version>3.4.0.GA</hibernate.version>\n         <hibernate-validator.version>4.0.2.GA</hibernate-validator.version>\n-        <ehcache.version>2.3.0</ehcache.version>\n+        <ehcache.version>2.3.2</ehcache.version>\n \n         <wicket.version>1.4.15</wicket.version>\n "}]}