{"sha":"120e355359d99c0f654c218f9277e31c03103f14","node_id":"C_kwDOJfYA1toAKDEyMGUzNTUzNTlkOTljMGY2NTRjMjE4ZjkyNzdlMzFjMDMxMDNmMTQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-03-08T09:21:00Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-03-08T09:21:00Z"},"message":"Some AnySearchDAO cleanup (#323)","tree":{"sha":"f96d6d81485cd48e66d63ae08cbcb8560dd89cf2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f96d6d81485cd48e66d63ae08cbcb8560dd89cf2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/120e355359d99c0f654c218f9277e31c03103f14","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJx/8CRBK7hj4Ov3rIwAAYxoIAHlb5Cas6dqT81OB+4kKEaNJ\npDmzqAwNK9uzov2mNSS8KlHPHe5ANeQraNGKDH0yWnkCyq9TrO1k7C3AvS87skI7\nXd5qtGD6tyXdROEO0evSmQ5z9JUTIYcv82yKMmJbRHvjXdJ8LK7z8ytD1S78wnac\nBew5SPxBl+oTi625n3WUfqGcHEx/KDF1bSXwJ+4M3JF7yZXqRoMRQSiL056Ji0wf\nxEoXeFXsFDrZVKPgnH6z1xsu6xUG7r8MyJrsPGBn2legjbKTfB7YhKL+/UoPu6hc\nYZEAXmmKvfYmuk1WqYvQxe2ew9cIcd/8PNWxhft45hyvtVT1mUCmDCQjEoq6nP8=\n=KVgh\n-----END PGP SIGNATURE-----\n","payload":"tree f96d6d81485cd48e66d63ae08cbcb8560dd89cf2\nparent cf4034b8a3ce9e734358f2ddd8a952fb861e53d3\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1646731260 +0100\ncommitter GitHub <noreply@github.com> 1646731260 +0100\n\nSome AnySearchDAO cleanup (#323)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/120e355359d99c0f654c218f9277e31c03103f14","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/120e355359d99c0f654c218f9277e31c03103f14","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/120e355359d99c0f654c218f9277e31c03103f14/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"cf4034b8a3ce9e734358f2ddd8a952fb861e53d3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cf4034b8a3ce9e734358f2ddd8a952fb861e53d3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cf4034b8a3ce9e734358f2ddd8a952fb861e53d3"}],"stats":{"total":44,"additions":23,"deletions":21},"files":[{"sha":"9d88bd2d4fdc346ba90cd662dedb18322ed71676","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/120e355359d99c0f654c218f9277e31c03103f14/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/120e355359d99c0f654c218f9277e31c03103f14/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=120e355359d99c0f654c218f9277e31c03103f14","patch":"@@ -68,13 +68,15 @@ protected void processOBS(\n                 map(item -> item.orderBy.substring(0, item.orderBy.indexOf(\" \"))).collect(Collectors.toSet());\n \n         obs.views.forEach(searchView -> {\n+            boolean searchViewAddedToWhere = false;\n             if (searchView.name.equals(svs.field().name)) {\n                 StringBuilder attrWhere = new StringBuilder();\n                 StringBuilder nullAttrWhere = new StringBuilder();\n \n-                where.append(\", (SELECT * FROM \").append(searchView.name);\n-\n                 if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n+                    where.append(\", (SELECT * FROM \").append(searchView.name);\n+                    searchViewAddedToWhere = true;\n+\n                     attrs.forEach(field -> {\n                         if (attrWhere.length() == 0) {\n                             attrWhere.append(\" WHERE \");\n@@ -84,7 +86,7 @@ protected void processOBS(\n                         attrWhere.append(\"JSON_CONTAINS(plainAttrs, '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]')\");\n \n                         nullAttrWhere.append(\" UNION SELECT DISTINCT any_id,\").append(svs.table().alias).append(\".*, \").\n-                                append('\"').append(field).append('\"').append(\" AS plainShema, \").\n+                                append('\"').append(field).append('\"').append(\" AS plainSchema, \").\n                                 append(\"null AS binaryValue, \").\n                                 append(\"null AS booleanValue, \").\n                                 append(\"null AS dateValue, \").\n@@ -101,13 +103,13 @@ protected void processOBS(\n                                 append(\" WHERE \").append(svs.table().alias).append(\".id=any_id AND \").\n                                 append(\"JSON_CONTAINS(plainAttrs, '[{\\\"schema\\\":\\\"\").append(field).append(\"\\\"}]'))\");\n                     });\n-                    where.append(attrWhere).append(nullAttrWhere);\n+                    where.append(attrWhere).append(nullAttrWhere).append(')');\n                 }\n-\n-                where.append(')');\n-            } else {\n+            }\n+            if (!searchViewAddedToWhere) {\n                 where.append(',').append(searchView.name);\n             }\n+\n             where.append(' ').append(searchView.alias);\n         });\n     }"},{"sha":"51a4e52f3ee44ac0f2cb04d5877956e6d691b52a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/120e355359d99c0f654c218f9277e31c03103f14/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/120e355359d99c0f654c218f9277e31c03103f14/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=120e355359d99c0f654c218f9277e31c03103f14","patch":"@@ -201,12 +201,12 @@ protected <T extends Any<?>> List<T> doSearch(\n             OrderBySupport obs = parseOrderBy(svs, orderBy);\n             if (queryString.charAt(0) == '(') {\n                 queryString.insert(0, buildSelect(obs));\n-                queryString.append(buildWhere(svs, obs));\n             } else {\n                 queryString.insert(0, buildSelect(obs).append('('));\n-                queryString.append(')').append(buildWhere(svs, obs));\n+                queryString.append(')');\n             }\n             queryString.\n+                    append(buildWhere(svs, obs)).\n                     append(filter.getLeft()).\n                     append(buildOrderBy(obs));\n \n@@ -272,13 +272,16 @@ protected void processOBS(\n \n         obs.views.forEach(searchView -> {\n             where.append(',');\n+\n+            boolean searchViewAddedToWhere = false;\n             if (searchView.name.equals(svs.asSearchViewSupport().attr().name)) {\n                 StringBuilder attrWhere = new StringBuilder();\n                 StringBuilder nullAttrWhere = new StringBuilder();\n \n-                where.append(\" (SELECT * FROM \").append(searchView.name);\n-\n                 if (svs.nonMandatorySchemas || obs.nonMandatorySchemas) {\n+                    where.append(\" (SELECT * FROM \").append(searchView.name);\n+                    searchViewAddedToWhere = true;\n+\n                     attrs.forEach(field -> {\n                         if (attrWhere.length() == 0) {\n                             attrWhere.append(\" WHERE \");\n@@ -302,13 +305,13 @@ protected void processOBS(\n                                 append(svs.asSearchViewSupport().attr().name).append(' ').append(searchView.alias).\n                                 append(\" WHERE \").append(\"schema_id='\").append(field).append(\"')\");\n                     });\n-                    where.append(attrWhere).append(nullAttrWhere);\n+                    where.append(attrWhere).append(nullAttrWhere).append(')');\n                 }\n-\n-                where.append(')');\n-            } else {\n+            }\n+            if (!searchViewAddedToWhere) {\n                 where.append(searchView.name);\n             }\n+\n             where.append(' ').append(searchView.alias);\n         });\n     }\n@@ -320,15 +323,12 @@ protected StringBuilder buildWhere(\n         StringBuilder where = new StringBuilder(\" u\");\n         processOBS(svs, obs, where);\n         where.append(\" WHERE \");\n-        obs.views.forEach(searchView -> {\n-            where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \");\n-        });\n+\n+        obs.views.forEach(searchView -> where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \"));\n \n         obs.items.stream().\n                 filter(item -> StringUtils.isNotBlank(item.where)).\n-                forEachOrdered((item) -> {\n-                    where.append(item.where).append(\" AND \");\n-                });\n+                forEach(item -> where.append(item.where).append(\" AND \"));\n \n         return where;\n     }"}]}