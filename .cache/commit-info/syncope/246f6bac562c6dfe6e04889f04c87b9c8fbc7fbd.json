{"sha":"246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI0NmY2YmFjNTYyYzZkZmU2ZTA0ODg5ZjA0Yzg3YjljOGZiYzdmYmQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-08-18T08:28:10Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-08-18T08:31:25Z"},"message":"[SYNCOPE-1641] New REST endpoint to purge Propagation Tasks","tree":{"sha":"14848b8829fba20a13c6345bb5d7239fe5be6d79","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/14848b8829fba20a13c6345bb5d7239fe5be6d79"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"5ebfe4efbd71bd1d314b66d140ca901ae6cffb96","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ebfe4efbd71bd1d314b66d140ca901ae6cffb96","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5ebfe4efbd71bd1d314b66d140ca901ae6cffb96"}],"stats":{"total":170,"additions":145,"deletions":25},"files":[{"sha":"92ab611969dc89b678161c98d56c4af768abe56c","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","patch":"@@ -27,6 +27,8 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.Date;\n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n@@ -45,6 +47,7 @@\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n@@ -138,4 +141,21 @@ <T extends TaskTO> T read(\n     @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void delete(@NotNull @PathParam(\"type\") TaskType type, @NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Deletes all the propagation tasks whose latest execution is matching the given conditions.\n+     * At least one matching condition must be specified.\n+     *\n+     * @param since\n+     * @param statuses execution status(es) to match\n+     * @return deleted propagation tasks\n+     */\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\", description = \"List of deleted propagation tasks, as Entity\"),\n+        @ApiResponse(responseCode = \"412\", description = \"At least one matching condition must be specified\") })\n+    @DELETE\n+    @Path(\"PROPAGATION/purge\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response purgePropagations(\n+            @QueryParam(\"since\") Date since, @QueryParam(\"statuses\") List<ExecStatus> statuses);\n }"},{"sha":"8b6c92e3bf8c96e949b37b5073421111ce5b3853","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -454,6 +455,11 @@ public void actionJob(final String key, final JobAction action) {\n         doActionJob(JobNamer.getJobKey(task), action);\n     }\n \n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_DELETE + \"')\")\n+    public List<PropagationTaskTO> purgePropagations(final Date since, final List<ExecStatus> statuses) {\n+        return taskDAO.purgePropagations(since, statuses);\n+    }\n+\n     @Override\n     protected TaskTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {"},{"sha":"6efb30f7a4606a74610b417e6083b5b6a0576b54","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","patch":"@@ -19,13 +19,15 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n+import java.util.Date;\n import java.util.List;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n@@ -34,6 +36,7 @@\n import org.apache.syncope.core.logic.TaskLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n \n @Service\n public class TaskServiceImpl extends AbstractExecutableService implements TaskService {\n@@ -91,4 +94,13 @@ public <T extends TaskTO> T read(final TaskType type, final String key, final bo\n     public void update(final TaskType type, final SchedTaskTO taskTO) {\n         logic.updateSchedTask(type, taskTO);\n     }\n+\n+    @Override\n+    public Response purgePropagations(final Date since, final List<ExecStatus> statuses) {\n+        if (since == null && CollectionUtils.isEmpty(statuses)) {\n+            return Response.status(Response.Status.PRECONDITION_FAILED).build();\n+        }\n+\n+        return Response.ok(logic.purgePropagations(since, statuses)).build();\n+    }\n }"},{"sha":"71614791ed45b38fb1a81481db4060877337fcf0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskDAO.java?ref=246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","patch":"@@ -18,8 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Date;\n import java.util.List;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -73,4 +76,5 @@ int count(\n \n     void deleteAll(ExternalResource resource, TaskType type);\n \n+    List<PropagationTaskTO> purgePropagations(Date since, List<ExecStatus> statuses);\n }"},{"sha":"7ab1aded6c6fa79bd9305cc779b4f010eb3df989","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":80,"deletions":25,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","patch":"@@ -20,14 +20,18 @@\n \n import java.lang.reflect.Field;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n+import java.util.stream.Collectors;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -36,6 +40,7 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n@@ -50,6 +55,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.util.ReflectionUtils;\n \n @Repository\n@@ -206,13 +212,13 @@ public <T extends Task> List<T> findAll(final TaskType type) {\n     }\n \n     private static StringBuilder buildFindAllQuery(\n-        final TaskType type,\n-        final ExternalResource resource,\n-        final Notification notification,\n-        final AnyTypeKind anyTypeKind,\n-        final String entityKey,\n-        final boolean orderByTaskExecInfo,\n-        final List<Object> queryParameters) {\n+            final TaskType type,\n+            final ExternalResource resource,\n+            final Notification notification,\n+            final AnyTypeKind anyTypeKind,\n+            final String entityKey,\n+            final boolean orderByTaskExecInfo,\n+            final List<Object> queryParameters) {\n \n         if (resource != null\n                 && type != TaskType.PROPAGATION && type != TaskType.PUSH && type != TaskType.PULL) {\n@@ -299,8 +305,9 @@ private static StringBuilder buildFindAllQuery(\n         return queryString;\n     }\n \n-    private static String toOrderByStatement(final Class<? extends Task> beanClass,\n-                                             final List<OrderByClause> orderByClauses) {\n+    private static String toOrderByStatement(\n+            final Class<? extends Task> beanClass,\n+            final List<OrderByClause> orderByClauses) {\n \n         StringBuilder statement = new StringBuilder();\n \n@@ -345,7 +352,6 @@ private static String toOrderByStatement(final Class<? extends Task> beanClass,\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public <T extends Task> List<T> findAll(\n             final TaskType type,\n             final ExternalResource resource,\n@@ -405,7 +411,23 @@ public <T extends Task> List<T> findAll(\n             query.setMaxResults(itemsPerPage);\n         }\n \n-        return buildResult(query.getResultList());\n+        List<T> result = new ArrayList<>();\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object> raw = query.getResultList();\n+        raw.stream().map(key -> key instanceof Object[]\n+                ? (String) ((Object[]) key)[0]\n+                : ((String) key)).forEach(key -> {\n+\n+            T task = find(key);\n+            if (task == null) {\n+                LOG.error(\"Could not find task with key {}, even if returned by native query\", key);\n+            } else if (!result.contains(task)) {\n+                result.add(task);\n+            }\n+        });\n+\n+        return result;\n     }\n \n     @Override\n@@ -464,23 +486,56 @@ public void deleteAll(final ExternalResource resource, final TaskType type) {\n                 stream().map(Entity::getKey).forEach(this::delete);\n     }\n \n-    private <T extends Task> List<T> buildResult(final List<Object> raw) {\n-        List<T> result = new ArrayList<>();\n+    @Override\n+    public List<PropagationTaskTO> purgePropagations(final Date since, final List<ExecStatus> statuses) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT t.task_id \"\n+                + \"FROM TaskExec t INNER JOIN Task z ON t.task_id=z.id AND z.dtype='PropagationTask' \"\n+                + \"WHERE t.enddate=(SELECT MAX(e.enddate) FROM TaskExec e WHERE e.task_id=t.task_id) \");\n \n-        for (Object anyKey : raw) {\n-            String actualKey = anyKey instanceof Object[]\n-                    ? (String) ((Object[]) anyKey)[0]\n-                    : ((String) anyKey);\n+        List<Object> queryParameters = new ArrayList<>();\n+        if (since != null) {\n+            queryParameters.add(since);\n+            queryString.append(\"AND t.enddate <= ?\").append(queryParameters.size()).append(' ');\n+        }\n+        if (!CollectionUtils.isEmpty(statuses)) {\n+            queryString.append(\"AND (\").\n+                    append(statuses.stream().map(status -> {\n+                        queryParameters.add(status.name());\n+                        return \"t.status = ?\" + queryParameters.size();\n+                    }).collect(Collectors.joining(\" OR \"))).\n+                    append(\")\");\n+        }\n \n-            @SuppressWarnings(\"unchecked\")\n-            T task = find(actualKey);\n-            if (task == null) {\n-                LOG.error(\"Could not find task with id {}, even if returned by native query\", actualKey);\n-            } else if (!result.contains(task)) {\n-                result.add(task);\n-            }\n+        Query query = entityManager().createNativeQuery(queryString.toString());\n+        for (int i = 1; i <= queryParameters.size(); i++) {\n+            query.setParameter(i, queryParameters.get(i - 1));\n         }\n \n-        return result;\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object> raw = query.getResultList();\n+\n+        List<PropagationTaskTO> purged = new ArrayList<>();\n+        raw.stream().map(Object::toString).distinct().forEach(key -> {\n+            PropagationTask task = find(key);\n+            if (task != null) {\n+                PropagationTaskTO taskTO = new PropagationTaskTO();\n+\n+                taskTO.setOperation(task.getOperation());\n+                taskTO.setConnObjectKey(task.getConnObjectKey());\n+                taskTO.setOldConnObjectKey(task.getOldConnObjectKey());\n+                taskTO.setAttributes(task.getSerializedAttributes());\n+                taskTO.setResource(task.getResource().getKey());\n+                taskTO.setObjectClassName(task.getObjectClassName());\n+                taskTO.setAnyTypeKind(task.getAnyTypeKind());\n+                taskTO.setAnyType(task.getAnyType());\n+                taskTO.setEntityKey(task.getEntityKey());\n+\n+                purged.add(taskTO);\n+\n+                delete(task);\n+            }\n+        });\n+\n+        return purged;\n     }\n }"},{"sha":"a61a70e025cdd39c6485c589d8b7e7f767728216","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=246f6bac562c6dfe6e04889f04c87b9c8fbc7fbd","patch":"@@ -23,6 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import java.io.IOException;\n import java.text.ParseException;\n@@ -42,6 +43,8 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+import javax.ws.rs.core.GenericType;\n+import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -269,6 +272,26 @@ public void privileges() {\n         }\n     }\n \n+    @Test\n+    public void purgePropagations() {\n+        try {\n+            taskService.purgePropagations(null, null);\n+            fail();\n+        } catch (WebServiceException e) {\n+            assertNotNull(e);\n+        }\n+\n+        Calendar oneWeekAgo = Calendar.getInstance();\n+        oneWeekAgo.add(Calendar.WEEK_OF_YEAR, -1);\n+        Response response = taskService.purgePropagations(\n+                oneWeekAgo.getTime(), Collections.singletonList(ExecStatus.SUCCESS));\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        List<PropagationTaskTO> deleted = response.readEntity(new GenericType<List<PropagationTaskTO>>() {\n+        });\n+        assertNotNull(deleted);\n+    }\n+\n     @Test\n     public void issueSYNCOPE741() {\n         for (int i = 0; i < 3; i++) {"}]}