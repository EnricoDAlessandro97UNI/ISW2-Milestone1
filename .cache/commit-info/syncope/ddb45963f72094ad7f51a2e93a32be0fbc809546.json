{"sha":"ddb45963f72094ad7f51a2e93a32be0fbc809546","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRkYjQ1OTYzZjcyMDk0YWQ3ZjUxYTJlOTNhMzJiZTBmYmM4MDk1NDY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-17T12:07:29Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-08-17T12:07:29Z"},"message":"Bugfixes and improvements\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246432 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3cf1ac6ca244276125a4e8eb461993007e3fecd9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3cf1ac6ca244276125a4e8eb461993007e3fecd9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ddb45963f72094ad7f51a2e93a32be0fbc809546","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ddb45963f72094ad7f51a2e93a32be0fbc809546","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ddb45963f72094ad7f51a2e93a32be0fbc809546","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ddb45963f72094ad7f51a2e93a32be0fbc809546/comments","author":null,"committer":null,"parents":[{"sha":"1e6cb001b80337a7d5badeb02f8ef9e1c195087b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1e6cb001b80337a7d5badeb02f8ef9e1c195087b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1e6cb001b80337a7d5badeb02f8ef9e1c195087b"}],"stats":{"total":132,"additions":104,"deletions":28},"files":[{"sha":"ae183f3be569733e7e821762abe642fe05541609","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributeValue.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributeValue.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -23,6 +23,8 @@\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang.builder.ToStringStyle;\n \n @MappedSuperclass\n public abstract class AbstractAttributeValue extends AbstractBaseBean {\n@@ -124,4 +126,10 @@ public String getValueAsString() {\n \n     public abstract <T extends AbstractAttribute> void setAttribute(\n             T attribute);\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this,\n+                ToStringStyle.MULTI_LINE_STYLE);\n+    }\n }"},{"sha":"b1e33572a3ff4ff4cd0c4bd4aebf11f6f5f1db36","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttribute.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n@@ -33,7 +34,8 @@ public class MembershipAttribute extends AbstractAttribute {\n     private Membership owner;\n     @ManyToOne(fetch = FetchType.EAGER)\n     private MembershipSchema schema;\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<MembershipAttributeValue> attributeValues;\n \n     public MembershipAttribute() {"},{"sha":"0903145ab9cb6df1f78bc030c2fd3845604b38cc","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleAttribute.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n@@ -33,7 +34,8 @@ public class RoleAttribute extends AbstractAttribute {\n     private SyncopeRole owner;\n     @ManyToOne(fetch = FetchType.EAGER)\n     private RoleSchema schema;\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<RoleAttributeValue> attributeValues;\n \n     public RoleAttribute() {"},{"sha":"c7c9045879df5d16a8a8c1932a227336011d6366","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttribute.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -21,6 +21,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import org.hibernate.annotations.Cascade;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n@@ -33,7 +34,8 @@ public class UserAttribute extends AbstractAttribute {\n     private SyncopeUser owner;\n     @ManyToOne(fetch = FetchType.EAGER)\n     private UserSchema schema;\n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    @OneToMany(cascade = CascadeType.MERGE, mappedBy = \"attribute\")\n+    @Cascade(org.hibernate.annotations.CascadeType.DELETE_ORPHAN)\n     private List<UserAttributeValue> attributeValues;\n \n     public UserAttribute() {"},{"sha":"de6112f29fde821a1c52c1fa1d683e0390aa76a3","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttributeValue.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttributeValue.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -15,17 +15,14 @@\n package org.syncope.core.persistence.beans.user;\n \n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n-import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang.builder.ToStringStyle;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n @Entity\n public class UserAttributeValue extends AbstractAttributeValue {\n \n-    @ManyToOne(fetch = FetchType.EAGER)\n+    @ManyToOne\n     private UserAttribute attribute;\n \n     @Override\n@@ -37,10 +34,4 @@ public <T extends AbstractAttribute> T getAttribute() {\n     public <T extends AbstractAttribute> void setAttribute(T attribute) {\n         this.attribute = (UserAttribute) attribute;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return ReflectionToStringBuilder.toString(this,\n-                ToStringStyle.MULTI_LINE_STYLE);\n-    }\n }"},{"sha":"3cdbb35f683ba0d5dcefd21539f0a7e13f712fdf","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -23,6 +23,8 @@ public interface SyncopeUserDAO extends DAO {\n \n     SyncopeUser find(Long id);\n \n+    SyncopeUser findByWorkflowId(Long workflowId);\n+\n     List<SyncopeUser> findByAttributeValue(UserAttributeValue attributeValue);\n \n     List<SyncopeUser> findAll();"},{"sha":"c3b2df4930937a7b7c352d0eb58e78bef574d527","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -35,6 +35,16 @@ public SyncopeUser find(Long id) {\n         return entityManager.find(SyncopeUser.class, id);\n     }\n \n+    @Override\n+    @Transactional(readOnly = true)\n+    public SyncopeUser findByWorkflowId(Long workflowId) {\n+        Query query = entityManager.createQuery(\"SELECT e FROM SyncopeUser e \"\n+                + \"WHERE e.workflowId = :workflowId\");\n+        query.setParameter(\"workflowId\", workflowId);\n+        \n+        return (SyncopeUser) query.getSingleResult();\n+    }\n+\n     @Override\n     @Transactional(readOnly = true)\n     public List<SyncopeUser> findByAttributeValue("},{"sha":"554cefa6b19c4abb1048a76f289940ae816aae85","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -343,7 +343,7 @@ public UserTO create(HttpServletResponse response,\n             workflowId = userWorkflow.initialize(Constants.USER_WORKFLOW, 0,\n                     Collections.singletonMap(Constants.USER_TO, userTO));\n         } catch (WorkflowInitException e) {\n-            log.error(\"During workflow initialization: \" + e, e);\n+            log.error(\"During workflow initialization: \" + e);\n             wie = e;\n \n             // Removing dirty workflow entry\n@@ -363,7 +363,9 @@ public UserTO create(HttpServletResponse response,\n                             wie.getWorkflowId(), Constants.ACTION_RESET);\n                     if (resetActionId != null) {\n                         doExecuteAction(Constants.ACTION_RESET,\n-                                wie.getSyncopeUserId(), null);\n+                                wie.getSyncopeUserId(),\n+                                Collections.singletonMap(Constants.USER_TO,\n+                                (Object) userTO));\n                     }\n \n                     userTO.setId(wie.getSyncopeUserId());"},{"sha":"0886016b8c77b280935a5ad930f268a39b424c20","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":30,"deletions":5,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -16,7 +16,10 @@\n \n import com.opensymphony.workflow.Workflow;\n import com.opensymphony.workflow.spi.Step;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import javassist.NotFoundException;\n import javax.persistence.EntityNotFoundException;\n import org.springframework.http.HttpStatus;\n@@ -43,6 +46,10 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n \n+        // In case of overwrite, take into account memberships formerly\n+        // assigned to this user\n+        Set<Long> formerMembershipIds = Collections.EMPTY_SET;\n+\n         // Check if UserTO has a valued id: if so,\n         // try to read the user from the db\n         SyncopeUser syncopeUser = null;\n@@ -55,6 +62,11 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n \n                 throw new NotFoundException(String.valueOf(userTO.getId()));\n             }\n+\n+            formerMembershipIds = new HashSet<Long>();\n+            for (Membership membership : syncopeUser.getMemberships()) {\n+                formerMembershipIds.add(membership.getId());\n+            }\n         }\n \n         // password\n@@ -90,16 +102,29 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n                             + membershipTO.getRole());\n                 }\n             } else {\n-                Membership membership = new Membership();\n-                membership.setSyncopeRole(role);\n-                membership.setSyncopeUser(syncopeUser);\n+                Membership membership = null;\n+                if (syncopeUser.getId() != null) {\n+                    membership = membershipDAO.find(syncopeUser, role);\n+                }\n+                if (membership == null) {\n+                    membership = new Membership();\n+                    membership.setSyncopeRole(role);\n+                    membership.setSyncopeUser(syncopeUser);\n+\n+                    syncopeUser.addMembership(membership);\n+                } else {\n+                    formerMembershipIds.remove(membership.getId());\n+                }\n \n                 membership = (Membership) fill(membership, membershipTO,\n                         AttributableUtil.MEMBERSHIP, scce);\n-\n-                syncopeUser.addMembership(membership);\n             }\n         }\n+        // Remove from the DB any former membership that has not been\n+        // renewed in this overwrite\n+        for (Long membershipId : formerMembershipIds) {\n+            membershipDAO.delete(membershipId);\n+        }\n \n         return syncopeUser;\n     }"},{"sha":"74acc0dbc0cbde891511d3575cc23cbad81cb9af","filename":"core/src/main/java/org/syncope/core/workflow/EmptyUser.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FEmptyUser.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -22,12 +22,13 @@\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.membership.MembershipAttribute;\n+import org.syncope.core.persistence.beans.membership.MembershipDerivedAttribute;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UserAttribute;\n import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n-import org.syncope.core.persistence.dao.MembershipDAO;\n \n public class EmptyUser extends OSWorkflowComponent\n         implements FunctionProvider {\n@@ -58,12 +59,21 @@ public void execute(Map transientVars, Map args, PropertySet ps)\n         }\n         syncopeUser.getDerivedAttributes().clear();\n \n-        MembershipDAO membershipDAO =\n-                (MembershipDAO) context.getBean(\"membershipDAOImpl\");\n         for (Membership membership : syncopeUser.getMemberships()) {\n-            membershipDAO.delete(membership.getId());\n+            for (AbstractAttribute attribute : membership.getAttributes()) {\n+                attributeDAO.delete(attribute.getId(),\n+                        MembershipAttribute.class);\n+            }\n+            membership.getAttributes().clear();\n+\n+            for (AbstractDerivedAttribute derivedAttribute :\n+                    membership.getDerivedAttributes()) {\n+\n+                derivedAttributeDAO.delete(derivedAttribute.getId(),\n+                        MembershipDerivedAttribute.class);\n+            }\n+            membership.getDerivedAttributes().clear();\n         }\n-        syncopeUser.getMemberships().clear();\n \n         syncopeUser.setCreationTime(null);\n         syncopeUser.setPassword(null);"},{"sha":"ff34a93b679553d7d3c3315b99e4f55fe6f66179","filename":"core/src/test/java/org/syncope/core/test/persistence/AbstractTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -26,8 +26,8 @@\n import org.dbunit.database.DatabaseConnection;\n import org.dbunit.database.IDatabaseConnection;\n import org.dbunit.dataset.IDataSet;\n+import org.dbunit.dataset.datatype.DefaultDataTypeFactory;\n import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n-import org.dbunit.ext.hsqldb.HsqldbDataTypeFactory;\n import org.dbunit.operation.DatabaseOperation;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n@@ -49,7 +49,7 @@ public abstract class AbstractTest {\n     @Autowired\n     private DataSource dataSource;\n     @Autowired\n-    private HsqldbDataTypeFactory dbUnitDataTypeFactory;\n+    private DefaultDataTypeFactory dbUnitDataTypeFactory;\n \n     private void logTableContent(Connection conn, String tableName)\n             throws SQLException {"},{"sha":"9dd21e8861232aebce0f4b86526d70adfe8d7c11","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/MembershipTest.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ddb45963f72094ad7f51a2e93a32be0fbc809546/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FMembershipTest.java?ref=ddb45963f72094ad7f51a2e93a32be0fbc809546","patch":"@@ -32,7 +32,7 @@ public class MembershipTest extends AbstractTest {\n     private MembershipDAO membershipDAO;\n \n     @Test\n-    public final void test() {\n+    public final void delete() {\n         Membership membership = membershipDAO.find(4L);\n         SyncopeUser user = membership.getSyncopeUser();\n         SyncopeRole role = membership.getSyncopeRole();\n@@ -48,4 +48,26 @@ public final void test() {\n             assertTrue(m.getId() != 4L);\n         }\n     }\n+\n+    @Test\n+    public final void deleteAndCreate() {\n+        Membership membership = membershipDAO.find(3L);\n+        SyncopeUser user = membership.getSyncopeUser();\n+        SyncopeRole role = membership.getSyncopeRole();\n+\n+        // 1. delete that membership\n+        membershipDAO.delete(membership.getId());\n+\n+        // if not flushing here, the INSERT below will be executed \n+        // before the DELETE above\n+        membershipDAO.flush();\n+\n+        // 2. (in the same transaction) create new membership with same user\n+        // and role (in order to check the UNIQE constraint on Membership)\n+        membership = new Membership();\n+        membership.setSyncopeUser(user);\n+        membership.setSyncopeRole(role);\n+\n+        membership = membershipDAO.save(membership);\n+    }\n }"}]}