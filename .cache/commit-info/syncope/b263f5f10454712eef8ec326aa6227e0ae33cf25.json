{"sha":"b263f5f10454712eef8ec326aa6227e0ae33cf25","node_id":"C_kwDOJfYA1toAKGIyNjNmNWYxMDQ1NDcxMmVlZjhlYzMyNmFhNjIyN2UwYWUzM2NmMjU","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-10T11:25:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-10T11:50:44Z"},"message":"[SYNCOPE-1720] Fixing test execution","tree":{"sha":"149c56af0fce362bd8e694bb5b147d48c8ffeae0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/149c56af0fce362bd8e694bb5b147d48c8ffeae0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b263f5f10454712eef8ec326aa6227e0ae33cf25","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b263f5f10454712eef8ec326aa6227e0ae33cf25","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b263f5f10454712eef8ec326aa6227e0ae33cf25","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b263f5f10454712eef8ec326aa6227e0ae33cf25/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"39d5371b37884e910e5a14653076be9aed597f61","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39d5371b37884e910e5a14653076be9aed597f61","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/39d5371b37884e910e5a14653076be9aed597f61"}],"stats":{"total":21,"additions":9,"deletions":12},"files":[{"sha":"d76167c8c088b495983e6b2abc7297cbbf1ef351","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b263f5f10454712eef8ec326aa6227e0ae33cf25/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b263f5f10454712eef8ec326aa6227e0ae33cf25/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=b263f5f10454712eef8ec326aa6227e0ae33cf25","patch":"@@ -107,8 +107,7 @@ public void userReadAndSearchYieldsNoAudit() {\n         assertNotNull(userTO.getKey());\n \n         AuditQuery query = new AuditQuery.Builder().entityKey(userTO.getKey()).build();\n-        List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n-        assertEquals(1, entries.size());\n+        int entriesBefore = query(query, MAX_WAIT_SECONDS).size();\n \n         PagedResult<UserTO> usersTOs = USER_SERVICE.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n@@ -118,8 +117,8 @@ public void userReadAndSearchYieldsNoAudit() {\n         assertNotNull(usersTOs);\n         assertFalse(usersTOs.getResult().isEmpty());\n \n-        entries = query(query, MAX_WAIT_SECONDS);\n-        assertEquals(1, entries.size());\n+        int entriesAfter = query(query, MAX_WAIT_SECONDS).size();\n+        assertEquals(entriesBefore, entriesAfter);\n     }\n \n     @Test\n@@ -178,17 +177,16 @@ public void groupReadAndSearchYieldsNoAudit() {\n         assertNotNull(groupTO.getKey());\n \n         AuditQuery query = new AuditQuery.Builder().entityKey(groupTO.getKey()).build();\n-        List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n-        assertEquals(1, entries.size());\n+        int entriesBefore = query(query, MAX_WAIT_SECONDS).size();\n \n         PagedResult<GroupTO> groups = GROUP_SERVICE.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(groupTO.getName()).query()).\n                 build());\n         assertNotNull(groups);\n         assertFalse(groups.getResult().isEmpty());\n \n-        entries = query(query, MAX_WAIT_SECONDS);\n-        assertEquals(1, entries.size());\n+        int entriesAfter = query(query, MAX_WAIT_SECONDS).size();\n+        assertEquals(entriesBefore, entriesAfter);\n     }\n \n     @Test\n@@ -208,8 +206,7 @@ public void anyObjectReadAndSearchYieldsNoAudit() {\n         assertNotNull(anyObjectTO);\n \n         AuditQuery query = new AuditQuery.Builder().entityKey(anyObjectTO.getKey()).build();\n-        List<AuditEntry> entries = query(query, MAX_WAIT_SECONDS);\n-        assertEquals(1, entries.size());\n+        int entriesBefore = query(query, MAX_WAIT_SECONDS).size();\n \n         PagedResult<AnyObjectTO> anyObjects = ANY_OBJECT_SERVICE.search(\n                 new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n@@ -218,8 +215,8 @@ public void anyObjectReadAndSearchYieldsNoAudit() {\n         assertNotNull(anyObjects);\n         assertFalse(anyObjects.getResult().isEmpty());\n \n-        entries = query(query, MAX_WAIT_SECONDS);\n-        assertEquals(1, entries.size());\n+        int entriesAfter = query(query, MAX_WAIT_SECONDS).size();\n+        assertEquals(entriesBefore, entriesAfter);\n     }\n \n     @Test"}]}