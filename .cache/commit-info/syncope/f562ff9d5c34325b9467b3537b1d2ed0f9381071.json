{"sha":"f562ff9d5c34325b9467b3537b1d2ed0f9381071","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY1NjJmZjlkNWMzNDMyNWI5NDY3YjM1MzdiMWQyZWQwZjkzODEwNzE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-04-10T12:49:38Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-04-10T12:49:38Z"},"message":"Appropriate casting for connector configuration\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246848 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1398eda679add0f61b3563c75eaa89d21a35de6c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1398eda679add0f61b3563c75eaa89d21a35de6c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f562ff9d5c34325b9467b3537b1d2ed0f9381071","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f562ff9d5c34325b9467b3537b1d2ed0f9381071","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f562ff9d5c34325b9467b3537b1d2ed0f9381071","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f562ff9d5c34325b9467b3537b1d2ed0f9381071/comments","author":null,"committer":null,"parents":[{"sha":"f0b582bcbfc84048fb616d5b0d5f0834f3a41d62","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f0b582bcbfc84048fb616d5b0d5f0834f3a41d62","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f0b582bcbfc84048fb616d5b0d5f0834f3a41d62"}],"stats":{"total":39,"additions":36,"deletions":3},"files":[{"sha":"4435836517c0ccb9acb9f6cd18909e8804132b71","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":36,"deletions":3,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f562ff9d5c34325b9467b3537b1d2ed0f9381071/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f562ff9d5c34325b9467b3537b1d2ed0f9381071/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=f562ff9d5c34325b9467b3537b1d2ed0f9381071","patch":"@@ -14,6 +14,8 @@\n  */\n package org.syncope.core.persistence.propagation;\n \n+import java.io.File;\n+import java.net.URI;\n import java.util.Set;\n import javassist.NotFoundException;\n import org.identityconnectors.common.security.GuardedByteArray;\n@@ -140,17 +142,48 @@ public ConnectorFacadeProxy(final ConnInstance connInstance)\n                                 property.getValue().toCharArray());\n                     } else if (GuardedByteArray.class.equals(\n                             propertySchemaClass)) {\n+\n                         propertyValue = new GuardedByteArray(\n                                 property.getValue().getBytes());\n+                    } else if (Character.class.equals(propertySchemaClass)\n+                            || char.class.equals(propertySchemaClass)) {\n+\n+                        propertyValue = property.getValue().toCharArray()[0];\n+                    } else if (Integer.class.equals(propertySchemaClass)\n+                            || int.class.equals(propertySchemaClass)) {\n+\n+                        propertyValue = Integer.valueOf(property.getValue());\n+                    } else if (Long.class.equals(propertySchemaClass)\n+                            || long.class.equals(propertySchemaClass)) {\n+\n+                        propertyValue = Long.valueOf(property.getValue());\n+                    } else if (Float.class.equals(propertySchemaClass)\n+                            || float.class.equals(propertySchemaClass)) {\n+\n+                        propertyValue = Float.valueOf(property.getValue());\n+                    } else if (Double.class.equals(propertySchemaClass)\n+                            || double.class.equals(propertySchemaClass)) {\n+\n+                        propertyValue = Double.valueOf(property.getValue());\n+                    } else if (Boolean.class.equals(propertySchemaClass)\n+                            || boolean.class.equals(propertySchemaClass)) {\n+\n+                        propertyValue = Boolean.valueOf(property.getValue());\n+                    } else if (URI.class.equals(propertySchemaClass)) {\n+                        propertyValue = URI.create(property.getValue());\n+                    } else if (File.class.equals(propertySchemaClass)) {\n+                        propertyValue = new File(property.getValue());\n+                    } else if (String[].class.equals(propertySchemaClass)) {\n+                        propertyValue = property.getValue().split(\" \");\n                     } else {\n                         propertyValue = property.getValue();\n                     }\n \n                     properties.setPropertyValue(\n                             property.getSchema().getName(), propertyValue);\n-                } catch (ClassNotFoundException e) {\n-                    LOG.error(\"Invalid configType specified for \"\n-                            + property.getSchema(), e);\n+                } catch (Throwable t) {\n+                    LOG.error(\"Invalid ConnConfProperty specified: {}\",\n+                            property, t);\n                 }\n             }\n         }"}]}