{"sha":"bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJiN2RiYzg4NjY0ZjJhMmRmNDgyNWEwMTQ0ZDU5OWRlNGQyYWIyZjA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-09T15:07:30Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-09T15:07:30Z"},"message":"added resoursvn cleanupce controle and bug-fixing\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246364 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b05427f4da63367348d85f095dfdce594917d12","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0b05427f4da63367348d85f095dfdce594917d12"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/comments","author":null,"committer":null,"parents":[{"sha":"11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/11d8fbc5f7af85fc8c136392f07f4e5a8be3f1d2"}],"stats":{"total":1149,"additions":938,"deletions":211},"files":[{"sha":"882a47af0b7b197fd8987ceb30b761c737402199","filename":"client/src/main/java/org/syncope/client/to/ConnectorBundleTOs.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -24,11 +24,9 @@ public class ConnectorBundleTOs extends AbstractBaseTO\n     private List<ConnectorBundleTO> bundles;\n \n     public List<ConnectorBundleTO> getBundles() {\n-        return bundles;\n-    }\n-\n-    public void setBundles(List<ConnectorBundleTO> bundles) {\n-        this.bundles = bundles;\n+        if (this.bundles == null)\n+            this.bundles = new ArrayList<ConnectorBundleTO>();\n+        return this.bundles;\n     }\n \n     public boolean addBundle(ConnectorBundleTO bundle) {\n@@ -43,6 +41,10 @@ public boolean removeBundle(ConnectorBundleTO bundle) {\n         return this.bundles.remove(bundle);\n     }\n \n+    public void setBundles(List<ConnectorBundleTO> bundles) {\n+        this.bundles = bundles;\n+    }\n+\n     @Override\n     public Iterator<ConnectorBundleTO> iterator() {\n         if (this.bundles == null) {"},{"sha":"4c00e66ce86c838e10d78beea8614fe14db1fef0","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTO.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.client.to;\n \n+import java.util.HashSet;\n import java.util.Set;\n \n public class ConnectorInstanceTO extends AbstractBaseTO {\n@@ -53,7 +54,20 @@ public void setVersion(String bundleversion) {\n     }\n \n     public Set<PropertyTO> getConfiguration() {\n-        return configuration;\n+        if (this.configuration == null)\n+            this.configuration = new HashSet<PropertyTO>();\n+        return this.configuration;\n+    }\n+\n+    public boolean addConfiguration(PropertyTO property) {\n+        if (this.configuration == null)\n+            this.configuration = new HashSet<PropertyTO>();\n+        return this.configuration.add(property);\n+    }\n+\n+    public boolean removeConfiguration(PropertyTO property) {\n+        if (this.configuration == null) return true;\n+        return this.configuration.remove(property);\n     }\n \n     public void setConfiguration(Set<PropertyTO> configuration) {"},{"sha":"a5046f688be0031eeea55d14477b113dc4501674","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTOs.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -28,27 +28,27 @@ public ConnectorInstanceTOs() {\n     }\n \n     public List<ConnectorInstanceTO> getInstances() {\n-        return instances;\n-    }\n-\n-    public void setInstances(List<ConnectorInstanceTO> instances) {\n-        this.instances = instances;\n+        if (this.instances == null)\n+            this.instances = new ArrayList<ConnectorInstanceTO>();\n+        return this.instances;\n     }\n \n     public boolean addInstance(ConnectorInstanceTO instance) {\n-        if (this.instances == null) {\n+        if (this.instances == null)\n             this.instances = new ArrayList<ConnectorInstanceTO>();\n-        }\n \n         return this.instances.add(instance);\n     }\n \n     public boolean removeInstance(ConnectorInstanceTO instance) {\n         if (this.instances == null) return true;\n-\n         return this.instances.remove(instance);\n     }\n \n+    public void setInstances(List<ConnectorInstanceTO> instances) {\n+        this.instances = instances;\n+    }\n+\n     @Override\n     public Iterator<ConnectorInstanceTO> iterator() {\n         if (this.instances == null) {"},{"sha":"2002cbbd89dcc2f9985ec0c26a3a0722879f6cc7","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -0,0 +1,58 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+public class ResourceTO extends AbstractBaseTO {\n+\n+    /**\n+     * The resource identifier is the name.\n+     */\n+    private String name;\n+\n+    /**\n+     * The resource type is identified by the associated connector.\n+     */\n+    private Long connectorId;\n+\n+    /**\n+     * Attribute mappings.\n+     */\n+    private SchemaMappingTOs mappings;\n+\n+    public Long getConnectorId() {\n+        return connectorId;\n+    }\n+\n+    public void setConnectorId(Long connectorId) {\n+        this.connectorId = connectorId;\n+    }\n+\n+    public SchemaMappingTOs getMappings() {\n+        return mappings;\n+    }\n+\n+    public void setMappings(SchemaMappingTOs mappings) {\n+        this.mappings = mappings;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+}"},{"sha":"8cc70eb846e4978c849cf1b86d7047765a986532","filename":"client/src/main/java/org/syncope/client/to/ResourceTOs.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -0,0 +1,55 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class ResourceTOs extends AbstractBaseTO\n+        implements Iterable<ResourceTO> {\n+\n+    private List<ResourceTO> resources;\n+\n+    public List<ResourceTO> getResources() {\n+        if (this.resources == null)\n+            this.resources = new ArrayList<ResourceTO>();\n+        return this.resources;\n+    }\n+\n+    public boolean addResource(ResourceTO resource) {\n+        if (this.resources == null)\n+            this.resources = new ArrayList<ResourceTO>();\n+        return this.resources.add(resource);\n+    }\n+\n+    public boolean removeResource(ResourceTO resource) {\n+        if (this.resources == null) return true;\n+        return this.resources.remove(resource);\n+    }\n+\n+    public void setResources(List<ResourceTO> resources) {\n+        this.resources = resources;\n+    }\n+\n+    @Override\n+    public Iterator<ResourceTO> iterator() {\n+        if (this.resources == null) {\n+            this.resources = new ArrayList<ResourceTO>();\n+        }\n+\n+        return this.resources.iterator();\n+    }\n+}"},{"sha":"b02e363111849152a1e05892d472d2fb9dd89988","filename":"client/src/main/java/org/syncope/client/to/SchemaMappingTOs.java","status":"modified","additions":7,"deletions":18,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -24,37 +24,26 @@ public class SchemaMappingTOs extends AbstractBaseTO\n     private List<SchemaMappingTO> mappings;\n \n     public List<SchemaMappingTO> getMappings() {\n-        if (this.mappings == null) {\n+        if (this.mappings == null)\n             this.mappings = new ArrayList<SchemaMappingTO>();\n-        }\n         return this.mappings;\n     }\n \n-    public void setMappings(List<SchemaMappingTO> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n     public boolean addMapping(SchemaMappingTO mapping) {\n-        if (this.mappings == null) {\n+        if (this.mappings == null)\n             this.mappings = new ArrayList<SchemaMappingTO>();\n-        }\n-\n         return this.mappings.add(mapping);\n     }\n-\n-    public boolean addAllMappings(List<SchemaMappingTO> mappings) {\n-        if (this.mappings == null) {\n-            this.mappings = new ArrayList<SchemaMappingTO>();\n-        }\n-\n-        return this.mappings.addAll(mappings);\n-    }\n-\n+    \n     public boolean removeMapping(SchemaMappingTO mapping) {\n         if (this.mappings == null) return true;\n         return this.mappings.remove(mapping);\n     }\n \n+    public void setMappings(List<SchemaMappingTO> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n     @Override\n     public Iterator<SchemaMappingTO> iterator() {\n         if (this.mappings == null) {"},{"sha":"6b67be39b8bbd01a89edc1dbf8f9b0b6903b6c6d","filename":"core/src/main/java/org/syncope/core/persistence/ConnectorInstanceBeansLoader.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FConnectorInstanceBeansLoader.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -86,6 +86,10 @@ public void contextInitialized(ServletContextEvent sce) {\n                         instance.getConnectorName(),\n                         properties);\n \n+                if (log.isInfoEnabled()) {\n+                    log.info(\"Connector instance \" + connector);\n+                }\n+\n                 beanFactory.registerSingleton(\n                         instance.getId().toString(), connector);\n "},{"sha":"9f25a54b2b5ce4cede0ecaff80df1605a2e0a1ba","filename":"core/src/main/java/org/syncope/core/persistence/PropagationManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FPropagationManager.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -172,7 +172,7 @@ private void propagate(SyncopeUser user, Resource resource, boolean merge)\n         DefaultListableBeanFactory beanFactory =\n                 (DefaultListableBeanFactory) context.getBeanFactory();\n \n-        ConnectorFacade connector = (ConnectorFacade) beanFactory.getSingleton(\n+        ConnectorFacade connector = (ConnectorFacade) beanFactory.getBean(\n                 connectorInstance.getId().toString());\n \n         if (connector == null) {"},{"sha":"c18f2c9c287cf5f1031c473cd0420144f5540689","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -73,10 +73,12 @@ public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n     }\n \n     public boolean addResource(Resource resource) {\n-        return resources.add(resource);\n+        if (this.resources == null) this.resources = new HashSet<Resource>();\n+        return this.resources.add(resource);\n     }\n \n     public boolean removeResource(Resource resource) {\n+        if (this.resources == null) return true;\n         return resources.remove(resource);\n     }\n "},{"sha":"c1126f899dc3e8061ae1d6167c3aababba990567","filename":"core/src/main/java/org/syncope/core/persistence/beans/ConnectorInstance.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnectorInstance.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -108,7 +108,8 @@ public Long getId() {\n     }\n \n     public Set<Resource> getResources() {\n-        return resources;\n+        if (this.resources == null) this.resources = new HashSet<Resource>();\n+        return this.resources;\n     }\n \n     public void setResources(Set<Resource> resources) {"},{"sha":"be405ff18af754d0465881c5742e9c396596a31e","filename":"core/src/main/java/org/syncope/core/persistence/beans/Entitlement.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.persistence.beans;\n \n+import java.util.HashSet;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import java.util.Set;\n import javax.persistence.Column;\n@@ -27,8 +28,10 @@ public class Entitlement extends AbstractBaseBean {\n \n     @Id\n     private String name;\n+\n     @Column(nullable = true)\n     private String description;\n+\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"entitlements\")\n     private Set<SyncopeRole> roles;\n \n@@ -49,15 +52,18 @@ public void setName(String name) {\n     }\n \n     public boolean addRole(SyncopeRole role) {\n-        return roles.add(role);\n+        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        return this.roles.add(role);\n     }\n \n     public boolean removeRole(SyncopeRole role) {\n-        return roles.remove(role);\n+        if (this.roles == null) return true;\n+        return this.roles.remove(role);\n     }\n \n     public Set<SyncopeRole> getRoles() {\n-        return roles;\n+        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        return this.roles;\n     }\n \n     public void setRoles(Set<SyncopeRole> roles) {"},{"sha":"4bbee45472c40a900ef676f2ddf97689f753415c","filename":"core/src/main/java/org/syncope/core/persistence/beans/Resource.java","status":"modified","additions":27,"deletions":26,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FResource.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -55,7 +55,8 @@ public class Resource extends AbstractBaseBean {\n     /**\n      * Attribute mappings.\n      */\n-    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"resource\")\n+    @OneToMany(cascade = javax.persistence.CascadeType.MERGE,\n+    fetch = FetchType.EAGER, mappedBy = \"resource\")\n     private Set<SchemaMapping> mappings;\n \n     public ConnectorInstance getConnector() {\n@@ -76,6 +77,15 @@ public boolean removeMapping(SchemaMapping mapping) {\n         return this.mappings.remove(mapping);\n     }\n \n+    public boolean addMapping(SchemaMapping mapping) {\n+        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n+        return this.mappings.add(mapping);\n+    }\n+\n+    public void setMappings(Set<SchemaMapping> mappings) {\n+        this.mappings = mappings;\n+    }\n+\n     public String getName() {\n         return name;\n     }\n@@ -85,49 +95,40 @@ public void setName(String name) {\n     }\n \n     public Set<SyncopeRole> getRoles() {\n-        if (roles == null) return new HashSet<SyncopeRole>();\n-        return roles;\n+        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        return this.roles;\n+    }\n+\n+    public boolean addRole(SyncopeRole role) {\n+        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n+        return this.roles.add(role);\n+    }\n+\n+    public boolean removeRole(SyncopeRole role) {\n+        if (this.roles == null) return true;\n+        return this.roles.remove(role);\n     }\n \n     public void setRoles(Set<SyncopeRole> roles) {\n         this.roles = roles;\n     }\n \n     public Set<SyncopeUser> getUsers() {\n-        if (users == null) return new HashSet<SyncopeUser>();\n-        return users;\n-    }\n-\n-    public void setUsers(Set<SyncopeUser> users) {\n-        this.users = users;\n+        if (this.users == null) this.users = new HashSet<SyncopeUser>();\n+        return this.users;\n     }\n \n     public boolean addUser(SyncopeUser user) {\n         if (this.users == null) this.users = new HashSet<SyncopeUser>();\n         return this.users.add(user);\n     }\n \n-    public boolean addRole(SyncopeRole role) {\n-        if (this.roles == null) this.roles = new HashSet<SyncopeRole>();\n-        return this.roles.add(role);\n-    }\n-\n     public boolean removeUser(SyncopeUser user) {\n         if (this.users == null) return true;\n         return this.users.remove(user);\n     }\n \n-    public boolean removeRole(SyncopeRole role) {\n-        if (this.roles == null) return true;\n-        return this.roles.remove(role);\n-    }\n-\n-    public void setMappings(Set<SchemaMapping> mappings) {\n-        this.mappings = mappings;\n-    }\n-\n-    public boolean addMapping(SchemaMapping mapping) {\n-        if (this.mappings == null) this.mappings = new HashSet<SchemaMapping>();\n-        return this.mappings.add(mapping);\n+    public void setUsers(Set<SyncopeUser> users) {\n+        this.users = users;\n     }\n }"},{"sha":"89b3aba591128d01585bc228677d81ad0bac0dcf","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":55,"deletions":30,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -42,6 +42,7 @@\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnectorBundleTO;\n import org.syncope.client.to.ConnectorBundleTOs;\n import org.syncope.client.to.ConnectorInstanceTO;\n@@ -72,7 +73,7 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n             @RequestBody ConnectorInstanceTO connectorTO) throws IOException {\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"create called with configuration \" + connectorTO);\n+            log.debug(\"Create called with configuration \" + connectorTO);\n         }\n \n         ConnectorInstanceDataBinder binder =\n@@ -82,7 +83,11 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n \n         try {\n \n-            actual = binder.createConnectorInstance(connectorTO);\n+            ConnectorInstance connectorInstance =\n+                    binder.getConnectorInstance(connectorTO);\n+\n+            // Everything went out fine, we can flush to the database\n+            actual = connectorInstanceDAO.save(connectorInstance);\n \n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + connectorTO, e);\n@@ -119,9 +124,7 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n \n         try {\n \n-            beanFactory.destroyBean(\n-                    actual.getId().toString(),\n-                    beanFactory.getBean(actual.getId().toString()));\n+            beanFactory.destroySingleton(actual.getId().toString());\n \n         } catch (NoSuchBeanDefinitionException ignore) {\n             // ignore exception\n@@ -152,10 +155,14 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n         ConnectorInstance actual = null;\n \n         try {\n-\n-            actual = binder.updateConnectorInstance(\n+            ConnectorInstance connectorInstance =\n+                    binder.updateConnectorInstance(\n                     connectorTO.getId(), connectorTO);\n \n+            // Everything went out fine, we can flush to the database\n+            actual = connectorInstanceDAO.save(\n+                    connectorInstance);\n+\n         } catch (SyncopeClientCompositeErrorException e) {\n             log.error(\"Could not create for \" + connectorTO, e);\n             return throwCompositeException(e, response);\n@@ -170,7 +177,7 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n         DefaultListableBeanFactory beanFactory =\n                 (DefaultListableBeanFactory) context.getBeanFactory();\n \n-        ConnectorFacade connector = (ConnectorFacade) beanFactory.getSingleton(\n+        ConnectorFacade connector = (ConnectorFacade) beanFactory.getBean(\n                 actual.getId().toString());\n \n         if (connector == null) {\n@@ -196,9 +203,7 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n \n         try {\n \n-            beanFactory.destroyBean(\n-                    actual.getId().toString(),\n-                    beanFactory.getBean(actual.getId().toString()));\n+            beanFactory.destroySingleton(actual.getId().toString());\n \n         } catch (NoSuchBeanDefinitionException ignore) {\n             // ignore exception\n@@ -224,8 +229,13 @@ public void delete(HttpServletResponse response,\n                 connectorInstanceDAO.find(connectorId);\n \n         if (connectorInstance == null) {\n-            log.error(\"Could not find connector '\" + connectorId + \"'\");\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Could not find connector '\" + connectorId + \"'\");\n+            }\n+\n             throwNotFoundException(String.valueOf(connectorId), response);\n+\n         } else {\n             connectorInstanceDAO.delete(connectorId);\n \n@@ -237,9 +247,7 @@ public void delete(HttpServletResponse response,\n \n             try {\n \n-                beanFactory.destroyBean(\n-                        connectorId.toString(),\n-                        beanFactory.getBean(connectorId.toString()));\n+                beanFactory.destroySingleton(connectorId.toString());\n \n             } catch (NoSuchBeanDefinitionException ignore) {\n                 // ignore exception\n@@ -250,27 +258,23 @@ public void delete(HttpServletResponse response,\n         }\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n     public ConnectorInstanceTOs list() {\n \n         List<ConnectorInstance> connectorInstances =\n                 connectorInstanceDAO.findAll();\n \n-        List<ConnectorInstanceTO> instances =\n-                new ArrayList<ConnectorInstanceTO>();\n+        ConnectorInstanceTOs connectorInstanceTOs = new ConnectorInstanceTOs();\n \n         ConnectorInstanceDataBinder binder =\n                 new ConnectorInstanceDataBinder(connectorInstanceDAO);\n \n         for (ConnectorInstance connector : connectorInstances) {\n-            instances.add(binder.getConnectorInstanceTO(connector));\n+            connectorInstanceTOs.addInstance(\n+                    binder.getConnectorInstanceTO(connector));\n         }\n \n-        ConnectorInstanceTOs connectorInstanceTOs =\n-                new ConnectorInstanceTOs();\n-\n-        connectorInstanceTOs.setInstances(instances);\n-\n         return connectorInstanceTOs;\n     }\n \n@@ -295,7 +299,7 @@ public ConnectorInstanceTO read(HttpServletResponse response,\n \n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/check/{connectorId}\")\n-    public String check(HttpServletResponse response,\n+    public ModelAndView check(HttpServletResponse response,\n             @PathVariable(\"connectorId\") Long connectorId) throws IOException {\n \n         ConfigurableApplicationContext context =\n@@ -304,13 +308,34 @@ public String check(HttpServletResponse response,\n         DefaultListableBeanFactory beanFactory =\n                 (DefaultListableBeanFactory) context.getBeanFactory();\n \n-        ConnectorFacade connector = (ConnectorFacade) beanFactory.getSingleton(\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Singleton in bean factory: \" +\n+                    beanFactory.getSingletonNames());\n+        }\n+\n+        ConnectorFacade connector = (ConnectorFacade) beanFactory.getBean(\n                 connectorId.toString());\n \n-        if (connector == null)\n-            return \"KO\";\n-        else\n-            return \"OK\";\n+        ModelAndView mav = new ModelAndView();\n+\n+        Boolean verify = Boolean.FALSE;\n+\n+        try {\n+\n+            if (connector != null) {\n+                connector.validate();\n+                verify = Boolean.TRUE;\n+            }\n+\n+        } catch (RuntimeException ignore) {\n+            if (log.isInfoEnabled()) {\n+                log.info(\"Connector validation failed\", ignore);\n+            }\n+        }\n+\n+        mav.addObject(verify);\n+\n+        return mav;\n     }\n \n     @RequestMapping(method = RequestMethod.GET,"},{"sha":"978aabf82dc638f0ebf0084dd497cbd3e33b92ae","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"renamed","additions":276,"deletions":30,"changes":306,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -22,29 +22,31 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import java.io.IOException;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.syncope.client.to.ResourceTO;\n+import org.syncope.client.to.ResourceTOs;\n import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SchemaMappingDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.rest.data.SchemaMappingDataBinder;\n+import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n-@RequestMapping(\"/mapping\")\n-public class SchemaMappingController extends AbstractController {\n+@RequestMapping(\"/resource\")\n+public class ResourceController extends AbstractController {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -58,17 +60,273 @@ public class SchemaMappingController extends AbstractController {\n     @Autowired\n     private SchemaMappingDAO schemaMappingDAO;\n \n+    @Autowired\n+    ConnectorInstanceDAO connectorInstanceDAO;\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create\")\n+    public ResourceTO create(HttpServletResponse response,\n+            @RequestBody ResourceTO resourceTO) throws IOException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Creation request received\");\n+        }\n+\n+        ResourceDataBinder binder =\n+                new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n+\n+        if (resourceTO == null) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Missing resource.\");\n+            }\n+\n+            return throwNotFoundException(\"Resource not found\", response);\n+        }\n+\n+        Resource actual = null;\n+\n+        try {\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Resource data binder ..\");\n+            }\n+\n+            Resource resource = binder.getResource(resourceTO);\n+\n+            if (log.isInfoEnabled()) {\n+                log.info(\"Create resource \" + resource.getName());\n+            }\n+\n+            actual = resourceDAO.save(resource);\n+\n+            if (actual == null) {\n+                if (log.isErrorEnabled()) {\n+                    log.error(\"Resource creation failed\");\n+                }\n+\n+                SyncopeClientException ex = new SyncopeClientException(\n+                        SyncopeClientExceptionType.Unknown);\n+\n+                throw ex;\n+            }\n+\n+        } catch (SyncopeClientCompositeErrorException e) {\n+\n+            return throwCompositeException(e, response);\n+\n+        } catch (SyncopeClientException ex) {\n+\n+            SyncopeClientCompositeErrorException compositeErrorException =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            compositeErrorException.addException(ex);\n+\n+            return throwCompositeException(compositeErrorException, response);\n+\n+        } catch (Throwable t) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Unknown exception\", t);\n+            }\n+\n+            SyncopeClientException ex = new SyncopeClientException(\n+                    SyncopeClientExceptionType.Unknown);\n+\n+            SyncopeClientCompositeErrorException compositeErrorException =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            compositeErrorException.addException(ex);\n+\n+            return throwCompositeException(compositeErrorException, response);\n+        }\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return binder.getResourceTO(actual);\n+    }\n+\n     @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n-    value = \"/create/{resourceName}\")\n-    public SchemaMappingTOs create(HttpServletResponse response,\n+    value = \"/update\")\n+    public ResourceTO update(HttpServletResponse response,\n+            @RequestBody ResourceTO resourceTO) throws IOException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Update request received\");\n+        }\n+\n+        Resource resource = null;\n+\n+        if (resourceTO != null && resourceTO.getName() != null) {\n+            resource = resourceDAO.find(resourceTO.getName());\n+        }\n+\n+        if (resource == null) {\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Missing resource.\");\n+            }\n+\n+            return throwNotFoundException(\"Resource not found\", response);\n+        }\n+\n+        ResourceDataBinder binder =\n+                new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n+\n+        Resource actual = null;\n+\n+        try {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Resource data binder ..\");\n+            }\n+\n+            resource = binder.getResource(resource, resourceTO);\n+\n+            if (log.isInfoEnabled()) {\n+                log.info(\"Update resource \" + resource.getName());\n+            }\n+\n+            actual = resourceDAO.save(resource);\n+\n+            if (actual == null) {\n+                if (log.isErrorEnabled()) {\n+                    log.error(\"Resource creation failed\");\n+                }\n+\n+                SyncopeClientException ex = new SyncopeClientException(\n+                        SyncopeClientExceptionType.Unknown);\n+\n+                throw ex;\n+            }\n+\n+            // remove older mappings\n+            Set<SchemaMapping> mappings = resource.getMappings();\n+            for (SchemaMapping mapping : mappings) {\n+                mapping.setResource(null);\n+                schemaMappingDAO.delete(mapping.getId());\n+            }\n+\n+        } catch (SyncopeClientCompositeErrorException e) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Could not create mappings\", e);\n+            }\n+\n+            return throwCompositeException(e, response);\n+\n+        } catch (SyncopeClientException ex) {\n+\n+            SyncopeClientCompositeErrorException compositeErrorException =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            compositeErrorException.addException(ex);\n+\n+            return throwCompositeException(compositeErrorException, response);\n+\n+        } catch (Throwable t) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Unknown exception\", t);\n+            }\n+\n+            SyncopeClientException ex = new SyncopeClientException(\n+                    SyncopeClientExceptionType.Unknown);\n+\n+            SyncopeClientCompositeErrorException compositeErrorException =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+\n+            compositeErrorException.addException(ex);\n+\n+            return throwCompositeException(compositeErrorException, response);\n+        }\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return binder.getResourceTO(actual);\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{resourceName}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"resourceName\") String resourceName)\n+            throws IOException {\n+\n+        Resource resource = resourceDAO.find(resourceName);\n+\n+        if (resource == null) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Could not find resource '\" + resourceName + \"'\");\n+            }\n+\n+            throwNotFoundException(String.valueOf(resourceName), response);\n+\n+        } else {\n+\n+            resourceDAO.delete(resourceName);\n+\n+        }\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{resourceName}\")\n+    public ResourceTO read(HttpServletResponse response,\n+            @PathVariable(\"resourceName\") String resourceName)\n+            throws IOException {\n+\n+        ResourceDataBinder binder =\n+                new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n+\n+        Resource resource = resourceDAO.find(resourceName);\n+\n+        if (resource == null) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"Could not find resource '\" + resourceName + \"'\");\n+            }\n+\n+            return throwNotFoundException(resourceName, response);\n+        }\n+\n+        return binder.getResourceTO(resource);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    public ResourceTOs list(HttpServletResponse response)\n+            throws IOException {\n+\n+        ResourceDataBinder binder =\n+                new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n+\n+        List<Resource> resources = resourceDAO.findAll();\n+\n+        if (resources == null) {\n+\n+            if (log.isErrorEnabled()) {\n+                log.error(\"No resource found\");\n+            }\n+\n+            return throwNotFoundException(\"No resource found\", response);\n+        }\n+\n+        return binder.getResourceTOs(resources);\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/{resourceName}/mappings/create\")\n+    public SchemaMappingTOs createMappings(HttpServletResponse response,\n             @PathVariable(\"resourceName\") String resourceName,\n             @RequestBody SchemaMappingTOs mappings) throws IOException {\n \n         Set<SchemaMapping> actuals = new HashSet<SchemaMapping>();\n \n-        SchemaMappingDataBinder binder =\n-                new SchemaMappingDataBinder(schemaDAO);\n+        ResourceDataBinder binder =\n+                new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n \n         try {\n \n@@ -117,23 +375,9 @@ public SchemaMappingTOs create(HttpServletResponse response,\n                     binder.getSchemaMappings(resource, mappings);\n \n             SchemaMapping actual = null;\n-            UserSchema userSchema = null;\n-            RoleSchema roleSchema = null;\n \n             for (SchemaMapping schemaMapping : schemaMappings) {\n-                resource.addMapping(schemaMapping);\n-\n-                // synchronize userSchema\n-                userSchema = schemaMapping.getUserSchema();\n-                if (userSchema != null) userSchema.addMapping(schemaMapping);\n-\n-                // synchronize roleSchema\n-                roleSchema = schemaMapping.getRoleSchema();\n-                if (roleSchema != null) roleSchema.addMapping(schemaMapping);\n-\n-                // save schema mapping and synchronize\n                 actual = schemaMappingDAO.save(schemaMapping);\n-\n                 actuals.add(actual);\n             }\n \n@@ -179,8 +423,8 @@ public SchemaMappingTOs create(HttpServletResponse response,\n \n     @Transactional\n     @RequestMapping(method = RequestMethod.DELETE,\n-    value = \"/delete/{resourceName}\")\n-    public void delete(HttpServletResponse response,\n+    value = \"/{resourceName}/mappings/delete\")\n+    public void deleteMappings(HttpServletResponse response,\n             @PathVariable(\"resourceName\") String resourceName)\n             throws IOException {\n \n@@ -210,7 +454,7 @@ public void delete(HttpServletResponse response,\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/getResourceMapping/{resourceName}\")\n+    value = \"/{resourceName}/mappings/list\")\n     public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n             @PathVariable(\"resourceName\") String resourceName)\n             throws IOException {\n@@ -244,13 +488,14 @@ public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n \n         // resource.getMappings() can never return a null value\n \n-        SchemaMappingDataBinder binder = new SchemaMappingDataBinder(schemaDAO);\n+        ResourceDataBinder binder =\n+                new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n \n         return binder.getSchemaMappingTOs(schemaMappings);\n     }\n \n     @RequestMapping(method = RequestMethod.GET,\n-    value = \"/getRoleResourcesMapping/{roleName}\")\n+    value = \"/{roleName}/resources/mappings/list\")\n     public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n             @PathVariable(\"roleName\") Long roleId)\n             throws IOException {\n@@ -283,7 +528,8 @@ public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n \n         Set<Resource> resources = role.getResources();\n \n-        SchemaMappingDataBinder binder = new SchemaMappingDataBinder(schemaDAO);\n+        ResourceDataBinder binder =\n+                new ResourceDataBinder(schemaDAO, connectorInstanceDAO);\n \n         SchemaMappingTOs resourceMappings = null;\n \n@@ -306,7 +552,7 @@ public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n                         resourceMappings.getMappings() + \"'\");\n             }\n \n-            roleMappings.addAllMappings(resourceMappings.getMappings());\n+            roleMappings.getMappings().addAll(resourceMappings.getMappings());\n         }\n \n         if (log.isDebugEnabled()) {","previous_filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaMappingController.java"},{"sha":"02e182bd560a65724e902ce9bfa6a04ec76fb40f","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -54,7 +54,7 @@ public ConnectorInstanceDataBinder(\n         this.connectorInstanceDAO = connectorInstanceDAO;\n     }\n \n-    public ConnectorInstance createConnectorInstance(\n+    public ConnectorInstance getConnectorInstance(\n             ConnectorInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -103,11 +103,7 @@ public ConnectorInstance createConnectorInstance(\n             throw compositeErrorException;\n         }\n \n-        // Everything went out fine, we can flush to the database\n-        ConnectorInstance actual = connectorInstanceDAO.save(\n-                connectorInstance);\n-\n-        return actual;\n+        return connectorInstance;\n     }\n \n     public ConnectorInstance updateConnectorInstance(\n@@ -170,11 +166,7 @@ public ConnectorInstance updateConnectorInstance(\n             throw compositeErrorException;\n         }\n \n-        // Everything went out fine, we can flush to the database\n-        ConnectorInstance actual = connectorInstanceDAO.save(\n-                connectorInstance);\n-\n-        return actual;\n+        return connectorInstance;\n     }\n \n     public ConnectorInstanceTO getConnectorInstanceTO(ConnectorInstance connectorInstance) {"},{"sha":"c300ed60a0e7b7c71769e0a4fa7574444eeb41ed","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"renamed","additions":115,"deletions":6,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -23,37 +23,137 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n+import org.syncope.client.to.ResourceTO;\n+import org.syncope.client.to.ResourceTOs;\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.to.SchemaMappingTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n-public class SchemaMappingDataBinder {\n+public class ResourceDataBinder {\n \n     private static final Logger log = LoggerFactory.getLogger(\n-            SchemaMappingDataBinder.class);\n+            ResourceDataBinder.class);\n \n-    private static final String[] ignoreProperties = {\n+    private static final String[] ignoreMappingProperties = {\n         \"id\", \"userSchema\", \"roleSchema\", \"resource\"};\n \n     private SchemaDAO schemaDAO;\n \n+    private ConnectorInstanceDAO connectoInstanceDAO;\n+\n     @Autowired\n-    public SchemaMappingDataBinder(SchemaDAO schemaDAO) {\n+    public ResourceDataBinder(\n+            SchemaDAO schemaDAO, ConnectorInstanceDAO connectorInstanceDAO) {\n+\n         this.schemaDAO = schemaDAO;\n+        this.connectoInstanceDAO = connectorInstanceDAO;\n+    }\n+\n+    public Resource getResource(ResourceTO resourceTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        return getResource(new Resource(), resourceTO);\n+    }\n+\n+    public Resource getResource(Resource resource, ResourceTO resourceTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientCompositeErrorException compositeErrorException =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        SyncopeClientException requiredValuesMissing =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.RequiredValueMissing);\n+\n+        if (resourceTO == null) return null;\n+\n+        if (resourceTO.getName() == null) {\n+            requiredValuesMissing.addElement(\"name\");\n+        }\n+\n+        ConnectorInstance connector = null;\n+\n+        if (resourceTO.getConnectorId() != null) {\n+            connector = connectoInstanceDAO.find(resourceTO.getConnectorId());\n+        }\n+\n+        if (connector == null) {\n+            requiredValuesMissing.addElement(\"connector\");\n+        }\n+\n+        // Throw composite exception if there is at least one element set\n+        // in the composing exceptions\n+        if (!requiredValuesMissing.getElements().isEmpty()) {\n+            compositeErrorException.addException(requiredValuesMissing);\n+        }\n+\n+        if (compositeErrorException.hasExceptions()) {\n+            throw compositeErrorException;\n+        }\n+\n+        resource.setName(resourceTO.getName());\n+\n+        resource.setMappings(\n+                getSchemaMappings(resource, resourceTO.getMappings()));\n+\n+        resource.setConnector(connector);\n+        // TODO: to be verified\n+        //connector.addResource(resource);\n+\n+        return resource;\n+    }\n+\n+    public ResourceTOs getResourceTOs(Collection<Resource> resources) {\n+\n+        if (resources == null) return null;\n+\n+        ResourceTOs resourceTOs = new ResourceTOs();\n+\n+        for (Resource resource : resources) {\n+            resourceTOs.addResource(getResourceTO(resource));\n+        }\n+\n+        return resourceTOs;\n+    }\n+\n+    public ResourceTO getResourceTO(Resource resource) {\n+\n+        if (resource == null) return null;\n+\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        // set the resource name\n+        resourceTO.setName(resource.getName());\n+\n+        // set the connector instance\n+        ConnectorInstance connector = resource.getConnector();\n+\n+        resourceTO.setConnectorId(\n+                connector != null ? connector.getId() : null);\n+\n+        // set the mappings\n+        resourceTO.setMappings(getSchemaMappingTOs(resource.getMappings()));\n+\n+        return resourceTO;\n     }\n \n     public Set<SchemaMapping> getSchemaMappings(\n             Resource resource,\n             SchemaMappingTOs mappings) {\n \n+        if (mappings == null) return null;\n+\n         Set<SchemaMapping> schemaMappings = new HashSet<SchemaMapping>();\n \n         for (SchemaMappingTO mapping : mappings) {\n@@ -127,11 +227,20 @@ public SchemaMapping getSchemaMapping(\n         SchemaMapping schemaMapping = new SchemaMapping();\n \n         BeanUtils.copyProperties(\n-                mapping, schemaMapping, ignoreProperties);\n+                mapping, schemaMapping, ignoreMappingProperties);\n \n         schemaMapping.setResource(resource);\n+        resource.addMapping(schemaMapping);\n+\n+        // synchronize userSchema\n         schemaMapping.setUserSchema(userSchema);\n+        userSchema = schemaMapping.getUserSchema();\n+        if (userSchema != null) userSchema.addMapping(schemaMapping);\n+\n+        // synchronize roleSchema\n         schemaMapping.setRoleSchema(roleSchema);\n+        roleSchema = schemaMapping.getRoleSchema();\n+        if (roleSchema != null) roleSchema.addMapping(schemaMapping);\n \n         return schemaMapping;\n     }\n@@ -177,7 +286,7 @@ public SchemaMappingTO getSchemaMappingTO(\n         SchemaMappingTO schemaMappingTO = new SchemaMappingTO();\n \n         BeanUtils.copyProperties(\n-                schemaMapping, schemaMappingTO, ignoreProperties);\n+                schemaMapping, schemaMappingTO, ignoreMappingProperties);\n \n         if (schemaMapping.getUserSchema() != null) {\n             schemaMappingTO.setUserSchema(","previous_filename":"core/src/main/java/org/syncope/core/rest/data/SchemaMappingDataBinder.java"},{"sha":"9e76bf5252c0fdb630ebf540d152ade5e9b6c942","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -44,6 +44,8 @@\n                 mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n     <UserSchema name=\"promoThirdPartyAuth\" type=\"Boolean\" virtual=\"false\"\n                 mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n+    <UserSchema name=\"type\" type=\"String\" virtual=\"false\"\n+                mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n \n     <UserDerivedSchema name=\"username\" expression=\"firstname + '.' + surname\"/>\n \n@@ -67,4 +69,39 @@\n     <RoleAttributeValue attribute_id=\"10\" id=\"100\" stringValue=\"mobile\"/>\n     <RoleAttributeValue attribute_id=\"11\" id=\"101\" stringValue=\"e-commerce\"/>\n \n+    <ConnectorInstance id=\"1\"\n+                       bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n+                       connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n+                       version=\"0.1-SNAPSHOT\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2FsampleCode%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3EProvisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\" />\n+\n+    <Resource name=\"ws-target-resource\" connector_id=\"1\"/>\n+\n+    <Resource_SyncopeRole Resource_name=\"ws-target-resource\" roles_id=\"2\" />\n+    <SyncopeRole_Resource SyncopeRole_id=\"2\" resources_name=\"ws-target-resource\" />\n+\n+    <SchemaMapping id=\"1\" field=\"userId\"\n+                   resource_name=\"ws-target-resource\"\n+                   userSchema_name=\"userId\" nullable=\"false\"\n+                   accountid=\"true\" password=\"false\"/>\n+\n+    <SchemaMapping id=\"2\" field=\"password\"\n+                   resource_name=\"ws-target-resource\"\n+                   userSchema_name=\"userId\" nullable=\"false\"\n+                   accountid=\"false\" password=\"true\"/>\n+\n+    <SchemaMapping id=\"3\" field=\"name\"\n+                   resource_name=\"ws-target-resource\"\n+                   userSchema_name=\"firstname\" nullable=\"false\"\n+                   accountid=\"false\" password=\"false\"/>\n+\n+    <SchemaMapping id=\"4\" field=\"surname\"\n+                   resource_name=\"ws-target-resource\"\n+                   userSchema_name=\"surname\" nullable=\"false\"\n+                   accountid=\"false\" password=\"false\"/>\n+\n+    <SchemaMapping id=\"5\" field=\"type\"\n+                   resource_name=\"ws-target-resource\"\n+                   userSchema_name=\"type\" nullable=\"false\"\n+                   accountid=\"false\" password=\"false\"/>\n </dataset>"},{"sha":"e3998ce316c8d34cde0f56e8c018fbe220d443e5","filename":"core/src/test/java/org/syncope/core/test/persistence/ConnectorInstanceDAOTest.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FConnectorInstanceDAOTest.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -16,18 +16,14 @@\n \n import java.util.HashSet;\n import java.util.Set;\n-import org.identityconnectors.framework.api.ConnectorFacade;\n import static org.junit.Assert.*;\n \n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.to.PropertyTO;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n-import org.syncope.core.persistence.util.ApplicationContextManager;\n import org.syncope.core.rest.data.ConnectorInstanceDataBinder;\n \n @Transactional"},{"sha":"d60b2dbe69dc627a93ce4094f7f994fb79a2b259","filename":"core/src/test/java/org/syncope/core/test/persistence/ResourceDAOTest.java","status":"modified","additions":1,"deletions":28,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FResourceDAOTest.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -14,9 +14,6 @@\n  */\n package org.syncope.core.test.persistence;\n \n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n import static org.junit.Assert.*;\n \n@@ -26,7 +23,6 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaMappingDAO;\n@@ -81,30 +77,7 @@ public final void findById() {\n     @Test\n     public final void save() throws ClassNotFoundException {\n         Resource resource = new Resource();\n-        resource.setName(\"ws-target-resource-3\");\n-\n-        // specify the connector\n-        ConnectorInstance connector = connectorInstanceDAO.find(100L);\n-\n-        assertNotNull(\"connector not found\", connector);\n-\n-        resource.setConnector(connector);\n-\n-        // specify a mapping\n-        List<SchemaMapping> mappings = schemaMappingDAO.findAll();\n-\n-        assertNotNull(\"mappings not found\", mappings);\n-\n-        assertFalse(\"no mapping specified\", mappings.isEmpty());\n-\n-        resource.setMappings(new HashSet<SchemaMapping>(mappings));\n-\n-        // specify an user schema\n-        SyncopeUser user = syncopeUserDAO.find(1L);\n-\n-        assertNotNull(\"user not found\", user);\n-\n-        resource.setUsers(Collections.singleton(user));\n+        resource.setName(\"ws-target-resource-basic-save\");\n \n         // save the resource\n         Resource actual = resourceDAO.save(resource);"},{"sha":"62f1872a06e24eb8057395377bbb85705b3fc218","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/ResourceTest.java","status":"modified","additions":41,"deletions":24,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FResourceTest.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.test.persistence.relationships;\n \n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n@@ -26,9 +27,12 @@\n import org.syncope.core.persistence.beans.ConnectorInstance;\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.SchemaMapping;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.ConnectorInstanceDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SchemaMappingDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.test.persistence.AbstractTest;\n@@ -39,6 +43,9 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     ResourceDAO resourceDAO;\n \n+    @Autowired\n+    SchemaDAO schemaDAO;\n+\n     @Autowired\n     ConnectorInstanceDAO connectorInstanceDAO;\n \n@@ -49,9 +56,9 @@ public class ResourceTest extends AbstractTest {\n     SyncopeUserDAO syncopeUserDAO;\n \n     @Test\n-    public final void save() {\n+    public final void save() throws ClassNotFoundException {\n         Resource resource = new Resource();\n-        resource.setName(\"ws-target-resource-3\");\n+        resource.setName(\"ws-target-resource-save\");\n \n         // specify the connector\n         ConnectorInstance connector = connectorInstanceDAO.find(100L);\n@@ -62,16 +69,29 @@ public final void save() {\n         connector.addResource(resource);\n \n         // specify a mapping\n-        List<SchemaMapping> mappings = schemaMappingDAO.findAll();\n+        List<SchemaMapping> mappings = new ArrayList<SchemaMapping>();\n \n-        assertNotNull(\"mappings not found\", mappings);\n+        // search for the user schema\n+        UserSchema userSchema =\n+                schemaDAO.find(\"username\", UserSchema.class);\n \n-        assertFalse(\"no mapping specified\", mappings.isEmpty());\n+        // search for the role schema\n+        RoleSchema roleSchema = schemaDAO.find(\n+                \"icon\", RoleSchema.class);\n \n-        resource.setMappings(new HashSet<SchemaMapping>(mappings));\n+        SchemaMapping mapping = null;\n+\n+        for (int i = 0; i < 3; i++) {\n+            mapping = new SchemaMapping();\n+            mapping.setField(\"test\" + i);\n+\n+            mapping.setUserSchema(userSchema);\n+            mapping.setRoleSchema(roleSchema);\n \n-        for (SchemaMapping mapping : mappings) {\n             mapping.setResource(resource);\n+            resource.addMapping(mapping);\n+\n+            mappings.add(mapping);\n         }\n \n         // specify an user schema\n@@ -89,35 +109,32 @@ public final void save() {\n \n         resourceDAO.flush();\n \n-        // connector should be updated\n+        // retrieve resource\n+        resource = resourceDAO.find(actual.getName());\n+\n+        assertNotNull(resource);\n+\n+        // check connector\n         connector = connectorInstanceDAO.find(100L);\n \n         assertNotNull(connector);\n \n         Set<Resource> resources = connector.getResources();\n-        assertNotNull(resources);\n-        assertTrue(resources.size() > 1);\n \n-        assertTrue(resources.contains(resourceDAO.find(actual.getName())));\n+        assertNotNull(resources);\n \n-        // mapping should be updated\n-        SchemaMapping mapping = schemaMappingDAO.find(100L);\n+        assertTrue(connector.getResources().contains(resource));\n \n-        assertNotNull(mapping);\n+        assertNotNull(resource.getConnector());\n \n-        resource = mapping.getResource();\n-        assertNotNull(resource);\n-        assertEquals(resource, actual);\n+        assertTrue(resource.getConnector().equals(connector));\n \n-        // user must bu updated\n-        user = syncopeUserDAO.find(1L);\n+        // check mappings\n+        Set<SchemaMapping> schemaMappings = resource.getMappings();\n \n-        assertNotNull(user);\n+        assertNotNull(schemaMappings);\n \n-        resources = user.getResources();\n-        assertNotNull(resources);\n-        assertTrue(resources.size() == 1);\n-        assertTrue(resources.contains(actual));\n+        assertTrue(schemaMappings.size() == 3);\n     }\n \n     @Test"},{"sha":"cdf7f1a342d9e1f197886d6c72fb18086938beba","filename":"core/src/test/java/org/syncope/core/test/rest/ConnectorInstanceTestITCase.java","status":"modified","additions":24,"deletions":5,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FConnectorInstanceTestITCase.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -83,9 +83,28 @@ public void create() {\n         assertEquals(actual.getConnectorName(), connectorTO.getConnectorName());\n         assertEquals(actual.getVersion(), connectorTO.getVersion());\n \n+        Throwable t = null;\n+\n+        // check for the updating\n+\n+        connectorTO.setId(actual.getId());\n+\n+        try {\n+\n+            restTemplate.postForObject(\n+                    BASE_URL + \"connector/update.json\",\n+                    connectorTO, ConnectorInstanceTO.class);\n+\n+        } catch (HttpStatusCodeException e) {\n+            log.error(\"delete failed\", e);\n+            t = e;\n+        }\n+\n+        assertNull(t);\n+\n         // check also for the deletion of the created object\n \n-        Throwable t = null;\n+        t = null;\n \n         try {\n \n@@ -197,13 +216,13 @@ public void read() {\n         assertNotNull(connectorInstanceTO);\n     }\n \n-    //@Test\n+    @Test\n     public void check() {\n-        String verify = restTemplate.getForObject(\n+        Boolean verify = restTemplate.getForObject(\n                 BASE_URL + \"connector/check/{connectorId}.json\",\n-                String.class, \"100\");\n+                Boolean.class, 100L);\n \n-        assertEquals(verify, \"OK\");\n+        assertTrue(verify);\n     }\n \n     @Test"},{"sha":"4b5429b42e901ac02286a4292d2e0c3c39987c44","filename":"core/src/test/java/org/syncope/core/test/rest/ResourceTestITCase.java","status":"added","additions":167,"deletions":0,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FResourceTestITCase.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -0,0 +1,167 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.rest;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.to.ResourceTO;\n+import org.syncope.client.to.ResourceTOs;\n+import org.syncope.client.to.SchemaMappingTO;\n+import org.syncope.client.to.SchemaMappingTOs;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+\n+public class ResourceTestITCase extends AbstractTestITCase {\n+\n+    @Autowired\n+    SchemaDAO schemaDAO;\n+\n+    @Test\n+    public void create() {\n+        final String resourceName = \"ws-target-resource-create\";\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setName(resourceName);\n+        resourceTO.setConnectorId(100L);\n+\n+        SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n+\n+        SchemaMappingTO schemaMappingTO = null;\n+\n+        for (int i = 0; i < 3; i++) {\n+            schemaMappingTO = new SchemaMappingTO();\n+            schemaMappingTO.setField(\"test\" + i);\n+            schemaMappingTO.setUserSchema(\"username\");\n+            schemaMappingTO.setRoleSchema(\"icon\");\n+            schemaMappingTOs.addMapping(schemaMappingTO);\n+        }\n+\n+        resourceTO.setMappings(schemaMappingTOs);\n+\n+        ResourceTO actual = restTemplate.postForObject(\n+                BASE_URL + \"resource/create.json\",\n+                resourceTO, ResourceTO.class);\n+\n+        assertNotNull(actual);\n+\n+        // check the existence\n+\n+        actual = restTemplate.getForObject(\n+                BASE_URL + \"resource/read/{resourceName}.json\",\n+                ResourceTO.class,\n+                resourceName);\n+\n+        assertNotNull(actual);\n+    }\n+\n+    @Test\n+    public void updateWithException() {\n+        try {\n+\n+            ResourceTO resourceTO = new ResourceTO();\n+\n+            resourceTO.setName(\"resourcenotfound\");\n+\n+            restTemplate.postForObject(BASE_URL + \"resource/update.json\",\n+                    resourceTO, ResourceTO.class);\n+\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+    }\n+\n+    //@Test\n+    public void update() {\n+        final String resourceName = \"ws-target-resource-update\";\n+        ResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setName(resourceName);\n+        resourceTO.setConnectorId(101L);\n+\n+        SchemaMappingTOs schemaMappingTOs = new SchemaMappingTOs();\n+\n+        SchemaMappingTO schemaMappingTO = null;\n+\n+        for (int i = 3; i < 6; i++) {\n+            schemaMappingTO = new SchemaMappingTO();\n+            schemaMappingTO.setField(\"test\" + i);\n+            schemaMappingTO.setUserSchema(\"username\");\n+            schemaMappingTO.setRoleSchema(\"icon\");\n+            schemaMappingTOs.addMapping(schemaMappingTO);\n+        }\n+\n+        resourceTO.setMappings(schemaMappingTOs);\n+\n+        ResourceTO actual = restTemplate.postForObject(\n+                BASE_URL + \"resource/update.json\",\n+                resourceTO, ResourceTO.class);\n+\n+        assertNotNull(actual);\n+\n+        // check the existence\n+\n+        SchemaMappingTOs mappings = actual.getMappings();\n+\n+        assertNotNull(mappings);\n+\n+        assertTrue(mappings.getMappings().size() == 3);\n+    }\n+\n+    @Test\n+    public void deleteWithException() {\n+        try {\n+\n+            restTemplate.delete(\n+                    BASE_URL + \"resource/delete/{resourceName}.json\",\n+                    \"resourcenotfound\");\n+\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void delete() {\n+        final String resourceName = \"ws-target-resource-delete\";\n+\n+        restTemplate.delete(\n+                BASE_URL + \"resource/delete/{resourceName}.json\",\n+                resourceName);\n+\n+        try {\n+\n+            restTemplate.getForObject(\n+                    BASE_URL + \"resource/read/{resourceName}.json\",\n+                    ResourceTO.class,\n+                    resourceName);\n+\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        ResourceTOs actuals = restTemplate.getForObject(\n+                BASE_URL + \"resource/list.json\", ResourceTOs.class);\n+\n+        assertNotNull(actuals);\n+\n+        assertFalse(actuals.getResources().isEmpty());\n+    }\n+}"},{"sha":"56f9cc4b4e903f7620c431705e86c0ad6895177a","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaMappingTestITCase.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaMappingTestITCase.java?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -43,7 +43,7 @@ public void createWithException() {\n         mappings.addMapping(mapping);\n \n         restTemplate.postForObject(\n-                BASE_URL + \"mapping/create/{resourceName}.json\",\n+                BASE_URL + \"resource/{resourceName}/mappings/create.json\",\n                 mappings,\n                 SchemaMappingTOs.class,\n                 resourceName);\n@@ -67,7 +67,7 @@ public void create() {\n \n         SchemaMappingTOs actuals =\n                 (SchemaMappingTOs) restTemplate.postForObject(\n-                BASE_URL + \"mapping/create/{resourceName}.json\",\n+                BASE_URL + \"resource/{resourceName}/mappings/create.json\",\n                 mappings, SchemaMappingTOs.class, resourceName);\n \n         assertNotNull(actuals);\n@@ -77,7 +77,7 @@ public void create() {\n         // check the non existence\n \n         actuals = restTemplate.getForObject(\n-                BASE_URL + \"mapping/getResourceMapping/{resourceName}.json\",\n+                BASE_URL + \"resource/{resourceName}/mappings/list.json\",\n                 SchemaMappingTOs.class,\n                 resourceName);\n \n@@ -91,11 +91,11 @@ public void deleteWithException() {\n         try {\n \n             restTemplate.delete(\n-                    BASE_URL + \"mapping/delete/{resourceName}.json\",\n+                    BASE_URL + \"resource/{resourceName}/mappings/delete.json\",\n                     \"notfoundresourcename\");\n \n         } catch (HttpStatusCodeException e) {\n-            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -104,11 +104,11 @@ public void delete() {\n         final String resourceName = \"ws-target-resource-2\";\n \n         restTemplate.delete(\n-                BASE_URL + \"mapping/delete/{resourceName}.json\",\n+                BASE_URL + \"resource/{resourceName}/mappings/delete.json\",\n                 resourceName);\n \n         SchemaMappingTOs actuals = restTemplate.getForObject(\n-                BASE_URL + \"mapping/getResourceMapping/{resourceName}.json\",\n+                BASE_URL + \"resource/{resourceName}/mappings/list.json\",\n                 SchemaMappingTOs.class,\n                 resourceName);\n \n@@ -118,12 +118,12 @@ public void delete() {\n     }\n \n     @Test\n-    public void getRoleResourcesMapping(){\n+    public void getRoleResourcesMapping() {\n         final Long roleId = 3L;\n \n         SchemaMappingTOs actuals =\n                 restTemplate.getForObject(\n-                BASE_URL + \"mapping/getRoleResourcesMapping/{roleId}.json\",\n+                BASE_URL + \"resource/{roleName}/resources/mappings/list.json\",\n                 SchemaMappingTOs.class,\n                 roleId);\n "},{"sha":"406f7511070c85ce772cd6a0ff17dd7cefd80eb2","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bb7dbc88664f2a2df4825a0144d599de4d2ab2f0/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=bb7dbc88664f2a2df4825a0144d599de4d2ab2f0","patch":"@@ -103,10 +103,24 @@\n                        version=\"0.1-SNAPSHOT\"\n                        xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3EProvisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\" />\n \n+    <ConnectorInstance id=\"101\"\n+                       bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n+                       connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n+                       version=\"0.1-SNAPSHOT\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3EProvisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\" />\n+\n+    <ConnectorInstance id=\"102\"\n+                       bundleName=\"org.syncope.identityconnectors.bundles.staticws\"\n+                       connectorName=\"org.syncope.identityconnectors.bundles.staticwebservice.WebServiceConnector\"\n+                       version=\"0.1-SNAPSHOT\"\n+                       xmlConfiguration=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_20%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22java.util.HashSet%22%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eendpoint%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3Ehttp%3A%2F%2Flocalhost%3A8888%2Fwstarget%2Fservices%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+method%3D%22add%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.to.PropertyTO%22%3E+%0A++++%3Cvoid+property%3D%22key%22%3E+%0A+++++%3Cstring%3Eservicename%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22value%22%3E+%0A+++++%3Cstring%3EProvisioning%3C%2Fstring%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\" />\n+\n     <Resource name=\"ws-target-resource-1\" connector_id=\"100\"/>\n     <Resource name=\"ws-target-resource-2\" connector_id=\"100\"/>\n     <Resource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\"/>\n     <Resource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\"/>\n+    <Resource name=\"ws-target-resource-delete\" connector_id=\"100\"/>\n+    <Resource name=\"ws-target-resource-update\" connector_id=\"100\"/>\n \n     <Resource_SyncopeRole Resource_name=\"ws-target-resource-list-mappings-1\" roles_id=\"3\" />\n     <SyncopeRole_Resource SyncopeRole_id=\"3\" resources_name=\"ws-target-resource-list-mappings-1\" />"}]}