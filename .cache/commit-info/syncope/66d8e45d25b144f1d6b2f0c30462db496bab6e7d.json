{"sha":"66d8e45d25b144f1d6b2f0c30462db496bab6e7d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY2ZDhlNDVkMjViMTQ0ZjFkNmIyZjBjMzA0NjJkYjQ5NmJhYjZlN2Q=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-25T13:09:41Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-25T13:09:41Z"},"message":"Fixes issue 191\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247164 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"402946c6cdcc5d1e9dbec9e940ef9b7996560e79","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/402946c6cdcc5d1e9dbec9e940ef9b7996560e79"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/66d8e45d25b144f1d6b2f0c30462db496bab6e7d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66d8e45d25b144f1d6b2f0c30462db496bab6e7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/66d8e45d25b144f1d6b2f0c30462db496bab6e7d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/comments","author":null,"committer":null,"parents":[{"sha":"ccfaddb733dc9cc75486991e6e3dd4977c990942","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ccfaddb733dc9cc75486991e6e3dd4977c990942","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ccfaddb733dc9cc75486991e6e3dd4977c990942"}],"stats":{"total":152,"additions":107,"deletions":45},"files":[{"sha":"9f3688a72c2a3d35fded1e14f6628edc950af3c6","filename":"client/src/main/java/org/syncope/client/to/ConnInstanceTO.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java?ref=66d8e45d25b144f1d6b2f0c30462db496bab6e7d","patch":"@@ -16,8 +16,11 @@\n \n import org.syncope.types.ConnConfProperty;\n import java.util.EnumSet;\n+import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n+import org.codehaus.jackson.annotate.JsonIgnore;\n import org.syncope.client.AbstractBaseBean;\n import org.syncope.types.ConnectorCapability;\n \n@@ -76,6 +79,17 @@ public Set<ConnConfProperty> getConfiguration() {\n         return this.configuration;\n     }\n \n+    @JsonIgnore\n+    public Map<String, ConnConfProperty> getConfigurationMap() {\n+        Map<String, ConnConfProperty> result =\n+                new HashMap<String, ConnConfProperty>();\n+        for (ConnConfProperty prop : getConfiguration()) {\n+            result.put(prop.getSchema().getName(), prop);\n+        }\n+\n+        return result;\n+    }\n+\n     public boolean addConfiguration(ConnConfProperty property) {\n         return this.configuration.add(property);\n     }\n@@ -134,14 +148,4 @@ public String getDisplayName() {\n     public void setDisplayName(String displayName) {\n         this.displayName = displayName;\n     }\n-\n-    public boolean isPropertyPresent(final String propName) {\n-\n-        for (ConnConfProperty props : this.getConfiguration()) {\n-            if (propName.equals(props.getSchema().getName())) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n }"},{"sha":"7e63205a07569e1d8f8932617ee89777b010c5be","filename":"console/src/main/java/org/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":8,"deletions":18,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=66d8e45d25b144f1d6b2f0c30462db496bab6e7d","patch":"@@ -21,6 +21,7 @@\n import org.syncope.client.to.ConnInstanceTO;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.console.SyncopeSession;\n import org.syncope.types.ConnConfProperty;\n \n /**\n@@ -35,8 +36,8 @@ public class ConnectorRestClient extends AbstractBaseRestClient {\n      */\n     public List<ConnInstanceTO> getAllConnectors() {\n         return Arrays.asList(restTemplate.getForObject(\n-                baseURL + \"connector/list.json\",\n-                ConnInstanceTO[].class));\n+                baseURL + \"connector/list.json?lang=\" + SyncopeSession.get().\n+                getLocale(), ConnInstanceTO[].class));\n     }\n \n     /**\n@@ -45,8 +46,7 @@ public List<ConnInstanceTO> getAllConnectors() {\n      */\n     public void create(ConnInstanceTO connectorTO) {\n         restTemplate.postForObject(baseURL\n-                + \"connector/create.json\", connectorTO,\n-                ConnInstanceTO.class);\n+                + \"connector/create.json\", connectorTO, ConnInstanceTO.class);\n     }\n \n     /**\n@@ -68,22 +68,11 @@ public ConnInstanceTO read(final Long connectorInstanceId) {\n         return connectorTO;\n     }\n \n-    /**\n-     * Update an already existent connector.\n-     * @param schemaTO updated\n-     */\n     public void update(ConnInstanceTO connectorTO) {\n-        restTemplate.postForObject(\n-                baseURL + \"connector/update.json\",\n-                connectorTO,\n-                ConnInstanceTO.class);\n+        restTemplate.postForObject(baseURL + \"connector/update.json\",\n+                connectorTO, ConnInstanceTO.class);\n     }\n \n-    /**\n-     * Delete an already existent connector by its name.\n-     * @param name (e.g.:surname)\n-     * @return schemaTO\n-     */\n     public void delete(Long id) {\n         restTemplate.delete(baseURL\n                 + \"connector/delete/{connectorId}.json\", id.toString());\n@@ -94,7 +83,8 @@ public List<ConnBundleTO> getAllBundles() {\n \n         try {\n             bundles = Arrays.asList(restTemplate.getForObject(\n-                    baseURL + \"connector/bundle/list\",\n+                    baseURL + \"connector/bundle/list?lang=\"\n+                    + SyncopeSession.get().getLocale(),\n                     ConnBundleTO[].class));\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting connector bundles\", e);"},{"sha":"d44d5e708ab03257efe07d55488cf7d77df1ed63","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":21,"deletions":5,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=66d8e45d25b144f1d6b2f0c30462db496bab6e7d","patch":"@@ -16,11 +16,11 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n+import java.util.Locale;\n import javassist.NotFoundException;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n+import org.apache.commons.lang.StringUtils;\n+import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.api.ConnectorInfo;\n@@ -35,6 +35,7 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n@@ -160,8 +161,16 @@ public void delete(@PathVariable(\"connectorId\") Long connectorId)\n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n-    public List<ConnInstanceTO> list()\n+    public List<ConnInstanceTO> list(\n+            @RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException {\n+\n+        if (StringUtils.isBlank(lang)) {\n+            CurrentLocale.set(Locale.ENGLISH);\n+        } else {\n+            CurrentLocale.set(new Locale(lang));\n+        }\n+\n         List<ConnInstance> connInstances = connInstanceDAO.findAll();\n \n         List<ConnInstanceTO> connInstanceTOs =\n@@ -233,9 +242,16 @@ public ModelAndView check(@PathVariable(\"resourceName\") String resourceName)\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/bundle/list\")\n-    public List<ConnBundleTO> getBundles()\n+    public List<ConnBundleTO> getBundles(\n+            @RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException, MissingConfKeyException {\n \n+        if (StringUtils.isBlank(lang)) {\n+            CurrentLocale.set(Locale.ENGLISH);\n+        } else {\n+            CurrentLocale.set(new Locale(lang));\n+        }\n+\n         ConnectorInfoManager manager =\n                 connBundleManager.getConnectorManager();\n "},{"sha":"be81738c7b8c80ed6f551fac8e54a140f36a03f3","filename":"core/src/main/java/org/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=66d8e45d25b144f1d6b2f0c30462db496bab6e7d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.rest.data;\n \n+import java.util.Map;\n import javassist.NotFoundException;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n@@ -100,8 +101,8 @@ public ConnInstance getConnInstance(\n     }\n \n     public ConnInstance updateConnInstance(\n-            Long connectorInstanceId,\n-            ConnInstanceTO connInstanceTO)\n+            final Long connectorInstanceId,\n+            final ConnInstanceTO connInstanceTO)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeClientCompositeErrorException compositeErrorException =\n@@ -167,6 +168,7 @@ public ConnInstance updateConnInstance(\n \n     public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n             throws NotFoundException {\n+\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setId(connInstance.getId());\n \n@@ -186,12 +188,13 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n         ConnConfPropSchema connConfPropSchema;\n         ConfigurationProperty configurationProperty;\n \n+        Map<String, ConnConfProperty> connInstanceToConfMap =\n+                connInstanceTO.getConfigurationMap();\n         for (String propName : properties.getPropertyNames()) {\n+            configurationProperty = properties.getProperty(propName);\n \n-            if (!connInstanceTO.isPropertyPresent(propName)) {\n-\n+            if (!connInstanceToConfMap.containsKey(propName)) {\n                 connConfPropSchema = new ConnConfPropSchema();\n-                configurationProperty = properties.getProperty(propName);\n                 connConfPropSchema.setName(\n                         configurationProperty.getName());\n                 connConfPropSchema.setDisplayName(\n@@ -206,6 +209,10 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n                 ConnConfProperty property = new ConnConfProperty();\n                 property.setSchema(connConfPropSchema);\n                 connInstanceTO.addConfiguration(property);\n+            } else {\n+                connInstanceToConfMap.get(propName).getSchema().\n+                        setDisplayName(\n+                        configurationProperty.getDisplayName(propName));\n             }\n         }\n         return connInstanceTO;"},{"sha":"5d0542ec217ac80568d0ef79442fb25b6f8246d5","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":52,"deletions":7,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66d8e45d25b144f1d6b2f0c30462db496bab6e7d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=66d8e45d25b144f1d6b2f0c30462db496bab6e7d","patch":"@@ -14,6 +14,7 @@\n  */\n package org.syncope.core.rest;\n \n+import java.io.IOException;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -24,11 +25,11 @@\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n-\n import org.connid.bundles.soap.WebServiceConnector;\n-import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n@@ -47,18 +48,26 @@ public class ConnInstanceTestITCase extends AbstractTest {\n \n     private static String bundlesDirectory;\n \n-    @Before\n-    public void init() {\n-        Properties props = new java.util.Properties();\n+    @BeforeClass\n+    public static void init() {\n+        Properties props = new Properties();\n+        InputStream propStream = null;\n         try {\n-            InputStream propStream =\n-                    getClass().getResourceAsStream(\n+            propStream = ConnInstanceTestITCase.class.getResourceAsStream(\n                     \"/bundles.properties\");\n             props.load(propStream);\n             connidSoapVersion = props.getProperty(\"connid.soap.version\");\n             bundlesDirectory = props.getProperty(\"bundles.directory\");\n         } catch (Throwable t) {\n             LOG.error(\"Could not load bundles.properties\", t);\n+        } finally {\n+            if (propStream != null) {\n+                try {\n+                    propStream.close();\n+                } catch (IOException e) {\n+                    LOG.error(\"While reading bundles.properties\", e);\n+                }\n+            }\n         }\n         assertNotNull(connidSoapVersion);\n         assertNotNull(bundlesDirectory);\n@@ -350,4 +359,40 @@ public void checkHiddenProperty() {\n         }\n         assertTrue(check);\n     }\n+\n+    @Test\n+    public void checkSelectedLanguage() {\n+        // 1. Check Italian\n+        List<ConnInstanceTO> connectorInstanceTOs =\n+                Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"connector/list.json?lang=it\",\n+                ConnInstanceTO[].class));\n+\n+        Map<String, ConnConfProperty> instanceConfMap;\n+        for (ConnInstanceTO instance : connectorInstanceTOs) {\n+            if (\"org.connid.bundles.db.table\".equals(\n+                    instance.getBundleName())) {\n+\n+                instanceConfMap = instance.getConfigurationMap();\n+                assertEquals(\"Utente\", instanceConfMap.get(\"user\").\n+                        getSchema().getDisplayName());\n+            }\n+        }\n+\n+        // 2. Check English (default)\n+        connectorInstanceTOs =\n+                Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"connector/list.json\",\n+                ConnInstanceTO[].class));\n+\n+        for (ConnInstanceTO instance : connectorInstanceTOs) {\n+            if (\"org.connid.bundles.db.table\".equals(\n+                    instance.getBundleName())) {\n+\n+                instanceConfMap = instance.getConfigurationMap();\n+                assertEquals(\"User\", instanceConfMap.get(\"user\").\n+                        getSchema().getDisplayName());\n+            }\n+        }\n+    }\n }"}]}