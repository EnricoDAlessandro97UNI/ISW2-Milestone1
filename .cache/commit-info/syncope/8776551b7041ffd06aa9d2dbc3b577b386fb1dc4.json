{"sha":"8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjg3NzY1NTFiNzA0MWZmZDA2YWE5ZDJkYmMzYjU3N2IzODZmYjFkYzQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-23T08:54:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-23T08:54:38Z"},"message":"[SYNCOPE-938] Replacing commons-codec features with standard JDK counterparts","tree":{"sha":"ebb48d4c3d308fbc378480686baf041d642399b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ebb48d4c3d308fbc378480686baf041d642399b6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"48b2002444d6f9bfaf88a4b609e45ca494517499","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/48b2002444d6f9bfaf88a4b609e45ca494517499","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/48b2002444d6f9bfaf88a4b609e45ca494517499"}],"stats":{"total":232,"additions":114,"deletions":118},"files":[{"sha":"24b90a0a7bddbc18988a3e17f079ad6c7ee9b079","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -53,8 +53,8 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                             sessionCookieUtils.getCookie(SyncopeEnduserConstants.XSRF_COOKIE).getValue()))) {\n                 LOG.debug(\"Set XSRF-TOKEN cookie\");\n                 SyncopeEnduserSession.get().setXsrfTokenGenerated(true);\n-                sessionCookieUtils.save(SyncopeEnduserConstants.XSRF_COOKIE, SaltGenerator.generate(\n-                        SyncopeEnduserSession.get().getId()));\n+                sessionCookieUtils.save(SyncopeEnduserConstants.XSRF_COOKIE,\n+                        SaltGenerator.generate(SyncopeEnduserSession.get().getId()));\n             }\n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n             response.setWriteCallback(new WriteCallback() {"},{"sha":"d1ab28e5617bb2d306c709aca020145280a8233b","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/util/SaltGenerator.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FSaltGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FSaltGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FSaltGenerator.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.syncope.client.enduser.util;\n \n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n import java.security.SecureRandom;\n+import javax.xml.bind.DatatypeConverter;\n import org.apache.wicket.util.crypt.Base64;\n-import org.apache.commons.codec.digest.DigestUtils;\n \n public final class SaltGenerator {\n \n@@ -29,8 +31,15 @@ public static String generate(final String input) {\n         byte[] salt = new byte[16];\n         // fill array with random bytes\n         new SecureRandom().nextBytes(salt);\n-        // create digest with MD5\n-        return DigestUtils.md2Hex(input + Base64.encodeBase64String(salt));\n+        // create digest with MD2\n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(\"MD2\");\n+            return DatatypeConverter.printHexBinary(\n+                    md.digest((input + Base64.encodeBase64String(salt)).getBytes()));\n+        } catch (final NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n     }\n \n     private SaltGenerator() {"},{"sha":"ce70fc4b803ff4f119fcd537ec7a52d98a0880bf","filename":"client/lib/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/client%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/client%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fpom.xml?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -60,11 +60,6 @@ under the License.\n       <groupId>com.fasterxml.jackson.jaxrs</groupId>\n       <artifactId>jackson-jaxrs-json-provider</artifactId>\n     </dependency>  \n-    \n-    <dependency>\n-      <groupId>commons-codec</groupId>\n-      <artifactId>commons-codec</artifactId>\n-    </dependency>\n  \n     <dependency>\n       <groupId>joda-time</groupId>"},{"sha":"b99e77c58b1940772be0cf748ce2caf3258273fa","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -88,10 +88,6 @@ under the License.\n       <artifactId>aspectjweaver</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>commons-codec</groupId>\n-      <artifactId>commons-codec</artifactId>\n-    </dependency>\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-jexl3</artifactId>"},{"sha":"72f596794fa0df7a3546c82bc09296efef4ecae2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -24,8 +24,7 @@\n import java.util.HashMap;\n import java.util.Map;\n import javax.sql.DataSource;\n-import org.apache.commons.codec.DecoderException;\n-import org.apache.commons.codec.binary.Hex;\n+import javax.xml.bind.DatatypeConverter;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -138,16 +137,16 @@ private Object[] getParameters(final String tableName, final Attributes attrs) {\n                 case Types.VARBINARY:\n                 case Types.LONGVARBINARY:\n                     try {\n-                        parameters[i] = Hex.decodeHex(attrs.getValue(i).toCharArray());\n-                    } catch (DecoderException | IllegalArgumentException e) {\n+                        parameters[i] = DatatypeConverter.parseHexBinary(attrs.getValue(i));\n+                    } catch (IllegalArgumentException e) {\n                         parameters[i] = attrs.getValue(i);\n                     }\n                     break;\n \n                 case Types.BLOB:\n                     try {\n-                        parameters[i] = Hex.decodeHex(attrs.getValue(i).toCharArray());\n-                    } catch (DecoderException | IllegalArgumentException e) {\n+                        parameters[i] = DatatypeConverter.parseHexBinary(attrs.getValue(i));\n+                    } catch (IllegalArgumentException e) {\n                         LOG.warn(\"Error decoding hex string to specify a blob parameter\", e);\n                         parameters[i] = attrs.getValue(i);\n                     } catch (Exception e) {"},{"sha":"6ff27abec581dc91af3ec054fa4799b01620bab7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -42,6 +42,7 @@\n import java.util.TreeMap;\n import java.util.TreeSet;\n import javax.sql.DataSource;\n+import javax.xml.bind.DatatypeConverter;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerConfigurationException;\n@@ -69,7 +70,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n-import org.springframework.security.crypto.codec.Hex;\n import org.springframework.stereotype.Component;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n@@ -181,14 +181,14 @@ private String getValues(final ResultSet rs, final String columnName, final Inte\n                 case Types.LONGVARBINARY:\n                     final InputStream is = rs.getBinaryStream(columnName);\n                     if (is != null) {\n-                        res = new String(Hex.encode(IOUtils.toByteArray(is)));\n+                        res = DatatypeConverter.printHexBinary(IOUtils.toByteArray(is));\n                     }\n                     break;\n \n                 case Types.BLOB:\n                     final Blob blob = rs.getBlob(columnName);\n                     if (blob != null) {\n-                        res = new String(Hex.encode(IOUtils.toByteArray(blob.getBinaryStream())));\n+                        res = DatatypeConverter.printHexBinary(IOUtils.toByteArray(blob.getBinaryStream()));\n                     }\n                     break;\n "},{"sha":"9e32d02a731edaf3f18bf6c9424af2573f7ae188","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.util.Base64;\n import java.util.Date;\n import javax.persistence.Basic;\n import javax.persistence.Lob;\n@@ -26,7 +27,6 @@\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n@@ -188,7 +188,7 @@ public void parseValue(final PlainSchema schema, final String value) {\n                 break;\n \n             case Binary:\n-                this.setBinaryValue(Base64.decodeBase64(value));\n+                this.setBinaryValue(Base64.getMimeDecoder().decode(value));\n                 break;\n \n             case String:\n@@ -223,8 +223,8 @@ public <T> T getValue() {\n     public String getValueAsString() {\n         final AttrSchemaType type = getAttr() == null || getAttr().getSchema() == null\n                 || getAttr().getSchema().getType() == null\n-                        ? AttrSchemaType.String\n-                        : getAttr().getSchema().getType();\n+                ? AttrSchemaType.String\n+                : getAttr().getSchema().getType();\n \n         return getValueAsString(type);\n     }\n@@ -241,27 +241,27 @@ public String getValueAsString(final AttrSchemaType type) {\n             case Long:\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n-                                ? getLongValue().toString()\n-                                : FormatUtils.format(getLongValue(), getAttr().getSchema().getConversionPattern());\n+                        ? getLongValue().toString()\n+                        : FormatUtils.format(getLongValue(), getAttr().getSchema().getConversionPattern());\n                 break;\n \n             case Double:\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n-                                ? getDoubleValue().toString()\n-                                : FormatUtils.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());\n+                        ? getDoubleValue().toString()\n+                        : FormatUtils.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());\n                 break;\n \n             case Date:\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n-                                ? FormatUtils.format(getDateValue())\n-                                : FormatUtils.format(\n-                                        getDateValue(), false, getAttr().getSchema().getConversionPattern());\n+                        ? FormatUtils.format(getDateValue())\n+                        : FormatUtils.format(\n+                                getDateValue(), false, getAttr().getSchema().getConversionPattern());\n                 break;\n \n             case Binary:\n-                result = Base64.encodeBase64String(getBinaryValue());\n+                result = new String(Base64.getMimeEncoder().encode(getBinaryValue()));\n                 break;\n \n             case String:"},{"sha":"9b79f44119342e1615711e3a7e20d043b4955d84","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -27,6 +27,7 @@\n import java.io.UnsupportedEncodingException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.Random;\n import javax.validation.ValidationException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -43,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.crypto.codec.Base64;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n@@ -207,7 +207,7 @@ public void saveWithBinary() throws UnsupportedEncodingException {\n \n         byte[] bytes = new byte[20];\n         new Random().nextBytes(bytes);\n-        String photoB64Value = new String(Base64.encode(bytes), StandardCharsets.UTF_8);\n+        String photoB64Value = new String(Base64.getMimeEncoder().encode(bytes), StandardCharsets.UTF_8);\n \n         UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n         attr.setOwner(user);"},{"sha":"a6885d7bfbe2a684936ed872f899307377a5b5e5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeserializer.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -25,10 +25,9 @@\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Iterator;\n+import java.util.Base64;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -46,8 +45,7 @@ public Attribute deserialize(final JsonParser jp, final DeserializationContext c\n         String name = tree.get(\"name\").asText();\n \n         List<Object> values = new ArrayList<>();\n-        for (Iterator<JsonNode> itor = tree.get(\"value\").iterator(); itor.hasNext();) {\n-            JsonNode node = itor.next();\n+        for (JsonNode node : tree.get(\"value\")) {\n             if (node.isNull()) {\n                 values.add(null);\n             } else if (node.isObject()) {\n@@ -65,7 +63,7 @@ public Attribute deserialize(final JsonParser jp, final DeserializationContext c\n                 if (text.startsWith(AttributeSerializer.BYTE_ARRAY_PREFIX)\n                         && text.endsWith(AttributeSerializer.BYTE_ARRAY_SUFFIX)) {\n \n-                    values.add(Base64.decode(StringUtils.substringBetween(\n+                    values.add(Base64.getMimeDecoder().decode(StringUtils.substringBetween(\n                             text, AttributeSerializer.BYTE_ARRAY_PREFIX, AttributeSerializer.BYTE_ARRAY_SUFFIX)));\n                 } else {\n                     values.add(text);"},{"sha":"5ca1b731841278288e6e2cfa5775e7d3dbb06c8f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeSerializer.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -22,7 +22,7 @@\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n-import org.identityconnectors.common.Base64;\n+import java.util.Base64;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n@@ -59,7 +59,10 @@ public void serialize(final Attribute source, final JsonGenerator jgen, final Se\n                 } else if (value instanceof Boolean) {\n                     jgen.writeBoolean((Boolean) value);\n                 } else if (value instanceof byte[]) {\n-                    jgen.writeString(BYTE_ARRAY_PREFIX + Base64.encode((byte[]) value) + BYTE_ARRAY_SUFFIX);\n+                    jgen.writeString(\n+                            BYTE_ARRAY_PREFIX\n+                            + Base64.getMimeEncoder().encodeToString((byte[]) value)\n+                            + BYTE_ARRAY_SUFFIX);\n                 } else {\n                     jgen.writeString(value.toString());\n                 }"},{"sha":"c6251b1a4e226345e031f686ee9999339366e959","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/GuardedStringDeserializer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringDeserializer.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -24,7 +24,7 @@\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n import java.lang.reflect.Field;\n-import org.identityconnectors.common.Base64;\n+import java.util.Base64;\n import org.identityconnectors.common.security.EncryptorFactory;\n import org.identityconnectors.common.security.GuardedString;\n import org.slf4j.Logger;\n@@ -50,7 +50,7 @@ public GuardedString deserialize(final JsonParser jp, final DeserializationConte\n         }\n         byte[] encryptedBytes = null;\n         if (tree.has(\"encryptedBytes\")) {\n-            encryptedBytes = Base64.decode(tree.get(\"encryptedBytes\").asText());\n+            encryptedBytes = Base64.getMimeDecoder().decode(tree.get(\"encryptedBytes\").asText());\n         }\n         String base64SHA1Hash = null;\n         if (tree.has(\"base64SHA1Hash\")) {"},{"sha":"d55ca9f79d6061a9add0169965f4c6423c9cd71e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/GuardedStringSerializer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FGuardedStringSerializer.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -23,7 +23,7 @@\n import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n import java.lang.reflect.Field;\n-import org.identityconnectors.common.Base64;\n+import java.util.Base64;\n import org.identityconnectors.common.security.EncryptorFactory;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.common.security.SecurityUtil;\n@@ -62,7 +62,7 @@ public void serialize(final GuardedString source, final JsonGenerator jgen, fina\n \n         byte[] encryptedBytes =\n                 EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(SecurityUtil.decrypt(source).getBytes());\n-        jgen.writeStringField(\"encryptedBytes\", Base64.encode(encryptedBytes));\n+        jgen.writeStringField(\"encryptedBytes\", Base64.getMimeEncoder().encodeToString(encryptedBytes));\n \n         String base64SHA1Hash = null;\n         try {"},{"sha":"e6ee79da69e84139ff4495dda247073eab94852a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/SyncTokenDeserializer.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenDeserializer.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -24,7 +24,7 @@\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n-import org.identityconnectors.common.Base64;\n+import java.util.Base64;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n class SyncTokenDeserializer extends JsonDeserializer<SyncToken> {\n@@ -41,19 +41,19 @@ public SyncToken deserialize(final JsonParser jp, final DeserializationContext c\n             value = node.isNull()\n                     ? null\n                     : node.isBoolean()\n-                            ? node.asBoolean()\n-                            : node.isDouble()\n-                                    ? node.asDouble()\n-                                    : node.isLong()\n-                                            ? node.asLong()\n-                                            : node.isInt()\n-                                                    ? node.asInt()\n-                                                    : node.asText();\n+                    ? node.asBoolean()\n+                    : node.isDouble()\n+                    ? node.asDouble()\n+                    : node.isLong()\n+                    ? node.asLong()\n+                    : node.isInt()\n+                    ? node.asInt()\n+                    : node.asText();\n \n             if (value instanceof String) {\n                 String base64 = (String) value;\n                 try {\n-                    value = Base64.decode(base64);\n+                    value = Base64.getMimeDecoder().decode(base64);\n                 } catch (RuntimeException e) {\n                     value = base64;\n                 }"},{"sha":"0644d8f13eae20cb12409ed0fa4fbf428f1224d5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/SyncTokenSerializer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FSyncTokenSerializer.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -22,7 +22,7 @@\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n-import org.identityconnectors.common.Base64;\n+import java.util.Base64;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n class SyncTokenSerializer extends JsonSerializer<SyncToken> {\n@@ -46,7 +46,7 @@ public void serialize(final SyncToken source, final JsonGenerator jgen, final Se\n         } else if (source.getValue() instanceof Integer) {\n             jgen.writeNumber((Integer) source.getValue());\n         } else if (source.getValue() instanceof byte[]) {\n-            jgen.writeString(Base64.encode((byte[]) source.getValue()));\n+            jgen.writeString(Base64.getMimeEncoder().encodeToString((byte[]) source.getValue()));\n         } else {\n             jgen.writeString(source.getValue().toString());\n         }"},{"sha":"275b84de0e3371ce4bfe0de1f89e9e1b075d20c7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n+import java.util.Base64;\n import java.util.HashSet;\n import java.util.Optional;\n import java.util.Set;\n+import javax.xml.bind.DatatypeConverter;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -37,8 +39,6 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.crypto.codec.Base64;\n-import org.springframework.security.crypto.codec.Hex;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n@@ -71,8 +71,8 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                         && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgorithm())) {\n \n                     String password = user.getPassword().toLowerCase();\n-                    byte[] decodedPassword = Hex.decode(password);\n-                    byte[] base64EncodedPassword = Base64.encode(decodedPassword);\n+                    byte[] decodedPassword = DatatypeConverter.parseHexBinary(password);\n+                    byte[] base64EncodedPassword = Base64.getMimeEncoder().encode(decodedPassword);\n \n                     String cipherPlusPassword =\n                             (\"{\" + cipherAlgorithm.toLowerCase() + \"}\" + new String(base64EncodedPassword));"},{"sha":"ac3ddfa353509af1cf95609aed5f0057af28d721","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n+import java.util.Base64;\n+import javax.xml.bind.DatatypeConverter;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -34,8 +36,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.crypto.codec.Base64;\n-import org.springframework.security.crypto.codec.Hex;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n@@ -112,9 +112,8 @@ public void after(\n         if (entity instanceof UserTO && encodedPassword != null && cipher != null) {\n             User user = userDAO.find(entity.getKey());\n             if (user != null) {\n-                byte[] encodedPasswordBytes = Base64.decode(encodedPassword.getBytes());\n-                char[] encodedHex = Hex.encode(encodedPasswordBytes);\n-                String encodedHexStr = new String(encodedHex).toUpperCase();\n+                byte[] encodedPasswordBytes = Base64.getMimeDecoder().decode(encodedPassword.getBytes());\n+                String encodedHexStr = DatatypeConverter.printHexBinary(encodedPasswordBytes).toUpperCase();\n \n                 user.setEncodedPassword(encodedHexStr, cipher);\n             }"},{"sha":"ee802b03f87583f81385a53bec80058b344e4cd0","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/Encryptor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -22,6 +22,7 @@\n import java.nio.charset.StandardCharsets;\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n import java.util.Map;\n import java.util.Properties;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -39,7 +40,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.security.crypto.bcrypt.BCrypt;\n-import org.springframework.security.crypto.codec.Base64;\n \n public final class Encryptor {\n \n@@ -180,7 +180,7 @@ public String encode(final String value, final CipherAlgorithm cipherAlgorithm)\n                 final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n                 cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n \n-                encodedValue = new String(Base64.encode(cipher.doFinal(cleartext)));\n+                encodedValue = new String(Base64.getMimeEncoder().encode(cipher.doFinal(cleartext)));\n             } else if (cipherAlgorithm == CipherAlgorithm.BCRYPT) {\n                 encodedValue = BCrypt.hashpw(value, BCrypt.gensalt());\n             } else {\n@@ -223,7 +223,7 @@ public String decode(final String encodedValue, final CipherAlgorithm cipherAlgo\n             final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n             cipher.init(Cipher.DECRYPT_MODE, keySpec);\n \n-            value = new String(cipher.doFinal(Base64.decode(encoded)), StandardCharsets.UTF_8);\n+            value = new String(cipher.doFinal(Base64.getMimeDecoder().decode(encoded)), StandardCharsets.UTF_8);\n         }\n \n         return value;"},{"sha":"c5a9c3a5eb76d82286a517edc9683cdd611450ec","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import java.util.Base64;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -29,7 +30,6 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.apache.syncope.core.workflow.api.UserWorkflowDefinitionAdapter;\n-import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.EncryptorFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -52,13 +52,14 @@ public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter\n     protected EntityFactory entityFactory;\n \n     protected String encrypt(final String clear) {\n-        byte[] encryptedBytes = EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(clear.getBytes());\n-        return Base64.encode(encryptedBytes);\n+        byte[] encrypted = EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(clear.getBytes());\n+        return Base64.getMimeEncoder().encodeToString(encrypted);\n     }\n \n     protected String decrypt(final String crypted) {\n-        byte[] decryptedBytes = EncryptorFactory.getInstance().getDefaultEncryptor().decrypt(Base64.decode(crypted));\n-        return new String(decryptedBytes);\n+        byte[] decrypted = EncryptorFactory.getInstance().getDefaultEncryptor().\n+                decrypt(Base64.getMimeDecoder().decode(crypted));\n+        return new String(decrypted);\n     }\n \n     @Override"},{"sha":"ee84197fd63763d26d0077b3e0cc122e59c7e662","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Base64;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -31,7 +32,6 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n@@ -41,7 +41,6 @@\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.spring.BeanUtils;\n-import org.identityconnectors.common.Base64;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -165,7 +164,7 @@ private void populateItems(\n     public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         idp.setEntityID(idpTO.getEntityID());\n         idp.setName(idpTO.getName());\n-        idp.setMetadata(Base64.decode(idpTO.getMetadata()));\n+        idp.setMetadata(Base64.getMimeDecoder().decode(idpTO.getMetadata()));\n         idp.setCreateUnmatching(idpTO.isCreateUnmatching());\n         idp.setUpdateMatching(idpTO.isUpdateMatching());\n         idp.setUseDeflateEncoding(idpTO.isUseDeflateEncoding());\n@@ -186,14 +185,14 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n \n         idp.getItems().clear();\n         AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n-        for (AnyTypeClass anyTypeClass : anyTypeDAO.findUser().getClasses()) {\n+        anyTypeDAO.findUser().getClasses().forEach(anyTypeClass -> {\n             allowedSchemas.getPlainSchemas().addAll(anyTypeClass.getPlainSchemas().stream().\n                     map(s -> s.getKey()).collect(Collectors.toList()));\n             allowedSchemas.getDerSchemas().addAll(anyTypeClass.getDerSchemas().stream().\n                     map(s -> s.getKey()).collect(Collectors.toList()));\n             allowedSchemas.getVirSchemas().addAll(anyTypeClass.getVirSchemas().stream().\n                     map(s -> s.getKey()).collect(Collectors.toList()));\n-        }\n+        });\n         populateItems(idpTO, idp, allowedSchemas);\n \n         idp.getActionsClassNames().clear();\n@@ -203,7 +202,7 @@ public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n     }\n \n     private void populateItems(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n-        for (SAML2IdPItem item : idp.getItems()) {\n+        idp.getItems().forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n             BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);\n@@ -214,7 +213,7 @@ private void populateItems(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n             } else {\n                 idpTO.add(itemTO);\n             }\n-        }\n+        });\n     }\n \n     @Override\n@@ -228,7 +227,7 @@ public SAML2IdPTO getIdPTO(final SAML2IdP idp) {\n         idpTO.setBindingType(idp.getBindingType());\n         idpTO.setCreateUnmatching(idp.isCreateUnmatching());\n         idpTO.setUpdateMatching(idp.isUpdateMatching());\n-        idpTO.setMetadata(Base64.encode(idp.getMetadata()));\n+        idpTO.setMetadata(Base64.getMimeEncoder().encodeToString(idp.getMetadata()));\n \n         if (idp.getUserTemplate() != null) {\n             idpTO.setUserTemplate((UserTO) idp.getUserTemplate().get());"},{"sha":"35e3efa9b182157da6aa2bedeb9b73fa35d7b919","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -45,6 +45,7 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.Optional;\n+import java.util.regex.Pattern;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.xml.namespace.QName;\n@@ -101,6 +102,9 @@\n \n public class SAML2ITCase extends AbstractITCase {\n \n+    private static final Pattern BASE64 = Pattern.compile(\n+            \"^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\");\n+\n     private static SyncopeClient anonymous;\n \n     private static Path keystorePath;\n@@ -153,9 +157,9 @@ public static void clearIdPs() throws Exception {\n             return;\n         }\n \n-        for (SAML2IdPTO idp : saml2IdPService.list()) {\n+        saml2IdPService.list().forEach(idp -> {\n             saml2IdPService.delete(idp.getKey());\n-        }\n+        });\n \n         Files.delete(keystorePath);\n         Files.delete(truststorePath);\n@@ -203,7 +207,7 @@ public void createLoginRequest() {\n \n         assertEquals(\"https://idp.testshib.org/idp/profile/SAML2/POST/SSO\", loginRequest.getIdpServiceAddress());\n         assertNotNull(loginRequest.getContent());\n-        assertTrue(org.apache.commons.codec.binary.Base64.isBase64(loginRequest.getContent()));\n+        assertTrue(BASE64.matcher(loginRequest.getContent()).matches());\n         assertNotNull(loginRequest.getRelayState());\n     }\n \n@@ -257,7 +261,7 @@ public void validateLoginResponse() throws Exception {\n \n         assertEquals(\"https://localhost:8443/fediz-idp/saml/up\", loginRequest.getIdpServiceAddress());\n         assertNotNull(loginRequest.getContent());\n-        assertTrue(org.apache.commons.codec.binary.Base64.isBase64(loginRequest.getContent()));\n+        assertTrue(BASE64.matcher(loginRequest.getContent()).matches());\n         assertNotNull(loginRequest.getRelayState());\n \n         // Check a null relaystate"},{"sha":"5d679f7cc9d356dd889621b8c647c813a4e496ad","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":20,"deletions":16,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -27,16 +27,17 @@\n import static org.junit.Assert.fail;\n \n import java.io.IOException;\n+import java.util.Base64;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import javax.naming.NamingException;\n import javax.sql.DataSource;\n import javax.ws.rs.core.GenericType;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.cxf.common.util.Base64Utility;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -611,11 +612,11 @@ public void issueSYNCOPE265() {\n     public void issueSYNCOPE354() {\n         // change resource-ldap group mapping for including uniqueMember (need for assertions below)\n         ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n-        for (ItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getItems()) {\n-            if (\"description\".equals(item.getExtAttrName())) {\n-                item.setExtAttrName(\"uniqueMember\");\n-            }\n-        }\n+        ldap.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getItems().stream().\n+                filter(item -> (\"description\".equals(item.getExtAttrName()))).\n+                forEachOrdered(item -> {\n+                    item.setExtAttrName(\"uniqueMember\");\n+                });\n         resourceService.update(ldap);\n \n         // 1. create group with LDAP resource\n@@ -658,11 +659,11 @@ public void issueSYNCOPE354() {\n                 contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n \n         // 6. restore original resource-ldap group mapping\n-        for (ItemTO item : ldap.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getItems()) {\n-            if (\"uniqueMember\".equals(item.getExtAttrName())) {\n-                item.setExtAttrName(\"description\");\n-            }\n-        }\n+        ldap.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getItems().stream().\n+                filter(item -> (\"uniqueMember\".equals(item.getExtAttrName()))).\n+                forEachOrdered(item -> {\n+                    item.setExtAttrName(\"description\");\n+                });\n         resourceService.update(ldap);\n     }\n \n@@ -680,8 +681,8 @@ public void issueSYNCOPE357() throws IOException {\n         // 2. create user with membership of the above group\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope357@syncope.apache.org\");\n         userTO.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n-        userTO.getPlainAttrs().add(attrTO(\"photo\",\n-                Base64Utility.encode(IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n+        userTO.getPlainAttrs().add(attrTO(\"photo\", Base64.getMimeEncoder().encodeToString(\n+                IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n         userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n         userTO = createUser(userTO).getEntity();\n@@ -696,9 +697,12 @@ public void issueSYNCOPE357() throws IOException {\n         AttrTO registeredAddress = connObj.getAttr(\"registeredAddress\").get();\n         assertNotNull(registeredAddress);\n         assertEquals(userTO.getPlainAttr(\"obscure\").get().getValues(), registeredAddress.getValues());\n-        AttrTO jpegPhoto = connObj.getAttr(\"jpegPhoto\").get();\n-        assertNotNull(jpegPhoto);\n-        assertEquals(userTO.getPlainAttr(\"photo\").get().getValues(), jpegPhoto.getValues());\n+        Optional<AttrTO> jpegPhoto = connObj.getAttr(\"jpegPhoto\");\n+        assertTrue(jpegPhoto.isPresent());\n+        // difference between java.util.Base64 encoding and ConnId's\n+        assertEquals(\n+                userTO.getPlainAttr(\"photo\").get().getValues().get(0).replace(\"\\n\", \"\").replace(\"\\r\", \"\"),\n+                jpegPhoto.get().getValues().get(0));\n \n         // 4. remove group\n         groupService.delete(groupTO.getKey());"},{"sha":"8e8756c2d394d1ff012c1fedcd55421363ca7081","filename":"installer/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/installer%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/installer%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fpom.xml?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -79,10 +79,6 @@ under the License.\n       <artifactId>jackson-annotations</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>commons-codec</groupId>\n-      <artifactId>commons-codec</artifactId>\n-    </dependency>\n     <dependency>\n       <groupId>commons-logging</groupId>\n       <artifactId>commons-logging</artifactId>"},{"sha":"4d2c6024c3ce1f348125e2fd174033b217a50d48","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/PasswordGenerator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FPasswordGenerator.java?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -22,15 +22,15 @@\n import java.security.NoSuchAlgorithmException;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-import org.apache.commons.codec.binary.Hex;\n+import javax.xml.bind.DatatypeConverter;\n \n public final class PasswordGenerator {\n \n     public static String password(final String password, final String digest) {\n         String pwd = \"\";\n         try {\n             final MessageDigest cript = MessageDigest.getInstance(\"SHA-1\");\n-            pwd = new String(Hex.encodeHex(cript.digest()));\n+            pwd = DatatypeConverter.printHexBinary(cript.digest());\n         } catch (final NoSuchAlgorithmException ex) {\n             Logger.getLogger(PasswordGenerator.class.getName()).log(Level.SEVERE, \"NoSuchAlgorithmException\", ex);\n "},{"sha":"45f90421871b6af83104afa152861ce6dfddd931","filename":"installer/src/main/resources/izpack/install.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -131,7 +131,6 @@ under the License.\n   \n   <jar src=\"../syncope-installer-@{syncope.version}.jar\" stage=\"install\"/>\n   <jar src=\"lib/commons-logging-@{commons-logging.version}.jar\"/>\n-  <jar src=\"lib/commons-codec-@{commons-codec.version}.jar\"/>\n   <jar src=\"lib/commons-io-@{commons-io.version}.jar\"/>\n   <jar src=\"lib/commons-lang3-@{commons-lang.version}.jar\"/>\n   <jar src=\"lib/httpclient-@{httpclient.version}.jar\"/>"},{"sha":"de2fdeaa14f2454e4181bc4a0b0959a6424864a4","filename":"pom.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8776551b7041ffd06aa9d2dbc3b577b386fb1dc4/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=8776551b7041ffd06aa9d2dbc3b577b386fb1dc4","patch":"@@ -397,7 +397,6 @@ under the License.\n \n     <commons-io.version>2.5</commons-io.version>\n     <commons-email.version>1.5</commons-email.version>\n-    <commons-codec.version>1.10</commons-codec.version>\n     <commons-jexl.version>3.1</commons-jexl.version>\n     <commons-lang.version>3.6</commons-lang.version>\n     <commons-text.version>1.1</commons-text.version>\n@@ -949,11 +948,6 @@ under the License.\n           </exclusion>\n         </exclusions>\n       </dependency>\n-      <dependency>\n-        <groupId>commons-codec</groupId>\n-        <artifactId>commons-codec</artifactId>\n-        <version>${commons-codec.version}</version>\n-      </dependency>\n       <dependency>\n         <groupId>org.apache.commons</groupId>\n         <artifactId>commons-jexl3</artifactId>"}]}