{"sha":"ce74792223c370a5fc97cb302fbf5d874bd43d30","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNlNzQ3OTIyMjNjMzcwYTVmYzk3Y2IzMDJmYmY1ZDg3NGJkNDNkMzA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-07-13T11:30:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-07-13T11:30:31Z"},"message":"[SYNCOPE-109] Adding (temporary) JBossPersistenceMappingFactory\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1361165 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8838b81428ba25f49c74b507dc02184d6d7c65b0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8838b81428ba25f49c74b507dc02184d6d7c65b0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ce74792223c370a5fc97cb302fbf5d874bd43d30","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce74792223c370a5fc97cb302fbf5d874bd43d30","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ce74792223c370a5fc97cb302fbf5d874bd43d30","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce74792223c370a5fc97cb302fbf5d874bd43d30/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d279f6e6bf79628642e4dfb056e5e3ee18e86ddf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d279f6e6bf79628642e4dfb056e5e3ee18e86ddf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d279f6e6bf79628642e4dfb056e5e3ee18e86ddf"}],"stats":{"total":461,"additions":350,"deletions":111},"files":[{"sha":"4e727f6b206e8ef5ad9f76b25edea138d3b854ce","filename":"core/pom.xml","status":"modified","additions":9,"deletions":59,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=ce74792223c370a5fc97cb302fbf5d874bd43d30","patch":"@@ -547,7 +547,7 @@ under the License.\n               <cargo.tomcat.ajp.port>${cargo.tomcat.ajp.port}</cargo.tomcat.ajp.port>\n               <cargo.rmi.port>${cargo.rmi.port}</cargo.rmi.port>\n \n-<!--                            <cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n</cargo.jvmargs>-->\n+              <!--<cargo.jvmargs>-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n</cargo.jvmargs>-->\n               <cargo.jvmargs>-noverify ${javaagent} -Drebel.spring_plugin=false -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m</cargo.jvmargs>\n             </properties>\n             <configfiles>\n@@ -636,7 +636,7 @@ under the License.\n           <exclude>oracle/**</exclude>\n           <exclude>postgres/**</exclude>\n           <exclude>mysql/**</exclude>\n-          <exclude>glassfish/**</exclude>\n+          <exclude>sqlserver/**</exclude>\n           <exclude>jboss/**</exclude>\n         </excludes>\n       </testResource>\n@@ -1057,10 +1057,8 @@ under the License.\n       \n       <dependencies>\n         <dependency>\n-          <groupId>org.apache.syncope</groupId>\n-          <artifactId>syncope-hibernate-enhancer</artifactId>\n-          <version>${project.version}</version>\n-          <scope>provided</scope>\n+          <groupId>org.apache.openjpa</groupId>\n+          <artifactId>openjpa-all</artifactId>\n         </dependency>\n \n         <dependency>\n@@ -1078,45 +1076,6 @@ under the License.\n         <defaultGoal>clean verify</defaultGoal>\n \n         <plugins>\n-\n-          <plugin>\n-            <groupId>org.apache.openjpa</groupId>\n-            <artifactId>openjpa-maven-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <executions>\n-              <execution>\n-                <id>enhancer</id>\n-                <phase>none</phase>\n-              </execution>\n-            </executions>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.codehaus.mojo</groupId>\n-            <artifactId>exec-maven-plugin</artifactId>\n-            <inherited>true</inherited>\n-            <configuration>\n-              <classpathScope>compile</classpathScope>\n-            </configuration>\n-            <executions>\n-              <execution>\n-                <id>enhance-hibernate</id>\n-                <phase>test-compile</phase>\n-                <goals>\n-                  <goal>exec</goal>\n-                </goals>\n-                <configuration>\n-                  <executable>java</executable>\n-                  <arguments>\n-                    <argument>-classpath</argument>\n-                    <classpath />\n-                    <argument>org.apache.syncope.hibernate.HibernateEnhancer</argument>\n-                    <argument>${project.build.directory}/classes</argument>\n-                  </arguments>\n-                </configuration>\n-              </execution>\n-            </executions>\n-          </plugin>\n           \n           <plugin>\n             <groupId>org.apache.maven.plugins</groupId>\n@@ -1165,6 +1124,7 @@ under the License.\n             <directory>src/main/resources</directory>\n             <filtering>true</filtering>\n             <excludes>\n+              <exclude>persistence.properties</exclude>\n               <exclude>persistenceContextEMFactory.xml</exclude>\n             </excludes>\n           </resource>\n@@ -1173,26 +1133,16 @@ under the License.\n             <filtering>true</filtering>\n             <includes>\n               <include>persistenceContextEMFactory.xml</include>\n-              <include>persistence.properties</include>\n             </includes>\n           </resource>\n-        </resources>\n-        <testResources>\n-          <testResource>\n+          <resource>\n             <directory>src/test/resources</directory>\n             <filtering>true</filtering>\n-            <excludes>\n-              <exclude>persistence.properties</exclude>\n-            </excludes>\n-          </testResource>\n-          <testResource>\n-            <directory>src/test/resources/jboss</directory>\n-            <filtering>true</filtering>\n             <includes>\n               <include>persistence.properties</include>\n-            </includes>\n-          </testResource>\n-        </testResources>\n+            </includes>            \n+          </resource>\n+        </resources>\n       </build>\n     </profile>\n     "},{"sha":"05be7c111a9b1c86e5f982fd95ff99aa1e4c979a","filename":"core/src/main/java/org/apache/syncope/core/persistence/openjpa/JBossPersistenceMappingFactory.java","status":"added","additions":318,"deletions":0,"changes":318,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java?ref=ce74792223c370a5fc97cb302fbf5d874bd43d30","patch":"@@ -0,0 +1,318 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.openjpa;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipInputStream;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.lib.meta.ClassArgParser;\n+import org.apache.openjpa.lib.meta.ClasspathMetaDataIterator;\n+import org.apache.openjpa.lib.meta.FileMetaDataIterator;\n+import org.apache.openjpa.lib.meta.JarFileURLMetaDataIterator;\n+import org.apache.openjpa.lib.meta.MetaDataIterator;\n+import org.apache.openjpa.lib.meta.ResourceMetaDataIterator;\n+import org.apache.openjpa.lib.meta.URLMetaDataIterator;\n+import org.apache.openjpa.lib.meta.ZipFileMetaDataIterator;\n+import org.apache.openjpa.lib.meta.ZipStreamMetaDataIterator;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.persistence.PersistenceMetaDataFactory;\n+import org.apache.openjpa.persistence.jdbc.PersistenceMappingFactory;\n+\n+/**\n+ * Temporary class used while issue OPENJPA-2229 gets fixed and reaches mainstream distribution.\n+ */\n+public class JBossPersistenceMappingFactory extends PersistenceMappingFactory {\n+\n+    private static final Localizer _loc = Localizer.forPackage(PersistenceMetaDataFactory.class);\n+\n+    /**\n+     * Scan for persistent type names using the given metadata iterator.\n+     */\n+    private void scan(MetaDataIterator mitr, ClassArgParser cparser, Set names,\n+            boolean mapNames, Object debugContext)\n+            throws IOException {\n+        Map map;\n+        try {\n+            map = cparser.mapTypeNames(mitr);\n+        } finally {\n+            mitr.close();\n+        }\n+\n+        Map.Entry entry;\n+        for (Iterator itr = map.entrySet().iterator(); itr.hasNext();) {\n+            entry = (Map.Entry) itr.next();\n+            if (mapNames) {\n+                mapPersistentTypeNames(entry.getKey(), (String[]) entry.getValue());\n+            }\n+            List newNames = Arrays.asList((String[]) entry.getValue());\n+            if (log.isTraceEnabled()) {\n+                log.trace(_loc.get(\"scan-found-names\", newNames, debugContext));\n+            }\n+            names.addAll(newNames);\n+        }\n+    }\n+\n+    /**\n+     * Parse persistent type names.\n+     */\n+    @Override\n+    protected Set<String> parsePersistentTypeNames(ClassLoader loader)\n+            throws IOException {\n+        \n+        ClassArgParser cparser = newClassArgParser();\n+        String[] clss;\n+        Set<String> names = new HashSet<String>();\n+        if (files != null) {\n+            File file;\n+            for (Iterator itr = files.iterator(); itr.hasNext();) {\n+                file = (File) itr.next();\n+                if ((AccessController.doPrivileged(J2DoPrivHelper.isDirectoryAction(file))).booleanValue()) {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scanning-directory\", file));\n+                    }\n+                    scan(new FileMetaDataIterator(file, newMetaDataFilter()), cparser, names, true, file);\n+                } else if (file.getName().endsWith(\".jar\")) {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scanning-jar\", file));\n+                    }\n+                    try {\n+                        ZipFile zFile = AccessController.doPrivileged(J2DoPrivHelper.newZipFileAction(file));\n+                        scan(new ZipFileMetaDataIterator(zFile, newMetaDataFilter()), cparser, names, true, file);\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (IOException) pae.getException();\n+                    }\n+                } else {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scanning-file\", file));\n+                    }\n+                    clss = cparser.parseTypeNames(new FileMetaDataIterator(file));\n+                    List<String> newNames = Arrays.asList(clss);\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scan-found-names\", newNames, file));\n+                    }\n+                    names.addAll(newNames);\n+                    File f = AccessController.doPrivileged(J2DoPrivHelper.getAbsoluteFileAction(file));\n+                    try {\n+                        mapPersistentTypeNames(AccessController.doPrivileged(J2DoPrivHelper.toURLAction(f)), clss);\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (FileNotFoundException) pae.getException();\n+                    }\n+                }\n+            }\n+        }\n+        URL url;\n+        if (urls != null) {\n+            for (Iterator itr = urls.iterator(); itr.hasNext();) {\n+                url = (URL) itr.next();\n+                if (\"file\".equals(url.getProtocol())) {\n+                    File file = AccessController.doPrivileged(J2DoPrivHelper.getAbsoluteFileAction(\n+                            new File(url.getFile())));\n+                    if (files != null && files.contains(file)) {\n+                        continue;\n+                    } else if ((AccessController.doPrivileged(J2DoPrivHelper.isDirectoryAction(file))).booleanValue()) {\n+                        if (log.isTraceEnabled()) {\n+                            log.trace(_loc.get(\"scanning-directory\", file));\n+                        }\n+                        scan(new FileMetaDataIterator(file, newMetaDataFilter()), cparser, names, true, file);\n+                        continue;\n+                    }\n+                }\n+                // OPENJPA-2229 - begin\n+                if (\"vfs\".equals(url.getProtocol())) {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scanning-vfs-url\", url));\n+                    }\n+\n+                    URLConnection conn = url.openConnection();\n+                    Object vfsContent = conn.getContent();\n+                    try {\n+                        Class virtualFileClass = Class.forName(\"org.jboss.vfs.VirtualFile\");\n+                        Method getPhysicalFile = virtualFileClass.getDeclaredMethod(\"getPhysicalFile\");\n+                        File file = (File) getPhysicalFile.invoke(vfsContent);\n+                        scan(new FileMetaDataIterator(file, newMetaDataFilter()), cparser, names, true, file);\n+                    } catch (Exception e) {\n+                        log.error(_loc.get(\"while-scanning-vfs-url\", url), e);\n+                    }\n+\n+                    continue;\n+                }\n+                // OPENJPA-2229 - end\n+                if (\"jar\".equals(url.getProtocol())) {\n+                    if (url.getPath().endsWith(\"!/\")) {\n+                        if (log.isTraceEnabled()) {\n+                            log.trace(_loc.get(\"scanning-jar-url\", url));\n+                        }\n+                        scan(new ZipFileMetaDataIterator(url, newMetaDataFilter()), cparser, names, true, url);\n+                    } else {\n+                        if (log.isTraceEnabled()) {\n+                            log.trace(_loc.get(\"scanning-jar-url\", url));\n+                        }\n+                        scan(new JarFileURLMetaDataIterator(url, newMetaDataFilter()), cparser, names, true, url);\n+                    }\n+                } else if (url.getPath().endsWith(\".jar\")) {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scanning-jar-at-url\", url));\n+                    }\n+                    try {\n+                        InputStream is = (InputStream) AccessController.doPrivileged(\n+                                J2DoPrivHelper.openStreamAction(url));\n+                        scan(new ZipStreamMetaDataIterator(new ZipInputStream(is), newMetaDataFilter()),\n+                                cparser, names, true, url);\n+                    } catch (PrivilegedActionException pae) {\n+                        throw (IOException) pae.getException();\n+                    }\n+                } else {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scanning-url\", url));\n+                    }\n+                    clss = cparser.parseTypeNames(new URLMetaDataIterator(url));\n+                    List<String> newNames = Arrays.asList(clss);\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scan-found-names\", newNames, url));\n+                    }\n+                    names.addAll(newNames);\n+                    mapPersistentTypeNames(url, clss);\n+                }\n+            }\n+        }\n+        if (rsrcs != null) {\n+            String rsrc;\n+            MetaDataIterator mitr;\n+            for (Iterator itr = rsrcs.iterator(); itr.hasNext();) {\n+                rsrc = (String) itr.next();\n+                if (rsrc.endsWith(\".jar\")) {\n+                    url = AccessController.doPrivileged(\n+                            J2DoPrivHelper.getResourceAction(loader, rsrc));\n+                    if (url != null) {\n+                        if (log.isTraceEnabled()) {\n+                            log.trace(_loc.get(\"scanning-jar-stream-url\", url));\n+                        }\n+                        try {\n+                            InputStream is = (InputStream) AccessController.doPrivileged(\n+                                    J2DoPrivHelper.openStreamAction(url));\n+                            scan(new ZipStreamMetaDataIterator(new ZipInputStream(is), newMetaDataFilter()), cparser,\n+                                    names, true, url);\n+                        } catch (PrivilegedActionException pae) {\n+                            throw (IOException) pae.getException();\n+                        }\n+                    }\n+                } else {\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"scanning-resource\", rsrc));\n+                    }\n+                    mitr = new ResourceMetaDataIterator(rsrc, loader);\n+                    OpenJPAConfiguration conf = repos.getConfiguration();\n+                    Map peMap = null;\n+                    if (conf instanceof OpenJPAConfigurationImpl) {\n+                        peMap = ((OpenJPAConfigurationImpl) conf).getPersistenceEnvironment();\n+                    }\n+                    URL puUrl = peMap == null ? null : (URL) peMap.get(PERSISTENCE_UNIT_ROOT_URL);\n+                    List<String> mappingFileNames =\n+                            peMap == null ? null : (List<String>) peMap.get(MAPPING_FILE_NAMES);\n+                    List<URL> jars = peMap == null ? null : (List<URL>) peMap.get(JAR_FILE_URLS);\n+                    String puUrlString = puUrl == null ? null : puUrl.toString();\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(_loc.get(\"pu-root-url\", puUrlString));\n+                    }\n+\n+                    List<URL> mitrUrls = new ArrayList<URL>(3);\n+                    while (mitr.hasNext()) {\n+                        url = (URL) mitr.next();\n+                        String urlString = url.toString();\n+                        if (log.isTraceEnabled()) {\n+                            log.trace(_loc.get(\"resource-url\", urlString));\n+                        }\n+                        if (peMap != null) {\n+                            //OPENJPA-2102: decode the URL to remove such things a spaces (' ') encoded as '%20'\n+                            if (puUrlString != null && decode(urlString).indexOf(decode(puUrlString)) != -1) {\n+                                mitrUrls.add(url);\n+                            }\n+                            if (mappingFileNames != null && !mappingFileNames.isEmpty()) {\n+                                for (String mappingFileName : mappingFileNames) {\n+                                    if (log.isTraceEnabled()) {\n+                                        log.trace(_loc.get(\"mapping-file-name\", mappingFileName));\n+                                    }\n+                                    if (urlString.indexOf(mappingFileName) != -1) {\n+                                        mitrUrls.add(url);\n+                                    }\n+                                }\n+                            }\n+\n+                            if (jars != null && !jars.isEmpty()) {\n+                                for (URL jarUrl : jars) {\n+                                    if (log.isTraceEnabled()) {\n+                                        log.trace(_loc.get(\"jar-file-url\", jarUrl));\n+                                    }\n+                                    if (urlString.indexOf(jarUrl.toString()) != -1) {\n+                                        mitrUrls.add(url);\n+                                    }\n+                                }\n+                            }\n+                        } else {\n+                            mitrUrls.add(url);\n+                        }\n+                    }\n+                    mitr.close();\n+\n+                    for (Object obj : mitrUrls) {\n+                        url = (URL) obj;\n+                        clss = cparser.parseTypeNames(new URLMetaDataIterator(url));\n+                        List<String> newNames = Arrays.asList(clss);\n+                        if (log.isTraceEnabled()) {\n+                            log.trace(_loc.get(\"scan-found-names\", newNames, rsrc));\n+                        }\n+                        names.addAll(newNames);\n+                        mapPersistentTypeNames(url, clss);\n+                    }\n+                }\n+            }\n+        }\n+        if (cpath != null) {\n+            String[] dirs = (String[]) cpath.toArray(new String[cpath.size()]);\n+            scan(new ClasspathMetaDataIterator(dirs, newMetaDataFilter()), cparser, names, true, dirs);\n+        }\n+        if (types != null) {\n+            names.addAll(types);\n+        }\n+\n+        if (log.isTraceEnabled()) {\n+            log.trace(_loc.get(\"parse-found-names\", names));\n+        }\n+\n+        return names;\n+    }\n+}"},{"sha":"c5e85533d453b0728d33232fea91ef5371445461","filename":"core/src/main/resources/persistenceContextEMFactory.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=ce74792223c370a5fc97cb302fbf5d874bd43d30","patch":"@@ -36,7 +36,8 @@ under the License.\n     </property>\n     <property name=\"jpaPropertyMap\">\n       <map>\n-        <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>-->\n+        <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>\n+        <entry key=\"openjpa.ConnectionFactoryProperties\" value=\"PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n                 \n         <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n         <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>\n@@ -50,7 +51,7 @@ under the License.\n                                 \n         <entry key=\"openjpa.DataCache\" value=\"true\" />\n         <entry key=\"openjpa.QueryCache\" value=\"true\"/>\n-        <entry key=\"openjpa.RemoteCommitProvider\" value=\"sjvm\" />\n+        <entry key=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/>\n       </map>\n     </property>\n   </bean>"},{"sha":"9b47ddaf9823596fb0645184171273f2752298ad","filename":"core/src/main/webapp/WEB-INF/jboss-deployment-structure.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fjboss-deployment-structure.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fjboss-deployment-structure.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fjboss-deployment-structure.xml?ref=ce74792223c370a5fc97cb302fbf5d874bd43d30","patch":"@@ -21,10 +21,10 @@ under the License.\n <jboss-deployment-structure xmlns=\"urn:jboss:deployment-structure:1.0\">\n   <deployment>\n     <dependencies>\n-      <module name=\"org.hibernate\"/>\n       <module name=\"org.apache.xalan\"/>\n     </dependencies>\n     <exclusions>\n+      <module name=\"org.hibernate\"/>\n       <module name=\"org.slf4j\"/>\n       <module name=\"org.slf4j.impl\"/>\n     </exclusions>"},{"sha":"e4878cd9d032739fba4cb272cbde818840562d98","filename":"core/src/test/resources/jboss/persistence.properties","status":"removed","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d279f6e6bf79628642e4dfb056e5e3ee18e86ddf/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d279f6e6bf79628642e4dfb056e5e3ee18e86ddf/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2Fpersistence.properties?ref=d279f6e6bf79628642e4dfb056e5e3ee18e86ddf","patch":"@@ -1,24 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-jpa.driverClassName=org.h2.Driver\n-jpa.url=jdbc:h2:mem:syncopedb;DB_CLOSE_DELAY=1000\n-jpa.username=sa\n-jpa.password=\n-jpa.dialect=org.hibernate.dialect.H2Dialect\n-quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n-quartz.sql=tables_h2.sql\n-logback.sql=h2.sql"},{"sha":"363c75180e01925b6a8e1af5b4923eb25994ee15","filename":"core/src/test/resources/jboss/persistenceContextEMFactory.xml","status":"modified","additions":19,"deletions":25,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce74792223c370a5fc97cb302fbf5d874bd43d30/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fjboss%2FpersistenceContextEMFactory.xml?ref=ce74792223c370a5fc97cb302fbf5d874bd43d30","patch":"@@ -23,44 +23,38 @@ under the License.\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n   <bean id=\"entityManagerFactory\"\n-          class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n+        class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n     <property name=\"persistenceXmlLocation\" value=\"classpath*:META-INF/spring-persistence.xml\"/>\n     <property name=\"persistenceUnitName\" value=\"syncopePersistenceUnit\"/>\n     <property name=\"dataSource\" ref=\"dataSource\"/>\n     <property name=\"jpaVendorAdapter\">\n-      <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\">\n+      <bean class=\"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter\">\n         <property name=\"showSql\" value=\"false\"/>\n         <property name=\"generateDdl\" value=\"true\"/>\n         <property name=\"databasePlatform\" value=\"${jpa.dialect}\"/>\n       </bean>\n     </property>\n-    <property name=\"persistenceUnitPostProcessors\">\n-      <list>\n-        <bean class=\"org.apache.syncope.core.util.SpringPersistenceUnitPostProcessor\">\n-          <property name=\"locations\">\n-            <list>\n-              <value>classpath:org/apache/syncope/core/persistence/beans/*.class</value>\n-              <value>classpath:org/apache/syncope/core/persistence/beans/membership/*.class</value>\n-              <value>classpath:org/apache/syncope/core/persistence/beans/role/*.class</value>\n-              <value>classpath:org/apache/syncope/core/persistence/beans/user/*.class</value>\n-            </list>\n-          </property>\n-        </bean>\n-      </list>\n-    </property>\n     <property name=\"jpaPropertyMap\">\n       <map>\n-        <entry key=\"hibernate.listeners.envers.autoRegister\" value=\"false\"/>\n+        <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>\n+        <entry key=\"openjpa.ConnectionFactoryProperties\" value=\"PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n                 \n-        <entry key=\"hibernate.order_inserts\" value=\"true\"/>\n-        <entry key=\"hibernate.order_updates\" value=\"true\"/>\n-        <entry key=\"hibernate.id.new_generator_mappings\" value=\"true\"/>\n-        <entry key=\"hibernate.generate_statistics\" value=\"false\"/>\n+        <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n+        <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>\n \n-        <!-- Second level cache -->\n-        <entry key=\"hibernate.cache.use_second_level_cache\" value=\"false\"/>\n-        <entry key=\"hibernate.cache.use_query_cache\" value=\"false\"/>\n-        <entry key=\"hibernate.cache.use_minimal_puts\" value=\"false\"/>\n+        <entry key=\"openjpa.jdbc.SchemaFactory\" value=\"native(ForeignKeys=true)\"/>\n+        <entry key=\"openjpa.jdbc.MappingDefaults\" value=\"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict\"/>\n+                \n+        <entry key=\"openjpa.ReadLockLevel\" value=\"none\"/>\n+        <entry key=\"openjpa.WriteLockLevel\" value=\"write\"/>\n+        <entry key=\"openjpa.LockTimeout\" value=\"30000\"/>\n+                                \n+        <entry key=\"openjpa.DataCache\" value=\"true\" />\n+        <entry key=\"openjpa.QueryCache\" value=\"true\"/>\n+        <entry key=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/>\n+        \n+        <entry key=\"openjpa.MetaDataFactory\"\n+               value=\"org.apache.syncope.core.persistence.openjpa.JBossPersistenceMappingFactory(URLs=vfs:${project.build.directory}/cargo/configurations/jboss71x/deployments/${project.build.finalName}.war/WEB-INF/classes/, Resources=META-INF/orm.xml)\"/>\n       </map>\n     </property>\n   </bean>"}]}