{"sha":"066b3729df06b1c9af2a9ac24805e3cd85562878","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA2NmIzNzI5ZGYwNmIxYzlhZjJhOWFjMjQ4MDVlM2NkODU1NjI4Nzg=","commit":{"author":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-02-04T09:09:42Z"},"committer":{"name":"Christian Schneider","email":"cschneider@apache.org","date":"2013-02-04T09:09:42Z"},"message":"SYNCOPE-231 Some improvements in UserTestITCase\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1442050 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f6669d2f41abe7315adcfa2be58deaeafba9e03b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f6669d2f41abe7315adcfa2be58deaeafba9e03b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/066b3729df06b1c9af2a9ac24805e3cd85562878","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/066b3729df06b1c9af2a9ac24805e3cd85562878","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/066b3729df06b1c9af2a9ac24805e3cd85562878","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/066b3729df06b1c9af2a9ac24805e3cd85562878/comments","author":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"committer":{"login":"cschneider","id":484584,"node_id":"MDQ6VXNlcjQ4NDU4NA==","avatar_url":"https://avatars.githubusercontent.com/u/484584?v=4","gravatar_id":"","url":"https://api.github.com/users/cschneider","html_url":"https://github.com/cschneider","followers_url":"https://api.github.com/users/cschneider/followers","following_url":"https://api.github.com/users/cschneider/following{/other_user}","gists_url":"https://api.github.com/users/cschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/cschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cschneider/subscriptions","organizations_url":"https://api.github.com/users/cschneider/orgs","repos_url":"https://api.github.com/users/cschneider/repos","events_url":"https://api.github.com/users/cschneider/events{/privacy}","received_events_url":"https://api.github.com/users/cschneider/received_events","type":"User","site_admin":false},"parents":[{"sha":"8e6d66d9bacb530e52a5de62f25a8e0b55c5e2ce","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8e6d66d9bacb530e52a5de62f25a8e0b55c5e2ce","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8e6d66d9bacb530e52a5de62f25a8e0b55c5e2ce"}],"stats":{"total":159,"additions":53,"deletions":106},"files":[{"sha":"b0e73106944ab698fc638f98e5284c93ad80c786","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":53,"deletions":106,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/066b3729df06b1c9af2a9ac24805e3cd85562878/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/066b3729df06b1c9af2a9ac24805e3cd85562878/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=066b3729df06b1c9af2a9ac24805e3cd85562878","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.Assume;\n@@ -133,13 +134,7 @@ public void createUserWithNoPropagation() {\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n-        // get max task id\n-        long maxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > maxId) {\n-                maxId = task.getId();\n-            }\n-        }\n+        long maxId = getMaxTaskId(tasks);\n \n         // create a new user\n         UserTO userTO = getUniqueSampleTO(\"xxx@xxx.xxx\");\n@@ -154,13 +149,7 @@ public void createUserWithNoPropagation() {\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n-        // get max task id\n-        long newMaxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > newMaxId) {\n-                newMaxId = task.getId();\n-            }\n-        }\n+        long newMaxId = getMaxTaskId(tasks);\n \n         assertTrue(newMaxId > maxId);\n \n@@ -417,13 +406,7 @@ public void create() {\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n-        // get max task id\n-        long maxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > maxId) {\n-                maxId = task.getId();\n-            }\n-        }\n+        long maxId = getMaxTaskId(tasks);\n         PropagationTaskTO taskTO = taskService.read(TaskType.PROPAGATION, maxId);\n \n         assertNotNull(taskTO);\n@@ -470,13 +453,7 @@ public void create() {\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n-        // get max task id\n-        long newMaxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > newMaxId) {\n-                newMaxId = task.getId();\n-            }\n-        }\n+        long newMaxId = getMaxTaskId(tasks);\n \n         // default configuration for ws-target-resource2:\n         // only failed executions have to be registered\n@@ -498,12 +475,9 @@ public void create() {\n \n         // 4. try (and fail) to create another user with same (unique) values\n         userTO = getSampleTO(userTO.getUsername());\n-        for (AttributeTO attr : userTO.getAttributes()) {\n-            if (\"userId\".equals(attr.getSchema())) {\n-                attr.getValues().clear();\n-                attr.addValue(\"a.b@c.com\");\n-            }\n-        }\n+        AttributeTO userIdAttr = getManadatoryAttrByName(userTO.getAttributes(), \"userId\");\n+        userIdAttr.getValues().clear();\n+        userIdAttr.addValue(\"a.b@c.com\");\n \n         SyncopeClientException sce = null;\n         try {\n@@ -514,18 +488,20 @@ public void create() {\n         assertNotNull(sce);\n     }\n \n+    private AttributeTO getManadatoryAttrByName(List<AttributeTO> attributes, String attrName) {\n+        for (AttributeTO attr : attributes) {\n+            if (attrName.equals(attr.getSchema())) {\n+                return attr;\n+            }\n+        }\n+        throw new NotFoundException(\"Mandatory attribute \" + attrName + \" not found\");\n+    }\n+\n     @Test\n     public void createWithRequiredValueMissing() {\n         UserTO userTO = getSampleTO(\"a.b@c.it\");\n \n-        AttributeTO type = null;\n-        for (AttributeTO attr : userTO.getAttributes()) {\n-            if (\"type\".equals(attr.getSchema())) {\n-                type = attr;\n-            }\n-        }\n-        assertNotNull(type);\n-\n+        AttributeTO type = getManadatoryAttrByName(userTO.getAttributes(), \"type\");\n         userTO.removeAttribute(type);\n \n         MembershipTO membershipTO = new MembershipTO();\n@@ -544,12 +520,7 @@ public void createWithRequiredValueMissing() {\n \n         userTO.addAttribute(attributeTO(\"type\", \"F\"));\n \n-        AttributeTO surname = null;\n-        for (AttributeTO attributeTO : userTO.getAttributes()) {\n-            if (\"surname\".equals(attributeTO.getSchema())) {\n-                surname = attributeTO;\n-            }\n-        }\n+        AttributeTO surname = getManadatoryAttrByName(userTO.getAttributes(), \"surname\");\n         userTO.removeAttribute(surname);\n \n         // 2. create user without surname (mandatory when type == 'F')\n@@ -906,21 +877,11 @@ public void update() {\n         assertEquals(1, userTO.getMemberships().iterator().next().getAttributes().size());\n         assertFalse(userTO.getDerivedAttributes().isEmpty());\n \n-        boolean userIdFound = false;\n-        boolean fullnameFound = false;\n+        AttributeTO userIdAttr = getManadatoryAttrByName(userTO.getAttributes(), \"userId\");\n+        assertEquals(Collections.singletonList(newUserId), userIdAttr.getValues());\n \n-        for (AttributeTO attributeTO : userTO.getAttributes()) {\n-            if (\"userId\".equals(attributeTO.getSchema())) {\n-                userIdFound = true;\n-                assertEquals(Collections.singletonList(newUserId), attributeTO.getValues());\n-            }\n-            if (\"fullname\".equals(attributeTO.getSchema())) {\n-                fullnameFound = true;\n-                assertEquals(Collections.singletonList(newFullName), attributeTO.getValues());\n-            }\n-        }\n-        assertTrue(userIdFound);\n-        assertTrue(fullnameFound);\n+        AttributeTO fullNameAttr = getManadatoryAttrByName(userTO.getAttributes(), \"fullname\");\n+        assertEquals(Collections.singletonList(newFullName), fullNameAttr.getValues());\n     }\n \n     @Test\n@@ -967,13 +928,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n-        // get max task id\n-        long maxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > maxId) {\n-                maxId = task.getId();\n-            }\n-        }\n+        long maxId = getMaxTaskId(tasks);\n \n         // --------------------------------------\n         // Create operation\n@@ -996,13 +951,7 @@ public void verifyTaskRegistration() {\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n-        // get max task id\n-        long newMaxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > newMaxId) {\n-                newMaxId = task.getId();\n-            }\n-        }\n+        long newMaxId = getMaxTaskId(tasks);\n \n         // default configuration for ws-target-resource2:\n         // only failed executions have to be registered\n@@ -1024,14 +973,8 @@ public void verifyTaskRegistration() {\n         // get the new task list\n         tasks = (List<PropagationTaskTO>) taskService.list(TaskType.PROPAGATION);\n \n-        // get max task id\n         maxId = newMaxId;\n-        newMaxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > newMaxId) {\n-                newMaxId = task.getId();\n-            }\n-        }\n+        newMaxId = getMaxTaskId(tasks);\n \n         // default configuration for ws-target-resource2:\n         // all update executions have to be registered\n@@ -1050,14 +993,8 @@ public void verifyTaskRegistration() {\n         // get the new task list\n         tasks = (List<PropagationTaskTO>) taskService.list(TaskType.PROPAGATION);\n \n-        // get max task id\n         maxId = newMaxId;\n-        newMaxId = Long.MIN_VALUE;\n-        for (PropagationTaskTO task : tasks) {\n-            if (task.getId() > newMaxId) {\n-                newMaxId = task.getId();\n-            }\n-        }\n+        newMaxId = getMaxTaskId(tasks);\n \n         // default configuration for ws-target-resource2: no delete executions have to be registered\n         // --> no more tasks/executions should be added\n@@ -1207,8 +1144,7 @@ public void suspendReactivateOnResource() {\n         assertNotNull(dbTableUID);\n \n         ConnObjectTO connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n-                .getValues().get(0)));\n+        assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n         String ldapUID = userTO.getUsername();\n         assertNotNull(ldapUID);\n@@ -1226,8 +1162,7 @@ public void suspendReactivateOnResource() {\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n-        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n-                .getValues().get(0)));\n+        assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n         propagationRequestTO = new PropagationRequestTO();\n         propagationRequestTO.setOnSyncope(true);\n@@ -1238,8 +1173,7 @@ public void suspendReactivateOnResource() {\n         assertEquals(\"active\", userTO.getStatus());\n \n         connObjectTO = readUserConnObj(dbTable.getName(), dbTableUID);\n-        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().get(OperationalAttributes.ENABLE_NAME)\n-                .getValues().get(0)));\n+        assertTrue(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n     }\n \n     public void updateMultivalueAttribute() {\n@@ -1586,17 +1520,12 @@ public void issueSYNCOPE108() {\n         assertTrue(actual.getMemberships().isEmpty());\n         assertTrue(actual.getResources().isEmpty());\n \n-        Throwable t = null;\n-\n         try {\n             readUserConnObj(\"resource-csv\", userId);\n+            fail(\"Read should not succeeed\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n-            t = e;\n         }\n-\n-        assertNotNull(t);\n-        // -----------------------------------\n     }\n \n     @Test\n@@ -1683,14 +1612,13 @@ public void issueSYNCOPE185() {\n         userService.delete(userTO.getId());\n \n         // 3. try (and fail) to find this user on the external LDAP resource\n-        SyncopeClientException sce = null;\n         try {\n             readUserConnObj(\"resource-ldap\", userTO.getUsername());\n             fail(\"This entry should not be present on this resource\");\n         } catch (SyncopeClientCompositeErrorException sccee) {\n-            sce = sccee.getException(SyncopeClientExceptionType.NotFound);\n+            SyncopeClientException sce = sccee.getException(SyncopeClientExceptionType.NotFound);\n+            assertNotNull(sce);\n         }\n-        assertNotNull(sce);\n     }\n \n     @Test()\n@@ -1711,7 +1639,7 @@ public void issueSYNCOPE51() {\n \n         try {\n             createUser(userTO);\n-            fail();\n+            fail(\"Create user should not succeed\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             assertTrue(e.getException(SyncopeClientExceptionType.NotFound).getElements().iterator().next()\n                     .contains(\"MD5\"));\n@@ -2032,4 +1960,23 @@ public void isseSYNCOPE136Random() {\n         assertEquals(\"resource-ldap\", prop.getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n     }\n+\n+    private boolean getBooleanAttribute(ConnObjectTO connObjectTO, String attrName) {\n+        return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n+    }\n+\n+    private String getStringAttribute(ConnObjectTO connObjectTO, String attrName) {\n+        return connObjectTO.getAttributeMap().get(attrName).getValues().get(0);\n+    }\n+\n+    private long getMaxTaskId(List<PropagationTaskTO> tasks) {\n+        long newMaxId = Long.MIN_VALUE;\n+        for (PropagationTaskTO task : tasks) {\n+            if (task.getId() > newMaxId) {\n+                newMaxId = task.getId();\n+            }\n+        }\n+        return newMaxId;\n+    }\n+\n }"}]}