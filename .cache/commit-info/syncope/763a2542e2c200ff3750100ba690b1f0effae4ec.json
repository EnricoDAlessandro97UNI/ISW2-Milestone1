{"sha":"763a2542e2c200ff3750100ba690b1f0effae4ec","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc2M2EyNTQyZTJjMjAwZmYzNzUwMTAwYmE2OTBiMWYwZWZmYWU0ZWM=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-01-31T07:55:52Z"},"committer":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-01-31T07:55:52Z"},"message":"SYNCOPE-1511: only show history management action menu when wizard is in modal mode","tree":{"sha":"31c66b4fc2df843c5126229d9b7c73c468e64a64","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/31c66b4fc2df843c5126229d9b7c73c468e64a64"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/763a2542e2c200ff3750100ba690b1f0effae4ec","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEElUyo8doQ6pkfeJVxEb3Dumou+aoFAl4z3YgACgkQEb3Dumou\n+arhMAgAsXOewB6WCv/iQEPhaZpW0o78EgqZ3E3kPj0xbA6Fhc5V1jL5VnjPFDkD\ntvITZC+/Up0hqO7v/JeH9JKhY4sIyyoVzh3HUZdcQI7hrifR40I+yptPTU8xsko9\nnugrq6eU2ZvOq6VrnnY9VVFDMrHncIkSkgG3wO9QWQrophTPf9QWeFy2kBPxfcfu\nrB9TeeXIH5+UsXcWF8OtCkfnWDDs1zuPkQTFAXneU3fpQb6ZzG6cbX708YC6WLpx\ntyT/i1ea9dhg6mjsa/Pk7pqpXdV5YVBEVZv510aYughZGxn62AOo40pi8Y7zbR3E\ntF8SoQbB+4WXpTTcpx0YD+G4VfQGnQ==\n=D43K\n-----END PGP SIGNATURE-----","payload":"tree 31c66b4fc2df843c5126229d9b7c73c468e64a64\nparent b536daef6a3194166d8b697433868a167d0ccdd8\nauthor Misagh Moayyed <mm1844@gmail.com> 1580457352 +0400\ncommitter Misagh Moayyed <mm1844@gmail.com> 1580457352 +0400\n\nSYNCOPE-1511: only show history management action menu when wizard is in modal mode\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/763a2542e2c200ff3750100ba690b1f0effae4ec","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/763a2542e2c200ff3750100ba690b1f0effae4ec","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/763a2542e2c200ff3750100ba690b1f0effae4ec/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"parents":[{"sha":"b536daef6a3194166d8b697433868a167d0ccdd8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b536daef6a3194166d8b697433868a167d0ccdd8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b536daef6a3194166d8b697433868a167d0ccdd8"}],"stats":{"total":102,"additions":52,"deletions":50},"files":[{"sha":"00c35e02de73d97b53b6641c50363394e00e6c2a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java","status":"modified","additions":52,"deletions":50,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/763a2542e2c200ff3750100ba690b1f0effae4ec/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/763a2542e2c200ff3750100ba690b1f0effae4ec/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java?ref=763a2542e2c200ff3750100ba690b1f0effae4ec","patch":"@@ -256,59 +256,61 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n             }, ActionType.NOTIFICATION_TASKS, IdRepoEntitlement.TASK_LIST);\n         }\n \n-        panel.add(new ActionLink<UserTO>() {\n-\n-            private static final long serialVersionUID = -1978723352517770644L;\n-\n-            @Override\n-            public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n-                model.setObject(restClient.read(model.getObject().getKey()));\n-                target.add(altDefaultModal.setContent(new AuditHistoryModal<UserTO>(\n-                        altDefaultModal,\n-                        AuditElements.EventCategoryType.LOGIC,\n-                        \"UserLogic\",\n-                        model.getObject(),\n-                        IdRepoEntitlement.USER_UPDATE,\n-                        pageRef) {\n-\n-                    private static final long serialVersionUID = 959378158400669867L;\n-\n-                    @Override\n-                    protected void restore(final String json, final AjaxRequestTarget target) {\n-                        // The original audit record masks the password and the security\n-                        // answer; so we cannot use the audit record to resurrect the entry based on mask data.\n-                        //\n-                        // The method behavior below will reset the audit record such that the current security\n-                        // answer and the password for the object are always maintained, and such properties for the\n-                        // user cannot be restored using audit records.\n-                        UserTO original = model.getObject();\n-                        try {\n-                            UserTO updated = MAPPER.readValue(json, UserTO.class);\n-                            UserUR updateReq = AnyOperations.diff(updated, original, false);\n-                            updateReq.setPassword(null);\n-                            updateReq.setSecurityAnswer(null);\n-                            ProvisioningResult<UserTO> result = restClient.update(original.getETagValue(), updateReq);\n-                            model.getObject().setLastChangeDate(result.getEntity().getLastChangeDate());\n-\n-                            SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n-                            target.add(container);\n-                        } catch (Exception e) {\n-                            LOG.error(\"While restoring user {}\", model.getObject().getKey(), e);\n-                            SyncopeConsoleSession.get().onException(e);\n-                        }\n-                        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-                    }\n-                }));\n-\n-                altDefaultModal.header(new Model<>(\n-                        getString(\"auditHistory.title\", new Model<>(new AnyWrapper<>(model.getObject())))));\n+        if (wizardInModal) {\n+            panel.add(new ActionLink<UserTO>() {\n \n-                altDefaultModal.show(true);\n-            }\n-        }, ActionType.VIEW_AUDIT_HISTORY,\n+                          private static final long serialVersionUID = -1978723352517770644L;\n+\n+                          @Override\n+                          public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n+                              model.setObject(restClient.read(model.getObject().getKey()));\n+                              target.add(altDefaultModal.setContent(new AuditHistoryModal<UserTO>(\n+                                  altDefaultModal,\n+                                  AuditElements.EventCategoryType.LOGIC,\n+                                  \"UserLogic\",\n+                                  model.getObject(),\n+                                  IdRepoEntitlement.USER_UPDATE,\n+                                  pageRef) {\n+\n+                                  private static final long serialVersionUID = 959378158400669867L;\n+\n+                                  @Override\n+                                  protected void restore(final String json, final AjaxRequestTarget target) {\n+                                      // The original audit record masks the password and the security\n+                                      // answer; so we cannot use the audit record to resurrect the entry based on mask data.\n+                                      //\n+                                      // The method behavior below will reset the audit record such that the current security\n+                                      // answer and the password for the object are always maintained, and such properties for the\n+                                      // user cannot be restored using audit records.\n+                                      UserTO original = model.getObject();\n+                                      try {\n+                                          UserTO updated = MAPPER.readValue(json, UserTO.class);\n+                                          UserUR updateReq = AnyOperations.diff(updated, original, false);\n+                                          updateReq.setPassword(null);\n+                                          updateReq.setSecurityAnswer(null);\n+                                          ProvisioningResult<UserTO> result = restClient.update(original.getETagValue(), updateReq);\n+                                          model.getObject().setLastChangeDate(result.getEntity().getLastChangeDate());\n+\n+                                          SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n+                                          target.add(container);\n+                                      } catch (Exception e) {\n+                                          LOG.error(\"While restoring user {}\", model.getObject().getKey(), e);\n+                                          SyncopeConsoleSession.get().onException(e);\n+                                      }\n+                                      ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                                  }\n+                              }));\n+\n+                              altDefaultModal.header(new Model<>(\n+                                  getString(\"auditHistory.title\", new Model<>(new AnyWrapper<>(model.getObject())))));\n+\n+                              altDefaultModal.show(true);\n+                          }\n+                      }, ActionType.VIEW_AUDIT_HISTORY,\n                 String.format(\"%s,%s\", IdRepoEntitlement.USER_READ, IdRepoEntitlement.AUDIT_LIST)).\n                 setRealms(realm, model.getObject().getDynRealms());\n-\n+        }\n+        \n         panel.add(new ActionLink<UserTO>() {\n \n             private static final long serialVersionUID = -7978723352517770644L;"}]}