{"sha":"47af7b55368583850e4064a324a4c73ccf649b0d","node_id":"C_kwDOJfYA1toAKDQ3YWY3YjU1MzY4NTgzODUwZTQwNjRhMzI0YTRjNzNjY2Y2NDliMGQ","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-08-30T15:04:38Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-08-30T15:04:38Z"},"message":"[SYNCOPE-1692] Refactoring the propagation process to allow for ConnId's updateDelta (#370)","tree":{"sha":"abf81247328c4d87f69200ac17ed6be9a5dc3cb7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/abf81247328c4d87f69200ac17ed6be9a5dc3cb7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/47af7b55368583850e4064a324a4c73ccf649b0d","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDicGCRBK7hj4Ov3rIwAAtMMIAJK54w6FBqQ9wEIm3XhAIwBI\neo8YVGr5IwqQBG0s2xX/RgjJTc1gyiWwQSQxij9jxZwnYbFtKuiLneteIfr3jrJv\nPlIocqGZf3ehBFYtECv8BIUmew/9Z9bhYWBZuQVQRhOoZEO0+DAUezHdtL/3kPQB\nM+l8ZXLiEALbpm3ChW5FhCoUhQ2++wWyF+QPN8omklfltPyNKFlvT/Kn+63orbKC\nVAPQtuTycysGe16G0/Xj56cFx9tS0nLTlEpLAFhiFKrFgRB7FLc1nohKsW9IzGqR\n75Fp6wZy7wwLjV1Gbcg8A6qVwanThmAZU2Zwt/G478psL2YUrQaVHXlXeWdbbLQ=\n=vdqp\n-----END PGP SIGNATURE-----\n","payload":"tree abf81247328c4d87f69200ac17ed6be9a5dc3cb7\nparent 891ed10b74e20cbcbdfc6a0782031ea1b85a3e12\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1661871878 +0200\ncommitter GitHub <noreply@github.com> 1661871878 +0200\n\n[SYNCOPE-1692] Refactoring the propagation process to allow for ConnId's updateDelta (#370)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47af7b55368583850e4064a324a4c73ccf649b0d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/47af7b55368583850e4064a324a4c73ccf649b0d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47af7b55368583850e4064a324a4c73ccf649b0d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"891ed10b74e20cbcbdfc6a0782031ea1b85a3e12","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/891ed10b74e20cbcbdfc6a0782031ea1b85a3e12","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/891ed10b74e20cbcbdfc6a0782031ea1b85a3e12"}],"stats":{"total":3168,"additions":2050,"deletions":1118},"files":[{"sha":"d466abe3e07689a676ce4b84455937ef169c5b48","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMExternalResourceProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMExternalResourceProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMExternalResourceProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMExternalResourceProvider.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -21,14 +21,14 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.ResourceRestClient;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n \n public class IdMExternalResourceProvider implements ExternalResourceProvider {\n \n     private static final long serialVersionUID = 6335503820405008093L;\n \n     @Override\n     public List<String> get() {\n-        return ResourceRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n+        return ResourceRestClient.list().stream().map(ResourceTO::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"bb77291f98d844b1e318a137f92785225ca6cf2a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/commons/IdMImplementationInfoProvider.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdMImplementationInfoProvider.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.wicket.model.IModel;\n@@ -138,7 +137,7 @@ public IModel<List<String>> getReconFilterBuilders() {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdMImplementationType.RECON_FILTER_BUILDER).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n     }\n@@ -152,7 +151,7 @@ public IModel<List<String>> getPullActions() {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n     }\n@@ -166,7 +165,7 @@ public IModel<List<String>> getPushActions() {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n     }"},{"sha":"c3397359363a632c802857f47ab6a4878157b456","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/LinkedAccountModalPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLinkedAccountModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLinkedAccountModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLinkedAccountModalPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -46,7 +46,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.LinkedAccountUR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -102,7 +102,7 @@ public LinkedAccountModalPanel(\n         add(actionTogglePanel);\n \n         AnyLayout anyLayout = AnyLayoutUtils.fetch(\n-                AnyTypeRestClient.listAnyTypes().stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+                AnyTypeRestClient.listAnyTypes().stream().map(AnyTypeTO::getKey).collect(Collectors.toList()));\n         LinkedAccountFormLayoutInfo linkedAccountFormLayoutInfo =\n                 anyLayout.getUser() instanceof IdMUserFormLayoutInfo\n                 ? IdMUserFormLayoutInfo.class.cast(anyLayout.getUser()).getLinkedAccountFormLayoutInfo()"},{"sha":"9025e07afcb4a992fafcfdf522418ca90851b9cd","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -103,6 +102,6 @@ private static List<String> getSchemas(final AnyTypeTO anyType, final List<Strin\n \n         return SchemaRestClient.<PlainSchemaTO>getSchemas(\n                 SchemaType.PLAIN, null, classes.toArray(String[]::new)).\n-                stream().map(EntityTO::getKey).collect(Collectors.toList());\n+                stream().map(PlainSchemaTO::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"7d1da310c5c9516d91f6369fdce11d25b18557d0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n@@ -59,7 +58,7 @@ public VirSchemaDetails(final String id, final VirSchemaTO schemaTO) {\n         AjaxDropDownChoicePanel<String> resource = new AjaxDropDownChoicePanel<>(\n                 \"resource\", getString(\"resource\"), new PropertyModel<String>(schemaTO, \"resource\"), false).\n                 setNullValid(false);\n-        resource.setChoices(ResourceRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+        resource.setChoices(ResourceRestClient.list().stream().map(ResourceTO::getKey).collect(Collectors.toList()));\n         resource.setOutputMarkupId(true);\n         resource.addRequiredLabel();\n         if (resource.getModelObject() != null) {"},{"sha":"29d24a4121507a13ccd3aed6288c2f29bc653d5e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/PropagationPolicyDirectoryPanel.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPropagationPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPropagationPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPropagationPolicyDirectoryPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -47,7 +47,11 @@ public PropagationPolicyDirectoryPanel(final String id, final PageReference page\n \n     @Override\n     protected void addCustomColumnFields(final List<IColumn<PropagationPolicyTO, String>> columns) {\n-        columns.add(new BooleanPropertyColumn<>(new StringResourceModel(\"prefetch\", this), \"prefetch\", \"prefetch\"));\n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"maxAttempts\", this), \"maxAttempts\", \"maxAttempts\"));\n+        columns.add(new BooleanPropertyColumn<>(new StringResourceModel(\n+                \"fetchAroundProvisioning\", this), \"fetchAroundProvisioning\", \"fetchAroundProvisioning\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"updateDelta\", this), \"updateDelta\", \"updateDelta\"));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(\"maxAttempts\", this), \"maxAttempts\", \"maxAttempts\"));\n     }\n }"},{"sha":"6911359f4c73b4543394933b5e4f2e0115e5f9c0","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -47,8 +47,8 @@\n import org.apache.syncope.common.lib.policy.DefaultPushCorrelationRuleConf;\n import org.apache.syncope.common.lib.policy.ProvisioningPolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n@@ -92,7 +92,7 @@ protected Map<String, ImplementationTO> load() {\n                 return ImplementationRestClient.list(policyTO instanceof PullPolicyTO\n                         ? IdMImplementationType.PULL_CORRELATION_RULE\n                         : IdMImplementationType.PUSH_CORRELATION_RULE).stream().\n-                        collect(Collectors.toMap(EntityTO::getKey, Function.identity()));\n+                        collect(Collectors.toMap(ImplementationTO::getKey, Function.identity()));\n             }\n         };\n \n@@ -313,7 +313,7 @@ private List<String> getSchemas(final CorrelationRule rule) {\n                             ? AnyTypeKind.USER\n                             : rule.getAnyType().equals(AnyTypeKind.GROUP.name())\n                             ? AnyTypeKind.GROUP\n-                            : AnyTypeKind.ANY_OBJECT).stream().map(EntityTO::getKey).\n+                            : AnyTypeKind.ANY_OBJECT).stream().map(SchemaTO::getKey).\n                             collect(Collectors.toList());\n             choices.add(Constants.KEY_FIELD_NAME);\n             choices.add(rule.getAnyType().equals(AnyTypeKind.USER.name())"},{"sha":"7c45f5c99b3efc9b51bbbca7f87f476e0daf963e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/AnyStatusDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FAnyStatusDirectoryPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -45,11 +45,11 @@\n import org.apache.syncope.client.ui.commons.status.StatusUtils;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconStatus;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdMEntitlement;\n@@ -113,7 +113,7 @@ public AnyStatusDirectoryPanel(\n \n         resources = ResourceRestClient.list().stream().\n                 filter(resource -> resource.getProvision(anyTO.getType()).isPresent()).\n-                map(EntityTO::getKey).collect(Collectors.toList());\n+                map(ResourceTO::getKey).collect(Collectors.toList());\n \n         initResultTable();\n     }"},{"sha":"1b7e76f473ae3a8eea7a968e3e2f2aca98baa8b1","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/status/ReconTaskPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FReconTaskPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -72,7 +72,7 @@ public class ReconTaskPanel extends MultilevelPanel.SecondLevel {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n-                map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n \n@@ -83,7 +83,7 @@ protected List<String> load() {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n-                map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n "},{"sha":"00e45bb94dd30af0145e47d65002956d4a4af2f7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/CSVPullWizardBuilder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPullWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n@@ -236,7 +236,7 @@ public class PullTask extends WizardStep {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdMImplementationType.PULL_ACTIONS).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n \n@@ -247,7 +247,7 @@ protected List<String> load() {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdMImplementationType.PULL_CORRELATION_RULE).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n "},{"sha":"189217bef35c0b7919aa9e1fa3fa8ef7b03c6279","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/CSVPushWizardBuilder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FCSVPushWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.rest.ResponseHolder;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -114,7 +114,7 @@ public static class PushTask extends WizardStep {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdMImplementationType.PROPAGATION_ACTIONS).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                        map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n \n@@ -125,7 +125,7 @@ protected List<String> load() {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdMImplementationType.PUSH_ACTIONS).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                        map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n "},{"sha":"03bb66fbbb55772384e47db59b95b9094acd035b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceDetailsPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceDetailsPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -59,7 +59,7 @@ public class ResourceDetailsPanel extends WizardStep {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(IdMImplementationType.PROPAGATION_ACTIONS).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n \n@@ -70,7 +70,7 @@ protected List<String> load() {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(IdMImplementationType.PROVISION_SORTER).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n "},{"sha":"dd12dffa5208557e46242dba51d57192332ecf9c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoImplementationInfoProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoImplementationInfoProvider.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n@@ -164,7 +163,7 @@ public IModel<List<String>> getTaskJobDelegates() {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n     }"},{"sha":"c7deb84328c37d5eb3e848ff44a352783fbb8e53","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -47,7 +47,8 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n@@ -134,7 +135,7 @@ public Details(final NotificationWrapper modelObject) {\n                     \"template\", getString(\"template\"),\n                     new PropertyModel<>(notificationTO, \"template\"));\n             template.setChoices(restClient.listTemplates().stream().\n-                    map(EntityTO::getKey).collect(Collectors.toList()));\n+                    map(MailTemplateTO::getKey).collect(Collectors.toList()));\n \n             template.addRequiredLabel();\n             add(template);\n@@ -332,7 +333,7 @@ public class Recipients extends WizardStep {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdRepoImplementationType.RECIPIENTS_PROVIDER).stream().\n-                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                        map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n \n@@ -396,11 +397,11 @@ private static List<String> getSchemas() {\n         result.add(Constants.USERNAME_FIELD_NAME);\n \n         result.addAll(SchemaRestClient.<PlainSchemaTO>getSchemas(SchemaType.PLAIN, null, anyTypeClasses).\n-                stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+                stream().map(PlainSchemaTO::getKey).collect(Collectors.toList()));\n         result.addAll(SchemaRestClient.<DerSchemaTO>getSchemas(SchemaType.DERIVED, null, anyTypeClasses).\n-                stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+                stream().map(DerSchemaTO::getKey).collect(Collectors.toList()));\n         result.addAll(SchemaRestClient.<VirSchemaTO>getSchemas(SchemaType.VIRTUAL, null, anyTypeClasses).\n-                stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+                stream().map(VirSchemaTO::getKey).collect(Collectors.toList()));\n \n         Collections.sort(result);\n         return result;"},{"sha":"4142be23fd82cea6584125fd53ef5e8967e3c860","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyTypeDetailsPanel.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyTypeDetailsPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -25,8 +25,8 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.Form;\n@@ -42,23 +42,23 @@ public class AnyTypeDetailsPanel extends Panel {\n     public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n         super(id);\n \n-        final WebMarkupContainer container = new WebMarkupContainer(\"container\");\n+        WebMarkupContainer container = new WebMarkupContainer(\"container\");\n         container.setOutputMarkupId(true);\n         add(container);\n \n-        final Form<AnyTypeTO> form = new Form<>(\"form\");\n+        Form<AnyTypeTO> form = new Form<>(\"form\");\n         form.setModel(new CompoundPropertyModel<>(anyTypeTO));\n         container.add(form);\n \n-        final AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n+        AjaxTextFieldPanel key = new AjaxTextFieldPanel(\n                 Constants.KEY_FIELD_NAME,\n                 getString(Constants.KEY_FIELD_NAME),\n                 new PropertyModel<>(anyTypeTO, Constants.KEY_FIELD_NAME));\n         key.addRequiredLabel();\n         key.setEnabled(key.getModelObject() == null || key.getModelObject().isEmpty());\n         form.add(key);\n \n-        final AjaxDropDownChoicePanel<AnyTypeKind> kind = new AjaxDropDownChoicePanel<>(\n+        AjaxDropDownChoicePanel<AnyTypeKind> kind = new AjaxDropDownChoicePanel<>(\n                 \"kind\", getString(\"kind\"), new PropertyModel<>(anyTypeTO, \"kind\"));\n         kind.setChoices(List.of(AnyTypeKind.values()));\n         kind.setOutputMarkupId(true);\n@@ -73,7 +73,7 @@ public AnyTypeDetailsPanel(final String id, final AnyTypeTO anyTypeTO) {\n                 new ListModel<>(getAvailableAnyTypeClasses())).hideLabel().setOutputMarkupId(true));\n     }\n \n-    private static List<String> getAvailableAnyTypeClasses() {\n-        return AnyTypeClassRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n+    protected List<String> getAvailableAnyTypeClasses() {\n+        return AnyTypeClassRestClient.list().stream().map(AnyTypeClassTO::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"eaad62752cdf31bbcce5cb4c3f00f0e97b02e991","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ApplicationDirectoryPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FApplicationDirectoryPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ApplicationTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PrivilegeTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.MarkupContainer;\n@@ -144,7 +143,7 @@ public void populateItem(\n                 final IModel<ApplicationTO> rowModel) {\n \n                 item.add(new Label(componentId, '[' + rowModel.getObject().getPrivileges().stream().\n-                    map(EntityTO::getKey).collect(Collectors.joining(\", \")) + ']'));\n+                    map(PrivilegeTO::getKey).collect(Collectors.joining(\", \")) + ']'));\n             }\n         });\n "},{"sha":"6e6d5b028a45cf2f32f6d8c5af1c1953241dec37","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -53,7 +53,6 @@\n import org.apache.syncope.common.lib.Schema;\n import org.apache.syncope.common.lib.report.SearchCondition;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.PageReference;\n@@ -207,7 +206,7 @@ protected void populateItem(final ListItem<String> item) {\n                         panel = new AjaxPalettePanel.Builder<>().setName(fieldName).build(\n                                 \"value\",\n                                 new PropertyModel<>(bean.getObject(), fieldName),\n-                                new ListModel<>(choices.stream().map(EntityTO::getKey).collect(Collectors.toList()))).\n+                                new ListModel<>(choices.stream().map(SchemaTO::getKey).collect(Collectors.toList()))).\n                                 hideLabel();\n                     } else if (listItemType.isEnum()) {\n                         panel = new AjaxPalettePanel.Builder<>().setName(fieldName).build("},{"sha":"bfcfeb3076adaab798353b52be805cbb3da446fd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -255,7 +255,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdRepoImplementationType.VALIDATOR).stream().\n-                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                        map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n         validator = new AjaxDropDownChoicePanel<>(\"validator\","},{"sha":"d535679cc3a604a83f8b6e1b961c652e2845716b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -57,7 +57,7 @@ public class RealmDetails extends Panel {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(IdRepoImplementationType.LOGIC_ACTIONS).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n "},{"sha":"d9a17632c77c7bf310c1e0a7c614d65f00f56ae0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -25,7 +25,8 @@\n import org.apache.syncope.client.console.rest.RoleRestClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.PrivilegeTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.model.IModel;\n@@ -73,7 +74,7 @@ protected void populate() {\n \n             @Override\n             protected List<String> load() {\n-                return RoleRestClient.list().stream().map(EntityTO::getKey).collect(Collectors.toList());\n+                return RoleRestClient.list().stream().map(RoleTO::getKey).collect(Collectors.toList());\n             }\n         };\n \n@@ -85,7 +86,7 @@ protected List<String> load() {\n             protected List<String> load() {\n                 return ApplicationRestClient.list().stream().\n                         flatMap(application -> application.getPrivileges().stream()).\n-                        map(EntityTO::getKey).collect(Collectors.toList());\n+                        map(PrivilegeTO::getKey).collect(Collectors.toList());\n             }\n         };\n     }"},{"sha":"1b9e2c10b56e04a3bab62ad9adf65cbbb7895a3b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -180,8 +180,14 @@ protected List<String> load() {\n                 case PROPAGATION:\n                     fields.add(new AjaxCheckBoxPanel(\n                             \"field\",\n-                            \"prefetch\",\n-                            new PropertyModel<>(policyTO, \"prefetch\"),\n+                            \"fetchAroundProvisioning\",\n+                            new PropertyModel<>(policyTO, \"fetchAroundProvisioning\"),\n+                            false));\n+\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\",\n+                            \"updateDelta\",\n+                            new PropertyModel<>(policyTO, \"updateDelta\"),\n                             false));\n \n                     fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build("},{"sha":"4a031a5638b6988d78d23880de02ab8e025e5264","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.common.lib.policy.ComposablePolicy;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.RuleConf;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n@@ -126,12 +125,12 @@ public Profile(final PolicyRuleWrapper rule) {\n             switch (type) {\n                 case ACCOUNT:\n                     choices = ImplementationRestClient.list(IdRepoImplementationType.ACCOUNT_RULE).stream().\n-                            map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                            map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n                     break;\n \n                 case PASSWORD:\n                     choices = ImplementationRestClient.list(IdRepoImplementationType.PASSWORD_RULE).stream().\n-                            map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                            map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n                     break;\n \n                 default:"},{"sha":"0bbb6af67258341c919b8ffdccde06fe491b94b8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -27,8 +27,8 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -80,7 +80,7 @@ public Profile(final ReportTO reportTO) {\n                     \"template\", getString(\"template\"),\n                     new PropertyModel<>(reportTO, \"template\"));\n             template.setChoices(restClient.listTemplates().stream().\n-                    map(EntityTO::getKey).collect(Collectors.toList()));\n+                    map(ReportTemplateTO::getKey).collect(Collectors.toList()));\n \n             template.addRequiredLabel();\n             add(template);"},{"sha":"74f7be76641ce6e636dc0a3ff450384c69c7df30","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.common.lib.report.ReportletConf;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n@@ -99,7 +98,7 @@ public Profile(final ReportletWrapper reportlet) {\n                     \"reportlet\", getString(\"reportlet\"), new PropertyModel<>(reportlet, \"implementationKey\"));\n \n             conf.setChoices(ImplementationRestClient.list(IdRepoImplementationType.REPORTLET).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList()));\n+                    map(ImplementationTO::getKey).sorted().collect(Collectors.toList()));\n             conf.addRequiredLabel();\n             conf.setNullValid(false);\n             conf.setEnabled(reportlet.isNew());"},{"sha":"7caf80cca91adf4fed53476509ff49b0f5262e35","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/AnyPropagationTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -59,7 +59,7 @@ protected void viewTaskDetails(final PropagationTaskTO taskTO, final AjaxRequest\n                 mlp.next(\n                         new StringResourceModel(\"task.view.details\", this, new Model<>(Pair.of(null, taskTO))).\n                                 getObject(),\n-                        new TaskAttributesDetailsView(taskTO),\n+                        new PropagationDataView(taskTO),\n                         target);\n             }\n         });"},{"sha":"8c08f87d8ac0ad37306edbace39ae4a5fd0fc60c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationDataView.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationDataView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationDataView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationDataView.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -33,15 +33,15 @@\n /**\n  * Task attributes details.\n  */\n-public class TaskAttributesDetailsView extends MultilevelPanel.SecondLevel {\n+public class PropagationDataView extends MultilevelPanel.SecondLevel {\n \n     private static final long serialVersionUID = -4110576026663173545L;\n \n     private static final Logger LOG = LoggerFactory.getLogger(AnyPropagationTasks.class);\n \n     private static final JsonMapper MAPPER = JsonMapper.builder().findAndAddModules().build();\n \n-    public TaskAttributesDetailsView(final PropagationTaskTO taskTO) {\n+    public PropagationDataView(final PropagationTaskTO taskTO) {\n         super();\n \n         Pair<String, String> info = Pair.of(taskTO.getEntityKey(), getJSONInfo(taskTO));\n@@ -63,7 +63,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n     private static String getJSONInfo(final PropagationTaskTO taskTO) {\n         String json = \"\";\n         try {\n-            JsonNode list = MAPPER.readTree(taskTO.getAttributes());\n+            JsonNode list = MAPPER.readTree(taskTO.getPropagationData());\n             json = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(list);\n         } catch (IOException ex) {\n             LOG.error(\"Error converting objects to JSON\", ex);","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/TaskAttributesDetailsView.java"},{"sha":"b6d7b9f430916fbc5da08b4f98b8eaa6ee80a3b0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PropagationTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationTasks.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -58,7 +58,7 @@ protected void viewTaskDetails(final PropagationTaskTO taskTO, final AjaxRequest\n                 tasks.next(\n                         new StringResourceModel(\"task.view.details\", this, new Model<>(Pair.of(null, taskTO))).\n                                 getObject(),\n-                        new TaskAttributesDetailsView(taskTO),\n+                        new PropagationDataView(taskTO),\n                         target);\n             }\n         });"},{"sha":"e12238b8d2350ebe55ea32c97eb7bc74eef727d6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.Attr;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n@@ -78,7 +78,7 @@ private List<MembershipTO> loadMemberships() {\n             ((List<MembershipTO>) PropertyResolver.getPropertyField(\"memberships\", anyTO).get(anyTO)).forEach(memb -> {\n                 setSchemas(memb.getGroupKey(),\n                         AnyTypeClassRestClient.list(getMembershipAuxClasses(memb, anyTO.getType())).\n-                                stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+                                stream().map(AnyTypeClassTO::getKey).collect(Collectors.toList()));\n                 setAttrs(memb);\n \n                 if (this instanceof PlainAttrs && !memb.getPlainAttrs().isEmpty()) {"},{"sha":"d4c2b60ccc8b30691a69c0d8d4520e67472a6386","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrsWizardStep.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -51,7 +51,7 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -112,7 +112,7 @@ public AbstractAttrsWizardStep(\n     protected List<Attr> loadAttrs() {\n         List<String> classes = new ArrayList<>(anyTypeClasses);\n         classes.addAll(AnyTypeClassRestClient.list(anyTO.getAuxClasses()).stream().\n-                map(EntityTO::getKey).collect(Collectors.toList()));\n+                map(AnyTypeClassTO::getKey).collect(Collectors.toList()));\n         setSchemas(classes);\n         setAttrs();\n         return getAttrsFromTO();"},{"sha":"e9642c57543d2dc969fc93d810919b388e4068d8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -41,7 +41,6 @@\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -99,7 +98,7 @@ protected void addDynamicRealmsContainer() {\n         dynrealmsContainer.setOutputMarkupPlaceholderTag(true);\n         dynrealmsContainer.add(new AjaxPalettePanel.Builder<>().build(\"dynrealms\",\n                 new PropertyModel<>(anyTO, \"dynRealms\"),\n-                new ListModel<>(allDynRealms.stream().map(EntityTO::getKey).collect(Collectors.toList()))).\n+                new ListModel<>(allDynRealms.stream().map(DynRealmTO::getKey).collect(Collectors.toList()))).\n                 hideLabel().setEnabled(false).setOutputMarkupId(true));\n         add(dynrealmsContainer);\n     }"},{"sha":"73274c9f50196e33f2b86d422a192d903c995722","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -52,9 +52,9 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.Component;\n@@ -253,7 +253,7 @@ public Specification() {\n             rel = new RelationshipTO();\n \n             List<String> availableRels = RelationshipTypeRestClient.list().stream().\n-                    map(EntityTO::getKey).collect(Collectors.toList());\n+                    map(RelationshipTypeTO::getKey).collect(Collectors.toList());\n \n             type = new AjaxDropDownChoicePanel<>(\"type\", \"type\", new PropertyModel<>(rel, \"type\"));\n             type.setChoices(availableRels);"},{"sha":"a765e25019a15dab0b538ab84bc0b42cee0f59d7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/TypeExtensionWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTypeExtensionWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -109,7 +109,7 @@ public Details(final TypeExtensionTO typeExtensionTO) {\n             add(new Label(\"auxClasses.label\", auxClassesLabel));\n \n             List<String> anyTypeClasses = AnyTypeClassRestClient.list().stream().\n-                    map(EntityTO::getKey).collect(Collectors.toList());\n+                    map(AnyTypeClassTO::getKey).collect(Collectors.toList());\n             AjaxPalettePanel<String> auxClassesPalette = new AjaxPalettePanel.Builder<String>().build(\n                     \"auxClasses.palette\",\n                     new PropertyModel<>(typeExtensionTO, \"auxClasses\"),"},{"sha":"32f5cfb46d7b6c7c063903924d2a9e6e8426c29b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/mapping/ItemTransformersTogglePanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fmapping%2FItemTransformersTogglePanel.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.wicket.PageReference;\n@@ -65,7 +65,7 @@ protected List<String> load() {\n         addInnerObject(form);\n \n         List<String> choices = ImplementationRestClient.list(IdRepoImplementationType.ITEM_TRANSFORMER).stream().\n-                map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n \n         form.add(new AjaxPalettePanel.Builder<String>().setAllowOrder(true).setRenderer(new IChoiceRenderer<>() {\n "},{"sha":"d8e6478ebbf0167adcd6bb76c7809dea4c1eb167","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/role/RoleWizardBuilder.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -35,7 +35,8 @@\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.lib.to.PrivilegeTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.wicket.PageReference;\n@@ -177,7 +178,7 @@ public DynRealms(final RoleTO modelObject) {\n             add(new AjaxPalettePanel.Builder<>().build(\"dynRealms\",\n                     new PropertyModel<>(modelObject, \"dynRealms\"),\n                     new ListModel<>(DynRealmRestClient.list().stream().\n-                            map(EntityTO::getKey).collect(Collectors.toList()))).\n+                            map(DynRealmTO::getKey).collect(Collectors.toList()))).\n                     hideLabel().setOutputMarkupId(true));\n         }\n     }\n@@ -192,7 +193,7 @@ public Privileges(final RoleTO modelObject) {\n                     new PropertyModel<>(modelObject, \"privileges\"),\n                     new ListModel<>(ApplicationRestClient.list().stream().\n                             flatMap(application -> application.getPrivileges().stream()).\n-                            map(EntityTO::getKey).collect(Collectors.toList()))).\n+                            map(PrivilegeTO::getKey).collect(Collectors.toList()))).\n                     hideLabel().setOutputMarkupId(true));\n         }\n     }"},{"sha":"88a297fe9d1b347ca8ed4352c3793f03f9a1d891","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPropagationActions.groovy","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPropagationActions.groovy?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -22,9 +22,9 @@ import java.util.Optional\n import java.util.Set\n import org.apache.syncope.common.lib.to.OrgUnit\n import org.apache.syncope.common.lib.to.Provision\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.identityconnectors.framework.common.objects.ConnectorObject\n \n @CompileStatic\n@@ -41,17 +41,17 @@ class MyPropagationActions implements PropagationActions {\n   }\n \n   @Override\n-  void before(PropagationTask task, ConnectorObject beforeObj) {\n+  void before(PropagationTaskInfo taskInfo) {\n     // do nothing\n   }\n \n   @Override\n-  void onError(PropagationTask task, TaskExec execution, Exception error) {\n+  void onError(PropagationTaskInfo taskInfo, TaskExec execution, Exception error) {\n     // do nothing\n   }\n \n   @Override\n-  void after(PropagationTask task, TaskExec execution, ConnectorObject afterObj) {\n+  void after(PropagationTaskInfo taskInfo, TaskExec execution, ConnectorObject afterObj) {\n     // do nothing\n   }\n }"},{"sha":"896595903261c28e6073fbb579bd9bb7d7e097ac","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.properties?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -53,4 +53,5 @@ rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n maxAttempts=Max Attempts\n backOffStrategy=BackOff Strategy\n-prefetch=Prefetch\n+fetchAroundProvisioning=Fetch Around Provisioning\n+updateDelta=Update Delta"},{"sha":"02cf30d40a301e558d123714d36b8895d8f1f218","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_fr_CA.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_fr_CA.properties?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -53,4 +53,5 @@ rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n maxAttempts=Max Attempts\n backOffStrategy=BackOff Strategy\n-prefetch=Prefetch\n+fetchAroundProvisioning=Fetch Around Provisioning\n+updateDelta=Update Delta"},{"sha":"79a83653a0834dee0869859c5554d8f4c5119a0b","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_it.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_it.properties?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -53,4 +53,5 @@ rejectedAttrs.title=Attributi Rifiutati\n unauthorizedRedirectUrl=URL di Ridirezione Per Mancata Autorizzazione\n maxAttempts=Tentativi Massimi\n backOffStrategy=Strategia di BackOff\n-prefetch=Prefetch\n+fetchAroundProvisioning=Fetch Around Provisioning\n+updateDelta=Update Delta"},{"sha":"ac9abd3438aa3a41498a85911026d5fbfdf451ff","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ja.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ja.properties?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -53,4 +53,5 @@ rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n maxAttempts=Max Attempts\n backOffStrategy=BackOff Strategy\n-prefetch=Prefetch\n+fetchAroundProvisioning=Fetch Around Provisioning\n+updateDelta=Update Delta"},{"sha":"c1cc1ab1d81b8d219172874240689e205e7524ba","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_pt_BR.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_pt_BR.properties?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -53,4 +53,5 @@ rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n maxAttempts=Max Attempts\n backOffStrategy=BackOff Strategy\n-prefetch=Prefetch\n+fetchAroundProvisioning=Fetch Around Provisioning\n+updateDelta=Update Delta"},{"sha":"d305ca624a7e8d00cb95a0b946093e776c5c3a1c","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/policies/PolicyDirectoryPanel_ru.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel_ru.properties?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -54,4 +54,5 @@ rejectedAttrs.title=Rejected Attributes\n unauthorizedRedirectUrl=Unauthorized Redirect URL\n maxAttempts=Max Attempts\n backOffStrategy=BackOff Strategy\n-prefetch=Prefetch\n+fetchAroundProvisioning=Fetch Around Provisioning\n+updateDelta=Update Delta"},{"sha":"f6f3a6629a687852ec5b58e9880b19ffdb002a84","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/PropagationDataView.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationDataView.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationDataView.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPropagationDataView.html?ref=47af7b55368583850e4064a324a4c73ccf649b0d","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/tasks/TaskAttributesDetailsView.html"},{"sha":"313fcd066e9da0fb79ff2c900786498eedfd0737","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n@@ -90,7 +89,7 @@ public static List<String> getSchemaNames(final SchemaType schemaType) {\n \n         try {\n             schemaNames = getSchemas(schemaType, null, new String[0]).stream().\n-                    map(EntityTO::getKey).collect(Collectors.toList());\n+                    map(SchemaTO::getKey).collect(Collectors.toList());\n         } catch (SyncopeClientException e) {\n             LOG.error(\"While getting all user schema names\", e);\n         }"},{"sha":"19e27279ad194416fef6f3d000536d5dc3ace4c9","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/policy/PropagationPolicyTO.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPropagationPolicyTO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -28,7 +28,9 @@ public class PropagationPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = 10604950933449L;\n \n-    private boolean prefetch = true;\n+    private boolean fetchAroundProvisioning = true;\n+\n+    private boolean updateDelta = false;\n \n     private BackOffStrategy backOffStrategy = BackOffStrategy.FIXED;\n \n@@ -44,12 +46,20 @@ public String getDiscriminator() {\n         return getClass().getName();\n     }\n \n-    public boolean isPrefetch() {\n-        return prefetch;\n+    public boolean isFetchAroundProvisioning() {\n+        return fetchAroundProvisioning;\n+    }\n+\n+    public void setFetchAroundProvisioning(final boolean fetchAroundProvisioning) {\n+        this.fetchAroundProvisioning = fetchAroundProvisioning;\n+    }\n+\n+    public boolean isUpdateDelta() {\n+        return updateDelta;\n     }\n \n-    public void setPrefetch(final boolean prefetch) {\n-        this.prefetch = prefetch;\n+    public void setUpdateDelta(final boolean updateDelta) {\n+        this.updateDelta = updateDelta;\n     }\n \n     public BackOffStrategy getBackOffStrategy() {"},{"sha":"e831fdb8bc41ca762bfaf3bdc31f562824ce0e54","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -39,7 +39,7 @@ public class PropagationTaskTO extends TaskTO {\n \n     private String oldConnObjectKey;\n \n-    private String attributes;\n+    private String propagationData;\n \n     private String resource;\n \n@@ -95,12 +95,12 @@ public void setOperation(final ResourceOperation operation) {\n     }\n \n     @JsonProperty(required = true)\n-    public String getAttributes() {\n-        return attributes;\n+    public String getPropagationData() {\n+        return propagationData;\n     }\n \n-    public void setAttributes(final String attributes) {\n-        this.attributes = attributes;\n+    public void setPropagationData(final String propagationData) {\n+        this.propagationData = propagationData;\n     }\n \n     @JsonProperty(required = true)\n@@ -146,7 +146,7 @@ public int hashCode() {\n                 append(operation).\n                 append(connObjectKey).\n                 append(oldConnObjectKey).\n-                append(attributes).\n+                append(propagationData).\n                 append(resource).\n                 append(objectClassName).\n                 append(anyTypeKind).\n@@ -172,7 +172,7 @@ public boolean equals(final Object obj) {\n                 append(operation, other.operation).\n                 append(connObjectKey, other.connObjectKey).\n                 append(oldConnObjectKey, other.oldConnObjectKey).\n-                append(attributes, other.attributes).\n+                append(propagationData, other.propagationData).\n                 append(resource, other.resource).\n                 append(objectClassName, other.objectClassName).\n                 append(anyTypeKind, other.anyTypeKind).\n@@ -188,7 +188,7 @@ public String toString() {\n                 append(operation).\n                 append(connObjectKey).\n                 append(oldConnObjectKey).\n-                append(attributes).\n+                append(propagationData).\n                 append(resource).\n                 append(objectClassName).\n                 append(anyTypeKind)."},{"sha":"509821e117acb3986bcb97f2d5be73ec7f1d1907","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -160,18 +160,16 @@ protected Set<String> groups(final AnyObjectTO anyObjectTO) {\n     }\n \n     @Override\n-    public ProvisioningResult<AnyObjectTO> update(\n-            final AnyObjectUR updateReq, final boolean nullPriorityAsync) {\n-\n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(updateReq.getKey());\n-        Pair<AnyObjectUR, List<LogicActions>> before = beforeUpdate(updateReq, anyObjectTO.getRealm());\n+    public ProvisioningResult<AnyObjectTO> update(final AnyObjectUR req, final boolean nullPriorityAsync) {\n+        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(req.getKey());\n+        Pair<AnyObjectUR, List<LogicActions>> before = beforeUpdate(req, anyObjectTO.getRealm());\n \n         Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 anyObjectTO.getRealm());\n \n         Set<String> groups = groups(anyObjectTO);\n-        groups.removeAll(updateReq.getMemberships().stream().filter(Objects::nonNull).\n+        groups.removeAll(req.getMemberships().stream().filter(Objects::nonNull).\n                 filter(m -> m.getOperation() == PatchOperation.DELETE).\n                 map(MembershipUR::getGroup).filter(Objects::nonNull).\n                 collect(Collectors.toSet()));\n@@ -182,8 +180,8 @@ public ProvisioningResult<AnyObjectTO> update(\n                 anyObjectTO.getRealm(),\n                 groups);\n \n-        Pair<AnyObjectUR, List<PropagationStatus>> after =\n-                provisioningManager.update(updateReq, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n+        Pair<AnyObjectUR, List<PropagationStatus>> after = provisioningManager.update(\n+                req, Set.of(), nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n         ProvisioningResult<AnyObjectTO> result = afterUpdate(\n                 binder.getAnyObjectTO(after.getLeft().getKey()),\n@@ -301,7 +299,7 @@ public ProvisioningResult<AnyObjectTO> deprovision(\n         updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(\n-                key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n+                key, resources, nullPriorityAsync, AuthContextUtils.getUsername());\n \n         ProvisioningResult<AnyObjectTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getAnyObjectTO(key));\n@@ -320,7 +318,7 @@ public ProvisioningResult<AnyObjectTO> provision(\n         updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.provision(\n-                key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n+                key, resources, nullPriorityAsync, AuthContextUtils.getUsername());\n \n         ProvisioningResult<AnyObjectTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getAnyObjectTO(key));"},{"sha":"4891d5f0d4181f122c059a9342e95d0d46d956f4","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -227,8 +227,8 @@ public ProvisioningResult<GroupTO> update(final GroupUR req, final boolean nullP\n                 before.getLeft().getKey(),\n                 groupTO.getRealm());\n \n-        Pair<GroupUR, List<PropagationStatus>> after =\n-                provisioningManager.update(req, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n+        Pair<GroupUR, List<PropagationStatus>> after = provisioningManager.update(\n+                req, Set.of(), nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n         ProvisioningResult<GroupTO> result = afterUpdate(\n                 binder.getGroupTO(after.getLeft().getKey()),\n@@ -372,7 +372,7 @@ public ProvisioningResult<GroupTO> deprovision(\n         updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(\n-                key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n+                key, resources, nullPriorityAsync, AuthContextUtils.getUsername());\n \n         ProvisioningResult<GroupTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getGroupTO(key));\n@@ -392,7 +392,7 @@ public ProvisioningResult<GroupTO> provision(\n         updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.provision(\n-                key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n+                key, resources, nullPriorityAsync, AuthContextUtils.getUsername());\n \n         ProvisioningResult<GroupTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getGroupTO(key));"},{"sha":"85c31264f8d8c68feb8c03bb75f4bd7d8ffc9c90","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/MailTemplateLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMailTemplateLogic.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -146,7 +145,7 @@ public MailTemplateTO delete(final String key) {\n         List<Notification> notifications = notificationDAO.findByTemplate(mailTemplate);\n         if (!notifications.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);\n-            sce.getElements().addAll(notifications.stream().map(Entity::getKey).collect(Collectors.toList()));\n+            sce.getElements().addAll(notifications.stream().map(Notification::getKey).collect(Collectors.toList()));\n             throw sce;\n         }\n "},{"sha":"966f9abb786f9b05bb88823eb9de9ad7dd284e13","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -21,6 +21,7 @@\n import java.lang.reflect.Method;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -49,6 +50,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.identityconnectors.framework.common.objects.Attribute;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -174,10 +176,16 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n \n             throw new NotFoundException(realmTO.getFullPath());\n         }\n+\n+        Map<Pair<String, String>, Set<Attribute>> beforeAttrs = propagationManager.prepareAttrs(realm);\n+\n         PropagationByResource<String> propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n-        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.setAttributeDeltas(\n+                propagationManager.createTasks(realm, propByRes, null),\n+                beforeAttrs,\n+                null);\n         PropagationReporter propagationReporter =\n                 taskExecutor.execute(taskInfos, false, AuthContextUtils.getUsername());\n "},{"sha":"c73cf4a453ba5cf6519b95c67a828134cbf9c903","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportTemplateLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportTemplateLogic.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -32,7 +32,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportTemplate;\n@@ -158,7 +157,7 @@ public ReportTemplateTO delete(final String key) {\n         List<Report> reports = reportDAO.findByTemplate(reportTemplate);\n         if (!reports.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);\n-            sce.getElements().addAll(reports.stream().map(Entity::getKey).collect(Collectors.toList()));\n+            sce.getElements().addAll(reports.stream().map(Report::getKey).collect(Collectors.toList()));\n             throw sce;\n         }\n "},{"sha":"c6b911d35bea352f19b3532a090a82c05aa5f6a9","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -69,6 +69,7 @@\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.quartz.JobDataMap;\n import org.quartz.JobKey;\n import org.quartz.SchedulerException;\n@@ -257,17 +258,17 @@ public ExecTO execute(final String key, final OffsetDateTime startAt, final bool\n         ExecTO result = null;\n         switch (taskUtil.getType()) {\n             case PROPAGATION:\n-                PropagationTaskTO taskTO = binder.<PropagationTaskTO>getTaskTO(task, taskUtil, false);\n-                PropagationTaskInfo taskInfo = new PropagationTaskInfo(((PropagationTask) task).getResource());\n-                taskInfo.setKey(taskTO.getKey());\n-                taskInfo.setOperation(taskTO.getOperation());\n-                taskInfo.setConnObjectKey(taskTO.getConnObjectKey());\n-                taskInfo.setOldConnObjectKey(taskTO.getOldConnObjectKey());\n-                taskInfo.setAttributes(taskTO.getAttributes());\n-                taskInfo.setObjectClassName(taskTO.getObjectClassName());\n-                taskInfo.setAnyTypeKind(taskTO.getAnyTypeKind());\n-                taskInfo.setAnyType(taskTO.getAnyType());\n-                taskInfo.setEntityKey(taskTO.getEntityKey());\n+                PropagationTask propagationTask = (PropagationTask) task;\n+                PropagationTaskInfo taskInfo = new PropagationTaskInfo(\n+                        propagationTask.getResource(),\n+                        propagationTask.getOperation(),\n+                        new ObjectClass(propagationTask.getObjectClassName()),\n+                        propagationTask.getAnyTypeKind(),\n+                        propagationTask.getAnyType(),\n+                        propagationTask.getEntityKey(),\n+                        propagationTask.getConnObjectKey(),\n+                        propagationTask.getPropagationData());\n+                taskInfo.setOldConnObjectKey(propagationTask.getOldConnObjectKey());\n \n                 TaskExec propExec = taskExecutor.execute(taskInfo, new DefaultPropagationReporter(), executor);\n                 result = binder.getExecTO(propExec);"},{"sha":"28fc62443d117eb3d4ee4c84ac88cbd5647f6d94","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -532,7 +532,7 @@ public ProvisioningResult<UserTO> deprovision(\n         updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(\n-                key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n+                key, resources, nullPriorityAsync, AuthContextUtils.getUsername());\n \n         ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getUserTO(key));\n@@ -552,7 +552,7 @@ public ProvisioningResult<UserTO> provision(\n         updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.provision(\n-                key, changePwd, password, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n+                key, changePwd, password, resources, nullPriorityAsync, AuthContextUtils.getUsername());\n \n         ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n         result.setEntity(binder.getUserTO(key));"},{"sha":"f473d8779415a31bef18812900892a33d699e245","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/policy/PropagationPolicy.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPropagationPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPropagationPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fpolicy%2FPropagationPolicy.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -22,9 +22,13 @@\n \n public interface PropagationPolicy extends Policy {\n \n-    boolean isPrefetch();\n+    boolean isFetchAroundProvisioning();\n \n-    void setPrefetch(boolean prefetch);\n+    void setFetchAroundProvisioning(boolean fetchAroundProvisioning);\n+\n+    boolean isUpdateDelta();\n+\n+    void setUpdateDelta(boolean updateDelta);\n \n     BackOffStrategy getBackOffStrategy();\n "},{"sha":"a2364a7d2add668c8c739d9ddc74c1e0503b5bfe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationData.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationData.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationData.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationData.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.task;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.io.Serializable;\n+import java.util.Set;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n+\n+public class PropagationData implements Serializable {\n+\n+    private static final long serialVersionUID = -6193849782964810456L;\n+\n+    private final Set<Attribute> attributes;\n+\n+    private Set<AttributeDelta> attributeDeltas;\n+\n+    @JsonCreator\n+    public PropagationData(@JsonProperty(\"attributes\") final Set<Attribute> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    public Set<Attribute> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public Set<AttributeDelta> getAttributeDeltas() {\n+        return attributeDeltas;\n+    }\n+\n+    public void setAttributeDeltas(final Set<AttributeDelta> attributeDeltas) {\n+        this.attributeDeltas = attributeDeltas;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"PropagationData{\"\n+                + \"attributes=\" + attributes\n+                + \", attributeDeltas=\" + attributeDeltas + '}';\n+    }\n+}"},{"sha":"527f27f39d5c6044dd19720e506b3a16f4ee48cb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationTask.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n-import java.util.Set;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.identityconnectors.framework.common.objects.Attribute;\n \n public interface PropagationTask extends Task {\n \n@@ -34,11 +32,11 @@ public interface PropagationTask extends Task {\n \n     void setOldConnObjectKey(String oldConnObjectKey);\n \n-    String getSerializedAttributes();\n+    String getSerializedPropagationData();\n \n-    Set<Attribute> getAttributes();\n+    PropagationData getPropagationData();\n \n-    void setAttributes(Set<Attribute> attributes);\n+    void setPropagationData(PropagationData propagationData);\n \n     String getObjectClassName();\n "},{"sha":"c3799e73474d556720d866f4958050cca698d465","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -44,7 +44,7 @@ under the License.\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"special\":1,\"specialChars\":[\"@\",\"!\"],\"digit\":1,\"lowercase\":1,\"uppercase\":1,\"wordsNotPermitted\":[\"notpermitted1\",\"notpermitted2\"]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   <PropagationPolicy id=\"89d322db-9878-420c-b49c-67be13df9a12\" name=\"sample propagation policy\"\n-                     prefetch=\"1\" maxAttempts=\"5\" backOffStrategy=\"FIXED\" backOffParams=\"10000\"/>\n+                     fetchAroundProvisioning=\"1\" updateDelta=\"0\" maxAttempts=\"5\" backOffStrategy=\"FIXED\" backOffParams=\"10000\"/>\n \n   <!-- Authentication policies -->\n   <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\"\n@@ -544,7 +544,7 @@ under the License.\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n-                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"gidAttribute\",\"displayName\":\"Uid Attribute for groups\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute for groups.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]}]'\n+                jsonConf='[{\"schema\":{\"name\":\"host\",\"type\":\"java.lang.String\",\"required\":true,\"order\":1,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"localhost\"],\"overridable\":false},{\"schema\":{\"name\":\"port\",\"type\":\"int\",\"required\":false,\"order\":2,\"confidential\":false,\"defaultValues\":[389]},\"values\":[1389],\"overridable\":false},{\"schema\":{\"name\":\"ssl\",\"type\":\"boolean\",\"required\":false,\"order\":3,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"failover\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":4,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"principal\",\"type\":\"java.lang.String\",\"required\":false,\"order\":5,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"uid=admin,ou=system\"],\"overridable\":false},{\"schema\":{\"name\":\"credentials\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":6,\"confidential\":true,\"defaultValues\":[]},\"values\":[\"secret\"],\"overridable\":false},{\"schema\":{\"name\":\"baseContexts\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":7,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"],\"overridable\":true},{\"schema\":{\"name\":\"passwordAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":8,\"confidential\":false,\"defaultValues\":[\"userPassword\"]},\"values\":[\"userpassword\"],\"overridable\":false},{\"schema\":{\"name\":\"accountObjectClasses\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":9,\"confidential\":false,\"defaultValues\":[\"top\",\"person\",\"organizationalPerson\",\"inetOrgPerson\"]},\"values\":[\"inetOrgPerson\"],\"overridable\":false},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":10,\"confidential\":false,\"defaultValues\":[\"uid\",\"cn\"]},\"values\":[\"uid\"],\"overridable\":false},{\"schema\":{\"name\":\"accountSearchFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":11,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"uid=*\"],\"overridable\":false},{\"schema\":{\"name\":\"groupObjectClasses\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":12,\"confidential\":false,\"defaultValues\":[\"top\",\"groupOfUniqueNames\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"groupNameAttributes\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":13,\"confidential\":false,\"defaultValues\":[\"cn\"]},\"values\":[\"cn\"],\"overridable\":false},{\"schema\":{\"name\":\"groupMemberAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":14,\"confidential\":false,\"defaultValues\":[\"uniqueMember\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"type\":\"boolean\",\"required\":false,\"order\":15,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"type\":\"boolean\",\"required\":false,\"order\":16,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"addPrincipalToNewGroups\",\"type\":\"boolean\",\"required\":false,\"order\":17,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"type\":\"java.lang.String\",\"required\":false,\"order\":18,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"SHA\"],\"overridable\":false},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"type\":\"boolean\",\"required\":false,\"order\":19,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"useVlvControls\",\"type\":\"boolean\",\"required\":false,\"order\":20,\"confidential\":false,\"defaultValues\":[false]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"vlvSortAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":21,\"confidential\":false,\"defaultValues\":[\"uid\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"uidAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":22,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"values\":[\"cn\"],\"overridable\":true},{\"schema\":{\"name\":\"gidAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"values\":[\"cn\"],\"overridable\":true},{\"schema\":{\"name\":\"readSchema\",\"type\":\"boolean\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":[true]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":24,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"],\"overridable\":false},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":25,\"confidential\":false,\"defaultValues\":[\"inetOrgPerson\"]},\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"],\"overridable\":false},{\"schema\":{\"name\":\"attributesToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":26,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":27,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":28,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"changeLogBlockSize\",\"type\":\"int\",\"required\":false,\"order\":29,\"confidential\":false,\"defaultValues\":[100]},\"values\":[100],\"overridable\":false},{\"schema\":{\"name\":\"changeNumberAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":30,\"confidential\":false,\"defaultValues\":[\"changeNumber\"]},\"values\":[\"changeNumber\"],\"overridable\":false},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"type\":\"boolean\",\"required\":false,\"order\":31,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"type\":\"boolean\",\"required\":false,\"order\":32,\"confidential\":false,\"defaultValues\":[true]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"synchronizePasswords\",\"type\":\"boolean\",\"required\":false,\"order\":33,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"type\":\"java.lang.String\",\"required\":false,\"order\":34,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":35,\"confidential\":true,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":36,\"confidential\":true,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"statusManagementClass\",\"type\":\"java.lang.String\",\"required\":false,\"order\":37,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"],\"overridable\":false},{\"schema\":{\"name\":\"retrievePasswordsWithSearch\",\"type\":\"boolean\",\"required\":false,\"order\":38,\"confidential\":false,\"defaultValues\":[false]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"dnAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":39,\"confidential\":false,\"defaultValues\":[\"entryDN\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"groupSearchFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":40,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"readTimeout\",\"type\":\"long\",\"required\":false,\"order\":41,\"confidential\":false,\"defaultValues\":[0]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"connectTimeout\",\"type\":\"long\",\"required\":false,\"order\":42,\"confidential\":false,\"defaultValues\":[0]},\"values\":[],\"overridable\":false}]'\n                 capabilities='[\"CREATE\",\"UPDATE\",\"DELETE\",\"SEARCH\"]'/>\n   \n   <ConnInstance id=\"a28abd9b-9f4a-4ef6-a7a8-d19ad2a8f29d\" displayName=\"H2-test2\"\n@@ -716,18 +716,18 @@ under the License.\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <TaskExec id=\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\" task_id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"b8870cfb-3c1e-4fc4-abcb-2559826232e6\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <Task DTYPE=\"PropagationTask\" id=\"316285cc-ae52-4ea2-a33b-7355e189ac3f\" operation=\"DELETE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <!--SYNCOPE-1641 to be purged-->\n   <Task DTYPE=\"PropagationTask\" id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-1\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <TaskExec id=\"c3290f8b-caf9-4a85-84fb-fb619b65cd49\" task_id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" name=\"CSV (update matching; assign unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n@@ -749,7 +749,7 @@ under the License.\n         jobDelegate_id=\"ExpiredAccessTokenCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <TaskExec id=\"d789462f-e395-424f-bd8e-0db44a93222f\" task_id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"83f7e85d-9774-43fe-adba-ccd856312994\" name=\"TestDB Task\" resource_id=\"resource-testdb\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n@@ -858,7 +858,7 @@ under the License.\n         unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"0f618183-17ce-48bc-80bc-cc535f38983a\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"resource-testdb\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"30cfd653-257b-495f-8665-281281dbcb3d\" name=\"Scripted SQL\" resource_id=\"resource-db-scripted\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" pullMode=\"INCREMENTAL\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>"},{"sha":"53863ab241ca96cec3b77f756c70f9f3e445130a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -55,7 +55,6 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -303,7 +302,7 @@ protected String check(final RelationshipCond cond) {\n             rightAnyObjectKey = cond.getAnyObject();\n         } else {\n             AnyObject anyObject = anyObjectDAO.findByName(cond.getAnyObject());\n-            rightAnyObjectKey = Optional.ofNullable(anyObject).map(Entity::getKey).orElse(null);\n+            rightAnyObjectKey = Optional.ofNullable(anyObject).map(AnyObject::getKey).orElse(null);\n         }\n         if (rightAnyObjectKey == null) {\n             throw new IllegalArgumentException(\"Could not find any object for \" + cond.getAnyObject());\n@@ -330,7 +329,7 @@ protected String check(final MemberCond cond) {\n             if (member == null) {\n                 member = anyObjectDAO.findByName(cond.getMember());\n             }\n-            memberKey = Optional.ofNullable(member).map(Entity::getKey).orElse(null);\n+            memberKey = Optional.ofNullable(member).map(Any::getKey).orElse(null);\n         }\n         if (memberKey == null) {\n             throw new IllegalArgumentException(\"Could not find user or any object for \" + cond.getMember());"},{"sha":"81e6870ad293ea5251dd08cb22100d6d06505531","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -45,7 +45,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -325,7 +324,7 @@ public Collection<Group> findAllGroups(final AnyObject anyObject) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<String> findAllGroupKeys(final AnyObject anyObject) {\n-        return findAllGroups(anyObject).stream().map(Entity::getKey).collect(Collectors.toList());\n+        return findAllGroups(anyObject).stream().map(Group::getKey).collect(Collectors.toList());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n@@ -341,6 +340,6 @@ public Collection<ExternalResource> findAllResources(final AnyObject anyObject)\n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return findAllResources(authFind(key)).stream().map(Entity::getKey).collect(Collectors.toList());\n+        return findAllResources(authFind(key)).stream().map(ExternalResource::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"c332126ccd2f959a679a2da983fa880e2a8e6eb9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n@@ -96,9 +96,8 @@ public void delete(final String key) {\n             return;\n         }\n \n-        connInstance.getResources().stream().\n-                map(Entity::getKey).collect(Collectors.toList()).\n-                forEach(resource -> resourceDAO.delete(resource));\n+        connInstance.getResources().stream().map(ExternalResource::getKey).collect(Collectors.toList()).\n+                forEach(resourceDAO::delete);\n \n         entityManager().remove(connInstance);\n     }"},{"sha":"ac5c3d15c570af89667720691a575786b2a9e006","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -48,7 +48,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n@@ -655,6 +655,6 @@ public Set<String> removeDynMemberships(final User user) {\n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return find(key).getResources().stream().map(Entity::getKey).collect(Collectors.toList());\n+        return find(key).getResources().stream().map(ExternalResource::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"b528fc1f97e454559ff7f4032cc544cd97e80b18","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -23,10 +23,10 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n+import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.jpa.entity.JPANotification;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -86,7 +86,7 @@ public void delete(final String key) {\n \n         taskDAO.findAll(\n                 TaskType.NOTIFICATION, null, notification, null, null, -1, -1, List.of()).\n-                stream().map(Entity::getKey).forEach(this::delete);\n+                stream().map(Task::getKey).forEach(this::delete);\n \n         entityManager().remove(notification);\n     }"},{"sha":"c77724b0904a71aad1b235581352ca81dcb81883","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -21,7 +21,6 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n@@ -64,7 +63,7 @@ public static <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue>\n     @Override\n     public void deleteAll(final PlainAttr<?> attr, final AnyUtils anyUtils) {\n         if (attr.getUniqueValue() == null) {\n-            attr.getValues().stream().map(Entity::getKey).collect(Collectors.toSet()).forEach(attrValueKey -> {\n+            attr.getValues().stream().map(PlainAttrValue::getKey).collect(Collectors.toSet()).forEach(attrValueKey -> {\n                 PlainAttrValue attrValue = anyUtils.plainAttrValueClass().cast(\n                         entityManager().find(getEntityReference(anyUtils.plainAttrValueClass()), attrValueKey));\n                 if (attrValue != null) {"},{"sha":"a938025c50f6034116ff68b45f5005dc83a3a8a3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.dao.RemediationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -496,7 +495,7 @@ public void delete(final Task task) {\n     @Override\n     public void deleteAll(final ExternalResource resource, final TaskType type) {\n         findAll(type, resource, null, null, null, -1, -1, List.of()).\n-                stream().map(Entity::getKey).forEach(this::delete);\n+                stream().map(Task::getKey).forEach(this::delete);\n     }\n \n     @Override\n@@ -548,7 +547,7 @@ public List<PropagationTaskTO> purgePropagations(\n                 taskTO.setOperation(task.getOperation());\n                 taskTO.setConnObjectKey(task.getConnObjectKey());\n                 taskTO.setOldConnObjectKey(task.getOldConnObjectKey());\n-                taskTO.setAttributes(task.getSerializedAttributes());\n+                taskTO.setPropagationData(task.getSerializedPropagationData());\n                 taskTO.setResource(task.getResource().getKey());\n                 taskTO.setObjectClassName(task.getObjectClassName());\n                 taskTO.setAnyTypeKind(task.getAnyTypeKind());"},{"sha":"0bbe4f191d1baf96fe45dc8ef44d341f58b0fdd0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -229,9 +229,7 @@ public boolean add(final ExternalResource resource) {\n \n     @Override\n     public List<String> getResourceKeys() {\n-        return getResources().stream().\n-                map(org.apache.syncope.core.persistence.api.entity.Entity::getKey).\n-                collect(Collectors.toList());\n+        return getResources().stream().map(ExternalResource::getKey).collect(Collectors.toList());\n     }\n \n     @Override"},{"sha":"92c0ad7ba4e19daa755d32ce6836e998869f4c2a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAPropagationPolicy.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAPropagationPolicy.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -36,7 +36,10 @@ public class JPAPropagationPolicy extends AbstractPolicy implements PropagationP\n     public static final String TABLE = \"PropagationPolicy\";\n \n     @NotNull\n-    private Boolean prefetch = true;\n+    private Boolean fetchAroundProvisioning = true;\n+\n+    @NotNull\n+    private Boolean updateDelta = false;\n \n     @Enumerated(EnumType.STRING)\n     @NotNull\n@@ -48,13 +51,23 @@ public class JPAPropagationPolicy extends AbstractPolicy implements PropagationP\n     private Integer maxAttempts = 3;\n \n     @Override\n-    public boolean isPrefetch() {\n-        return prefetch;\n+    public boolean isFetchAroundProvisioning() {\n+        return fetchAroundProvisioning;\n+    }\n+\n+    @Override\n+    public void setFetchAroundProvisioning(final boolean fetchAroundProvisioning) {\n+        this.fetchAroundProvisioning = fetchAroundProvisioning;\n+    }\n+\n+    @Override\n+    public boolean isUpdateDelta() {\n+        return updateDelta;\n     }\n \n     @Override\n-    public void setPrefetch(final boolean prefetch) {\n-        this.prefetch = prefetch;\n+    public void setUpdateDelta(final boolean updateDelta) {\n+        this.updateDelta = updateDelta;\n     }\n \n     @Override"},{"sha":"6d30db527932824fb4a8a13517b00a6d6683db39","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":11,"deletions":16,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -18,9 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n@@ -31,11 +28,11 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PropagationTaskCheck;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.identityconnectors.framework.common.objects.Attribute;\n \n /**\n  * Encapsulate all information about a propagation task.\n@@ -64,10 +61,10 @@ public class JPAPropagationTask extends AbstractTask implements PropagationTask\n     private String oldConnObjectKey;\n \n     /**\n-     * Attributes to be propagated.\n+     * Data to be propagated.\n      */\n     @Lob\n-    private String attributes;\n+    private String propagationData;\n \n     private String objectClassName;\n \n@@ -105,27 +102,25 @@ public void setOldConnObjectKey(final String oldConnObjectKey) {\n     }\n \n     @Override\n-    public String getSerializedAttributes() {\n-        return this.attributes;\n+    public String getSerializedPropagationData() {\n+        return propagationData;\n     }\n \n     @Override\n-    public Set<Attribute> getAttributes() {\n-        Set<Attribute> result = new HashSet<>();\n-        if (StringUtils.isNotBlank(this.attributes)) {\n-            result.addAll(List.of(POJOHelper.deserialize(this.attributes, Attribute[].class)));\n+    public PropagationData getPropagationData() {\n+        PropagationData result = null;\n+        if (StringUtils.isNotBlank(propagationData)) {\n+            result = POJOHelper.deserialize(propagationData, PropagationData.class);\n         }\n-\n         return result;\n     }\n \n     @Override\n-    public void setAttributes(final Set<Attribute> attributes) {\n-        this.attributes = POJOHelper.serialize(attributes);\n+    public void setPropagationData(final PropagationData propagationData) {\n+        this.propagationData = POJOHelper.serialize(propagationData);\n     }\n \n     @Override\n-\n     public ResourceOperation getOperation() {\n         return operation;\n     }"},{"sha":"f8f24a64b94faaa2d99b04472e5b47e60f9461ce","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PropagationTaskValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPropagationTaskValidator.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -35,7 +35,7 @@ public boolean isValid(final PropagationTask task, final ConstraintValidatorCont\n             isValid = true;\n         } else {\n             isValid = task.getOperation() != null\n-                    && !task.getAttributes().isEmpty()\n+                    && task.getPropagationData() != null\n                     && task.getResource() != null;\n \n             if (isValid) {"},{"sha":"1d875679e650845498920bb620f35586ed890cc4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ReportValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -23,7 +23,7 @@\n import java.util.stream.Collectors;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.quartz.CronExpression;\n \n@@ -59,7 +59,7 @@ public boolean isValid(final Report report, final ConstraintValidatorContext con\n         }\n \n         Set<String> reportletKeys = report.getReportlets().stream().\n-                map(Entity::getKey).collect(Collectors.toSet());\n+                map(Implementation::getKey).collect(Collectors.toSet());\n         if (reportletKeys.size() != report.getReportlets().size()) {\n             LOG.error(\"Reportlet key must be unique\");\n             isValid = false;"},{"sha":"0b2bf3399a95c13bdf8bc8530e2defc7382ca579","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -57,7 +57,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -180,7 +179,7 @@ public void searchWithNotAttrCond() {\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n-        Set<String> ids = users.stream().map(Entity::getKey).collect(Collectors.toSet());\n+        Set<String> ids = users.stream().map(User::getKey).collect(Collectors.toSet());\n         assertTrue(ids.contains(\"1417acbe-cbf6-4277-9372-e75e04f97000\"));\n         assertTrue(ids.contains(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\"));\n     }\n@@ -214,7 +213,7 @@ public void searchCaseInsensitiveWithNotCondition() {\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n-        Set<String> ids = users.stream().map(Entity::getKey).collect(Collectors.toSet());\n+        Set<String> ids = users.stream().map(User::getKey).collect(Collectors.toSet());\n         assertTrue(ids.contains(\"1417acbe-cbf6-4277-9372-e75e04f97000\"));\n         assertTrue(ids.contains(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\"));\n     }"},{"sha":"87cfd6dd25edab99559523531d6a4acb4f152545","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -118,7 +119,7 @@ public void savePropagationTask() {\n         Set<Attribute> attributes = new HashSet<>();\n         attributes.add(AttributeBuilder.build(\"testAttribute\", \"testValue1\", \"testValue2\"));\n         attributes.add(AttributeBuilder.buildPassword(\"password\".toCharArray()));\n-        task.setAttributes(attributes);\n+        task.setPropagationData(new PropagationData(attributes));\n \n         task = taskDAO.save(task);\n         assertNotNull(task);"},{"sha":"2a6749c1976f45760c51f8c3325accb03b6ebcc2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n@@ -124,7 +125,7 @@ public void save() {\n         Set<Attribute> attributes = new HashSet<>();\n         attributes.add(AttributeBuilder.build(\"testAttribute\", \"testValue1\", \"testValue2\"));\n         attributes.add(AttributeBuilder.buildPassword(\"password\".toCharArray()));\n-        task.setAttributes(attributes);\n+        task.setPropagationData(new PropagationData(attributes));\n \n         task = taskDAO.save(task);\n         assertNotNull(task);"},{"sha":"0d41fc8f28b78bc567fd10ae04a32f75466dcad9","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -44,7 +44,7 @@ under the License.\n                   body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"special\":1,\"specialChars\":[\"@\",\"!\"],\"digit\":1,\"lowercase\":1,\"uppercase\":1,\"wordsNotPermitted\":[\"notpermitted1\",\"notpermitted2\"]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   <PropagationPolicy id=\"89d322db-9878-420c-b49c-67be13df9a12\" name=\"sample propagation policy\"\n-                     prefetch=\"1\" maxAttempts=\"5\" backOffStrategy=\"FIXED\" backOffParams=\"10000\"/>\n+                     fetchAroundProvisioning=\"1\" updateDelta=\"0\" maxAttempts=\"5\" backOffStrategy=\"FIXED\" backOffParams=\"10000\"/>\n \n   <!-- Authentication policies -->\n   <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\"\n@@ -631,7 +631,7 @@ under the License.\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n-                jsonConf='[{\"schema\":{\"name\":\"synchronizePasswords\",\"displayName\":\"Enable Password Synchronization\",\"helpMessage\":\"If true, the connector will synchronize passwords. The Password Capture Plugin needs to be installed for password synchronization to work.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"displayName\":\"Maintain LDAP Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any LDAP groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"host\",\"displayName\":\"Host\",\"helpMessage\":\"The name or IP address of the host where the LDAP server is running.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"localhost\"]},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"displayName\":\"Password Hash Algorithm\",\"helpMessage\":\"Indicates the algorithm that the Identity system should use to hash the password. Currently supported values are SSHA, SHA, SSHA1, and SHA1. A blank value indicates that the system will not hash passwords. This will cause cleartext passwords to be stored in LDAP unless the LDAP server performs the hash (Netscape Directory Server and iPlanet Directory Server do).\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"SHA\"]},{\"schema\":{\"name\":\"port\",\"displayName\":\"TCP Port\",\"helpMessage\":\"TCP/IP port number used to communicate with the LDAP server.\",\"type\":\"int\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[1389]},{\"schema\":{\"name\":\"vlvSortAttribute\",\"displayName\":\"VLV Sort Attribute\",\"helpMessage\":\"Specify the sort attribute to use for VLV indexes on the resource.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"statusManagementClass\",\"displayName\":\"Status management class \",\"helpMessage\":\"Class to be used to manage enabled/disabled status. If no class is specified then identity status management wont be possible.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"]},{\"schema\":{\"name\":\"accountObjectClasses\",\"displayName\":\"Account Object Classes\",\"helpMessage\":\"The object class or classes that will be used when creating new user objects in the LDAP tree. When entering more than one object class, each entry should be on its own line; do not use commas or semi-colons to separate multiple object classes. Some object classes may require that you specify all object classes in the class hierarchy.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\"]},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"displayName\":\"Account User Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the account user name. They will be used when authenticating to find the LDAP entry for the user name to authenticate.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid\"]},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"displayName\":\"Base Contexts to Synchronize\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used to determine if a change should be synchronized. The base contexts attribute will be used to synchronize a change if this property is not set.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"displayName\":\"LDAP Filter for Accounts to Synchronize\",\"helpMessage\":\"An optional LDAP filter for the objects to synchronize. Because the change log is for all objects, this filter updates only objects that match the specified filter. If you specify a filter, an object will be synchronized only if it matches the filter and includes a synchronized object class.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"displayName\":\"Remove Log Entry Object Class from Filter\",\"helpMessage\":\"If this property is set (the default), the filter used to fetch change log entries does not contain the \\\"changeLogEntry\\\" object class, expecting that there are no entries of other object types in the change log.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"displayName\":\"Password Decryption Key\",\"helpMessage\":\"The key to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"readSchema\",\"displayName\":\"Read Schema\",\"helpMessage\":\"If true, the connector will read the schema from the server. If false, the connector will provide a default schema based on the object classes in the configuration. This property must be true in order to use extended object classes.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"true\"]},{\"schema\":{\"name\":\"ssl\",\"displayName\":\"SSL\",\"helpMessage\":\"Select the check box to connect to the LDAP server using SSL.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"displayName\":\"Password Attribute to Synchronize\",\"helpMessage\":\"The name of the password attribute to synchronize when performing password synchronization.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"accountSearchFilter\",\"displayName\":\"LDAP Filter for Retrieving Accounts\",\"helpMessage\":\"An optional LDAP filter to control which accounts are returned from the LDAP resource. If no filter is specified, only accounts that include all specified object classes are returned.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=*\"]},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"displayName\":\"Password Decryption Initialization Vector\",\"helpMessage\":\"The initialization vector to decrypt passwords with when performing password synchronization.\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupMemberAttribute\",\"displayName\":\"Group Member Attribute\",\"helpMessage\":\"The name of the group attribute that will be updated with the distinguished name of the user when the user is added to the group.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"failover\",\"displayName\":\"Failover Servers\",\"helpMessage\":\"List all servers that should be used for failover in case the preferred server fails. If the preferred server fails, JNDI will connect to the next available server in the list. List all servers in the form of \\\"ldap://ldap.example.com:389/\\\", which follows the standard LDAP v3 URLs described in RFC 2255. Only the host and port parts of the URL are relevant in this setting.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"displayName\":\"Filter Out Changes By\",\"helpMessage\":\"The names (DNs) of directory administrators to filter from the changes. Changes with the attribute \\\"modifiersName\\\" that match entries in this list will be filtered out. The standard value is the administrator name used by this adapter, to prevent loops. Entries should be of the format \\\"cn=Directory Manager\\\".\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"groupNameAttributes\",\"displayName\":\"Group Name Attributes\",\"helpMessage\":\"Attribute or attributes which holds the group name.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"uidAttribute\",\"displayName\":\"Uid Attribute\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"gidAttribute\",\"displayName\":\"Uid Attribute for groups\",\"helpMessage\":\"The name of the LDAP attribute which is mapped to the Uid attribute for groups.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"cn\"]},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"displayName\":\"Respect Resource Password Policy Change-After-Reset\",\"helpMessage\":\"When this resource is specified in a Login Module (i.e., this resource is a pass-through authentication target) and the resource password policy is configured for change-after-reset, a user whose resource account password has been administratively reset will be required to change that password after successfully authenticating.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"displayName\":\"Filter with Or Instead of And\",\"helpMessage\":\"Normally the the filter used to fetch change log entries is an and-based filter retrieving an interval of change entries. If this property is set, the filter will or together the required change numbers instead.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]},{\"schema\":{\"name\":\"principal\",\"displayName\":\"Principal\",\"helpMessage\":\"The distinguished name with which to authenticate to the LDAP server.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"uid=admin,ou=system\"]},{\"schema\":{\"name\":\"changeLogBlockSize\",\"displayName\":\"Change Log Block Size\",\"helpMessage\":\"The number of change log entries to fetch per query.\",\"type\":\"int\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[100]},{\"schema\":{\"name\":\"baseContexts\",\"displayName\":\"Base Contexts\",\"helpMessage\":\"One or more starting points in the LDAP tree that will be used when searching the tree. Searches are performed when discovering users from the LDAP server or when looking for the groups of which a user is a member.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":true,\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"]},{\"schema\":{\"name\":\"passwordAttribute\",\"displayName\":\"Password Attribute\",\"helpMessage\":\"The name of the LDAP attribute which holds the password. When changing an user password, the new password is set to this attribute.\",\"type\":\"java.lang.String\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"userpassword\"]},{\"schema\":{\"name\":\"changeNumberAttribute\",\"displayName\":\"Change Number Attribute\",\"helpMessage\":\"The name of the change number attribute in the change log entry.\",\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"changeNumber\"]},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"displayName\":\"Object Classes to Synchronize\",\"helpMessage\":\"The object classes to synchronize. The change log is for all objects; this filters updates to just the listed object classes. You should not list the superclasses of an object class unless you intend to synchronize objects with any of the superclass values. For example, if only \\\"inetOrgPerson\\\" objects should be synchronized, but the superclasses of \\\"inetOrgPerson\\\" (\\\"person\\\", \\\"organizationalperson\\\" and \\\"top\\\") should be filtered out, then list only \\\"inetOrgPerson\\\" here. All objects in LDAP are subclassed from \\\"top\\\". For this reason, you should never list \\\"top\\\", otherwise no object would be filtered.\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"]},{\"schema\":{\"name\":\"credentials\",\"displayName\":\"Password\",\"helpMessage\":\"Password for the principal.\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"secret\"]},{\"schema\":{\"name\":\"attributesToSynchronize\",\"displayName\":\"Attributes to Synchronize\",\"helpMessage\":\"The names of the attributes to synchronize. This ignores updates from the change log if they do not update any of the named attributes. For example, if only \\\"department\\\" is listed, then only changes that affect \\\"department\\\" will be processed. All other updates are ignored. If blank (the default), then all changes are processed.\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[]},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"displayName\":\"Maintain POSIX Group Membership\",\"helpMessage\":\"When enabled and a user is renamed or deleted, update any POSIX groups to which the user belongs to reflect the new name. Otherwise, the LDAP resource must maintain referential integrity with respect to group membership.\",\"type\":\"boolean\",\"required\":false,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"false\"]}]'\n+                jsonConf='[{\"schema\":{\"name\":\"host\",\"type\":\"java.lang.String\",\"required\":true,\"order\":1,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"localhost\"],\"overridable\":false},{\"schema\":{\"name\":\"port\",\"type\":\"int\",\"required\":false,\"order\":2,\"confidential\":false,\"defaultValues\":[389]},\"values\":[1389],\"overridable\":false},{\"schema\":{\"name\":\"ssl\",\"type\":\"boolean\",\"required\":false,\"order\":3,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"failover\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":4,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"principal\",\"type\":\"java.lang.String\",\"required\":false,\"order\":5,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"uid=admin,ou=system\"],\"overridable\":false},{\"schema\":{\"name\":\"credentials\",\"type\":\"org.identityconnectors.common.security.GuardedString\",\"required\":false,\"order\":6,\"confidential\":true,\"defaultValues\":[]},\"values\":[\"secret\"],\"overridable\":false},{\"schema\":{\"name\":\"baseContexts\",\"type\":\"[Ljava.lang.String;\",\"required\":true,\"order\":7,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"],\"overridable\":true},{\"schema\":{\"name\":\"passwordAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":8,\"confidential\":false,\"defaultValues\":[\"userPassword\"]},\"values\":[\"userpassword\"],\"overridable\":false},{\"schema\":{\"name\":\"accountObjectClasses\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":9,\"confidential\":false,\"defaultValues\":[\"top\",\"person\",\"organizationalPerson\",\"inetOrgPerson\"]},\"values\":[\"inetOrgPerson\"],\"overridable\":false},{\"schema\":{\"name\":\"accountUserNameAttributes\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":10,\"confidential\":false,\"defaultValues\":[\"uid\",\"cn\"]},\"values\":[\"uid\"],\"overridable\":false},{\"schema\":{\"name\":\"accountSearchFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":11,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"uid=*\"],\"overridable\":false},{\"schema\":{\"name\":\"groupObjectClasses\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":12,\"confidential\":false,\"defaultValues\":[\"top\",\"groupOfUniqueNames\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"groupNameAttributes\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":13,\"confidential\":false,\"defaultValues\":[\"cn\"]},\"values\":[\"cn\"],\"overridable\":false},{\"schema\":{\"name\":\"groupMemberAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":14,\"confidential\":false,\"defaultValues\":[\"uniqueMember\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"maintainLdapGroupMembership\",\"type\":\"boolean\",\"required\":false,\"order\":15,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"maintainPosixGroupMembership\",\"type\":\"boolean\",\"required\":false,\"order\":16,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"addPrincipalToNewGroups\",\"type\":\"boolean\",\"required\":false,\"order\":17,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"passwordHashAlgorithm\",\"type\":\"java.lang.String\",\"required\":false,\"order\":18,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"SHA\"],\"overridable\":false},{\"schema\":{\"name\":\"respectResourcePasswordPolicyChangeAfterReset\",\"type\":\"boolean\",\"required\":false,\"order\":19,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"useVlvControls\",\"type\":\"boolean\",\"required\":false,\"order\":20,\"confidential\":false,\"defaultValues\":[false]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"vlvSortAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":21,\"confidential\":false,\"defaultValues\":[\"uid\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"uidAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":22,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"values\":[\"cn\"],\"overridable\":true},{\"schema\":{\"name\":\"gidAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":[\"entryUUID\"]},\"values\":[\"cn\"],\"overridable\":true},{\"schema\":{\"name\":\"readSchema\",\"type\":\"boolean\",\"required\":false,\"order\":23,\"confidential\":false,\"defaultValues\":[true]},\"values\":[\"true\"],\"overridable\":false},{\"schema\":{\"name\":\"baseContextsToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":24,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"ou=people,o=isp\",\"ou=groups,o=isp\"],\"overridable\":false},{\"schema\":{\"name\":\"objectClassesToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":25,\"confidential\":false,\"defaultValues\":[\"inetOrgPerson\"]},\"values\":[\"inetOrgPerson\",\"groupOfUniqueNames\"],\"overridable\":false},{\"schema\":{\"name\":\"attributesToSynchronize\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":26,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"modifiersNamesToFilterOut\",\"type\":\"[Ljava.lang.String;\",\"required\":false,\"order\":27,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"accountSynchronizationFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":28,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"changeLogBlockSize\",\"type\":\"int\",\"required\":false,\"order\":29,\"confidential\":false,\"defaultValues\":[100]},\"values\":[100],\"overridable\":false},{\"schema\":{\"name\":\"changeNumberAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":30,\"confidential\":false,\"defaultValues\":[\"changeNumber\"]},\"values\":[\"changeNumber\"],\"overridable\":false},{\"schema\":{\"name\":\"filterWithOrInsteadOfAnd\",\"type\":\"boolean\",\"required\":false,\"order\":31,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"removeLogEntryObjectClassFromFilter\",\"type\":\"boolean\",\"required\":false,\"order\":32,\"confidential\":false,\"defaultValues\":[true]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"synchronizePasswords\",\"type\":\"boolean\",\"required\":false,\"order\":33,\"confidential\":false,\"defaultValues\":[false]},\"values\":[\"false\"],\"overridable\":false},{\"schema\":{\"name\":\"passwordAttributeToSynchronize\",\"type\":\"java.lang.String\",\"required\":false,\"order\":34,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"passwordDecryptionKey\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":35,\"confidential\":true,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"passwordDecryptionInitializationVector\",\"type\":\"org.identityconnectors.common.security.GuardedByteArray\",\"required\":false,\"order\":36,\"confidential\":true,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"statusManagementClass\",\"type\":\"java.lang.String\",\"required\":false,\"order\":37,\"confidential\":false,\"defaultValues\":[]},\"values\":[\"net.tirasa.connid.bundles.ldap.commons.AttributeStatusManagement\"],\"overridable\":false},{\"schema\":{\"name\":\"retrievePasswordsWithSearch\",\"type\":\"boolean\",\"required\":false,\"order\":38,\"confidential\":false,\"defaultValues\":[false]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"dnAttribute\",\"type\":\"java.lang.String\",\"required\":false,\"order\":39,\"confidential\":false,\"defaultValues\":[\"entryDN\"]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"groupSearchFilter\",\"type\":\"java.lang.String\",\"required\":false,\"order\":40,\"confidential\":false,\"defaultValues\":[]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"readTimeout\",\"type\":\"long\",\"required\":false,\"order\":41,\"confidential\":false,\"defaultValues\":[0]},\"values\":[],\"overridable\":false},{\"schema\":{\"name\":\"connectTimeout\",\"type\":\"long\",\"required\":false,\"order\":42,\"confidential\":false,\"defaultValues\":[0]},\"values\":[],\"overridable\":false}]'\n                 capabilities='[\"CREATE\",\"UPDATE\",\"DELETE\",\"SEARCH\"]'/>\n   \n   <ConnInstance id=\"a28abd9b-9f4a-4ef6-a7a8-d19ad2a8f29d\" displayName=\"H2-test2\"\n@@ -803,18 +803,18 @@ under the License.\n                   body=\"org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <TaskExec id=\"e58ca1c7-178a-4012-8a71-8aa14eaf0655\" task_id=\"1e697572-b896-484c-ae7f-0c8f63fcbc6c\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"b8870cfb-3c1e-4fc4-abcb-2559826232e6\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <Task DTYPE=\"PropagationTask\" id=\"316285cc-ae52-4ea2-a33b-7355e189ac3f\" operation=\"DELETE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-2\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <!--SYNCOPE-1641 to be purged-->\n   <Task DTYPE=\"PropagationTask\" id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-1\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <TaskExec id=\"c3290f8b-caf9-4a85-84fb-fb619b65cd49\" task_id=\"025c956d-ea88-4bd7-9e44-2f35e0aa7055\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"c41b9b71-9bfa-4f90-89f2-84787def4c5c\" name=\"CSV (update matching; assign unmatching)\" resource_id=\"resource-csv\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n@@ -836,7 +836,7 @@ under the License.\n         jobDelegate_id=\"ExpiredAccessTokenCleanup\" cronExpression=\"0 0/5 * * * ?\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <TaskExec id=\"d789462f-e395-424f-bd8e-0db44a93222f\" task_id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" startDate=\"2015-12-17 09:40:00\" endDate=\"2015-12-17 09:42:00\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"83f7e85d-9774-43fe-adba-ccd856312994\" name=\"TestDB Task\" resource_id=\"resource-testdb\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" pullMode=\"FULL_RECONCILIATION\"\n@@ -945,7 +945,7 @@ under the License.\n         unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"0f618183-17ce-48bc-80bc-cc535f38983a\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"resource-testdb\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n-        attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n+        propagationData='{\"attributes\":[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]}'/>\n   <Task DTYPE=\"PullTask\" remediation=\"0\" id=\"30cfd653-257b-495f-8665-281281dbcb3d\" name=\"Scripted SQL\" resource_id=\"resource-db-scripted\"\n         destinationRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" pullMode=\"INCREMENTAL\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\" jobDelegate_id=\"PullJobDelegate\"/>"},{"sha":"5c4ddd9f1495620db0b8b5daaa8b989f55925847","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyObjectProvisioningManager.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -36,5 +36,8 @@ Pair<String, List<PropagationStatus>> create(\n             String context);\n \n     List<PropagationStatus> provision(\n-            String key, Collection<String> resources, boolean nullPriorityAsync, String updater, String context);\n+            String key,\n+            Collection<String> resources,\n+            boolean nullPriorityAsync,\n+            String executor);\n }"},{"sha":"3916039e5ffc48034950dd8b6eeb6e266ccfbf70","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n@@ -57,7 +58,7 @@ public interface Connector {\n     Uid authenticate(String username, String password, OperationOptions options);\n \n     /**\n-     * Create user / group on a connector instance.\n+     * Create user, group or any object on a connector instance.\n      *\n      * @param objectClass ConnId's object class\n      * @param attrs attributes for creation\n@@ -72,10 +73,10 @@ Uid create(\n             AtomicReference<Boolean> propagationAttempted);\n \n     /**\n-     * Update user / group on a connector instance.\n+     * Update user, group or any object on a connector instance.\n      *\n      * @param objectClass ConnId's object class\n-     * @param uid user to be updated\n+     * @param uid remote identifier\n      * @param attrs attributes for update\n      * @param options ConnId's OperationOptions\n      * @param propagationAttempted if creation is actually performed (based on connector instance's capabilities)\n@@ -89,7 +90,24 @@ Uid update(\n             AtomicReference<Boolean> propagationAttempted);\n \n     /**\n-     * Delete user / group on a connector instance.\n+     * Partial update user, group or any object on a connector instance.\n+     *\n+     * @param objectClass ConnId's object class\n+     * @param uid remote identifier\n+     * @param modifications attribute modifications to apply\n+     * @param options ConnId's OperationOptions\n+     * @param propagationAttempted if creation is actually performed (based on connector instance's capabilities)\n+     * @return\n+     */\n+    Set<AttributeDelta> updateDelta(\n+            ObjectClass objectClass,\n+            Uid uid,\n+            Set<AttributeDelta> modifications,\n+            OperationOptions options,\n+            AtomicReference<Boolean> propagationAttempted);\n+\n+    /**\n+     * Delete user, group or any object on a connector instance.\n      *\n      * @param objectClass ConnId's object class\n      * @param uid user to be deleted"},{"sha":"1c4e409b4b0433fb0a3f58d371e9d68d0472014a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -38,5 +38,8 @@ Pair<String, List<PropagationStatus>> create(\n             String context);\n \n     List<PropagationStatus> provision(\n-            String key, Collection<String> resources, boolean nullPriorityAsync, String updater, String context);\n+            String key,\n+            Collection<String> resources,\n+            boolean nullPriorityAsync,\n+            String executor);\n }"},{"sha":"6ee0a6fc79f380b3c5ac7f8cdad65009cf18e31e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisioningManager.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -31,8 +31,6 @@\n     Pair<String, List<PropagationStatus>> create(\n             C anyCR, boolean nullPriorityAsync, String creator, String context);\n \n-    Pair<U, List<PropagationStatus>> update(U anyUR, boolean nullPriorityAsync, String updater, String context);\n-\n     Pair<U, List<PropagationStatus>> update(\n             U anyUR, Set<String> excludedResources, boolean nullPriorityAsync, String updater, String context);\n \n@@ -41,7 +39,7 @@ Pair<U, List<PropagationStatus>> update(\n     String link(U anyUR, String updater, String context);\n \n     List<PropagationStatus> deprovision(\n-            String anyKey, Collection<String> resources, boolean nullPriorityAsync, String updater, String context);\n+            String anyKey, Collection<String> resources, boolean nullPriorityAsync, String executor);\n \n     List<PropagationStatus> delete(String anyKey, boolean nullPriorityAsync, String eraser, String context);\n "},{"sha":"8738a55de743204aba886eb5ae812026fcb62b8c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -39,6 +39,12 @@ Pair<String, List<PropagationStatus>> create(\n             String creator,\n             String context);\n \n+    Pair<UserUR, List<PropagationStatus>> update(\n+            UserUR userUR,\n+            boolean nullPriorityAsync,\n+            String updater,\n+            String context);\n+\n     Pair<UserUR, List<PropagationStatus>> update(\n             UserUR userUR,\n             ProvisioningReport result,\n@@ -69,6 +75,5 @@ List<PropagationStatus> provision(\n             String password,\n             Collection<String> resources,\n             boolean nullPriorityAsync,\n-            String updater,\n-            String context);\n+            String executor);\n }"},{"sha":"1daf63f1dfc48515f3702cdcd8a9be21f90f6346","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationActions.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationActions.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -22,7 +22,6 @@\n import java.util.Set;\n import org.apache.syncope.common.lib.to.OrgUnit;\n import org.apache.syncope.common.lib.to.Provision;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n@@ -31,32 +30,31 @@ public interface PropagationActions {\n     /**\n      * Return additional attributes to include in the result from the underlying connector.\n      *\n-     * @param task propagation task\n+     * @param taskInfo propagation task\n      * @param orgUnit Realm provisioning information\n      * @return additional attributes to include in the result from the underlying connector\n      */\n-    default Set<String> moreAttrsToGet(Optional<PropagationTask> task, OrgUnit orgUnit) {\n+    default Set<String> moreAttrsToGet(Optional<PropagationTaskInfo> taskInfo, OrgUnit orgUnit) {\n         return Set.of();\n     }\n \n     /**\n      * Return additional attributes to include in the result from the underlying connector.\n      *\n-     * @param task propagation task\n+     * @param taskInfo propagation task\n      * @param provision Any provisioning information\n      * @return additional attributes to include in the result from the underlying connector\n      */\n-    default Set<String> moreAttrsToGet(Optional<PropagationTask> task, Provision provision) {\n+    default Set<String> moreAttrsToGet(Optional<PropagationTaskInfo> taskInfo, Provision provision) {\n         return Set.of();\n     }\n \n     /**\n      * Executes logic before actual propagation.\n      *\n-     * @param task propagation task\n-     * @param beforeObj connector object read before propagation\n+     * @param taskInfo propagation task\n      */\n-    default void before(PropagationTask task, ConnectorObject beforeObj) {\n+    default void before(PropagationTaskInfo taskInfo) {\n         // do nothing\n     }\n \n@@ -65,22 +63,22 @@ default void before(PropagationTask task, ConnectorObject beforeObj) {\n      * This method can throw {@link org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException} to\n      * ignore the reported error and continue.\n      *\n-     * @param task propagation task\n+     * @param taskInfo propagation task\n      * @param execution execution result\n      * @param error propagation error\n      */\n-    default void onError(PropagationTask task, TaskExec execution, Exception error) {\n+    default void onError(PropagationTaskInfo taskInfo, TaskExec execution, Exception error) {\n         // do nothing\n     }\n \n     /**\n      * Executes logic after actual propagation.\n      *\n-     * @param task propagation task\n+     * @param taskInfo propagation task\n      * @param execution execution result\n      * @param afterObj connector object read after propagation\n      */\n-    default void after(PropagationTask task, TaskExec execution, ConnectorObject afterObj) {\n+    default void after(PropagationTaskInfo taskInfo, TaskExec execution, ConnectorObject afterObj) {\n         // do nothing\n     }\n }"},{"sha":"cfc868c4a2bb4b3267ae7768050b074f304c027f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":72,"deletions":18,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -20,10 +20,12 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.Provision;\n@@ -41,14 +43,26 @@\n public interface PropagationManager {\n \n     /**\n-     * Create the any object tasks for every associated resource, unless in {@code noPropResourceKeys}.\n+     * Name for special propagation attribute used to indicate whether there are attributes, marked as mandatory in the\n+     * mapping but not to be propagated.\n+     */\n+    String MANDATORY_MISSING_ATTR_NAME = \"__MANDATORY_MISSING__\";\n+\n+    /**\n+     * Name for special propagation attribute used to indicate whether there are attributes, marked as mandatory in the\n+     * mapping but about to be propagated as null or empty.\n+     */\n+    String MANDATORY_NULL_OR_EMPTY_ATTR_NAME = \"__MANDATORY_NULL_OR_EMPTY__\";\n+\n+    /**\n+     * Create the any object tasks for every associated resource, unless in {@code excludedResources}.\n      *\n      * @param kind any object type kind\n      * @param key any object key\n      * @param enable whether any object should be enabled or not\n      * @param propByRes operation to be performed per resource\n      * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceKeys external resources performing not to be considered for propagation\n+     * @param excludedResources external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> getCreateTasks(\n@@ -57,18 +71,18 @@ List<PropagationTaskInfo> getCreateTasks(\n             Boolean enable,\n             PropagationByResource<String> propByRes,\n             Collection<Attr> vAttrs,\n-            Collection<String> noPropResourceKeys);\n+            Collection<String> excludedResources);\n \n     /**\n-     * Create the user tasks for every associated resource, unless in {@code noPropResourceKeys}.\n+     * Create the user tasks for every associated resource, unless in {@code excludedResources}.\n      *\n      * @param key user key\n      * @param password to be set\n      * @param enable whether user must be enabled or not\n      * @param propByRes operation to be performed per resource\n      * @param propByLinkedAccount operation to be performed for linked accounts\n      * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceKeys external resources not to be considered for propagation\n+     * @param excludedResources external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> getUserCreateTasks(\n@@ -78,10 +92,10 @@ List<PropagationTaskInfo> getUserCreateTasks(\n             PropagationByResource<String> propByRes,\n             PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             Collection<Attr> vAttrs,\n-            Collection<String> noPropResourceKeys);\n+            Collection<String> excludedResources);\n \n     /**\n-     * Create the update tasks for the any object on each resource associated, unless in {@code noPropResourceKeys}.\n+     * Create the update tasks for the any object on each resource associated, unless in {@code excludedResources}.\n      *\n      * @param kind any object type kind\n      * @param key any object key\n@@ -90,7 +104,7 @@ List<PropagationTaskInfo> getUserCreateTasks(\n      * @param propByRes operation to be performed per resource\n      * @param propByLinkedAccount operation to be performed for linked accounts\n      * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceKeys external resource keys not to be considered for propagation\n+     * @param excludedResources external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> getUpdateTasks(\n@@ -101,20 +115,20 @@ List<PropagationTaskInfo> getUpdateTasks(\n             PropagationByResource<String> propByRes,\n             PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             Collection<Attr> vAttrs,\n-            Collection<String> noPropResourceKeys);\n+            Collection<String> excludedResources);\n \n     /**\n-     * Create the update tasks for the user on each resource associated, unless in {@code noPropResourceKeys}.\n+     * Create the update tasks for the user on each resource associated, unless in {@code excludedResources}.\n      *\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @param changePwd whether password should be included for propagation attributes or not\n-     * @param noPropResourceKeys external resources not to be considered for propagation\n+     * @param excludedResources external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> getUserUpdateTasks(\n             UserWorkflowResult<Pair<UserUR, Boolean>> wfResult,\n             boolean changePwd,\n-            Collection<String> noPropResourceKeys);\n+            Collection<String> excludedResources);\n \n     /**\n      * Create the update tasks for the user on each resource associated; propagate password update only to requested\n@@ -126,21 +140,21 @@ List<PropagationTaskInfo> getUserUpdateTasks(\n     List<PropagationTaskInfo> getUserUpdateTasks(UserWorkflowResult<Pair<UserUR, Boolean>> wfResult);\n \n     /**\n-     * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceKeys}.\n+     * Create the delete tasks for the any object from each resource associated, unless in {@code excludedResources}.\n      *\n      * @param kind any object type kind\n      * @param key any object key\n      * @param propByRes operation to be performed per resource\n      * @param propByLinkedAccount operation to be performed for linked accounts\n-     * @param noPropResourceKeys external resource keys not to be considered for propagation\n+     * @param excludedResources external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> getDeleteTasks(\n             AnyTypeKind kind,\n             String key,\n             PropagationByResource<String> propByRes,\n             PropagationByResource<Pair<String, String>> propByLinkedAccount,\n-            Collection<String> noPropResourceKeys);\n+            Collection<String> excludedResources);\n \n     PropagationTaskInfo newTask(\n             DerAttrHandler derAttrHandler,\n@@ -152,15 +166,55 @@ PropagationTaskInfo newTask(\n             Pair<String, Set<Attribute>> preparedAttrs);\n \n     /**\n-     * Create the needed tasks for the realm for each resource associated, unless in {@code noPropResourceKeys}.\n+     * Create the needed tasks for the realm for each resource associated, unless in {@code excludedResources}.\n      *\n      * @param realm realm\n      * @param propByRes operation to be performed per resource\n-     * @param noPropResourceKeys external resource keys not to be considered for propagation\n+     * @param excludedResources external resource keys not to be considered for propagation\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> createTasks(\n             Realm realm,\n             PropagationByResource<String> propByRes,\n-            Collection<String> noPropResourceKeys);\n+            Collection<String> excludedResources);\n+\n+    /**\n+     * Prepare attributes for propagation.\n+     *\n+     * @param kind any object type kind\n+     * @param key any object key\n+     * @param password to be set (for users)\n+     * @param changePwd whether password should be included for propagation attributes or not (for users)\n+     * @param enable whether any object should be enabled or not, may be null to leave unchanged\n+     * @param excludedResources external resource keys not to be considered for propagation\n+     * @return map with prepared attributes per External Resource\n+     */\n+    Map<Pair<String, String>, Set<Attribute>> prepareAttrs(\n+            AnyTypeKind kind,\n+            String key,\n+            String password,\n+            boolean changePwd,\n+            Boolean enable,\n+            Collection<String> excludedResources);\n+\n+    /**\n+     * Prepare attributes for propagation.\n+     *\n+     * @param realm realm\n+     * @return map with prepared attributes per External Resource\n+     */\n+    Map<Pair<String, String>, Set<Attribute>> prepareAttrs(Realm realm);\n+\n+    /**\n+     * Enrich the provided tasks with attribute deltas.\n+     *\n+     * @param tasks propagation tasks\n+     * @param beforeAttrs attribute values before update\n+     * @param updateRequest effective any update request\n+     * @return enriched propagation tasks\n+     */\n+    List<PropagationTaskInfo> setAttributeDeltas(\n+            List<PropagationTaskInfo> tasks,\n+            Map<Pair<String, String>, Set<Attribute>> beforeAttrs,\n+            AnyUR updateRequest);\n }"},{"sha":"d8a86e7f7c26569b3034e97dbb205ffa5d3eff14","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -30,18 +30,6 @@\n @SuppressWarnings(\"squid:S1214\")\n public interface PropagationTaskExecutor {\n \n-    /**\n-     * Name for special propagation attribute used to indicate whether there are attributes, marked as mandatory in the\n-     * mapping but not to be propagated.\n-     */\n-    String MANDATORY_MISSING_ATTR_NAME = \"__MANDATORY_MISSING__\";\n-\n-    /**\n-     * Name for special propagation attribute used to indicate whether there are attributes, marked as mandatory in the\n-     * mapping but about to be propagated as null or empty.\n-     */\n-    String MANDATORY_NULL_OR_EMPTY_ATTR_NAME = \"__MANDATORY_NULL_OR_EMPTY__\";\n-\n     /**\n      * Remove any RetryTemplate defined for the given External Resource from local cache.\n      *"},{"sha":"d9cad412bb769db8ea751f9d649a71cf1e5fd8ae","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskInfo.java","status":"modified","additions":103,"deletions":61,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -19,58 +19,111 @@\n package org.apache.syncope.core.provisioning.api.propagation;\n \n import java.util.Optional;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.commons.lang3.builder.ToStringBuilder;\n-import org.apache.commons.lang3.builder.ToStringStyle;\n-import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n \n-@SuppressWarnings(\"squid:S1948\")\n-public class PropagationTaskInfo extends PropagationTaskTO {\n+public class PropagationTaskInfo {\n \n-    private static final long serialVersionUID = -2879861567335503099L;\n+    private final ExternalResource resource;\n \n-    private final ExternalResource externalResource;\n+    private final ResourceOperation operation;\n+\n+    private final ObjectClass objectClass;\n+\n+    private final AnyTypeKind anyTypeKind;\n+\n+    private final String anyType;\n+\n+    private final String entityKey;\n+\n+    private String connObjectKey;\n+\n+    private String oldConnObjectKey;\n+\n+    private final PropagationData propagationData;\n \n     private Connector connector;\n \n-    /**\n-     * Object on External Resource before propagation takes place.\n-     *\n-     * null: beforeObj was not attempted to read\n-     * not null but not present: beforeObj was attempted to read, but not found\n-     * not null and present: beforeObj value is available\n-     */\n-    private Optional<ConnectorObject> beforeObj;\n+    private Optional<ConnectorObject> beforeObj = Optional.empty();\n+\n+    private AnyUR updateRequest;\n+\n+    public PropagationTaskInfo(\n+            final ExternalResource resource,\n+            final ResourceOperation operation,\n+            final ObjectClass objectClass,\n+            final AnyTypeKind anyTypeKind,\n+            final String anyType,\n+            final String entityKey,\n+            final String connObjectKey,\n+            final PropagationData propagationData) {\n+\n+        this.resource = resource;\n+        this.operation = operation;\n+        this.objectClass = objectClass;\n+        this.anyTypeKind = anyTypeKind;\n+        this.anyType = anyType;\n+        this.entityKey = entityKey;\n+        this.connObjectKey = connObjectKey;\n+        this.propagationData = propagationData;\n+    }\n \n-    public PropagationTaskInfo(final ExternalResource externalResource) {\n-        super();\n-        this.externalResource = externalResource;\n+    public ExternalResource getResource() {\n+        return resource;\n     }\n \n-    public Connector getConnector() {\n-        return connector;\n+    public ResourceOperation getOperation() {\n+        return operation;\n     }\n \n-    public void setConnector(final Connector connector) {\n-        this.connector = connector;\n+    public ObjectClass getObjectClass() {\n+        return objectClass;\n     }\n \n-    public ExternalResource getExternalResource() {\n-        return externalResource;\n+    public AnyTypeKind getAnyTypeKind() {\n+        return anyTypeKind;\n     }\n \n-    @Override\n-    public String getResource() {\n-        return externalResource.getKey();\n+    public String getAnyType() {\n+        return anyType;\n     }\n \n-    @Override\n-    public void setResource(final String resource) {\n-        throw new IllegalArgumentException(\"Cannot set ExternalResource on \" + getClass().getName());\n+    public String getEntityKey() {\n+        return entityKey;\n+    }\n+\n+    public String getConnObjectKey() {\n+        return connObjectKey;\n+    }\n+\n+    public void setConnObjectKey(final String connObjectKey) {\n+        this.connObjectKey = connObjectKey;\n+    }\n+\n+    public String getOldConnObjectKey() {\n+        return oldConnObjectKey;\n+    }\n+\n+    public void setOldConnObjectKey(final String oldConnObjectKey) {\n+        this.oldConnObjectKey = oldConnObjectKey;\n+    }\n+\n+    public PropagationData getPropagationData() {\n+        return propagationData;\n+    }\n+\n+    public Connector getConnector() {\n+        return connector;\n+    }\n+\n+    public void setConnector(final Connector connector) {\n+        this.connector = connector;\n     }\n \n     public Optional<ConnectorObject> getBeforeObj() {\n@@ -81,40 +134,29 @@ public void setBeforeObj(final Optional<ConnectorObject> beforeObj) {\n         this.beforeObj = beforeObj;\n     }\n \n-    @Override\n-    public int hashCode() {\n-        return new HashCodeBuilder().\n-                appendSuper(super.hashCode()).\n-                append(externalResource.getKey()).\n-                append(beforeObj).\n-                build();\n+    public AnyUR getUpdateRequest() {\n+        return updateRequest;\n     }\n \n-    @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        final PropagationTaskInfo other = (PropagationTaskInfo) obj;\n-        return new EqualsBuilder().\n-                appendSuper(super.equals(obj)).\n-                append(externalResource.getKey(), other.externalResource.getKey()).\n-                append(beforeObj, other.beforeObj).\n-                build();\n+    public void setUpdateRequest(final AnyUR updateRequest) {\n+        this.updateRequest = updateRequest;\n     }\n \n     @Override\n     public String toString() {\n-        return new ToStringBuilder(this, ToStringStyle.SIMPLE_STYLE).\n-                appendSuper(super.toString()).\n-                append(externalResource).\n-                append(beforeObj).\n-                build();\n+        return \"PropagationTaskInfo{\"\n+                + \"resource=\" + resource.getKey()\n+                + \", operation=\" + operation\n+                + \", objectClass=\" + objectClass\n+                + \", anyTypeKind=\" + anyTypeKind\n+                + \", anyType=\" + anyType\n+                + \", entityKey=\" + entityKey\n+                + \", connObjectKey=\" + connObjectKey\n+                + \", oldConnObjectKey=\" + oldConnObjectKey\n+                + \", propagationData=\" + propagationData\n+                + \", connector=\" + connector\n+                + \", beforeObj=\" + beforeObj\n+                + \", updateRequest=\" + updateRequest\n+                + '}';\n     }\n }"},{"sha":"6fd69f9e86b89521099b9b974be2f57957071322","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AbstractValueDeserializer.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAbstractValueDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAbstractValueDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAbstractValueDeserializer.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.identityconnectors.common.security.GuardedString;\n+\n+public abstract class AbstractValueDeserializer<T extends Object> extends JsonDeserializer<T> {\n+\n+    protected List<Object> doDeserialize(final JsonNode value, final JsonParser jp) throws IOException {\n+        List<Object> values = new ArrayList<>();\n+\n+        for (JsonNode node : value) {\n+            if (node.isNull()) {\n+                values.add(null);\n+            } else if (node.isObject()) {\n+                values.add(((ObjectNode) node).traverse(jp.getCodec()).readValueAs(GuardedString.class));\n+            } else if (node.isBoolean()) {\n+                values.add(node.asBoolean());\n+            } else if (node.isDouble()) {\n+                values.add(node.asDouble());\n+            } else if (node.isLong()) {\n+                values.add(node.asLong());\n+            } else if (node.isInt()) {\n+                values.add(node.asInt());\n+            } else {\n+                String text = node.asText();\n+                if (text.startsWith(AbstractValueSerializer.BYTE_ARRAY_PREFIX)\n+                        && text.endsWith(AbstractValueSerializer.BYTE_ARRAY_SUFFIX)) {\n+\n+                    values.add(Base64.getDecoder().decode(StringUtils.substringBetween(\n+                            text,\n+                            AbstractValueSerializer.BYTE_ARRAY_PREFIX,\n+                            AbstractValueSerializer.BYTE_ARRAY_SUFFIX)));\n+                } else {\n+                    values.add(text);\n+                }\n+            }\n+        }\n+\n+        return values;\n+    }\n+}"},{"sha":"3e91b81f1952b5dbbd5ac5f7eec6e6ee4e470a20","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AbstractValueSerializer.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAbstractValueSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAbstractValueSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAbstractValueSerializer.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import org.identityconnectors.common.security.GuardedString;\n+\n+public abstract class AbstractValueSerializer<T extends Object> extends JsonSerializer<T> {\n+\n+    public static final String BYTE_ARRAY_PREFIX = \"<binary>\";\n+\n+    public static final String BYTE_ARRAY_SUFFIX = \"</binary>\";\n+\n+    protected void doSerialize(final List<Object> value, final JsonGenerator jgen) throws IOException {\n+        if (value == null) {\n+            jgen.writeNull();\n+        } else {\n+            jgen.writeStartArray();\n+            for (Object v : value) {\n+                if (v == null) {\n+                    jgen.writeNull();\n+                } else if (v instanceof GuardedString) {\n+                    jgen.writeObject(v);\n+                } else if (v instanceof Integer) {\n+                    jgen.writeNumber((Integer) v);\n+                } else if (v instanceof Long) {\n+                    jgen.writeNumber((Long) v);\n+                } else if (v instanceof Double) {\n+                    jgen.writeNumber((Double) v);\n+                } else if (v instanceof Boolean) {\n+                    jgen.writeBoolean((Boolean) v);\n+                } else if (v instanceof byte[]) {\n+                    jgen.writeString(\n+                            BYTE_ARRAY_PREFIX\n+                            + Base64.getEncoder().encodeToString((byte[]) v)\n+                            + BYTE_ARRAY_SUFFIX);\n+                } else {\n+                    jgen.writeString(v.toString());\n+                }\n+            }\n+            jgen.writeEndArray();\n+        }\n+    }\n+}"},{"sha":"3635ed22718f19c7b2e861c01b9926b8df44a544","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeltaDeserializer.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeltaDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeltaDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeltaDeserializer.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.List;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n+import org.identityconnectors.framework.common.objects.AttributeDeltaBuilder;\n+\n+@SuppressWarnings(\"squid:S3776\")\n+class AttributeDeltaDeserializer extends AbstractValueDeserializer<AttributeDelta> {\n+\n+    @Override\n+    public AttributeDelta deserialize(final JsonParser jp, final DeserializationContext ctx) throws IOException {\n+        ObjectNode tree = jp.readValueAsTree();\n+\n+        String name = tree.get(\"name\").asText();\n+\n+        List<Object> valuesToAdd = doDeserialize(tree.get(\"valuesToAdd\"), jp);\n+        List<Object> valuesToRemove = doDeserialize(tree.get(\"valuesToRemove\"), jp);\n+\n+        JsonNode valuesToReplaceNode = tree.get(\"valuesToReplace\");\n+        List<Object> valuesToReplace = doDeserialize(valuesToReplaceNode, jp);\n+\n+        return valuesToReplaceNode.isNull()\n+                ? AttributeDeltaBuilder.build(name, valuesToAdd, valuesToRemove)\n+                : AttributeDeltaBuilder.build(name, valuesToReplace);\n+    }\n+}"},{"sha":"5d0f597782002af218c5b0606d702b703fa0ab1f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeltaSerializer.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeltaSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeltaSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeltaSerializer.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.serialization;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.io.IOException;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n+\n+class AttributeDeltaSerializer extends AbstractValueSerializer<AttributeDelta> {\n+\n+    @Override\n+    public void serialize(final AttributeDelta source, final JsonGenerator jgen, final SerializerProvider sp)\n+            throws IOException {\n+\n+        jgen.writeStartObject();\n+\n+        jgen.writeStringField(\"name\", source.getName());\n+\n+        jgen.writeFieldName(\"valuesToAdd\");\n+        doSerialize(source.getValuesToAdd(), jgen);\n+\n+        jgen.writeFieldName(\"valuesToRemove\");\n+        doSerialize(source.getValuesToRemove(), jgen);\n+\n+        jgen.writeFieldName(\"valuesToReplace\");\n+        doSerialize(source.getValuesToReplace(), jgen);\n+\n+        jgen.writeEndObject();\n+    }\n+}"},{"sha":"87f6b3e46f1b4e677374aafe1503897b5ab66b96","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeserializer.java","status":"modified","additions":5,"deletions":39,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializer.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -20,67 +20,33 @@\n \n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Base64;\n import java.util.List;\n-import org.apache.commons.lang3.StringUtils;\n-import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.Uid;\n \n @SuppressWarnings(\"squid:S3776\")\n-class AttributeDeserializer extends JsonDeserializer<Attribute> {\n+class AttributeDeserializer extends AbstractValueDeserializer<Attribute> {\n \n     @Override\n-    public Attribute deserialize(final JsonParser jp, final DeserializationContext ctx)\n-            throws IOException {\n-\n+    public Attribute deserialize(final JsonParser jp, final DeserializationContext ctx) throws IOException {\n         ObjectNode tree = jp.readValueAsTree();\n \n         String name = tree.get(\"name\").asText();\n \n-        List<Object> values = new ArrayList<>();\n-        for (JsonNode node : tree.get(\"value\")) {\n-            if (node.isNull()) {\n-                values.add(null);\n-            } else if (node.isObject()) {\n-                values.add(((ObjectNode) node).traverse(jp.getCodec()).readValueAs(GuardedString.class));\n-            } else if (node.isBoolean()) {\n-                values.add(node.asBoolean());\n-            } else if (node.isDouble()) {\n-                values.add(node.asDouble());\n-            } else if (node.isLong()) {\n-                values.add(node.asLong());\n-            } else if (node.isInt()) {\n-                values.add(node.asInt());\n-            } else {\n-                String text = node.asText();\n-                if (text.startsWith(AttributeSerializer.BYTE_ARRAY_PREFIX)\n-                        && text.endsWith(AttributeSerializer.BYTE_ARRAY_SUFFIX)) {\n-\n-                    values.add(Base64.getDecoder().decode(StringUtils.substringBetween(\n-                            text, AttributeSerializer.BYTE_ARRAY_PREFIX, AttributeSerializer.BYTE_ARRAY_SUFFIX)));\n-                } else {\n-                    values.add(text);\n-                }\n-            }\n-        }\n+        List<Object> values = doDeserialize(tree.get(\"value\"), jp);\n \n         if (Uid.NAME.equals(name)) {\n             return new Uid(values.isEmpty() || values.get(0) == null ? null : values.get(0).toString());\n         } else {\n             if (Name.NAME.equals(name)) {\n                 return new Name(values.isEmpty() || values.get(0) == null ? null : values.get(0).toString());\n-            } else {\n-                return AttributeBuilder.build(name, values);\n             }\n+\n+            return AttributeBuilder.build(name, values);\n         }\n     }\n-\n }"},{"sha":"e4ca496e1e400b0a04412be07bd227ee0199d13e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/AttributeSerializer.java","status":"modified","additions":2,"deletions":37,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeSerializer.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -19,18 +19,11 @@\n package org.apache.syncope.core.provisioning.api.serialization;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n-import java.util.Base64;\n-import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n-class AttributeSerializer extends JsonSerializer<Attribute> {\n-\n-    public static final String BYTE_ARRAY_PREFIX = \"<binary>\";\n-\n-    public static final String BYTE_ARRAY_SUFFIX = \"</binary>\";\n+class AttributeSerializer extends AbstractValueSerializer<Attribute> {\n \n     @Override\n     public void serialize(final Attribute source, final JsonGenerator jgen, final SerializerProvider sp)\n@@ -41,36 +34,8 @@ public void serialize(final Attribute source, final JsonGenerator jgen, final Se\n         jgen.writeStringField(\"name\", source.getName());\n \n         jgen.writeFieldName(\"value\");\n-        if (source.getValue() == null) {\n-            jgen.writeNull();\n-        } else {\n-            jgen.writeStartArray();\n-            for (Object value : source.getValue()) {\n-                if (value == null) {\n-                    jgen.writeNull();\n-                } else if (value instanceof GuardedString) {\n-                    jgen.writeObject(value);\n-                } else if (value instanceof Integer) {\n-                    jgen.writeNumber((Integer) value);\n-                } else if (value instanceof Long) {\n-                    jgen.writeNumber((Long) value);\n-                } else if (value instanceof Double) {\n-                    jgen.writeNumber((Double) value);\n-                } else if (value instanceof Boolean) {\n-                    jgen.writeBoolean((Boolean) value);\n-                } else if (value instanceof byte[]) {\n-                    jgen.writeString(\n-                            BYTE_ARRAY_PREFIX\n-                            + Base64.getEncoder().encodeToString((byte[]) value)\n-                            + BYTE_ARRAY_SUFFIX);\n-                } else {\n-                    jgen.writeString(value.toString());\n-                }\n-            }\n-            jgen.writeEndArray();\n-        }\n+        doSerialize(source.getValue(), jgen);\n \n         jgen.writeEndObject();\n     }\n-\n }"},{"sha":"c4d9237f04b9d9408cf07db3d75b78212b72d790","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelper.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -27,6 +27,7 @@\n import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -44,9 +45,11 @@ public final class POJOHelper {\n         SimpleModule pojoModule = new SimpleModule(\"POJOModule\", new Version(1, 0, 0, null, null, null));\n         pojoModule.addSerializer(GuardedString.class, new GuardedStringSerializer());\n         pojoModule.addSerializer(Attribute.class, new AttributeSerializer());\n+        pojoModule.addSerializer(AttributeDelta.class, new AttributeDeltaSerializer());\n         pojoModule.addSerializer(SyncToken.class, new SyncTokenSerializer());\n         pojoModule.addDeserializer(GuardedString.class, new GuardedStringDeserializer());\n         pojoModule.addDeserializer(Attribute.class, new AttributeDeserializer());\n+        pojoModule.addDeserializer(AttributeDelta.class, new AttributeDeltaDeserializer());\n         pojoModule.addDeserializer(SyncToken.class, new SyncTokenDeserializer());\n \n         MAPPER = JsonMapper.builder()."},{"sha":"74137f77baea8ce19e216000fe2ee8d7db055e4d","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskInfoTest.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/891ed10b74e20cbcbdfc6a0782031ea1b85a3e12/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/891ed10b74e20cbcbdfc6a0782031ea1b85a3e12/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfoTest.java?ref=891ed10b74e20cbcbdfc6a0782031ea1b85a3e12","patch":"@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api.propagation;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-import java.util.Optional;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n-import org.apache.syncope.core.provisioning.api.AbstractTest;\n-import org.apache.syncope.core.provisioning.api.Connector;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.junit.jupiter.api.Test;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-\n-public class PropagationTaskInfoTest extends AbstractTest {\n-\n-    @Mock\n-    private ExternalResource externalResource;\n-\n-    @Mock\n-    private transient Connector connector;\n-\n-    @InjectMocks\n-    private PropagationTaskInfo propagationTaskInfo;\n-\n-    @Test\n-    public void test(final @Mock Optional<ConnectorObject> beforeObj) {\n-        PropagationTaskInfo propagationTaskInfo2 = new PropagationTaskInfo(externalResource);\n-        Object nullObj = null;\n-\n-        assertTrue(propagationTaskInfo2.equals(propagationTaskInfo2));\n-        assertTrue(propagationTaskInfo2.equals(propagationTaskInfo));\n-        assertFalse(propagationTaskInfo.equals(nullObj));\n-        assertFalse(propagationTaskInfo.equals(String.class));\n-        assertEquals(propagationTaskInfo.hashCode(), propagationTaskInfo2.hashCode());\n-        assertEquals(connector, propagationTaskInfo.getConnector());\n-\n-        propagationTaskInfo2.setConnector(connector);\n-        assertEquals(connector, propagationTaskInfo2.getConnector());\n-        assertEquals(externalResource.getClass(), propagationTaskInfo.getExternalResource().getClass());\n-\n-        IllegalArgumentException exception =\n-                assertThrows(IllegalArgumentException.class, () -> propagationTaskInfo.setResource(\"testResource\"));\n-        assertEquals(exception.getClass(), IllegalArgumentException.class);\n-        assertNull(propagationTaskInfo2.getResource());\n-\n-        propagationTaskInfo.setBeforeObj(beforeObj);\n-        assertEquals(beforeObj, propagationTaskInfo.getBeforeObj());\n-    }\n-}"},{"sha":"87836c2df67247448cd028cd18b762c957f531bf","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/AttributeDeserializerTest.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FAttributeDeserializerTest.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -30,6 +30,7 @@\n import java.util.List;\n import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.Name;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mock;\n@@ -55,11 +56,9 @@ public class AttributeDeserializerTest extends AbstractTest {\n \n     private String name;\n \n-    private Attribute attr;\n-\n     @BeforeEach\n     public void initTest() throws IOException {\n-        name = \"__NAME__\";\n+        name = Name.NAME;\n         when(jp.readValueAsTree()).thenReturn(tree);\n         when(tree.get(\"name\")).thenReturn(node2);\n         when(tree.get(\"value\")).thenReturn(node);\n@@ -70,7 +69,7 @@ public void initTest() throws IOException {\n     public void deserializeIsNull() throws IOException {\n         when(node2.asText()).thenReturn(name);\n         when(node.isNull()).thenReturn(Boolean.TRUE);\n-        attr = deserializer.deserialize(jp, ct);\n+        Attribute attr = deserializer.deserialize(jp, ct);\n         assertEquals(name, attr.getName());\n         assertEquals(Collections.singletonList(null), attr.getValue());\n     }\n@@ -80,7 +79,7 @@ public void deserializeIsBoolean() throws IOException {\n         when(node2.asText()).thenReturn(name);\n         when(node.isBoolean()).thenReturn(Boolean.TRUE);\n         when(node.asBoolean()).thenReturn(Boolean.TRUE);\n-        attr = deserializer.deserialize(jp, ct);\n+        Attribute attr = deserializer.deserialize(jp, ct);\n         assertEquals(name, attr.getName());\n         assertEquals(List.of(Boolean.TRUE.toString()).get(0), attr.getValue().get(0));\n     }\n@@ -92,7 +91,7 @@ public void deserializeIsDouble() throws IOException {\n         when(node2.asText()).thenReturn(name);\n         when(node.isDouble()).thenReturn(Boolean.TRUE);\n         when(node.asDouble()).thenReturn(number);\n-        attr = deserializer.deserialize(jp, ct);\n+        Attribute attr = deserializer.deserialize(jp, ct);\n         assertEquals(name, attr.getName());\n         assertEquals(List.of(number).get(0), attr.getValue().get(0));\n     }\n@@ -104,7 +103,7 @@ public void deserializeIsLong() throws IOException {\n         when(node2.asText()).thenReturn(name);\n         when(node.isLong()).thenReturn(Boolean.TRUE);\n         when(node.asLong()).thenReturn(number);\n-        attr = deserializer.deserialize(jp, ct);\n+        Attribute attr = deserializer.deserialize(jp, ct);\n         assertEquals(name, attr.getName());\n         assertEquals(List.of(number.toString()).get(0), attr.getValue().get(0));\n     }\n@@ -115,7 +114,7 @@ public void deserializeIsInt() throws IOException {\n         when(node2.asText()).thenReturn(name);\n         when(node.isInt()).thenReturn(Boolean.TRUE);\n         when(node.asInt()).thenReturn(number);\n-        attr = deserializer.deserialize(jp, ct);\n+        Attribute attr = deserializer.deserialize(jp, ct);\n         assertEquals(attr.getName(), name);\n         assertEquals(List.of(number.toString()).get(0), attr.getValue().get(0));\n     }\n@@ -125,7 +124,7 @@ public void deserializeIsText() throws IOException {\n         String text = \"<binary>test\";\n         when(node2.asText()).thenReturn(name);\n         when(node.asText()).thenReturn(text);\n-        attr = deserializer.deserialize(jp, ct);\n+        Attribute attr = deserializer.deserialize(jp, ct);\n         assertEquals(attr.getName(), name);\n         assertEquals(List.of(text).get(0), attr.getValue().get(0));\n     }"},{"sha":"484d5ee1d23d50376fb62c2e840aa10ed6491f8e","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelperTest.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelperTest.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -22,7 +22,12 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.provisioning.api.AbstractTest;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeDeltaBuilder;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mock;\n \n@@ -48,4 +53,14 @@ public void deserializeWithTypeReference(final @Mock TypeReference<? extends Obj\n \n         assertNull(POJOHelper.deserialize(serialized, reference));\n     }\n+\n+    @Test\n+    public void propagationData() {\n+        PropagationData original = new PropagationData(Set.of(AttributeBuilder.build(\"title\", \"title1\")));\n+        original.setAttributeDeltas(Set.of(AttributeDeltaBuilder.build(\"title\", List.of(\"title2\"), List.of(\"title1\"))));\n+\n+        String serialized = POJOHelper.serialize(original);\n+\n+        assertEquals(serialized, POJOHelper.serialize(POJOHelper.deserialize(serialized, PropagationData.class)));\n+    }\n }"},{"sha":"596d67f016d9ded583b8a42affab98911bb32c61","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/AsyncConnectorFacade.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAsyncConnectorFacade.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -23,6 +23,7 @@\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.api.ConnectorFacade;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n@@ -76,6 +77,17 @@ public Future<Uid> update(\n         return new AsyncResult<>(connector.update(objectClass, uid, attrs, options));\n     }\n \n+    @Async\n+    public Future<Set<AttributeDelta>> updateDelta(\n+            final ConnectorFacade connector,\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final Set<AttributeDelta> modifications,\n+            final OperationOptions options) {\n+\n+        return new AsyncResult<>(connector.updateDelta(objectClass, uid, modifications, options));\n+    }\n+\n     @Async\n     public Future<Uid> delete(\n             final ConnectorFacade connector,"},{"sha":"d03331d9551589a9c55ba0fb6cbaeeae44fd99f4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -42,6 +42,7 @@\n import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n@@ -225,6 +226,44 @@ public Uid update(\n         return result;\n     }\n \n+    @Override\n+    public Set<AttributeDelta> updateDelta(\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final Set<AttributeDelta> modifications,\n+            final OperationOptions options,\n+            final AtomicReference<Boolean> propagationAttempted) {\n+\n+        Set<AttributeDelta> result = null;\n+\n+        if (connInstance.getCapabilities().contains(ConnectorCapability.UPDATE)) {\n+            propagationAttempted.set(true);\n+\n+            Future<Set<AttributeDelta>> future = \n+                    asyncFacade.updateDelta(connector, objectClass, uid, modifications, options);\n+\n+            try {\n+                result = future.get(connInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n+            } catch (java.util.concurrent.TimeoutException e) {\n+                future.cancel(true);\n+                throw new TimeoutException(\"Request timeout\");\n+            } catch (Exception e) {\n+                LOG.error(\"Connector request execution failure\", e);\n+                if (e.getCause() instanceof RuntimeException) {\n+                    throw (RuntimeException) e.getCause();\n+                } else {\n+                    throw new RuntimeException(e.getCause());\n+                }\n+            }\n+        } else {\n+            LOG.info(\"UpdateDelta for {} was attempted, although the \"\n+                    + \"connector only has these capabilities: {}. No action.\",\n+                    uid.getUidValue(), connInstance.getCapabilities());\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public void delete(\n             final ObjectClass objectClass,"},{"sha":"673086c25fa384f85ccffa34f3261ae7469567a2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":29,"deletions":28,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -38,6 +39,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n+import org.identityconnectors.framework.common.objects.Attribute;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -49,22 +51,22 @@ public class DefaultAnyObjectProvisioningManager implements AnyObjectProvisionin\n \n     protected final PropagationTaskExecutor taskExecutor;\n \n-    protected final VirAttrHandler virtAttrHandler;\n-\n     protected final AnyObjectDAO anyObjectDAO;\n \n+    protected final VirAttrHandler virtAttrHandler;\n+\n     public DefaultAnyObjectProvisioningManager(\n             final AnyObjectWorkflowAdapter awfAdapter,\n             final PropagationManager propagationManager,\n             final PropagationTaskExecutor taskExecutor,\n-            final VirAttrHandler virtAttrHandler,\n-            final AnyObjectDAO anyObjectDAO) {\n+            final AnyObjectDAO anyObjectDAO,\n+            final VirAttrHandler virtAttrHandler) {\n \n         this.awfAdapter = awfAdapter;\n         this.propagationManager = propagationManager;\n         this.taskExecutor = taskExecutor;\n-        this.virtAttrHandler = virtAttrHandler;\n         this.anyObjectDAO = anyObjectDAO;\n+        this.virtAttrHandler = virtAttrHandler;\n     }\n \n     @Override\n@@ -100,16 +102,6 @@ public Pair<String, List<PropagationStatus>> create(\n         return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n \n-    @Override\n-    public Pair<AnyObjectUR, List<PropagationStatus>> update(\n-            final AnyObjectUR anyObjectUR,\n-            final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n-\n-        return update(anyObjectUR, Set.of(), nullPriorityAsync, updater, context);\n-    }\n-\n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public Pair<AnyObjectUR, List<PropagationStatus>> update(\n@@ -119,17 +111,28 @@ public Pair<AnyObjectUR, List<PropagationStatus>> update(\n             final String updater,\n             final String context) {\n \n-        WorkflowResult<AnyObjectUR> updated = awfAdapter.update(anyObjectUR, updater, context);\n-\n-        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n+        Map<Pair<String, String>, Set<Attribute>> beforeAttrs = propagationManager.prepareAttrs(\n                 AnyTypeKind.ANY_OBJECT,\n-                updated.getResult().getKey(),\n-                false,\n+                anyObjectUR.getKey(),\n                 null,\n-                updated.getPropByRes(),\n+                false,\n                 null,\n-                anyObjectUR.getVirAttrs(),\n                 excludedResources);\n+\n+        WorkflowResult<AnyObjectUR> updated = awfAdapter.update(anyObjectUR, updater, context);\n+\n+        List<PropagationTaskInfo> taskInfos = propagationManager.setAttributeDeltas(\n+                propagationManager.getUpdateTasks(\n+                        AnyTypeKind.ANY_OBJECT,\n+                        updated.getResult().getKey(),\n+                        false,\n+                        null,\n+                        updated.getPropByRes(),\n+                        null,\n+                        anyObjectUR.getVirAttrs(),\n+                        excludedResources),\n+                beforeAttrs,\n+                updated.getResult());\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n \n         return Pair.of(updated.getResult(), propagationReporter.getStatuses());\n@@ -187,8 +190,7 @@ public List<PropagationStatus> provision(\n             final String key,\n             final Collection<String> resources,\n             final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n+            final String executor) {\n \n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n@@ -202,7 +204,7 @@ public List<PropagationStatus> provision(\n                 null,\n                 null,\n                 null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, executor);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -212,8 +214,7 @@ public List<PropagationStatus> deprovision(\n             final String key,\n             final Collection<String> resources,\n             final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n+            final String executor) {\n \n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n@@ -226,7 +227,7 @@ public List<PropagationStatus> deprovision(\n                 anyObjectDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, executor);\n \n         return propagationReporter.getStatuses();\n     }"},{"sha":"a43f5e7c74154a50913e8827274e43756d27f238","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":23,"deletions":20,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.workflow.api.GroupWorkflowAdapter;\n+import org.identityconnectors.framework.common.objects.Attribute;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -121,13 +122,6 @@ public Pair<String, List<PropagationStatus>> create(\n         return Pair.of(created.getResult(), propagationReporter.getStatuses());\n     }\n \n-    @Override\n-    public Pair<GroupUR, List<PropagationStatus>> update(\n-            final GroupUR groupUR, final boolean nullPriorityAsync, final String updater, final String context) {\n-\n-        return update(groupUR, Set.of(), nullPriorityAsync, updater, context);\n-    }\n-\n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public Pair<GroupUR, List<PropagationStatus>> update(\n@@ -137,17 +131,28 @@ public Pair<GroupUR, List<PropagationStatus>> update(\n             final String updater,\n             final String context) {\n \n-        WorkflowResult<GroupUR> updated = gwfAdapter.update(groupUR, updater, context);\n-\n-        List<PropagationTaskInfo> tasks = propagationManager.getUpdateTasks(\n+        Map<Pair<String, String>, Set<Attribute>> beforeAttrs = propagationManager.prepareAttrs(\n                 AnyTypeKind.GROUP,\n-                updated.getResult().getKey(),\n-                false,\n+                groupUR.getKey(),\n                 null,\n-                updated.getPropByRes(),\n+                false,\n                 null,\n-                groupUR.getVirAttrs(),\n                 excludedResources);\n+\n+        WorkflowResult<GroupUR> updated = gwfAdapter.update(groupUR, updater, context);\n+\n+        List<PropagationTaskInfo> tasks = propagationManager.setAttributeDeltas(\n+                propagationManager.getUpdateTasks(\n+                        AnyTypeKind.GROUP,\n+                        updated.getResult().getKey(),\n+                        false,\n+                        null,\n+                        updated.getPropByRes(),\n+                        null,\n+                        groupUR.getVirAttrs(),\n+                        excludedResources),\n+                beforeAttrs,\n+                updated.getResult());\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync, updater);\n \n         return Pair.of(updated.getResult(), propagationReporter.getStatuses());\n@@ -220,8 +225,7 @@ public List<PropagationStatus> provision(\n             final String key,\n             final Collection<String> resources,\n             final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n+            final String executor) {\n \n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n@@ -235,7 +239,7 @@ public List<PropagationStatus> provision(\n                 null,\n                 null,\n                 null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, executor);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -245,8 +249,7 @@ public List<PropagationStatus> deprovision(\n             final String key,\n             final Collection<String> resources,\n             final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n+            final String executor) {\n \n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n@@ -259,7 +262,7 @@ public List<PropagationStatus> deprovision(\n                 groupDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, executor);\n \n         return propagationReporter.getStatuses();\n     }"},{"sha":"41a7274ef8c84e34ed70ad2010c7e8b4d5364d79","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -559,7 +559,7 @@ public Pair<String, Attribute> prepareAttr(\n         }\n \n         AttrSchemaType schemaType = intAttrName.getSchema() instanceof PlainSchema\n-                ? ((PlainSchema) intAttrName.getSchema()).getType()\n+                ? intAttrName.getSchema().getType()\n                 : AttrSchemaType.String;\n         boolean readOnlyVirSchema = intAttrName.getSchema() instanceof VirSchema\n                 ? intAttrName.getSchema().isReadonly()"},{"sha":"4382b3fbee8f8132488f0b7c6f1ee54f61e6233a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":41,"deletions":16,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -21,6 +21,8 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -46,6 +48,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n+import org.identityconnectors.framework.common.objects.Attribute;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Propagation;\n@@ -61,22 +64,22 @@ public class DefaultUserProvisioningManager implements UserProvisioningManager {\n \n     protected final PropagationTaskExecutor taskExecutor;\n \n-    protected final VirAttrHandler virtAttrHandler;\n-\n     protected final UserDAO userDAO;\n \n+    protected final VirAttrHandler virtAttrHandler;\n+\n     public DefaultUserProvisioningManager(\n             final UserWorkflowAdapter uwfAdapter,\n             final PropagationManager propagationManager,\n             final PropagationTaskExecutor taskExecutor,\n-            final VirAttrHandler virtAttrHandler,\n-            final UserDAO userDAO) {\n+            final UserDAO userDAO,\n+            final VirAttrHandler virtAttrHandler) {\n \n         this.uwfAdapter = uwfAdapter;\n         this.propagationManager = propagationManager;\n         this.taskExecutor = taskExecutor;\n-        this.virtAttrHandler = virtAttrHandler;\n         this.userDAO = userDAO;\n+        this.virtAttrHandler = virtAttrHandler;\n     }\n \n     @Override\n@@ -117,9 +120,20 @@ public Pair<String, List<PropagationStatus>> create(\n     public Pair<UserUR, List<PropagationStatus>> update(\n             final UserUR userUR, final boolean nullPriorityAsync, final String updater, final String context) {\n \n+        Map<Pair<String, String>, Set<Attribute>> beforeAttrs = propagationManager.prepareAttrs(\n+                AnyTypeKind.USER,\n+                userUR.getKey(),\n+                Optional.ofNullable(userUR.getPassword()).map(PasswordPatch::getValue).orElse(null),\n+                userUR.getPassword() != null,\n+                null,\n+                Set.of());\n+\n         UserWorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.update(userUR, updater, context);\n \n-        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.setAttributeDeltas(\n+                propagationManager.getUserUpdateTasks(updated),\n+                beforeAttrs,\n+                updated.getResult().getLeft());\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n \n         return Pair.of(updated.getResult().getLeft(), propagationReporter.getStatuses());\n@@ -147,6 +161,14 @@ public Pair<UserUR, List<PropagationStatus>> update(\n             final String updater,\n             final String context) {\n \n+        Map<Pair<String, String>, Set<Attribute>> beforeAttrs = propagationManager.prepareAttrs(\n+                AnyTypeKind.USER,\n+                userUR.getKey(),\n+                Optional.ofNullable(userUR.getPassword()).map(PasswordPatch::getValue).orElse(null),\n+                userUR.getPassword() != null,\n+                enabled,\n+                excludedResources);\n+\n         UserWorkflowResult<Pair<UserUR, Boolean>> updated;\n         try {\n             updated = uwfAdapter.update(userUR, updater, context);\n@@ -185,8 +207,13 @@ public Pair<UserUR, List<PropagationStatus>> update(\n             }\n         }\n \n-        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(\n-                updated, updated.getResult().getLeft().getPassword() != null, excludedResources);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.setAttributeDeltas(\n+                propagationManager.getUserUpdateTasks(\n+                        updated,\n+                        updated.getResult().getLeft().getPassword() != null,\n+                        excludedResources),\n+                beforeAttrs,\n+                updated.getResult().getLeft());\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n \n         return Pair.of(updated.getResult().getLeft(), propagationReporter.getStatuses());\n@@ -322,13 +349,12 @@ public List<PropagationStatus> provision(\n             final String password,\n             final Collection<String> resources,\n             final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n+            final String executor) {\n \n         UserUR userUR = new UserUR();\n         userUR.setKey(key);\n-        userUR.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+        userUR.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(r).build()).\n                 collect(Collectors.toSet()));\n \n         if (changePwd) {\n@@ -346,7 +372,7 @@ public List<PropagationStatus> provision(\n                 Pair.of(userUR, (Boolean) null), propByRes, null, \"update\");\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, executor);\n \n         return propagationReporter.getStatuses();\n     }\n@@ -356,8 +382,7 @@ public List<PropagationStatus> deprovision(\n             final String key,\n             final Collection<String> resources,\n             final boolean nullPriorityAsync,\n-            final String updater,\n-            final String context) {\n+            final String executor) {\n \n         PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.DELETE, resources);\n@@ -377,7 +402,7 @@ public List<PropagationStatus> deprovision(\n                 userDAO.findAllResourceKeys(key).stream().\n                         filter(resource -> !resources.contains(resource)).\n                         collect(Collectors.toList()));\n-        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, updater);\n+        PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync, executor);\n \n         return propagationReporter.getStatuses();\n     }"},{"sha":"36a44dfbbca8c546b5a9f0e9af7263d5d587861f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -651,15 +651,15 @@ public UserProvisioningManager userProvisioningManager(\n             final UserWorkflowAdapter uwfAdapter,\n             final PropagationManager propagationManager,\n             final PropagationTaskExecutor taskExecutor,\n-            final VirAttrHandler virtAttrHandler,\n-            final UserDAO userDAO) {\n+            final UserDAO userDAO,\n+            final VirAttrHandler virtAttrHandler) {\n \n         return new DefaultUserProvisioningManager(\n                 uwfAdapter,\n                 propagationManager,\n                 taskExecutor,\n-                virtAttrHandler,\n-                userDAO);\n+                userDAO,\n+                virtAttrHandler);\n     }\n \n     @ConditionalOnMissingBean\n@@ -687,15 +687,15 @@ public AnyObjectProvisioningManager anyObjectProvisioningManager(\n             final AnyObjectWorkflowAdapter awfAdapter,\n             final PropagationManager propagationManager,\n             final PropagationTaskExecutor taskExecutor,\n-            final VirAttrHandler virtAttrHandler,\n-            final AnyObjectDAO anyObjectDAO) {\n+            final AnyObjectDAO anyObjectDAO,\n+            final VirAttrHandler virtAttrHandler) {\n \n         return new DefaultAnyObjectProvisioningManager(\n                 awfAdapter,\n                 propagationManager,\n                 taskExecutor,\n-                virtAttrHandler,\n-                anyObjectDAO);\n+                anyObjectDAO,\n+                virtAttrHandler);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"65d7100068fdd029b30529fbf129e8bf3929655a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -64,7 +64,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.GroupablePlainAttr;\n@@ -640,7 +639,7 @@ protected static void fillTO(\n \n         anyTO.setRealm(realmFullPath);\n \n-        anyTO.getAuxClasses().addAll(auxClasses.stream().map(Entity::getKey).collect(Collectors.toList()));\n+        anyTO.getAuxClasses().addAll(auxClasses.stream().map(AnyTypeClass::getKey).collect(Collectors.toList()));\n \n         plainAttrs\n                 .forEach(plainAttr -> anyTO.getPlainAttrs().add(new Attr.Builder(plainAttr.getSchema().getKey())\n@@ -652,7 +651,7 @@ protected static void fillTO(\n         virAttrs.forEach((schema, values) -> anyTO.getVirAttrs()\n                 .add(new Attr.Builder(schema.getKey()).values(values).build()));\n \n-        anyTO.getResources().addAll(resources.stream().map(Entity::getKey).collect(Collectors.toSet()));\n+        anyTO.getResources().addAll(resources.stream().map(ExternalResource::getKey).collect(Collectors.toSet()));\n     }\n \n     protected static RelationshipTO getRelationshipTO(final String relationshipType, final AnyObject otherEnd) {"},{"sha":"92853177b5619bd084c034d09869f1482259536e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeClassDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -25,9 +25,9 @@\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n@@ -126,14 +126,14 @@ public AnyTypeClassTO getAnyTypeClassTO(final AnyTypeClass anyTypeClass) {\n         anyTypeClassTO.setKey(anyTypeClass.getKey());\n \n         anyTypeClassTO.getInUseByTypes().addAll(\n-                anyTypeDAO.findByTypeClass(anyTypeClass).stream().map(Entity::getKey).collect(Collectors.toList()));\n+                anyTypeDAO.findByTypeClass(anyTypeClass).stream().map(AnyType::getKey).collect(Collectors.toList()));\n \n         anyTypeClassTO.getPlainSchemas().addAll(\n-                anyTypeClass.getPlainSchemas().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                anyTypeClass.getPlainSchemas().stream().map(PlainSchema::getKey).collect(Collectors.toList()));\n         anyTypeClassTO.getDerSchemas().addAll(\n-                anyTypeClass.getDerSchemas().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                anyTypeClass.getDerSchemas().stream().map(DerSchema::getKey).collect(Collectors.toList()));\n         anyTypeClassTO.getVirSchemas().addAll(\n-                anyTypeClass.getVirSchemas().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                anyTypeClass.getVirSchemas().stream().map(VirSchema::getKey).collect(Collectors.toList()));\n \n         return anyTypeClassTO;\n     }"},{"sha":"57b7907afa8293da84811943a10832d46e8c92d0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -35,7 +35,6 @@\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.data.AnyTypeDataBinder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -169,7 +168,8 @@ public AnyTypeTO getAnyTypeTO(final AnyType anyType) {\n         AnyTypeTO anyTypeTO = new AnyTypeTO();\n         anyTypeTO.setKey(anyType.getKey());\n         anyTypeTO.setKind(anyType.getKind());\n-        anyTypeTO.getClasses().addAll(anyType.getClasses().stream().map(Entity::getKey).collect(Collectors.toList()));\n+        anyTypeTO.getClasses().addAll(anyType.getClasses().stream().\n+                map(AnyTypeClass::getKey).collect(Collectors.toList()));\n         return anyTypeTO;\n     }\n }"},{"sha":"d33fd4e00f671c1d9ff82c7f5839b5f3ff596500","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -53,7 +53,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n@@ -390,7 +389,7 @@ public TypeExtensionTO getTypeExtensionTO(final TypeExtension typeExt) {\n         TypeExtensionTO typeExtTO = new TypeExtensionTO();\n         typeExtTO.setAnyType(typeExt.getAnyType().getKey());\n         typeExtTO.getAuxClasses().addAll(\n-                typeExt.getAuxClasses().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                typeExt.getAuxClasses().stream().map(AnyTypeClass::getKey).collect(Collectors.toList()));\n         return typeExtTO;\n     }\n "},{"sha":"fdf1c3c1bc0d7c5dcf99e4757015e27b180728e5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -148,7 +147,8 @@ protected <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO\n             PropagationPolicy propagationPolicy = PropagationPolicy.class.cast(result);\n             PropagationPolicyTO propagationPolicyTO = PropagationPolicyTO.class.cast(policyTO);\n \n-            propagationPolicy.setPrefetch(propagationPolicyTO.isPrefetch());\n+            propagationPolicy.setFetchAroundProvisioning(propagationPolicyTO.isFetchAroundProvisioning());\n+            propagationPolicy.setUpdateDelta(propagationPolicyTO.isUpdateDelta());\n             propagationPolicy.setBackOffStrategy(propagationPolicyTO.getBackOffStrategy());\n             propagationPolicy.setBackOffParams(propagationPolicyTO.getBackOffParams());\n             propagationPolicy.setMaxAttempts(propagationPolicyTO.getMaxAttempts());\n@@ -291,7 +291,7 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             passwordPolicyTO.setHistoryLength(passwordPolicy.getHistoryLength());\n \n             passwordPolicyTO.getRules().addAll(\n-                    passwordPolicy.getRules().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                    passwordPolicy.getRules().stream().map(Implementation::getKey).collect(Collectors.toList()));\n         } else if (policy instanceof AccountPolicy) {\n             AccountPolicy accountPolicy = AccountPolicy.class.cast(policy);\n             AccountPolicyTO accountPolicyTO = new AccountPolicyTO();\n@@ -301,16 +301,17 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             accountPolicyTO.setPropagateSuspension(accountPolicy.isPropagateSuspension());\n \n             accountPolicyTO.getRules().addAll(\n-                    accountPolicy.getRules().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                    accountPolicy.getRules().stream().map(Implementation::getKey).collect(Collectors.toList()));\n \n             accountPolicyTO.getPassthroughResources().addAll(\n-                    accountPolicy.getResources().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                    accountPolicy.getResources().stream().map(ExternalResource::getKey).collect(Collectors.toList()));\n         } else if (policy instanceof PropagationPolicy) {\n             PropagationPolicy propagationPolicy = PropagationPolicy.class.cast(policy);\n             PropagationPolicyTO propagationPolicyTO = new PropagationPolicyTO();\n             policyTO = (T) propagationPolicyTO;\n \n-            propagationPolicyTO.setPrefetch(propagationPolicy.isPrefetch());\n+            propagationPolicyTO.setFetchAroundProvisioning(propagationPolicy.isFetchAroundProvisioning());\n+            propagationPolicyTO.setUpdateDelta(propagationPolicy.isUpdateDelta());\n             propagationPolicyTO.setBackOffStrategy(propagationPolicy.getBackOffStrategy());\n             propagationPolicyTO.setBackOffParams(propagationPolicy.getBackOffParams());\n             propagationPolicyTO.setMaxAttempts(propagationPolicy.getMaxAttempts());"},{"sha":"1871f68f9cba69b006dd03dec0b1b7242a6de84f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -103,7 +102,7 @@ public ReportTO getReportTO(final Report report) {\n         reportTO.setActive(report.isActive());\n \n         reportTO.getReportlets().addAll(\n-                report.getReportlets().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                report.getReportlets().stream().map(Implementation::getKey).collect(Collectors.toList()));\n \n         ReportExec latestExec = reportExecDAO.findLatestStarted(report);\n         if (latestExec == null) {"},{"sha":"f503f3414038700981c1c7375fd45adb71eae9e8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -164,14 +163,14 @@ public RoleTO getRoleTO(final Role role) {\n                 map(Realm::getFullPath).collect(Collectors.toList()));\n \n         roleTO.getDynRealms().addAll(role.getDynRealms().stream().\n-                map(Entity::getKey).collect(Collectors.toList()));\n+                map(DynRealm::getKey).collect(Collectors.toList()));\n \n         if (role.getDynMembership() != null) {\n             roleTO.setDynMembershipCond(role.getDynMembership().getFIQLCond());\n         }\n \n         roleTO.getPrivileges().addAll(role.getPrivileges().stream().\n-                map(Entity::getKey).collect(Collectors.toList()));\n+                map(Privilege::getKey).collect(Collectors.toList()));\n \n         return roleTO;\n     }"},{"sha":"b307673a6a41de2d217ba841ddafe68dbff5576b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -355,7 +354,7 @@ protected void fill(final SchedTaskTO schedTaskTO, final SchedTask schedTask) {\n             provisioningTaskTO.setResource(provisioningTask.getResource().getKey());\n \n             provisioningTaskTO.getActions().addAll(\n-                    provisioningTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                    provisioningTask.getActions().stream().map(Implementation::getKey).collect(Collectors.toList()));\n \n             provisioningTaskTO.setPerformCreate(provisioningTask.isPerformCreate());\n             provisioningTaskTO.setPerformUpdate(provisioningTask.isPerformUpdate());\n@@ -393,7 +392,7 @@ public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils\n                 propagationTaskTO.setOperation(propagationTask.getOperation());\n                 propagationTaskTO.setConnObjectKey(propagationTask.getConnObjectKey());\n                 propagationTaskTO.setOldConnObjectKey(propagationTask.getOldConnObjectKey());\n-                propagationTaskTO.setAttributes(propagationTask.getSerializedAttributes());\n+                propagationTaskTO.setPropagationData(propagationTask.getSerializedPropagationData());\n                 propagationTaskTO.setResource(propagationTask.getResource().getKey());\n                 propagationTaskTO.setObjectClassName(propagationTask.getObjectClassName());\n                 propagationTaskTO.setAnyTypeKind(propagationTask.getAnyTypeKind());"},{"sha":"9f64b2c4dde9b9802d39be89fd260c02903061c6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -97,9 +97,9 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n         for (int i = 0; i < users.size() && !interrupt; i++) {\n             List<PropagationStatus> statuses = action == ProvisionAction.DEPROVISION\n                     ? userProvisioningManager.deprovision(\n-                            users.get(i).getKey(), gResources, false, executor, getClass().getSimpleName())\n+                            users.get(i).getKey(), gResources, false, executor)\n                     : userProvisioningManager.provision(\n-                            users.get(i).getKey(), true, null, gResources, false, executor, getClass().getSimpleName());\n+                            users.get(i).getKey(), true, null, gResources, false, executor);\n             for (PropagationStatus propagationStatus : statuses) {\n                 result.append(\"User \").append(users.get(i).getKey()).append('\\t').\n                         append(\"Resource \").append(propagationStatus.getResource()).append('\\t').\n@@ -127,9 +127,9 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n         for (int i = 0; i < anyObjects.size() && !interrupt; i++) {\n             List<PropagationStatus> statuses = action == ProvisionAction.DEPROVISION\n                     ? anyObjectProvisioningManager.deprovision(\n-                            anyObjects.get(i).getKey(), gResources, false, executor, getClass().getSimpleName())\n+                            anyObjects.get(i).getKey(), gResources, false, executor)\n                     : anyObjectProvisioningManager.provision(\n-                            anyObjects.get(i).getKey(), gResources, false, executor, getClass().getSimpleName());\n+                            anyObjects.get(i).getKey(), gResources, false, executor);\n \n             for (PropagationStatus propagationStatus : statuses) {\n                 result.append(anyObjects.get(i).getType().getKey()).append(' ')."},{"sha":"2db1e6ece5819310e31530f90ad4073219f1b329","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":259,"deletions":202,"changes":461,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -30,7 +30,6 @@\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OrgUnit;\n@@ -49,6 +48,8 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.policy.PropagationPolicy;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n@@ -59,10 +60,10 @@\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n@@ -72,6 +73,7 @@\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ConnectorObjectBuilder;\n@@ -178,142 +180,179 @@ protected List<PropagationActions> getPropagationActions(final ExternalResource\n         return result;\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    protected Uid createOrUpdate(\n-            final PropagationTask task,\n-            final ConnectorObject beforeObj,\n+    protected Uid doCreate(\n+            final PropagationTaskInfo taskInfo,\n+            final Set<Attribute> attributes,\n             final Connector connector,\n             final AtomicReference<Boolean> propagationAttempted) {\n \n-        // set of attributes to be propagated\n-        Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n+        LOG.debug(\"Create {} on {}\", attributes, taskInfo.getResource().getKey());\n \n-        // check if there is any missing or null / empty mandatory attribute\n-        Set<Object> mandatoryAttrNames = new HashSet<>();\n-        Attribute mandatoryMissing = AttributeUtil.find(MANDATORY_MISSING_ATTR_NAME, task.getAttributes());\n-        if (mandatoryMissing != null) {\n-            attributes.remove(mandatoryMissing);\n+        Uid result = connector.create(taskInfo.getObjectClass(), attributes, null, propagationAttempted);\n \n-            if (beforeObj == null) {\n-                mandatoryAttrNames.addAll(mandatoryMissing.getValue());\n-            }\n-        }\n-        Attribute mandatoryNullOrEmpty = AttributeUtil.find(MANDATORY_NULL_OR_EMPTY_ATTR_NAME, task.getAttributes());\n-        if (mandatoryNullOrEmpty != null) {\n-            attributes.remove(mandatoryNullOrEmpty);\n+        taskInfo.getResource().getProvision(taskInfo.getAnyType()).\n+                filter(provision -> provision.getUidOnCreate() != null).\n+                ifPresent(provision -> anyUtilsFactory.getInstance(taskInfo.getAnyTypeKind()).addAttr(\n+                taskInfo.getEntityKey(), plainSchemaDAO.find(provision.getUidOnCreate()), result.getUidValue()));\n \n-            mandatoryAttrNames.addAll(mandatoryNullOrEmpty.getValue());\n-        }\n-        if (!mandatoryAttrNames.isEmpty()) {\n-            throw new IllegalArgumentException(\n-                    \"Not attempted because there are mandatory attributes without value(s): \" + mandatoryAttrNames);\n-        }\n+        return result;\n+    }\n \n-        Uid result;\n-        if (beforeObj == null) {\n-            LOG.debug(\"Create {} on {}\", attributes, task.getResource().getKey());\n-            result = connector.create(\n-                    new ObjectClass(task.getObjectClassName()), attributes, null, propagationAttempted);\n-\n-            task.getResource().getProvision(task.getAnyType()).ifPresent(provision -> {\n-                if (provision.getUidOnCreate() != null) {\n-                    anyUtilsFactory.getInstance(task.getAnyTypeKind()).addAttr(\n-                            task.getEntityKey(), plainSchemaDAO.find(provision.getUidOnCreate()), result.getUidValue());\n-                }\n-            });\n-        } else {\n-            // 1. check if rename is really required\n-            Name newName = AttributeUtil.getNameFromAttributes(attributes);\n+    protected Uid doUpdate(\n+            final PropagationTaskInfo taskInfo,\n+            final Set<Attribute> attributes,\n+            final Connector connector,\n+            final ConnectorObject beforeObj,\n+            final AtomicReference<Boolean> propagationAttempted) {\n \n-            LOG.debug(\"Rename required with value {}\", newName);\n+        LOG.debug(\"Update {} on {}\", attributes, taskInfo.getResource().getKey());\n \n-            if (newName != null && newName.equals(beforeObj.getName())\n-                    && !newName.getNameValue().equals(beforeObj.getUid().getUidValue())) {\n+        // 1. check if rename is really required\n+        Name newName = AttributeUtil.getNameFromAttributes(attributes);\n \n-                LOG.debug(\"Remote object name unchanged\");\n-                attributes.remove(newName);\n-            }\n+        LOG.debug(\"Rename required with value {}\", newName);\n+\n+        if (beforeObj != null\n+                && newName != null && newName.equals(beforeObj.getName())\n+                && !newName.getNameValue().equals(beforeObj.getUid().getUidValue())) {\n \n-            // 2. check whether anything is actually needing to be propagated, i.e. if there is attribute\n-            // difference between beforeObj - just read above from the connector - and the values to be propagated\n-            Map<String, Attribute> originalAttrMap = beforeObj.getAttributes().stream().\n+            LOG.debug(\"Remote object name unchanged\");\n+            attributes.remove(newName);\n+        }\n+\n+        // 2. check whether anything is actually needing to be propagated, i.e. if there is attribute\n+        // difference between beforeObj - just read above from the connector - and the values to be propagated\n+        Map<String, Attribute> originalAttrMap = Map.of();\n+        if (beforeObj != null) {\n+            originalAttrMap = beforeObj.getAttributes().stream().\n                     collect(Collectors.toMap(attr -> attr.getName().toUpperCase(), Function.identity()));\n             Map<String, Attribute> updateAttrMap = attributes.stream().\n                     collect(Collectors.toMap(attr -> attr.getName().toUpperCase(), Function.identity()));\n \n             // Only compare attribute from beforeObj that are also being updated\n-            Set<String> skipAttrNames = originalAttrMap.keySet();\n-            skipAttrNames.removeAll(updateAttrMap.keySet());\n+            originalAttrMap.keySet().removeAll(updateAttrMap.keySet());\n+        }\n \n-            if (originalAttrMap.values().equals(attributes)) {\n-                LOG.debug(\"Don't need to propagate anything: {} is equal to {}\", originalAttrMap.values(), attributes);\n-                result = AttributeUtil.getUidAttribute(attributes);\n-            } else {\n-                LOG.debug(\"Attributes that would be updated {}\", attributes);\n+        Uid result;\n+        if (!originalAttrMap.isEmpty() && originalAttrMap.values().equals(attributes)) {\n+            LOG.debug(\"Don't need to propagate anything: {} is equal to {}\", originalAttrMap.values(), attributes);\n+            result = AttributeUtil.getUidAttribute(attributes);\n+        } else {\n+            LOG.debug(\"Attributes to update: {}\", attributes);\n+\n+            // 3. provision entry\n+            LOG.debug(\"Update {} on {}\", attributes, taskInfo.getResource().getKey());\n+\n+            result = connector.update(\n+                    Optional.ofNullable(beforeObj).\n+                            map(ConnectorObject::getObjectClass).\n+                            orElseGet(() -> taskInfo.getObjectClass()),\n+                    Optional.ofNullable(beforeObj).\n+                            map(ConnectorObject::getUid).\n+                            orElseGet(() -> new Uid(taskInfo.getOldConnObjectKey() == null\n+                            ? taskInfo.getConnObjectKey() : taskInfo.getOldConnObjectKey())),\n+                    attributes,\n+                    null,\n+                    propagationAttempted);\n+        }\n \n-                // 3. provision entry\n-                LOG.debug(\"Update {} on {}\", attributes, task.getResource().getKey());\n+        return result;\n+    }\n+\n+    protected Uid doUpdateDelta(\n+            final PropagationTaskInfo taskInfo,\n+            final Set<AttributeDelta> modifications,\n+            final Connector connector,\n+            final AtomicReference<Boolean> propagationAttempted) {\n+\n+        Uid uid = new Uid(taskInfo.getConnObjectKey());\n+\n+        LOG.debug(\"Update Delta {} for {} on {}\", modifications, uid, taskInfo.getResource().getKey());\n+\n+        connector.updateDelta(\n+                taskInfo.getObjectClass(),\n+                uid,\n+                modifications,\n+                null,\n+                propagationAttempted);\n+\n+        return uid;\n+    }\n+\n+    protected Uid createOrUpdate(\n+            final PropagationTaskInfo taskInfo,\n+            final boolean fetchRemoteObj,\n+            final ConnectorObject beforeObj,\n+            final Connector connector,\n+            final AtomicReference<Boolean> propagationAttempted) {\n+\n+        PropagationData propagationData = taskInfo.getPropagationData();\n+\n+        if (propagationData.getAttributeDeltas() == null) {\n+            Set<Attribute> attrs = propagationData.getAttributes();\n+\n+            // check if there is any missing or null / empty mandatory attribute\n+            Set<Object> mandatoryAttrNames = new HashSet<>();\n+            Optional.ofNullable(AttributeUtil.find(PropagationManager.MANDATORY_MISSING_ATTR_NAME, attrs)).\n+                    ifPresent(missing -> {\n+                        attrs.remove(missing);\n+\n+                        if (taskInfo.getOperation() == ResourceOperation.CREATE) {\n+                            mandatoryAttrNames.addAll(missing.getValue());\n+                        }\n+                    });\n+            Optional.ofNullable(AttributeUtil.find(PropagationManager.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, attrs)).\n+                    ifPresent(nullOrEmpty -> {\n+                        attrs.remove(nullOrEmpty);\n+\n+                        mandatoryAttrNames.addAll(nullOrEmpty.getValue());\n+                    });\n+            if (!mandatoryAttrNames.isEmpty()) {\n+                throw new IllegalArgumentException(\n+                        \"Not attempted because there are mandatory attributes without value(s): \" + mandatoryAttrNames);\n+            }\n+\n+            if (beforeObj != null) {\n+                return doUpdate(taskInfo, attrs, connector, beforeObj, propagationAttempted);\n+            }\n \n-                result = connector.update(\n-                        beforeObj.getObjectClass(),\n-                        new Uid(beforeObj.getUid().getUidValue()),\n-                        attributes,\n-                        null,\n-                        propagationAttempted);\n+            if (fetchRemoteObj || taskInfo.getOperation() == ResourceOperation.CREATE) {\n+                return doCreate(taskInfo, attrs, connector, propagationAttempted);\n             }\n+\n+            return doUpdate(taskInfo, attrs, connector, beforeObj, propagationAttempted);\n         }\n \n-        return result;\n+        return doUpdateDelta(taskInfo, propagationData.getAttributeDeltas(), connector, propagationAttempted);\n     }\n \n     protected Uid delete(\n-            final PropagationTask task,\n+            final PropagationTaskInfo taskInfo,\n+            final boolean fetchRemoteObj,\n             final ConnectorObject beforeObj,\n             final Connector connector,\n             final AtomicReference<Boolean> propagationAttempted) {\n \n         Uid result;\n-        if (beforeObj == null) {\n-            LOG.debug(\"{} not found on {}: ignoring delete\", task.getConnObjectKey(), task.getResource().getKey());\n+        if (fetchRemoteObj && beforeObj == null) {\n+            LOG.debug(\"{} not found on {}: ignoring delete\",\n+                    taskInfo.getConnObjectKey(), taskInfo.getResource().getKey());\n             result = null;\n         } else {\n-            LOG.debug(\"Delete {} on {}\", beforeObj.getUid(), task.getResource().getKey());\n+            ObjectClass objectClass = Optional.ofNullable(beforeObj).\n+                    map(ConnectorObject::getObjectClass).\n+                    orElseGet(() -> taskInfo.getObjectClass());\n+            Uid uid = Optional.ofNullable(beforeObj).\n+                    map(ConnectorObject::getUid).\n+                    orElseGet(() -> new Uid(taskInfo.getConnObjectKey()));\n \n-            connector.delete(beforeObj.getObjectClass(), beforeObj.getUid(), null, propagationAttempted);\n-            result = beforeObj.getUid();\n-        }\n-\n-        return result;\n-    }\n+            LOG.debug(\"Delete {} on {}\", uid, taskInfo.getResource().getKey());\n \n-    protected PropagationTask buildTask(final PropagationTaskInfo taskInfo) {\n-        PropagationTask task;\n-        if (taskInfo.getKey() == null) {\n-            // double-checks that provided External Resource is valid, for further actions\n-            ExternalResource resource = resourceDAO.find(taskInfo.getResource());\n-            if (resource == null) {\n-                resource = taskInfo.getExternalResource();\n-            }\n-\n-            task = entityFactory.newEntity(PropagationTask.class);\n-            task.setResource(resource);\n-            task.setObjectClassName(taskInfo.getObjectClassName());\n-            task.setAnyTypeKind(taskInfo.getAnyTypeKind());\n-            task.setAnyType(taskInfo.getAnyType());\n-            task.setEntityKey(taskInfo.getEntityKey());\n-            task.setOperation(taskInfo.getOperation());\n-            task.setConnObjectKey(taskInfo.getConnObjectKey());\n-            task.setOldConnObjectKey(taskInfo.getOldConnObjectKey());\n-        } else {\n-            task = taskDAO.find(taskInfo.getKey());\n+            connector.delete(objectClass, uid, null, propagationAttempted);\n+            result = uid;\n         }\n-        Set<Attribute> attributes = new HashSet<>();\n-        if (StringUtils.isNotBlank(taskInfo.getAttributes())) {\n-            attributes.addAll(List.of(POJOHelper.deserialize(taskInfo.getAttributes(), Attribute[].class)));\n-        }\n-        task.setAttributes(attributes);\n \n-        return task;\n+        return result;\n     }\n \n     protected Optional<RetryTemplate> retryTemplate(final ExternalResource resource) {\n@@ -410,32 +449,35 @@ public TaskExec execute(\n             final PropagationReporter reporter,\n             final String executor) {\n \n-        PropagationTask task = buildTask(taskInfo);\n-\n-        return retryTemplate(task.getResource()).map(rt -> rt.execute(context -> {\n+        return retryTemplate(taskInfo.getResource()).map(rt -> rt.execute(context -> {\n             LOG.debug(\"#{} Propagation attempt\", context.getRetryCount());\n \n-            TaskExec exec = doExecute(taskInfo, task, reporter, executor);\n-            if (context.getRetryCount() < task.getResource().getPropagationPolicy().getMaxAttempts() - 1\n+            TaskExec exec = doExecute(taskInfo, reporter, executor);\n+            if (context.getRetryCount() < taskInfo.getResource().getPropagationPolicy().getMaxAttempts() - 1\n                     && !ExecStatus.SUCCESS.name().equals(exec.getStatus())) {\n \n                 throw new RetryException(\"Attempt #\" + context.getRetryCount() + \" failed\");\n             }\n             return exec;\n-        })).orElseGet(() -> doExecute(taskInfo, task, reporter, executor));\n+        })).orElseGet(() -> doExecute(taskInfo, reporter, executor));\n+    }\n+\n+    protected boolean isFetchRemoteObj(final PropagationTaskInfo taskInfo) {\n+        return Optional.ofNullable(taskInfo.getResource().getPropagationPolicy()).\n+                map(PropagationPolicy::isFetchAroundProvisioning).\n+                orElse(true);\n     }\n \n     protected TaskExec doExecute(\n             final PropagationTaskInfo taskInfo,\n-            final PropagationTask task,\n             final PropagationReporter reporter,\n             final String executor) {\n \n         Connector connector = taskInfo.getConnector() == null\n-                ? connectorManager.getConnector(task.getResource())\n+                ? connectorManager.getConnector(taskInfo.getResource())\n                 : taskInfo.getConnector();\n \n-        List<PropagationActions> actions = getPropagationActions(task.getResource());\n+        List<PropagationActions> actions = getPropagationActions(taskInfo.getResource());\n \n         OffsetDateTime start = OffsetDateTime.now();\n \n@@ -449,6 +491,8 @@ protected TaskExec doExecute(\n         // Flag to state whether any propagation has been attempted\n         AtomicReference<Boolean> propagationAttempted = new AtomicReference<>(false);\n \n+        boolean fetchRemoteObj = isFetchRemoteObj(taskInfo);\n+\n         ConnectorObject beforeObj = null;\n         ConnectorObject afterObj = null;\n \n@@ -457,32 +501,35 @@ protected TaskExec doExecute(\n         Uid uid = null;\n         Result result;\n         try {\n-            provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName())).orElse(null);\n-            orgUnit = task.getResource().getOrgUnit();\n-\n-            if (taskInfo.getBeforeObj() == null || taskInfo.getBeforeObj().isEmpty()) {\n-                // Try to read remote object BEFORE any actual operation\n-                beforeObj = provision == null && orgUnit == null\n-                        ? null\n-                        : orgUnit == null\n-                                ? getRemoteObject(task, connector, provision, actions, false)\n-                                : getRemoteObject(task, connector, orgUnit, actions, false);\n-            } else if (taskInfo.getBeforeObj().isPresent()) {\n+            provision = taskInfo.getResource().getProvision(taskInfo.getObjectClass()).orElse(null);\n+            orgUnit = taskInfo.getResource().getOrgUnit();\n+\n+            if (taskInfo.getBeforeObj().isEmpty()) {\n+                if (fetchRemoteObj) {\n+                    // Try to read remote object BEFORE any actual operation\n+                    beforeObj = provision == null && orgUnit == null\n+                            ? null\n+                            : orgUnit == null\n+                                    ? getRemoteObject(taskInfo, connector, provision, actions, false)\n+                                    : getRemoteObject(taskInfo, connector, orgUnit, actions, false);\n+                    taskInfo.setBeforeObj(Optional.ofNullable(beforeObj));\n+                }\n+            } else {\n                 beforeObj = taskInfo.getBeforeObj().get();\n             }\n \n             for (PropagationActions action : actions) {\n-                action.before(task, beforeObj);\n+                action.before(taskInfo);\n             }\n \n-            switch (task.getOperation()) {\n+            switch (taskInfo.getOperation()) {\n                 case CREATE:\n                 case UPDATE:\n-                    uid = createOrUpdate(task, beforeObj, connector, propagationAttempted);\n+                    uid = createOrUpdate(taskInfo, fetchRemoteObj, beforeObj, connector, propagationAttempted);\n                     break;\n \n                 case DELETE:\n-                    uid = delete(task, beforeObj, connector, propagationAttempted);\n+                    uid = delete(taskInfo, fetchRemoteObj, beforeObj, connector, propagationAttempted);\n                     break;\n \n                 default:\n@@ -492,11 +539,17 @@ protected TaskExec doExecute(\n                     ? ExecStatus.SUCCESS.name()\n                     : ExecStatus.NOT_ATTEMPTED.name());\n \n-            LOG.debug(\"Successfully propagated to {}\", task.getResource());\n             result = Result.SUCCESS;\n+\n+            LOG.debug(\"Successfully propagated to {}\", taskInfo.getResource());\n         } catch (Exception e) {\n             result = Result.FAILURE;\n-            LOG.error(\"Exception during provision on resource \" + task.getResource().getKey(), e);\n+\n+            exec.setStatus(ExecStatus.FAILURE.name());\n+\n+            propagationAttempted.set(true);\n+\n+            LOG.error(\"Exception during provision on resource \" + taskInfo.getResource().getKey(), e);\n \n             if (e instanceof ConnectorException && e.getCause() != null) {\n                 taskExecutionMessage = e.getCause().getMessage();\n@@ -514,38 +567,36 @@ protected TaskExec doExecute(\n                 }\n             }\n \n-            try {\n-                exec.setStatus(ExecStatus.FAILURE.name());\n-            } catch (Exception wft) {\n-                LOG.error(\"While executing KO action on {}\", exec, wft);\n-            }\n-\n-            propagationAttempted.set(true);\n-\n-            actions.forEach(action -> action.onError(task, exec, e));\n+            actions.forEach(action -> action.onError(taskInfo, exec, e));\n         } finally {\n             // Try to read remote object AFTER any actual operation\n-            if (connector != null) {\n-                if (uid != null) {\n-                    task.setConnObjectKey(uid.getUidValue());\n-                }\n+            if (uid != null) {\n+                taskInfo.setConnObjectKey(uid.getUidValue());\n+            }\n+            if (fetchRemoteObj) {\n                 try {\n                     afterObj = provision == null && orgUnit == null\n                             ? null\n                             : orgUnit == null\n-                                    ? getRemoteObject(task, connector, provision, actions, true)\n-                                    : getRemoteObject(task, connector, orgUnit, actions, true);\n+                                    ? getRemoteObject(taskInfo, connector, provision, actions, true)\n+                                    : getRemoteObject(taskInfo, connector, orgUnit, actions, true);\n                 } catch (Exception ignore) {\n                     // ignore exception\n                     LOG.error(\"Error retrieving after object\", ignore);\n                 }\n             }\n \n-            if (task.getOperation() != ResourceOperation.DELETE && afterObj == null && uid != null) {\n+            if (!ExecStatus.FAILURE.name().equals(exec.getStatus())\n+                    && afterObj == null\n+                    && uid != null\n+                    && taskInfo.getOperation() != ResourceOperation.DELETE) {\n+\n                 afterObj = new ConnectorObjectBuilder().\n-                        setObjectClass(new ObjectClass(task.getObjectClassName())).\n+                        setObjectClass(taskInfo.getObjectClass()).\n                         setUid(uid).\n-                        setName(AttributeUtil.getNameFromAttributes(task.getAttributes())).\n+                        setName(Optional.ofNullable(\n+                                AttributeUtil.getNameFromAttributes(taskInfo.getPropagationData().getAttributes())).\n+                                orElseGet(() -> new Name(taskInfo.getConnObjectKey()))).\n                         build();\n             }\n \n@@ -555,23 +606,24 @@ protected TaskExec doExecute(\n \n             LOG.debug(\"Execution finished: {}\", exec);\n \n-            if (hasToBeregistered(task, exec)) {\n+            hasToBeregistered(taskInfo, exec).ifPresent(task -> {\n                 LOG.debug(\"Execution to be stored: {}\", exec);\n \n                 exec.setTask(task);\n                 task.add(exec);\n \n                 taskDAO.save(task);\n-            }\n+            });\n \n             String fiql = provision == null\n                     ? null\n                     : afterObj != null\n-                            ? outboundMatcher.getFIQL(afterObj, task.getResource(), provision)\n+                            ? outboundMatcher.getFIQL(afterObj, taskInfo.getResource(), provision)\n                             : beforeObj != null\n-                                    ? outboundMatcher.getFIQL(beforeObj, task.getResource(), provision)\n+                                    ? outboundMatcher.getFIQL(beforeObj, taskInfo.getResource(), provision)\n                                     : null;\n-            reporter.onSuccessOrNonPriorityResourceFailures(taskInfo,\n+            reporter.onSuccessOrNonPriorityResourceFailures(\n+                    taskInfo,\n                     ExecStatus.valueOf(exec.getStatus()),\n                     failureReason,\n                     fiql,\n@@ -580,18 +632,19 @@ protected TaskExec doExecute(\n         }\n \n         for (PropagationActions action : actions) {\n-            action.after(task, exec, afterObj);\n+            action.after(taskInfo, exec, afterObj);\n         }\n         // SYNCOPE-1136\n-        String anyTypeKind = task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase();\n-        String operation = task.getOperation().name().toLowerCase();\n+        String anyTypeKind = Optional.ofNullable(taskInfo.getAnyTypeKind()).\n+                map(kind -> kind.name().toLowerCase()).orElse(\"realm\");\n+        String operation = taskInfo.getOperation().name().toLowerCase();\n         boolean notificationsAvailable = notificationManager.notificationsAvailable(\n-                AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, task.getResource().getKey(), operation);\n+                AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, taskInfo.getResource().getKey(), operation);\n         boolean auditRequested = auditManager.auditRequested(\n                 AuthContextUtils.getUsername(),\n                 AuditElements.EventCategoryType.PROPAGATION,\n                 anyTypeKind,\n-                task.getResource().getKey(),\n+                taskInfo.getResource().getKey(),\n                 operation);\n \n         if (notificationsAvailable || auditRequested) {\n@@ -600,7 +653,7 @@ protected TaskExec doExecute(\n                     AuthContextUtils.getWho(),\n                     AuditElements.EventCategoryType.PROPAGATION,\n                     anyTypeKind,\n-                    task.getResource().getKey(),\n+                    taskInfo.getResource().getKey(),\n                     operation,\n                     result,\n                     beforeObj,\n@@ -611,7 +664,7 @@ protected TaskExec doExecute(\n                     AuthContextUtils.getWho(),\n                     AuditElements.EventCategoryType.PROPAGATION,\n                     anyTypeKind,\n-                    task.getResource().getKey(),\n+                    taskInfo.getResource().getKey(),\n                     operation,\n                     result,\n                     beforeObj,\n@@ -628,23 +681,21 @@ protected TaskExec rejected(\n             final PropagationReporter reporter,\n             final String executor) {\n \n-        PropagationTask task = buildTask(taskInfo);\n-\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(ExecStatus.NOT_ATTEMPTED.name());\n         execution.setExecutor(executor);\n         execution.setStart(OffsetDateTime.now());\n         execution.setMessage(rejectReason);\n         execution.setEnd(execution.getStart());\n \n-        if (hasToBeregistered(task, execution)) {\n+        hasToBeregistered(taskInfo, execution).ifPresent(task -> {\n             LOG.debug(\"Execution to be stored: {}\", execution);\n \n             execution.setTask(task);\n             task.add(execution);\n \n             taskDAO.save(task);\n-        }\n+        });\n \n         reporter.onSuccessOrNonPriorityResourceFailures(\n                 taskInfo,\n@@ -660,110 +711,116 @@ protected TaskExec rejected(\n     /**\n      * Check whether an execution has to be stored, for a given task.\n      *\n-     * @param task propagation task\n+     * @param taskInfo propagation task\n      * @param execution to be decide whether to store or not\n      * @return true if execution has to be store, false otherwise\n      */\n-    protected boolean hasToBeregistered(final PropagationTask task, final TaskExec execution) {\n+    protected Optional<PropagationTask> hasToBeregistered(\n+            final PropagationTaskInfo taskInfo, final TaskExec execution) {\n+\n         boolean result;\n \n         boolean failed = ExecStatus.valueOf(execution.getStatus()) != ExecStatus.SUCCESS;\n \n-        switch (task.getOperation()) {\n+        ExternalResource resource = taskInfo.getResource();\n+\n+        switch (taskInfo.getOperation()) {\n \n             case CREATE:\n-                result = (failed && task.getResource().getCreateTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n-                        || task.getResource().getCreateTraceLevel() == TraceLevel.ALL;\n+                result = (failed && resource.getCreateTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n+                        || resource.getCreateTraceLevel() == TraceLevel.ALL;\n                 break;\n \n             case UPDATE:\n-                result = (failed && task.getResource().getUpdateTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n-                        || task.getResource().getUpdateTraceLevel() == TraceLevel.ALL;\n+                result = (failed && resource.getUpdateTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n+                        || resource.getUpdateTraceLevel() == TraceLevel.ALL;\n                 break;\n \n             case DELETE:\n-                result = (failed && task.getResource().getDeleteTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n-                        || task.getResource().getDeleteTraceLevel() == TraceLevel.ALL;\n+                result = (failed && resource.getDeleteTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n+                        || resource.getDeleteTraceLevel() == TraceLevel.ALL;\n                 break;\n \n             default:\n                 result = false;\n         }\n \n-        return result;\n+        if (!result) {\n+            return Optional.empty();\n+        }\n+\n+        PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n+        task.setResource(resourceDAO.find(resource.getKey()));\n+        task.setObjectClassName(taskInfo.getObjectClass().getObjectClassValue());\n+        task.setAnyTypeKind(taskInfo.getAnyTypeKind());\n+        task.setAnyType(taskInfo.getAnyType());\n+        task.setEntityKey(taskInfo.getEntityKey());\n+        task.setOperation(taskInfo.getOperation());\n+        task.setConnObjectKey(taskInfo.getConnObjectKey());\n+        task.setOldConnObjectKey(taskInfo.getOldConnObjectKey());\n+        task.setPropagationData(taskInfo.getPropagationData());\n+\n+        return Optional.of(task);\n     }\n \n     /**\n      * Get remote object for given task.\n      *\n-     * @param connector connector facade proxy.\n-     * @param task current propagation task.\n+     * @param connector connector facade proxy\n+     * @param taskInfo current propagation task\n      * @param provision provision\n      * @param actions propagation actions\n      * @param latest 'FALSE' to retrieve object using old connObjectKey if not null.\n      * @return remote connector object.\n      */\n     protected ConnectorObject getRemoteObject(\n-            final PropagationTask task,\n+            final PropagationTaskInfo taskInfo,\n             final Connector connector,\n             final Provision provision,\n             final List<PropagationActions> actions,\n             final boolean latest) {\n \n-        if (task.getResource().getPropagationPolicy() != null\n-                && !task.getResource().getPropagationPolicy().isPrefetch()) {\n+        String connObjectKeyValue = latest || taskInfo.getOldConnObjectKey() == null\n+                ? taskInfo.getConnObjectKey()\n+                : taskInfo.getOldConnObjectKey();\n \n-            LOG.debug(\"Skipping because of configured PropagationPolicy\");\n-            return null;\n-        }\n-\n-        String connObjectKeyValue = latest || task.getOldConnObjectKey() == null\n-                ? task.getConnObjectKey()\n-                : task.getOldConnObjectKey();\n-\n-        List<ConnectorObject> matches = outboundMatcher.match(task, connector, provision, actions, connObjectKeyValue);\n-        LOG.debug(\"Found for propagation task {}: {}\", task, matches);\n+        List<ConnectorObject> matches =\n+                outboundMatcher.match(taskInfo, connector, provision, actions, connObjectKeyValue);\n+        LOG.debug(\"Found for propagation task {}: {}\", taskInfo, matches);\n \n         return matches.isEmpty() ? null : matches.get(0);\n     }\n \n     /**\n      * Get remote object for given task.\n      *\n-     * @param connector connector facade proxy.\n-     * @param task current propagation task.\n+     * @param connector connector facade proxy\n+     * @param taskInfo current propagation task\n      * @param orgUnit orgUnit\n      * @param actions propagation actions\n      * @param latest 'FALSE' to retrieve object using old connObjectKey if not null.\n      * @return remote connector object.\n      */\n     protected ConnectorObject getRemoteObject(\n-            final PropagationTask task,\n+            final PropagationTaskInfo taskInfo,\n             final Connector connector,\n             final OrgUnit orgUnit,\n             final List<PropagationActions> actions,\n             final boolean latest) {\n \n-        if (task.getResource().getPropagationPolicy() != null\n-                && !task.getResource().getPropagationPolicy().isPrefetch()) {\n-\n-            LOG.debug(\"Skipping because of configured PropagationPolicy\");\n-            return null;\n-        }\n-\n-        String connObjectKey = latest || task.getOldConnObjectKey() == null\n-                ? task.getConnObjectKey()\n-                : task.getOldConnObjectKey();\n+        String connObjectKey = latest || taskInfo.getOldConnObjectKey() == null\n+                ? taskInfo.getConnObjectKey()\n+                : taskInfo.getOldConnObjectKey();\n \n         Set<String> moreAttrsToGet = new HashSet<>();\n-        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(Optional.of(task), orgUnit)));\n+        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(Optional.of(taskInfo), orgUnit)));\n \n         ConnectorObject obj = null;\n         Optional<Item> connObjectKeyItem = orgUnit.getConnObjectKeyItem();\n         if (connObjectKeyItem.isPresent()) {\n             try {\n                 obj = connector.getObject(\n-                        new ObjectClass(task.getObjectClassName()),\n+                        taskInfo.getObjectClass(),\n                         AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKey),\n                         orgUnit.isIgnoreCaseMatch(),\n                         MappingUtils.buildOperationOptions("},{"sha":"31fec8e8312a15689f59254074dd4998f790391b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AzurePropagationActions.java","status":"modified","additions":25,"deletions":27,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAzurePropagationActions.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n-import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -39,47 +39,45 @@\n  */\n public class AzurePropagationActions implements PropagationActions {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AzurePropagationActions.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(AzurePropagationActions.class);\n \n-    protected static String getEmailAttrName() {\n+    protected String getEmailAttrName() {\n         return \"mailNickname\";\n     }\n \n+    protected void setName(final PropagationTaskInfo taskInfo) {\n+        PropagationData data = taskInfo.getPropagationData();\n+        if (data.getAttributes() != null) {\n+            Set<Attribute> attrs = data.getAttributes();\n+\n+            if (AttributeUtil.find(getEmailAttrName(), attrs) == null) {\n+                LOG.warn(\"Can't find {} to set as {} attribute value, skipping...\", getEmailAttrName(), Name.NAME);\n+                return;\n+            }\n+\n+            Optional.ofNullable(AttributeUtil.getNameFromAttributes(attrs)).ifPresent(attrs::remove);\n+            attrs.add(new Name(AttributeUtil.find(getEmailAttrName(), attrs).getValue().get(0).toString()));\n+        }\n+    }\n+\n     @Transactional\n     @Override\n-    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n-        if (task.getOperation() == ResourceOperation.DELETE || task.getOperation() == ResourceOperation.NONE) {\n+    public void before(final PropagationTaskInfo taskInfo) {\n+        if (taskInfo.getOperation() == ResourceOperation.DELETE || taskInfo.getOperation() == ResourceOperation.NONE) {\n             return;\n         }\n \n-        switch (task.getAnyTypeKind()) {\n+        switch (taskInfo.getAnyTypeKind()) {\n             case USER:\n-                setName(task);\n+                setName(taskInfo);\n                 break;\n \n             case GROUP:\n-                setName(task);\n+                setName(taskInfo);\n                 break;\n \n             default:\n                 LOG.debug(\"Not about user or group: not doing anything\");\n         }\n     }\n-\n-    private static void setName(final PropagationTask task) {\n-        Set<Attribute> attrs = new HashSet<>(task.getAttributes());\n-\n-        if (AttributeUtil.find(getEmailAttrName(), attrs) == null) {\n-            LOG.warn(\"Can't find {} to set as {} attribute value, skipping...\", getEmailAttrName(), Name.NAME);\n-            return;\n-        }\n-\n-        Name name = AttributeUtil.getNameFromAttributes(attrs);\n-        if (name != null) {\n-            attrs.remove(name);\n-        }\n-        attrs.add(new Name(AttributeUtil.find(getEmailAttrName(), attrs).getValue().get(0).toString()));\n-\n-        task.setAttributes(attrs);\n-    }\n }"},{"sha":"a0e154f31c79eb0ca6cc2a21c6ad614fc7bb6eb7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DBPasswordPropagationActions.java","status":"modified","additions":37,"deletions":42,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDBPasswordPropagationActions.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -18,23 +18,22 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n-import java.util.HashSet;\n import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -46,45 +45,12 @@\n  */\n public class DBPasswordPropagationActions implements PropagationActions {\n \n-    private static final String CLEARTEXT = \"CLEARTEXT\";\n+    protected static final String CLEARTEXT = \"CLEARTEXT\";\n \n     @Autowired\n-    private UserDAO userDAO;\n+    protected UserDAO userDAO;\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n-        if (AnyTypeKind.USER == task.getAnyTypeKind()) {\n-            User user = userDAO.find(task.getEntityKey());\n-\n-            if (user != null && user.getPassword() != null) {\n-                Attribute missing = AttributeUtil.find(\n-                        PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME,\n-                        task.getAttributes());\n-\n-                ConnInstance connInstance = task.getResource().getConnector();\n-                if (missing != null && missing.getValue() != null && missing.getValue().size() == 1\n-                        && missing.getValue().get(0).equals(OperationalAttributes.PASSWORD_NAME)\n-                        && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgorithm())) {\n-\n-                    Attribute passwordAttribute = AttributeBuilder.buildPassword(\n-                            new GuardedString(user.getPassword().toCharArray()));\n-\n-                    Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n-                    attributes.add(passwordAttribute);\n-                    attributes.remove(missing);\n-\n-                    Attribute hashedPasswordAttribute = AttributeBuilder.build(\n-                            AttributeUtil.createSpecialName(\"HASHED_PASSWORD\"), Boolean.TRUE);\n-                    attributes.add(hashedPasswordAttribute);\n-\n-                    task.setAttributes(attributes);\n-                }\n-            }\n-        }\n-    }\n-\n-    private static String getCipherAlgorithm(final ConnInstance connInstance) {\n+    protected String getCipherAlgorithm(final ConnInstance connInstance) {\n         Optional<ConnConfProperty> cipherAlgorithm = connInstance.getConf().stream().\n                 filter(property -> \"cipherAlgorithm\".equals(property.getSchema().getName())\n                 && property.getValues() != null && !property.getValues().isEmpty()).findFirst();\n@@ -94,8 +60,7 @@ private static String getCipherAlgorithm(final ConnInstance connInstance) {\n                 : CLEARTEXT;\n     }\n \n-    private static boolean cipherAlgorithmMatches(final String connectorAlgorithm,\n-                                                  final CipherAlgorithm userAlgorithm) {\n+    protected boolean cipherAlgorithmMatches(final String connectorAlgorithm, final CipherAlgorithm userAlgorithm) {\n         if (userAlgorithm == null) {\n             return false;\n         }\n@@ -108,4 +73,34 @@ private static boolean cipherAlgorithmMatches(final String connectorAlgorithm,\n         return \"SHA1\".equals(connectorAlgorithm) && \"SHA\".equals(userAlgorithm.name());\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public void before(final PropagationTaskInfo taskInfo) {\n+        if (AnyTypeKind.USER == taskInfo.getAnyTypeKind()) {\n+            User user = userDAO.find(taskInfo.getEntityKey());\n+\n+            PropagationData data = taskInfo.getPropagationData();\n+            if (user != null && user.getPassword() != null && data.getAttributes() != null) {\n+                Set<Attribute> attrs = data.getAttributes();\n+\n+                Attribute missing = AttributeUtil.find(PropagationManager.MANDATORY_MISSING_ATTR_NAME, attrs);\n+\n+                ConnInstance connInstance = taskInfo.getResource().getConnector();\n+                if (missing != null && missing.getValue() != null && missing.getValue().size() == 1\n+                        && missing.getValue().get(0).equals(OperationalAttributes.PASSWORD_NAME)\n+                        && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgorithm())) {\n+\n+                    Attribute passwordAttribute = AttributeBuilder.buildPassword(\n+                            new GuardedString(user.getPassword().toCharArray()));\n+\n+                    attrs.add(passwordAttribute);\n+                    attrs.remove(missing);\n+\n+                    Attribute hashedPasswordAttribute = AttributeBuilder.build(\n+                            AttributeUtil.createSpecialName(\"HASHED_PASSWORD\"), Boolean.TRUE);\n+                    attrs.add(hashedPasswordAttribute);\n+                }\n+            }\n+        }\n+    }\n }"},{"sha":"39ede6a0b1439d63a6b10d25b2e730324e3c0072","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationManager.java","status":"modified","additions":238,"deletions":57,"changes":295,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationManager.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n+import static org.apache.syncope.core.provisioning.api.propagation.PropagationManager.MANDATORY_MISSING_ATTR_NAME;\n+import static org.apache.syncope.core.provisioning.api.propagation.PropagationManager.MANDATORY_NULL_OR_EMPTY_ATTR_NAME;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -32,6 +35,8 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.request.AbstractPatchItem;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OrgUnit;\n@@ -46,6 +51,7 @@\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n@@ -54,16 +60,20 @@\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n+import org.identityconnectors.framework.common.objects.AttributeDeltaBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.CollectionUtils;\n \n@@ -114,7 +124,7 @@ public List<PropagationTaskInfo> getCreateTasks(\n             final Boolean enable,\n             final PropagationByResource<String> propByRes,\n             final Collection<Attr> vAttrs,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n         return getCreateTasks(\n                 anyUtilsFactory.getInstance(kind).dao().authFind(key),\n@@ -123,7 +133,7 @@ public List<PropagationTaskInfo> getCreateTasks(\n                 propByRes,\n                 null,\n                 vAttrs,\n-                noPropResourceKeys);\n+                excludedResources);\n     }\n \n     @Override\n@@ -134,7 +144,7 @@ public List<PropagationTaskInfo> getUserCreateTasks(\n             final PropagationByResource<String> propByRes,\n             final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n         return getCreateTasks(\n                 anyUtilsFactory.getInstance(AnyTypeKind.USER).dao().authFind(key),\n@@ -143,7 +153,7 @@ public List<PropagationTaskInfo> getUserCreateTasks(\n                 propByRes,\n                 propByLinkedAccount,\n                 vAttrs,\n-                noPropResourceKeys);\n+                excludedResources);\n     }\n \n     protected List<PropagationTaskInfo> getCreateTasks(\n@@ -153,22 +163,22 @@ protected List<PropagationTaskInfo> getCreateTasks(\n             final PropagationByResource<String> propByRes,\n             final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n         if ((propByRes == null || propByRes.isEmpty())\n                 && (propByLinkedAccount == null || propByLinkedAccount.isEmpty())) {\n \n             return List.of();\n         }\n \n-        if (noPropResourceKeys != null) {\n+        if (excludedResources != null) {\n             if (propByRes != null) {\n-                propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceKeys);\n+                propByRes.get(ResourceOperation.CREATE).removeAll(excludedResources);\n             }\n \n             if (propByLinkedAccount != null) {\n                 propByLinkedAccount.get(ResourceOperation.CREATE).\n-                        removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+                        removeIf(account -> excludedResources.contains(account.getLeft()));\n             }\n         }\n \n@@ -184,7 +194,7 @@ public List<PropagationTaskInfo> getUpdateTasks(\n             final PropagationByResource<String> propByRes,\n             final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n         return getUpdateTasks(\n                 anyUtilsFactory.getInstance(kind).dao().authFind(key),\n@@ -194,26 +204,25 @@ public List<PropagationTaskInfo> getUpdateTasks(\n                 propByRes,\n                 propByLinkedAccount,\n                 vAttrs,\n-                noPropResourceKeys);\n+                excludedResources);\n     }\n \n     @Override\n     public List<PropagationTaskInfo> getUserUpdateTasks(\n             final UserWorkflowResult<Pair<UserUR, Boolean>> wfResult,\n             final boolean changePwd,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n         return getUpdateTasks(\n                 anyUtilsFactory.getInstance(AnyTypeKind.USER).dao().authFind(wfResult.getResult().getLeft().getKey()),\n-                wfResult.getResult().getLeft().getPassword() == null\n-                ? null\n-                : wfResult.getResult().getLeft().getPassword().getValue(),\n+                Optional.ofNullable(wfResult.getResult().getLeft().getPassword()).\n+                        map(PasswordPatch::getValue).orElse(null),\n                 changePwd,\n                 wfResult.getResult().getRight(),\n                 wfResult.getPropByRes(),\n                 wfResult.getPropByLinkedAccount(),\n                 wfResult.getResult().getLeft().getVirAttrs(),\n-                noPropResourceKeys);\n+                excludedResources);\n     }\n \n     @Override\n@@ -278,20 +287,20 @@ protected List<PropagationTaskInfo> getUpdateTasks(\n             final PropagationByResource<String> propByRes,\n             final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n-        if (noPropResourceKeys != null) {\n+        if (excludedResources != null) {\n             if (propByRes != null) {\n-                propByRes.removeAll(noPropResourceKeys);\n+                propByRes.removeAll(excludedResources);\n             }\n \n             if (propByLinkedAccount != null) {\n                 propByLinkedAccount.get(ResourceOperation.CREATE).\n-                        removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+                        removeIf(account -> excludedResources.contains(account.getLeft()));\n                 propByLinkedAccount.get(ResourceOperation.UPDATE).\n-                        removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+                        removeIf(account -> excludedResources.contains(account.getLeft()));\n                 propByLinkedAccount.get(ResourceOperation.DELETE).\n-                        removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+                        removeIf(account -> excludedResources.contains(account.getLeft()));\n             }\n         }\n \n@@ -311,18 +320,18 @@ public List<PropagationTaskInfo> getDeleteTasks(\n             final String key,\n             final PropagationByResource<String> propByRes,\n             final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n         return getDeleteTasks(\n                 anyUtilsFactory.getInstance(kind).dao().authFind(key),\n-                propByRes, propByLinkedAccount, noPropResourceKeys);\n+                propByRes, propByLinkedAccount, excludedResources);\n     }\n \n     protected List<PropagationTaskInfo> getDeleteTasks(\n             final Any<?> any,\n             final PropagationByResource<String> propByRes,\n             final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n         PropagationByResource<String> localPropByRes = new PropagationByResource<>();\n \n@@ -334,16 +343,16 @@ protected List<PropagationTaskInfo> getDeleteTasks(\n             localPropByRes.merge(propByRes);\n         }\n \n-        if (noPropResourceKeys != null) {\n-            localPropByRes.removeAll(noPropResourceKeys);\n+        if (excludedResources != null) {\n+            localPropByRes.removeAll(excludedResources);\n \n             if (propByLinkedAccount != null) {\n                 propByLinkedAccount.get(ResourceOperation.CREATE).\n-                        removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+                        removeIf(account -> excludedResources.contains(account.getLeft()));\n                 propByLinkedAccount.get(ResourceOperation.UPDATE).\n-                        removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+                        removeIf(account -> excludedResources.contains(account.getLeft()));\n                 propByLinkedAccount.get(ResourceOperation.DELETE).\n-                        removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+                        removeIf(account -> excludedResources.contains(account.getLeft()));\n             }\n         }\n \n@@ -360,20 +369,12 @@ public PropagationTaskInfo newTask(\n             final Stream<Item> mappingItems,\n             final Pair<String, Set<Attribute>> preparedAttrs) {\n \n-        PropagationTaskInfo task = new PropagationTaskInfo(resource);\n-        task.setObjectClassName(provision.getObjectClass());\n-        task.setAnyTypeKind(any.getType().getKind());\n-        task.setAnyType(any.getType().getKey());\n-        task.setEntityKey(any.getKey());\n-        task.setOperation(operation);\n-        task.setConnObjectKey(preparedAttrs.getLeft());\n-\n         // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n         // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n         List<String> mandatoryMissing = new ArrayList<>();\n         List<String> mandatoryNullOrEmpty = new ArrayList<>();\n-        mappingItems.filter(item -> (!item.isConnObjectKey()\n-                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any, derAttrHandler))).\n+        mappingItems.filter(item -> !item.isConnObjectKey()\n+                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any, derAttrHandler)).\n                 forEach(item -> {\n \n                     Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getRight());\n@@ -385,16 +386,22 @@ public PropagationTaskInfo newTask(\n                 });\n         if (!mandatoryMissing.isEmpty()) {\n             preparedAttrs.getRight().add(AttributeBuilder.build(\n-                    PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n+                    MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n         }\n         if (!mandatoryNullOrEmpty.isEmpty()) {\n             preparedAttrs.getRight().add(AttributeBuilder.build(\n-                    PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n+                    MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n         }\n \n-        task.setAttributes(POJOHelper.serialize(preparedAttrs.getRight()));\n-\n-        return task;\n+        return new PropagationTaskInfo(\n+                resource,\n+                operation,\n+                new ObjectClass(provision.getObjectClass()),\n+                any.getType().getKind(),\n+                any.getType().getKey(),\n+                any.getKey(),\n+                preparedAttrs.getLeft(),\n+                new PropagationData(preparedAttrs.getRight()));\n     }\n \n     /**\n@@ -552,10 +559,10 @@ protected List<PropagationTaskInfo> createTasks(\n     public List<PropagationTaskInfo> createTasks(\n             final Realm realm,\n             final PropagationByResource<String> propByRes,\n-            final Collection<String> noPropResourceKeys) {\n+            final Collection<String> excludedResources) {\n \n-        if (noPropResourceKeys != null) {\n-            propByRes.removeAll(noPropResourceKeys);\n+        if (excludedResources != null) {\n+            propByRes.removeAll(excludedResources);\n         }\n \n         LOG.debug(\"Provisioning {}:\\n{}\", realm, propByRes);\n@@ -578,15 +585,18 @@ public List<PropagationTaskInfo> createTasks(\n                 LOG.warn(\"Requesting propagation for {} but no ConnObjectLink provided for {}\",\n                         realm.getFullPath(), resource);\n             } else {\n-                PropagationTaskInfo task = new PropagationTaskInfo(resource);\n-                task.setObjectClassName(orgUnit.getObjectClass());\n-                task.setEntityKey(realm.getKey());\n-                task.setOperation(operation);\n-                task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n-\n                 Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromRealm(realm, orgUnit);\n-                task.setConnObjectKey(preparedAttrs.getLeft());\n-                task.setAttributes(POJOHelper.serialize(preparedAttrs.getRight()));\n+\n+                PropagationTaskInfo task = new PropagationTaskInfo(\n+                        resource,\n+                        operation,\n+                        new ObjectClass(orgUnit.getObjectClass()),\n+                        null,\n+                        null,\n+                        realm.getKey(),\n+                        preparedAttrs.getLeft(),\n+                        new PropagationData(preparedAttrs.getRight()));\n+                task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n                 tasks.add(task);\n \n@@ -596,4 +606,175 @@ public List<PropagationTaskInfo> createTasks(\n \n         return tasks;\n     }\n+\n+    @Transactional(readOnly = true, propagation = Propagation.REQUIRES_NEW)\n+    @Override\n+    public Map<Pair<String, String>, Set<Attribute>> prepareAttrs(\n+            final AnyTypeKind kind,\n+            final String key,\n+            final String password,\n+            final boolean changePwd,\n+            final Boolean enable,\n+            final Collection<String> excludedResources) {\n+\n+        Map<Pair<String, String>, Set<Attribute>> attrs = new HashMap<>();\n+\n+        Any<?> any = anyUtilsFactory.getInstance(kind).dao().authFind(key);\n+\n+        anyUtilsFactory.getInstance(kind).dao().findAllResourceKeys(key).stream().\n+                map(resourceDAO::find).\n+                filter(resource -> !excludedResources.contains(resource.getKey())\n+                && resource.getProvision(any.getType().getKey()).isPresent()\n+                && resource.getPropagationPolicy() != null && resource.getPropagationPolicy().isUpdateDelta()).\n+                forEach(resource -> {\n+                    Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromAny(\n+                            any,\n+                            password,\n+                            changePwd,\n+                            enable,\n+                            resource,\n+                            resource.getProvision(any.getType().getKey()).get());\n+                    attrs.put(\n+                            Pair.of(resource.getKey(), preparedAttrs.getLeft()),\n+                            preparedAttrs.getRight());\n+                });\n+\n+        if (any instanceof User) {\n+            ((User) any).getLinkedAccounts().stream().\n+                    filter(account -> !excludedResources.contains(account.getResource().getKey())\n+                    && account.getResource().getProvision(any.getType().getKey()).isPresent()\n+                    && account.getResource().getPropagationPolicy() != null\n+                    && account.getResource().getPropagationPolicy().isUpdateDelta()).\n+                    forEach(account -> {\n+                        Set<Attribute> preparedAttrs = mappingManager.prepareAttrsFromLinkedAccount(\n+                                (User) any,\n+                                account,\n+                                password,\n+                                true,\n+                                account.getResource().getProvision(any.getType().getKey()).get());\n+                        attrs.put(\n+                                Pair.of(account.getResource().getKey(), account.getConnObjectKeyValue()),\n+                                preparedAttrs);\n+                    });\n+        }\n+\n+        LOG.debug(\"Prepared attrs for {} {}: {}\", kind, key, attrs);\n+        return attrs;\n+    }\n+\n+    @Transactional(readOnly = true, propagation = Propagation.REQUIRES_NEW)\n+    @Override\n+    public Map<Pair<String, String>, Set<Attribute>> prepareAttrs(final Realm realm) {\n+        Map<Pair<String, String>, Set<Attribute>> attrs = new HashMap<>();\n+\n+        realm.getResources().stream().\n+                filter(resource -> resource.getOrgUnit() != null\n+                && resource.getPropagationPolicy() != null && resource.getPropagationPolicy().isUpdateDelta()).\n+                forEach(resource -> {\n+                    Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromRealm(\n+                            realm,\n+                            resource.getOrgUnit());\n+                    attrs.put(\n+                            Pair.of(resource.getKey(), preparedAttrs.getLeft()),\n+                            preparedAttrs.getRight());\n+                });\n+\n+        return attrs;\n+    }\n+\n+    @Override\n+    public List<PropagationTaskInfo> setAttributeDeltas(\n+            final List<PropagationTaskInfo> tasks,\n+            final Map<Pair<String, String>, Set<Attribute>> beforeAttrs,\n+            final AnyUR updateRequest) {\n+\n+        if (beforeAttrs.isEmpty()) {\n+            return tasks;\n+        }\n+\n+        for (PropagationTaskInfo task : tasks) {\n+            // rename is not supported by updateDelta\n+            if (!task.getConnObjectKey().equals(task.getOldConnObjectKey())) {\n+                continue;\n+            }\n+\n+            Pair<String, String> key = Pair.of(task.getResource().getKey(), task.getConnObjectKey());\n+            if (!beforeAttrs.containsKey(key)) {\n+                continue;\n+            }\n+\n+            Set<Attribute> attrs = new HashSet<>(beforeAttrs.get(key));\n+\n+            // purge unwanted attributes, even though prepared\n+            attrs.removeIf(attr -> attr instanceof Name\n+                    || OperationalAttributes.ENABLE_NAME.equals(attr.getName())\n+                    || MANDATORY_MISSING_ATTR_NAME.equals(attr.getName())\n+                    || MANDATORY_NULL_OR_EMPTY_ATTR_NAME.equals(attr.getName()));\n+\n+            // see org.identityconnectors.framework.impl.api.local.operations.UpdateDeltaImpl\n+            if (attrs.stream().anyMatch(attr -> !OperationalAttributes.PASSWORD_NAME.equals(attr.getName())\n+                    && OperationalAttributes.getOperationalAttributeNames().contains(attr.getName()))) {\n+\n+                continue;\n+            }\n+\n+            PropagationData propagationData = task.getPropagationData();\n+\n+            Set<AttributeDelta> attributeDeltas = new HashSet<>();\n+\n+            // build delta for updated attributes\n+            propagationData.getAttributes().forEach(next -> {\n+                Set<Object> valuesToAdd = new HashSet<>();\n+                Set<Object> valuesToRemove = new HashSet<>();\n+\n+                Optional.ofNullable(AttributeUtil.find(next.getName(), attrs)).ifPresent(prev -> {\n+                    if (next.getValue() == null && prev.getValue() != null) {\n+                        valuesToRemove.addAll(prev.getValue());\n+                    } else if (next.getValue() != null && prev.getValue() == null) {\n+                        valuesToAdd.addAll(next.getValue());\n+                    } else if (next.getValue() != null && prev.getValue() != null) {\n+                        next.getValue().stream().\n+                                filter(value -> !prev.getValue().contains(value)).\n+                                forEach(valuesToAdd::add);\n+\n+                        prev.getValue().stream().\n+                                filter(value -> !next.getValue().contains(value)).\n+                                forEach(valuesToRemove::add);\n+                    }\n+                });\n+\n+                if (!valuesToAdd.isEmpty() || !valuesToRemove.isEmpty()) {\n+                    attributeDeltas.add(AttributeDeltaBuilder.build(next.getName(), valuesToAdd, valuesToRemove));\n+                }\n+            });\n+\n+            // build delta for new or removed attributes\n+            Set<String> nextNames = propagationData.getAttributes().stream().\n+                    filter(attr -> !(attr instanceof Name) && !OperationalAttributes.isOperationalAttribute(attr)).\n+                    map(Attribute::getName).\n+                    collect(Collectors.toSet());\n+            Set<String> prevNames = attrs.stream().\n+                    filter(attr -> !(attr instanceof Name) && !OperationalAttributes.isOperationalAttribute(attr)).\n+                    map(Attribute::getName).\n+                    collect(Collectors.toSet());\n+\n+            nextNames.stream().filter(name -> !prevNames.contains(name)).\n+                    forEach(toAdd -> Optional.ofNullable(\n+                    AttributeUtil.find(toAdd, propagationData.getAttributes())).\n+                    ifPresent(attr -> attributeDeltas.add(\n+                    AttributeDeltaBuilder.build(attr.getName(), attr.getValue(), Set.of()))));\n+            prevNames.stream().filter(name -> !nextNames.contains(name)).\n+                    forEach(toRemove -> Optional.ofNullable(\n+                    AttributeUtil.find(toRemove, attrs)).\n+                    ifPresent(attr -> attributeDeltas.add(\n+                    AttributeDeltaBuilder.build(attr.getName(), Set.of(), attr.getValue()))));\n+\n+            if (!attributeDeltas.isEmpty()) {\n+                propagationData.setAttributeDeltas(attributeDeltas);\n+                task.setUpdateRequest(updateRequest);\n+            }\n+        }\n+\n+        return tasks;\n+    }\n }"},{"sha":"13037ca4e6a4d617af7d28f23820be2dffc97cf0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/DefaultPropagationReporter.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FDefaultPropagationReporter.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -22,7 +22,6 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -55,7 +54,7 @@ public void onSuccessOrNonPriorityResourceFailures(\n             final ConnectorObject afterObj) {\n \n         PropagationStatus status = new PropagationStatus();\n-        status.setResource(taskInfo.getResource());\n+        status.setResource(taskInfo.getResource().getKey());\n         status.setStatus(executionStatus);\n         status.setFailureReason(failureReason);\n \n@@ -77,19 +76,15 @@ public void onPriorityResourceFailure(\n \n         LOG.debug(\"Propagation error: {} priority resource failed to propagate\", failingResource);\n \n-        Optional<PropagationTaskInfo> propagationTask = taskInfos.stream().\n-                filter(task -> task.getResource().equals(failingResource)).findFirst();\n-\n-        if (propagationTask.isPresent()) {\n-            PropagationStatus status = new PropagationStatus();\n-            status.setResource(propagationTask.get().getResource());\n-            status.setStatus(ExecStatus.FAILURE);\n-            status.setFailureReason(\n-                    \"Propagation error: \" + failingResource + \" priority resource failed to propagate.\");\n-            add(status);\n-        } else {\n-            LOG.error(\"Could not find {} for {}\", PropagationTask.class.getName(), failingResource);\n-        }\n+        taskInfos.stream().filter(task -> task.getResource().getKey().equals(failingResource)).findFirst().\n+                ifPresentOrElse(task -> {\n+                    PropagationStatus status = new PropagationStatus();\n+                    status.setResource(task.getResource().getKey());\n+                    status.setStatus(ExecStatus.FAILURE);\n+                    status.setFailureReason(\n+                            \"Propagation error: \" + failingResource + \" priority resource failed to propagate.\");\n+                    add(status);\n+                }, () -> LOG.error(\"Could not find {} for {}\", PropagationTask.class.getName(), failingResource));\n     }\n \n     @Override"},{"sha":"846994d8bbadd35c93d4ee3b97529fef82fa6ae7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/GoogleAppsPropagationActions.java","status":"modified","additions":17,"deletions":19,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FGoogleAppsPropagationActions.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n-import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Name;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -40,35 +40,33 @@\n  */\n public class GoogleAppsPropagationActions implements PropagationActions {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(GoogleAppsPropagationActions.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(GoogleAppsPropagationActions.class);\n \n-    protected static String getEmailAttrName() {\n+    protected String getEmailAttrName() {\n         return \"emails\";\n     }\n \n     @Transactional\n     @Override\n-    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n-        if (task.getOperation() == ResourceOperation.DELETE || task.getOperation() == ResourceOperation.NONE) {\n+    public void before(final PropagationTaskInfo taskInfo) {\n+        if (taskInfo.getOperation() == ResourceOperation.DELETE || taskInfo.getOperation() == ResourceOperation.NONE) {\n             return;\n         }\n-        if (AnyTypeKind.USER != task.getAnyTypeKind()) {\n+        if (AnyTypeKind.USER != taskInfo.getAnyTypeKind()) {\n             return;\n         }\n \n-        Set<Attribute> attrs = new HashSet<>(task.getAttributes());\n+        PropagationData data = taskInfo.getPropagationData();\n+        if (data.getAttributes() != null) {\n+            Set<Attribute> attrs = data.getAttributes();\n \n-        if (AttributeUtil.find(getEmailAttrName(), attrs) == null) {\n-            LOG.warn(\"Can't find {} to set as {} attribute value, skipping...\", getEmailAttrName(), Name.NAME);\n-            return;\n-        }\n+            if (AttributeUtil.find(getEmailAttrName(), attrs) == null) {\n+                LOG.warn(\"Can't find {} to set as {} attribute value, skipping...\", getEmailAttrName(), Name.NAME);\n+                return;\n+            }\n \n-        Name name = AttributeUtil.getNameFromAttributes(attrs);\n-        if (name != null) {\n-            attrs.remove(name);\n+            Optional.ofNullable(AttributeUtil.getNameFromAttributes(attrs)).ifPresent(attrs::remove);\n+            attrs.add(new Name(AttributeUtil.find(getEmailAttrName(), attrs).getValue().get(0).toString()));\n         }\n-        attrs.add(new Name(AttributeUtil.find(getEmailAttrName(), attrs).getValue().get(0).toString()));\n-\n-        task.setAttributes(attrs);\n     }\n }"},{"sha":"bb590cc393b6189fc919d396bc24b337721adf1a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":107,"deletions":63,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -18,31 +18,35 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n-import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.TreeSet;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n-import org.identityconnectors.framework.common.objects.Attribute;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeDeltaBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeDeltaUtil;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -61,9 +65,6 @@ public class LDAPMembershipPropagationActions implements PropagationActions {\n     @Autowired\n     protected DerAttrHandler derAttrHandler;\n \n-    @Autowired\n-    protected AnyTypeDAO anyTypeDAO;\n-\n     @Autowired\n     protected UserDAO userDAO;\n \n@@ -75,86 +76,129 @@ public class LDAPMembershipPropagationActions implements PropagationActions {\n      *\n      * @return the name of the attribute used to keep track of group memberships\n      */\n-    protected static String getGroupMembershipAttrName() {\n+    protected String getGroupMembershipAttrName() {\n         return \"ldapGroups\";\n     }\n \n+    protected String evaluateGroupConnObjectLink(final String connObjectLinkTemplate, final Group group) {\n+        LOG.debug(\"Evaluating connObjectLink for {}\", group);\n+\n+        JexlContext jexlContext = new MapContext();\n+        JexlUtils.addFieldsToContext(group, jexlContext);\n+        JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n+        JexlUtils.addDerAttrsToContext(group, derAttrHandler, jexlContext);\n+\n+        return JexlUtils.evaluate(connObjectLinkTemplate, jexlContext).toString();\n+    }\n+\n+    protected void buildManagedGroupConnObjectLinks(\n+            final ExternalResource resource,\n+            final String connObjectLinkTemplate,\n+            final Set<String> connObjectLinks) {\n+\n+        List<Group> managedGroups = groupDAO.findByResource(resource);\n+        managedGroups.forEach(group -> connObjectLinks.add(evaluateGroupConnObjectLink(connObjectLinkTemplate, group)));\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n-    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n-        Optional<Provision> provision = task.getResource().getProvision(anyTypeDAO.findGroup().getKey());\n-        if (AnyTypeKind.USER == task.getAnyTypeKind()\n-                && provision.isPresent() && provision.get().getMapping() != null\n-                && StringUtils.isNotBlank(provision.get().getMapping().getConnObjectLink())) {\n-\n-            User user = userDAO.find(task.getEntityKey());\n-            if (user != null) {\n-                List<String> groupConnObjectLinks = new ArrayList<>();\n-                userDAO.findAllGroupKeys(user).forEach(groupKey -> {\n-                    Group group = groupDAO.find(groupKey);\n-                    if (group != null && groupDAO.findAllResourceKeys(groupKey).contains(task.getResource().getKey())) {\n+    public void before(final PropagationTaskInfo taskInfo) {\n+        if (AnyTypeKind.USER != taskInfo.getAnyTypeKind() || taskInfo.getOperation() == ResourceOperation.DELETE) {\n+            return;\n+        }\n \n+        Optional<Provision> groupProvision = taskInfo.getResource().getProvision(AnyTypeKind.GROUP.name());\n+        if (groupProvision.isPresent() && groupProvision.get().getMapping() != null\n+                && StringUtils.isNotBlank(groupProvision.get().getMapping().getConnObjectLink())) {\n+\n+            User user = userDAO.find(taskInfo.getEntityKey());\n+            Set<String> groups = new HashSet<>();\n+\n+            // for each user group assigned to the resource of this task, compute and add the group's \n+            // connector object link\n+            userDAO.findAllGroupKeys(user).stream().\n+                    map(groupDAO::find).\n+                    filter(group -> group.getResources().contains(taskInfo.getResource())).\n+                    forEach(group -> {\n                         String groupConnObjectLink = evaluateGroupConnObjectLink(\n-                                provision.get().getMapping().getConnObjectLink(), group);\n+                                groupProvision.get().getMapping().getConnObjectLink(), group);\n \n                         LOG.debug(\"ConnObjectLink for {} is '{}'\", group, groupConnObjectLink);\n                         if (StringUtils.isNotBlank(groupConnObjectLink)) {\n-                            groupConnObjectLinks.add(groupConnObjectLink);\n-\n+                            groups.add(groupConnObjectLink);\n                         }\n-                    }\n-                });\n-                LOG.debug(\"Group connObjectLinks to propagate for membership: {}\", groupConnObjectLinks);\n-\n-                Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n-\n-                Set<String> groups = new HashSet<>(groupConnObjectLinks);\n-                Attribute ldapGroups = AttributeUtil.find(getGroupMembershipAttrName(), attributes);\n-                if (ldapGroups != null) {\n-                    ldapGroups.getValue().forEach(obj -> groups.add(obj.toString()));\n-                    attributes.remove(ldapGroups);\n-\n-                    if (beforeObj != null && beforeObj.getAttributeByName(getGroupMembershipAttrName()) != null) {\n+                    });\n+            LOG.debug(\"Group connObjectLinks to propagate for membership: {}\", groups);\n+\n+            PropagationData data = taskInfo.getPropagationData();\n+\n+            // if groups were defined by resource mapping, take their values and clear up\n+            Optional.ofNullable(AttributeUtil.find(getGroupMembershipAttrName(), data.getAttributes())).\n+                    ifPresent(ldapGroups -> {\n+                        Optional.ofNullable(ldapGroups.getValue()).\n+                                ifPresent(value -> value.forEach(obj -> groups.add(obj.toString())));\n+\n+                        data.getAttributes().remove(ldapGroups);\n+                    });\n+            LOG.debug(\"Group connObjectLinks after including the ones from mapping: {}\", groups);\n+\n+            // take groups already assigned from beforeObj and include them too\n+            taskInfo.getBeforeObj().\n+                    map(beforeObj -> beforeObj.getAttributeByName(getGroupMembershipAttrName())).\n+                    filter(Objects::nonNull).\n+                    ifPresent(beforeLdapGroups -> {\n                         Set<String> connObjectLinks = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n                         buildManagedGroupConnObjectLinks(\n-                                task.getResource(),\n-                                provision.get().getMapping().getConnObjectLink(),\n+                                taskInfo.getResource(),\n+                                groupProvision.get().getMapping().getConnObjectLink(),\n                                 connObjectLinks);\n \n-                        Attribute beforeLdapGroups = beforeObj.getAttributeByName(getGroupMembershipAttrName());\n                         LOG.debug(\"Memberships not managed by Syncope: {}\", beforeLdapGroups);\n                         beforeLdapGroups.getValue().stream().\n                                 filter(value -> !connObjectLinks.contains(String.valueOf(value))).\n                                 forEach(value -> groups.add(String.valueOf(value)));\n+                    });\n+\n+            LOG.debug(\"Adding Group connObjectLinks to attributes: {}={}\", getGroupMembershipAttrName(), groups);\n+            data.getAttributes().add(AttributeBuilder.build(getGroupMembershipAttrName(), groups));\n+\n+            if (data.getAttributeDeltas() != null && taskInfo.getUpdateRequest() != null) {\n+                Set<String> groupsToAdd = new HashSet<>();\n+                Set<String> groupsToRemove = new HashSet<>();\n+\n+                // if groups were added or removed by last update, compute and add the group's connector object link\n+                for (MembershipUR memb : ((UserUR) taskInfo.getUpdateRequest()).getMemberships()) {\n+                    String connObjectLink = evaluateGroupConnObjectLink(\n+                            groupProvision.get().getMapping().getConnObjectLink(),\n+                            groupDAO.find(memb.getGroup()));\n+                    if (memb.getOperation() == PatchOperation.ADD_REPLACE) {\n+                        groupsToAdd.add(connObjectLink);\n+                    } else {\n+                        groupsToRemove.add(connObjectLink);\n                     }\n                 }\n-                LOG.debug(\"Add ldapGroups to attributes: {}\", groups);\n-                attributes.add(AttributeBuilder.build(getGroupMembershipAttrName(), groups));\n \n-                task.setAttributes(attributes);\n+                // if groups were already considered, take their values and clear up\n+                Optional.ofNullable(\n+                        AttributeDeltaUtil.find(getGroupMembershipAttrName(), data.getAttributeDeltas())).\n+                        ifPresent(ldapGroups -> {\n+                            Optional.ofNullable(ldapGroups.getValuesToAdd()).\n+                                    ifPresent(value -> value.forEach(obj -> groupsToAdd.add(obj.toString())));\n+                            Optional.ofNullable(ldapGroups.getValuesToRemove()).\n+                                    ifPresent(value -> value.forEach(obj -> groupsToRemove.add(obj.toString())));\n+\n+                            data.getAttributeDeltas().remove(ldapGroups);\n+                        });\n+\n+                if (!groupsToAdd.isEmpty() || !groupsToRemove.isEmpty()) {\n+                    LOG.debug(\"Adding Group connObjectLinks to attribute deltas: {}={},{}\",\n+                            getGroupMembershipAttrName(), groupsToAdd, groupsToRemove);\n+                    data.getAttributeDeltas().add(\n+                            AttributeDeltaBuilder.build(getGroupMembershipAttrName(), groupsToAdd, groupsToRemove));\n+                }\n             }\n         } else {\n             LOG.debug(\"Not about user, or group mapping missing for resource: not doing anything\");\n         }\n     }\n-\n-    private String evaluateGroupConnObjectLink(final String connObjectLinkTemplate, final Group group) {\n-        LOG.debug(\"Evaluating connObjectLink for {}\", group);\n-\n-        JexlContext jexlContext = new MapContext();\n-        JexlUtils.addFieldsToContext(group, jexlContext);\n-        JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n-        JexlUtils.addDerAttrsToContext(group, derAttrHandler, jexlContext);\n-\n-        return JexlUtils.evaluate(connObjectLinkTemplate, jexlContext).toString();\n-    }\n-\n-    private void buildManagedGroupConnObjectLinks(\n-            final ExternalResource resource,\n-            final String connObjectLinkTemplate,\n-            final Set<String> connObjectLinks) {\n-\n-        List<Group> managedGroups = groupDAO.findByResource(resource);\n-        managedGroups.forEach(group -> connObjectLinks.add(evaluateGroupConnObjectLink(connObjectLinkTemplate, group)));\n-    }\n }"},{"sha":"76ab4355d47000499a9f7e26f816555df9bd494d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPPasswordPropagationActions.java","status":"modified","additions":16,"deletions":19,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPPasswordPropagationActions.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -19,22 +19,21 @@\n package org.apache.syncope.core.provisioning.java.propagation;\n \n import java.util.Base64;\n-import java.util.HashSet;\n import java.util.Set;\n import javax.xml.bind.DatatypeConverter;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -53,16 +52,17 @@ public class LDAPPasswordPropagationActions implements PropagationActions {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public void before(final PropagationTask task, final ConnectorObject beforeObj) {\n-        if (AnyTypeKind.USER == task.getAnyTypeKind()) {\n-            User user = userDAO.find(task.getEntityKey());\n+    public void before(final PropagationTaskInfo taskInfo) {\n+        if (AnyTypeKind.USER == taskInfo.getAnyTypeKind()) {\n+            User user = userDAO.find(taskInfo.getEntityKey());\n \n-            if (user != null && user.getPassword() != null) {\n-                Attribute missing = AttributeUtil.find(\n-                        PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME,\n-                        task.getAttributes());\n+            PropagationData data = taskInfo.getPropagationData();\n+            if (user != null && user.getPassword() != null && data.getAttributes() != null) {\n+                Set<Attribute> attrs = data.getAttributes();\n \n-                ConnInstance connInstance = task.getResource().getConnector();\n+                Attribute missing = AttributeUtil.find(PropagationManager.MANDATORY_MISSING_ATTR_NAME, attrs);\n+\n+                ConnInstance connInstance = taskInfo.getResource().getConnector();\n                 String cipherAlgorithm = getCipherAlgorithm(connInstance);\n                 if (missing != null && missing.getValue() != null && missing.getValue().size() == 1\n                         && missing.getValue().get(0).equals(OperationalAttributes.PASSWORD_NAME)\n@@ -77,25 +77,22 @@ && cipherAlgorithmMatches(getCipherAlgorithm(connInstance), user.getCipherAlgori\n                     Attribute passwordAttribute = AttributeBuilder.buildPassword(\n                             new GuardedString(cipherPlusPassword.toCharArray()));\n \n-                    Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n-                    attributes.add(passwordAttribute);\n-                    attributes.remove(missing);\n-\n-                    task.setAttributes(attributes);\n+                    attrs.add(passwordAttribute);\n+                    attrs.remove(missing);\n                 }\n             }\n         }\n     }\n \n-    private static String getCipherAlgorithm(final ConnInstance connInstance) {\n+    protected String getCipherAlgorithm(final ConnInstance connInstance) {\n         return connInstance.getConf().stream().\n                 filter(property -> \"passwordHashAlgorithm\".equals(property.getSchema().getName())\n                 && property.getValues() != null && !property.getValues().isEmpty()).findFirst().\n                 map(cipherAlgorithm -> (String) cipherAlgorithm.getValues().get(0)).\n                 orElse(CLEARTEXT);\n     }\n \n-    private static boolean cipherAlgorithmMatches(final String connectorAlgo, final CipherAlgorithm userAlgo) {\n+    protected boolean cipherAlgorithmMatches(final String connectorAlgo, final CipherAlgorithm userAlgo) {\n         if (userAlgo == null) {\n             return false;\n         }"},{"sha":"5daf4bf5f3963e11df7d8ed0b61d18e703e97392","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -131,8 +131,8 @@ public PropagationReporter execute(\n         PropagationReporter reporter = new DefaultPropagationReporter();\n         try {\n             List<PropagationTaskInfo> prioritizedTasks = taskInfos.stream().\n-                    filter(task -> task.getExternalResource().getPropagationPriority() != null).\n-                    sorted(Comparator.comparing(task -> task.getExternalResource().getPropagationPriority())).\n+                    filter(task -> task.getResource().getPropagationPriority() != null).\n+                    sorted(Comparator.comparing(task -> task.getResource().getPropagationPriority())).\n                     collect(Collectors.toList());\n             LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);\n \n@@ -142,12 +142,12 @@ public PropagationReporter execute(\n             LOG.debug(\"Propagation tasks for concurrent execution: {}\", concurrentTasks);\n \n             // first process priority resources sequentially and fail as soon as any propagation failure is reported\n-            prioritizedTasks.forEach(task -> {\n+            prioritizedTasks.forEach(taskInfo -> {\n                 TaskExec exec = null;\n                 ExecStatus execStatus;\n                 String errorMessage = null;\n                 try {\n-                    exec = newPropagationTaskCallable(task, reporter, executor).call();\n+                    exec = newPropagationTaskCallable(taskInfo, reporter, executor).call();\n                     execStatus = ExecStatus.valueOf(exec.getStatus());\n                 } catch (Exception e) {\n                     LOG.error(\"Unexpected exception\", e);\n@@ -156,7 +156,7 @@ public PropagationReporter execute(\n                 }\n                 if (execStatus != ExecStatus.SUCCESS) {\n                     throw new PropagationException(\n-                            task.getResource(),\n+                            taskInfo.getResource().getKey(),\n                             Optional.ofNullable(exec).map(Exec::getMessage).orElse(errorMessage));\n                 }\n             });"},{"sha":"93a54dfc35d94dfaa6fd564a100d08a5d97c5437","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n@@ -98,7 +98,7 @@ protected void update(\n \n         boolean changepwd = any instanceof User;\n         List<String> ownedResources = getAnyUtils().getAllResources(any).stream().\n-                map(Entity::getKey).collect(Collectors.toList());\n+                map(ExternalResource::getKey).collect(Collectors.toList());\n \n         List<String> noPropResources = new ArrayList<>(ownedResources);\n         noPropResources.remove(profile.getTask().getResource().getKey());"},{"sha":"ed22cb265ce041da1ec5cc934aee69177c34b594","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -20,8 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.OrgUnit;\n@@ -51,6 +53,7 @@\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n+import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.quartz.JobExecutionException;\n@@ -311,11 +314,16 @@ private List<ProvisioningReport> update(final SyncDelta delta, final List<Realm>\n                         }\n                     }\n \n+                    Map<Pair<String, String>, Set<Attribute>> beforeAttrs = propagationManager.prepareAttrs(realm);\n+\n                     PropagationByResource<String> propByRes = binder.update(realm, before);\n                     realm = realmDAO.save(realm);\n                     RealmTO updated = binder.getRealmTO(realm, true);\n \n-                    List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+                    List<PropagationTaskInfo> taskInfos = propagationManager.setAttributeDeltas(\n+                            propagationManager.createTasks(realm, propByRes, null),\n+                            beforeAttrs,\n+                            null);\n                     taskExecutor.execute(taskInfos, false, securityProperties.getAdminUser());\n \n                     for (PullActions action : profile.getActions()) {"},{"sha":"f1f4a2a1b56326a62d1d3a1c808d01da80b8a0de","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -23,8 +23,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.OrgUnit;\n@@ -51,6 +53,7 @@\n import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n@@ -103,10 +106,16 @@ private static void reportPropagation(final ProvisioningReport result, final Pro\n \n     private Realm update(final RealmTO realmTO, final ConnectorObject beforeObj, final ProvisioningReport result) {\n         Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n+\n+        Map<Pair<String, String>, Set<Attribute>> beforeAttrs = propagationManager.prepareAttrs(realm);\n+\n         PropagationByResource<String> propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n-        List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n+        List<PropagationTaskInfo> taskInfos = propagationManager.setAttributeDeltas(\n+                propagationManager.createTasks(realm, propByRes, null),\n+                beforeAttrs,\n+                null);\n         if (!taskInfos.isEmpty()) {\n             taskInfos.get(0).setBeforeObj(Optional.ofNullable(beforeObj));\n             PropagationReporter reporter = new DefaultPropagationReporter();"},{"sha":"e33d2c5e63ae5303f4bb396d6abd384a19a0b114","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -109,7 +109,7 @@ protected void update(\n             final ProvisioningReport result) {\n \n         List<String> ownedResources = getAnyUtils().getAllResources(any).stream().\n-                map(Entity::getKey).collect(Collectors.toList());\n+                map(ExternalResource::getKey).collect(Collectors.toList());\n \n         List<String> noPropResources = new ArrayList<>(ownedResources);\n         noPropResources.remove(profile.getTask().getResource().getKey());"},{"sha":"89da2ee27c982b00b9656306a5ebc434a11b3e23","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -37,12 +37,12 @@\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n-import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -111,31 +111,31 @@ public String getFIQL(\n     }\n \n     public List<ConnectorObject> match(\n-            final PropagationTask task,\n+            final PropagationTaskInfo taskInfo,\n             final Connector connector,\n             final Provision provision,\n             final List<PropagationActions> actions,\n             final String connObjectKeyValue) {\n \n-        Optional<PushCorrelationRule> rule = rule(task.getResource(), provision);\n+        Optional<PushCorrelationRule> rule = rule(taskInfo.getResource(), provision);\n \n-        boolean isLinkedAccount = task.getAnyTypeKind() == AnyTypeKind.USER\n-                && userDAO.linkedAccountExists(task.getEntityKey(), connObjectKeyValue);\n+        boolean isLinkedAccount = taskInfo.getAnyTypeKind() == AnyTypeKind.USER\n+                && userDAO.linkedAccountExists(taskInfo.getEntityKey(), connObjectKeyValue);\n         Any<?> any = null;\n         if (!isLinkedAccount) {\n-            any = anyUtilsFactory.getInstance(task.getAnyTypeKind()).dao().find(task.getEntityKey());\n+            any = anyUtilsFactory.getInstance(taskInfo.getAnyTypeKind()).dao().find(taskInfo.getEntityKey());\n         }\n \n         Set<String> moreAttrsToGet = new HashSet<>();\n-        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(Optional.of(task), provision)));\n+        actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(Optional.of(taskInfo), provision)));\n \n         List<ConnectorObject> result = new ArrayList<>();\n         try {\n             if (any != null && rule.isPresent()) {\n                 result.addAll(matchByCorrelationRule(\n                         connector,\n-                        rule.get().getFilter(any, task.getResource(), provision),\n-                        task.getResource(),\n+                        rule.get().getFilter(any, taskInfo.getResource(), provision),\n+                        taskInfo.getResource(),\n                         provision,\n                         Optional.of(moreAttrsToGet.toArray(String[]::new)),\n                         Optional.empty()));\n@@ -144,7 +144,7 @@ public List<ConnectorObject> match(\n                         connector,\n                         connObjectKeyItem,\n                         connObjectKeyValue,\n-                        task.getResource(),\n+                        taskInfo.getResource(),\n                         provision,\n                         Optional.of(moreAttrsToGet.toArray(String[]::new)),\n                         Optional.empty())).ifPresent(result::add);"},{"sha":"5b13469eca91264519dcf3c6e5ac8c3bda5355c2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/CSVStreamConnector.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -40,6 +40,7 @@\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeDelta;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ConnectorObjectBuilder;\n@@ -203,6 +204,17 @@ public Uid update(\n         return null;\n     }\n \n+    @Override\n+    public Set<AttributeDelta> updateDelta(\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final Set<AttributeDelta> modifications,\n+            final OperationOptions options,\n+            final AtomicReference<Boolean> propagationAttempted) {\n+\n+        return Set.of();\n+    }\n+\n     @Override\n     public void delete(\n             final ObjectClass objectClass,"},{"sha":"5c27b103e2d5071fc2defe3d3377032ae1bd7096","filename":"core/starter/src/main/java/org/apache/syncope/core/starter/actuate/DefaultSyncopeCoreInfoContributor.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fstarter%2Factuate%2FDefaultSyncopeCoreInfoContributor.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -58,8 +58,9 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.PersistenceProperties;\n@@ -398,19 +399,19 @@ protected void buildPlatform() {\n             AuthContextUtils.callAsAdmin(AuthContextUtils.getDomain(), () -> {\n                 PLATFORM_INFO.getAnyTypes().clear();\n                 PLATFORM_INFO.getAnyTypes().addAll(anyTypeDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n+                        map(AnyType::getKey).collect(Collectors.toList()));\n \n                 PLATFORM_INFO.getUserClasses().clear();\n                 PLATFORM_INFO.getUserClasses().addAll(anyTypeDAO.findUser().getClasses().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n+                        map(AnyTypeClass::getKey).collect(Collectors.toList()));\n \n                 PLATFORM_INFO.getAnyTypeClasses().clear();\n                 PLATFORM_INFO.getAnyTypeClasses().addAll(anyTypeClassDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n+                        map(AnyTypeClass::getKey).collect(Collectors.toList()));\n \n                 PLATFORM_INFO.getResources().clear();\n                 PLATFORM_INFO.getResources().addAll(resourceDAO.findAll().stream().\n-                        map(Entity::getKey).collect(Collectors.toList()));\n+                        map(ExternalResource::getKey).collect(Collectors.toList()));\n                 return null;\n             });\n         }"},{"sha":"502b749556839cf4dd98edc476b119b2a1099c2b","filename":"ext/oidcc4ui/client-console/src/main/java/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/ext%2Foidcc4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/ext%2Foidcc4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcc4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.OIDCC4UIProviderTO;\n import org.apache.syncope.common.lib.types.OIDCClientImplementationType;\n import org.apache.wicket.PageReference;\n@@ -68,7 +68,7 @@ public class OIDCProviderWizardBuilder extends AjaxWizardBuilder<OIDCC4UIProvide\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(OIDCClientImplementationType.OP_ACTIONS).stream().\n-                map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n "},{"sha":"7b50bbaaf713547dd7581abe8e718da082e33edf","filename":"ext/saml2sp4ui/client-console/src/main/java/org/apache/syncope/client/console/wizards/SAML2IdPWizardBuilder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FSAML2IdPWizardBuilder.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.Item;\n import org.apache.syncope.common.lib.to.SAML2SP4UIIdPTO;\n import org.apache.syncope.common.lib.types.SAML2BindingType;\n@@ -71,7 +71,7 @@ public class SAML2IdPWizardBuilder extends AjaxWizardBuilder<SAML2SP4UIIdPTO> {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(SAML2SP4UIImplementationType.IDP_ACTIONS).stream().\n-                map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n \n@@ -82,7 +82,7 @@ protected List<String> load() {\n         @Override\n         protected List<String> load() {\n             return ImplementationRestClient.list(SAML2SP4UIImplementationType.REQUESTED_AUTHN_CONTEXT_PROVIDER).\n-                stream().map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                stream().map(ImplementationTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n "},{"sha":"cd528ab999edc53b84f9e15709489424dd635a42","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -30,9 +30,9 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.SCIMDataBinder;\n@@ -137,7 +137,7 @@ public Response replace(final String id, final SCIMGroup group) {\n                     SyncopeConstants.ROOT_REALM,\n                     true,\n                     false).\n-                    getRight().stream().map(EntityTO::getKey).collect(Collectors.toSet()));\n+                    getRight().stream().map(UserTO::getKey).collect(Collectors.toSet()));\n         }\n \n         // update group, don't change members"},{"sha":"5c772d06bcde8ed7c2c99abc9c34de099f677cac","filename":"fit/build-tools/src/main/resources/testdb.sql","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fresources%2Ftestdb.sql?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -51,6 +51,12 @@ location VARCHAR(80),\n deleted BOOLEAN DEFAULT FALSE,\n lastModification TIMESTAMP);\n \n+DROP TABLE testPRINTER_PAPERFORMAT IF EXISTS;\n+CREATE TABLE testPRINTER_PAPERFORMAT (\n+printer_id CHAR(36) NOT NULL,\n+paper_format VARCHAR(80) NOT NULL\n+);\n+\n CREATE TABLE testuser (\n capsId INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,\n userId VARCHAR(30) NOT NULL,"},{"sha":"c6bed1cdd83c80756e54223b7b347fa2cd27c961","filename":"fit/console-reference/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -62,7 +62,7 @@ under the License.\n       <artifactId>syncope-ext-flowable-client-console</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-    \n+\n     <dependency>\n       <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n       <artifactId>syncope-ext-saml2sp4ui-client-console</artifactId>"},{"sha":"f67e2b6eb4cf4f64b2cb042e7f1c0729cd02f57e","filename":"fit/core-reference/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -1619,7 +1619,7 @@ under the License.\n           <artifactId>syncope-ext-flowable-rest-cxf</artifactId>\n           <version>${project.version}</version>\n         </dependency>\n-       \n+\n         <dependency>\n           <groupId>org.apache.syncope.ext.saml2sp4ui</groupId>\n           <artifactId>syncope-ext-saml2sp4ui-rest-cxf</artifactId>"},{"sha":"ee309eb7123fd03aaa8c143774f3012d2c412657","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -794,7 +794,9 @@ protected static void removeLdapRemoteObject(\n     protected static <T> T queryForObject(\n             final JdbcTemplate jdbcTemplate,\n             final int maxWaitSeconds,\n-            final String sql, final Class<T> requiredType, final Object... args) {\n+            final String sql,\n+            final Class<T> requiredType,\n+            final Object... args) {\n \n         AtomicReference<T> object = new AtomicReference<>();\n         await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n@@ -809,6 +811,26 @@ protected static <T> T queryForObject(\n         return object.get();\n     }\n \n+    protected static <T> List<T> queryForList(\n+            final JdbcTemplate jdbcTemplate,\n+            final int maxWaitSeconds,\n+            final String sql,\n+            final Class<T> requiredType,\n+            final Object... args) {\n+\n+        AtomicReference<List<T>> object = new AtomicReference<>();\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n+            try {\n+                object.set(jdbcTemplate.queryForList(sql, requiredType, args));\n+                return object.get() != null;\n+            } catch (Exception e) {\n+                return false;\n+            }\n+        });\n+\n+        return object.get();\n+    }\n+\n     protected static OIDCRPClientAppTO buildOIDCRP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());"},{"sha":"4f7046ca5497182475177e53b82b53a41f101fd7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ApplicationITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -30,7 +30,6 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ApplicationTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.PrivilegeTO;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -102,7 +101,7 @@ public void crud() {\n         RoleTO role = new RoleTO();\n         role.setKey(\"privileged\");\n         role.getPrivileges().addAll(\n-                application.getPrivileges().stream().map(EntityTO::getKey).collect(Collectors.toList()));\n+                application.getPrivileges().stream().map(PrivilegeTO::getKey).collect(Collectors.toList()));\n \n         response = ROLE_SERVICE.create(role);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());"},{"sha":"5d41a8ecf648c504a006d9fcd5f30896002781ea","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -1205,14 +1205,13 @@ public void issueSYNCOPE1467() {\n             groupUR.setKey(groupTO.getKey());\n             groupUR.setName(new StringReplacePatchItem.Builder().value(\"fixedSYNCOPE1467\").build());\n \n-            assertNotNull(updateGroup(groupUR).getEntity());\n-\n-            // Assert resources are present\n-            ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n-            assertNotNull(ldap);\n+            ProvisioningResult<GroupTO> result = updateGroup(groupUR);\n+            assertEquals(1, result.getPropagationStatuses().size());\n+            assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+            assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n \n-            connObjectTO = RESOURCE_SERVICE.\n-                    readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+            connObjectTO = RESOURCE_SERVICE.readConnObject(\n+                    RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n             assertNotNull(connObjectTO);\n             assertEquals(\"fixedSYNCOPE1467\", connObjectTO.getAttr(\"cn\").get().getValues().get(0));\n         } finally {"},{"sha":"4ec5b72acf7a4edf7639ee56a6ffeb099466b3d1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -134,10 +134,11 @@ public void issueSYNCOPE81() {\n         NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n-        assertTrue(taskTO.getExecutions().isEmpty());\n \n-        // generate an execution in order to verify the deletion of a notification task with one or more executions\n-        execNotificationTask(TASK_SERVICE, taskTO.getKey(), MAX_WAIT_SECONDS);\n+        if (taskTO.getExecutions().isEmpty()) {\n+            // generate an execution in order to verify the deletion of a notification task with one or more executions\n+            execNotificationTask(TASK_SERVICE, taskTO.getKey(), MAX_WAIT_SECONDS);\n+        }\n \n         taskTO = TASK_SERVICE.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n         assertTrue(taskTO.isExecuted());\n@@ -156,11 +157,12 @@ public void issueSYNCOPE86() {\n         NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n-        assertTrue(taskTO.getExecutions().isEmpty());\n \n         try {\n-            // 3. execute the generated NotificationTask\n-            execNotificationTask(TASK_SERVICE, taskTO.getKey(), MAX_WAIT_SECONDS);\n+            // 3. execute the generated NotificationTask if needed\n+            if (taskTO.getExecutions().isEmpty()) {\n+                execNotificationTask(TASK_SERVICE, taskTO.getKey(), MAX_WAIT_SECONDS);\n+            }\n \n             // 4. verify\n             taskTO = TASK_SERVICE.read(TaskType.NOTIFICATION, taskTO.getKey(), true);\n@@ -181,13 +183,9 @@ public void issueSYNCOPE192() throws Exception {\n         NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n-        assertTrue(taskTO.getExecutions().isEmpty());\n-\n-        TASK_SERVICE.execute(new ExecSpecs.Builder().key(taskTO.getKey()).build());\n \n-        try {\n-            Thread.sleep(5);\n-        } catch (InterruptedException e) {\n+        if (taskTO.getExecutions().isEmpty()) {\n+            TASK_SERVICE.execute(new ExecSpecs.Builder().key(taskTO.getKey()).build());\n         }\n \n         verifyMail(sender, subject, created.getRight(), MAX_WAIT_SECONDS);\n@@ -209,9 +207,10 @@ public void issueSYNCOPE445() throws Exception {\n         NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), MAX_WAIT_SECONDS);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getNotification());\n-        assertTrue(taskTO.getExecutions().isEmpty());\n \n-        execNotificationTask(TASK_SERVICE, taskTO.getKey(), MAX_WAIT_SECONDS);\n+        if (taskTO.getExecutions().isEmpty()) {\n+            execNotificationTask(TASK_SERVICE, taskTO.getKey(), MAX_WAIT_SECONDS);\n+        }\n \n         verifyMail(sender, subject, created.getRight(), MAX_WAIT_SECONDS);\n "},{"sha":"e94150f6921c39614c73581daf0d89aa8d05797b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":221,"deletions":9,"changes":230,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -23,6 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n@@ -39,8 +40,6 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n@@ -51,7 +50,9 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.policy.PropagationPolicyTO;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n@@ -60,6 +61,7 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.ConnObject;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -71,6 +73,7 @@\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.Provision;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.TaskTO;\n@@ -82,15 +85,18 @@\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ExecListQuery;\n import org.apache.syncope.common.rest.api.beans.ExecSpecs;\n+import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationData;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.core.reference.DateToDateItemTransformer;\n import org.apache.syncope.fit.core.reference.DateToLongItemTransformer;\n@@ -317,7 +323,7 @@ public void purgePropagations() {\n     }\n \n     @Test\n-    public void propagationPolicy() throws InterruptedException {\n+    public void propagationPolicyRetry() throws InterruptedException {\n         SyncopeClient.nullPriorityAsync(ANY_OBJECT_SERVICE, true);\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n@@ -351,6 +357,213 @@ public void propagationPolicy() throws InterruptedException {\n         }\n     }\n \n+    private static String propagationPolicyOptimizeKey() {\n+        return POLICY_SERVICE.list(PolicyType.PROPAGATION).stream().\n+                filter(p -> \"optimize\".equals(p.getName())).\n+                findFirst().\n+                orElseGet(() -> {\n+                    PropagationPolicyTO policy = new PropagationPolicyTO();\n+                    policy.setName(\"optimize\");\n+                    policy.setFetchAroundProvisioning(false);\n+                    policy.setUpdateDelta(true);\n+                    return createPolicy(PolicyType.PROPAGATION, policy);\n+                }).getKey();\n+    }\n+\n+    @Test\n+    public void propagationPolicyOptimizeToLDAP() {\n+        String policyKey = propagationPolicyOptimizeKey();\n+\n+        ResourceTO ldap = RESOURCE_SERVICE.read(RESOURCE_NAME_LDAP);\n+        assertNull(ldap.getPropagationPolicy());\n+\n+        ldap.setPropagationPolicy(policyKey);\n+        RESOURCE_SERVICE.update(ldap);\n+\n+        try {\n+            // 0. create groups on LDAP\n+            GroupTO group1 = createGroup(GroupITCase.getSample(\"propagationPolicyOptimizeToLDAP\")).getEntity();\n+            GroupTO group2 = createGroup(GroupITCase.getSample(\"propagationPolicyOptimizeToLDAP\")).getEntity();\n+\n+            // 1a. create user on LDAP and verify success\n+            UserCR userCR = UserITCase.getUniqueSample(\"propagationPolicyOptimizeToLDAP@syncope.apache.org\");\n+            userCR.getAuxClasses().add(\"minimal group\");\n+            userCR.getPlainAttrs().add(attr(\"title\", \"title1\"));\n+            userCR.getMemberships().add(new MembershipTO.Builder(group1.getKey()).build());\n+            ProvisioningResult<UserTO> created = createUser(userCR);\n+            assertEquals(RESOURCE_NAME_LDAP, created.getPropagationStatuses().get(0).getResource());\n+            assertEquals(ExecStatus.SUCCESS, created.getPropagationStatuses().get(0).getStatus());\n+\n+            // 1b. read from LDAP the effective object\n+            ReconStatus status = RECONCILIATION_SERVICE.status(\n+                    new ReconQuery.Builder(AnyTypeKind.USER.name(), RESOURCE_NAME_LDAP).\n+                            anyKey(created.getEntity().getKey()).moreAttrsToGet(\"ldapGroups\").build());\n+            assertEquals(List.of(\"title1\"), status.getOnResource().getAttr(\"title\").get().getValues());\n+            assertEquals(\n+                    List.of(\"cn=\" + group1.getName() + \",ou=groups,o=isp\"),\n+                    status.getOnResource().getAttr(\"ldapGroups\").get().getValues());\n+\n+            // 1c. check the generated propagation data\n+            PagedResult<PropagationTaskTO> tasks = TASK_SERVICE.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                    resource(RESOURCE_NAME_LDAP).\n+                    anyTypeKind(AnyTypeKind.USER).entityKey(created.getEntity().getKey()).build());\n+            assertEquals(1, tasks.getSize());\n+\n+            PropagationData data = POJOHelper.deserialize(\n+                    tasks.getResult().get(0).getPropagationData(), PropagationData.class);\n+            assertNull(data.getAttributeDeltas());\n+\n+            TASK_SERVICE.delete(TaskType.PROPAGATION, tasks.getResult().get(0).getKey());\n+\n+            // 2a. update user on LDAP and verify success\n+            UserUR userUR = new UserUR.Builder(created.getEntity().getKey()).plainAttr(new AttrPatch.Builder(\n+                    new Attr.Builder(\"title\").values(\"title1\", \"title2\").build()).build()).\n+                    membership(new MembershipUR.Builder(group2.getKey()).build()).\n+                    build();\n+            ProvisioningResult<UserTO> updated = updateUser(userUR);\n+            assertEquals(RESOURCE_NAME_LDAP, updated.getPropagationStatuses().get(0).getResource());\n+            assertEquals(ExecStatus.SUCCESS, updated.getPropagationStatuses().get(0).getStatus());\n+\n+            // 2b. read from LDAP the effective object\n+            status = RECONCILIATION_SERVICE.status(\n+                    new ReconQuery.Builder(AnyTypeKind.USER.name(), RESOURCE_NAME_LDAP).\n+                            anyKey(created.getEntity().getKey()).moreAttrsToGet(\"ldapGroups\").build());\n+            assertEquals(\n+                    Set.of(\"title1\", \"title2\"),\n+                    new HashSet<>(status.getOnResource().getAttr(\"title\").get().getValues()));\n+            assertEquals(\n+                    Set.of(\"cn=\" + group1.getName() + \",ou=groups,o=isp\",\n+                            \"cn=\" + group2.getName() + \",ou=groups,o=isp\"),\n+                    new HashSet<>(status.getOnResource().getAttr(\"ldapGroups\").get().getValues()));\n+\n+            // 2c. check the generated propagation data\n+            tasks = TASK_SERVICE.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                    resource(RESOURCE_NAME_LDAP).\n+                    anyTypeKind(AnyTypeKind.USER).entityKey(created.getEntity().getKey()).build());\n+            assertEquals(1, tasks.getSize());\n+\n+            data = POJOHelper.deserialize(tasks.getResult().get(0).getPropagationData(), PropagationData.class);\n+            assertNotNull(data.getAttributeDeltas());\n+\n+            TASK_SERVICE.delete(TaskType.PROPAGATION, tasks.getResult().get(0).getKey());\n+        } finally {\n+            ldap.setPropagationPolicy(null);\n+            RESOURCE_SERVICE.update(ldap);\n+        }\n+    }\n+\n+    @Test\n+    public void propagationPolicyOptimizeToScriptedDB() {\n+        String policyKey = propagationPolicyOptimizeKey();\n+\n+        ResourceTO db = RESOURCE_SERVICE.read(RESOURCE_NAME_DBSCRIPTED);\n+        String beforePolicyKey = db.getPropagationPolicy();\n+        assertNotNull(beforePolicyKey);\n+\n+        db.setPropagationPolicy(policyKey);\n+\n+        // 0. create new schema and change resource mapping to include it\n+        PlainSchemaTO paperformat = new PlainSchemaTO();\n+        paperformat.setKey(\"paperformat\");\n+        paperformat.setMultivalue(true);\n+        SCHEMA_SERVICE.create(SchemaType.PLAIN, paperformat);\n+\n+        AnyTypeClassTO printer = ANY_TYPE_CLASS_SERVICE.read(\"minimal printer\");\n+        printer.getPlainSchemas().add(paperformat.getKey());\n+        ANY_TYPE_CLASS_SERVICE.update(printer);\n+\n+        Item paperformatItem = new Item();\n+        paperformatItem.setPurpose(MappingPurpose.PROPAGATION);\n+        paperformatItem.setIntAttrName(\"paperformat\");\n+        paperformatItem.setExtAttrName(\"paperformat\");\n+        db.getProvision(PRINTER).get().getMapping().add(paperformatItem);\n+        RESOURCE_SERVICE.update(db);\n+\n+        ProvisioningResult<AnyObjectTO> created = null;\n+        try {\n+            // 1a. create printer on db and verify success\n+            created = createAnyObject(AnyObjectITCase.getSample(\"ppOptimizeToDB\"));\n+            assertEquals(RESOURCE_NAME_DBSCRIPTED, created.getPropagationStatuses().get(0).getResource());\n+            assertEquals(ExecStatus.SUCCESS, created.getPropagationStatuses().get(0).getStatus());\n+\n+            // 1b. check the generated propagation data\n+            PagedResult<PropagationTaskTO> tasks = TASK_SERVICE.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                    resource(RESOURCE_NAME_DBSCRIPTED).\n+                    anyTypeKind(AnyTypeKind.ANY_OBJECT).entityKey(created.getEntity().getKey()).build());\n+            assertEquals(1, tasks.getSize());\n+\n+            PropagationData data = POJOHelper.deserialize(\n+                    tasks.getResult().get(0).getPropagationData(), PropagationData.class);\n+            assertNull(data.getAttributeDeltas());\n+\n+            TASK_SERVICE.delete(TaskType.PROPAGATION, tasks.getResult().get(0).getKey());\n+\n+            // 2a. update printer on db and verify success\n+            AnyObjectUR req = new AnyObjectUR.Builder(created.getEntity().getKey()).plainAttr(new AttrPatch.Builder(\n+                    new Attr.Builder(\"paperformat\").values(\"format1\", \"format2\").build()).build()).\n+                    build();\n+            ProvisioningResult<AnyObjectTO> updated = updateAnyObject(req);\n+            assertEquals(RESOURCE_NAME_DBSCRIPTED, updated.getPropagationStatuses().get(0).getResource());\n+            assertEquals(ExecStatus.SUCCESS, updated.getPropagationStatuses().get(0).getStatus());\n+\n+            // 2b. read from db the effective object\n+            JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+            List<String> values = queryForList(jdbcTemplate,\n+                    MAX_WAIT_SECONDS,\n+                    \"SELECT paper_format FROM testPRINTER_PAPERFORMAT WHERE printer_id=?\",\n+                    String.class,\n+                    created.getEntity().getKey());\n+            assertEquals(Set.of(\"format1\", \"format2\"), new HashSet<>(values));\n+\n+            // 2c. check the generated propagation data\n+            tasks = TASK_SERVICE.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                    resource(RESOURCE_NAME_DBSCRIPTED).\n+                    anyTypeKind(AnyTypeKind.ANY_OBJECT).entityKey(created.getEntity().getKey()).build());\n+            assertEquals(1, tasks.getSize());\n+\n+            data = POJOHelper.deserialize(tasks.getResult().get(0).getPropagationData(), PropagationData.class);\n+            assertNotNull(data.getAttributeDeltas());\n+\n+            TASK_SERVICE.delete(TaskType.PROPAGATION, tasks.getResult().get(0).getKey());\n+\n+            // 3a. update printer on db and verify success\n+            req = new AnyObjectUR.Builder(created.getEntity().getKey()).plainAttr(new AttrPatch.Builder(\n+                    new Attr.Builder(\"paperformat\").values(\"format1\", \"format3\").build()).build()).\n+                    build();\n+            updated = updateAnyObject(req);\n+            assertEquals(RESOURCE_NAME_DBSCRIPTED, updated.getPropagationStatuses().get(0).getResource());\n+            assertEquals(ExecStatus.SUCCESS, updated.getPropagationStatuses().get(0).getStatus());\n+\n+            // 3b. read from db the effective object\n+            values = queryForList(jdbcTemplate,\n+                    MAX_WAIT_SECONDS,\n+                    \"SELECT paper_format FROM testPRINTER_PAPERFORMAT WHERE printer_id=?\",\n+                    String.class,\n+                    created.getEntity().getKey());\n+            assertEquals(Set.of(\"format1\", \"format3\"), new HashSet<>(values));\n+\n+            // 3c. check the generated propagation data\n+            tasks = TASK_SERVICE.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                    resource(RESOURCE_NAME_DBSCRIPTED).\n+                    anyTypeKind(AnyTypeKind.ANY_OBJECT).entityKey(created.getEntity().getKey()).build());\n+            assertEquals(1, tasks.getSize());\n+\n+            data = POJOHelper.deserialize(tasks.getResult().get(0).getPropagationData(), PropagationData.class);\n+            assertNotNull(data.getAttributeDeltas());\n+\n+            TASK_SERVICE.delete(TaskType.PROPAGATION, tasks.getResult().get(0).getKey());\n+        } finally {\n+            Optional.ofNullable(created).map(c -> c.getEntity().getKey()).ifPresent(ANY_OBJECT_SERVICE::delete);\n+\n+            SCHEMA_SERVICE.delete(SchemaType.PLAIN, \"paperformat\");\n+\n+            db.setPropagationPolicy(beforePolicyKey);\n+            db.getProvision(PRINTER).ifPresent(provision -> provision.getMapping().\n+                    getItems().removeIf(item -> \"paperformat\".equals(item.getIntAttrName())));\n+            RESOURCE_SERVICE.update(db);\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE741() {\n         for (int i = 0; i < 3; i++) {\n@@ -526,9 +739,9 @@ public void issueSYNCOPE1430() throws ParseException {\n             assertEquals(1, tasks.getSize());\n \n             Set<Attribute> propagationAttrs = new HashSet<>();\n-            if (StringUtils.isNotBlank(tasks.getResult().get(0).getAttributes())) {\n-                propagationAttrs.addAll(List.of(\n-                        POJOHelper.deserialize(tasks.getResult().get(0).getAttributes(), Attribute[].class)));\n+            if (StringUtils.isNotBlank(tasks.getResult().get(0).getPropagationData())) {\n+                propagationAttrs.addAll(POJOHelper.deserialize(\n+                        tasks.getResult().get(0).getPropagationData(), PropagationData.class).getAttributes());\n             }\n \n             OffsetDateTime loginDate = LocalDate.parse(user.getPlainAttr(\"loginDate\").get().getValues().get(0)).\n@@ -698,9 +911,8 @@ public void issueSYNCOPE1567() {\n                     anyTypeKind(AnyTypeKind.USER).entityKey(userTO.getKey()).build());\n             assertEquals(1, tasks.getSize());\n \n-            Set<Attribute> propagationAttrs = Stream.of(\n-                    POJOHelper.deserialize(tasks.getResult().get(0).getAttributes(), Attribute[].class)).\n-                    collect(Collectors.toSet());\n+            Set<Attribute> propagationAttrs = POJOHelper.deserialize(\n+                    tasks.getResult().get(0).getPropagationData(), PropagationData.class).getAttributes();\n             Attribute attr = AttributeUtil.find(\"l\", propagationAttrs);\n             assertNotNull(attr);\n             assertNotNull(attr.getValue());"},{"sha":"2c4aa989666001d988fc999e6989359c2965ed41","filename":"fit/core-reference/src/test/resources/rest/UpdateScript.groovy","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FUpdateScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FUpdateScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frest%2FUpdateScript.groovy?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -32,15 +32,18 @@ import javax.ws.rs.core.Response\n //     of that attribute in the target object all of the values of that attribute in the input set.\n //   - REMOVE_ATTRIBUTE_VALUES: For each attribute that the input set contains, remove from the current values\n //     of that attribute in the target object any value that matches one of the values of the attribute from the input set.\n+//   - UPDATE_DELTA: Three input maps are provided: valuesToAdd, valuesToRemove and valuesToReplace\n+//     For each map key, perform the corresponding actions on attribute values\n \n // log: a handler to the Log facility\n //\n // objectClass: a String describing the Object class (__ACCOUNT__ / __GROUP__ / other)\n //\n // uid: a String representing the entry uid\n //\n-// attributes: an Attribute Map, containg the <String> attribute name as a key\n-// and the <List> attribute value(s) as value.\n+// attributes: an Attribute Map, containg the <String> attribute name as a key and the <List> attribute value(s) as value\n+// or\n+// valuesToAdd, valuesToRemove and valuesToReplace (for UPDATE_DELTA): similar data structure\n //\n // password: password string, clear text (only for UPDATE)\n //\n@@ -101,10 +104,9 @@ case \"UPDATE\":\n   return uid;\n   break\n \n-case \"ADD_ATTRIBUTE_VALUES\":\n+case \"UPDATE_DELTA\":\n   break\n \n-\n default:\n   break\n }\n\\ No newline at end of file"},{"sha":"f3a99ba2a1b8619da6cf015c67cc2d23c78cf308","filename":"fit/core-reference/src/test/resources/scriptedsql/UpdateScript.groovy","status":"modified","additions":26,"deletions":8,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fscriptedsql%2FUpdateScript.groovy?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -30,15 +30,18 @@ import groovy.sql.DataSet;\n //     of that attribute in the target object all of the values of that attribute in the input set.\n //   - REMOVE_ATTRIBUTE_VALUES: For each attribute that the input set contains, remove from the current values\n //     of that attribute in the target object any value that matches one of the values of the attribute from the input set.\n+//   - UPDATE_DELTA: Three input maps are provided: valuesToAdd, valuesToRemove and valuesToReplace\n+//     For each map key, perform the corresponding actions on attribute values\n \n // log: a handler to the Log facility\n //\n // objectClass: a String describing the Object class (__ACCOUNT__ / __GROUP__ / other)\n //\n // uid: a String representing the entry uid\n //\n-// attributes: an Attribute Map, containg the <String> attribute name as a key\n-// and the <List> attribute value(s) as value.\n+// attributes: an Attribute Map, containg the <String> attribute name as a key and the <List> attribute value(s) as value\n+// or\n+// valuesToAdd, valuesToRemove and valuesToReplace (for UPDATE_DELTA): similar data structure\n //\n // password: password string, clear text (only for UPDATE)\n //\n@@ -52,19 +55,34 @@ switch (action) {\n case \"UPDATE\":\n   if (attributes.get(\"LOCATION\").get(0) != null) {\n     sql.executeUpdate(\"UPDATE TESTPRINTER SET printername = ?, location = ?, lastmodification = ? where id = ?\", \n-      [attributes.get(\"PRINTERNAME\").get(0), \n+      [\n+        attributes.get(\"PRINTERNAME\").get(0), \n         attributes.get(\"LOCATION\").get(0), \n         new Date(), \n-        attributes.get(\"__NAME__\").get(0)])\n-    \n+        attributes.get(\"__NAME__\").get(0)\n+      ])\n+\n     return attributes.get(\"__NAME__\").get(0);\n   }\n   break\n \n-case \"ADD_ATTRIBUTE_VALUES\":\n+case \"UPDATE_DELTA\":\n+  if (valuesToAdd != null && valuesToAdd.containsKey(\"paperformat\")) {\n+    for (paperformat: valuesToAdd.get(\"paperformat\")) {\n+      sql.executeUpdate(\"INSERT INTO TESTPRINTER_PAPERFORMAT(printer_id, paper_format) VALUES(?, ?)\",\n+        [uid, paperformat])\n+    }\n+  }\n+  if (valuesToRemove != null && valuesToRemove.containsKey(\"paperformat\")) {\n+    for (paperformat: valuesToRemove.get(\"paperformat\")) {\n+      sql.executeUpdate(\"DELETE FROM TESTPRINTER_PAPERFORMAT WHERE printer_id = ? AND paper_format = ?\",\n+        [uid, paperformat])\n+    }    \n+  }\n+  \n+  return uid\n   break\n \n-\n default:\n   sql\n-}\n\\ No newline at end of file\n+}"},{"sha":"b8b882a0715dccb3af8daafc1e51cd7d5d0c854b","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -399,10 +399,10 @@ under the License.\n \n     <connid.version>1.5.1.0</connid.version>\n     <connid.soap.version>1.4.5</connid.soap.version>\n-    <connid.rest.version>1.0.6</connid.rest.version>\n-    <connid.database.version>2.2.8</connid.database.version>\n+    <connid.rest.version>1.0.7</connid.rest.version>\n+    <connid.database.version>2.2.9</connid.database.version>\n     <connid.csvdir.version>0.8.9</connid.csvdir.version>\n-    <connid.ldap.version>1.5.5</connid.ldap.version>\n+    <connid.ldap.version>1.5.6</connid.ldap.version>\n     <connid.ad.version>1.3.8</connid.ad.version>\n     <connid.googleapps.version>1.4.3</connid.googleapps.version>\n     <connid.azure.version>2.0.0</connid.azure.version>"},{"sha":"a262177682d568115c02e54d65926fe4cf3ca8f0","filename":"src/main/asciidoc/reference-guide/concepts/policies.adoc","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/47af7b55368583850e4064a324a4c73ccf649b0d/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/47af7b55368583850e4064a324a4c73ccf649b0d/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc?ref=47af7b55368583850e4064a324a4c73ccf649b0d","patch":"@@ -329,7 +329,11 @@ case of failures.\n \n When defining a propagation policy, the following information must be provided:\n \n-* pre-fetch - the default behavior to attempt to read upfront the object being propagated can be disabled\n+* fetch around provisioning - the default behavior is to attempt to read upfront the object being propagated (to ensure\n+it exists or not, depending on the actual operation scheduled to perform) and to read it again afterwards (to check the\n+effective results); this can be disabled\n+* update delta - in case of update, all object attributes are propagated by default; when enabled, only the changed\n+attributes will be instead propagated\n * max number of attempts\n * back-off strategy\n ** `FIXED` - pauses for a fixed period of time before continuing"}]}