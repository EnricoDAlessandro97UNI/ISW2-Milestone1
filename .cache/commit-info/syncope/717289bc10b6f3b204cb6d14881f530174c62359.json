{"sha":"717289bc10b6f3b204cb6d14881f530174c62359","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjcxNzI4OWJjMTBiNmYzYjIwNGNiNmQxNDg4MWY1MzAxNzRjNjIzNTk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-07T10:55:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-09T14:22:40Z"},"message":"Ensuring secure XSLT processing everywhere","tree":{"sha":"f4fba826c5d09d9ada90f132bf5472b9d0850b0d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f4fba826c5d09d9ada90f132bf5472b9d0850b0d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/717289bc10b6f3b204cb6d14881f530174c62359","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/717289bc10b6f3b204cb6d14881f530174c62359","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/717289bc10b6f3b204cb6d14881f530174c62359","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/717289bc10b6f3b204cb6d14881f530174c62359/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1edec313dde8e81da0e30dd639f7144f94a9d4ab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1edec313dde8e81da0e30dd639f7144f94a9d4ab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1edec313dde8e81da0e30dd639f7144f94a9d4ab"}],"stats":{"total":355,"additions":169,"deletions":186},"files":[{"sha":"d86a95d5f867ee0df964314216040f9f6735c88b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationExport.java","status":"modified","additions":3,"deletions":21,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -18,18 +18,12 @@\n  */\n package org.apache.syncope.client.cli.commands.configuration;\n \n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n import java.io.InputStream;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.TransformerException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.XMLUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.xml.sax.SAXException;\n \n public class ConfigurationExport extends AbstractConfigurationCommand {\n \n@@ -53,24 +47,12 @@ public void export() {\n                         input.firstParameter() + EXPORT_FILE_NAME);\n                 configurationResultManager.genericMessage(\n                         input.firstParameter() + EXPORT_FILE_NAME + \" successfully created\");\n-            } catch (final IOException ex) {\n-                LOG.error(\"Error exporting configuration\", ex);\n-                configurationResultManager.genericError(ex.getMessage());\n-            } catch (ParserConfigurationException | SAXException | TransformerConfigurationException ex) {\n-                LOG.error(\"Error exporting configuration\", ex);\n-                configurationResultManager.genericError(\n-                        \"Error creating \" + input.firstParameter() + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final TransformerException ex) {\n-                LOG.error(\"Error exporting configuration\", ex);\n-                if (ex.getCause() instanceof FileNotFoundException) {\n-                    configurationResultManager.genericError(\"Permission denied on \" + input.firstParameter());\n-                } else {\n-                    configurationResultManager.genericError(\n-                            \"Error creating \" + input.firstParameter() + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-                }\n             } catch (final SyncopeClientException ex) {\n                 LOG.error(\"Error exporting configuration\", ex);\n                 configurationResultManager.genericError(\"Error calling configuration service \" + ex.getMessage());\n+            } catch (final Exception ex) {\n+                LOG.error(\"Error exporting configuration\", ex);\n+                configurationResultManager.genericError(ex.getMessage());\n             }\n         } else {\n             configurationResultManager.commandOptionError(EXPORT_HELP_MESSAGE);"},{"sha":"cbbaff13521cebfa986f15b51064908ebd9ecbac","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportExportExecution.java","status":"modified","additions":8,"deletions":23,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExportExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExportExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportExportExecution.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -18,25 +18,19 @@\n  */\n package org.apache.syncope.client.cli.commands.report;\n \n-import java.io.IOException;\n import java.util.Arrays;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.xml.sax.SAXException;\n \n public class ReportExportExecution extends AbstractReportCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReportExportExecution.class);\n \n-    private static final String EXPORT_EXECUTION_HELP_MESSAGE\n-            = \"report --export-execution-result {EXECUTION-KEY} {EXECUTION-KEY} [...] {FORMAT}\\n\"\n+    private static final String EXPORT_EXECUTION_HELP_MESSAGE =\n+            \"report --export-execution-result {EXECUTION-KEY} {EXECUTION-KEY} [...] {FORMAT}\\n\"\n             + \"          Format: CSV / HTML / PDF / XML / RTF\";\n \n     private final Input input;\n@@ -50,28 +44,19 @@ public void export() {\n             final String[] parameters = Arrays.copyOf(input.getParameters(), input.parameterNumber() - 1);\n             for (final String parameter : parameters) {\n                 try {\n-                    final String result = reportSyncopeOperations.exportExecutionResult(\n-                            parameter, input.lastParameter());\n+                    String result = reportSyncopeOperations.exportExecutionResult(parameter, input.lastParameter());\n                     reportResultManager.genericMessage(result + \"created.\");\n-                } catch (final WebServiceException | SyncopeClientException ex) {\n-                    LOG.error(\"Error exporting execution\", ex);\n-                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                } catch (final WebServiceException | SyncopeClientException e) {\n+                    LOG.error(\"Error exporting execution\", e);\n+                    if (e.getMessage().startsWith(\"NotFound\")) {\n                         reportResultManager.notFoundError(\"Report\", parameter);\n                     } else {\n-                        reportResultManager.genericError(ex.getMessage());\n+                        reportResultManager.genericError(e.getMessage());\n                     }\n-                } catch (final NumberFormatException ex) {\n-                    LOG.error(\"Error exporting execution\", ex);\n-                    reportResultManager.numberFormatException(\"report\", parameter);\n-                } catch (IOException | ParserConfigurationException | SAXException | TransformerException e) {\n+                } catch (final Exception e) {\n                     LOG.error(\"Error exporting execution\", e);\n                     reportResultManager.genericError(\n                             \" - Error creating \" + \"export_\" + parameter + \" \" + e.getMessage());\n-                } catch (final IllegalArgumentException ex) {\n-                    LOG.error(\"Error exporting execution\", ex);\n-                    reportResultManager.typeNotValidError(\n-                            \"format\", input.firstParameter(),\n-                            CommandUtils.fromEnumToArray(ReportExecExportFormat.class));\n                 }\n                 break;\n             }"},{"sha":"17c6efad48db6f8e557f8718aa1e70afd71ccd38","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportSyncopeOperations.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -18,14 +18,11 @@\n  */\n package org.apache.syncope.client.cli.commands.report;\n \n-import java.io.IOException;\n import java.io.OutputStream;\n import java.io.SequenceInputStream;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.List;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.cli.SyncopeServices;\n import org.apache.syncope.client.cli.util.XMLUtils;\n@@ -34,7 +31,6 @@\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n-import org.xml.sax.SAXException;\n \n public class ReportSyncopeOperations {\n \n@@ -53,7 +49,7 @@ public List<ReportTO> list() {\n     }\n \n     public String exportExecutionResult(final String executionKey, final String reportExecExportFormat)\n-            throws TransformerException, SAXException, IOException, ParserConfigurationException {\n+            throws Exception {\n \n         ReportExecExportFormat format = ReportExecExportFormat.valueOf(reportExecExportFormat);\n         SequenceInputStream report = (SequenceInputStream) reportService.exportExecutionResult(executionKey, format)."},{"sha":"93754d683f23202c6962c6ddcef6f70d74691a18","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/XMLUtils.java","status":"modified","additions":14,"deletions":19,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXMLUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXMLUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXMLUtils.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -19,34 +19,29 @@\n package org.apache.syncope.client.cli.util;\n \n import java.io.File;\n-import java.io.IOException;\n import java.io.InputStream;\n-import java.io.StringReader;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n+import javax.xml.XMLConstants;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-import org.apache.cxf.helpers.IOUtils;\n-import org.xml.sax.InputSource;\n-import org.xml.sax.SAXException;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSParser;\n \n public final class XMLUtils {\n \n-    public static void createXMLFile(final InputStream sis, final String filePath)\n-            throws TransformerException, SAXException, IOException, ParserConfigurationException {\n-\n-        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n-        dbf.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+    public static void createXMLFile(final InputStream sis, final String filePath) throws Exception {\n+        DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n+        DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n+        LSInput lsinput = domImpl.createLSInput();\n+        lsinput.setByteStream(sis);\n+        LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n \n         TransformerFactory tf = TransformerFactory.newInstance();\n-        tf.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-        \n-        tf.newTransformer().\n-                transform(new DOMSource(dbf.newDocumentBuilder().\n-                        parse(new InputSource(new StringReader(IOUtils.toString(sis))))),\n-                        new StreamResult(new File(filePath)));\n+        tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+\n+        tf.newTransformer().transform(new DOMSource(parser.parse(lsinput)), new StreamResult(new File(filePath)));\n     }\n \n     private XMLUtils() {"},{"sha":"6e969be997d31e1d6d0c22ec1ac2988851bcba83","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/cocoon/XSLTTransformer.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -19,11 +19,11 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.regex.Pattern;\n+import javax.xml.XMLConstants;\n import javax.xml.transform.Source;\n import javax.xml.transform.Templates;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.sax.SAXResult;\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n@@ -151,7 +151,7 @@ protected void setSAXConsumer(final SAXConsumer consumer) {\n         if (this.parameters != null) {\n             final Transformer transformer = transformerHandler.getTransformer();\n \n-            this.parameters.forEach((name, values)-> {\n+            this.parameters.forEach((name, values) -> {\n                 // is valid XSLT parameter name\n                 if (XSLT_PARAMETER_NAME_PATTERN.matcher(name).matches()) {\n                     transformer.setParameter(name, values);\n@@ -181,7 +181,14 @@ public CacheKey constructCacheKey() {\n      * @return a new transformer factory\n      */\n     private static SAXTransformerFactory createNewSAXTransformerFactory() {\n-        return (SAXTransformerFactory) TransformerFactory.newInstance();\n+        SAXTransformerFactory transformerFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+        transformerFactory.setURIResolver((href, base) -> null);\n+        try {\n+            transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        } catch (TransformerConfigurationException e) {\n+            LOG.error(\"Could not enable secure XML processing\", e);\n+        }\n+        return transformerFactory;\n     }\n \n     @Override"},{"sha":"4909ed335ff6ff533700786045cd80668af90327","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -43,6 +43,7 @@\n import java.util.TreeSet;\n import javax.sql.DataSource;\n import javax.xml.bind.DatatypeConverter;\n+import javax.xml.XMLConstants;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerConfigurationException;\n@@ -360,8 +361,8 @@ public void export(\n         }\n \n         StreamResult streamResult = new StreamResult(os);\n-        final SAXTransformerFactory transformerFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n-        transformerFactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        SAXTransformerFactory transformerFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+        transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n \n         TransformerHandler handler = transformerFactory.newTransformerHandler();\n         Transformer serializer = handler.getTransformer();"},{"sha":"e4050b7ea26818ed00bb5002465c2ecb41381cfb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -27,8 +27,11 @@\n import java.util.zip.Deflater;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n+import javax.xml.XMLConstants;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n@@ -55,6 +58,18 @@ public class DefaultReportJobDelegate implements ReportJobDelegate {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReportJobDelegate.class);\n \n+    private static final SAXTransformerFactory TRANSFORMER_FACTORY;\n+\n+    static {\n+        TRANSFORMER_FACTORY = (SAXTransformerFactory) TransformerFactory.newInstance();\n+        TRANSFORMER_FACTORY.setURIResolver((href, base) -> null);\n+        try {\n+            TRANSFORMER_FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        } catch (TransformerConfigurationException e) {\n+            LOG.error(\"Could not enable secure XML processing\", e);\n+        }\n+    }\n+\n     /**\n      * Report DAO.\n      */\n@@ -121,9 +136,7 @@ public void execute(final String reportKey) throws JobExecutionException {\n         ZipOutputStream zos = new ZipOutputStream(baos);\n         zos.setLevel(Deflater.BEST_COMPRESSION);\n         try {\n-            SAXTransformerFactory tFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n-            tFactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-            handler = tFactory.newTransformerHandler();\n+            handler = TRANSFORMER_FACTORY.newTransformerHandler();\n             Transformer serializer = handler.getTransformer();\n             serializer.setOutputProperty(OutputKeys.ENCODING, StandardCharsets.UTF_8.name());\n             serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");"},{"sha":"44f9c8a688b0763f43543a86b9669be18c441880","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -21,15 +21,15 @@\n import java.io.StringWriter;\n import java.util.Map;\n import javax.sql.DataSource;\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.XMLConstants;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.staxutils.StaxUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CamelEntitlement;\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n@@ -153,11 +153,10 @@ private void loadRoutes(\n                 NodeList routeNodes;\n                 if (IS_JBOSS) {\n                     tf = TransformerFactory.newInstance();\n-                    tf.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-                    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n-                    dbFactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-                    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n-                    Document doc = dBuilder.parse(resource.getInputStream());\n+                    tf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+                    tf.setURIResolver((href, base) -> null);\n+\n+                    Document doc = StaxUtils.read(resource.getInputStream());\n \n                     routeNodes = doc.getDocumentElement().getElementsByTagName(\"route\");\n                 } else {"},{"sha":"09ae7be1c7c575406e9e4df9413ae811ed3f8152","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -77,6 +77,7 @@ public class SAML2ReaderWriter {\n \n     static {\n         TRANSFORMER_FACTORY = TransformerFactory.newInstance();\n+        TRANSFORMER_FACTORY.setURIResolver((href, base) -> null);\n         try {\n             TRANSFORMER_FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n         } catch (TransformerConfigurationException e) {\n@@ -103,14 +104,14 @@ public void init() {\n         // Try to load a signature algorithm\n         if (loader.getSignatureAlgorithm() != null) {\n             SignatureAlgorithm loadedSignatureAlgorithm =\n-                SignatureAlgorithm.valueOf(loader.getSignatureAlgorithm());\n+                    SignatureAlgorithm.valueOf(loader.getSignatureAlgorithm());\n             if (loadedSignatureAlgorithm != null) {\n                 sigAlgo = loadedSignatureAlgorithm.getAlgorithm();\n                 jceSigAlgo = JCEMapper.translateURItoJCEID(sigAlgo);\n             }\n             if (jceSigAlgo == null) {\n                 LOG.warn(\"Signature algorithm {} is not valid. Using default algorithm instead.\",\n-                         loader.getSignatureAlgorithm());\n+                        loader.getSignatureAlgorithm());\n                 sigAlgo = null;\n             }\n         }"},{"sha":"09f7b02edfde244d09b83ca255e1877e6b502f20","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":38,"deletions":33,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -59,6 +59,40 @@\n \n public class ReportITCase extends AbstractITCase {\n \n+    protected static String execReport(final String reportKey) {\n+        ReportTO reportTO = reportService.read(reportKey);\n+        assertNotNull(reportTO);\n+        assertNotNull(reportTO.getExecutions());\n+\n+        int preExecSize = reportTO.getExecutions().size();\n+        ExecTO exec = reportService.execute(new ExecuteQuery.Builder().key(reportKey).build());\n+        assertNotNull(exec);\n+\n+        int i = 0;\n+        int maxit = 50;\n+\n+        // wait for completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            reportTO = reportService.read(reportKey);\n+\n+            assertNotNull(reportTO);\n+            assertNotNull(reportTO.getExecutions());\n+\n+            i++;\n+        } while (preExecSize == reportTO.getExecutions().size() && i < maxit);\n+        if (i == maxit) {\n+            fail(\"Timeout when executing report \" + reportKey);\n+        }\n+        exec = reportTO.getExecutions().get(reportTO.getExecutions().size() - 1);\n+        assertEquals(ReportExecStatus.SUCCESS.name(), exec.getStatus());\n+        return exec.getKey();\n+    }\n+\n     @Test\n     public void getReportletConfs() {\n         Set<String> reportletConfs = syncopeService.platform().\n@@ -201,35 +235,6 @@ public void delete() {\n         }\n     }\n \n-    private String execute(final String reportKey) {\n-        ExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportKey).build());\n-        assertNotNull(execution);\n-\n-        int i = 0;\n-        int maxit = 50;\n-\n-        ReportTO reportTO;\n-\n-        // wait for report execution completion (executions incremented)\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            reportTO = reportService.read(reportKey);\n-\n-            assertNotNull(reportTO);\n-            assertNotNull(reportTO.getExecutions());\n-\n-            i++;\n-        } while (reportTO.getExecutions().isEmpty()\n-                || (!ReportExecStatus.SUCCESS.name().equals(reportTO.getExecutions().get(0).getStatus()) && i < maxit));\n-        assertEquals(ReportExecStatus.SUCCESS.name(), reportTO.getExecutions().get(0).getStatus());\n-\n-        return reportTO.getExecutions().get(0).getKey();\n-    }\n-\n     private void checkExport(final String execKey, final ReportExecExportFormat fmt) throws IOException {\n         Response response = reportService.exportExecutionResult(execKey, fmt);\n         assertNotNull(response);\n@@ -254,7 +259,7 @@ public void executeAndExport() throws IOException {\n         assertNotNull(reportTO);\n \n         try {\n-            execute(reportTO.getKey());\n+            execReport(reportTO.getKey());\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.Scheduling, e.getType());\n@@ -264,7 +269,7 @@ public void executeAndExport() throws IOException {\n         reportTO.setActive(true);\n         reportService.update(reportTO);\n \n-        String execKey = execute(reportTO.getKey());\n+        String execKey = execReport(reportTO.getKey());\n \n         checkExport(execKey, ReportExecExportFormat.XML);\n         checkExport(execKey, ReportExecExportFormat.HTML);\n@@ -288,7 +293,7 @@ public void deleteExecutions() {\n         reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n \n-        String execKey = execute(reportTO.getKey());\n+        String execKey = execReport(reportTO.getKey());\n         assertNotNull(execKey);\n \n         try {\n@@ -336,7 +341,7 @@ public void auditReport() throws IOException {\n             report.setTemplate(\"sample\");\n             report = createReport(report);\n \n-            String execKey = execute(report.getKey());\n+            String execKey = execReport(report.getKey());\n             checkExport(execKey, ReportExecExportFormat.XML);\n \n             report = reportService.read(report.getKey());"},{"sha":"68bbb5168020ed300959f5aff26443438aab93fc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportTemplateITCase.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n@@ -150,6 +151,41 @@ public void crud() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void safeTemplate() throws IOException {\n+        Response response = reportTemplateService.getFormat(\"sample\", ReportTemplateFormat.HTML);\n+        String before = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8);\n+        assertNotNull(before);\n+\n+        String execKey = ReportITCase.execReport(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n+        assertNotNull(execKey);\n+        response = reportService.exportExecutionResult(execKey, ReportExecExportFormat.HTML);\n+        String result = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8);\n+        assertNotNull(result);\n+        assertTrue(result.startsWith(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n+                + \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \"\n+                + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"));\n+\n+        String malicious = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n+                + \"<!DOCTYPE xsl:stylesheet \"\n+                + \"[<!ENTITY file SYSTEM \\\"webapps/syncope/WEB-INF/classes/security.properties\\\">]>\\n\"\n+                + \"<xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http://www.w3.org/1999/XSL/Transform\\\">\\n\"\n+                + \"    <xsl:template match=\\\"/\\\">&file;</xsl:template>\\n\"\n+                + \"</xsl:stylesheet>\";\n+        try {\n+            reportTemplateService.setFormat(\"sample\", ReportTemplateFormat.HTML,\n+                    IOUtils.toInputStream(malicious, StandardCharsets.UTF_8));\n+\n+            response = reportService.exportExecutionResult(execKey, ReportExecExportFormat.HTML);\n+            result = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8);\n+            assertNotNull(result);\n+            assertTrue(result.isEmpty());\n+        } finally {\n+            reportTemplateService.setFormat(\"sample\", ReportTemplateFormat.HTML,\n+                    IOUtils.toInputStream(before, StandardCharsets.UTF_8));\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE866() {\n         ReportTemplateTO reportTemplateTO = new ReportTemplateTO();"},{"sha":"a530867cabc5966d906e31b629a25e0a13cb7457","filename":"installer/src/main/java/org/apache/syncope/installer/processes/ArchetypeProcess.java","status":"modified","additions":8,"deletions":27,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -21,16 +21,12 @@\n import org.apache.syncope.installer.utilities.FileSystemUtils;\n import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.File;\n-import java.io.IOException;\n import java.util.Properties;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n import org.apache.syncope.installer.files.ConsolePom;\n import org.apache.syncope.installer.files.CorePom;\n import org.apache.syncope.installer.files.ParentPom;\n import org.apache.syncope.installer.utilities.InstallLog;\n import org.apache.syncope.installer.utilities.MavenUtils;\n-import org.xml.sax.SAXException;\n \n public class ArchetypeProcess extends BaseProcess {\n \n@@ -65,30 +61,15 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n         InstallLog.initialize(installPath, handler);\n         MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n         File customMavenProxySettings = null;\n-        try {\n-            if (isProxyEnabled && mavenProxyAutoconf) {\n-                customMavenProxySettings = MavenUtils.createSettingsWithProxy(installPath, proxyHost, proxyPort,\n-                        proxyUser, proxyPwd);\n+        if (isProxyEnabled && mavenProxyAutoconf) {\n+            try {\n+                customMavenProxySettings =\n+                        MavenUtils.createSettingsWithProxy(installPath, proxyHost, proxyPort, proxyUser, proxyPwd);\n+            } catch (Exception e) {\n+                StringBuilder message = new StringBuilder(\"Error during creation of custom Maven settings.xml\");\n+                handler.emitError(message.toString(), e.getMessage());\n+                InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n             }\n-        } catch (IOException e) {\n-            StringBuilder message = new StringBuilder(\"I/O error during creation of Maven custom settings.xml\");\n-            handler.emitError(message.toString(), e.getMessage());\n-            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n-        } catch (ParserConfigurationException e) {\n-            StringBuilder message = new StringBuilder(\n-                    \"Parser configuration error during creation of Maven custom settings.xml\");\n-            handler.emitError(message.toString(), e.getMessage());\n-            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n-        } catch (TransformerException e) {\n-            StringBuilder message = new StringBuilder(\n-                    \"Transformer error during creation of Maven custom settings.xml\");\n-            handler.emitError(message.toString(), e.getMessage());\n-            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n-        } catch (SAXException e) {\n-            StringBuilder message = new StringBuilder(\n-                    \"XML parsing error during creation of Maven custom settings.xml\");\n-            handler.emitError(message.toString(), e.getMessage());\n-            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n         }\n \n         handler.logOutput(\"########################## IMPORTANT ##########################\", true);"},{"sha":"0429c3047bfc2d71d5df6a2da9e9c1b29b241130","filename":"installer/src/main/java/org/apache/syncope/installer/processes/ContainerProcess.java","status":"modified","additions":7,"deletions":25,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -21,10 +21,7 @@\n import org.apache.syncope.installer.utilities.FileSystemUtils;\n import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.File;\n-import java.io.IOException;\n import java.util.Properties;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n import org.apache.syncope.installer.containers.Glassfish;\n import org.apache.syncope.installer.containers.Tomcat;\n import org.apache.syncope.installer.containers.jboss.JBoss;\n@@ -35,7 +32,6 @@\n import org.apache.syncope.installer.files.MasterDomainXml;\n import org.apache.syncope.installer.utilities.InstallLog;\n import org.apache.syncope.installer.utilities.MavenUtils;\n-import org.xml.sax.SAXException;\n \n public final class ContainerProcess extends BaseProcess {\n \n@@ -76,6 +72,7 @@ public final class ContainerProcess extends BaseProcess {\n     private String logsDirectory;\n \n     private String bundlesDirectory;\n+\n     private String modelerDirectory;\n \n     private boolean withDataSource;\n@@ -199,30 +196,15 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n \n         MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n         File customMavenProxySettings = null;\n-        try {\n-            if (isProxyEnabled && mavenProxyAutoconf) {\n+        if (isProxyEnabled && mavenProxyAutoconf) {\n+            try {\n                 customMavenProxySettings = MavenUtils.createSettingsWithProxy(\n                         installPath, proxyHost, proxyPort, proxyUser, proxyPwd);\n+            } catch (Exception e) {\n+                StringBuilder message = new StringBuilder(\"Error during creation of custom Maven settings.xml\");\n+                handler.emitError(message.toString(), e.getMessage());\n+                InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n             }\n-        } catch (IOException e) {\n-            StringBuilder message = new StringBuilder(\"I/O error during creation of Maven custom settings.xml\");\n-            handler.emitError(message.toString(), e.getMessage());\n-            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n-        } catch (ParserConfigurationException e) {\n-            StringBuilder message = new StringBuilder(\n-                    \"Parser configuration error during creation of Maven custom settings.xml\");\n-            handler.emitError(message.toString(), e.getMessage());\n-            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n-        } catch (TransformerException e) {\n-            StringBuilder message = new StringBuilder(\n-                    \"Transformer error during creation of Maven custom settings.xml\");\n-            handler.emitError(message.toString(), e.getMessage());\n-            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n-        } catch (SAXException e) {\n-            StringBuilder message = new StringBuilder(\n-                    \"XML parsing error during creation of Maven custom settings.xml\");\n-            handler.emitError(message.toString(), e.getMessage());\n-            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n         }\n \n         Properties mvnProperties = new Properties();"},{"sha":"e89cdacdc59636a4dbe133b1ee30238d249156b1","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -30,6 +30,7 @@\n import java.io.OutputStreamWriter;\n import java.io.PrintWriter;\n import java.nio.charset.Charset;\n+import javax.xml.XMLConstants;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerException;\n@@ -135,7 +136,7 @@ public void appendToFile(final File file, final String content) {\n \n     public static void writeXML(final Document doc, final OutputStream out) throws IOException, TransformerException {\n         final TransformerFactory factory = TransformerFactory.newInstance();\n-        factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n         final Transformer transformer = factory.newTransformer();\n         transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"no\");\n         transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");"},{"sha":"b704247e62fe21439527457cc8447fb29d91c4c1","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/MavenUtils.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/717289bc10b6f3b204cb6d14881f530174c62359/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/717289bc10b6f3b204cb6d14881f530174c62359/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java?ref=717289bc10b6f3b204cb6d14881f530174c62359","patch":"@@ -20,20 +20,14 @@\n \n import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n-import java.io.IOException;\n import java.io.PrintStream;\n import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Properties;\n-\n-import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerException;\n-\n import org.apache.commons.io.FileUtils;\n import org.apache.maven.shared.invoker.DefaultInvocationRequest;\n import org.apache.maven.shared.invoker.DefaultInvoker;\n@@ -47,7 +41,10 @@\n import org.jasypt.digest.StandardStringDigester;\n import org.w3c.dom.Document;\n import org.w3c.dom.Element;\n-import org.xml.sax.SAXException;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSInput;\n+import org.w3c.dom.ls.LSParser;\n \n public class MavenUtils {\n \n@@ -81,7 +78,7 @@ public void archetypeGenerate(\n         request.setBatchMode(true);\n         final Properties properties =\n                 archetypeProperties(archetypeVersion, groupId, artifactId, secretKey,\n-                                    anonymousKey, jwsKey, adminPassword);\n+                        anonymousKey, jwsKey, adminPassword);\n         request.setProperties(properties);\n         if (customSettingsFile != null && FileUtils.sizeOf(customSettingsFile) > 0) {\n             request.setUserSettingsFile(customSettingsFile);\n@@ -183,19 +180,21 @@ private InvocationResult invoke(final InvocationRequest request, final String pa\n     }\n \n     public static File createSettingsWithProxy(final String path, final String proxyHost, final String proxyPort,\n-            final String proxyUser, final String proxyPassword) throws IOException, ParserConfigurationException,\n-            TransformerException, SAXException {\n+            final String proxyUser, final String proxyPassword) throws Exception {\n+\n         final File settingsXML = new File(System.getProperty(MAVEN_HOME_PROPERTY) + (System.getProperty(\n                 MAVEN_HOME_PROPERTY).endsWith(\"/\") ? \"conf/settings.xml\" : \"/conf/settings.xml\"));\n         final File tempSettingsXML = new File(path + (path.endsWith(\"/\") ? \"settings_temp.xml\" : \"/settings_temp.xml\"));\n         if (settingsXML.canRead() && !tempSettingsXML.exists()) {\n             tempSettingsXML.createNewFile();\n \n-            final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n-            dbf.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-            final DocumentBuilder builder = dbf.newDocumentBuilder();\n+            DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n+            DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n+            LSInput lsinput = domImpl.createLSInput();\n+            lsinput.setByteStream(new FileInputStream(settingsXML));\n+            LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n             // parse settings.xml\n-            final Document settings = builder.parse(settingsXML);\n+            final Document settings = parser.parse(lsinput);\n \n             final Element proxies = (Element) settings.getDocumentElement().getElementsByTagName(\"proxies\").item(0);\n "}]}