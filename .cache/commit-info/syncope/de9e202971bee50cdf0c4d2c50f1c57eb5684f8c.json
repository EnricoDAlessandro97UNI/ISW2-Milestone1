{"sha":"de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRlOWUyMDI5NzFiZWU1MGNkZjBjNGQyYzUwZjFjNTdlYjU2ODRmOGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-11T09:31:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-11T09:31:14Z"},"message":"Cleaning up in preparation to SYNCOPE-1152","tree":{"sha":"cd6a1e78fe4799bcb16e9b4e612d9fe42c5c3911","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cd6a1e78fe4799bcb16e9b4e612d9fe42c5c3911"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bd5c1af88ab99432577cfa826b2a3ea6dc655418","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bd5c1af88ab99432577cfa826b2a3ea6dc655418","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bd5c1af88ab99432577cfa826b2a3ea6dc655418"}],"stats":{"total":296,"additions":85,"deletions":211},"files":[{"sha":"9755e1f2f3e5af5506cc32ce3afa25ded5c0264d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -263,24 +263,15 @@ public boolean evaluate(final String ownedRealm) {\n \n     public abstract TO read(String key);\n \n-    public abstract int count(String realm);\n-\n     public abstract ProvisioningResult<TO> create(TO anyTO, boolean nullPriorityAsync);\n \n     public abstract ProvisioningResult<TO> update(P anyPatch, boolean nullPriorityAsync);\n \n     public abstract ProvisioningResult<TO> delete(String key, boolean nullPriorityAsync);\n \n-    public abstract List<TO> list(\n-            int page, int size, List<OrderByClause> orderBy,\n-            String realm,\n-            boolean details);\n-\n-    public abstract List<TO> search(\n-            SearchCond searchCondition,\n+    public abstract Pair<Integer, List<TO>> search(\n+            SearchCond searchCond,\n             int page, int size, List<OrderByClause> orderBy,\n             String realm,\n             boolean details);\n-\n-    public abstract int searchCount(SearchCond searchCondition, String realm);\n }"},{"sha":"8cab1aae24fe0ba0437fccebd110b4cb5d81aa6c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":9,"deletions":31,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -90,22 +90,12 @@ public AnyObjectTO read(final String key) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public int count(final String realm) {\n-        throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n-    }\n-\n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<AnyObjectTO> list(\n+    public Pair<Integer, List<AnyObjectTO>> search(\n+            final SearchCond searchCond,\n             final int page, final int size, final List<OrderByClause> orderBy,\n-            final String realm, final boolean details) {\n-\n-        throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n-    }\n+            final String realm,\n+            final boolean details) {\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public int searchCount(final SearchCond searchCond, final String realm) {\n         if (searchCond.hasAnyTypeCond() == null) {\n             throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n         }\n@@ -114,32 +104,20 @@ public int searchCount(final SearchCond searchCond, final String realm) {\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.SEARCH.getFor(searchCond.hasAnyTypeCond())),\n                 realm);\n \n-        return searchDAO.count(effectiveRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n-    }\n+        int count = searchDAO.count(effectiveRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<AnyObjectTO> search(final SearchCond searchCond, final int page, final int size,\n-            final List<OrderByClause> orderBy, final String realm, final boolean details) {\n-\n-        if (searchCond.hasAnyTypeCond() == null) {\n-            throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n-        }\n-\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(AnyEntitlement.SEARCH.getFor(searchCond.hasAnyTypeCond())),\n-                realm);\n-\n-        List<AnyObject> matchingAnyObjects = searchDAO.search(\n+        List<AnyObject> matching = searchDAO.search(\n                 effectiveRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n-        return CollectionUtils.collect(matchingAnyObjects, new Transformer<AnyObject, AnyObjectTO>() {\n+        List<AnyObjectTO> result = CollectionUtils.collect(matching, new Transformer<AnyObject, AnyObjectTO>() {\n \n             @Transactional(readOnly = true)\n             @Override\n             public AnyObjectTO transform(final AnyObject input) {\n                 return binder.getAnyObjectTO(input, details);\n             }\n         }, new ArrayList<AnyObjectTO>());\n+\n+        return Pair.of(count, result);\n     }\n \n     @Override"},{"sha":"4420d4d791471b61e97f185ce32ec127d20f72f3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":12,"deletions":38,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -176,56 +176,30 @@ public TypeExtensionTO readTypeExtension(final String key, final String anyTypeK\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     @Override\n-    public int count(final String realm) {\n-        return groupDAO.count(RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm));\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<GroupTO> list(\n+    public Pair<Integer, List<GroupTO>> search(\n+            final SearchCond searchCond,\n             final int page, final int size, final List<OrderByClause> orderBy,\n-            final String realm, final boolean details) {\n+            final String realm,\n+            final boolean details) {\n \n-        return CollectionUtils.collect(groupDAO.findAll(\n+        int count = searchDAO.count(\n                 RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-                page, size, orderBy),\n-                new Transformer<Group, GroupTO>() {\n+                searchCond == null ? groupDAO.getAllMatchingCond() : searchCond, AnyTypeKind.GROUP);\n \n-            @Transactional(readOnly = true)\n-            @Override\n-            public GroupTO transform(final Group input) {\n-                return binder.getGroupTO(input, details);\n-            }\n-        }, new ArrayList<GroupTO>());\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public int searchCount(final SearchCond searchCondition, final String realm) {\n-        return searchDAO.count(\n-                RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-                searchCondition, AnyTypeKind.GROUP);\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<GroupTO> search(final SearchCond searchCondition, final int page, final int size,\n-            final List<OrderByClause> orderBy, final String realm, final boolean details) {\n-\n-        List<Group> matchingGroups = searchDAO.search(\n+        List<Group> matching = searchDAO.search(\n                 RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-                searchCondition, page, size, orderBy, AnyTypeKind.GROUP);\n-        return CollectionUtils.collect(matchingGroups, new Transformer<Group, GroupTO>() {\n+                searchCond == null ? groupDAO.getAllMatchingCond() : searchCond,\n+                page, size, orderBy, AnyTypeKind.GROUP);\n+        List<GroupTO> result = CollectionUtils.collect(matching, new Transformer<Group, GroupTO>() {\n \n             @Transactional(readOnly = true)\n             @Override\n             public GroupTO transform(final Group input) {\n                 return binder.getGroupTO(input, details);\n             }\n         }, new ArrayList<GroupTO>());\n+\n+        return Pair.of(count, result);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_CREATE + \"')\")"},{"sha":"ffca88bacaeddaa0ee4a28a0b651c6a0822301a5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":14,"deletions":40,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -92,33 +92,6 @@ public Date findLastChange(final String key) {\n         return etag;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public int count(final String realm) {\n-        return userDAO.count(RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm));\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<UserTO> list(\n-            final int page, final int size, final List<OrderByClause> orderBy,\n-            final String realm, final boolean details) {\n-\n-        return CollectionUtils.collect(userDAO.findAll(RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm), page, size, orderBy),\n-                new Transformer<User, UserTO>() {\n-\n-            @Transactional(readOnly = true)\n-            @Override\n-            public UserTO transform(final User input) {\n-                return binder.returnUserTO(binder.getUserTO(input, details));\n-            }\n-        }, new ArrayList<UserTO>());\n-    }\n-\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public Pair<String, UserTO> selfRead() {\n@@ -137,29 +110,30 @@ public UserTO read(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n-    public int searchCount(final SearchCond searchCondition, final String realm) {\n-        return searchDAO.count(RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n-                searchCondition, AnyTypeKind.USER);\n-    }\n+    public Pair<Integer, List<UserTO>> search(\n+            final SearchCond searchCond,\n+            final int page, final int size, final List<OrderByClause> orderBy,\n+            final String realm,\n+            final boolean details) {\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n-    @Transactional(readOnly = true)\n-    @Override\n-    public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n-            final List<OrderByClause> orderBy, final String realm, final boolean details) {\n+        int count = searchDAO.count(RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n+                searchCond == null ? userDAO.getAllMatchingCond() : searchCond, AnyTypeKind.USER);\n \n-        List<User> matchingUsers = searchDAO.search(RealmUtils.getEffective(\n+        List<User> matching = searchDAO.search(RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n-                searchCondition, page, size, orderBy, AnyTypeKind.USER);\n-        return CollectionUtils.collect(matchingUsers, new Transformer<User, UserTO>() {\n+                searchCond == null ? userDAO.getAllMatchingCond() : searchCond,\n+                page, size, orderBy, AnyTypeKind.USER);\n+        List<UserTO> result = CollectionUtils.collect(matching, new Transformer<User, UserTO>() {\n \n             @Transactional(readOnly = true)\n             @Override\n             public UserTO transform(final User input) {\n                 return binder.returnUserTO(binder.getUserTO(input, details));\n             }\n         }, new ArrayList<UserTO>());\n+\n+        return Pair.of(count, result);\n     }\n \n     @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")"},{"sha":"c161ee72b40478a90c5d67805137f5118ceca94a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":6,"deletions":16,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -20,8 +20,7 @@\n \n import java.util.Date;\n import java.util.List;\n-import java.util.Set;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n@@ -57,6 +56,11 @@\n \n     List<A> findByResource(ExternalResource resource);\n \n+    /**\n+     * @return the search condition to match all entities\n+     */\n+    SearchCond getAllMatchingCond();\n+\n     /**\n      * @return the total number of any objects of type {@link A}\n      */\n@@ -71,22 +75,8 @@\n      */\n     List<A> findAll(int page, int itemsPerPage);\n \n-    /**\n-     * Find any objects visible from the given admin realms, according to given page and items per page, sorted as\n-     * required.\n-     *\n-     * @param adminRealms admin realms\n-     * @param page search result page\n-     * @param itemsPerPage items per search result page\n-     * @param orderBy ordering clauses\n-     * @return any objects of type {@link A} matching the provided conditions\n-     */\n-    List<A> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n-\n     <S extends Schema> AllowedSchemas<S> findAllowedSchemas(A any, Class<S> reference);\n \n-    int count(Set<String> adminRealms);\n-\n     A save(A any);\n \n     void delete(String key);"},{"sha":"6ef6826458606a2b26211cfbb8711fb1d8b79b36","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":3,"deletions":28,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -39,14 +39,12 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.persistence.api.dao.AllowedSchemas;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -80,8 +78,6 @@\n \n     private DerSchemaDAO derSchemaDAO;\n \n-    private AnySearchDAO searchDAO;\n-\n     private DynRealmDAO dynRealmDAO;\n \n     private AnyUtils anyUtils;\n@@ -104,15 +100,6 @@ private DerSchemaDAO derSchemaDAO() {\n         return derSchemaDAO;\n     }\n \n-    protected AnySearchDAO searchDAO() {\n-        synchronized (this) {\n-            if (searchDAO == null) {\n-                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);\n-            }\n-        }\n-        return searchDAO;\n-    }\n-\n     protected DynRealmDAO dynRealmDAO() {\n         synchronized (this) {\n             if (dynRealmDAO == null) {\n@@ -461,20 +448,13 @@ public List<A> findByResource(final ExternalResource resource) {\n         return query.getResultList();\n     }\n \n-    private SearchCond getAllMatchingCond() {\n+    @Override\n+    public SearchCond getAllMatchingCond() {\n         AnyCond idCond = new AnyCond(AttributeCond.Type.ISNOTNULL);\n         idCond.setSchema(\"id\");\n         return SearchCond.getLeafCond(idCond);\n     }\n \n-    @Override\n-    public List<A> findAll(final Set<String> adminRealms,\n-            final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n-\n-        return searchDAO().search(adminRealms, getAllMatchingCond(), page, itemsPerPage, orderBy,\n-                anyUtils().getAnyTypeKind());\n-    }\n-\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     @SuppressWarnings(\"unchecked\")\n@@ -533,11 +513,6 @@ public <S extends Schema> AllowedSchemas<S> findAllowedSchemas(final A any, fina\n         return result;\n     }\n \n-    @Override\n-    public final int count(final Set<String> adminRealms) {\n-        return searchDAO().count(adminRealms, getAllMatchingCond(), anyUtils().getAnyTypeKind());\n-    }\n-\n     @Override\n     public A save(final A any) {\n         return entityManager().merge(any);\n@@ -569,7 +544,7 @@ public List<String> findDynRealms(final String key) {\n             DynRealm dynRealm = dynRealmDAO().find(actualKey);\n             if (dynRealm == null) {\n                 LOG.error(\"Could not find dynRealm with id {}, even though returned by the native query\", actualKey);\n-            } else if (!result.contains(dynRealm)) {\n+            } else if (!result.contains(actualKey)) {\n                 result.add(actualKey);\n             }\n         }"},{"sha":"e4e34a3b0d15c50fd73ed2d371a25820e2ef9c2f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -89,6 +89,8 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n \n     private AnyObjectDAO anyObjectDAO;\n \n+    private AnySearchDAO searchDAO;\n+\n     private AnySearchDAO jpaAnySearchDAO;\n \n     private UserDAO userDAO() {\n@@ -109,6 +111,15 @@ private AnyObjectDAO anyObjectDAO() {\n         return anyObjectDAO;\n     }\n \n+    private AnySearchDAO searchDAO() {\n+        synchronized (this) {\n+            if (searchDAO == null) {\n+                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);\n+            }\n+        }\n+        return searchDAO;\n+    }\n+\n     private AnySearchDAO jpaAnySearchDAO() {\n         synchronized (this) {\n             if (jpaAnySearchDAO == null) {"},{"sha":"18172c5f1d2086791134fe5cb6616ce3658a2486","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -22,7 +22,6 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n \n-import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -45,12 +44,6 @@ public class AnyObjectTest extends AbstractTest {\n     @Autowired\n     private RealmDAO realmDAO;\n \n-    @Test\n-    public void findAll() {\n-        List<AnyObject> list = anyObjectDAO.findAll(1, 100);\n-        assertFalse(list.isEmpty());\n-    }\n-\n     @Test\n     public void find() {\n         AnyObject anyObject = anyObjectDAO.find(\"8559d14d-58c2-46eb-a2d4-a7d35161e8f8\");"},{"sha":"e5dcdd45e6d0de912ead98c11a28395ed0f45889","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -23,10 +23,8 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -36,7 +34,6 @@\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -61,28 +58,27 @@ public void findAll() {\n \n     @Test\n     public void count() {\n-        Integer count = userDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n+        Integer count = userDAO.count();\n         assertNotNull(count);\n         assertEquals(5, count, 0);\n     }\n \n     @Test\n     public void findAllByPageAndSize() {\n         // get first page\n-        List<User> list = userDAO.findAll(\n-                SyncopeConstants.FULL_ADMIN_REALMS, 1, 2, Collections.<OrderByClause>emptyList());\n+        List<User> list = userDAO.findAll(1, 2);\n         assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get second page\n-        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 2, Collections.<OrderByClause>emptyList());\n+        list = userDAO.findAll(2, 2);\n         assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get second page with uncomplete set\n-        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 3, Collections.<OrderByClause>emptyList());\n+        list = userDAO.findAll(2, 3);\n         assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get unexistent page\n-        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 3, 2, Collections.<OrderByClause>emptyList());\n+        list = userDAO.findAll(3, 2);\n         assertEquals(\"did not get expected number of users\", 1, list.size());\n     }\n "},{"sha":"2cc241373bb2789596e4ae85251e37a4230e43ac","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":20,"deletions":28,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.util.Date;\n+import java.util.List;\n import java.util.Set;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n@@ -115,34 +117,24 @@ public TO read(final String key) {\n     public PagedResult<TO> search(final AnyQuery anyQuery) {\n         String realm = StringUtils.prependIfMissing(anyQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n \n-        if (StringUtils.isBlank(anyQuery.getFiql())) {\n-            return buildPagedResult(\n-                    getAnyLogic().list(\n-                            anyQuery.getPage(),\n-                            anyQuery.getSize(),\n-                            getOrderByClauses(anyQuery.getOrderBy()),\n-                            realm,\n-                            anyQuery.getDetails()),\n-                    anyQuery.getPage(),\n-                    anyQuery.getSize(),\n-                    getAnyLogic().count(realm));\n-        } else {\n-            // if an assignable query is provided in the FIQL string, start anyway from root realm\n-            boolean isAssignableCond = -1 != anyQuery.getFiql().indexOf(SpecialAttr.ASSIGNABLE.toString());\n-\n-            SearchCond cond = getSearchCond(anyQuery.getFiql(), realm);\n-            return buildPagedResult(\n-                    getAnyLogic().search(\n-                            cond,\n-                            anyQuery.getPage(),\n-                            anyQuery.getSize(),\n-                            getOrderByClauses(anyQuery.getOrderBy()),\n-                            isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n-                            anyQuery.getDetails()),\n-                    anyQuery.getPage(),\n-                    anyQuery.getSize(),\n-                    getAnyLogic().searchCount(cond, isAssignableCond ? SyncopeConstants.ROOT_REALM : realm));\n-        }\n+        // if an assignable query is provided in the FIQL string, start anyway from root realm\n+        boolean isAssignableCond = StringUtils.isBlank(anyQuery.getFiql())\n+                ? false\n+                : -1 != anyQuery.getFiql().indexOf(SpecialAttr.ASSIGNABLE.toString());\n+\n+        SearchCond searchCond = StringUtils.isBlank(anyQuery.getFiql())\n+                ? null\n+                : getSearchCond(anyQuery.getFiql(), realm);\n+\n+        Pair<Integer, List<TO>> result = getAnyLogic().search(\n+                searchCond,\n+                anyQuery.getPage(),\n+                anyQuery.getSize(),\n+                getOrderByClauses(anyQuery.getOrderBy()),\n+                isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n+                anyQuery.getDetails());\n+\n+        return buildPagedResult(result.getRight(), anyQuery.getPage(), anyQuery.getSize(), result.getLeft());\n     }\n \n     @Override"},{"sha":"302441e87a30643427315ff3ebc13efe82134e66","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/TopologyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FTopologyITCase.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -389,7 +389,7 @@ public void readPropagationTaskExecutions() {\n \n         TESTER.assertLabel(\n                 \"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:secondLevelContainer:title\",\n-                \"CREATE task about USER\");\n+                \"CREATE __ACCOUNT__\");\n \n         component = findComponentByProp(\"status\", \"body:toggle:outerObjectsRepeater:1:outer:form:content:tasks:\"\n                 + \"secondLevelContainer:second:executions:firstLevelContainer:first:container:content:searchContainer:\""},{"sha":"572078593e6429b9343442c5a6ba0714032087e2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de9e202971bee50cdf0c4d2c50f1c57eb5684f8c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=de9e202971bee50cdf0c4d2c50f1c57eb5684f8c","patch":"@@ -162,7 +162,7 @@ public void listAuditEvents() {\n             if (UserLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n                 assertEquals(EventCategoryType.LOGIC, eventCategoryTO.getType());\n                 assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n-                assertTrue(eventCategoryTO.getEvents().contains(\"list\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"search\"));\n                 assertFalse(eventCategoryTO.getEvents().contains(\"doCreate\"));\n                 assertFalse(eventCategoryTO.getEvents().contains(\"setStatusOnWfAdapter\"));\n                 assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n@@ -176,7 +176,7 @@ public void listAuditEvents() {\n             if (GroupLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n                 assertEquals(EventCategoryType.LOGIC, eventCategoryTO.getType());\n                 assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n-                assertTrue(eventCategoryTO.getEvents().contains(\"list\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"search\"));\n                 assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n                 found = true;\n             }"}]}