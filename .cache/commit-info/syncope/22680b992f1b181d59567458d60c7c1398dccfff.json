{"sha":"22680b992f1b181d59567458d60c7c1398dccfff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIyNjgwYjk5MmYxYjE4MWQ1OTU2NzQ1OGQ2MGM3YzEzOThkY2NmZmY=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-28T15:29:20Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-05-28T15:29:20Z"},"message":"SYNCOPE-89 #comment provided ad-hoc maxPerRoot\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1343281 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"337e66b1468a6fe0f63b6829f84729edab272880","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/337e66b1468a6fe0f63b6829f84729edab272880"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/22680b992f1b181d59567458d60c7c1398dccfff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22680b992f1b181d59567458d60c7c1398dccfff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/22680b992f1b181d59567458d60c7c1398dccfff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22680b992f1b181d59567458d60c7c1398dccfff/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"723417198e4708a5e0fae91c2ec352a4cda127b2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/723417198e4708a5e0fae91c2ec352a4cda127b2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/723417198e4708a5e0fae91c2ec352a4cda127b2"}],"stats":{"total":35,"additions":19,"deletions":16},"files":[{"sha":"1b885c7be2bc9eda1349f14b0ffb3cd961c5fd84","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":19,"deletions":16,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22680b992f1b181d59567458d60c7c1398dccfff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22680b992f1b181d59567458d60c7c1398dccfff/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=22680b992f1b181d59567458d60c7c1398dccfff","patch":"@@ -26,7 +26,9 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;\n import org.apache.http.util.EntityUtils;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -136,7 +138,7 @@ public void delete() {\n         report = restTemplate.postForObject(BASE_URL + \"report/create\", report, ReportTO.class);\n         assertNotNull(report);\n \n-        ReportTO deletedReport = \n+        ReportTO deletedReport =\n                 restTemplate.getForObject(BASE_URL + \"report/delete/{reportId}\", ReportTO.class, report.getId());\n         assertNotNull(deletedReport);\n \n@@ -149,7 +151,8 @@ public void delete() {\n     }\n \n     @Test\n-    public void executeAndExport() throws IOException {\n+    public void executeAndExport()\n+            throws IOException {\n \n         ReportTO reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n         assertNotNull(reportTO);\n@@ -163,7 +166,6 @@ public void executeAndExport() throws IOException {\n                 ReportExecTO.class, reportTO.getId());\n         assertNotNull(execution);\n \n-        int i = 0;\n         int maxit = 50;\n \n         do {\n@@ -174,8 +176,8 @@ public void executeAndExport() throws IOException {\n \n             reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n \n-            i++;\n-        } while (preExecIds.size() == reportTO.getExecutions().size() && i < maxit);\n+            maxit--;\n+        } while (preExecIds.size() == reportTO.getExecutions().size() && maxit > 0);\n \n         Set<Long> postExecIds = new HashSet<Long>();\n         for (ReportExecTO exec : reportTO.getExecutions()) {\n@@ -188,25 +190,27 @@ public void executeAndExport() throws IOException {\n         // Export\n         // 1. XML (default)\n \n+        final HttpClient client = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient();\n+\n         HttpResponse response = null;\n-        HttpGet getMethod = null;\n \n-        i = 0;\n         maxit = 10;\n \n+        // issueSYNCOPE89\n+        ((ThreadSafeClientConnManager) client.getConnectionManager()).setDefaultMaxPerRoute(10);\n+\n+        HttpGet getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next());\n+\n         do {\n             try {\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n \n-            getMethod = new HttpGet(BASE_URL + \"report/execution/export/\" + postExecIds.iterator().next());\n-\n-            response = ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory()).getHttpClient().execute(\n-                    getMethod);\n+            response = client.execute(getMethod);\n \n-            i++;\n-        } while ((response == null || response.getStatusLine().getStatusCode() != 200) && i < maxit);\n+            maxit--;\n+        } while ((response == null || response.getStatusLine().getStatusCode() != 200) && maxit > 0);\n \n         assertEquals(200, response.getStatusLine().getStatusCode());\n \n@@ -255,7 +259,6 @@ public void issueSYNCOPE43() {\n                 ReportExecTO.class, reportTO.getId());\n         assertNotNull(execution);\n \n-        int i = 0;\n         int maxit = 50;\n \n         do {\n@@ -266,8 +269,8 @@ public void issueSYNCOPE43() {\n \n             reportTO = restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\", ReportTO.class, 1);\n \n-            i++;\n-        } while (reportTO.getExecutions().size() == 0 && i < maxit);\n+            maxit--;\n+        } while (reportTO.getExecutions().size() == 0 && maxit > 0);\n \n         assertEquals(1, reportTO.getExecutions().size());\n     }"}]}