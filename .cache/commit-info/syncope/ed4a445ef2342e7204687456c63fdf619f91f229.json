{"sha":"ed4a445ef2342e7204687456c63fdf619f91f229","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVkNGE0NDVlZjIzNDJlNzIwNDY4NzQ1NmM2M2ZkZjYxOWY5MWYyMjk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-26T11:22:06Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-26T11:22:06Z"},"message":"Fixes issue 268 257\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247379 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e73657c4523b2478d301ccdb945efdeeeb75c4ef","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e73657c4523b2478d301ccdb945efdeeeb75c4ef"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ed4a445ef2342e7204687456c63fdf619f91f229","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ed4a445ef2342e7204687456c63fdf619f91f229","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ed4a445ef2342e7204687456c63fdf619f91f229","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ed4a445ef2342e7204687456c63fdf619f91f229/comments","author":null,"committer":null,"parents":[{"sha":"72c3c23422b282cabe9b5e861c78cc18a8ac53cd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72c3c23422b282cabe9b5e861c78cc18a8ac53cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72c3c23422b282cabe9b5e861c78cc18a8ac53cd"}],"stats":{"total":299,"additions":137,"deletions":162},"files":[{"sha":"268002d6292240733e31626df5f88743ca006a6f","filename":"console/src/main/java/org/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ed4a445ef2342e7204687456c63fdf619f91f229/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ed4a445ef2342e7204687456c63fdf619f91f229/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=ed4a445ef2342e7204687456c63fdf619f91f229","patch":"@@ -591,7 +591,7 @@ protected void onError(AjaxRequestTarget target, Form<?> form) {\n         mappingContainer.add(addSchemaMappingBtn);\n \n         /*\n-         * the list of overridable connector properties \n+         * the list of overridable connector properties\n          */\n         connectorPropertiesContainer.add(new ListView<ConnConfProperty>(\n                 \"connectorProperties\", connectorPropertiesModel) {\n@@ -808,9 +808,8 @@ protected void onError(final AjaxRequestTarget target,\n     }\n \n     /**\n-     * Extension class of DropDownChoice.\n-     * It's purposed for storing values in the\n-     * corresponding property model after pressing 'Add' button.\n+     * Extension class of DropDownChoice. It's purposed for storing values in\n+     * the corresponding property model after pressing 'Add' button.\n      */\n     private class IntMappingTypesDropDownChoice\n             extends AjaxDropDownChoicePanel {\n@@ -871,7 +870,7 @@ public final void updateResourceSchemaNames(final ResourceTO resourceTO) {\n         try {\n             resourceSchemaNames =\n                     (resourceTO != null && resourceTO.getConnectorId() != null)\n-                    ? connectorRestClient.getSchemaNames(resourceTO.getName())\n+                    ? restClient.getSchemaNames(resourceTO.getName())\n                     : Collections.EMPTY_LIST;\n \n         } catch (Exception e) {"},{"sha":"7cdd201df73ae3f95a54734c7c403188f660d6fc","filename":"console/src/main/java/org/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":4,"deletions":18,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ed4a445ef2342e7204687456c63fdf619f91f229/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ed4a445ef2342e7204687456c63fdf619f91f229/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=ed4a445ef2342e7204687456c63fdf619f91f229","patch":"@@ -16,7 +16,6 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import org.springframework.stereotype.Component;\n@@ -34,6 +33,7 @@ public class ConnectorRestClient extends AbstractBaseRestClient {\n \n     /**\n      * Get all connectors.\n+     *\n      * @return ConnectorInstanceTOs\n      */\n     public List<ConnInstanceTO> getAllConnectors() {\n@@ -44,6 +44,7 @@ public List<ConnInstanceTO> getAllConnectors() {\n \n     /**\n      * Create new connector.\n+     *\n      * @param schemaTO\n      */\n     public void create(final ConnInstanceTO connectorTO) {\n@@ -54,6 +55,7 @@ public void create(final ConnInstanceTO connectorTO) {\n \n     /**\n      * Load an already existent connector by its name.\n+     *\n      * @param connectorInstanceId the id\n      * @return ConnInstanceTO\n      */\n@@ -97,25 +99,9 @@ public List<ConnBundleTO> getAllBundles() {\n         return bundles;\n     }\n \n-    public List<String> getSchemaNames(final String resourceName) {\n-        List<String> schemaNames = null;\n-\n-        try {\n-            schemaNames = Arrays.asList(restTemplate.getForObject(\n-                    baseURL + \"connector/schema/{resourceName}/list\",\n-                    String[].class, resourceName));\n-\n-            // re-order schema names list\n-            Collections.sort(schemaNames);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"While getting resource schema names\", e);\n-        }\n-\n-        return schemaNames;\n-    }\n-\n     /**\n      * Get all configuration properties for the given connector instance.\n+     *\n      * @param connectorId the connector id\n      * @return List of ConnConfProperty, or an empty list in case none found\n      */"},{"sha":"411fbe3f0b4d752de7fefba0f3db148d0feea59e","filename":"console/src/main/java/org/syncope/console/rest/ResourceRestClient.java","status":"modified","additions":18,"deletions":21,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ed4a445ef2342e7204687456c63fdf619f91f229/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ed4a445ef2342e7204687456c63fdf619f91f229/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java?ref=ed4a445ef2342e7204687456c63fdf619f91f229","patch":"@@ -15,6 +15,7 @@\n package org.syncope.console.rest;\n \n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n import org.springframework.stereotype.Component;\n import org.syncope.client.to.ResourceTO;\n@@ -26,10 +27,23 @@\n @Component\n public class ResourceRestClient extends AbstractBaseRestClient {\n \n-    /**\n-     * Get all Connectors.\n-     * @return ResourceTOs\n-     */\n+    public List<String> getSchemaNames(final String resourceName) {\n+        List<String> schemaNames = null;\n+\n+        try {\n+            schemaNames = Arrays.asList(restTemplate.getForObject(\n+                    baseURL + \"resource/schema/{resourceName}/list\",\n+                    String[].class, resourceName));\n+\n+            // re-order schema names list\n+            Collections.sort(schemaNames);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            LOG.error(\"While getting resource schema names\", e);\n+        }\n+\n+        return schemaNames;\n+    }\n+\n     public List<ResourceTO> getAllResources() {\n         List<ResourceTO> resources = null;\n \n@@ -44,20 +58,11 @@ public List<ResourceTO> getAllResources() {\n         return resources;\n     }\n \n-    /**\n-     * Create new resource.\n-     * @param resourceTO\n-     */\n     public void create(final ResourceTO resourceTO) {\n         restTemplate.postForObject(baseURL\n                 + \"resource/create\", resourceTO, ResourceTO.class);\n     }\n \n-    /**\n-     * Load an already existent resource by its name.\n-     * @param name (e.g.:surname)\n-     * @return ResourceTO\n-     */\n     public ResourceTO read(final String name) {\n         ResourceTO resourceTO = null;\n \n@@ -71,20 +76,12 @@ public ResourceTO read(final String name) {\n         return resourceTO;\n     }\n \n-    /**\n-     * Update an already existent resource.\n-     * @param schemaTO updated\n-     */\n     public void update(final ResourceTO resourceTO) {\n         restTemplate.postForObject(\n                 baseURL + \"resource/update.json\", resourceTO,\n                 ResourceTO.class);\n     }\n \n-    /**\n-     * Delete an already existent resource by its name.\n-     * @param name\n-     */\n     public void delete(final String name) {\n         restTemplate.delete(baseURL\n                 + \"resource/delete/{resourceName}.json\", name);"},{"sha":"b3f5b9498a44c505d78e4541b23679ac3fe153d3","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":1,"deletions":77,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ed4a445ef2342e7204687456c63fdf619f91f229/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ed4a445ef2342e7204687456c63fdf619f91f229/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=ed4a445ef2342e7204687456c63fdf619f91f229","patch":"@@ -15,7 +15,6 @@\n package org.syncope.core.rest.controller;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n import javassist.NotFoundException;\n@@ -27,7 +26,6 @@\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n-import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -38,20 +36,16 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnBundleTO;\n import org.syncope.client.to.ConnInstanceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.init.ConnInstanceLoader;\n-import org.syncope.core.util.ConnBundleManager;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ConnInstanceDataBinder;\n+import org.syncope.core.util.ConnBundleManager;\n import org.syncope.types.ConnConfPropSchema;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -60,15 +54,9 @@\n @RequestMapping(\"/connector\")\n public class ConnInstanceController extends AbstractController {\n \n-    @Autowired\n-    private ConnInstanceLoader connInstanceLoader;\n-\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n-    @Autowired\n-    private ResourceDAO resourceDAO;\n-\n     @Autowired\n     private ConnInstanceDataBinder binder;\n \n@@ -214,40 +202,6 @@ public ConnInstanceTO read(\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/check/{resourceName}\")\n-    @Transactional(readOnly = true)\n-    public ModelAndView check(@PathVariable(\"resourceName\") String resourceName)\n-            throws NotFoundException {\n-\n-        final ExternalResource resource = resourceDAO.find(resourceName);\n-        if (resource == null) {\n-            LOG.error(\"Missing resource: {}\", resourceName);\n-            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n-        }\n-\n-        ConnectorFacadeProxy connector;\n-        try {\n-            connector = connInstanceLoader.getConnector(resource);\n-        } catch (BeansException e) {\n-            throw new NotFoundException(\n-                    \"Connector \" + resource.getConnector().getId(), e);\n-        }\n-\n-        Boolean verify = Boolean.FALSE;\n-        try {\n-            if (connector != null) {\n-                connector.validate();\n-                verify = Boolean.TRUE;\n-            }\n-        } catch (RuntimeException ignore) {\n-            LOG.warn(\"Connector validation failed\", ignore);\n-        }\n-\n-        return new ModelAndView().addObject(verify);\n-    }\n-\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/bundle/list\")\n@@ -343,36 +297,6 @@ public List<ConnBundleTO> getBundles(\n         return connectorBundleTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/schema/{resourceName}/list\")\n-    @Transactional(readOnly = true)\n-    public List<String> getSchemaNames(\n-            @PathVariable(\"resourceName\") final String resourceName,\n-            @RequestParam(required = false,\n-            value = \"showall\", defaultValue = \"false\") final boolean showall)\n-            throws NotFoundException {\n-\n-        ExternalResource resource = resourceDAO.find(resourceName);\n-        if (resource == null) {\n-            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n-            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n-        }\n-\n-        // We cannot use Spring bean because this method could be used during\n-        // resource definition or modification: bean couldn't exist or bean\n-        // couldn't be updated.\n-        // This is the reason why we should take a \"not mature\" connector\n-        // facade proxy to ask for schema names.\n-\n-        List<String> result = new ArrayList<String>(\n-                connInstanceLoader.createConnectorBean(resource).\n-                getSchema(showall));\n-        Collections.sort(result);\n-\n-        return result;\n-    }\n-\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{connectorId}/configurationProperty/list\")"},{"sha":"8533674772d92034c63bf51c9f7950eae70ec61c","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":80,"deletions":11,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ed4a445ef2342e7204687456c63fdf619f91f229/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ed4a445ef2342e7204687456c63fdf619f91f229/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=ed4a445ef2342e7204687456c63fdf619f91f229","patch":"@@ -15,11 +15,7 @@\n package org.syncope.core.rest.controller;\n \n import java.util.ArrayList;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import javassist.NotFoundException;\n@@ -30,19 +26,27 @@\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.ConnObjectTO;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.init.ConnInstanceLoader;\n-import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.ExternalResource;\n+import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n@@ -58,7 +62,7 @@ public class ResourceController extends AbstractController {\n     private ResourceDAO resourceDAO;\n \n     @Autowired\n-    private RoleDAO syncopeRoleDAO;\n+    private RoleDAO roleDAO;\n \n     @Autowired\n     private ResourceDataBinder binder;\n@@ -201,17 +205,81 @@ public List<ResourceTO> list(HttpServletResponse response)\n         return binder.getResourceTOs(resources);\n     }\n \n+    @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/schema/{resourceName}/list\")\n+    @Transactional(readOnly = true)\n+    public List<String> getSchemaNames(\n+            @PathVariable(\"resourceName\") final String resourceName,\n+            @RequestParam(required = false,\n+            value = \"showall\", defaultValue = \"false\") final boolean showall)\n+            throws NotFoundException {\n+\n+        ExternalResource resource = resourceDAO.find(resourceName);\n+        if (resource == null) {\n+            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+        }\n+\n+        // We cannot use Spring bean because this method could be used during\n+        // resource definition or modification: bean couldn't exist or bean\n+        // couldn't be updated.\n+        // This is the reason why we should take a \"not mature\" connector\n+        // facade proxy to ask for schema names.\n+\n+        List<String> result = new ArrayList<String>(\n+                connLoader.createConnectorBean(resource).getSchema(showall));\n+        Collections.sort(result);\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/check/{resourceName}\")\n+    @Transactional(readOnly = true)\n+    public ModelAndView check(\n+            @PathVariable(\"resourceName\") final String resourceName)\n+            throws NotFoundException {\n+\n+        final ExternalResource resource = resourceDAO.find(resourceName);\n+        if (resource == null) {\n+            LOG.error(\"Missing resource: {}\", resourceName);\n+            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+        }\n+\n+        ConnectorFacadeProxy connector;\n+        try {\n+            connector = connLoader.getConnector(resource);\n+        } catch (BeansException e) {\n+            throw new NotFoundException(\n+                    \"Connector \" + resource.getConnector().getId(), e);\n+        }\n+\n+        Boolean verify = Boolean.FALSE;\n+        try {\n+            if (connector != null) {\n+                connector.validate();\n+                verify = Boolean.TRUE;\n+            }\n+        } catch (RuntimeException ignore) {\n+            LOG.warn(\"Connector validation failed\", ignore);\n+        }\n+\n+        return new ModelAndView().addObject(verify);\n+    }\n+\n     @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{roleName}/mappings\")\n     public List<SchemaMappingTO> getRoleResourcesMapping(\n-            HttpServletResponse response,\n-            @PathVariable(\"roleName\") Long roleId)\n+            final HttpServletResponse response,\n+            @PathVariable(\"roleName\") final Long roleId)\n             throws SyncopeClientCompositeErrorException {\n \n         SyncopeRole role = null;\n         if (roleId != null) {\n-            role = syncopeRoleDAO.find(roleId);\n+            role = roleDAO.find(roleId);\n         }\n \n         if (role == null) {\n@@ -277,7 +345,8 @@ public ConnObjectTO getObject(final HttpServletResponse response,\n \n         if (connectorObject == null) {\n             throw new NotFoundException(\n-                    \"Object \" + objectId + \" not found on resource \" + resourceName);\n+                    \"Object \" + objectId + \" not found on resource \"\n+                    + resourceName);\n         }\n \n         final Set<Attribute> attributes = connectorObject.getAttributes();"},{"sha":"eb2b0065c0999ad5baf5a97c7c6dcb255f648a08","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ed4a445ef2342e7204687456c63fdf619f91f229/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ed4a445ef2342e7204687456c63fdf619f91f229/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=ed4a445ef2342e7204687456c63fdf619f91f229","patch":"@@ -272,15 +272,6 @@ public void read() {\n         assertNotNull(connectorInstanceTO);\n     }\n \n-    @Test\n-    public void check() {\n-        Boolean verify = restTemplate.getForObject(\n-                BASE_URL + \"connector/check/{resourceName}.json\",\n-                Boolean.class, \"ws-target-resource-1\");\n-\n-        assertTrue(verify);\n-    }\n-\n     @Test\n     public void getBundles() {\n         List<ConnBundleTO> bundles = Arrays.asList(\n@@ -294,27 +285,6 @@ public void getBundles() {\n         }\n     }\n \n-    @Test\n-    public void getSchemaNames() {\n-        List<String> schemaNames = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"connector/schema/{resourceName}/list?showAll=true\",\n-                String[].class, \"ws-target-resource-1\"));\n-        assertNotNull(schemaNames);\n-        assertFalse(schemaNames.isEmpty());\n-\n-        schemaNames = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"connector/schema/{resourceName}/list\",\n-                String[].class, \"resource-testdb\"));\n-        assertNotNull(schemaNames);\n-        assertEquals(1, schemaNames.size());\n-\n-        schemaNames = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"connector/schema/{resourceName}/list?showAll=true\",\n-                String[].class, \"resource-csv\"));\n-        assertNotNull(schemaNames);\n-        assertFalse(schemaNames.isEmpty());\n-    }\n-\n     @Test\n     public void getConnectorConfiguration() {\n         List<ConnConfProperty> props = Arrays.asList(restTemplate.getForObject("},{"sha":"604ed727815d9e4f33146578feeaa25d7e40c448","filename":"core/src/test/java/org/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ed4a445ef2342e7204687456c63fdf619f91f229/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ed4a445ef2342e7204687456c63fdf619f91f229/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=ed4a445ef2342e7204687456c63fdf619f91f229","patch":"@@ -401,4 +401,34 @@ public void read() {\n \n         assertNotNull(actual);\n     }\n+\n+    @Test\n+    public void check() {\n+        Boolean verify = restTemplate.getForObject(\n+                BASE_URL + \"resource/check/{resourceName}.json\",\n+                Boolean.class, \"ws-target-resource-1\");\n+\n+        assertTrue(verify);\n+    }\n+\n+    @Test\n+    public void getSchemaNames() {\n+        List<String> schemaNames = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"resource/schema/{resourceName}/list?showAll=true\",\n+                String[].class, \"ws-target-resource-1\"));\n+        assertNotNull(schemaNames);\n+        assertFalse(schemaNames.isEmpty());\n+\n+        schemaNames = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"resource/schema/{resourceName}/list\",\n+                String[].class, \"resource-testdb\"));\n+        assertNotNull(schemaNames);\n+        assertEquals(1, schemaNames.size());\n+\n+        schemaNames = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"resource/schema/{resourceName}/list?showAll=true\",\n+                String[].class, \"resource-csv\"));\n+        assertNotNull(schemaNames);\n+        assertFalse(schemaNames.isEmpty());\n+    }\n }"}]}