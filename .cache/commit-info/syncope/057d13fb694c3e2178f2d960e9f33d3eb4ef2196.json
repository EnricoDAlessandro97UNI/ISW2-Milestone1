{"sha":"057d13fb694c3e2178f2d960e9f33d3eb4ef2196","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA1N2QxM2ZiNjk0YzNlMjE3OGYyZDk2MGU5ZjMzZDNlYjRlZjIxOTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-05-28T15:12:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-05-29T09:40:34Z"},"message":"[SYNCOPE-1309] Clean up JWT after submitting self update","tree":{"sha":"16e93dd5a431be838771ee689ba313e896929aff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/16e93dd5a431be838771ee689ba313e896929aff"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/057d13fb694c3e2178f2d960e9f33d3eb4ef2196","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/057d13fb694c3e2178f2d960e9f33d3eb4ef2196","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/057d13fb694c3e2178f2d960e9f33d3eb4ef2196","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"232187c0e6d53184aa91432436250d0ec93d37f0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/232187c0e6d53184aa91432436250d0ec93d37f0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/232187c0e6d53184aa91432436250d0ec93d37f0"}],"stats":{"total":207,"additions":113,"deletions":94},"files":[{"sha":"8b81f140109f3c30dd3ba542e2480d61676797b3","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserSelfRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -25,7 +25,7 @@ public class UserSelfRestClient extends BaseRestClient {\n     private static final long serialVersionUID = 100731599744900931L;\n \n     public void changePassword(final String password) {\n-        getService(UserSelfService.class).changePassword(password);\n+        getService(UserSelfService.class).mustChangePassword(password);\n     }\n \n }"},{"sha":"9f8fe09b5fb5146662ee79d29a4a1a4a52759ecf","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.enduser;\n \n-import java.security.AccessControlException;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -137,7 +136,7 @@ public void invalidate() {\n         if (isAuthenticated()) {\n             try {\n                 client.logout();\n-            } catch (AccessControlException e) {\n+            } catch (Exception e) {\n                 LOG.debug(\"Unexpected exception while logging out\", e);\n             } finally {\n                 client = null;"},{"sha":"2d476e8aa3d3f71c57bb0186eb3f43bb438d1db4","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfChangePassword.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfChangePassword.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -53,17 +53,15 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 throw new Exception(\"A new correct password should be provided\");\n             }\n             SyncopeEnduserSession.get().getService(UserSelfService.class).\n-                    changePassword(parameters.get(\"newPassword\")[0]);\n-\n-            final String responseMessage = new StringBuilder().append(\"Password changed correctly\").toString();\n+                    mustChangePassword(parameters.get(\"newPassword\")[0]);\n \n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n \n             response.setWriteCallback(new WriteCallback() {\n \n                 @Override\n                 public void writeData(final Attributes attributes) throws IOException {\n-                    attributes.getResponse().write(responseMessage);\n+                    attributes.getResponse().write(\"Password changed correctly\");\n                 }\n             });\n "},{"sha":"26bad6184959083fcc9d6fc4e1d5f45a42053e16","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -151,14 +151,22 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 }\n                 // create diff patch\n                 UserPatch userPatch = AnyOperations.diff(userTO, selfTO, false);\n-                // update user by patch\n-                Response res = SyncopeEnduserSession.get().\n-                        getService(userTO.getETagValue(), UserSelfService.class).update(userPatch);\n-\n-                buildResponse(response, res.getStatus(), res.getStatusInfo().getFamily().equals(\n-                        Response.Status.Family.SUCCESSFUL)\n-                                ? \"User [\" + userTO.getUsername() + \"] successfully updated\"\n-                                : \"ErrorMessage{{ \" + res.getStatusInfo().getReasonPhrase() + \" }}\");\n+                if (userPatch.isEmpty()) {\n+                    // nothing to do\n+                    buildResponse(response,\n+                            Response.Status.OK.getStatusCode(),\n+                            \"No need to update [\" + selfTO.getUsername() + \"]\");\n+                } else {\n+                    // update user by patch\n+                    Response coreResponse = SyncopeEnduserSession.get().\n+                            getService(userTO.getETagValue(), UserSelfService.class).update(userPatch);\n+\n+                    buildResponse(response,\n+                            coreResponse.getStatus(),\n+                            coreResponse.getStatusInfo().getFamily() == Response.Status.Family.SUCCESSFUL\n+                            ? \"User [\" + selfTO.getUsername() + \"] successfully updated\"\n+                            : \"ErrorMessage{{ \" + coreResponse.getStatusInfo().getReasonPhrase() + \" }}\");\n+                }\n             } else {\n                 LOG.warn(\n                         \"Incoming update request [{}] is not compliant with form customization rules.\""},{"sha":"d6b7777be2741abf4afd09b1bd3bd7fc07865595","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":43,"deletions":49,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.common.lib;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -55,6 +57,8 @@ public final class AnyOperations {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AnyOperations.class);\n \n+    private static final Set<String> NULL_SINGLETON = Collections.singleton(null);\n+\n     private AnyOperations() {\n         // empty constructor for static utility classes\n     }\n@@ -70,29 +74,6 @@ private static <T, K extends AbstractReplacePatchItem<T>> K replacePatchItem(\n         return proto;\n     }\n \n-    private static void diff(\n-            final MembershipTO updated,\n-            final MembershipTO original,\n-            final MembershipPatch result,\n-            final boolean incremental) {\n-\n-        // check same key\n-        if (updated.getGroupKey() == null && original.getGroupKey() != null\n-                || (updated.getGroupKey() != null && !updated.getGroupKey().equals(original.getGroupKey()))) {\n-\n-            throw new IllegalArgumentException(\"Memberships must be the same\");\n-        }\n-        result.setGroup(updated.getGroupKey());\n-\n-        // 1. plain attributes\n-        result.getPlainAttrs().clear();\n-        result.getPlainAttrs().addAll(updated.getPlainAttrs());\n-\n-        // 2. virtual attributes\n-        result.getVirAttrs().clear();\n-        result.getVirAttrs().addAll(updated.getVirAttrs());\n-    }\n-\n     private static void diff(\n             final AnyTO updated, final AnyTO original, final AnyPatch result, final boolean incremental) {\n \n@@ -226,13 +207,18 @@ public static AnyObjectPatch diff(\n         Map<String, MembershipTO> updatedMembs = EntityTOUtils.buildMembershipMap(updated.getMemberships());\n         Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n-        updatedMembs.entrySet().stream().\n-                filter(entry -> (!originalMembs.containsKey(entry.getKey()))).\n-                forEachOrdered(entry -> {\n-                    result.getMemberships().add(new MembershipPatch.Builder().\n-                            operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).\n-                            build());\n-                });\n+        updatedMembs.forEach((key, value) -> {\n+            MembershipPatch membershipPatch = new MembershipPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).group(value.getGroupKey()).build();\n+\n+            diff(value, membershipPatch);\n+\n+            if (!originalMembs.containsKey(key)\n+                    || (!membershipPatch.getPlainAttrs().isEmpty() || !membershipPatch.getVirAttrs().isEmpty())) {\n+\n+                result.getMemberships().add(membershipPatch);\n+            }\n+        });\n \n         if (!incremental) {\n             originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n@@ -245,6 +231,20 @@ public static AnyObjectPatch diff(\n         return result;\n     }\n \n+    private static void diff(\n+            final MembershipTO updated,\n+            final MembershipPatch result) {\n+\n+        // 1. plain attributes\n+        result.getPlainAttrs().addAll(updated.getPlainAttrs().stream().\n+                filter(attrTO -> !attrTO.getValues().isEmpty() && NULL_SINGLETON.equals(attrTO.getValues())).\n+                collect(Collectors.toSet()));\n+\n+        // 2. virtual attributes\n+        result.getVirAttrs().clear();\n+        result.getVirAttrs().addAll(updated.getVirAttrs());\n+    }\n+\n     /**\n      * Calculate modifications needed by first in order to be equal to second.\n      *\n@@ -329,24 +329,18 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n         Map<String, MembershipTO> updatedMembs = EntityTOUtils.buildMembershipMap(updated.getMemberships());\n         Map<String, MembershipTO> originalMembs = EntityTOUtils.buildMembershipMap(original.getMemberships());\n \n-        updatedMembs.entrySet().stream().\n-                map(entry -> {\n-                    MembershipPatch membershipPatch = new MembershipPatch.Builder().\n-                            operation(PatchOperation.ADD_REPLACE).group(entry.getValue().getGroupKey()).build();\n-                    MembershipTO omemb;\n-                    if (originalMembs.containsKey(entry.getKey())) {\n-                        // get the original membership\n-                        omemb = originalMembs.get(entry.getKey());\n-                    } else {\n-                        // create an empty one to generate the patch\n-                        omemb = new MembershipTO.Builder().group(entry.getKey()).build();\n-                    }\n-                    diff(entry.getValue(), omemb, membershipPatch, incremental);\n-                    return membershipPatch;\n-                }).\n-                forEachOrdered(membershipPatch -> {\n-                    result.getMemberships().add(membershipPatch);\n-                });\n+        updatedMembs.forEach((key, value) -> {\n+            MembershipPatch membershipPatch = new MembershipPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).group(value.getGroupKey()).build();\n+\n+            diff(value, membershipPatch);\n+\n+            if (!originalMembs.containsKey(key)\n+                    || (!membershipPatch.getPlainAttrs().isEmpty() || !membershipPatch.getVirAttrs().isEmpty())) {\n+\n+                result.getMemberships().add(membershipPatch);\n+            }\n+        });\n \n         if (!incremental) {\n             originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n@@ -416,7 +410,7 @@ private static Collection<AttrTO> patch(final Map<String, AttrTO> attrs, final S\n                 if (removed != null && removed.getSchemaInfo() != null) {\n                     patch.getAttrTO().setSchemaInfo(removed.getSchemaInfo());\n                 }\n-                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                if (patch.getOperation() == PatchOperation.ADD_REPLACE && !patch.getAttrTO().getValues().isEmpty()) {\n                     rwattrs.put(patch.getAttrTO().getSchema(), patch.getAttrTO());\n                 }\n             }"},{"sha":"fd1665a41065ae96886642160d421cbdea88fa92","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -237,9 +237,9 @@ Response create(@NotNull UserTO userTO,\n         @SecurityRequirement(name = \"BasicAuthentication\"),\n         @SecurityRequirement(name = \"Bearer\") })\n     @POST\n-    @Path(\"changePassword\")\n+    @Path(\"mustChangePassword\")\n     @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response changePassword(String password);\n+    Response mustChangePassword(String password);\n \n     /**\n      * Provides answer for the security question configured for user matching the given username, if any."},{"sha":"dace468882816afa37a086e365e753511ebdc126","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -41,7 +41,9 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -68,6 +70,12 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n     @Autowired\n     protected AnySearchDAO searchDAO;\n \n+    @Autowired\n+    protected ConfDAO confDAO;\n+\n+    @Autowired\n+    protected AccessTokenDAO accessTokenDAO;\n+\n     @Autowired\n     protected UserDataBinder binder;\n \n@@ -160,7 +168,18 @@ protected ProvisioningResult<UserTO> doCreate(\n     public ProvisioningResult<UserTO> selfUpdate(final UserPatch userPatch, final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n         userPatch.setKey(userTO.getKey());\n-        return doUpdate(userPatch, true, nullPriorityAsync);\n+        ProvisioningResult<UserTO> updated = doUpdate(userPatch, true, nullPriorityAsync);\n+\n+        // Ensures that, if the self update above moves the user into a status from which no authentication\n+        // is possible, the existing Access Token is clean up to avoid issues with future authentications\n+        if (!confDAO.getValuesAsStrings(\"authentication.statuses\").contains(updated.getEntity().getStatus())) {\n+            String accessToken = accessTokenDAO.findByOwner(updated.getEntity().getUsername()).getKey();\n+            if (accessToken != null) {\n+                accessTokenDAO.delete(accessToken);\n+            }\n+        }\n+\n+        return updated;\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n@@ -259,7 +278,7 @@ public ProvisioningResult<UserTO> selfStatus(final StatusPatch statusPatch, fina\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"')\")\n-    public ProvisioningResult<UserTO> changePassword(final String password, final boolean nullPriorityAsync) {\n+    public ProvisioningResult<UserTO> mustChangePassword(final String password, final boolean nullPriorityAsync) {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setPassword(new PasswordPatch.Builder().value(password).build());\n         userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(false).build());"},{"sha":"af6f8c41a119398ed2f08390cd0ac758ecc4ccf2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ConfDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -19,13 +19,16 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.Optional;\n+import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n \n public interface ConfDAO extends DAO<Conf> {\n \n     Optional<? extends CPlainAttr> find(String key);\n \n+    List<String> getValuesAsStrings(String key);\n+\n     <T> T find(String key, T defaultValue);\n \n     Conf get();"},{"sha":"59c69d84c9bef1bc9b83553ed44c47017faa13c4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAccessTokenDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -109,12 +109,13 @@ public List<AccessToken> findAll(final int page, final int itemsPerPage, final L\n         return query.getResultList();\n     }\n \n-    @Override\n     @Transactional(rollbackFor = Throwable.class)\n+    @Override\n     public AccessToken save(final AccessToken accessToken) {\n         return entityManager().merge(accessToken);\n     }\n \n+    @Transactional(rollbackFor = Throwable.class)\n     @Override\n     public void delete(final String key) {\n         AccessToken accessToken = find(key);"},{"sha":"35d07d286ddeb6db1b2e52a42f5e12905f5c18e1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -19,6 +19,8 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.Optional;\n+import java.util.Collections;\n+import java.util.List;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n@@ -50,6 +52,13 @@ public Optional<? extends CPlainAttr> find(final String key) {\n         return get().getPlainAttr(key);\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<String> getValuesAsStrings(final String key) {\n+        Optional<? extends CPlainAttr> attr = find(key);\n+        return attr.isPresent() ? attr.get().getValuesAsStrings() : Collections.<String>emptyList();\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public <T> T find(final String key, final T defaultValue) {"},{"sha":"67e8fd3fd6f6a47b2867ae95262b12c64cd90acc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AzurePullActions.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -80,10 +80,6 @@ public class AzurePullActions implements PullActions {\n \n     private final Map<EntityTO, String> azureRefs = new HashMap<>();\n \n-    protected String getEmailAttrName() {\n-        return \"mailNickname\";\n-    }\n-\n     protected String getAzureUserIdSchema() {\n         return \"AzureUserId\";\n     }\n@@ -217,5 +213,4 @@ public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutio\n             }\n         }\n     }\n-\n }"},{"sha":"ed6cd69c3a937c08990231d53b6f86d363d3c567","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -90,8 +90,8 @@ public Response delete() {\n     }\n \n     @Override\n-    public Response changePassword(final String password) {\n-        ProvisioningResult<UserTO> updated = logic.changePassword(password, isNullPriorityAsync());\n+    public Response mustChangePassword(final String password) {\n+        ProvisioningResult<UserTO> updated = logic.mustChangePassword(password, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n "},{"sha":"1cc5b6132a6d5d92ff0a0bbc02073b540ab5eb15","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -210,8 +210,7 @@ public Pair<User, Boolean> authenticate(final Authentication authentication) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n             }\n \n-            Optional<? extends CPlainAttr> authStatuses = confDAO.find(\"authentication.statuses\");\n-            if (authStatuses.isPresent() && !authStatuses.get().getValuesAsStrings().contains(user.getStatus())) {\n+            if (!confDAO.getValuesAsStrings(\"authentication.statuses\").contains(user.getStatus())) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n             }\n \n@@ -405,8 +404,7 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n                 throw new DisabledException(\"User \" + username + \" is suspended\");\n             }\n \n-            Optional<? extends CPlainAttr> authStatuses = confDAO.find(\"authentication.statuses\");\n-            if (authStatuses.isPresent() && !authStatuses.get().getValuesAsStrings().contains(user.getStatus())) {\n+            if (!confDAO.getValuesAsStrings(\"authentication.statuses\").contains(user.getStatus())) {\n                 throw new DisabledException(\"User \" + username + \" not allowed to authenticate\");\n             }\n "},{"sha":"b72288a61ccca2e447ba27cc039d80fcd6b0282f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -31,7 +31,6 @@\n import org.apache.wicket.util.tester.FormTester;\n import org.apache.wicket.util.tester.WicketTester;\n import org.apache.wicket.util.visit.IVisit;\n-import org.apache.wicket.util.visit.IVisitor;\n import org.junit.jupiter.api.BeforeAll;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -78,7 +77,7 @@ protected <V extends Serializable> Component findComponentByProp(\n \n         Component component = TESTER.getComponentFromLastRenderedPage(searchPath);\n         return (component instanceof MarkupContainer ? MarkupContainer.class.cast(component) : component.getPage()).\n-                visitChildren(ListItem.class, (final ListItem<?> object, final IVisit<Component> visit) -> {\n+                visitChildren(ListItem.class, (ListItem<?> object, IVisit<Component> visit) -> {\n                     try {\n                         Method getter = PropertyResolver.getPropertyGetter(property, object.getModelObject());\n                         if (getter != null && getter.invoke(object.getModelObject()).equals(key)) {\n@@ -95,18 +94,14 @@ protected <V extends Serializable> Component findComponentByPropNotNull(\n \n         Component component = TESTER.getComponentFromLastRenderedPage(searchPath);\n         return (component instanceof MarkupContainer ? MarkupContainer.class.cast(component) : component.getPage()).\n-                visitChildren(ListItem.class, new IVisitor<ListItem<?>, Component>() {\n-\n-                    @Override\n-                    public void component(final ListItem<?> object, final IVisit<Component> visit) {\n-                        try {\n-                            Method getter = PropertyResolver.getPropertyGetter(property, object.getModelObject());\n-                            if (getter != null && getter.invoke(object.getModelObject()) != null) {\n-                                visit.stop(object);\n-                            }\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error invoke method\", e);\n+                visitChildren(ListItem.class, (ListItem<?> object, IVisit<Component> visit) -> {\n+                    try {\n+                        Method getter = PropertyResolver.getPropertyGetter(property, object.getModelObject());\n+                        if (getter != null && getter.invoke(object.getModelObject()) != null) {\n+                            visit.stop(object);\n                         }\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error invoke method\", e);\n                     }\n                 });\n     }"},{"sha":"48d9d55b15511ae18d14651a6b64dfe44348d94e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/057d13fb694c3e2178f2d960e9f33d3eb4ef2196/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=057d13fb694c3e2178f2d960e9f33d3eb4ef2196","patch":"@@ -393,7 +393,7 @@ public void mustChangePassword() {\n         }\n \n         // 3. change password\n-        vivaldiClient.getService(UserSelfService.class).changePassword(\"password123\");\n+        vivaldiClient.getService(UserSelfService.class).mustChangePassword(\"password123\");\n \n         // 4. verify it worked\n         self = clientFactory.create(\"vivaldi\", \"password123\").self();"}]}