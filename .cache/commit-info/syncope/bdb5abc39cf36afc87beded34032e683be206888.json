{"sha":"bdb5abc39cf36afc87beded34032e683be206888","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJkYjVhYmMzOWNmMzZhZmM4N2JlZGVkMzQwMzJlNjgzYmUyMDY4ODg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-14T12:08:55Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-14T12:08:55Z"},"message":"Fixes issue 73\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247194 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"822cd325f968b0f10216346dab671ce6a06ed1ba","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/822cd325f968b0f10216346dab671ce6a06ed1ba"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bdb5abc39cf36afc87beded34032e683be206888","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bdb5abc39cf36afc87beded34032e683be206888","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bdb5abc39cf36afc87beded34032e683be206888","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bdb5abc39cf36afc87beded34032e683be206888/comments","author":null,"committer":null,"parents":[{"sha":"93574a62beb891ab2192226087cf16d208c9368e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/93574a62beb891ab2192226087cf16d208c9368e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/93574a62beb891ab2192226087cf16d208c9368e"}],"stats":{"total":636,"additions":483,"deletions":153},"files":[{"sha":"8162b615521fcace126279842b0987a4ba080a96","filename":"client/src/main/java/org/syncope/client/SchemaList.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSchemaList.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -18,4 +18,6 @@\n \n @Retention(RUNTIME)\n public @interface SchemaList {\n+\n+    boolean extended() default false;\n }"},{"sha":"b14c26ca4647429f57b237829e69c1c411cd3598","filename":"client/src/main/java/org/syncope/types/ConflictResolutionAction.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConflictResolutionAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConflictResolutionAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FConflictResolutionAction.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -21,5 +21,7 @@ public enum ConflictResolutionAction {\n     // sync last match\n     LASTMATCH,\n     // ignore sync\n-    IGNORE\n+    IGNORE,\n+    // sync all\n+    ALL\n }"},{"sha":"45fa171a25cb4acedea16bb2d4794c3fb23bb069","filename":"client/src/main/java/org/syncope/types/SyncPolicySpec.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -25,30 +25,36 @@ public class SyncPolicySpec extends AbstractPolicySpec {\n     /**\n      * SyncopeUsers attributes and user schemas used to disambiguate.\n      */\n-    @SchemaList\n-    private List<String> identityTemplate;\n+    @SchemaList(extended = true)\n+    private List<String> alternativeSearchAttrs;\n \n     /**\n      * Conflict resolution action.\n      */\n     private ConflictResolutionAction conflictResolutionAction;\n \n     public ConflictResolutionAction getConflictResolutionAction() {\n-        return conflictResolutionAction;\n+        if (conflictResolutionAction == null) {\n+            return conflictResolutionAction.IGNORE;\n+        } else {\n+            return conflictResolutionAction;\n+        }\n     }\n \n-    public void setConflictResolutionAction(ConflictResolutionAction conflictResolutionAction) {\n+    public void setConflictResolutionAction(\n+            final ConflictResolutionAction conflictResolutionAction) {\n         this.conflictResolutionAction = conflictResolutionAction;\n     }\n \n-    public List<String> getIdentityTemplate() {\n-        if (identityTemplate == null) {\n-            identityTemplate = new ArrayList<String>();\n+    public List<String> getAlternativeSearchAttrs() {\n+        if (alternativeSearchAttrs == null) {\n+            alternativeSearchAttrs = new ArrayList<String>();\n         }\n-        return identityTemplate;\n+        return alternativeSearchAttrs;\n     }\n \n-    public void setIdentityTemplate(List<String> identityTemplate) {\n-        this.identityTemplate = identityTemplate;\n+    public void setAlternativeSearchAttrs(\n+            final List<String> alternativeSearchAttrs) {\n+        this.alternativeSearchAttrs = alternativeSearchAttrs;\n     }\n }"},{"sha":"38372820c631a11cfcbf511aedc12c5f6e36265a","filename":"console/src/main/java/org/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":18,"deletions":8,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -102,8 +102,10 @@ public PolicyBeanPanel(\n                 fieldWrapper.setName(field.getName());\n                 fieldWrapper.setType(field.getType());\n \n-                fieldWrapper.setSchemaList(\n-                        field.getAnnotation(SchemaList.class) != null);\n+                final SchemaList schemaList =\n+                        field.getAnnotation(SchemaList.class);\n+\n+                fieldWrapper.setSchemaList(schemaList);\n \n                 items.add(fieldWrapper);\n             }\n@@ -168,11 +170,19 @@ protected void populateItem(ListItem<FieldWrapper> item) {\n                                 \"get\" + StringUtils.capitalize(field.getName()),\n                                 new Class[]{});\n \n-                        if (field.isSchemaList()) {\n+                        if (field.getSchemaList() != null) {\n+                            final List values = schemas.getObject();\n+\n+                            if (field.getSchemaList().extended()) {\n+                                values.add(\"id\");\n+                                values.add(\"username\");\n+                            }\n+\n                             component = new AjaxPalettePanel(\n                                     \"field\",\n-                                    new PropertyModel(policy, field.getName()),\n-                                    new ListModel<String>(schemas.getObject()));\n+                                    new PropertyModel(policy,\n+                                    field.getName()),\n+                                    new ListModel<String>(values));\n \n                             item.add(component);\n \n@@ -289,7 +299,7 @@ private class FieldWrapper implements Serializable {\n \n         private String name;\n \n-        private boolean schemaList;\n+        private SchemaList schemaList;\n \n         public String getName() {\n             return name;\n@@ -307,11 +317,11 @@ public void setType(final Class type) {\n             this.type = type;\n         }\n \n-        public boolean isSchemaList() {\n+        public SchemaList getSchemaList() {\n             return schemaList;\n         }\n \n-        public void setSchemaList(boolean schemaList) {\n+        public void setSchemaList(final SchemaList schemaList) {\n             this.schemaList = schemaList;\n         }\n     }"},{"sha":"ba9ba6849472ad5d7bf9c0dd7365bee61a1d3dfa","filename":"console/src/main/resources/org/syncope/console/pages/PolicyModalPage.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -55,6 +55,6 @@ permittedLoginRetries=Maximum number of subsequent failed logins\n #-----------------------------\n # Sync policy specification properties\n #-----------------------------\n-identityTemplate=Identity template\n+alternativeSearchAttrs=Alternative attributes for local search\n conflictResolutionAction= Conflict resolution action\n #-----------------------------\n\\ No newline at end of file"},{"sha":"7023d475499cf4fb1f39acd3f5eb9d856d8bc9f9","filename":"console/src/main/resources/org/syncope/console/pages/PolicyModalPage_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -55,6 +55,6 @@ permittedLoginRetries=Numero massimo di login consecutivi falliti\n #-----------------------------\n # Sync policy specification properties\n #-----------------------------\n-identityTemplate=Identity template\n+alternativeSearchAttrs=Attributi alternativi per ricerca locale\n conflictResolutionAction= Azione di risoluzione dei conflitti\n #-----------------------------\n\\ No newline at end of file"},{"sha":"8ac3464b3338c5fc3b408a5188ae0d3b133e67a9","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -350,7 +350,8 @@ private Class getIntMappingTypeClass(\n      */\n     private Map.Entry<String, Attribute> prepareAttribute(\n             final SchemaMapping mapping,\n-            final SyncopeUser user, final String password)\n+            final SyncopeUser user, \n+            final String password)\n             throws ClassNotFoundException {\n \n         AbstractSchema schema = null;\n@@ -554,8 +555,7 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(\n \n         if (!StringUtils.hasText(accountId)) {\n             throw new IllegalArgumentException(\n-                    \"Missing accountId specification for \"\n-                    + resource.getName());\n+                    \"Missing accountId specification for \" + resource.getName());\n         }\n \n         // Evaluate AccountLink expression"},{"sha":"a82e8fe29be4ff9c7973330e8064e5bbe28d201a","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -95,7 +95,6 @@ private PolicyTO create(final Policy policy, final PolicyTO policyTO)\n         Policy actual = policyDAO.save(policy);\n         policyTO.setId(actual.getId());\n \n-\n         return policyTO;\n     }\n "},{"sha":"c7dcbe55cddd2079286e5c8d52020907a5216033","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":338,"deletions":105,"changes":443,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -15,6 +15,7 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import org.identityconnectors.common.security.GuardedByteArray;\n@@ -27,34 +28,45 @@\n import org.quartz.JobExecutionException;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.GrantedAuthorityImpl;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.mod.MembershipMod;\n import org.syncope.client.mod.UserMod;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.SyncopeUserCond;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.core.init.ConnInstanceLoader;\n+import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.core.persistence.beans.SyncTask;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.beans.user.UAttrValue;\n-import org.syncope.core.persistence.beans.user.UDerSchema;\n-import org.syncope.core.persistence.beans.user.USchema;\n-import org.syncope.core.persistence.dao.DerSchemaDAO;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n+import org.syncope.core.persistence.dao.UserSearchDAO;\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.propagation.PropagationByResource;\n import org.syncope.core.propagation.PropagationException;\n import org.syncope.core.propagation.PropagationManager;\n import org.syncope.core.rest.controller.InvalidSearchConditionException;\n import org.syncope.core.scheduling.SyncResult.Operation;\n+import org.syncope.core.util.EntitlementUtil;\n import org.syncope.core.workflow.UserWorkflowAdapter;\n import org.syncope.core.workflow.WorkflowResult;\n+import org.syncope.types.ConflictResolutionAction;\n+import org.syncope.types.SyncPolicySpec;\n import org.syncope.types.TraceLevel;\n \n /**\n@@ -77,22 +89,22 @@ public class SyncJob extends AbstractJob {\n     private ResourceDAO resourceDAO;\n \n     /**\n-     * Schema DAO.\n+     * User DAO.\n      */\n     @Autowired\n-    private SchemaDAO schemaDAO;\n+    private UserDAO userDAO;\n \n     /**\n-     * Derived schema DAO.\n+     * User DAO.\n      */\n     @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    private UserSearchDAO userSearchDAO;\n \n     /**\n-     * User DAO.\n+     * Entitlement DAO.\n      */\n     @Autowired\n-    private UserDAO userDAO;\n+    EntitlementDAO entitlementDAO;\n \n     /**\n      * User workflow adapter.\n@@ -233,11 +245,11 @@ private UserTO getUserTO(final ConnectorObject obj) {\n      * @param obj connector object\n      * @return UserMod for the user to be updated\n      */\n-    private UserMod getUserMod(final Long userId, final ConnectorObject obj) {\n+    private UserMod getUserMod(final SyncopeUser user, final ConnectorObject obj) {\n         final SyncTask syncTask = (SyncTask) this.task;\n \n         final UserMod userMod = new UserMod();\n-        userMod.setId(userId);\n+        userMod.setId(user.getId());\n         userMod.setResourcesToBeAdded(syncTask.getDefaultResourceNames());\n         MembershipMod membershipMod;\n         for (Long roleId : syncTask.getDefaultRoleIds()) {\n@@ -258,9 +270,20 @@ private UserMod getUserMod(final Long userId, final ConnectorObject obj) {\n                     break;\n \n                 case Password:\n-                    attribute = obj.getAttributeByName(\"__PASSWORD__\");\n-                    userMod.setPassword(getPassword(attribute == null\n-                            ? Collections.EMPTY_LIST : attribute.getValue()));\n+                    attribute = obj.getAttributeByName(\n+                            OperationalAttributes.PASSWORD_NAME);\n+\n+                    final String password = getPassword(attribute == null\n+                            ? Collections.EMPTY_LIST : attribute.getValue());\n+\n+                    final SyncopeUser passwordUser = new SyncopeUser();\n+                    passwordUser.setPassword(\n+                            password, user.getCipherAlgoritm(), 0);\n+\n+                    // update password if and only if password is really changed\n+                    if (!user.getPassword().equals(passwordUser.getPassword())) {\n+                        userMod.setPassword(password);\n+                    }\n                     break;\n \n                 case Username:\n@@ -306,48 +329,154 @@ private UserMod getUserMod(final Long userId, final ConnectorObject obj) {\n      * @param previousUidValue Uid value before last update (if available)\n      * @return list of matching users\n      */\n-    private List<SyncopeUser> findExistingUsers(\n-            final String schemaName, final String uidValue,\n-            final String previousUidValue) {\n+    private List<SyncopeUser> findExistingUsers(final SyncDelta delta) {\n \n+        final String uid = delta.getPreviousUid() == null\n+                ? delta.getUid().getUidValue()\n+                : delta.getPreviousUid().getUidValue();\n+\n+        final SchemaMapping accountIdMap =\n+                ((SyncTask) this.task).getResource().getAccountIdMapping();\n+\n+        // ---------------------------------\n+        // Get sync policy specification\n+        // ---------------------------------\n         final SyncPolicy policy =\n                 ((SyncTask) this.task).getResource().getSyncPolicy();\n-        \n-        // .............\n+\n+        final SyncPolicySpec policySpec = policy != null\n+                ? (SyncPolicySpec) policy.getSpecification() : null;\n+        // ---------------------------------\n \n         final List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n \n-        USchema schema = schemaDAO.find(schemaName, USchema.class);\n-        if (schema != null) {\n-            UAttrValue value = new UAttrValue();\n-            value.setStringValue(previousUidValue == null\n-                    ? uidValue : previousUidValue);\n-            result.addAll(userDAO.findByAttrValue(schemaName, value));\n-        } else {\n-            UDerSchema derSchema =\n-                    derSchemaDAO.find(schemaName, UDerSchema.class);\n-            if (derSchema != null) {\n-                try {\n-                    result.addAll(userDAO.findByDerAttrValue(schemaName,\n-                            previousUidValue == null\n-                            ? uidValue : previousUidValue));\n-                } catch (InvalidSearchConditionException e) {\n-                    LOG.error(\"Could not search for matching users\", e);\n+        try {\n+            if (policySpec != null\n+                    && policySpec.getAlternativeSearchAttrs() != null\n+                    && !policySpec.getAlternativeSearchAttrs().isEmpty()) {\n+\n+                // search external attribute name/value about each specified name\n+                final ConnectorObject object = delta.getObject();\n+\n+                final Map<String, Attribute> extValues =\n+                        new HashMap<String, Attribute>();\n+\n+                for (SchemaMapping mapping :\n+                        ((SyncTask) this.task).getResource().getMappings()) {\n+\n+                    String key;\n+                    switch (mapping.getIntMappingType()) {\n+                        case SyncopeUserId:\n+                            key = \"id\";\n+                            break;\n+                        case Username:\n+                            key = \"username\";\n+                            break;\n+                        case Password:\n+                            key = \"password\";\n+                            break;\n+                        default:\n+                            key = mapping.getIntAttrName();\n+                    }\n+\n+                    extValues.put(key, object.getAttributeByName(\n+                            mapping.getExtAttrName()));\n                 }\n+\n+                // search user by attributes specified into the policy\n+                NodeCond searchCondition = null;\n+\n+                for (String schema : policySpec.getAlternativeSearchAttrs()) {\n+                    Attribute value = extValues.get(schema);\n+\n+                    AttributeCond.Type type;\n+                    String expression = null;\n+\n+                    if (value == null\n+                            || value.getValue() == null\n+                            || value.getValue().isEmpty()) {\n+                        type = AttributeCond.Type.ISNULL;\n+                    } else {\n+                        type = AttributeCond.Type.EQ;\n+                        expression = value.getValue().size() > 1\n+                                ? value.getValue().toString()\n+                                : value.getValue().get(0).toString();\n+                    }\n+\n+                    NodeCond nodeCond;\n+\n+                    // just Username or SyncopeUserId can be selected to be used\n+                    if (\"id\".equalsIgnoreCase(schema)\n+                            || \"username\".equalsIgnoreCase(schema)) {\n+\n+                        final SyncopeUserCond cond = new SyncopeUserCond();\n+                        cond.setSchema(schema);\n+                        cond.setType(type);\n+                        cond.setExpression(expression);\n+\n+                        nodeCond = NodeCond.getLeafCond((SyncopeUserCond) cond);\n+\n+                    } else {\n+                        final AttributeCond cond = new AttributeCond();\n+                        cond.setSchema(schema);\n+                        cond.setType(type);\n+                        cond.setExpression(expression);\n+\n+                        nodeCond = NodeCond.getLeafCond(cond);\n+                    }\n+\n+                    searchCondition = searchCondition != null\n+                            ? NodeCond.getAndCond(searchCondition, nodeCond)\n+                            : nodeCond;\n+                }\n+\n+                result.addAll(userSearchDAO.search(\n+                        EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                        searchCondition));\n             } else {\n-                LOG.warn(\"Invalid account Id source schema name: {}\",\n-                        schemaName);\n+\n+                final SyncopeUser user;\n+\n+                switch (accountIdMap.getIntMappingType()) {\n+                    case Username:\n+                        user = userDAO.find(uid);\n+                        if (user != null) {\n+                            result.add(user);\n+                        }\n+                        break;\n+                    case SyncopeUserId:\n+                        user = userDAO.find(Long.parseLong(uid));\n+                        if (user != null) {\n+                            result.add(user);\n+                        }\n+                        break;\n+                    case UserSchema:\n+                        final UAttrValue value = new UAttrValue();\n+                        value.setStringValue(uid);\n+                        result.addAll(userDAO.findByAttrValue(\n+                                accountIdMap.getIntAttrName(), value));\n+                        break;\n+                    case UserDerivedSchema:\n+                        result.addAll(userDAO.findByDerAttrValue(\n+                                accountIdMap.getIntAttrName(), uid));\n+                        break;\n+                    default:\n+                        LOG.error(\"Invalid accountId type '{}'\",\n+                                accountIdMap.getIntMappingType());\n+                }\n             }\n+        } catch (InvalidSearchConditionException e) {\n+            LOG.error(\"Could not search for matching users\", e);\n         }\n \n         return result;\n     }\n \n     private SyncResult createUser(final SyncDelta delta, final boolean dryRun) {\n-        SyncResult result = new SyncResult();\n+        final SyncResult result = new SyncResult();\n         result.setOperation(Operation.CREATE);\n \n-        UserTO userTO = getUserTO(delta.getObject());\n+        final UserTO userTO = getUserTO(delta.getObject());\n \n         // shortcut in case of dry run.\n         if (dryRun) {\n@@ -381,52 +510,58 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun) {\n         return result;\n     }\n \n-    private SyncResult updateUser(final SyncDelta delta,\n-            final SyncopeUser user, final boolean dryRun) {\n+    private List<SyncResult> updateUsers(final SyncDelta delta,\n+            final List<SyncopeUser> users, final boolean dryRun) {\n \n-        SyncResult result = new SyncResult();\n-        result.setOperation(Operation.UPDATE);\n-        try {\n-            UserMod userMod = getUserMod(\n-                    user.getId(), delta.getObject());\n+        LOG.debug(\"About to update {}\", users);\n+        final List<SyncResult> results = new ArrayList<SyncResult>();\n \n-            result.setStatus(SyncResult.Status.SUCCESS);\n-            result.setUserId(userMod.getId());\n-            result.setUsername(userMod.getUsername());\n+        for (SyncopeUser user : users) {\n+            final SyncResult result = new SyncResult();\n+            result.setOperation(Operation.UPDATE);\n \n-            if (!dryRun) {\n-                WorkflowResult<Map.Entry<Long, PropagationByResource>> updated =\n-                        wfAdapter.update(userMod);\n-                List<PropagationTask> tasks =\n-                        propagationManager.getUpdateTaskIds(\n-                        updated.getResult().getKey(), userMod.getPassword(),\n-                        null, null, null, updated.getResult().getValue(),\n-                        ((SyncTask) this.task).getResource().getName());\n-                propagationManager.execute(tasks);\n+            try {\n+                final UserMod userMod = getUserMod(user, delta.getObject());\n+\n+                result.setStatus(SyncResult.Status.SUCCESS);\n+                result.setUserId(userMod.getId());\n+                result.setUsername(userMod.getUsername());\n+\n+                if (!dryRun) {\n+                    WorkflowResult<Map.Entry<Long, PropagationByResource>> updated =\n+                            wfAdapter.update(userMod);\n+                    List<PropagationTask> tasks =\n+                            propagationManager.getUpdateTaskIds(\n+                            updated.getResult().getKey(), userMod.getPassword(),\n+                            null, null, null, updated.getResult().getValue(),\n+                            ((SyncTask) this.task).getResource().getName());\n+                    propagationManager.execute(tasks);\n+                }\n+            } catch (PropagationException e) {\n+                LOG.error(\"Could not propagate user \"\n+                        + delta.getUid().getUidValue(), e);\n+            } catch (Throwable t) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(t.getMessage());\n+                LOG.error(\"Could not update user \"\n+                        + delta.getUid().getUidValue(), t);\n             }\n-        } catch (PropagationException e) {\n-            LOG.error(\"Could not propagate user \"\n-                    + delta.getUid().getUidValue(), e);\n-        } catch (Throwable t) {\n-            result.setStatus(SyncResult.Status.FAILURE);\n-            result.setMessage(t.getMessage());\n-            LOG.error(\"Could not update user \"\n-                    + delta.getUid().getUidValue(), t);\n+\n+            results.add(result);\n         }\n-        return result;\n+        return results;\n     }\n \n     private List<SyncResult> deleteUsers(\n             final List<SyncopeUser> users, final boolean dryRun) {\n \n         LOG.debug(\"About to delete {}\", users);\n-        List<SyncResult> results =\n-                new ArrayList<SyncResult>();\n+        final List<SyncResult> results = new ArrayList<SyncResult>();\n \n         for (SyncopeUser user : users) {\n             Long userId = user.getId();\n \n-            SyncResult result = new SyncResult();\n+            final SyncResult result = new SyncResult();\n             result.setUserId(userId);\n             result.setUsername(user.getUsername());\n             result.setOperation(Operation.DELETE);\n@@ -475,18 +610,12 @@ private String createReport(final List<SyncResult> syncResults,\n             report.append(\"==>Dry run only, no modifications were made<==\\n\\n\");\n         }\n \n-        List<SyncResult> created =\n-                new ArrayList<SyncResult>();\n-        List<SyncResult> createdFailed =\n-                new ArrayList<SyncResult>();\n-        List<SyncResult> updated =\n-                new ArrayList<SyncResult>();\n-        List<SyncResult> updatedFailed =\n-                new ArrayList<SyncResult>();\n-        List<SyncResult> deleted =\n-                new ArrayList<SyncResult>();\n-        List<SyncResult> deletedFailed =\n-                new ArrayList<SyncResult>();\n+        List<SyncResult> created = new ArrayList<SyncResult>();\n+        List<SyncResult> createdFailed = new ArrayList<SyncResult>();\n+        List<SyncResult> updated = new ArrayList<SyncResult>();\n+        List<SyncResult> updatedFailed = new ArrayList<SyncResult>();\n+        List<SyncResult> deleted = new ArrayList<SyncResult>();\n+        List<SyncResult> deletedFailed = new ArrayList<SyncResult>();\n \n         for (SyncResult syncResult : syncResults) {\n             switch (syncResult.getStatus()) {\n@@ -583,13 +712,20 @@ private String createReport(final List<SyncResult> syncResults,\n     protected String doExecute(final boolean dryRun)\n             throws JobExecutionException {\n \n+        // get all entitlements to perform updates\n+        if (EntitlementUtil.getOwnedEntitlementNames().isEmpty()) {\n+            setupSecurity();\n+        }\n+\n         if (!(task instanceof SyncTask)) {\n-            throw new JobExecutionException(\"Task \" + taskId\n-                    + \" isn't a SyncTask\");\n+            throw new JobExecutionException(\n+                    \"Task \" + taskId + \" isn't a SyncTask\");\n         }\n \n         final SyncTask syncTask = (SyncTask) this.task;\n \n+        final SyncPolicy syncPolicy = syncTask.getResource().getSyncPolicy();\n+\n         ConnectorFacadeProxy connector;\n         try {\n             connector = connInstanceLoader.getConnector(syncTask.getResource());\n@@ -603,30 +739,32 @@ protected String doExecute(final boolean dryRun)\n             throw new JobExecutionException(msg, e);\n         }\n \n-        List<SyncDelta> deltas;\n+        final List<SyncDelta> deltas;\n         try {\n             deltas = connector.sync(\n                     syncTask.getResource().getSyncToken());\n         } catch (Throwable t) {\n             throw new JobExecutionException(\"While syncing on connector\", t);\n         }\n \n-        SchemaMapping accountIdMap =\n+        final SchemaMapping accountIdMap =\n                 syncTask.getResource().getAccountIdMapping();\n         if (accountIdMap == null) {\n             throw new JobExecutionException(\n                     \"Invalid account id mapping for resource \"\n                     + syncTask.getResource());\n         }\n \n-        List<SyncResult> results =\n-                new ArrayList<SyncResult>();\n+        final List<SyncResult> results = new ArrayList<SyncResult>();\n+\n+        final ConflictResolutionAction conflictResolutionAction =\n+                syncPolicy != null && syncPolicy.getSpecification() != null\n+                ? ((SyncPolicySpec) syncPolicy.getSpecification()).\n+                getConflictResolutionAction()\n+                : ConflictResolutionAction.IGNORE;\n+\n         for (SyncDelta delta : deltas) {\n-            List<SyncopeUser> users =\n-                    findExistingUsers(accountIdMap.getIntAttrName(),\n-                    delta.getUid().getUidValue(),\n-                    delta.getPreviousUid() == null\n-                    ? null : delta.getPreviousUid().getUidValue());\n+            List<SyncopeUser> users = findExistingUsers(delta);\n \n             switch (delta.getDeltaType()) {\n                 case CREATE_OR_UPDATE:\n@@ -637,30 +775,78 @@ protected String doExecute(final boolean dryRun)\n                             LOG.debug(\"SyncTask not configured for create\");\n                         }\n                     } else if (users.size() == 1) {\n-                        if (syncTask.isPerformUpdate()) {\n-                            results.add(\n-                                    updateUser(delta, users.get(0), dryRun));\n-                        } else {\n-                            LOG.debug(\"SyncTask not configured for update\");\n-                        }\n+                        performUpdate(\n+                                syncTask, delta,\n+                                users.subList(0, 1),\n+                                dryRun, results);\n                     } else {\n-                        LOG.error(\"More than one user matching {}\", users);\n+                        switch (conflictResolutionAction) {\n+                            case IGNORE:\n+                                LOG.error(\"More than one match {}\", users);\n+                                break;\n+                            case FIRSTMATCH:\n+                                performUpdate(\n+                                        syncTask, delta,\n+                                        users.subList(0, 1),\n+                                        dryRun, results);\n+                                break;\n+                            case LASTMATCH:\n+                                performUpdate(\n+                                        syncTask, delta,\n+                                        users.subList(\n+                                        users.size() - 1, users.size()),\n+                                        dryRun, results);\n+                                break;\n+                            case ALL:\n+                                performUpdate(\n+                                        syncTask, delta,\n+                                        users,\n+                                        dryRun, results);\n+                        }\n                     }\n                     break;\n \n                 case DELETE:\n-                    if (syncTask.isPerformDelete()) {\n-                        results.addAll(deleteUsers(users, dryRun));\n+                    if (users.isEmpty()) {\n+                        LOG.debug(\"No match found for deletion\");\n+                    } else if (users.size() == 1) {\n+                        performDelete(syncTask, users, dryRun, results);\n                     } else {\n-                        LOG.debug(\"SyncTask not configured for delete\");\n+                        switch (conflictResolutionAction) {\n+                            case IGNORE:\n+                                LOG.error(\"More than one match {}\", users);\n+                                break;\n+                            case FIRSTMATCH:\n+                                performDelete(\n+                                        syncTask,\n+                                        users.subList(0, 1),\n+                                        dryRun,\n+                                        results);\n+                                break;\n+                            case LASTMATCH:\n+                                performDelete(\n+                                        syncTask,\n+                                        users.subList(\n+                                        users.size() - 1, users.size()),\n+                                        dryRun,\n+                                        results);\n+                                break;\n+                            case ALL:\n+                                performDelete(\n+                                        syncTask,\n+                                        users,\n+                                        dryRun,\n+                                        results);\n+                        }\n                     }\n+\n                     break;\n \n                 default:\n             }\n         }\n \n-        String result = createReport(results, syncTask.getResource().\n+        final String result = createReport(results, syncTask.getResource().\n                 getSyncTraceLevel(), dryRun);\n         LOG.debug(\"Sync result: {}\", result);\n \n@@ -676,6 +862,33 @@ protected String doExecute(final boolean dryRun)\n         return result.toString();\n     }\n \n+    private void performUpdate(\n+            final SyncTask task,\n+            final SyncDelta delta,\n+            final List<SyncopeUser> users,\n+            final boolean dryRun,\n+            final List<SyncResult> results) {\n+\n+        if (task.isPerformUpdate()) {\n+            results.addAll(updateUsers(delta, users, dryRun));\n+        } else {\n+            LOG.debug(\"SyncTask not configured for update\");\n+        }\n+    }\n+\n+    private void performDelete(\n+            final SyncTask task,\n+            final List<SyncopeUser> users,\n+            final boolean dryRun,\n+            final List<SyncResult> results) {\n+\n+        if (task.isPerformDelete()) {\n+            results.addAll(deleteUsers(users, dryRun));\n+        } else {\n+            LOG.debug(\"SyncTask not configured for delete\");\n+        }\n+    }\n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -690,4 +903,24 @@ protected boolean hasToBeRegistered(final TaskExec execution) {\n                 >= TraceLevel.FAILURES.ordinal())\n                 || syncTask.getResource().getSyncTraceLevel() == TraceLevel.ALL;\n     }\n+\n+    /**\n+     * Used to simulate authentication in order to perform updates through \n+     * AbstractUserWorkflowAdapter.\n+     */\n+    public void setupSecurity() {\n+        final List<GrantedAuthority> authorities =\n+                new ArrayList<GrantedAuthority>();\n+\n+        for (Entitlement entitlement : entitlementDAO.findAll()) {\n+            authorities.add(new GrantedAuthorityImpl(entitlement.getName()));\n+        }\n+\n+        final UserDetails userDetails = new User(\n+                \"admin\", \"FAKE_PASSWORD\", true, true, true, true, authorities);\n+\n+        SecurityContextHolder.getContext().setAuthentication(\n+                new UsernamePasswordAuthenticationToken(\n+                userDetails, \"FAKE_PASSWORD\", authorities));\n+    }\n }"},{"sha":"2319612b208511293d457ab759913a8dfa84f2d8","filename":"core/src/main/java/org/syncope/core/util/EntitlementUtil.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FEntitlementUtil.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -19,6 +19,7 @@\n import java.util.Set;\n import java.util.regex.Pattern;\n import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.syncope.core.persistence.beans.Entitlement;\n \n@@ -28,14 +29,20 @@ public class EntitlementUtil {\n             Pattern.compile(\"^ROLE_([\\\\d])+\");\n \n     public static Set<String> getOwnedEntitlementNames() {\n-        Set<String> result = new HashSet<String>(\n-                SecurityContextHolder.getContext().\n-                getAuthentication().getAuthorities().size());\n-        for (GrantedAuthority authority :\n-                SecurityContextHolder.getContext().\n-                getAuthentication().getAuthorities()) {\n-\n-            result.add(authority.getAuthority());\n+        final Set<String> result = new HashSet<String>();\n+\n+        final SecurityContext ctx = SecurityContextHolder.getContext();\n+\n+        if (ctx != null\n+                && ctx.getAuthentication() != null\n+                && ctx.getAuthentication().getAuthorities() != null) {\n+\n+            for (GrantedAuthority authority :\n+                    SecurityContextHolder.getContext().\n+                    getAuthentication().getAuthorities()) {\n+\n+                result.add(authority.getAuthority());\n+            }\n         }\n \n         return result;"},{"sha":"586f838b0e85e9cf4238dbe69f4a14fda4de4f34","filename":"core/src/test/java/org/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -158,16 +158,16 @@ public final void update() {\n     @Test\n     public final void delete() {\n         final PolicyTO policyTO = restTemplate.getForObject(\n-                BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 3L);\n+                BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 7L);\n \n         assertNotNull(\"find to delete did not work\", policyTO);\n \n-        restTemplate.delete(BASE_URL + \"policy/delete/{id}\", 3L);\n+        restTemplate.delete(BASE_URL + \"policy/delete/{id}\", 7L);\n \n         Throwable t = null;\n         try {\n             restTemplate.getForObject(\n-                    BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 3L);\n+                    BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 7L);\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n         }"},{"sha":"d08afb1f6c1264de67617e4293694ce99d8db60f","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -122,11 +122,11 @@ public final void createUEnumWithoutEnumeration() {\n \n     @Test\n     public void delete() {\n-        restTemplate.delete(BASE_URL + \"schema/user/delete/firstname.json\");\n+        restTemplate.delete(BASE_URL + \"schema/user/delete/cool.json\");\n         SchemaTO firstname = null;\n         try {\n             firstname = restTemplate.getForObject(BASE_URL\n-                    + \"schema/user/read/firstname.json\", SchemaTO.class);\n+                    + \"schema/user/read/cool.json\", SchemaTO.class);\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }"},{"sha":"b62d509cf5313f4ddba8f4dc811b67b0fb45dadc","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":68,"deletions":2,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -21,11 +21,13 @@\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.TaskExecTO;\n import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.to.SchedTaskTO;\n import org.syncope.client.to.SyncTaskTO;\n import org.syncope.client.to.TaskTO;\n+import org.syncope.client.to.UserTO;\n import org.syncope.core.propagation.PropagationTaskExecStatus;\n \n public class TaskTestITCase extends AbstractTest {\n@@ -187,6 +189,56 @@ public final void deal() {\n \n     @Test\n     public void sync() {\n+        //-----------------------------\n+        // Create a new user ... it should be updated applying sync policy\n+        //-----------------------------\n+        UserTO userTO = new UserTO();\n+        userTO.setPassword(\"password123\");\n+        userTO.setUsername(\"test9\");\n+\n+        AttributeTO firstnameTO = new AttributeTO();\n+        firstnameTO.setSchema(\"firstname\");\n+        firstnameTO.addValue(\"nome9\");\n+        userTO.addAttribute(firstnameTO);\n+\n+        AttributeTO surnameTO = new AttributeTO();\n+        surnameTO.setSchema(\"surname\");\n+        surnameTO.addValue(\"cognome\");\n+        userTO.addAttribute(surnameTO);\n+\n+        AttributeTO typeTO = new AttributeTO();\n+        typeTO.setSchema(\"type\");\n+        typeTO.addValue(\"a type\");\n+        userTO.addAttribute(typeTO);\n+\n+        AttributeTO fullnameTO = new AttributeTO();\n+        fullnameTO.setSchema(\"fullname\");\n+        fullnameTO.addValue(\"nome cognome\");\n+        userTO.addAttribute(fullnameTO);\n+\n+        AttributeTO userIdTO = new AttributeTO();\n+        userIdTO.setSchema(\"userId\");\n+        userIdTO.addValue(\"user5@syncope-idm.org\");\n+        userTO.addAttribute(userIdTO);\n+\n+        AttributeTO emailTO = new AttributeTO();\n+        emailTO.setSchema(\"email\");\n+        emailTO.addValue(\"user5@syncope-idm.org\");\n+        userTO.addAttribute(emailTO);\n+\n+        // add a derived attribute (accountId for csvdir)\n+        AttributeTO csvuseridTO = new AttributeTO();\n+        csvuseridTO.setSchema(\"csvuserid\");\n+        userTO.addDerivedAttribute(csvuseridTO);\n+\n+        userTO.addResource(\"resource-csv\");\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+        //-----------------------------\n+\n         Integer usersPre = restTemplate.getForObject(\n                 BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(usersPre);\n@@ -201,12 +253,26 @@ public void sync() {\n         } catch (InterruptedException e) {\n         }\n \n+        // check for sync policy\n+\n+        userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"test9\", userTO.getUsername());\n+        assertEquals(\"test9@syncope.org\",\n+                userTO.getAttributeMap().get(\"email\").get(0));\n+        assertEquals(\"test9@syncope.org\",\n+                userTO.getAttributeMap().get(\"userId\").get(0));\n+        assertEquals(\"test9\",\n+                userTO.getAttributeMap().get(\"fullname\").get(0));\n+\n         Integer usersPost = restTemplate.getForObject(\n                 BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(usersPost);\n \n-        assertTrue(\"Expected \" + (usersPre + 10) + \", found \" + usersPost,\n-                usersPost == usersPre + 10);\n+        assertTrue(\"Expected \" + (usersPre + 9) + \", found \" + usersPost,\n+                usersPost == usersPre + 9);\n     }\n \n     @Test"},{"sha":"52814fcfb2b7e336949ad4fbc5c1d3aff4602bf7","filename":"core/src/test/resources/content.xml","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bdb5abc39cf36afc87beded34032e683be206888/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=bdb5abc39cf36afc87beded34032e683be206888","patch":"@@ -25,11 +25,12 @@\n     <!-- sample policies -->\n     <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicySpec%22/%3E%0A%3C/java%3E+%0A\"/>\n     <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"global password policy\" type=\"GLOBAL_PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E1%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n-    <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicySpec%22/%3E%0A%3C/java%3E+%0A\"/>\n+    <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_29%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22conflictResolutionAction%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.types.ConflictResolutionAction%22+method%3D%22valueOf%22%3E+%0A++++%3Cstring%3EALL%3C/string%3E+%0A+++%3C/object%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22alternativeSearchAttrs%22%3E%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Eusername%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Efirstname%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n     <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E0%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E10%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n     <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n     <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E4%3C/int%3E+%0A++%3C/void%3E%0A++%3Cvoid+property%3D%22permittedLoginRetries%22%3E+%0A+++%3Cint%3E3%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n-\n+    <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicySpec%22/%3E%0A%3C/java%3E+%0A\"/>\n+    \n     <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n                  username=\"user1\" creationDate=\"2010-10-20 11:00:00\"/>\n     <SyncopeUser id=\"2\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n@@ -260,11 +261,11 @@\n                       propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" passwordPolicy_id=\"4\"/>\n     <ExternalResource name=\"resource-testdb\" connector_id=\"101\" forceMandatoryConstraint=\"1\" propagationMode=\"SYNC\"\n                       propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n-    <ExternalResource name=\"resource-csv\" connector_id=\"104\" forceMandatoryConstraint=\"0\" propagationMode=\"ASYNC\"\n+    <ExternalResource name=\"resource-csv\" connector_id=\"104\" forceMandatoryConstraint=\"0\" propagationMode=\"ASYNC\" syncPolicy_id=\"3\"\n                       propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n     <ExternalResource name=\"ws-target-resource-update-resetsynctoken\" connector_id=\"100\" forceMandatoryConstraint=\"1\" propagationMode=\"ASYNC\"\n                       propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" serializedSyncToken=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3Cjava+version%3D%221.6.0_24%22+class%3D%22java.beans.XMLDecoder%22%3E%3C%2Fjava%3E\"/>\n-                    \n+                      \n     <SyncopeUser_ExternalResource users_id=\"3\" externalResources_name=\"ws-target-resource-delete\" />\n     <SyncopeRole_ExternalResource roles_id=\"3\" externalResources_name=\"ws-target-resource-list-mappings-1\" />\n     <SyncopeUser_ExternalResource users_id=\"3\" externalResources_name=\"ws-target-resource-2\" />\n@@ -366,7 +367,7 @@\n                    resource_name=\"resource-testdb\"\n                    intMappingType=\"Password\" mandatoryCondition=\"true\"\n                    accountid=\"0\" password=\"1\"/>\n-\n+                   \n     <SchemaMapping id=\"200\" extAttrName=\"id\"\n                    resource_name=\"resource-csv\"\n                    intMappingType=\"Username\" mandatoryCondition=\"true\"\n@@ -391,7 +392,11 @@\n                    resource_name=\"resource-csv\"\n                    intAttrName=\"userId\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"0\" password=\"0\"/>\n-    <SchemaMapping id=\"206\" extAttrName=\"IGNORE\"\n+    <SchemaMapping id=\"206\" extAttrName=\"email\"\n+                   resource_name=\"resource-csv\"\n+                   intAttrName=\"email\" intMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                   accountid=\"0\" password=\"0\"/>\n+    <SchemaMapping id=\"207\" extAttrName=\"IGNORE\"\n                    resource_name=\"resource-csv\"\n                    intAttrName=\"csvuserid\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n                    accountid=\"1\" password=\"0\"/>\n@@ -404,7 +409,7 @@\n                    resource_name=\"ws-target-resource-update-resetsynctoken\"\n                    intAttrName=\"fullname\" intMappingType=\"UserSchema\" mandatoryCondition=\"false\"\n                    accountid=\"0\" password=\"1\"/>\n-\n+                   \n     <Task DTYPE=\"PropagationTask\" id=\"1\" propagationMode=\"ASYNC\" resourceOperationType=\"UPDATE\"\n                  resource_name=\"ws-target-resource-2\"\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n@@ -422,7 +427,7 @@\n     <Task DTYPE=\"PropagationTask\" id=\"6\" propagationMode=\"ASYNC\" resourceOperationType=\"UPDATE\"\n                  resource_name=\"ws-target-resource-nopropagation\"\n                  xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n-\n+          \n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n \n     <RDerAttr id=\"1001\" derivedSchema_name=\"displayProperty\" owner_id=\"1\"/>"}]}