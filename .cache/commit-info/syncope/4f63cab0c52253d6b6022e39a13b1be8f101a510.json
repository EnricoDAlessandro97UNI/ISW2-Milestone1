{"sha":"4f63cab0c52253d6b6022e39a13b1be8f101a510","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRmNjNjYWIwYzUyMjUzZDZiNjAyMmUzOWExM2IxYmU4ZjEwMWE1MTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-12-30T14:13:20Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-12-30T17:09:10Z"},"message":"[SYNCOPE-1531] Core support","tree":{"sha":"588d3cb4896e6d5f1b8c2fd9b0966f6abab463b0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/588d3cb4896e6d5f1b8c2fd9b0966f6abab463b0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4f63cab0c52253d6b6022e39a13b1be8f101a510","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4f63cab0c52253d6b6022e39a13b1be8f101a510","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4f63cab0c52253d6b6022e39a13b1be8f101a510","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4f63cab0c52253d6b6022e39a13b1be8f101a510/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"88c7aa52edcbf5f1e572ce2b2b9543a465ecb98e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88c7aa52edcbf5f1e572ce2b2b9543a465ecb98e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/88c7aa52edcbf5f1e572ce2b2b9543a465ecb98e"}],"stats":{"total":4192,"additions":3683,"deletions":509},"files":[{"sha":"78443355e70e8bf3dee31dbd5f95a3ef84d221d8","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AbstractCSVSpec.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,229 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+\n+public abstract class AbstractCSVSpec {\n+\n+    protected abstract static class Builder<T extends AbstractCSVSpec, B extends Builder<T, B>> {\n+\n+        protected T instance;\n+\n+        protected abstract T newInstance();\n+\n+        protected T getInstance() {\n+            if (instance == null) {\n+                instance = newInstance();\n+            }\n+            return instance;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B columnSeparator(final char columnSeparator) {\n+            getInstance().setColumnSeparator(columnSeparator);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B arrayElementSeparator(final String arrayElementSeparator) {\n+            getInstance().setArrayElementSeparator(arrayElementSeparator);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B quoteChar(final char quoteChar) {\n+            getInstance().setQuoteChar(quoteChar);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B escapeChar(final char escapeChar) {\n+            getInstance().setEscapeChar(escapeChar);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B lineSeparator(final String lineSeparatorChar) {\n+            getInstance().setLineSeparator(lineSeparatorChar);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B nullValue(final String nullValue) {\n+            getInstance().setNullValue(nullValue);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B allowComments(final boolean allowComments) {\n+            getInstance().setAllowComments(allowComments);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B unmatchingRule(final UnmatchingRule unmatchingRule) {\n+            getInstance().setUnmatchingRule(unmatchingRule);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B matchingRule(final MatchingRule matchingRule) {\n+            getInstance().setMatchingRule(matchingRule);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B action(final String action) {\n+            getInstance().getActions().add(action);\n+            return (B) this;\n+        }\n+\n+        public T build() {\n+            return getInstance();\n+        }\n+    }\n+\n+    protected String anyTypeKey;\n+\n+    protected char columnSeparator = ',';\n+\n+    protected String arrayElementSeparator = \";\";\n+\n+    protected char quoteChar = '\"';\n+\n+    protected Character escapeChar;\n+\n+    protected String lineSeparator = \"\\n\";\n+\n+    protected String nullValue = \"\";\n+\n+    protected boolean allowComments;\n+\n+    protected UnmatchingRule unmatchingRule = UnmatchingRule.PROVISION;\n+\n+    protected MatchingRule matchingRule = MatchingRule.UPDATE;\n+\n+    protected List<String> actions = new ArrayList<>();\n+\n+    public String getAnyTypeKey() {\n+        return anyTypeKey;\n+    }\n+\n+    @NotNull\n+    @QueryParam(\"anyTypeKey\")\n+    public void setAnyTypeKey(final String anyTypeKey) {\n+        this.anyTypeKey = anyTypeKey;\n+    }\n+\n+    public char getColumnSeparator() {\n+        return columnSeparator;\n+    }\n+\n+    @QueryParam(\"columnSeparator\")\n+    public void setColumnSeparator(final char columnSeparator) {\n+        this.columnSeparator = columnSeparator;\n+    }\n+\n+    public String getArrayElementSeparator() {\n+        return arrayElementSeparator;\n+    }\n+\n+    @QueryParam(\"arrayElementSeparator\")\n+    public void setArrayElementSeparator(final String arrayElementSeparator) {\n+        this.arrayElementSeparator = arrayElementSeparator;\n+    }\n+\n+    public char getQuoteChar() {\n+        return quoteChar;\n+    }\n+\n+    @QueryParam(\"quoteChar\")\n+    public void setQuoteChar(final char quoteChar) {\n+        this.quoteChar = quoteChar;\n+    }\n+\n+    public Character getEscapeChar() {\n+        return escapeChar;\n+    }\n+\n+    @QueryParam(\"escapeChar\")\n+    public void setEscapeChar(final Character escapeChar) {\n+        this.escapeChar = escapeChar;\n+    }\n+\n+    public String getLineSeparator() {\n+        return lineSeparator;\n+    }\n+\n+    @QueryParam(\"lineSeparator\")\n+    public void setLineSeparator(final String lineSeparator) {\n+        this.lineSeparator = lineSeparator;\n+    }\n+\n+    public String getNullValue() {\n+        return nullValue;\n+    }\n+\n+    @QueryParam(\"nullValue\")\n+    public void setNullValue(final String nullValue) {\n+        this.nullValue = nullValue;\n+    }\n+\n+    public boolean isAllowComments() {\n+        return allowComments;\n+    }\n+\n+    @QueryParam(\"allowComments\")\n+    public void setAllowComments(final boolean allowComments) {\n+        this.allowComments = allowComments;\n+    }\n+\n+    public UnmatchingRule getUnmatchingRule() {\n+        return unmatchingRule;\n+    }\n+\n+    @QueryParam(\"unmatchingRule\")\n+    public void setUnmatchingRule(final UnmatchingRule unmatchingRule) {\n+        this.unmatchingRule = unmatchingRule;\n+    }\n+\n+    public MatchingRule getMatchingRule() {\n+        return matchingRule;\n+    }\n+\n+    @QueryParam(\"matchingRule\")\n+    public void setMatchingRule(final MatchingRule matchingRule) {\n+        this.matchingRule = matchingRule;\n+    }\n+\n+    public List<String> getActions() {\n+        return actions;\n+    }\n+\n+    @QueryParam(\"actions\")\n+    public void setActions(final List<String> actions) {\n+        this.actions = actions;\n+    }\n+}"},{"sha":"7bb8a2d72c4cdfd9a000b7b0b7db58085dadb980","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/CSVPullSpec.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPullSpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPullSpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPullSpec.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+\n+public class CSVPullSpec extends AbstractCSVSpec {\n+\n+    public static class Builder extends AbstractCSVSpec.Builder<CSVPullSpec, Builder> {\n+\n+        @Override\n+        protected CSVPullSpec newInstance() {\n+            return new CSVPullSpec();\n+        }\n+\n+        public Builder(final String anyTypeKey, final String keyColumn) {\n+            getInstance().setAnyTypeKey(anyTypeKey);\n+            getInstance().setKeyColumn(keyColumn);\n+        }\n+\n+        public Builder remediation(final boolean remediation) {\n+            instance.setRemediation(remediation);\n+            return this;\n+        }\n+\n+        public Builder ignoreColumns(final String... ignoreColumns) {\n+            instance.getIgnoreColumns().addAll(Stream.of(ignoreColumns).collect(Collectors.toList()));\n+            return this;\n+        }\n+\n+        public Builder destinationRealm(final String destinationRealm) {\n+            instance.setDestinationRealm(destinationRealm);\n+            return this;\n+        }\n+\n+        public Builder conflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n+            instance.setConflictResolutionAction(conflictResolutionAction);\n+            return this;\n+        }\n+\n+        public Builder pullCorrelationRule(final String pullCorrelationRule) {\n+            instance.setPullCorrelationRule(pullCorrelationRule);\n+            return this;\n+        }\n+    }\n+\n+    private String destinationRealm = SyncopeConstants.ROOT_REALM;\n+\n+    private String keyColumn;\n+\n+    private Set<String> ignoreColumns = new HashSet<>();\n+\n+    private boolean remediation;\n+\n+    private ConflictResolutionAction conflictResolutionAction = ConflictResolutionAction.IGNORE;\n+\n+    private String pullCorrelationRule;\n+\n+    public String getDestinationRealm() {\n+        return destinationRealm;\n+    }\n+\n+    @QueryParam(\"destinationRealm\")\n+    public void setDestinationRealm(final String destinationRealm) {\n+        this.destinationRealm = destinationRealm;\n+    }\n+\n+    public String getKeyColumn() {\n+        return keyColumn;\n+    }\n+\n+    @NotNull\n+    @QueryParam(\"keyColumn\")\n+    public void setKeyColumn(final String keyColumn) {\n+        this.keyColumn = keyColumn;\n+    }\n+\n+    public Set<String> getIgnoreColumns() {\n+        return ignoreColumns;\n+    }\n+\n+    @QueryParam(\"ignoreColumns\")\n+    public void setIgnoreColumns(final Set<String> ignoreColumns) {\n+        this.ignoreColumns = ignoreColumns;\n+    }\n+\n+    public boolean isRemediation() {\n+        return remediation;\n+    }\n+\n+    @QueryParam(\"remediation\")\n+    public void setRemediation(final boolean remediation) {\n+        this.remediation = remediation;\n+    }\n+\n+    public ConflictResolutionAction getConflictResolutionAction() {\n+        return conflictResolutionAction;\n+    }\n+\n+    @QueryParam(\"conflictResolutionAction\")\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n+        this.conflictResolutionAction = conflictResolutionAction;\n+    }\n+\n+    public String getPullCorrelationRule() {\n+        return pullCorrelationRule;\n+    }\n+\n+    @QueryParam(\"pullCorrelationRule\")\n+    public void setPullCorrelationRule(final String pullCorrelationRule) {\n+        this.pullCorrelationRule = pullCorrelationRule;\n+    }\n+}"},{"sha":"92b2196c8291b4f51cf159f2a7108f3daf7f9b6e","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/CSVPushSpec.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPushSpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPushSpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPushSpec.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.ws.rs.QueryParam;\n+\n+public class CSVPushSpec extends AbstractCSVSpec {\n+\n+    public static class Builder extends AbstractCSVSpec.Builder<CSVPushSpec, Builder> {\n+\n+        @Override\n+        protected CSVPushSpec newInstance() {\n+            return new CSVPushSpec();\n+        }\n+\n+        public Builder(final String anyTypeKey) {\n+            getInstance().setAnyTypeKey(anyTypeKey);\n+        }\n+\n+        public Builder field(final String field) {\n+            getInstance().getFields().add(field);\n+            return this;\n+        }\n+\n+        public Builder fields(final Collection<String> fields) {\n+            getInstance().getFields().addAll(fields);\n+            return this;\n+        }\n+\n+        public Builder plainAttr(final String plainAttr) {\n+            getInstance().getPlainAttrs().add(plainAttr);\n+            return this;\n+        }\n+\n+        public Builder plainAttrs(final Collection<String> plainAttrs) {\n+            getInstance().getPlainAttrs().addAll(plainAttrs);\n+            return this;\n+        }\n+\n+        public Builder derAttr(final String derAttr) {\n+            getInstance().getDerAttrs().add(derAttr);\n+            return this;\n+        }\n+\n+        public Builder derAttrs(final Collection<String> derAttrs) {\n+            getInstance().getDerAttrs().addAll(derAttrs);\n+            return this;\n+        }\n+\n+        public Builder virAttr(final String virAttr) {\n+            getInstance().getVirAttrs().add(virAttr);\n+            return this;\n+        }\n+\n+        public Builder virAttrs(final Collection<String> virAttrs) {\n+            getInstance().getVirAttrs().addAll(virAttrs);\n+            return this;\n+        }\n+\n+        public Builder ignorePagination(final boolean ignorePagination) {\n+            getInstance().setIgnorePaging(ignorePagination);\n+            return this;\n+        }\n+    }\n+\n+    private List<String> fields = new ArrayList<>();\n+\n+    private List<String> plainAttrs = new ArrayList<>();\n+\n+    private List<String> derAttrs = new ArrayList<>();\n+\n+    private List<String> virAttrs = new ArrayList<>();\n+\n+    private boolean ignorePaging;\n+\n+    public List<String> getFields() {\n+        return fields;\n+    }\n+\n+    @QueryParam(\"fields\")\n+    public void setFields(final List<String> fields) {\n+        this.fields = fields;\n+    }\n+\n+    public List<String> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @QueryParam(\"plainAttrs\")\n+    public void setPlainAttrs(final List<String> plainAttrs) {\n+        this.plainAttrs = plainAttrs;\n+    }\n+\n+    public List<String> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @QueryParam(\"derAttrs\")\n+    public void setDerAttrs(final List<String> derAttrs) {\n+        this.derAttrs = derAttrs;\n+    }\n+\n+    public List<String> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @QueryParam(\"virAttrs\")\n+    public void setVirAttrs(final List<String> virAttrs) {\n+        this.virAttrs = virAttrs;\n+    }\n+\n+    public boolean isIgnorePaging() {\n+        return ignorePaging;\n+    }\n+\n+    @QueryParam(\"ignorePaging\")\n+    public void setIgnorePaging(final boolean ignorePaging) {\n+        this.ignorePaging = ignorePaging;\n+    }\n+}"},{"sha":"a2c8193b56d59514e3dbd7fe1e5295f514b682e2","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -23,6 +23,8 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.io.InputStream;\n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n@@ -31,10 +33,15 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n+import org.apache.syncope.common.rest.api.beans.CSVPushSpec;\n import org.apache.syncope.common.rest.api.beans.ReconQuery;\n \n /**\n@@ -84,4 +91,30 @@ public interface ReconciliationService extends JAXRSService {\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void pull(@BeanParam ReconQuery query, @NotNull PullTaskTO pullTask);\n+\n+    /**\n+     * Export a list of any objects matching the given query as CSV according to the provided specification.\n+     *\n+     * @param anyQuery query conditions\n+     * @param spec CSV push specification\n+     * @return CSV content matching the provided specification\n+     */\n+    @GET\n+    @Path(\"csv/push\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ RESTHeaders.TEXT_CSV })\n+    Response push(@BeanParam AnyQuery anyQuery, @BeanParam CSVPushSpec spec);\n+\n+    /**\n+     * Pulls the CSV input into Syncope according to the provided specification.\n+     *\n+     * @param spec CSV pull specification\n+     * @param csv CSV input\n+     * @return pull report\n+     */\n+    @POST\n+    @Path(\"csv/pull\")\n+    @Consumes({ RESTHeaders.TEXT_CSV })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    List<ProvisioningReport> pull(@BeanParam CSVPullSpec spec, InputStream csv);\n }"},{"sha":"501ecb9715fef80f7c1fcd76fa8c50262c539c5d","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AccessTokenTO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -72,5 +72,4 @@ public String getOwner() {\n     public void setOwner(final String owner) {\n         this.owner = owner;\n     }\n-\n }"},{"sha":"216ab568274c9b6ea0059634836940520953fb3f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningReport.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningReport.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.api.pushpull;\n+package org.apache.syncope.common.lib.to;\n \n import java.util.Collection;\n import org.apache.commons.lang3.StringUtils;","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningReport.java"},{"sha":"fdabce04c852408fb3b68f8a3b7493347cf57892","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -67,6 +67,11 @@ public final class RESTHeaders {\n      */\n     public static final MediaType APPLICATION_YAML_TYPE = new MediaType(\"application\", \"yaml\");\n \n+    /**\n+     * Mediatype for text/csv, not defined in {@link javax.ws.rs.core.MediaType}.\n+     */\n+    public static final String TEXT_CSV = \"text/csv\";\n+\n     /**\n      * Mediatype for multipart/mixed, not defined in {@link javax.ws.rs.core.MediaType}.\n      */\n@@ -79,7 +84,7 @@ public final class RESTHeaders {\n \n     /**\n      * Builds Content-Type string for multipart/mixed and the given boundary.\n-     * \n+     *\n      * @param boundary multipart boundary value\n      * @return multipart/mixed Content-Type string, with given boundary\n      */"},{"sha":"baf271cc35f8828e11c01f50007435245cb30f0d","filename":"core/idm/logic/pom.xml","status":"modified","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fpom.xml?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -38,6 +38,11 @@ under the License.\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.dataformat</groupId>\n+      <artifactId>jackson-dataformat-csv</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.syncope.core.idrepo</groupId>\n       <artifactId>syncope-core-idrepo-logic</artifactId>\n@@ -48,6 +53,45 @@ under the License.\n       <artifactId>syncope-common-idm-rest-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-workflow-java</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.el</groupId>\n+      <artifactId>javax.el-api</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-jpa</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-simple</artifactId>\n+      <version>${slf4j.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>\n@@ -57,6 +101,27 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n     </resources>\n+    <testResources>\n+      <testResource>\n+        <directory>${basedir}/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../persistence-jpa/src/main/resources</directory>\n+        <includes>\n+          <include>persistence.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../persistence-jpa/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../provisioning-java/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n         \n     <plugins>\n       <plugin>"},{"sha":"388f82b759662a31ff27dd9e70194bb92b5388bd","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":216,"deletions":3,"changes":219,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,9 +18,16 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import com.fasterxml.jackson.databind.MappingIterator;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.dataformat.csv.CsvMapper;\n+import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n@@ -35,9 +42,8 @@\n import org.apache.syncope.common.lib.to.ReconStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.IdMEntitlement;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.MatchType;\n+import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -54,13 +60,30 @@\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.types.AnyEntitlement;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.rest.api.beans.AbstractCSVSpec;\n+import org.apache.syncope.common.rest.api.beans.CSVPushSpec;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePullExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePushExecutor;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPullExecutor;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPushExecutor;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n import org.apache.syncope.core.provisioning.java.pushpull.OutboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.Uid;\n@@ -84,6 +107,18 @@ public class ReconciliationLogic extends AbstractTransactionalLogic<EntityTO> {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private AnySearchDAO searchDAO;\n+\n     @Autowired\n     private VirAttrHandler virAttrHandler;\n \n@@ -105,6 +140,12 @@ public class ReconciliationLogic extends AbstractTransactionalLogic<EntityTO> {\n     @Autowired\n     private SyncopeSinglePushExecutor singlePushExecutor;\n \n+    @Autowired\n+    private SyncopeStreamPushExecutor streamPushExecutor;\n+\n+    @Autowired\n+    private SyncopeStreamPullExecutor streamPullExecutor;\n+\n     private Provision getProvision(final String anyTypeKey, final String resourceKey) {\n         AnyType anyType = anyTypeDAO.find(anyTypeKey);\n         if (anyType == null) {\n@@ -337,6 +378,178 @@ public void pull(final ReconQuery query, final PullTaskTO pullTask) {\n         }\n     }\n \n+    private CsvSchema csvSchema(final AbstractCSVSpec spec, final CsvSchema base) {\n+        CsvSchema schema = base.\n+                withColumnSeparator(spec.getColumnSeparator()).\n+                withArrayElementSeparator(spec.getArrayElementSeparator()).\n+                withQuoteChar(spec.getQuoteChar()).\n+                withLineSeparator(spec.getLineSeparator()).\n+                withNullValue(spec.getNullValue()).\n+                withAllowComments(spec.isAllowComments());\n+        if (spec.getEscapeChar() != null) {\n+            schema = schema.withEscapeChar(spec.getEscapeChar());\n+        }\n+\n+        return schema;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n+    public List<ProvisioningReport> push(\n+            final SearchCond searchCond,\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderBy,\n+            final String realm,\n+            final CSVPushSpec spec,\n+            final OutputStream os) {\n+\n+        AnyType anyType = anyTypeDAO.find(spec.getAnyTypeKey());\n+        if (anyType == null) {\n+            throw new NotFoundException(\"AnyType '\" + spec.getAnyTypeKey() + \"'\");\n+        }\n+\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(anyType.getKind());\n+\n+        String entitlement;\n+        switch (anyType.getKind()) {\n+            case GROUP:\n+                entitlement = IdRepoEntitlement.GROUP_SEARCH;\n+                break;\n+\n+            case ANY_OBJECT:\n+                entitlement = AnyEntitlement.SEARCH.getFor(anyType.getKey());\n+                break;\n+\n+            case USER:\n+            default:\n+                entitlement = IdRepoEntitlement.USER_SEARCH;\n+        }\n+\n+        Set<String> adminRealms = RealmUtils.getEffective(AuthContextUtils.getAuthorizations().get(entitlement), realm);\n+        SearchCond effectiveCond = searchCond == null ? anyUtils.dao().getAllMatchingCond() : searchCond;\n+\n+        List<Any<?>> matching;\n+        if (spec.isIgnorePaging()) {\n+            matching = new ArrayList<>();\n+\n+            int count = searchDAO.count(adminRealms, searchCond, anyType.getKind());\n+            int pages = (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n+\n+            for (int p = 1; p <= pages; p++) {\n+                matching.addAll(searchDAO.search(adminRealms, effectiveCond,\n+                        p, AnyDAO.DEFAULT_PAGE_SIZE, orderBy, anyType.getKind()));\n+            }\n+        } else {\n+            matching = searchDAO.search(adminRealms, effectiveCond, page, size, orderBy, anyType.getKind());\n+        }\n+\n+        List<String> columns = new ArrayList<>();\n+        spec.getFields().forEach(item -> {\n+            if (anyUtils.getField(item) == null) {\n+                LOG.warn(\"Ignoring invalid field {}\", item);\n+            } else {\n+                columns.add(item);\n+            }\n+        });\n+        spec.getPlainAttrs().forEach(item -> {\n+            if (plainSchemaDAO.find(item) == null) {\n+                LOG.warn(\"Ignoring invalid plain schema {}\", item);\n+            } else {\n+                columns.add(item);\n+            }\n+        });\n+        spec.getDerAttrs().forEach(item -> {\n+            if (derSchemaDAO.find(item) == null) {\n+                LOG.warn(\"Ignoring invalid derived schema {}\", item);\n+            } else {\n+                columns.add(item);\n+            }\n+        });\n+        spec.getVirAttrs().forEach(item -> {\n+            if (virSchemaDAO.find(item) == null) {\n+                LOG.warn(\"Ignoring invalid virtual schema {}\", item);\n+            } else {\n+                columns.add(item);\n+            }\n+        });\n+\n+        CsvSchema.Builder schemaBuilder = CsvSchema.builder().setUseHeader(true);\n+        columns.forEach(schemaBuilder::addColumn);\n+        CsvSchema schema = csvSchema(spec, schemaBuilder.build());\n+\n+        PushTaskTO pushTask = new PushTaskTO();\n+        pushTask.setMatchingRule(spec.getMatchingRule());\n+        pushTask.setUnmatchingRule(spec.getUnmatchingRule());\n+        pushTask.getActions().addAll(spec.getActions());\n+\n+        try (SequenceWriter writer = new CsvMapper().writer(schema).forType(Map.class).writeValues(os)) {\n+            return streamPushExecutor.push(\n+                    anyType,\n+                    matching,\n+                    columns,\n+                    new StreamConnector(null, spec.getArrayElementSeparator(), null, writer),\n+                    pushTask,\n+                    AuthContextUtils.getUsername());\n+        } catch (Exception e) {\n+            LOG.error(\"Could not push to stream\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.TASK_EXECUTE + \"')\")\n+    public List<ProvisioningReport> pull(final CSVPullSpec spec, final InputStream csv) {\n+        AnyType anyType = anyTypeDAO.find(spec.getAnyTypeKey());\n+        if (anyType == null) {\n+            throw new NotFoundException(\"AnyType '\" + spec.getAnyTypeKey() + \"'\");\n+        }\n+\n+        if (realmDAO.findByFullPath(spec.getDestinationRealm()) == null) {\n+            throw new NotFoundException(\"Realm \" + spec.getDestinationRealm());\n+        }\n+\n+        PullTaskTO pullTask = new PullTaskTO();\n+        pullTask.setDestinationRealm(spec.getDestinationRealm());\n+        pullTask.setRemediation(spec.isRemediation());\n+        pullTask.setMatchingRule(spec.getMatchingRule());\n+        pullTask.setUnmatchingRule(spec.getUnmatchingRule());\n+        pullTask.getActions().addAll(spec.getActions());\n+\n+        CsvSchema schema = csvSchema(spec, CsvSchema.emptySchema().withHeader());\n+        try {\n+            MappingIterator<Map<String, String>> reader =\n+                    new CsvMapper().readerFor(Map.class).with(schema).readValues(csv);\n+\n+            List<String> columns = new ArrayList<>();\n+            ((CsvSchema) reader.getParserSchema()).forEach(column -> {\n+                if (!spec.getIgnoreColumns().contains(column.getName())) {\n+                    columns.add(column.getName());\n+                }\n+            });\n+\n+            if (!columns.contains(spec.getKeyColumn())) {\n+                throw new NotFoundException(\"Key column '\" + spec.getKeyColumn() + \"'\");\n+            }\n+\n+            return streamPullExecutor.pull(\n+                    anyType,\n+                    spec.getKeyColumn(),\n+                    columns,\n+                    spec.getConflictResolutionAction(),\n+                    spec.getPullCorrelationRule(),\n+                    new StreamConnector(spec.getKeyColumn(), spec.getArrayElementSeparator(), reader, null),\n+                    pullTask);\n+        } catch (NotFoundException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            LOG.error(\"Could not pull from stream\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+    }\n+\n     @Override\n     protected EntityTO resolveReference(final Method method, final Object... os)\n             throws UnresolvedReferenceException {"},{"sha":"424f348d3b13f1047f3734819fc03afc0a64c485","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/AbstractTest.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import javax.persistence.EntityManager;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(classes = { IdMLogicTestContext.class })\n+public abstract class AbstractTest {\n+\n+    protected EntityManager entityManager() {\n+        EntityManager entityManager = EntityManagerFactoryUtils.getTransactionalEntityManager(\n+                EntityManagerFactoryUtils.findEntityManagerFactory(\n+                        ApplicationContextProvider.getBeanFactory(), AuthContextUtils.getDomain()));\n+        if (entityManager == null) {\n+            throw new IllegalStateException(\"Could not find EntityManager for domain \" + AuthContextUtils.getDomain());\n+        }\n+\n+        return entityManager;\n+    }\n+\n+    @BeforeAll\n+    public static void init() {\n+        EntitlementsHolder.getInstance().addAll(IdRepoEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(IdMEntitlement.values());\n+    }\n+}"},{"sha":"ca3a1ac420b435f146dbc8ec369612157e7702ab","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/DummyConfParamOps.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.Map;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyConfParamOps implements ConfParamOps {\n+\n+    @Override\n+    public Map<String, Object> list(final String domain) {\n+        return Map.of();\n+    }\n+\n+    @Override\n+    public <T> T get(final String domain, final String key, final T defaultValue, final Class<T> reference) {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public <T> void set(final String domain, final String key, final T value) {\n+    }\n+\n+    @Override\n+    public void remove(final String domain, final String key) {\n+    }\n+}"},{"sha":"09757b0e9ee45e188c10f59449420afacdd6c4aa","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/DummyDomainOps.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyDomainOps implements DomainOps {\n+\n+    @Override\n+    public List<Domain> list() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    public Domain read(final String key) {\n+        return new Domain.Builder(key).build();\n+    }\n+\n+    @Override\n+    public void create(final Domain domain) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        // nothing to do\n+    }\n+}"},{"sha":"7cf8a155f35a49afd29468e205df0f28146992e1","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/DummyImplementationLookup.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+\n+public class DummyImplementationLookup implements ImplementationLookup {\n+\n+    @Override\n+    public int getOrder() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public Set<String> getClassNames(final String type) {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public Set<Class<?>> getJWTSSOProviderClasses() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public Class<Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n+            final Class<? extends PullCorrelationRuleConf> pullCorrelationRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            final Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<Class<?>> getAuditAppenderClasses() {\n+        return Set.of();\n+    }\n+}"},{"sha":"ce88ef3fb69492afd72bd7e103cc46c135dbc4a4","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/DummyServiceOps.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DummyServiceOps implements ServiceOps {\n+\n+    @Override\n+    public void register(final NetworkService service) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public void unregister(final NetworkService service) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public List<NetworkService> list(final NetworkService.Type serviceType) {\n+        return List.of();\n+    }\n+\n+    @Override\n+    public NetworkService get(final NetworkService.Type serviceType) {\n+        return null;\n+    }\n+}"},{"sha":"2b4d0f998b7c4aa95ef6153fb7cb4b5753882629","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/IdMLogicTestContext.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdMLogicTestContext.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.jpa.PersistenceContext;\n+import org.apache.syncope.core.provisioning.java.ProvisioningContext;\n+import org.apache.syncope.core.spring.security.SecurityContext;\n+import org.apache.syncope.core.workflow.java.WorkflowContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n+\n+@Import({ SecurityContext.class, PersistenceContext.class, ProvisioningContext.class, WorkflowContext.class })\n+@ComponentScan(\"org.apache.syncope.core.logic\")\n+@Configuration\n+public class IdMLogicTestContext {\n+\n+    @Bean\n+    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() throws IOException {\n+        PropertySourcesPlaceholderConfigurer pspc = new PropertySourcesPlaceholderConfigurer();\n+        pspc.setIgnoreResourceNotFound(true);\n+        pspc.setIgnoreUnresolvablePlaceholders(true);\n+        return pspc;\n+    }\n+\n+    @Primary\n+    @Bean\n+    public ImplementationLookup classPathScanImplementationLookup()\n+            throws ClassNotFoundException, InstantiationException, IllegalAccessException,\n+            NoSuchMethodException, IllegalArgumentException, InvocationTargetException {\n+\n+        return new DummyImplementationLookup();\n+    }\n+}"},{"sha":"72d1a93060d747c2111dce35cd2da0227f8529ff","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/ReconciliationLogicTest.java","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogicTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.fasterxml.jackson.databind.MappingIterator;\n+import com.fasterxml.jackson.dataformat.csv.CsvMapper;\n+import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PipedInputStream;\n+import java.io.PipedOutputStream;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.rest.api.beans.CSVPushSpec;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ReconciliationLogicTest extends AbstractTest {\n+\n+    @Autowired\n+    private ReconciliationLogic reconciliationLogic;\n+\n+    @Autowired\n+    private UserLogic userLogic;\n+\n+    @Test\n+    public void pullFromCSV() {\n+        CSVPullSpec spec = new CSVPullSpec.Builder(AnyTypeKind.USER.name(), \"username\").build();\n+        InputStream csv = getClass().getResourceAsStream(\"/test1.csv\");\n+\n+        List<ProvisioningReport> results = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n+            return reconciliationLogic.pull(spec, csv);\n+        });\n+        assertEquals(2, results.size());\n+\n+        assertEquals(AnyTypeKind.USER.name(), results.get(0).getAnyType());\n+        assertNotNull(results.get(0).getKey());\n+        assertEquals(\"donizetti\", results.get(0).getName());\n+        assertEquals(\"donizetti\", results.get(0).getUidValue());\n+        assertEquals(ResourceOperation.CREATE, results.get(0).getOperation());\n+        assertEquals(ProvisioningReport.Status.SUCCESS, results.get(0).getStatus());\n+\n+        AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n+            UserTO donizetti = userLogic.read(results.get(0).getKey());\n+            assertNotNull(donizetti);\n+            assertEquals(\"Gaetano\", donizetti.getPlainAttr(\"firstname\").get().getValues().get(0));\n+            assertEquals(1, donizetti.getPlainAttr(\"loginDate\").get().getValues().size());\n+\n+            UserTO cimarosa = userLogic.read(results.get(1).getKey());\n+            assertNotNull(cimarosa);\n+            assertEquals(\"Domenico Cimarosa\", cimarosa.getPlainAttr(\"fullname\").get().getValues().get(0));\n+            assertEquals(2, cimarosa.getPlainAttr(\"loginDate\").get().getValues().size());\n+\n+            return null;\n+        });\n+    }\n+\n+    @Test\n+    public void pushToCSV() throws IOException {\n+        Pair<Integer, List<UserTO>> search = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN,\n+                () -> userLogic.search(null, 1, 100, List.of(), SyncopeConstants.ROOT_REALM, false));\n+        assertNotNull(search);\n+\n+        CSVPushSpec spec = new CSVPushSpec.Builder(AnyTypeKind.USER.name()).\n+                ignorePagination(true).\n+                field(\"username\").\n+                field(\"status\").\n+                plainAttr(\"firstname\").\n+                plainAttr(\"surname\").\n+                plainAttr(\"email\").\n+                plainAttr(\"loginDate\").\n+                build();\n+\n+        PipedInputStream in = new PipedInputStream();\n+        PipedOutputStream os = new PipedOutputStream(in);\n+\n+        List<ProvisioningReport> results = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n+            return reconciliationLogic.push(null, 1, 1, List.of(), SyncopeConstants.ROOT_REALM, spec, os);\n+        });\n+        assertEquals(search.getLeft(), results.size());\n+\n+        CsvSchema.Builder builder = CsvSchema.builder().setUseHeader(true);\n+        builder.addColumn(\"username\");\n+        builder.addColumn(\"status\");\n+        builder.addColumn(\"firstname\");\n+        builder.addColumn(\"surname\");\n+        builder.addColumn(\"email\");\n+        builder.addColumn(\"loginDate\");\n+        CsvSchema schema = builder.build();\n+\n+        MappingIterator<Map<String, String>> reader = new CsvMapper().readerFor(Map.class).with(schema).readValues(in);\n+\n+        for (int i = 0; i < results.size() && reader.hasNext(); i++) {\n+            Map<String, String> row = reader.next();\n+\n+            assertEquals(results.get(i).getName(), row.get(\"username\"));\n+            assertEquals(search.getRight().stream().filter(user -> row.get(\"username\").equals(user.getUsername())).\n+                    findFirst().get().getStatus(),\n+                    row.get(\"status\"));\n+\n+            switch (row.get(\"username\")) {\n+                case \"rossini\":\n+                    assertEquals(spec.getNullValue(), row.get(\"email\"));\n+                    assertTrue(row.get(\"loginDate\").contains(spec.getArrayElementSeparator()));\n+                    break;\n+\n+                case \"verdi\":\n+                    assertEquals(\"verdi@syncope.org\", row.get(\"email\"));\n+                    assertEquals(spec.getNullValue(), row.get(\"loginDate\"));\n+                    break;\n+\n+                case \"bellini\":\n+                    assertEquals(spec.getNullValue(), row.get(\"email\"));\n+                    assertFalse(row.get(\"loginDate\").contains(spec.getArrayElementSeparator()));\n+                    break;\n+\n+                default:\n+                    break;\n+            }\n+        }\n+    }\n+}"},{"sha":"1a4a652bd694c1b3a902cad3c073e180c5aa41a4","filename":"core/idm/logic/src/test/java/org/apache/syncope/core/logic/TestInitializer.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.support.TransactionSynchronizationManager;\n+\n+@Component\n+public class TestInitializer implements InitializingBean, ApplicationContextAware {\n+\n+    private ConfigurableApplicationContext ctx;\n+\n+    @Autowired\n+    private StartupDomainLoader domainLoader;\n+\n+    @Autowired\n+    private DomainHolder domainHolder;\n+\n+    @Autowired\n+    private ContentLoader contentLoader;\n+\n+    @Override\n+    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\n+        this.ctx = (ConfigurableApplicationContext) ctx;\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        ApplicationContextProvider.setApplicationContext(ctx);\n+        ApplicationContextProvider.setBeanFactory((DefaultListableBeanFactory) ctx.getBeanFactory());\n+\n+        if (!TransactionSynchronizationManager.isSynchronizationActive()) {\n+            TransactionSynchronizationManager.initSynchronization();\n+        }\n+\n+        domainLoader.load();\n+\n+        contentLoader.load(\n+                SyncopeConstants.MASTER_DOMAIN,\n+                domainHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));\n+    }\n+}"},{"sha":"af402848e57f6559a6e27e5219170044d95570bd","filename":"core/idm/logic/src/test/resources/logicTest.xml","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+    \n+  <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n+    <property name=\"locations\">\n+      <list>\n+        <value>classpath:persistence.properties</value>\n+        <value>classpath:domains/*.properties</value>\n+        <value>classpath:security.properties</value>\n+        <value>classpath:connid.properties</value>\n+        <value>classpath:mail.properties</value>\n+        <value>classpath:workflow.properties</value>\n+        <value>classpath:provisioning.properties</value>\n+        <value>classpath:logic.properties</value>\n+      </list>\n+    </property>\n+    <property name=\"ignoreResourceNotFound\" value=\"true\"/>\n+    <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n+  </bean>\n+\n+  <bean id=\"jwtIssuer\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${jwtIssuer}\"/>\n+  </bean>\n+  <bean id=\"jwsKey\" class=\"java.lang.String\">\n+    <constructor-arg value=\"ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f\"/>\n+  </bean>\n+  <bean id=\"accessTokenJwsSignatureVerifier\"\n+        class=\"org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureVerifier\">\n+    <property name=\"jwsAlgorithm\" value=\"${jwsAlgorithm}\"/>\n+    <property name=\"jwsKey\" value=\"ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f\"/>\n+  </bean>\n+  <bean id=\"accessTokenJwsSignatureProvider\"\n+        class=\"org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider\">\n+    <property name=\"jwsAlgorithm\" value=\"${jwsAlgorithm}\"/>\n+    <property name=\"jwsKey\" value=\"ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f\"/>\n+  </bean>\n+  <bean id=\"credentialChecker\" class=\"org.apache.syncope.core.spring.security.DefaultCredentialChecker\">\n+    <constructor-arg value=\"ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f\" index=\"0\"/>\n+    <constructor-arg value=\"DE088591C00CC98B36F5ADAAF7DA2B004CF7F2FE7BBB45B766B6409876E2F3DB13C7905C6AA59464\" index=\"1\"/>\n+    <constructor-arg value=\"anonymousKey\" index=\"2\"/>\n+  </bean>\n+  \n+  <import resource=\"logicContext.xml\"/>\n+</beans>"},{"sha":"0ea7355f34305e444432074f63950367373ca052","filename":"core/idm/logic/src/test/resources/test1.csv","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fresources%2Ftest1.csv","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fresources%2Ftest1.csv","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Ftest%2Fresources%2Ftest1.csv?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,3 @@\n+\"username\",\"email\",\"surname\",\"firstname\",\"fullname\",\"userId\",\"loginDate\"\n+\"donizetti\",\"donizetti@apache.org\",\"Donizetti\",\"Gaetano\",\"Gaetano Donizetti\",\"donizetti@apache.org\",\"2019-12-24\"\n+\"cimarosa\",\"cimarosa@apache.org\",\"Cimarosa\",\"Domenico\",\"Domenico Cimarosa\",\"cimarosa@apache.org\",\"2018-11-21;2018-12-24\""},{"sha":"6f3b1a19d48dd59e486572da321fa10435e33c32","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReconciliationServiceImpl.java","status":"modified","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,13 +18,27 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.io.InputStream;\n+import java.util.List;\n import javax.validation.ValidationException;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.StreamingOutput;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconStatus;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n+import org.apache.syncope.common.rest.api.beans.CSVPushSpec;\n import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.apache.syncope.common.rest.api.service.ReconciliationService;\n import org.apache.syncope.core.logic.ReconciliationLogic;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n@@ -59,4 +73,33 @@ public void pull(final ReconQuery reconQuery, final PullTaskTO pullTask) {\n         validate(reconQuery);\n         logic.pull(reconQuery, pullTask);\n     }\n+\n+    @Override\n+    public Response push(final AnyQuery anyQuery, final CSVPushSpec spec) {\n+        String realm = StringUtils.prependIfMissing(anyQuery.getRealm(), SyncopeConstants.ROOT_REALM);\n+\n+        SearchCond searchCond = StringUtils.isBlank(anyQuery.getFiql())\n+                ? null\n+                : getSearchCond(anyQuery.getFiql(), realm);\n+\n+        StreamingOutput sout = (os) -> logic.push(\n+                searchCond,\n+                anyQuery.getPage(),\n+                anyQuery.getSize(),\n+                getOrderByClauses(anyQuery.getOrderBy()),\n+                realm,\n+                spec,\n+                os);\n+\n+        return Response.ok(sout).\n+                type(RESTHeaders.TEXT_CSV).\n+                header(HttpHeaders.CONTENT_DISPOSITION,\n+                        \"attachment; filename=\" + AuthContextUtils.getDomain() + \".csv\").\n+                build();\n+    }\n+\n+    @Override\n+    public List<ProvisioningReport> pull(final CSVPullSpec spec, final InputStream csv) {\n+        return logic.pull(spec, csv);\n+    }\n }"},{"sha":"c572d98bd7e86a543f8991f6110ac9cda1110edc","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -104,7 +103,7 @@ public PagedConnObjectTOResult searchConnObjects(\n             final String key, final String anyTypeKey, final ConnObjectTOQuery query) {\n \n         Filter filter = null;\n-        Set<String> moreAttrsToGet = Collections.emptySet();\n+        Set<String> moreAttrsToGet = Set.of();\n         if (StringUtils.isNotBlank(query.getFiql())) {\n             try {\n                 FilterVisitor visitor = new FilterVisitor();"},{"sha":"d0ac1056d51dd6e35ba158c0d7e5cbd503ec6420","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -86,16 +86,17 @@ public Pair<Integer, List<AnyObjectTO>> search(\n             throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n         }\n \n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+        Set<String> adminRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.SEARCH.getFor(searchCond.hasAnyTypeCond())),\n                 realm);\n \n-        int count = searchDAO.count(effectiveRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n+        int count = searchDAO.count(adminRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n \n         List<AnyObject> matching = searchDAO.search(\n-                effectiveRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n+                adminRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n         List<AnyObjectTO> result = matching.stream().\n-                map(anyObject -> binder.getAnyObjectTO(anyObject, details)).collect(Collectors.toList());\n+                map(anyObject -> binder.getAnyObjectTO(anyObject, details)).\n+                collect(Collectors.toList());\n \n         return Pair.of(count, result);\n     }"},{"sha":"daf795b341820cac2285d29426bb43dcda7ad519","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -24,7 +24,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n@@ -33,7 +32,6 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n@@ -159,16 +157,18 @@ public Pair<Integer, List<GroupTO>> search(\n             final String realm,\n             final boolean details) {\n \n-        int count = searchDAO.count(\n-                RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-                Optional.ofNullable(searchCond).orElseGet(() -> groupDAO.getAllMatchingCond()), AnyTypeKind.GROUP);\n+        Set<String> adminRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_SEARCH), realm);\n+\n+        SearchCond effectiveCond = searchCond == null ? groupDAO.getAllMatchingCond() : searchCond;\n+\n+        int count = searchDAO.count(adminRealms, effectiveCond, AnyTypeKind.GROUP);\n \n         List<Group> matching = searchDAO.search(\n-                RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n-                Optional.ofNullable(searchCond).orElseGet(() -> groupDAO.getAllMatchingCond()),\n-                page, size, orderBy, AnyTypeKind.GROUP);\n+                adminRealms, effectiveCond, page, size, orderBy, AnyTypeKind.GROUP);\n         List<GroupTO> result = matching.stream().\n-                map(group -> binder.getGroupTO(group, details)).collect(Collectors.toList());\n+                map(group -> binder.getGroupTO(group, details)).\n+                collect(Collectors.toList());\n \n         return Pair.of(count, result);\n     }"},{"sha":"41acb647c775e3540ea0d5377c1cf80eae9fc18b","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -43,11 +43,14 @@\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n+import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -56,8 +59,6 @@\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n@@ -232,18 +233,17 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n \n         TaskUtils taskUtil = taskUtilsFactory.getInstance(task);\n         String executor = AuthContextUtils.getUsername();\n-        \n+\n         ExecTO result = null;\n         switch (taskUtil.getType()) {\n             case PROPAGATION:\n                 PropagationTaskTO taskTO = binder.<PropagationTaskTO>getTaskTO(task, taskUtil, false);\n-                PropagationTaskInfo taskInfo = new PropagationTaskInfo();\n+                PropagationTaskInfo taskInfo = new PropagationTaskInfo(((PropagationTask) task).getResource());\n                 taskInfo.setKey(taskTO.getKey());\n                 taskInfo.setOperation(taskTO.getOperation());\n                 taskInfo.setConnObjectKey(taskTO.getConnObjectKey());\n                 taskInfo.setOldConnObjectKey(taskTO.getOldConnObjectKey());\n                 taskInfo.setAttributes(taskTO.getAttributes());\n-                taskInfo.setResource(taskTO.getResource());\n                 taskInfo.setObjectClassName(taskTO.getObjectClassName());\n                 taskInfo.setAnyTypeKind(taskTO.getAnyTypeKind());\n                 taskInfo.setAnyType(taskTO.getAnyType());"},{"sha":"270c438689eb180087199a731e14bd19124f8dc5","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -23,7 +23,6 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -111,14 +110,14 @@ public Pair<Integer, List<UserTO>> search(\n             final String realm,\n             final boolean details) {\n \n-        int count = searchDAO.count(RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm),\n-            Optional.ofNullable(searchCond).orElseGet(() -> userDAO.getAllMatchingCond()), AnyTypeKind.USER);\n+        Set<String> adminRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm);\n \n-        List<User> matching = searchDAO.search(RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm),\n-            Optional.ofNullable(searchCond).orElseGet(() -> userDAO.getAllMatchingCond()),\n-                page, size, orderBy, AnyTypeKind.USER);\n+        SearchCond effectiveCond = searchCond == null ? userDAO.getAllMatchingCond() : searchCond;\n+\n+        int count = searchDAO.count(adminRealms, effectiveCond, AnyTypeKind.USER);\n+\n+        List<User> matching = searchDAO.search(adminRealms, effectiveCond, page, size, orderBy, AnyTypeKind.USER);\n         List<UserTO> result = matching.stream().\n                 map(user -> binder.returnUserTO(binder.getUserTO(user, details))).\n                 collect(Collectors.toList());"},{"sha":"81bce4473c8125686f7c21a189603f7bbef481d7","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONPlainSchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONPlainSchemaDAO.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -30,6 +30,6 @@ public <T extends PlainAttr<?>> boolean hasAttrs(final PlainSchema schema, final\n                 \"SELECT COUNT(id) FROM \" + new SearchSupport(getAnyTypeKind(reference)).field().name\n                 + \" WHERE JSON_CONTAINS(plainAttrs, '[{\\\"schema\\\":\\\"\" + schema.getKey() + \"\\\"}]')\");\n \n-        return (long) query.getSingleResult() > 0;\n+        return ((Number) query.getSingleResult()).intValue() > 0;\n     }\n }"},{"sha":"c4d27d6867eb85dc5508c4c63f2302cfa7a6b8b8","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONPlainSchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONPlainSchemaDAO.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -30,6 +30,6 @@ public <T extends PlainAttr<?>> boolean hasAttrs(final PlainSchema schema, final\n                 \"SELECT COUNT(id) FROM \" + new SearchSupport(getAnyTypeKind(reference)).field().name\n                 + \" WHERE plainAttrs @> '[{\\\"schema\\\":\\\"\" + schema.getKey() + \"\\\"}]'::jsonb\");\n \n-        return (long) query.getSingleResult() > 0;\n+        return ((Number) query.getSingleResult()).intValue() > 0;\n     }\n }"},{"sha":"0be1f96ee8fadbe8393e10b409238b4d8e56902b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -485,22 +485,18 @@ public <S extends Schema> AllowedSchemas<S> findAllowedSchemas(final A any, fina\n         // schemas given by type extensions\n         Map<Group, List<? extends AnyTypeClass>> typeExtensionClasses = new HashMap<>();\n         if (any instanceof User) {\n-            ((User) any).getMemberships().forEach(\n-                    memb -> memb.getRightEnd().getTypeExtensions().forEach(\n-                            typeExtension -> typeExtensionClasses.put(\n-                                    memb.getRightEnd(), typeExtension.getAuxClasses())));\n+            ((User) any).getMemberships().forEach(memb -> memb.getRightEnd().getTypeExtensions().\n+                    forEach(typeExt -> typeExtensionClasses.put(memb.getRightEnd(), typeExt.getAuxClasses())));\n         } else if (any instanceof AnyObject) {\n-            ((AnyObject) any).getMemberships().\n-                    forEach(memb -> memb.getRightEnd().getTypeExtensions().stream().\n-                    filter(typeExtension -> any.getType().equals(typeExtension.getAnyType())).\n-                    forEach(typeExtension -> typeExtensionClasses.put(\n-                    memb.getRightEnd(), typeExtension.getAuxClasses())));\n+            ((AnyObject) any).getMemberships().forEach(memb -> memb.getRightEnd().getTypeExtensions().stream().\n+                    filter(typeExt -> any.getType().equals(typeExt.getAnyType())).\n+                    forEach(typeExt -> typeExtensionClasses.put(memb.getRightEnd(), typeExt.getAuxClasses())));\n         }\n \n         typeExtensionClasses.entrySet().stream().map(entry -> {\n             result.getForMemberships().put(entry.getKey(), new HashSet<>());\n             return entry;\n-        }).forEachOrdered((entry) -> entry.getValue().forEach(typeClass -> {\n+        }).forEach(entry -> entry.getValue().forEach(typeClass -> {\n             if (reference.equals(PlainSchema.class)) {\n                 result.getForMemberships().get(entry.getKey()).\n                         addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n@@ -543,7 +539,7 @@ public List<String> findDynRealms(final String key) {\n         query.getResultList().stream().map(resultKey -> resultKey instanceof Object[]\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n-                forEachOrdered((actualKey) -> {\n+                forEach((actualKey) -> {\n                     DynRealm dynRealm = dynRealmDAO.find(actualKey.toString());\n                     if (dynRealm == null) {\n                         LOG.error(\"Could not find dynRealm with id {}, even though returned by the native query\","},{"sha":"93099358d6433cb3cc9d7a034eb210c501f1cf96","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -27,7 +27,6 @@\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -118,7 +117,7 @@ public <T extends PlainAttr<?>> boolean hasAttrs(final PlainSchema schema, final\n                 + \".schema_id WHERE \" + JPAPlainSchema.TABLE + \".id = ?1\");\n         query.setParameter(1, schema.getKey());\n \n-        return (long) query.getSingleResult() > 0;\n+        return ((Number) query.getSingleResult()).intValue() > 0;\n     }\n \n     @Override\n@@ -128,9 +127,8 @@ public PlainSchema save(final PlainSchema schema) {\n \n     protected void deleteAttrs(final PlainSchema schema) {\n         for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n-            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n-\n-            findAttrs(schema, anyUtils.plainAttrClass()).forEach(attr -> plainAttrDAO.delete(attr));\n+            findAttrs(schema, anyUtilsFactory.getInstance(anyTypeKind).plainAttrClass()).\n+                    forEach(attr -> plainAttrDAO.delete(attr));\n         }\n     }\n "},{"sha":"e61568e5a3eae614d294ff78472997b804152d50","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -124,16 +124,16 @@ public class JPAExternalResource extends AbstractProvidedKeyEntity implements Ex\n     @NotNull\n     private TraceLevel provisioningTraceLevel = TraceLevel.FAILURES;\n \n-    @ManyToOne(fetch = FetchType.LAZY)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPasswordPolicy passwordPolicy;\n \n-    @ManyToOne(fetch = FetchType.LAZY)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAccountPolicy accountPolicy;\n \n-    @ManyToOne(fetch = FetchType.LAZY)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPullPolicy pullPolicy;\n \n-    @ManyToOne(fetch = FetchType.LAZY)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private JPAPushPolicy pushPolicy;\n \n     /**"},{"sha":"f803af73fb8f2d47b5ef62d3b0b5f734dddb6836","filename":"core/provisioning-api/pom.xml","status":"modified","additions":27,"deletions":2,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fpom.xml?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -38,6 +38,11 @@ under the License.\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-jexl3</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-core</artifactId>\n@@ -50,12 +55,16 @@ under the License.\n       <groupId>com.fasterxml.jackson.module</groupId>\n       <artifactId>jackson-module-afterburner</artifactId>\n     </dependency>\n-    \n+\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context</artifactId>\n     </dependency>\n-    \n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-tx</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.quartz-scheduler</groupId>\n       <artifactId>quartz</artifactId>\n@@ -66,6 +75,22 @@ under the License.\n       <artifactId>syncope-core-persistence-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>    \n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"1c1178480ea16364d8ab421cf9ff18b12a37aedb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java","status":"modified","additions":50,"deletions":5,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n@@ -29,11 +30,15 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.SearchResult;\n+import org.identityconnectors.framework.common.objects.SortKey;\n+import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n+import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.identityconnectors.framework.spi.SearchResultsHandler;\n \n /**\n@@ -104,7 +109,9 @@ void delete(\n      * @param handler to be used to handle deltas.\n      * @param options ConnId's OperationOptions.\n      */\n-    void fullReconciliation(ObjectClass objectClass, SyncResultsHandler handler, OperationOptions options);\n+    default void fullReconciliation(ObjectClass objectClass, SyncResultsHandler handler, OperationOptions options) {\n+        filteredReconciliation(objectClass, null, handler, options);\n+    }\n \n     /**\n      * Fetches remote objects (for use during filtered reconciliation).\n@@ -114,11 +121,36 @@ void delete(\n      * @param handler to be used to handle deltas.\n      * @param options ConnId's OperationOptions.\n      */\n-    void filteredReconciliation(\n+    default void filteredReconciliation(\n             ObjectClass objectClass,\n             ReconFilterBuilder filterBuilder,\n             SyncResultsHandler handler,\n-            OperationOptions options);\n+            OperationOptions options) {\n+\n+        Filter filter = null;\n+        OperationOptions actualOptions = options;\n+        if (filterBuilder != null) {\n+            filter = filterBuilder.build();\n+            actualOptions = filterBuilder.build(actualOptions);\n+        }\n+\n+        search(objectClass, filter, new SearchResultsHandler() {\n+\n+            @Override\n+            public void handleResult(final SearchResult result) {\n+                // nothing to do\n+            }\n+\n+            @Override\n+            public boolean handle(final ConnectorObject object) {\n+                return handler.handle(new SyncDeltaBuilder().\n+                        setObject(object).\n+                        setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n+                        setToken(new SyncToken(\"\")).\n+                        build());\n+            }\n+        }, actualOptions);\n+    }\n \n     /**\n      * Sync remote objects from a connector instance.\n@@ -182,14 +214,27 @@ SearchResult search(\n      * @param options ConnId's OperationOptions\n      * @return search result\n      */\n-    SearchResult search(\n+    default SearchResult search(\n             ObjectClass objectClass,\n             Filter filter,\n             SearchResultsHandler handler,\n             int pageSize,\n             String pagedResultsCookie,\n             List<OrderByClause> orderBy,\n-            OperationOptions options);\n+            OperationOptions options) {\n+\n+        OperationOptionsBuilder builder = new OperationOptionsBuilder().setPageSize(pageSize).setPagedResultsOffset(-1);\n+        if (pagedResultsCookie != null) {\n+            builder.setPagedResultsCookie(pagedResultsCookie);\n+        }\n+        builder.setSortKeys(orderBy.stream().\n+                map(clause -> new SortKey(clause.getField(), clause.getDirection() == OrderByClause.Direction.ASC)).\n+                collect(Collectors.toList()));\n+\n+        builder.setAttributesToGet(options.getAttributesToGet());\n+\n+        return search(objectClass, filter, handler, builder.build());\n+    }\n \n     /**\n      * Builds metadata description of ConnId {@link ObjectClass}."},{"sha":"fad50f4e16d7b80fcc4c1b37e15062d6fd07947d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/IntAttrNameParser.java","status":"renamed","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParser.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,10 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java;\n+package org.apache.syncope.core.provisioning.api;\n \n import java.text.ParseException;\n-import org.apache.syncope.core.provisioning.api.IntAttrName;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.tuple.Pair;","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java"},{"sha":"4ddccca88ec0fdeb5b23e601c3f676bdac3ba8b6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -26,8 +26,8 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n \n public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserCR, UserUR> {\n "},{"sha":"e218836a28b716a519a2be316b31e15472aff0bc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/ClassFreeUberspect.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FClassFreeUberspect.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FClassFreeUberspect.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FClassFreeUberspect.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.jexl;\n+package org.apache.syncope.core.provisioning.api.jexl;\n \n import org.apache.commons.jexl3.internal.introspection.Uberspect;\n import org.apache.commons.jexl3.introspection.JexlMethod;","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/ClassFreeUberspect.java"},{"sha":"2457d7f52901fe75a11e5a06a2df17f62233db1d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/EmptyClassLoader.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FEmptyClassLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FEmptyClassLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FEmptyClassLoader.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.jexl;\n+package org.apache.syncope.core.provisioning.api.jexl;\n \n /**\n  * A class loader that will throw {@link ClassNotFoundException} for every class name.","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/EmptyClassLoader.java"},{"sha":"ba0e63f0fd9a0b59619c0c6dbd16f81095344a69","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/JexlUtils.java","status":"renamed","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FJexlUtils.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.jexl;\n+package org.apache.syncope.core.provisioning.api.jexl;\n \n import java.beans.IntrospectionException;\n import java.beans.Introspector;\n@@ -44,7 +44,6 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.RealmTO;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -227,17 +226,24 @@ public static void addPlainAttrsToContext(\n         });\n     }\n \n-    public static void addDerAttrsToContext(final Any<?> any, final JexlContext jexlContext) {\n-        Map<DerSchema, String> derAttrs =\n-                ApplicationContextProvider.getBeanFactory().getBean(DerAttrHandler.class).getValues(any);\n+    public static void addDerAttrsToContext(\n+            final Any<?> any,\n+            final DerAttrHandler derAttrHandler,\n+            final JexlContext jexlContext) {\n+\n+        Map<DerSchema, String> derAttrs = derAttrHandler.getValues(any);\n \n         derAttrs.forEach((schema, value) -> jexlContext.set(schema.getKey(), value));\n     }\n \n-    public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?> any) {\n+    public static boolean evaluateMandatoryCondition(\n+            final String mandatoryCondition,\n+            final Any<?> any,\n+            final DerAttrHandler derAttrHandler) {\n+\n         JexlContext jexlContext = new MapContext();\n         addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n-        addDerAttrsToContext(any, jexlContext);\n+        addDerAttrsToContext(any, derAttrHandler, jexlContext);\n \n         return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n     }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java"},{"sha":"9cc011f8abf36237a62a01b8248ae9778640a6f4","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/jexl/SyncopeJexlFunctions.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjexl%2FSyncopeJexlFunctions.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java.jexl;\n+package org.apache.syncope.core.provisioning.api.jexl;\n \n import java.util.Arrays;\n import java.util.Collections;","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/SyncopeJexlFunctions.java"},{"sha":"048f06b4b333a5a3864561cbddda21baf0fbe1b7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -20,13 +20,22 @@\n \n import java.util.Collection;\n import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n+import org.identityconnectors.framework.common.objects.Attribute;\n \n public interface PropagationManager {\n \n@@ -147,6 +156,16 @@ List<PropagationTaskInfo> getUserDeleteTasks(\n             PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             Collection<String> noPropResourceKeys);\n \n+    PropagationTaskInfo newTask(\n+            DerAttrHandler derAttrHandler,\n+            Any<?> any,\n+            ExternalResource resource,\n+            ResourceOperation operation,\n+            Provision provision,\n+            boolean deleteOnResource,\n+            Stream<? extends Item> mappingItems,\n+            Pair<String, Set<Attribute>> preparedAttrs);\n+\n     /**\n      * Create the needed tasks for the realm for each resource associated, unless in {@code noPropResourceKeys}.\n      *"},{"sha":"50455b6fb0bfb096bdb84e05ba16756aa5adba37","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskExecutor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskExecutor.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -70,6 +70,6 @@ public interface PropagationTaskExecutor {\n      * @param executor the executor of this task\n      * @return reporter to report propagation execution status\n      */\n-    PropagationReporter execute(Collection<PropagationTaskInfo> taskInfos, boolean nullPriorityAsync,\n-                                String executor);\n+    PropagationReporter execute(\n+            Collection<PropagationTaskInfo> taskInfos, boolean nullPriorityAsync, String executor);\n }"},{"sha":"c3b3e44a6f4cd1194c22eb37c9ade50f062103ad","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationTaskInfo.java","status":"modified","additions":64,"deletions":1,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationTaskInfo.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -19,27 +19,90 @@\n package org.apache.syncope.core.provisioning.api.propagation;\n \n import java.util.Optional;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.provisioning.api.Connector;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n \n public class PropagationTaskInfo extends PropagationTaskTO {\n \n     private static final long serialVersionUID = -2879861567335503099L;\n \n+    private final ExternalResource externalResource;\n+\n+    private Connector connector;\n+\n     /**\n      * Object on External Resource before propagation takes place.\n      *\n      * null: beforeObj was not attempted to read\n-     * not null, but not present: beforeObj was attempted to read, but not found\n+     * not null but not present: beforeObj was attempted to read, but not found\n      * not null and present: beforeObj value is available\n      */\n     private Optional<ConnectorObject> beforeObj;\n \n+    public PropagationTaskInfo(final ExternalResource externalResource) {\n+        super();\n+        this.externalResource = externalResource;\n+    }\n+\n+    public Connector getConnector() {\n+        return connector;\n+    }\n+\n+    public void setConnector(final Connector connector) {\n+        this.connector = connector;\n+    }\n+\n+    public ExternalResource getExternalResource() {\n+        return externalResource;\n+    }\n+\n+    @Override\n+    public String getResource() {\n+        return externalResource.getKey();\n+    }\n+\n+    @Override\n+    public void setResource(final String resource) {\n+        throw new IllegalArgumentException(\"Cannot set ExternalResource on \" + getClass().getName());\n+    }\n+\n     public Optional<ConnectorObject> getBeforeObj() {\n         return beforeObj;\n     }\n \n     public void setBeforeObj(final Optional<ConnectorObject> beforeObj) {\n         this.beforeObj = beforeObj;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(externalResource.getKey()).\n+                append(beforeObj).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final PropagationTaskInfo other = (PropagationTaskInfo) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(externalResource.getKey(), other.externalResource.getKey()).\n+                append(beforeObj, other.beforeObj).\n+                build();\n+    }\n }"},{"sha":"25f61b65cc859bc844134608b834e40c899d7571","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/ProvisioningProfile.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FProvisioningProfile.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;"},{"sha":"0070836612578416469d709cf2fc94c3d07a5767","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.SyncDelta;"},{"sha":"642d591f512db2e0395a9c7d1ac095ea598562dc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PushActions.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPushActions.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.quartz.JobExecutionException;\n "},{"sha":"761429169fc61e1aed58f9d52702216b23db76b6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePullExecutor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;"},{"sha":"a9a7ce7b4cf10c4fedd0b8749fa605d4eaa5f733","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePushExecutor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import java.util.List;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.core.persistence.api.entity.Any;"},{"sha":"5ff51c8c4c256ceb7bd299500839ac698f270843","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/stream/StreamConnector.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FStreamConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FStreamConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FStreamConnector.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.pushpull.stream;\n+\n+import com.fasterxml.jackson.databind.MappingIterator;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.ConnectorObjectBuilder;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.ObjectClassInfo;\n+import org.identityconnectors.framework.common.objects.OperationOptions;\n+import org.identityconnectors.framework.common.objects.SearchResult;\n+import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.identityconnectors.framework.common.objects.filter.Filter;\n+import org.identityconnectors.framework.spi.SearchResultsHandler;\n+import org.springframework.util.CollectionUtils;\n+\n+public class StreamConnector implements Connector {\n+\n+    private final String keyColumn;\n+\n+    private final String arrayElementsSeparator;\n+\n+    private final MappingIterator<Map<String, String>> reader;\n+\n+    private final SequenceWriter writer;\n+\n+    public StreamConnector(\n+            final String keyColumn,\n+            final String arrayElementsSeparator,\n+            final MappingIterator<Map<String, String>> reader,\n+            final SequenceWriter writer) {\n+\n+        this.keyColumn = keyColumn;\n+        this.arrayElementsSeparator = arrayElementsSeparator;\n+        this.reader = reader;\n+        this.writer = writer;\n+    }\n+\n+    @Override\n+    public Uid authenticate(final String username, final String password, final OperationOptions options) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ConnInstance getConnInstance() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Uid create(\n+            final ObjectClass objectClass,\n+            final Set<Attribute> attrs,\n+            final OperationOptions options,\n+            final AtomicReference<Boolean> propagationAttempted) {\n+\n+        if (writer != null) {\n+            Map<String, String> row = new HashMap<>();\n+            attrs.stream().filter(attr -> !AttributeUtil.isSpecial(attr)).forEach(attr -> {\n+                if (CollectionUtils.isEmpty(attr.getValue()) || attr.getValue().get(0) == null) {\n+                    row.put(attr.getName(), null);\n+                } else if (attr.getValue().size() == 1) {\n+                    row.put(attr.getName(), attr.getValue().get(0).toString());\n+                } else if (arrayElementsSeparator == null) {\n+                    row.put(attr.getName(), attr.getValue().toString());\n+                } else {\n+                    row.put(\n+                            attr.getName(),\n+                            attr.getValue().stream().map(Object::toString).\n+                                    collect(Collectors.joining(arrayElementsSeparator)));\n+                }\n+            });\n+            try {\n+                writer.write(row);\n+            } catch (IOException e) {\n+                throw new IllegalStateException(\"Could not object \" + row, e);\n+            }\n+            propagationAttempted.set(Boolean.TRUE);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Uid update(\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final Set<Attribute> attrs,\n+            final OperationOptions options,\n+            final AtomicReference<Boolean> propagationAttempted) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void delete(\n+            final ObjectClass objectClass,\n+            final Uid uid,\n+            final OperationOptions options,\n+            final AtomicReference<Boolean> propagationAttempted) {\n+\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void sync(\n+            final ObjectClass objectClass,\n+            final SyncToken token,\n+            final SyncResultsHandler handler,\n+            final OperationOptions options) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public SyncToken getLatestSyncToken(final ObjectClass objectClass) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public ConnectorObject getObject(\n+            final ObjectClass objectClass,\n+            final Attribute connObjectKey,\n+            final boolean ignoreCaseMatch,\n+            final OperationOptions options) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public SearchResult search(\n+            final ObjectClass objectClass,\n+            final Filter filter,\n+            final SearchResultsHandler handler,\n+            final OperationOptions options) {\n+\n+        SearchResult result = new SearchResult();\n+\n+        if (reader != null) {\n+            while (reader.hasNext()) {\n+                Map<String, String> row = reader.next();\n+\n+                ConnectorObjectBuilder builder = new ConnectorObjectBuilder();\n+                builder.setObjectClass(objectClass);\n+                builder.setUid(row.get(keyColumn));\n+                builder.setName(row.get(keyColumn));\n+\n+                row.forEach((key, value) -> builder.addAttribute(arrayElementsSeparator == null\n+                        ? AttributeBuilder.build(key, value)\n+                        : AttributeBuilder.build(key,\n+                                (Object[]) StringUtils.splitByWholeSeparator(value, arrayElementsSeparator))));\n+\n+                handler.handle(builder.build());\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Set<ObjectClassInfo> getObjectClassInfo() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public void validate() {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void test() {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        // nothing to do\n+    }\n+}"},{"sha":"8d5c24132331086bd2358f59762ca7fbe19222d6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/stream/SyncopeStreamPullExecutor.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPullExecutor.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.pushpull.stream;\n+\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.quartz.JobExecutionException;\n+\n+public interface SyncopeStreamPullExecutor {\n+\n+    List<ProvisioningReport> pull(\n+            AnyType anyType,\n+            String keyColumn,\n+            List<String> columns,\n+            ConflictResolutionAction conflictResolutionAction,\n+            String pullCorrelationRule,\n+            StreamConnector connector,\n+            PullTaskTO pullTaskTO)\n+            throws JobExecutionException;\n+}"},{"sha":"b70a2c4e03904b405678646831fd1c6404ad9701","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/stream/SyncopeStreamPushExecutor.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2Fstream%2FSyncopeStreamPushExecutor.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.pushpull.stream;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.quartz.JobExecutionException;\n+\n+public interface SyncopeStreamPushExecutor {\n+\n+    List<ProvisioningReport> push(\n+            AnyType anyType,\n+            List<? extends Any<?>> anys,\n+            List<String> columns,\n+            StreamConnector connector,\n+            PushTaskTO pushTaskTO,\n+            String executor)\n+            throws JobExecutionException;\n+}"},{"sha":"2a2b178b08b723bd1fd9a80cc44f8f8cf22e5f53","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/IntAttrNameParserTest.java","status":"renamed","additions":108,"deletions":9,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FIntAttrNameParserTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,31 +16,130 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java;\n+package org.apache.syncope.core.provisioning.api;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import java.text.ParseException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.springframework.util.ReflectionUtils;\n \n-@Transactional(\"Master\")\n-public class IntAttrNameParserTest extends AbstractTest {\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.WARN)\n+public class IntAttrNameParserTest {\n \n-    @Autowired\n+    private static final Map<AnyTypeKind, List<String>> FIELDS = new HashMap<>();\n+\n+    static {\n+        FIELDS.put(AnyTypeKind.USER, Arrays.asList(\"key\", \"username\"));\n+        FIELDS.put(AnyTypeKind.GROUP, Arrays.asList(\"key\", \"name\", \"userOwner\"));\n+        FIELDS.put(AnyTypeKind.ANY_OBJECT, Arrays.asList(\"key\", \"name\"));\n+    }\n+\n+    @Mock\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Mock\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Mock\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Mock\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    @Mock\n+    private AnyUtils anyUtils;\n+\n+    @InjectMocks\n     private IntAttrNameParser intAttrNameParser;\n \n+    @BeforeEach\n+    public void initMocks() throws NoSuchFieldException {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(anyUtilsFactory.getInstance(any(AnyTypeKind.class))).thenAnswer(ic -> {\n+            when(anyUtils.anyTypeKind()).thenReturn(ic.getArgument(0));\n+            return anyUtils;\n+        });\n+        when(anyUtils.getField(anyString())).thenAnswer(ic -> {\n+            String field = ic.getArgument(0);\n+            return FIELDS.get(anyUtils.anyTypeKind()).contains(field)\n+                    ? ReflectionUtils.findField(getClass(), \"anyUtils\")\n+                    : null;\n+        });\n+        when(plainSchemaDAO.find(anyString())).thenAnswer(ic -> {\n+            String schemaName = ic.getArgument(0);\n+            switch (schemaName) {\n+                case \"email\":\n+                case \"firstname\":\n+                case \"location\":\n+                    PlainSchema schema = mock(PlainSchema.class);\n+                    when(schema.getKey()).thenReturn(schemaName);\n+                    when(schema.getType()).thenReturn(AttrSchemaType.String);\n+                    return schema;\n+\n+                default:\n+                    return null;\n+            }\n+        });\n+        when(derSchemaDAO.find(anyString())).thenAnswer(ic -> {\n+            String schemaName = ic.getArgument(0);\n+            switch (schemaName) {\n+                case \"cn\":\n+                    DerSchema schema = mock(DerSchema.class);\n+                    when(schema.getKey()).thenReturn(ic.getArgument(0));\n+                    return schema;\n+\n+                default:\n+                    return null;\n+            }\n+        });\n+        when(virSchemaDAO.find(anyString())).thenAnswer(ic -> {\n+            String schemaName = ic.getArgument(0);\n+            switch (schemaName) {\n+                case \"rvirtualdata\":\n+                    VirSchema schema = mock(VirSchema.class);\n+                    when(schema.getKey()).thenReturn(ic.getArgument(0));\n+                    return schema;\n+\n+                default:\n+                    return null;\n+            }\n+        });\n+    }\n+\n     @Test\n     public void ownFields() throws ParseException {\n         IntAttrName intAttrName = intAttrNameParser.parse(\"key\", AnyTypeKind.USER);\n@@ -231,8 +330,8 @@ public void privileges() throws ParseException {\n \n     @Test\n     public void relationship() throws ParseException {\n-        IntAttrName intAttrName = intAttrNameParser.parse(\"relationships[inclusion][PRINTER].location\",\n-                AnyTypeKind.USER);\n+        IntAttrName intAttrName = intAttrNameParser.parse(\n+                \"relationships[inclusion][PRINTER].location\", AnyTypeKind.USER);\n         assertNotNull(intAttrName);\n         assertEquals(AnyTypeKind.ANY_OBJECT, intAttrName.getAnyTypeKind());\n         assertNull(intAttrName.getField());","previous_filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/IntAttrNameParserTest.java"},{"sha":"146e9d8f0a521d43e36909d09038231184df9935","filename":"core/provisioning-java/pom.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -44,11 +44,6 @@ under the License.\n       <scope>provided</scope>\n     </dependency>\n \n-    <dependency>\n-      <groupId>org.apache.commons</groupId>\n-      <artifactId>commons-jexl3</artifactId>\n-    </dependency>\n-    \n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context-support</artifactId>\n@@ -141,6 +136,11 @@ under the License.\n       <artifactId>spring-test</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n       <artifactId>junit-jupiter</artifactId>"},{"sha":"ad89d8f88fcb9b9507197cd4c8ecb40e7799de68","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":2,"deletions":52,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -24,7 +24,6 @@\n import java.util.Set;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -33,7 +32,6 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n@@ -49,9 +47,6 @@\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.OperationOptionsBuilder;\n import org.identityconnectors.framework.common.objects.SearchResult;\n-import org.identityconnectors.framework.common.objects.SortKey;\n-import org.identityconnectors.framework.common.objects.SyncDeltaBuilder;\n-import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.identityconnectors.framework.common.objects.SyncResultsHandler;\n import org.identityconnectors.framework.common.objects.SyncToken;\n import org.identityconnectors.framework.common.objects.Uid;\n@@ -310,7 +305,7 @@ public void fullReconciliation(\n             final SyncResultsHandler handler,\n             final OperationOptions options) {\n \n-        filteredReconciliation(objectClass, null, handler, options);\n+        Connector.super.fullReconciliation(objectClass, handler, options);\n     }\n \n     @Transactional\n@@ -321,29 +316,7 @@ public void filteredReconciliation(\n             final SyncResultsHandler handler,\n             final OperationOptions options) {\n \n-        Filter filter = null;\n-        OperationOptions actualOptions = options;\n-        if (filterBuilder != null) {\n-            filter = filterBuilder.build();\n-            actualOptions = filterBuilder.build(actualOptions);\n-        }\n-\n-        search(objectClass, filter, new SearchResultsHandler() {\n-\n-            @Override\n-            public void handleResult(final SearchResult result) {\n-                // nothing to do\n-            }\n-\n-            @Override\n-            public boolean handle(final ConnectorObject object) {\n-                return handler.handle(new SyncDeltaBuilder().\n-                        setObject(object).\n-                        setDeltaType(SyncDeltaType.CREATE_OR_UPDATE).\n-                        setToken(new SyncToken(\"\")).\n-                        build());\n-            }\n-        }, actualOptions);\n+        Connector.super.filteredReconciliation(objectClass, filterBuilder, handler, options);\n     }\n \n     @Override\n@@ -476,29 +449,6 @@ public boolean handle(final ConnectorObject connectorObject) {\n         return result;\n     }\n \n-    @Override\n-    public SearchResult search(\n-            final ObjectClass objectClass,\n-            final Filter filter,\n-            final SearchResultsHandler handler,\n-            final int pageSize,\n-            final String pagedResultsCookie,\n-            final List<OrderByClause> orderBy,\n-            final OperationOptions options) {\n-\n-        OperationOptionsBuilder builder = new OperationOptionsBuilder().setPageSize(pageSize).setPagedResultsOffset(-1);\n-        if (pagedResultsCookie != null) {\n-            builder.setPagedResultsCookie(pagedResultsCookie);\n-        }\n-        builder.setSortKeys(orderBy.stream().map(clause\n-                -> new SortKey(clause.getField(), clause.getDirection() == OrderByClause.Direction.ASC)).\n-                collect(Collectors.toList()));\n-\n-        builder.setAttributesToGet(options.getAttributesToGet());\n-\n-        return search(objectClass, filter, handler, builder.build());\n-    }\n-\n     @Override\n     public void dispose() {\n         connector.dispose();"},{"sha":"49da4df96f2eccf97c9fd8d2298ce421325f55db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -45,7 +45,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"27dbef44bf86a7b262367ff67b68d68fa6316b3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DerAttrHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -23,13 +23,13 @@\n import java.util.Set;\n import org.apache.commons.jexl3.JexlContext;\n import org.apache.commons.jexl3.MapContext;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"e84d043e0058b9da8b0c18393d7e97c5d239c292","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":108,"deletions":22,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Base64;\n@@ -28,6 +29,8 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.jexl3.JexlContext;\n+import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.reflect.FieldUtils;\n@@ -101,7 +104,9 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.Uid;\n \n @Component\n public class MappingManagerImpl implements MappingManager {\n@@ -182,6 +187,87 @@ protected String processPreparedAttr(final Pair<String, Attribute> preparedAttr,\n         return connObjectKey;\n     }\n \n+    private static Name getName(final String evalConnObjectLink, final String connObjectKey) {\n+        // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),\n+        // otherwise evaluated connObjectLink expression is taken as Name().\n+        Name name;\n+        if (StringUtils.isBlank(evalConnObjectLink)) {\n+            // add connObjectKey as __NAME__ attribute ...\n+            LOG.debug(\"Add connObjectKey [{}] as {}\", connObjectKey, Name.NAME);\n+            name = new Name(connObjectKey);\n+        } else {\n+            LOG.debug(\"Add connObjectLink [{}] as {}\", evalConnObjectLink, Name.NAME);\n+            name = new Name(evalConnObjectLink);\n+\n+            // connObjectKey not propagated: it will be used to set the value for __UID__ attribute\n+            LOG.debug(\"connObjectKey will be used just as {} attribute\", Uid.NAME);\n+        }\n+\n+        return name;\n+    }\n+\n+    /**\n+     * Build __NAME__ for propagation.\n+     * First look if there is a defined connObjectLink for the given resource (and in\n+     * this case evaluate as JEXL); otherwise, take given connObjectKey.\n+     *\n+     * @param any given any object\n+     * @param provision external resource\n+     * @param connObjectKey connector object key\n+     * @return the value to be propagated as __NAME__\n+     */\n+    private Name evaluateNAME(final Any<?> any, final Provision provision, final String connObjectKey) {\n+        if (StringUtils.isBlank(connObjectKey)) {\n+            // LOG error but avoid to throw exception: leave it to the external resource\n+            LOG.warn(\"Missing ConnObjectKey value for {}: \", provision.getResource());\n+        }\n+\n+        // Evaluate connObjectKey expression\n+        String connObjectLink = provision == null || provision.getMapping() == null\n+                ? null\n+                : provision.getMapping().getConnObjectLink();\n+        String evalConnObjectLink = null;\n+        if (StringUtils.isNotBlank(connObjectLink)) {\n+            JexlContext jexlContext = new MapContext();\n+            JexlUtils.addFieldsToContext(any, jexlContext);\n+            JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n+            JexlUtils.addDerAttrsToContext(any, derAttrHandler, jexlContext);\n+            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n+        }\n+\n+        return getName(evalConnObjectLink, connObjectKey);\n+    }\n+\n+    /**\n+     * Build __NAME__ for propagation.\n+     * First look if there is a defined connObjectLink for the given resource (and in\n+     * this case evaluate as JEXL); otherwise, take given connObjectKey.\n+     *\n+     * @param realm given any object\n+     * @param orgUnit external resource\n+     * @param connObjectKey connector object key\n+     * @return the value to be propagated as __NAME__\n+     */\n+    private Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final String connObjectKey) {\n+        if (StringUtils.isBlank(connObjectKey)) {\n+            // LOG error but avoid to throw exception: leave it to the external resource\n+            LOG.warn(\"Missing ConnObjectKey value for {}: \", orgUnit.getResource());\n+        }\n+\n+        // Evaluate connObjectKey expression\n+        String connObjectLink = orgUnit == null\n+                ? null\n+                : orgUnit.getConnObjectLink();\n+        String evalConnObjectLink = null;\n+        if (StringUtils.isNotBlank(connObjectLink)) {\n+            JexlContext jexlContext = new MapContext();\n+            JexlUtils.addFieldsToContext(realm, jexlContext);\n+            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n+        }\n+\n+        return getName(evalConnObjectLink, connObjectKey);\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public Pair<String, Set<Attribute>> prepareAttrs(\n@@ -225,7 +311,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n                 attributes.remove(connObjectKeyAttr);\n                 attributes.add(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKeyValue[0]));\n             }\n-            Name name = MappingUtils.evaluateNAME(any, provision, connObjectKeyValue[0]);\n+            Name name = evaluateNAME(any, provision, connObjectKeyValue[0]);\n             attributes.add(name);\n             if (connObjectKeyAttr == null\n                     && connObjectKeyValue[0] != null && !connObjectKeyValue[0].equals(name.getNameValue())) {\n@@ -300,7 +386,7 @@ public Set<Attribute> prepareAttrs(\n                 attributes.remove(connObjectKeyExtAttr);\n                 attributes.add(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKey));\n             }\n-            Name name = MappingUtils.evaluateNAME(user, provision, connObjectKey);\n+            Name name = evaluateNAME(user, provision, connObjectKey);\n             attributes.add(name);\n             if (!connObjectKey.equals(name.getNameValue()) && connObjectKeyExtAttr == null) {\n                 attributes.add(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKey));\n@@ -378,7 +464,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUni\n                 attributes.remove(connObjectKeyAttr);\n                 attributes.add(AttributeBuilder.build(connObjectKeyItem.get().getExtAttrName(), connObjectKeyValue[0]));\n             }\n-            attributes.add(MappingUtils.evaluateNAME(realm, orgUnit, connObjectKeyValue[0]));\n+            attributes.add(evaluateNAME(realm, orgUnit, connObjectKeyValue[0]));\n         }\n \n         return Pair.of(connObjectKeyValue[0], attributes);\n@@ -634,24 +720,24 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n                     default:\n                         try {\n-                            Object fieldValue = FieldUtils.readField(ref, intAttrName.getField(), true);\n-                            if (fieldValue instanceof Date) {\n-                                // needed because ConnId does not natively supports the Date type\n-                                attrValue.setStringValue(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.\n-                                        format((Date) fieldValue));\n-                            } else if (Boolean.TYPE.isInstance(fieldValue)) {\n-                                attrValue.setBooleanValue((Boolean) fieldValue);\n-                            } else if (Double.TYPE.isInstance(fieldValue) || Float.TYPE.isInstance(fieldValue)) {\n-                                attrValue.setDoubleValue((Double) fieldValue);\n-                            } else if (Long.TYPE.isInstance(fieldValue) || Integer.TYPE.isInstance(fieldValue)) {\n-                                attrValue.setLongValue((Long) fieldValue);\n-                            } else {\n-                                attrValue.setStringValue(fieldValue.toString());\n-                            }\n-                            values.add(attrValue);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Could not read value of '{}' from {}\", intAttrName.getField(), ref, e);\n+                        Object fieldValue = FieldUtils.readField(ref, intAttrName.getField(), true);\n+                        if (fieldValue instanceof Date) {\n+                            // needed because ConnId does not natively supports the Date type\n+                            attrValue.setStringValue(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.\n+                                    format((Date) fieldValue));\n+                        } else if (Boolean.TYPE.isInstance(fieldValue)) {\n+                            attrValue.setBooleanValue((Boolean) fieldValue);\n+                        } else if (Double.TYPE.isInstance(fieldValue) || Float.TYPE.isInstance(fieldValue)) {\n+                            attrValue.setDoubleValue((Double) fieldValue);\n+                        } else if (Long.TYPE.isInstance(fieldValue) || Integer.TYPE.isInstance(fieldValue)) {\n+                            attrValue.setLongValue((Long) fieldValue);\n+                        } else {\n+                            attrValue.setStringValue(fieldValue.toString());\n                         }\n+                        values.add(attrValue);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not read value of '{}' from {}\", intAttrName.getField(), ref, e);\n+                    }\n                 }\n             } else if (intAttrName.getSchemaType() != null) {\n                 switch (intAttrName.getSchemaType()) {\n@@ -758,8 +844,8 @@ private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n                     PlainAttrGetter.DEFAULT);\n         }\n \n-        return Optional.ofNullable(preparedAttr)\n-                .map(attr -> MappingUtils.evaluateNAME(any, provision, attr.getKey()).getNameValue()).orElse(null);\n+        return Optional.ofNullable(preparedAttr).\n+                map(attr -> evaluateNAME(any, provision, attr.getKey()).getNameValue()).orElse(null);\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"92507b0077bdc85a1ea3ce692b651675912e3885","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.api.job.JobManager;"},{"sha":"baa598ff0181077b5870bd23b3f916a33b3171b3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -73,8 +73,8 @@\n import org.apache.syncope.core.provisioning.api.PlainAttrGetter;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -226,7 +226,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n                         AccountGetter.DEFAULT,\n                         PlainAttrGetter.DEFAULT);\n                 if (intValues.getRight().isEmpty()\n-                        && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n+                        && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any, derAttrHandler)) {\n \n                     missingAttrNames.add(mapItem.getIntAttrName());\n                 }\n@@ -256,30 +256,29 @@ private SyncopeClientException checkMandatoryOnResources(\n         return reqValMissing;\n     }\n \n-    private static void checkMandatory(\n+    private void checkMandatory(\n             final PlainSchema schema,\n             final PlainAttr<?> attr,\n             final Any<?> any,\n             final SyncopeClientException reqValMissing) {\n \n         if (attr == null\n                 && !schema.isReadonly()\n-                && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)) {\n+                && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any, derAttrHandler)) {\n \n             LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n \n             reqValMissing.getElements().add(schema.getKey());\n         }\n     }\n \n-    private static SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils anyUtils) {\n+    private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils anyUtils) {\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n         AllowedSchemas<PlainSchema> allowedPlainSchemas = anyUtils.dao().findAllowedSchemas(any, PlainSchema.class);\n-        allowedPlainSchemas.getForSelf()\n-                .forEach(schema -> checkMandatory(schema, any.getPlainAttr(schema.getKey())\n-                .orElse(null), any, reqValMissing));\n+        allowedPlainSchemas.getForSelf().forEach(schema -> checkMandatory(\n+                schema, any.getPlainAttr(schema.getKey()).orElse(null), any, reqValMissing));\n         if (any instanceof GroupableRelatable) {\n             allowedPlainSchemas.getForMemberships().forEach((group, schemas) -> {\n                 GroupableRelatable<?, ?, ?, ?, ?> groupable = GroupableRelatable.class.cast(any);"},{"sha":"997b7d6d06ab348b873bad15b97603c5d6d3fdc8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/JEXLItemTransformerImpl.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FJEXLItemTransformerImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -32,11 +32,16 @@\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.api.data.JEXLItemTransformer;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n public class JEXLItemTransformerImpl implements JEXLItemTransformer {\n \n+    @Autowired\n+    private DerAttrHandler derAttrHandler;\n+\n     private String propagationJEXL;\n \n     private String pullJEXL;\n@@ -67,7 +72,7 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> beforePropagation(\n                         JexlUtils.addFieldsToContext(entity, jexlContext);\n                         if (entity instanceof Any) {\n                             JexlUtils.addPlainAttrsToContext(((Any<?>) entity).getPlainAttrs(), jexlContext);\n-                            JexlUtils.addDerAttrsToContext(((Any<?>) entity), jexlContext);\n+                            JexlUtils.addDerAttrsToContext(((Any<?>) entity), derAttrHandler, jexlContext);\n                         }\n                     }\n                     jexlContext.set(\"value\", originalValue);"},{"sha":"0a5a695b2e5ac1ef819d4f2a3d9b48c6085d44e5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"96dad2968f6674a545c23f66f736a60ae8426037","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -50,7 +50,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -67,7 +67,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import org.identityconnectors.framework.common.objects.ObjectClass;"},{"sha":"e5d48b08a9e698fee8656daae3611f6ff322aa74","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;"},{"sha":"1d50916aa91dadba54a5c6da0a6d62ae3d2031b1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -19,11 +19,9 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collection;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n@@ -69,7 +67,6 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n@@ -726,14 +723,11 @@ public UserTO getUserTO(final User user, final boolean details) {\n             userTO.setSecurityQuestion(user.getSecurityQuestion().getKey());\n         }\n \n-        Map<VirSchema, List<String>> virAttrValues = details\n-                ? virAttrHandler.getValues(user)\n-                : Collections.<VirSchema, List<String>>emptyMap();\n         fillTO(userTO, user.getRealm().getFullPath(),\n                 user.getAuxClasses(),\n                 user.getPlainAttrs(),\n                 derAttrHandler.getValues(user),\n-                virAttrValues,\n+                details ? virAttrHandler.getValues(user) : Map.of(),\n                 userDAO.findAllResources(user),\n                 details);\n "},{"sha":"e1f9220ea93d61bea17f3231854272ef6e128e72","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -73,8 +73,8 @@\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"7895244cf8dd2df292c1ff530381d924040c33fe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":20,"deletions":11,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -338,12 +338,21 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final String executo\n     }\n \n     @Override\n-    public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationReporter reporter,\n+    public TaskExec execute(\n+            final PropagationTaskInfo taskInfo,\n+            final PropagationReporter reporter,\n             final String executor) {\n+\n         PropagationTask task;\n         if (taskInfo.getKey() == null) {\n+            // double-checks that provided External Resource is valid, for further actions\n+            ExternalResource resource = resourceDAO.find(taskInfo.getResource());\n+            if (resource == null) {\n+                resource = taskInfo.getExternalResource();\n+            }\n+\n             task = entityFactory.newEntity(PropagationTask.class);\n-            task.setResource(resourceDAO.find(taskInfo.getResource()));\n+            task.setResource(resource);\n             task.setObjectClassName(taskInfo.getObjectClassName());\n             task.setAnyTypeKind(taskInfo.getAnyTypeKind());\n             task.setAnyType(taskInfo.getAnyType());\n@@ -360,9 +369,11 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n         }\n         task.setAttributes(attributes);\n \n-        List<PropagationActions> actions = getPropagationActions(task.getResource());\n+        Connector connector = taskInfo.getConnector() == null\n+                ? connFactory.getConnector(task.getResource())\n+                : taskInfo.getConnector();\n \n-        String resource = task.getResource().getKey();\n+        List<PropagationActions> actions = getPropagationActions(task.getResource());\n \n         Date start = new Date();\n \n@@ -382,12 +393,10 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n         Provision provision = null;\n         OrgUnit orgUnit = null;\n         Uid uid = null;\n-        Connector connector = null;\n         Result result;\n         try {\n             provision = task.getResource().getProvision(new ObjectClass(task.getObjectClassName())).orElse(null);\n             orgUnit = task.getResource().getOrgUnit();\n-            connector = connFactory.getConnector(task.getResource());\n \n             if (taskInfo.getBeforeObj() == null) {\n                 // Try to read remote object BEFORE any actual operation\n@@ -425,7 +434,7 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n             result = Result.SUCCESS;\n         } catch (Exception e) {\n             result = Result.FAILURE;\n-            LOG.error(\"Exception during provision on resource \" + resource, e);\n+            LOG.error(\"Exception during provision on resource \" + task.getResource().getKey(), e);\n \n             if (e instanceof ConnectorException && e.getCause() != null) {\n                 taskExecutionMessage = e.getCause().getMessage();\n@@ -509,12 +518,12 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n         String anyTypeKind = task.getAnyTypeKind() == null ? \"realm\" : task.getAnyTypeKind().name().toLowerCase();\n         String operation = task.getOperation().name().toLowerCase();\n         boolean notificationsAvailable = notificationManager.notificationsAvailable(\n-                AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, resource, operation);\n+                AuditElements.EventCategoryType.PROPAGATION, anyTypeKind, task.getResource().getKey(), operation);\n         boolean auditRequested = auditManager.auditRequested(\n                 AuthContextUtils.getUsername(),\n                 AuditElements.EventCategoryType.PROPAGATION,\n                 anyTypeKind,\n-                resource,\n+                task.getResource().getKey(),\n                 operation);\n \n         if (notificationsAvailable || auditRequested) {\n@@ -523,7 +532,7 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n                     AuthContextUtils.getUsername(),\n                     AuditElements.EventCategoryType.PROPAGATION,\n                     anyTypeKind,\n-                    resource,\n+                    task.getResource().getKey(),\n                     operation,\n                     result,\n                     beforeObj,\n@@ -534,7 +543,7 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n                     AuthContextUtils.getUsername(),\n                     AuditElements.EventCategoryType.PROPAGATION,\n                     anyTypeKind,\n-                    resource,\n+                    task.getResource().getKey(),\n                     operation,\n                     result,\n                     beforeObj,"},{"sha":"854340dfedf7674dfa9bfd17719092f96906fa83","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -32,11 +32,12 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -57,6 +58,9 @@ public class LDAPMembershipPropagationActions implements PropagationActions {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(LDAPMembershipPropagationActions.class);\n \n+    @Autowired\n+    protected DerAttrHandler derAttrHandler;\n+\n     @Autowired\n     protected AnyTypeDAO anyTypeDAO;\n \n@@ -119,11 +123,9 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n \n                         Attribute beforeLdapGroups = beforeObj.getAttributeByName(getGroupMembershipAttrName());\n                         LOG.debug(\"Memberships not managed by Syncope: {}\", beforeLdapGroups);\n-                        for (Object value : beforeLdapGroups.getValue()) {\n-                            if (!connObjectLinks.contains(String.valueOf(value))) {\n-                                groups.add(String.valueOf(value));\n-                            }\n-                        }\n+                        beforeLdapGroups.getValue().stream().\n+                                filter(value -> !connObjectLinks.contains(String.valueOf(value))).\n+                                forEach(value -> groups.add(String.valueOf(value)));\n                     }\n                 }\n                 LOG.debug(\"Add ldapGroups to attributes: {}\" + groups);\n@@ -136,13 +138,13 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n         }\n     }\n \n-    private static String evaluateGroupConnObjectLink(final String connObjectLinkTemplate, final Group group) {\n+    private String evaluateGroupConnObjectLink(final String connObjectLinkTemplate, final Group group) {\n         LOG.debug(\"Evaluating connObjectLink for {}\", group);\n \n         JexlContext jexlContext = new MapContext();\n         JexlUtils.addFieldsToContext(group, jexlContext);\n         JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n-        JexlUtils.addDerAttrsToContext(group, jexlContext);\n+        JexlUtils.addDerAttrsToContext(group, derAttrHandler, jexlContext);\n \n         return JexlUtils.evaluate(connObjectLinkTemplate, jexlContext);\n     }"},{"sha":"b6db281f584312900622fcd83fe3aabc91c4adc1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":8,"deletions":41,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n-import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Comparator;\n@@ -36,7 +35,6 @@\n import javax.annotation.Resource;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.core.persistence.api.entity.Exec;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n@@ -85,30 +83,25 @@ protected void doExecute(\n             final boolean nullPriorityAsync,\n             final String executorId) {\n \n-        Map<PropagationTaskInfo, ExternalResource> taskToResource = new HashMap<>(taskInfos.size());\n         List<PropagationTaskInfo> prioritizedTasks = new ArrayList<>();\n \n         int[] connRequestTimeout = { 60 };\n \n-        taskInfos.forEach(task -> {\n-            ExternalResource resource = resourceDAO.find(task.getResource());\n-            taskToResource.put(task, resource);\n+        taskInfos.stream().filter(task -> task.getExternalResource().getPropagationPriority() != null).forEach(task -> {\n+            prioritizedTasks.add(task);\n \n-            if (resource.getPropagationPriority() != null) {\n-                prioritizedTasks.add(task);\n+            if (task.getExternalResource().getConnector().getConnRequestTimeout() != null\n+                    && connRequestTimeout[0] < task.getExternalResource().getConnector().getConnRequestTimeout()) {\n \n-                if (resource.getConnector().getConnRequestTimeout() != null\n-                        && connRequestTimeout[0] < resource.getConnector().getConnRequestTimeout()) {\n-                    connRequestTimeout[0] = resource.getConnector().getConnRequestTimeout();\n-                    LOG.debug(\"Upgrade request connection timeout to {}\", connRequestTimeout);\n-                }\n+                connRequestTimeout[0] = task.getExternalResource().getConnector().getConnRequestTimeout();\n+                LOG.debug(\"Upgrade request connection timeout to {}\", connRequestTimeout);\n             }\n         });\n \n-        prioritizedTasks.sort(new PriorityComparator(taskToResource));\n+        prioritizedTasks.sort(Comparator.comparing(task -> task.getExternalResource().getPropagationPriority()));\n         LOG.debug(\"Propagation tasks sorted by priority, for serial execution: {}\", prioritizedTasks);\n \n-        Collection<PropagationTaskInfo> concurrentTasks = taskInfos.stream().\n+        Set<PropagationTaskInfo> concurrentTasks = taskInfos.stream().\n                 filter(task -> !prioritizedTasks.contains(task)).collect(Collectors.toSet());\n         LOG.debug(\"Propagation tasks for concurrent execution: {}\", concurrentTasks);\n \n@@ -171,30 +164,4 @@ protected void doExecute(\n             }\n         }\n     }\n-\n-    /**\n-     * Compare propagation tasks according to related ExternalResource's priority.\n-     */\n-    protected static class PriorityComparator implements Comparator<PropagationTaskInfo>, Serializable {\n-\n-        private static final long serialVersionUID = -1969355670784448878L;\n-\n-        private final Map<PropagationTaskInfo, ExternalResource> taskToResource;\n-\n-        public PriorityComparator(final Map<PropagationTaskInfo, ExternalResource> taskToResource) {\n-            this.taskToResource = taskToResource;\n-        }\n-\n-        @Override\n-        public int compare(final PropagationTaskInfo task1, final PropagationTaskInfo task2) {\n-            int prop1 = taskToResource.get(task1).getPropagationPriority();\n-            int prop2 = taskToResource.get(task2).getPropagationPriority();\n-\n-            return prop1 > prop2\n-                    ? 1\n-                    : prop1 == prop2\n-                            ? 0\n-                            : -1;\n-        }\n-    }\n }"},{"sha":"9f7b979c76ef284238d03266eec88c905e65c292","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":35,"deletions":40,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,6 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.java.propagation;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -43,14 +52,15 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -61,15 +71,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.CollectionUtils;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n \n /**\n  * Manage the data propagation to external resources.\n@@ -85,36 +86,27 @@ public class PropagationManagerImpl implements PropagationManager {\n     @Autowired\n     protected AnyObjectDAO anyObjectDAO;\n \n-    /**\n-     * User DAO.\n-     */\n     @Autowired\n     protected UserDAO userDAO;\n \n-    /**\n-     * Group DAO.\n-     */\n     @Autowired\n     protected GroupDAO groupDAO;\n \n-    /**\n-     * Resource DAO.\n-     */\n     @Autowired\n     protected ExternalResourceDAO resourceDAO;\n \n     @Autowired\n     protected EntityFactory entityFactory;\n \n-    /**\n-     * ConnObjectUtils.\n-     */\n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n \n     @Autowired\n     protected MappingManager mappingManager;\n \n+    @Autowired\n+    protected DerAttrHandler derAttrHandler;\n+\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n@@ -388,17 +380,18 @@ protected List<PropagationTaskInfo> getDeleteTasks(\n         return createTasks(any, null, false, false, true, localPropByRes, propByLinkedAccount, null);\n     }\n \n-    protected PropagationTaskInfo newTask(\n+    @Override\n+    public PropagationTaskInfo newTask(\n+            final DerAttrHandler derAttrHandler,\n             final Any<?> any,\n-            final String resource,\n+            final ExternalResource resource,\n             final ResourceOperation operation,\n             final Provision provision,\n             final boolean deleteOnResource,\n             final Stream<? extends Item> mappingItems,\n             final Pair<String, Set<Attribute>> preparedAttrs) {\n \n-        PropagationTaskInfo task = new PropagationTaskInfo();\n-        task.setResource(resource);\n+        PropagationTaskInfo task = new PropagationTaskInfo(resource);\n         task.setObjectClassName(provision.getObjectClass().getObjectClassValue());\n         task.setAnyTypeKind(any.getType().getKind());\n         task.setAnyType(any.getType().getKey());\n@@ -413,15 +406,16 @@ protected PropagationTaskInfo newTask(\n         List<String> mandatoryMissing = new ArrayList<>();\n         List<String> mandatoryNullOrEmpty = new ArrayList<>();\n         mappingItems.filter(item -> (!item.isConnObjectKey()\n-                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any))).forEach(item -> {\n-\n-            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getRight());\n-            if (attr == null) {\n-                mandatoryMissing.add(item.getExtAttrName());\n-            } else if (CollectionUtils.isEmpty(attr.getValue())) {\n-                mandatoryNullOrEmpty.add(item.getExtAttrName());\n-            }\n-        });\n+                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any, derAttrHandler))).\n+                forEach(item -> {\n+\n+                    Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getRight());\n+                    if (attr == null) {\n+                        mandatoryMissing.add(item.getExtAttrName());\n+                    } else if (CollectionUtils.isEmpty(attr.getValue())) {\n+                        mandatoryNullOrEmpty.add(item.getExtAttrName());\n+                    }\n+                });\n         if (!mandatoryMissing.isEmpty()) {\n             preparedAttrs.getRight().add(AttributeBuilder.build(\n                     PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n@@ -528,8 +522,9 @@ protected List<PropagationTaskInfo> createTasks(\n                 }\n \n                 PropagationTaskInfo task = newTask(\n+                        derAttrHandler,\n                         any,\n-                        resourceKey,\n+                        resource,\n                         operation,\n                         provision,\n                         deleteOnResource,\n@@ -571,8 +566,9 @@ protected List<PropagationTaskInfo> createTasks(\n                             AnyTypeKind.USER.name(), account.getResource());\n                 } else {\n                     PropagationTaskInfo accountTask = newTask(\n+                            derAttrHandler,\n                             user,\n-                            account.getResource().getKey(),\n+                            account.getResource(),\n                             operation,\n                             provision,\n                             deleteOnResource,\n@@ -620,8 +616,7 @@ public List<PropagationTaskInfo> createTasks(\n                 LOG.warn(\"Requesting propagation for {} but no ConnObjectLink provided for {}\",\n                         realm.getFullPath(), resource);\n             } else {\n-                PropagationTaskInfo task = new PropagationTaskInfo();\n-                task.setResource(resource.getKey());\n+                PropagationTaskInfo task = new PropagationTaskInfo(resource);\n                 task.setObjectClassName(orgUnit.getObjectClass().getObjectClassValue());\n                 task.setEntityKey(realm.getKey());\n                 task.setOperation(operation);"},{"sha":"25a85c4a6a40fcd269497f61c2032b71f1a7c8e7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":73,"deletions":41,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import java.util.Objects;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -36,7 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.java.job.AbstractSchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.quartz.JobExecutionException;\n@@ -50,6 +51,37 @@\n \n     private static final String LINKED_ACCOUNT = \"LINKED_ACCOUNT\";\n \n+    /**\n+     * Helper method to invoke logging per provisioning result, for the given trace level.\n+     *\n+     * @param results provisioning results\n+     * @param level trace level\n+     * @return report as string\n+     */\n+    public static String generate(final Collection<ProvisioningReport> results, final TraceLevel level) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        results.stream().map(result -> {\n+            if (level == TraceLevel.SUMMARY) {\n+                // No per entry log in this case.\n+                return null;\n+            } else if (level == TraceLevel.FAILURES && result.getStatus() == ProvisioningReport.Status.FAILURE) {\n+                // only report failures\n+                return String.format(\"Failed %s (key/name): %s/%s with message: %s\",\n+                        result.getOperation(), result.getKey(), result.getName(), result.getMessage());\n+            } else {\n+                // All\n+                return String.format(\"%s %s (key/name): %s/%s %s\",\n+                        result.getOperation(), result.getStatus(), result.getKey(), result.getName(),\n+                        StringUtils.isBlank(result.getMessage())\n+                        ? StringUtils.EMPTY\n+                        : \"with message: \" + result.getMessage());\n+            }\n+        }).filter(Objects::nonNull).forEach(report -> sb.append(report).append('\\n'));\n+\n+        return sb.toString();\n+    }\n+\n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n \n@@ -412,71 +444,71 @@ protected String createReport(\n             if (includeUser) {\n                 if (!uFailCreate.isEmpty()) {\n                     report.append(\"\\n\\nUsers failed to create: \");\n-                    report.append(ProvisioningReport.generate(uFailCreate, traceLevel));\n+                    report.append(generate(uFailCreate, traceLevel));\n                 }\n                 if (!uFailUpdate.isEmpty()) {\n                     report.append(\"\\nUsers failed to update: \");\n-                    report.append(ProvisioningReport.generate(uFailUpdate, traceLevel));\n+                    report.append(generate(uFailUpdate, traceLevel));\n                 }\n                 if (!uFailDelete.isEmpty()) {\n                     report.append(\"\\nUsers failed to delete: \");\n-                    report.append(ProvisioningReport.generate(uFailDelete, traceLevel));\n+                    report.append(generate(uFailDelete, traceLevel));\n                 }\n \n                 if (!laFailCreate.isEmpty()) {\n                     report.append(\"\\n\\nAccounts failed to create: \");\n-                    report.append(ProvisioningReport.generate(laFailCreate, traceLevel));\n+                    report.append(generate(laFailCreate, traceLevel));\n                 }\n                 if (!laFailUpdate.isEmpty()) {\n                     report.append(\"\\nAccounts failed to update: \");\n-                    report.append(ProvisioningReport.generate(laFailUpdate, traceLevel));\n+                    report.append(generate(laFailUpdate, traceLevel));\n                 }\n                 if (!laFailDelete.isEmpty()) {\n                     report.append(\"\\nAccounts failed to delete: \");\n-                    report.append(ProvisioningReport.generate(laFailDelete, traceLevel));\n+                    report.append(generate(laFailDelete, traceLevel));\n                 }\n             }\n \n             if (includeGroup) {\n                 if (!gFailCreate.isEmpty()) {\n                     report.append(\"\\n\\nGroups failed to create: \");\n-                    report.append(ProvisioningReport.generate(gFailCreate, traceLevel));\n+                    report.append(generate(gFailCreate, traceLevel));\n                 }\n                 if (!gFailUpdate.isEmpty()) {\n                     report.append(\"\\nGroups failed to update: \");\n-                    report.append(ProvisioningReport.generate(gFailUpdate, traceLevel));\n+                    report.append(generate(gFailUpdate, traceLevel));\n                 }\n                 if (!gFailDelete.isEmpty()) {\n                     report.append(\"\\nGroups failed to delete: \");\n-                    report.append(ProvisioningReport.generate(gFailDelete, traceLevel));\n+                    report.append(generate(gFailDelete, traceLevel));\n                 }\n             }\n \n             if (includeAnyObject && !aFailCreate.isEmpty()) {\n                 report.append(\"\\nAny objects failed to create: \");\n-                report.append(ProvisioningReport.generate(aFailCreate, traceLevel));\n+                report.append(generate(aFailCreate, traceLevel));\n             }\n             if (includeAnyObject && !aFailUpdate.isEmpty()) {\n                 report.append(\"\\nAny objects failed to update: \");\n-                report.append(ProvisioningReport.generate(aFailUpdate, traceLevel));\n+                report.append(generate(aFailUpdate, traceLevel));\n             }\n             if (includeAnyObject && !aFailDelete.isEmpty()) {\n                 report.append(\"\\nAny objects failed to delete: \");\n-                report.append(ProvisioningReport.generate(aFailDelete, traceLevel));\n+                report.append(generate(aFailDelete, traceLevel));\n             }\n \n             if (includeRealm) {\n                 if (!rFailCreate.isEmpty()) {\n                     report.append(\"\\nRealms failed to create: \");\n-                    report.append(ProvisioningReport.generate(rFailCreate, traceLevel));\n+                    report.append(generate(rFailCreate, traceLevel));\n                 }\n                 if (!rFailUpdate.isEmpty()) {\n                     report.append(\"\\nRealms failed to update: \");\n-                    report.append(ProvisioningReport.generate(rFailUpdate, traceLevel));\n+                    report.append(generate(rFailUpdate, traceLevel));\n                 }\n                 if (!rFailDelete.isEmpty()) {\n                     report.append(\"\\nRealms failed to delete: \");\n-                    report.append(ProvisioningReport.generate(rFailDelete, traceLevel));\n+                    report.append(generate(rFailDelete, traceLevel));\n                 }\n             }\n         }\n@@ -486,110 +518,110 @@ protected String createReport(\n             if (includeUser) {\n                 if (!uSuccCreate.isEmpty()) {\n                     report.append(\"\\n\\nUsers created:\\n\").\n-                            append(ProvisioningReport.generate(uSuccCreate, traceLevel));\n+                            append(generate(uSuccCreate, traceLevel));\n                 }\n                 if (!uSuccUpdate.isEmpty()) {\n                     report.append(\"\\nUsers updated:\\n\").\n-                            append(ProvisioningReport.generate(uSuccUpdate, traceLevel));\n+                            append(generate(uSuccUpdate, traceLevel));\n                 }\n                 if (!uSuccDelete.isEmpty()) {\n                     report.append(\"\\nUsers deleted:\\n\").\n-                            append(ProvisioningReport.generate(uSuccDelete, traceLevel));\n+                            append(generate(uSuccDelete, traceLevel));\n                 }\n                 if (!uSuccNone.isEmpty()) {\n                     report.append(\"\\nUsers no operation:\\n\").\n-                            append(ProvisioningReport.generate(uSuccNone, traceLevel));\n+                            append(generate(uSuccNone, traceLevel));\n                 }\n                 if (!uIgnore.isEmpty()) {\n                     report.append(\"\\nUsers ignored:\\n\").\n-                            append(ProvisioningReport.generate(uIgnore, traceLevel));\n+                            append(generate(uIgnore, traceLevel));\n                 }\n \n                 if (!laSuccCreate.isEmpty()) {\n                     report.append(\"\\n\\nAccounts created:\\n\").\n-                            append(ProvisioningReport.generate(laSuccCreate, traceLevel));\n+                            append(generate(laSuccCreate, traceLevel));\n                 }\n                 if (!laSuccUpdate.isEmpty()) {\n                     report.append(\"\\nAccounts updated:\\n\").\n-                            append(ProvisioningReport.generate(laSuccUpdate, traceLevel));\n+                            append(generate(laSuccUpdate, traceLevel));\n                 }\n                 if (!laSuccDelete.isEmpty()) {\n                     report.append(\"\\nAccounts deleted:\\n\").\n-                            append(ProvisioningReport.generate(laSuccDelete, traceLevel));\n+                            append(generate(laSuccDelete, traceLevel));\n                 }\n                 if (!laSuccNone.isEmpty()) {\n                     report.append(\"\\nAccounts no operation:\\n\").\n-                            append(ProvisioningReport.generate(laSuccNone, traceLevel));\n+                            append(generate(laSuccNone, traceLevel));\n                 }\n                 if (!laIgnore.isEmpty()) {\n                     report.append(\"\\nAccounts ignored:\\n\").\n-                            append(ProvisioningReport.generate(laIgnore, traceLevel));\n+                            append(generate(laIgnore, traceLevel));\n                 }\n             }\n             if (includeGroup) {\n                 if (!gSuccCreate.isEmpty()) {\n                     report.append(\"\\n\\nGroups created:\\n\").\n-                            append(ProvisioningReport.generate(gSuccCreate, traceLevel));\n+                            append(generate(gSuccCreate, traceLevel));\n                 }\n                 if (!gSuccUpdate.isEmpty()) {\n                     report.append(\"\\nGroups updated:\\n\").\n-                            append(ProvisioningReport.generate(gSuccUpdate, traceLevel));\n+                            append(generate(gSuccUpdate, traceLevel));\n                 }\n                 if (!gSuccDelete.isEmpty()) {\n                     report.append(\"\\nGroups deleted:\\n\").\n-                            append(ProvisioningReport.generate(gSuccDelete, traceLevel));\n+                            append(generate(gSuccDelete, traceLevel));\n                 }\n                 if (!gSuccNone.isEmpty()) {\n                     report.append(\"\\nGroups no operation:\\n\").\n-                            append(ProvisioningReport.generate(gSuccNone, traceLevel));\n+                            append(generate(gSuccNone, traceLevel));\n                 }\n                 if (!gIgnore.isEmpty()) {\n                     report.append(\"\\nGroups ignored:\\n\").\n-                            append(ProvisioningReport.generate(gIgnore, traceLevel));\n+                            append(generate(gIgnore, traceLevel));\n                 }\n             }\n             if (includeAnyObject) {\n                 if (!aSuccCreate.isEmpty()) {\n                     report.append(\"\\n\\nAny objects created:\\n\").\n-                            append(ProvisioningReport.generate(aSuccCreate, traceLevel));\n+                            append(generate(aSuccCreate, traceLevel));\n                 }\n                 if (!aSuccUpdate.isEmpty()) {\n                     report.append(\"\\nAny objects updated:\\n\").\n-                            append(ProvisioningReport.generate(aSuccUpdate, traceLevel));\n+                            append(generate(aSuccUpdate, traceLevel));\n                 }\n                 if (!aSuccDelete.isEmpty()) {\n                     report.append(\"\\nAny objects deleted:\\n\").\n-                            append(ProvisioningReport.generate(aSuccDelete, traceLevel));\n+                            append(generate(aSuccDelete, traceLevel));\n                 }\n                 if (!aSuccNone.isEmpty()) {\n                     report.append(\"\\nAny objects no operation:\\n\").\n-                            append(ProvisioningReport.generate(aSuccNone, traceLevel));\n+                            append(generate(aSuccNone, traceLevel));\n                 }\n                 if (!aIgnore.isEmpty()) {\n                     report.append(\"\\nAny objects ignored:\\n\").\n-                            append(ProvisioningReport.generate(aIgnore, traceLevel));\n+                            append(generate(aIgnore, traceLevel));\n                 }\n             }\n             if (includeRealm) {\n                 if (!rSuccCreate.isEmpty()) {\n                     report.append(\"\\n\\nRealms created:\\n\").\n-                            append(ProvisioningReport.generate(rSuccCreate, traceLevel));\n+                            append(generate(rSuccCreate, traceLevel));\n                 }\n                 if (!rSuccUpdate.isEmpty()) {\n                     report.append(\"\\nRealms updated:\\n\").\n-                            append(ProvisioningReport.generate(rSuccUpdate, traceLevel));\n+                            append(generate(rSuccUpdate, traceLevel));\n                 }\n                 if (!rSuccDelete.isEmpty()) {\n                     report.append(\"\\nRealms deleted:\\n\").\n-                            append(ProvisioningReport.generate(rSuccDelete, traceLevel));\n+                            append(generate(rSuccDelete, traceLevel));\n                 }\n                 if (!rSuccNone.isEmpty()) {\n                     report.append(\"\\nRealms no operation:\\n\").\n-                            append(ProvisioningReport.generate(rSuccNone, traceLevel));\n+                            append(generate(rSuccNone, traceLevel));\n                 }\n                 if (!rIgnore.isEmpty()) {\n                     report.append(\"\\nRealms ignored:\\n\").\n-                            append(ProvisioningReport.generate(rIgnore, traceLevel));\n+                            append(generate(rIgnore, traceLevel));\n                 }\n             }\n         }"},{"sha":"9884a635bb04a843ac7d41d5dfc5062fed479e0a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n@@ -55,7 +55,7 @@\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullExecutor;\n@@ -188,7 +188,7 @@ protected List<ProvisioningReport> provision(\n         if (!profile.getTask().isPerformCreate()) {\n             LOG.debug(\"PullTask not configured for create\");\n             end(provision.getAnyType().getKind(), UnmatchingRule.toEventName(rule), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         AnyCR anyCR = connObjectUtils.getAnyCR(delta.getObject(), profile.getTask(), provision, true);\n@@ -263,7 +263,7 @@ protected List<ProvisioningReport> provision(\n             end(provision.getAnyType().getKind(), UnmatchingRule.toEventName(rule), resultStatus, null, output, delta);\n         }\n \n-        return Collections.singletonList(result);\n+        return List.of(result);\n     }\n \n     protected void throwIgnoreProvisionException(final SyncDelta delta, final Exception exception)\n@@ -293,7 +293,7 @@ protected List<ProvisioningReport> update(\n             LOG.debug(\"PullTask not configured for update\");\n             end(provision.getAnyType().getKind(),\n                     MatchingRule.toEventName(MatchingRule.UPDATE), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to update {}\", matches);\n@@ -402,7 +402,7 @@ protected List<ProvisioningReport> deprovision(\n             LOG.debug(\"PullTask not configured for update\");\n             end(provision.getAnyType().getKind(),\n                     MatchingRule.toEventName(matchingRule), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to deprovision {}\", matches);\n@@ -519,7 +519,7 @@ protected List<ProvisioningReport> link(\n                             ? MatchingRule.toEventName(MatchingRule.UNLINK)\n                             : MatchingRule.toEventName(MatchingRule.LINK),\n                     Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to update {}\", matches);\n@@ -619,7 +619,7 @@ protected List<ProvisioningReport> delete(\n             LOG.debug(\"PullTask not configured for delete\");\n             end(provision.getAnyType().getKind(),\n                     ResourceOperation.DELETE.name().toLowerCase(), Result.SUCCESS, null, null, delta);\n-            return Collections.<ProvisioningReport>emptyList();\n+            return List.of();\n         }\n \n         LOG.debug(\"About to delete {}\", matches);\n@@ -649,7 +649,7 @@ protected List<ProvisioningReport> delete(\n                     try {\n                         getProvisioningManager().delete(\n                                 match.getAny().getKey(),\n-                                Collections.singleton(profile.getTask().getResource().getKey()),\n+                                Set.of(profile.getTask().getResource().getKey()),\n                                 true);\n                         output = null;\n                         resultStatus = Result.SUCCESS;"},{"sha":"50310f2474b5e4f7aacba3cd5342784bf87401b7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n@@ -88,13 +88,6 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract String getName(Any<?> any);\n \n-    protected void reportPropagation(final ProvisioningReport result, final PropagationReporter reporter) {\n-        if (!reporter.getStatuses().isEmpty()) {\n-            result.setStatus(toProvisioningReportStatus(reporter.getStatuses().get(0).getStatus()));\n-            result.setMessage(reporter.getStatuses().get(0).getFailureReason());\n-        }\n-    }\n-\n     protected void update(\n             final Any<?> any,\n             final Boolean enable,\n@@ -494,7 +487,14 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n         }\n     }\n \n-    protected ResourceOperation toResourceOperation(final UnmatchingRule rule) {\n+    protected static void reportPropagation(final ProvisioningReport result, final PropagationReporter reporter) {\n+        if (!reporter.getStatuses().isEmpty()) {\n+            result.setStatus(toProvisioningReportStatus(reporter.getStatuses().get(0).getStatus()));\n+            result.setMessage(reporter.getStatuses().get(0).getFailureReason());\n+        }\n+    }\n+\n+    protected static ResourceOperation toResourceOperation(final UnmatchingRule rule) {\n         switch (rule) {\n             case ASSIGN:\n             case PROVISION:\n@@ -504,7 +504,7 @@ protected ResourceOperation toResourceOperation(final UnmatchingRule rule) {\n         }\n     }\n \n-    protected ResourceOperation toResourceOperation(final MatchingRule rule) {\n+    protected static ResourceOperation toResourceOperation(final MatchingRule rule) {\n         switch (rule) {\n             case UPDATE:\n                 return ResourceOperation.UPDATE;\n@@ -516,7 +516,7 @@ protected ResourceOperation toResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    protected ProvisioningReport.Status toProvisioningReportStatus(final ExecStatus status) {\n+    protected static ProvisioningReport.Status toProvisioningReportStatus(final ExecStatus status) {\n         switch (status) {\n             case FAILURE:\n                 return ProvisioningReport.Status.FAILURE;"},{"sha":"9afbbb25f6bf443ba9a648fe5d7d9a71a4c7759b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;"},{"sha":"14943a03993d947cdb57928af51e3b528399a9fa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultAnyObjectPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPullResultHandler;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"63ba2c0232e15a6fcb1ebbea4a811415fb12c569","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultGroupPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPullResultHandler;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"cd60747eed7284b844104473ebf5df77e8556a91","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -44,7 +44,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.api.pushpull.RealmPullResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullExecutor;"},{"sha":"4d3bf03c0b7d16902462a5da66c4f4fd9f984614","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -45,7 +45,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.RealmPushResultHandler;\n import org.apache.syncope.core.provisioning.java.job.AfterHandlingJob;"},{"sha":"facde19b8631c647cd62099b0095caceb8acb390","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -58,7 +57,7 @@\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n@@ -368,7 +367,7 @@ protected Optional<ProvisioningReport> provision(\n                         req,\n                         report,\n                         null,\n-                        Collections.singleton(profile.getTask().getResource().getKey()),\n+                        Set.of(profile.getTask().getResource().getKey()),\n                         true);\n                 resultStatus = Result.SUCCESS;\n \n@@ -493,7 +492,7 @@ protected Optional<ProvisioningReport> update(\n                         patch,\n                         report,\n                         null,\n-                        Collections.singleton(profile.getTask().getResource().getKey()),\n+                        Set.of(profile.getTask().getResource().getKey()),\n                         true);\n                 resultStatus = Result.SUCCESS;\n \n@@ -587,7 +586,7 @@ protected Optional<ProvisioningReport> delete(\n                             req,\n                             report,\n                             null,\n-                            Collections.singleton(profile.getTask().getResource().getKey()),\n+                            Set.of(profile.getTask().getResource().getKey()),\n                             true);\n                     resultStatus = Result.SUCCESS;\n "},{"sha":"8f04fef1e416dd3e9b87c83deecabc8b4c55c9e6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -45,7 +45,7 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;"},{"sha":"3646a766ff6d0b1b5593ee2485c756d656c070c9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -20,7 +20,6 @@\n \n import java.text.ParseException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n@@ -58,7 +57,7 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -212,13 +211,13 @@ public List<PullMatch> matchByConnObjectKeyValue(\n             List<Object> output = transformer.beforePull(\n                     connObjectKeyItem,\n                     null,\n-                    Collections.<Object>singletonList(finalConnObjectKeyValue));\n+                    List.of(finalConnObjectKeyValue));\n             if (!CollectionUtils.isEmpty(output)) {\n                 finalConnObjectKeyValue = output.get(0).toString();\n             }\n         }\n \n-        List<PullMatch> noMatchResult = Collections.singletonList(PullCorrelationRule.NO_MATCH);\n+        List<PullMatch> noMatchResult = List.of(PullCorrelationRule.NO_MATCH);\n \n         IntAttrName intAttrName;\n         try {\n@@ -356,7 +355,7 @@ public List<PullMatch> match(final SyncDelta syncDelta, final Provision provisio\n             }\n         }\n \n-        List<PullMatch> result = Collections.emptyList();\n+        List<PullMatch> result = List.of();\n         try {\n             if (rule.isPresent()) {\n                 result = matchByCorrelationRule(syncDelta, provision, rule.get(), provision.getAnyType().getKind());\n@@ -376,7 +375,7 @@ public List<PullMatch> match(final SyncDelta syncDelta, final Provision provisio\n                     }\n                 }\n                 if (connObjectKeyValue == null) {\n-                    result = Collections.singletonList(PullCorrelationRule.NO_MATCH);\n+                    result = List.of(PullCorrelationRule.NO_MATCH);\n                 } else {\n                     result = matchByConnObjectKeyValue(connObjectKeyItem.get(), connObjectKeyValue, provision);\n                 }\n@@ -412,14 +411,14 @@ public List<Realm> match(final SyncDelta syncDelta, final OrgUnit orgUnit) {\n             }\n         }\n         if (connObjectKey == null) {\n-            return Collections.emptyList();\n+            return List.of();\n         }\n \n         for (ItemTransformer transformer : MappingUtils.getItemTransformers(connObjectKeyItem.get())) {\n             List<Object> output = transformer.beforePull(\n                     connObjectKeyItem.get(),\n                     null,\n-                    Collections.<Object>singletonList(connObjectKey));\n+                    List.of(connObjectKey));\n             if (!CollectionUtils.isEmpty(output)) {\n                 connObjectKey = output.get(0).toString();\n             }\n@@ -459,4 +458,3 @@ public List<Realm> match(final SyncDelta syncDelta, final OrgUnit orgUnit) {\n         return result;\n     }\n }\n-"},{"sha":"22550fc069b7f58818dc6d81279d0c98eefef0c9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.PullMatch;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;"},{"sha":"cb4703c16ddeb97095bf0390f413f8f67d8c9971","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -35,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;"},{"sha":"41637c610289e32f1a6315597698d345c7a08b6d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -182,7 +182,7 @@ public List<ConnectorObject> match(\n             LOG.error(\"Could not match {} with any existing {}\", any, provision.getObjectClass(), e);\n         }\n \n-        if (result.size() == 1) {\n+        if (any != null && result.size() == 1) {\n             virAttrHandler.setValues(any, result.get(0));\n         }\n "},{"sha":"726323c5b82f29a3d3339af29ae760e636f6a2b2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -128,22 +128,22 @@ protected void doHandle(\n         }\n     }\n \n-    protected static RealmPushResultHandler buildRealmHandler() {\n+    protected RealmPushResultHandler buildRealmHandler() {\n         return (RealmPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultRealmPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n \n-    protected static AnyObjectPushResultHandler buildAnyObjectHandler() {\n+    protected AnyObjectPushResultHandler buildAnyObjectHandler() {\n         return (AnyObjectPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultAnyObjectPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n \n-    protected static UserPushResultHandler buildUserHandler() {\n+    protected UserPushResultHandler buildUserHandler() {\n         return (UserPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultUserPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }\n \n-    protected static GroupPushResultHandler buildGroupHandler() {\n+    protected GroupPushResultHandler buildGroupHandler() {\n         return (GroupPushResultHandler) ApplicationContextProvider.getBeanFactory().\n                 createBean(DefaultGroupPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n     }"},{"sha":"a31d08e21146d57255b106ac083b19c12dc18298","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -23,6 +23,7 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Stream;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n@@ -42,14 +43,13 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPullResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePullExecutor;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n-import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n@@ -160,7 +160,7 @@ public List<ProvisioningReport> pull(\n \n             connector.filteredReconciliation(\n                     provision.getObjectClass(),\n-                    new AccountReconciliationFilterBuilder(connObjectKey, connObjectValue),\n+                    new SingleReconciliationFilterBuilder(connObjectKey, connObjectValue),\n                     handler,\n                     MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0])));\n \n@@ -182,13 +182,13 @@ public List<ProvisioningReport> pull(\n         }\n     }\n \n-    static class AccountReconciliationFilterBuilder implements ReconFilterBuilder {\n+    static class SingleReconciliationFilterBuilder implements ReconFilterBuilder {\n \n         private final String key;\n \n         private final String value;\n \n-        AccountReconciliationFilterBuilder(final String key, final String value) {\n+        SingleReconciliationFilterBuilder(final String key, final String value) {\n             this.key = key;\n             this.value = value;\n         }"},{"sha":"f0c4258e57621820f5f5aa3abd0a9d3fd7973562","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePushExecutor;"},{"sha":"17576cb987591e04df92925e1895a0a0f6a25ab0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamAnyObjectPushResultHandler.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull.stream;\n+\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n+import org.apache.syncope.core.provisioning.java.pushpull.DefaultAnyObjectPushResultHandler;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class StreamAnyObjectPushResultHandler extends DefaultAnyObjectPushResultHandler {\n+\n+    @Autowired\n+    private DerAttrHandler derAttrHandler;\n+\n+    private String executor;\n+\n+    public void setExecutor(final String executor) {\n+        this.executor = executor;\n+    }\n+\n+    @Override\n+    protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n+        Provision provision = profile.getTask().getResource().getProvisions().get(0);\n+\n+        Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n+\n+        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(any, null, false, enabled, provision);\n+\n+        PropagationTaskInfo propagationTask = propagationManager.newTask(\n+                derAttrHandler,\n+                any,\n+                profile.getTask().getResource(),\n+                ResourceOperation.CREATE,\n+                provision,\n+                false,\n+                items,\n+                preparedAttrs);\n+        propagationTask.setConnector(profile.getConnector());\n+        LOG.debug(\"PropagationTask created: {}\", propagationTask);\n+\n+        PropagationReporter reporter = new DefaultPropagationReporter();\n+        taskExecutor.execute(propagationTask, reporter, executor);\n+        reportPropagation(result, reporter);\n+    }\n+}"},{"sha":"32e6710541a517f0495a4b6ee72cf69460772ed2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamGroupPushResultHandler.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull.stream;\n+\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n+import org.apache.syncope.core.provisioning.java.pushpull.DefaultGroupPushResultHandler;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class StreamGroupPushResultHandler extends DefaultGroupPushResultHandler {\n+\n+    @Autowired\n+    private DerAttrHandler derAttrHandler;\n+\n+    private String executor;\n+\n+    public void setExecutor(final String executor) {\n+        this.executor = executor;\n+    }\n+\n+    @Override\n+    protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n+        Provision provision = profile.getTask().getResource().getProvisions().get(0);\n+\n+        Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n+\n+        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(any, null, false, enabled, provision);\n+\n+        PropagationTaskInfo propagationTask = propagationManager.newTask(\n+                derAttrHandler,\n+                any,\n+                profile.getTask().getResource(),\n+                ResourceOperation.CREATE,\n+                provision,\n+                false,\n+                items,\n+                preparedAttrs);\n+        propagationTask.setConnector(profile.getConnector());\n+        LOG.debug(\"PropagationTask created: {}\", propagationTask);\n+\n+        PropagationReporter reporter = new DefaultPropagationReporter();\n+        taskExecutor.execute(propagationTask, reporter, executor);\n+        reportPropagation(result, reporter);\n+    }\n+}"},{"sha":"ff6553e78965a8980cccd3883cdfe8768cbcc6c8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegate.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull.stream;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PullMode;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.policy.PullPolicy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.provisioning.api.pushpull.GroupPullResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPullExecutor;\n+import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+\n+@Component\n+public class StreamPullJobDelegate extends PullJobDelegate implements SyncopeStreamPullExecutor {\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    private PullPolicy pullPolicy(\n+            final AnyType anyType,\n+            final ConflictResolutionAction conflictResolutionAction,\n+            final String pullCorrelationRule) {\n+\n+        PullCorrelationRuleEntity pullCorrelationRuleEntity = null;\n+        if (pullCorrelationRule != null) {\n+            Implementation impl = implementationDAO.find(pullCorrelationRule);\n+            if (impl == null || !IdMImplementationType.PULL_ACTIONS.equals(impl.getType())) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", pullCorrelationRule);\n+            } else {\n+                pullCorrelationRuleEntity = entityFactory.newEntity(PullCorrelationRuleEntity.class);\n+                pullCorrelationRuleEntity.setAnyType(anyType);\n+                pullCorrelationRuleEntity.setImplementation(impl);\n+            }\n+        }\n+\n+        PullPolicy pullPolicy = entityFactory.newEntity(PullPolicy.class);\n+        pullPolicy.setConflictResolutionAction(conflictResolutionAction);\n+\n+        if (pullCorrelationRuleEntity != null) {\n+            pullPolicy.add(pullCorrelationRuleEntity);\n+            pullCorrelationRuleEntity.setPullPolicy(pullPolicy);\n+        }\n+\n+        return pullPolicy;\n+    }\n+\n+    private Provision provision(\n+            final AnyType anyType,\n+            final String keyColumn,\n+            final List<String> columns) throws JobExecutionException {\n+\n+        Provision provision = entityFactory.newEntity(Provision.class);\n+        provision.setAnyType(anyType);\n+        provision.setObjectClass(new ObjectClass(anyType.getKey()));\n+\n+        Mapping mapping = entityFactory.newEntity(Mapping.class);\n+        provision.setMapping(mapping);\n+        mapping.setProvision(provision);\n+\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(anyType.getKind());\n+        if (anyUtils.getField(keyColumn) == null) {\n+            PlainSchema keyColumnSchema = plainSchemaDAO.find(keyColumn);\n+            if (keyColumnSchema == null) {\n+                throw new JobExecutionException(\"Plain Schema for key column not found: \" + keyColumn);\n+            }\n+        }\n+\n+        MappingItem connObjectKeyItem = entityFactory.newEntity(MappingItem.class);\n+        connObjectKeyItem.setExtAttrName(keyColumn);\n+        connObjectKeyItem.setIntAttrName(keyColumn);\n+        connObjectKeyItem.setPurpose(MappingPurpose.PULL);\n+        mapping.setConnObjectKeyItem(connObjectKeyItem);\n+\n+        columns.stream().\n+                filter(column -> anyUtils.getField(column) != null\n+                || plainSchemaDAO.find(column) != null || virSchemaDAO.find(column) != null).\n+                map(column -> {\n+                    MappingItem item = entityFactory.newEntity(MappingItem.class);\n+                    item.setExtAttrName(column);\n+                    item.setIntAttrName(column);\n+                    item.setPurpose(MappingPurpose.PULL);\n+                    mapping.add(item);\n+                    return item;\n+                }).forEach(mapping::add);\n+\n+        return provision;\n+    }\n+\n+    private ExternalResource externalResource(\n+            final AnyType anyType,\n+            final String keyColumn,\n+            final List<String> columns,\n+            final ConflictResolutionAction conflictResolutionAction,\n+            final String pullCorrelationRule) throws JobExecutionException {\n+\n+        Provision provision = provision(anyType, keyColumn, columns);\n+\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n+        resource.setKey(\"StreamPull_\" + SecureRandomUtils.generateRandomUUID().toString());\n+        resource.add(provision);\n+        provision.setResource(resource);\n+\n+        resource.setPullPolicy(pullPolicy(anyType, conflictResolutionAction, pullCorrelationRule));\n+\n+        return resource;\n+    }\n+\n+    @Override\n+    public List<ProvisioningReport> pull(\n+            final AnyType anyType,\n+            final String keyColumn,\n+            final List<String> columns,\n+            final ConflictResolutionAction conflictResolutionAction,\n+            final String pullCorrelationRule,\n+            final StreamConnector connector,\n+            final PullTaskTO pullTaskTO) throws JobExecutionException {\n+\n+        LOG.debug(\"Executing stream pull\");\n+\n+        List<PullActions> actions = new ArrayList<>();\n+        pullTaskTO.getActions().forEach(key -> {\n+            Implementation impl = implementationDAO.find(key);\n+            if (impl == null || !IdMImplementationType.PULL_ACTIONS.equals(impl.getType())) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n+            } else {\n+                try {\n+                    actions.add(ImplementationManager.build(impl));\n+                } catch (Exception e) {\n+                    LOG.warn(\"While building {}\", impl, e);\n+                }\n+            }\n+        });\n+\n+        try {\n+            ExternalResource resource =\n+                    externalResource(anyType, keyColumn, columns, conflictResolutionAction, pullCorrelationRule);\n+            Provision provision = resource.getProvisions().get(0);\n+\n+            PullTask pullTask = entityFactory.newEntity(PullTask.class);\n+            pullTask.setResource(resource);\n+            pullTask.setMatchingRule(pullTaskTO.getMatchingRule());\n+            pullTask.setUnmatchingRule(pullTaskTO.getUnmatchingRule());\n+            pullTask.setPullMode(PullMode.FULL_RECONCILIATION);\n+            pullTask.setPerformCreate(true);\n+            pullTask.setPerformUpdate(true);\n+            pullTask.setPerformDelete(false);\n+            pullTask.setSyncStatus(false);\n+            pullTask.setDestinationRealm(realmDAO.findByFullPath(pullTaskTO.getDestinationRealm()));\n+            pullTask.setRemediation(pullTaskTO.isRemediation());\n+\n+            profile = new ProvisioningProfile<>(connector, pullTask);\n+            profile.setDryRun(false);\n+            profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n+            profile.getActions().addAll(actions);\n+\n+            for (PullActions action : actions) {\n+                action.beforeAll(profile);\n+            }\n+\n+            SyncopePullResultHandler handler;\n+            GroupPullResultHandler ghandler = buildGroupHandler();\n+            switch (anyType.getKind()) {\n+                case USER:\n+                    handler = buildUserHandler();\n+                    break;\n+\n+                case GROUP:\n+                    handler = ghandler;\n+                    break;\n+\n+                case ANY_OBJECT:\n+                default:\n+                    handler = buildAnyObjectHandler();\n+            }\n+            handler.setProfile(profile);\n+            handler.setPullExecutor(this);\n+\n+            // execute filtered pull\n+            Set<String> moreAttrsToGet = new HashSet<>();\n+            actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n+\n+            Stream<? extends Item> mapItems = Stream.concat(\n+                    MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n+                    virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n+\n+            connector.fullReconciliation(\n+                    provision.getObjectClass(),\n+                    handler,\n+                    MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0])));\n+\n+            try {\n+                setGroupOwners(ghandler);\n+            } catch (Exception e) {\n+                LOG.error(\"While setting group owners\", e);\n+            }\n+\n+            for (PullActions action : actions) {\n+                action.afterAll(profile);\n+            }\n+\n+            return profile.getResults();\n+        } catch (Exception e) {\n+            throw e instanceof JobExecutionException\n+                    ? (JobExecutionException) e\n+                    : new JobExecutionException(\"While stream pulling\", e);\n+        }\n+    }\n+}"},{"sha":"1b775d43313e024fb1027bff24c84cb72a17e353","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegate.java","status":"added","additions":200,"deletions":0,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull.stream;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.common.lib.types.IdMImplementationType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPushResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.GroupPushResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n+import org.apache.syncope.core.provisioning.api.pushpull.SyncopePushResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPushExecutor;\n+import org.apache.syncope.core.provisioning.api.pushpull.UserPushResultHandler;\n+import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.ImplementationManager;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StreamPushJobDelegate extends PushJobDelegate implements SyncopeStreamPushExecutor {\n+\n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n+    private String executor;\n+\n+    @Override\n+    protected AnyObjectPushResultHandler buildAnyObjectHandler() {\n+        StreamAnyObjectPushResultHandler handler =\n+                (StreamAnyObjectPushResultHandler) ApplicationContextProvider.getBeanFactory().createBean(\n+                        StreamAnyObjectPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+        handler.setExecutor(executor);\n+        return handler;\n+    }\n+\n+    @Override\n+    protected UserPushResultHandler buildUserHandler() {\n+        StreamUserPushResultHandler handler =\n+                (StreamUserPushResultHandler) ApplicationContextProvider.getBeanFactory().\n+                        createBean(StreamUserPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+        handler.setExecutor(executor);\n+        return handler;\n+    }\n+\n+    @Override\n+    protected GroupPushResultHandler buildGroupHandler() {\n+        StreamGroupPushResultHandler handler = (StreamGroupPushResultHandler) ApplicationContextProvider.\n+                getBeanFactory().\n+                createBean(StreamGroupPushResultHandler.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+        handler.setExecutor(executor);\n+        return handler;\n+    }\n+\n+    private ExternalResource externalResource(\n+            final AnyType anyType, final List<String> columns) throws JobExecutionException {\n+\n+        Provision provision = entityFactory.newEntity(Provision.class);\n+        provision.setAnyType(anyType);\n+        provision.setObjectClass(new ObjectClass(anyType.getKey()));\n+\n+        Mapping mapping = entityFactory.newEntity(Mapping.class);\n+        provision.setMapping(mapping);\n+        mapping.setProvision(provision);\n+\n+        MappingItem connObjectKeyItem = entityFactory.newEntity(MappingItem.class);\n+        connObjectKeyItem.setExtAttrName(\"key\");\n+        connObjectKeyItem.setIntAttrName(\"key\");\n+        connObjectKeyItem.setPurpose(MappingPurpose.NONE);\n+        mapping.setConnObjectKeyItem(connObjectKeyItem);\n+\n+        columns.stream().map(column -> {\n+            MappingItem item = entityFactory.newEntity(MappingItem.class);\n+            item.setExtAttrName(column);\n+            item.setIntAttrName(column);\n+            item.setPurpose(MappingPurpose.PROPAGATION);\n+            mapping.add(item);\n+            return item;\n+        }).forEach(mapping::add);\n+\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n+        resource.setKey(\"StreamPush_\" + SecureRandomUtils.generateRandomUUID().toString());\n+        resource.add(provision);\n+        provision.setResource(resource);\n+\n+        return resource;\n+    }\n+\n+    @Override\n+    public List<ProvisioningReport> push(\n+            final AnyType anyType,\n+            final List<? extends Any<?>> anys,\n+            final List<String> columns,\n+            final StreamConnector connector,\n+            final PushTaskTO pushTaskTO,\n+            final String executor) throws JobExecutionException {\n+\n+        LOG.debug(\"Executing stream push as {}\", executor);\n+        this.executor = executor;\n+\n+        List<PushActions> actions = new ArrayList<>();\n+        pushTaskTO.getActions().forEach(key -> {\n+            Implementation impl = implementationDAO.find(key);\n+            if (impl == null || !IdMImplementationType.PUSH_ACTIONS.equals(impl.getType())) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n+            } else {\n+                try {\n+                    actions.add(ImplementationManager.build(impl));\n+                } catch (Exception e) {\n+                    LOG.warn(\"While building {}\", impl, e);\n+                }\n+            }\n+        });\n+\n+        try {\n+            ExternalResource resource = externalResource(anyType, columns);\n+            Provision provision = resource.getProvisions().get(0);\n+\n+            PushTask pushTask = entityFactory.newEntity(PushTask.class);\n+            pushTask.setResource(resource);\n+            pushTask.setMatchingRule(pushTaskTO.getMatchingRule());\n+            pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule());\n+            pushTask.setPerformCreate(true);\n+            pushTask.setPerformUpdate(true);\n+            pushTask.setPerformDelete(true);\n+            pushTask.setSyncStatus(false);\n+\n+            profile = new ProvisioningProfile<>(connector, pushTask);\n+            profile.getActions().addAll(actions);\n+            profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n+\n+            for (PushActions action : actions) {\n+                action.beforeAll(profile);\n+            }\n+\n+            SyncopePushResultHandler handler;\n+            switch (provision.getAnyType().getKind()) {\n+                case USER:\n+                    handler = buildUserHandler();\n+                    break;\n+\n+                case GROUP:\n+                    handler = buildGroupHandler();\n+                    break;\n+\n+                case ANY_OBJECT:\n+                default:\n+                    handler = buildAnyObjectHandler();\n+            }\n+            handler.setProfile(profile);\n+\n+            doHandle(anys, handler, provision.getResource());\n+\n+            for (PushActions action : actions) {\n+                action.afterAll(profile);\n+            }\n+\n+            return profile.getResults();\n+        } catch (Exception e) {\n+            throw e instanceof JobExecutionException\n+                    ? (JobExecutionException) e\n+                    : new JobExecutionException(\"While stream pushing\", e);\n+        }\n+    }\n+}"},{"sha":"9b788a009739b53d220f071ad6cfccc36ccb3c32","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamUserPushResultHandler.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull.stream;\n+\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n+import org.apache.syncope.core.provisioning.java.propagation.DefaultPropagationReporter;\n+import org.apache.syncope.core.provisioning.java.pushpull.DefaultUserPushResultHandler;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class StreamUserPushResultHandler extends DefaultUserPushResultHandler {\n+\n+    @Autowired\n+    private DerAttrHandler derAttrHandler;\n+\n+    private String executor;\n+\n+    public void setExecutor(final String executor) {\n+        this.executor = executor;\n+    }\n+\n+    @Override\n+    protected void provision(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n+        Provision provision = profile.getTask().getResource().getProvisions().get(0);\n+\n+        Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n+\n+        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(any, null, false, enabled, provision);\n+\n+        PropagationTaskInfo propagationTask = propagationManager.newTask(\n+                derAttrHandler,\n+                any,\n+                profile.getTask().getResource(),\n+                ResourceOperation.CREATE,\n+                provision,\n+                false,\n+                items,\n+                preparedAttrs);\n+        propagationTask.setConnector(profile.getConnector());\n+        LOG.debug(\"PropagationTask created: {}\", propagationTask);\n+\n+        PropagationReporter reporter = new DefaultPropagationReporter();\n+        taskExecutor.execute(propagationTask, reporter, executor);\n+        reportPropagation(result, reporter);\n+    }\n+}"},{"sha":"1f5258506bae07f56e970c17194728714cb8e446","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -25,20 +25,14 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Stream;\n-import org.apache.commons.jexl3.JexlContext;\n-import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.java.data.JEXLItemTransformerImpl;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n@@ -77,85 +71,6 @@ public static Stream<? extends Item> getPullItems(final Stream<? extends Item> i\n                 item -> item.getPurpose() == MappingPurpose.PULL || item.getPurpose() == MappingPurpose.BOTH);\n     }\n \n-    private static Name getName(final String evalConnObjectLink, final String connObjectKey) {\n-        // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),\n-        // otherwise evaluated connObjectLink expression is taken as Name().\n-        Name name;\n-        if (StringUtils.isBlank(evalConnObjectLink)) {\n-            // add connObjectKey as __NAME__ attribute ...\n-            LOG.debug(\"Add connObjectKey [{}] as {}\", connObjectKey, Name.NAME);\n-            name = new Name(connObjectKey);\n-        } else {\n-            LOG.debug(\"Add connObjectLink [{}] as {}\", evalConnObjectLink, Name.NAME);\n-            name = new Name(evalConnObjectLink);\n-\n-            // connObjectKey not propagated: it will be used to set the value for __UID__ attribute\n-            LOG.debug(\"connObjectKey will be used just as {} attribute\", Uid.NAME);\n-        }\n-\n-        return name;\n-    }\n-\n-    /**\n-     * Build __NAME__ for propagation.\n-     * First look if there is a defined connObjectLink for the given resource (and in\n-     * this case evaluate as JEXL); otherwise, take given connObjectKey.\n-     *\n-     * @param any given any object\n-     * @param provision external resource\n-     * @param connObjectKey connector object key\n-     * @return the value to be propagated as __NAME__\n-     */\n-    public static Name evaluateNAME(final Any<?> any, final Provision provision, final String connObjectKey) {\n-        if (StringUtils.isBlank(connObjectKey)) {\n-            // LOG error but avoid to throw exception: leave it to the external resource\n-            LOG.warn(\"Missing ConnObjectKey value for {}: \", provision.getResource());\n-        }\n-\n-        // Evaluate connObjectKey expression\n-        String connObjectLink = provision == null || provision.getMapping() == null\n-                ? null\n-                : provision.getMapping().getConnObjectLink();\n-        String evalConnObjectLink = null;\n-        if (StringUtils.isNotBlank(connObjectLink)) {\n-            JexlContext jexlContext = new MapContext();\n-            JexlUtils.addFieldsToContext(any, jexlContext);\n-            JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n-            JexlUtils.addDerAttrsToContext(any, jexlContext);\n-            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n-        }\n-\n-        return getName(evalConnObjectLink, connObjectKey);\n-    }\n-\n-    /**\n-     * Build __NAME__ for propagation.\n-     * First look if there is a defined connObjectLink for the given resource (and in\n-     * this case evaluate as JEXL); otherwise, take given connObjectKey.\n-     *\n-     * @param realm given any object\n-     * @param orgUnit external resource\n-     * @param connObjectKey connector object key\n-     * @return the value to be propagated as __NAME__\n-     */\n-    public static Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final String connObjectKey) {\n-        if (StringUtils.isBlank(connObjectKey)) {\n-            // LOG error but avoid to throw exception: leave it to the external resource\n-            LOG.warn(\"Missing ConnObjectKey value for {}: \", orgUnit.getResource());\n-        }\n-\n-        // Evaluate connObjectKey expression\n-        String connObjectLink = Optional.ofNullable(orgUnit).map(OrgUnit::getConnObjectLink).orElse(null);\n-        String evalConnObjectLink = null;\n-        if (StringUtils.isNotBlank(connObjectLink)) {\n-            JexlContext jexlContext = new MapContext();\n-            JexlUtils.addFieldsToContext(realm, jexlContext);\n-            evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n-        }\n-\n-        return getName(evalConnObjectLink, connObjectKey);\n-    }\n-\n     public static List<ItemTransformer> getItemTransformers(final Item item) {\n         List<ItemTransformer> result = new ArrayList<>();\n "},{"sha":"79a0491c57f560d445a5a230bc9c5f1d03a5b106","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -34,12 +34,12 @@\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;"},{"sha":"3d9f9ba21548655a1b48f8a4e9ac9d86a175a3ea","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/AbstractTest.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FAbstractTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -19,8 +19,13 @@\n package org.apache.syncope.core.provisioning.java;\n \n import javax.persistence.EntityManager;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.junit.jupiter.api.BeforeAll;\n import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n@@ -37,4 +42,11 @@ protected EntityManager entityManager() {\n \n         return entityManager;\n     }\n+\n+    @BeforeAll\n+    public static void init() {\n+        EntitlementsHolder.getInstance().addAll(IdRepoEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(IdMEntitlement.values());\n+        EntitlementsHolder.getInstance().addAll(AMEntitlement.values());\n+    }\n }"},{"sha":"bf71aa84b8e8da5059abce9245b6c3b6fe0846bf","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderTest.java","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java;\n+package org.apache.syncope.core.provisioning.java.data;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -40,6 +40,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.identityconnectors.framework.common.objects.ObjectClass;","previous_filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ResourceDataBinderTest.java"},{"sha":"60fb71837e71e60ab6674cf8938d37b5a9a48efc","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/jexl/MailTemplateTest.java","status":"renamed","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FMailTemplateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FMailTemplateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FMailTemplateTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,7 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java;\n+package org.apache.syncope.core.provisioning.java.jexl;\n+\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n \n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -34,8 +36,8 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;","previous_filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MailTemplateTest.java"},{"sha":"862a866214e00612ff8377fd209024873fd6bfcf","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/jexl/MappingTest.java","status":"renamed","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FMappingTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FMappingTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FMappingTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -16,7 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.provisioning.java;\n+package org.apache.syncope.core.provisioning.java.jexl;\n+\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -31,9 +33,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n-import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n-import org.identityconnectors.framework.common.objects.Name;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -66,14 +66,16 @@ public void anyConnObjectLink() {\n         User user = userDAO.findByUsername(\"rossini\");\n         assertNotNull(user);\n \n-        Name name = MappingUtils.evaluateNAME(user, provision, user.getUsername());\n-        assertEquals(\"uid=rossini,ou=people,o=isp\", name.getNameValue());\n+        JexlContext jexlContext = new MapContext();\n+        JexlUtils.addFieldsToContext(user, jexlContext);\n+        JexlUtils.addPlainAttrsToContext(user.getPlainAttrs(), jexlContext);\n \n-        provision.getMapping().setConnObjectLink(\n-                \"'uid=' + username + realm.replaceAll('/', ',o=') + ',ou=people,o=isp'\");\n+        assertEquals(\n+                \"uid=rossini,ou=people,o=isp\",\n+                JexlUtils.evaluate(provision.getMapping().getConnObjectLink(), jexlContext));\n \n-        name = MappingUtils.evaluateNAME(user, provision, user.getUsername());\n-        assertEquals(\"uid=rossini,o=even,ou=people,o=isp\", name.getNameValue());\n+        String connObjectLink = \"'uid=' + username + realm.replaceAll('/', ',o=') + ',ou=people,o=isp'\";\n+        assertEquals(\"uid=rossini,o=even,ou=people,o=isp\", JexlUtils.evaluate(connObjectLink, jexlContext));\n     }\n \n     @Test","previous_filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingTest.java"},{"sha":"dfa523c5fc32afa4fe313270f44968ae1b16c30f","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegateTest.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegateTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull.stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.fasterxml.jackson.databind.MappingIterator;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPullExecutor;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.junit.jupiter.api.Test;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class StreamPullJobDelegateTest extends AbstractTest {\n+\n+    @Autowired\n+    private SyncopeStreamPullExecutor streamPullExecutor;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void pull() throws JobExecutionException, IOException {\n+        PullTaskTO pullTask = new PullTaskTO();\n+        pullTask.setDestinationRealm(SyncopeConstants.ROOT_REALM);\n+        pullTask.setRemediation(false);\n+        pullTask.setMatchingRule(MatchingRule.UPDATE);\n+        pullTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n+\n+        Map<String, String> user = new HashMap<>();\n+        user.put(\"username\", \"donizetti\");\n+        user.put(\"email\", \"donizetti@apache.org\");\n+        user.put(\"surname\", \"Donizetti\");\n+        user.put(\"firstname\", \"Gaetano\");\n+        user.put(\"fullname\", \"Gaetano Donizetti\");\n+        user.put(\"userId\", \"donizetti@apache.org\");\n+        Iterator<Map<String, String>> backing = List.of(user).iterator();\n+\n+        @SuppressWarnings(\"unchecked\")\n+        MappingIterator<Map<String, String>> itor = mock(MappingIterator.class);\n+        when(itor.hasNext()).thenAnswer(invocation -> backing.hasNext());\n+        when(itor.next()).thenAnswer(invocation -> backing.next());\n+\n+        List<String> columns = user.keySet().stream().collect(Collectors.toList());\n+\n+        List<ProvisioningReport> results = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n+            try {\n+                return streamPullExecutor.pull(\n+                        anyTypeDAO.findUser(),\n+                        \"username\",\n+                        columns,\n+                        ConflictResolutionAction.IGNORE,\n+                        null,\n+                        new StreamConnector(\"username\", null, itor, null),\n+                        pullTask);\n+            } catch (JobExecutionException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+        assertEquals(1, results.size());\n+\n+        assertEquals(AnyTypeKind.USER.name(), results.get(0).getAnyType());\n+        assertNotNull(results.get(0).getKey());\n+        assertEquals(\"donizetti\", results.get(0).getName());\n+        assertEquals(\"donizetti\", results.get(0).getUidValue());\n+        assertEquals(ResourceOperation.CREATE, results.get(0).getOperation());\n+        assertEquals(ProvisioningReport.Status.SUCCESS, results.get(0).getStatus());\n+\n+        User donizetti = userDAO.find(results.get(0).getKey());\n+        assertNotNull(donizetti);\n+        assertEquals(\"donizetti\", donizetti.getUsername());\n+        assertEquals(\"Gaetano\", donizetti.getPlainAttr(\"firstname\").get().getValuesAsStrings().get(0));\n+    }\n+}"},{"sha":"2fcab3c8d96f87782739714d6e8c4e4163e2d52d","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegateTest.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegateTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegateTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegateTest.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull.stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.fasterxml.jackson.databind.MappingIterator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import java.io.IOException;\n+import java.io.PipedInputStream;\n+import java.io.PipedOutputStream;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.StreamConnector;\n+import org.apache.syncope.core.provisioning.api.pushpull.stream.SyncopeStreamPushExecutor;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class StreamPushJobDelegateTest extends AbstractTest {\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    @Autowired\n+    private SyncopeStreamPushExecutor streamPushExecutor;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void push() throws IOException {\n+        PipedInputStream in = new PipedInputStream();\n+        PipedOutputStream os = new PipedOutputStream(in);\n+\n+        PushTaskTO pushTask = new PushTaskTO();\n+        pushTask.setMatchingRule(MatchingRule.UPDATE);\n+        pushTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n+\n+        List<ProvisioningReport> results = AuthContextUtils.callAsAdmin(SyncopeConstants.MASTER_DOMAIN, () -> {\n+            try (SequenceWriter writer = MAPPER.writer().forType(Map.class).writeValues(os)) {\n+                writer.init(true);\n+\n+                return streamPushExecutor.push(\n+                        anyTypeDAO.findUser(),\n+                        userDAO.findAll(1, 100),\n+                        Arrays.asList(\"username\", \"firstname\", \"surname\", \"email\", \"status\", \"loginDate\"),\n+                        new StreamConnector(null, null, null, writer),\n+                        pushTask,\n+                        \"user\");\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+        assertEquals(userDAO.count(), results.size());\n+\n+        MappingIterator<Map<String, String>> reader = MAPPER.readerFor(Map.class).readValues(in);\n+\n+        for (int i = 0; i < results.size() && reader.hasNext(); i++) {\n+            Map<String, String> row = reader.next();\n+\n+            assertEquals(results.get(i).getName(), row.get(\"username\"));\n+            assertEquals(userDAO.findByUsername(row.get(\"username\")).getStatus(), row.get(\"status\"));\n+\n+            switch (row.get(\"username\")) {\n+                case \"rossini\":\n+                    assertNull(row.get(\"email\"));\n+                    assertTrue(row.get(\"loginDate\").contains(\",\"));\n+                    break;\n+\n+                case \"verdi\":\n+                    assertEquals(\"verdi@syncope.org\", row.get(\"email\"));\n+                    assertNull(row.get(\"loginDate\"));\n+                    break;\n+\n+                case \"bellini\":\n+                    assertNull(row.get(\"email\"));\n+                    assertFalse(row.get(\"loginDate\").contains(\",\"));\n+                    break;\n+\n+                default:\n+                    break;\n+            }\n+        }\n+    }\n+}"},{"sha":"4b7f46e9e278ac66c813ad0d1d28a5fbdf0ab0e0","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -31,10 +31,10 @@\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Propagation;"},{"sha":"587dfa5f75b7cb65d53b05e2ce99ec718796d746","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -40,11 +40,11 @@\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.OIDCProviderActions;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;"},{"sha":"a206cf9e9fdac3a223a263b306e699a1c7f90f1d","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -41,8 +41,8 @@\n import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.OIDCProviderDataBinder;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"1e7c335a65034fa2decab85d958d32439646b193","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -42,11 +42,11 @@\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.api.SAML2IdPActions;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.ItemTransformer;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.pushpull.InboundMatcher;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;"},{"sha":"992a8ce20c39b391a6fd943bac360e3fc5a214f5","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -42,8 +42,8 @@\n import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n-import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n-import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.provisioning.api.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.api.jexl.JexlUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"a7b532e2a7bb2a3e9a612ad8c8132b8b4d56f28e","filename":"fit/core-reference/pom.xml","status":"modified","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -426,6 +426,12 @@ under the License.\n           <include>keystore</include>\n         </includes>\n       </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../core/idm/logic/src/test/resources</directory>\n+        <includes>\n+          <include>test1.csv</include>\n+        </includes>\n+      </testResource>\n       <testResource>\n         <directory>${basedir}/../../core/rest-cxf/src/main/resources</directory>\n         <includes>\n@@ -531,6 +537,17 @@ under the License.\n       \n       <build>\n         <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>io.fabric8</groupId>\n             <artifactId>docker-maven-plugin</artifactId>\n@@ -642,6 +659,17 @@ under the License.\n             </configuration>\n           </plugin>\n \n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>org.apache.maven.plugins</groupId>\n             <artifactId>maven-antrun-plugin</artifactId>\n@@ -768,6 +796,17 @@ under the License.\n         <defaultGoal>clean verify</defaultGoal>\n \n         <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>io.fabric8</groupId>\n             <artifactId>docker-maven-plugin</artifactId>\n@@ -880,6 +919,17 @@ under the License.\n             </configuration>\n           </plugin>\n \n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>org.apache.maven.plugins</groupId>\n             <artifactId>maven-antrun-plugin</artifactId>\n@@ -1024,6 +1074,17 @@ under the License.\n         <defaultGoal>clean verify</defaultGoal>\n \n         <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>io.fabric8</groupId>\n             <artifactId>docker-maven-plugin</artifactId>\n@@ -1113,6 +1174,17 @@ under the License.\n         <defaultGoal>clean verify</defaultGoal>\n \n         <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>io.fabric8</groupId>\n             <artifactId>docker-maven-plugin</artifactId>\n@@ -1202,6 +1274,17 @@ under the License.\n         <defaultGoal>clean verify</defaultGoal>\n \n         <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>io.fabric8</groupId>\n             <artifactId>docker-maven-plugin</artifactId>\n@@ -1298,6 +1381,17 @@ under the License.\n         <defaultGoal>clean verify</defaultGoal>\n \n         <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-failsafe-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <configuration>\n+              <includes>\n+                <include>**/org/apache/syncope/fit/core/*ITCase.java</include>\n+              </includes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>io.fabric8</groupId>\n             <artifactId>docker-maven-plugin</artifactId>"},{"sha":"3a3e537c0fec78bf69033286ac19a6cec53618b2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -69,6 +69,7 @@\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -1036,15 +1037,21 @@ public void issueSYNCOPE307() {\n         // exec task: one user from CSV will match the user created above and template will be applied\n         execProvisioningTask(taskService, TaskType.PULL, task.getKey(), MAX_WAIT_SECONDS, false);\n \n-        // check that template was successfully applied...\n-        userTO = userService.read(userTO.getKey());\n-        assertEquals(\"virtualvalue\", userTO.getVirAttr(\"virtualdata\").get().getValues().get(0));\n+        // check that template was successfully applied\n+        // 1. propagation to db\n+        PagedResult<PropagationTaskTO> tasks = taskService.search(new TaskQuery.Builder(TaskType.PROPAGATION).\n+                anyTypeKind(AnyTypeKind.USER).entityKey(userTO.getKey()).resource(RESOURCE_NAME_DBVIRATTR).build());\n+        assertFalse(tasks.getResult().isEmpty());\n+        assertEquals(ExecStatus.SUCCESS.name(), tasks.getResult().get(0).getLatestExecStatus());\n \n-        // ...and that propagation to db succeeded\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n         String value = queryForObject(jdbcTemplate,\n                 MAX_WAIT_SECONDS, \"SELECT USERNAME FROM testpull WHERE ID=?\", String.class, userTO.getKey());\n         assertEquals(\"virtualvalue\", value);\n+\n+        // 2. virtual attribute\n+        userTO = userService.read(userTO.getKey());\n+        assertEquals(\"virtualvalue\", userTO.getVirAttr(\"virtualdata\").get().getValues().get(0));\n     }\n \n     @Test"},{"sha":"822bb5f05fb18567372efee85610a6d1d893e233","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReconciliationITCase.java","status":"modified","additions":125,"deletions":1,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -19,24 +19,46 @@\n package org.apache.syncope.fit.core;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import com.fasterxml.jackson.databind.MappingIterator;\n+import com.fasterxml.jackson.dataformat.csv.CsvMapper;\n+import com.fasterxml.jackson.dataformat.csv.CsvSchema;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.util.Date;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.Attr;\n+import java.util.List;\n+import java.util.Map;\n import java.util.UUID;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n-import org.apache.syncope.common.lib.Attr;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconStatus;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MatchType;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n+import org.apache.syncope.common.rest.api.beans.CSVPullSpec;\n+import org.apache.syncope.common.rest.api.beans.CSVPushSpec;\n import org.apache.syncope.common.rest.api.beans.ReconQuery;\n+import org.apache.syncope.common.rest.api.service.ReconciliationService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.Uid;\n@@ -168,4 +190,106 @@ public void importSingle() {\n         AnyObjectTO printer = anyObjectService.read(externalName);\n         assertNotNull(printer);\n     }\n+\n+    @Test\n+    public void importCSV() {\n+        ReconciliationService service = adminClient.getService(ReconciliationService.class);\n+        Client client = WebClient.client(service);\n+        client.type(RESTHeaders.TEXT_CSV);\n+\n+        CSVPullSpec spec = new CSVPullSpec.Builder(AnyTypeKind.USER.name(), \"username\").build();\n+        InputStream csv = getClass().getResourceAsStream(\"/test1.csv\");\n+\n+        List<ProvisioningReport> results = service.pull(spec, csv);\n+        assertEquals(AnyTypeKind.USER.name(), results.get(0).getAnyType());\n+        assertNotNull(results.get(0).getKey());\n+        assertEquals(\"donizetti\", results.get(0).getName());\n+        assertEquals(\"donizetti\", results.get(0).getUidValue());\n+        assertEquals(ResourceOperation.CREATE, results.get(0).getOperation());\n+        assertEquals(ProvisioningReport.Status.SUCCESS, results.get(0).getStatus());\n+\n+        UserTO donizetti = userService.read(results.get(0).getKey());\n+        assertNotNull(donizetti);\n+        assertEquals(\"Gaetano\", donizetti.getPlainAttr(\"firstname\").get().getValues().get(0));\n+        assertEquals(1, donizetti.getPlainAttr(\"loginDate\").get().getValues().size());\n+\n+        UserTO cimarosa = userService.read(results.get(1).getKey());\n+        assertNotNull(cimarosa);\n+        assertEquals(\"Domenico Cimarosa\", cimarosa.getPlainAttr(\"fullname\").get().getValues().get(0));\n+        assertEquals(2, cimarosa.getPlainAttr(\"loginDate\").get().getValues().size());\n+    }\n+\n+    @Test\n+    public void exportCSV() throws IOException {\n+        ReconciliationService service = adminClient.getService(ReconciliationService.class);\n+        Client client = WebClient.client(service);\n+        client.accept(RESTHeaders.TEXT_CSV);\n+\n+        AnyQuery anyQuery = new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"*ini\").query()).\n+                page(1).\n+                size(1000).\n+                orderBy(\"username ASC\").\n+                build();\n+\n+        CSVPushSpec spec = new CSVPushSpec.Builder(AnyTypeKind.USER.name()).\n+                ignorePagination(true).\n+                field(\"username\").\n+                field(\"status\").\n+                plainAttr(\"firstname\").\n+                plainAttr(\"surname\").\n+                plainAttr(\"email\").\n+                plainAttr(\"loginDate\").\n+                build();\n+\n+        Response response = service.push(anyQuery, spec);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+        assertEquals(\n+                \"attachment; filename=\" + SyncopeConstants.MASTER_DOMAIN + \".csv\",\n+                response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION));\n+\n+        PagedResult<UserTO> users = userService.search(anyQuery);\n+        assertNotNull(users);\n+\n+        CsvSchema.Builder builder = CsvSchema.builder().setUseHeader(true);\n+        builder.addColumn(\"username\");\n+        builder.addColumn(\"status\");\n+        builder.addColumn(\"firstname\");\n+        builder.addColumn(\"surname\");\n+        builder.addColumn(\"email\");\n+        builder.addColumn(\"loginDate\");\n+        CsvSchema schema = builder.build();\n+\n+        MappingIterator<Map<String, String>> reader = new CsvMapper().readerFor(Map.class).with(schema).\n+                readValues((InputStream) response.getEntity());\n+\n+        int rows = 0;\n+        for (; reader.hasNext(); rows++) {\n+            Map<String, String> row = reader.next();\n+\n+            assertEquals(users.getResult().get(rows).getUsername(), row.get(\"username\"));\n+            assertEquals(users.getResult().get(rows).getStatus(), row.get(\"status\"));\n+\n+            switch (row.get(\"username\")) {\n+                case \"rossini\":\n+                    assertEquals(spec.getNullValue(), row.get(\"email\"));\n+                    assertTrue(row.get(\"loginDate\").contains(spec.getArrayElementSeparator()));\n+                    break;\n+\n+                case \"verdi\":\n+                    assertEquals(\"verdi@syncope.org\", row.get(\"email\"));\n+                    assertEquals(spec.getNullValue(), row.get(\"loginDate\"));\n+                    break;\n+\n+                case \"bellini\":\n+                    assertEquals(spec.getNullValue(), row.get(\"email\"));\n+                    assertFalse(row.get(\"loginDate\").contains(spec.getArrayElementSeparator()));\n+                    break;\n+\n+                default:\n+                    break;\n+            }\n+        }\n+        assertEquals(rows, users.getTotalCount());\n+    }\n }"},{"sha":"f0a2e6102b6604f9f0bd919bfb028d25e8c24a89","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -31,11 +31,12 @@\n import java.security.AccessControlException;\n import java.util.ArrayList;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n@@ -858,8 +859,8 @@ public void updateMultivalueAttribute() {\n     private static void verifyAsyncResult(final List<PropagationStatus> statuses) {\n         assertEquals(3, statuses.size());\n \n-        Map<String, PropagationStatus> byResource = new HashMap<>(3);\n-        statuses.forEach(status -> byResource.put(status.getResource(), status));\n+        Map<String, PropagationStatus> byResource = statuses.stream().collect(\n+                Collectors.toMap(PropagationStatus::getResource, Function.identity()));\n         assertEquals(ExecStatus.SUCCESS, byResource.get(RESOURCE_NAME_LDAP).getStatus());\n         assertTrue(byResource.get(RESOURCE_NAME_TESTDB).getStatus() == ExecStatus.CREATED\n                 || byResource.get(RESOURCE_NAME_TESTDB).getStatus() == ExecStatus.SUCCESS);"},{"sha":"cf3dd582e7d7e1711ff561c4ff5085606cb97cc5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -223,13 +223,13 @@ public void virAttrCache() {\n \n         // 3. update virtual attribute directly\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n-        String value = queryForObject(jdbcTemplate, \n+        String value = queryForObject(jdbcTemplate,\n                 MAX_WAIT_SECONDS, \"SELECT USERNAME FROM testpull WHERE ID=?\", String.class, actual.getKey());\n         assertEquals(\"virattrcache\", value);\n \n         jdbcTemplate.update(\"UPDATE testpull set USERNAME='virattrcache2' WHERE ID=?\", actual.getKey());\n \n-        value = queryForObject(jdbcTemplate, \n+        value = queryForObject(jdbcTemplate,\n                 MAX_WAIT_SECONDS, \"SELECT USERNAME FROM testpull WHERE ID=?\", String.class, actual.getKey());\n         assertEquals(\"virattrcache2\", value);\n \n@@ -380,14 +380,15 @@ public void issueSYNCOPE442() {\n         // 4. update value on external resource\n         // ----------------------------------------\n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n-        String value = queryForObject(\n-                jdbcTemplate, MAX_WAIT_SECONDS, \"SELECT USERNAME FROM testpull WHERE ID=?\", String.class, userTO.getKey());\n+        String value = queryForObject(jdbcTemplate,\n+                MAX_WAIT_SECONDS, \"SELECT USERNAME FROM testpull WHERE ID=?\", String.class, userTO.\n+                        getKey());\n         assertEquals(\"virattrcache\", value);\n \n         jdbcTemplate.update(\"UPDATE testpull set USERNAME='virattrcache2' WHERE ID=?\", userTO.getKey());\n \n-        value = queryForObject(\n-                jdbcTemplate, MAX_WAIT_SECONDS, \"SELECT USERNAME FROM testpull WHERE ID=?\", String.class, userTO.getKey());\n+        value = queryForObject(jdbcTemplate,\n+                MAX_WAIT_SECONDS, \"SELECT USERNAME FROM testpull WHERE ID=?\", String.class, userTO.getKey());\n         assertEquals(\"virattrcache2\", value);\n         // ----------------------------------------\n "},{"sha":"ed2b67a4e27fcfb31936846bc6aaafba27739cc6","filename":"pom.xml","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4f63cab0c52253d6b6022e39a13b1be8f101a510/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4f63cab0c52253d6b6022e39a13b1be8f101a510/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=4f63cab0c52253d6b6022e39a13b1be8f101a510","patch":"@@ -452,6 +452,7 @@ under the License.\n     <h2.version>1.4.200</h2.version>\n \n     <junit.version>5.5.2</junit.version>\n+    <mockito.version>3.2.4</mockito.version>\n \n     <conf.directory>${project.build.directory}/test-classes</conf.directory>\n     <bundles.directory>${project.build.directory}/bundles</bundles.directory>\n@@ -972,6 +973,11 @@ under the License.\n           </exclusion>\n         </exclusions>\n       </dependency>\n+      <dependency>\n+        <groupId>com.fasterxml.jackson.dataformat</groupId>\n+        <artifactId>jackson-dataformat-csv</artifactId>\n+        <version>${jackson.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>com.fasterxml.jackson.datatype</groupId>\n         <artifactId>jackson-datatype-joda</artifactId>\n@@ -1785,9 +1791,21 @@ under the License.\n       <dependency>\n         <groupId>org.mockito</groupId>\n         <artifactId>mockito-core</artifactId>\n-        <version>3.2.0</version>\n+        <version>${mockito.version}</version>\n         <scope>test</scope>\n       </dependency>\n+      <dependency>\n+        <groupId>org.mockito</groupId>\n+        <artifactId>mockito-junit-jupiter</artifactId>\n+        <version>${mockito.version}</version>\n+        <scope>test</scope>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n       <dependency>\n         <groupId>org.junit.jupiter</groupId>\n         <artifactId>junit-jupiter</artifactId>\n@@ -2446,7 +2464,8 @@ under the License.\n             <link>http://fasterxml.github.io/jackson-databind/javadoc/2.10/</link>\n             <link>http://fasterxml.github.io/jackson-annotations/javadoc/2.10/</link>\n             <link>http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.10/</link>\n-            <link>http://fasterxml.github.io/jackson-dataformat-yaml/javadoc/2.9.pr1/</link>\n+            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/yaml/2.10/</link>\n+            <link>http://fasterxml.github.io/jackson-dataformats-text/javadoc/csv/2.10/</link>\n             <link>http://fasterxml.github.io/jackson-datatype-joda/javadoc/2.10/</link>\n             <link>http://www.javadoc.io/doc/org.apache.camel/camel-core/3.0.0/</link>\n             <link>http://www.javadoc.io/doc/org.apache.camel/camel-spring/3.0.0/</link>"}]}