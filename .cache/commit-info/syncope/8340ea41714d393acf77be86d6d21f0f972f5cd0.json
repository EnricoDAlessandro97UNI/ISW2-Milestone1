{"sha":"8340ea41714d393acf77be86d6d21f0f972f5cd0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgzNDBlYTQxNzE0ZDM5M2FjZjc3YmU4NmQ2ZDIxZjBmOTcyZjVjZDA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-10T12:45:18Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-12-10T12:45:18Z"},"message":"[SYNCOPE-1410] Renaming [User,Group,AnyObject]Patch -> [\\1]UR","tree":{"sha":"dfa860fb753938da77c0400860a4cc877cafd763","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/dfa860fb753938da77c0400860a4cc877cafd763"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8340ea41714d393acf77be86d6d21f0f972f5cd0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8340ea41714d393acf77be86d6d21f0f972f5cd0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8340ea41714d393acf77be86d6d21f0f972f5cd0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8340ea41714d393acf77be86d6d21f0f972f5cd0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"fb7dc553223ee0d483001a94a4cbeb070f4cf879","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fb7dc553223ee0d483001a94a4cbeb070f4cf879","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fb7dc553223ee0d483001a94a4cbeb070f4cf879"}],"stats":{"total":4096,"additions":2062,"deletions":2034},"files":[{"sha":"e3edf047de773d38af5fca3b8c4adb0ebb2e31a7","filename":"client/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -43,9 +43,9 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n-import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -56,7 +56,7 @@\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n@@ -256,42 +256,42 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                                     items.forEach(item -> {\n                                         UserTO user = (UserTO) item;\n \n-                                        UserPatch patch = new UserPatch();\n-                                        patch.setKey(user.getKey());\n-                                        patch.setMustChangePassword(new BooleanReplacePatchItem.Builder().\n+                                        UserUR req = new UserUR();\n+                                        req.setKey(user.getKey());\n+                                        req.setMustChangePassword(new BooleanReplacePatchItem.Builder().\n                                                 value(!user.isMustChangePassword()).build());\n \n-                                        batchUserService.update(patch);\n+                                        batchUserService.update(req);\n                                     });\n                                     break;\n \n                                 case SUSPEND:\n                                     items.forEach(item -> {\n                                         UserTO user = (UserTO) item;\n \n-                                        StatusPatch patch = new StatusPatch.Builder().\n+                                        StatusR req = new StatusR.Builder().\n                                                 key(user.getKey()).\n-                                                type(StatusPatchType.SUSPEND).\n+                                                type(StatusRType.SUSPEND).\n                                                 onSyncope(true).\n                                                 resources(user.getResources()).\n                                                 build();\n \n-                                        batchUserService.status(patch);\n+                                        batchUserService.status(req);\n                                     });\n                                     break;\n \n                                 case REACTIVATE:\n                                     items.forEach(item -> {\n                                         UserTO user = (UserTO) item;\n \n-                                        StatusPatch patch = new StatusPatch.Builder().\n+                                        StatusR req = new StatusR.Builder().\n                                                 key(user.getKey()).\n-                                                type(StatusPatchType.REACTIVATE).\n+                                                type(StatusRType.REACTIVATE).\n                                                 onSyncope(true).\n                                                 resources(user.getResources()).\n                                                 build();\n \n-                                        batchUserService.status(patch);\n+                                        batchUserService.status(req);\n                                     });\n                                     break;\n "},{"sha":"20df31c04d9034267a8e7f076c44d5536d83e153","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.LabelPanel;\n import org.apache.syncope.client.console.rest.ReconciliationRestClient;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -122,8 +122,8 @@ private static String getConnObjectLink(final ConnObjectTO objectTO) {\n                 : null;\n     }\n \n-    public static StatusPatch.Builder statusPatch(final Collection<StatusBean> statuses) {\n-        StatusPatch.Builder builder = new StatusPatch.Builder();\n+    public static StatusR.Builder statusR(final Collection<StatusBean> statuses) {\n+        StatusR.Builder builder = new StatusR.Builder();\n         builder.onSyncope(false);\n         statuses.forEach(status -> {\n             if (Constants.SYNCOPE.equalsIgnoreCase(status.getResource())) {"},{"sha":"ad628a46a92f82fc6b3cd80062cf383c4e9223a2","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RemediationDirectoryPanel.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRemediationDirectoryPanel.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -53,10 +53,10 @@\n import org.apache.syncope.client.console.wizards.any.UserWizardBuilder;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -190,14 +190,14 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                         case \"USER\":\n                             UserTO newUserTO;\n                             UserTO previousUserTO;\n-                            if (remediationTO.getAnyPatchPayload() == null) {\n+                            if (remediationTO.getAnyURPayload() == null) {\n                                 newUserTO = (UserTO) remediationTO.getAnyTOPayload();\n                                 previousUserTO = null;\n                             } else {\n                                 previousUserTO = new UserRestClient().\n-                                        read(remediationTO.getAnyPatchPayload().getKey());\n+                                        read(remediationTO.getAnyURPayload().getKey());\n                                 newUserTO = AnyOperations.patch(\n-                                        previousUserTO, (UserPatch) remediationTO.getAnyPatchPayload());\n+                                        previousUserTO, (UserUR) remediationTO.getAnyURPayload());\n                             }\n \n                             AjaxWizard.EditItemActionEvent<UserTO> userEvent =\n@@ -216,14 +216,14 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                         case \"GROUP\":\n                             GroupTO newGroupTO;\n                             GroupTO previousGroupTO;\n-                            if (remediationTO.getAnyPatchPayload() == null) {\n+                            if (remediationTO.getAnyURPayload() == null) {\n                                 newGroupTO = (GroupTO) remediationTO.getAnyTOPayload();\n                                 previousGroupTO = null;\n                             } else {\n                                 previousGroupTO = new GroupRestClient().\n-                                        read(remediationTO.getAnyPatchPayload().getKey());\n+                                        read(remediationTO.getAnyURPayload().getKey());\n                                 newGroupTO = AnyOperations.patch(\n-                                        previousGroupTO, (GroupPatch) remediationTO.getAnyPatchPayload());\n+                                        previousGroupTO, (GroupUR) remediationTO.getAnyURPayload());\n                             }\n \n                             AjaxWizard.EditItemActionEvent<GroupTO> groupEvent =\n@@ -242,14 +242,14 @@ public void onClick(final AjaxRequestTarget target, final RemediationTO ignore)\n                         default:\n                             AnyObjectTO newAnyObjectTO;\n                             AnyObjectTO previousAnyObjectTO;\n-                            if (remediationTO.getAnyPatchPayload() == null) {\n+                            if (remediationTO.getAnyURPayload() == null) {\n                                 newAnyObjectTO = (AnyObjectTO) remediationTO.getAnyTOPayload();\n                                 previousAnyObjectTO = null;\n                             } else {\n                                 previousAnyObjectTO = new AnyObjectRestClient().\n-                                        read(remediationTO.getAnyPatchPayload().getKey());\n+                                        read(remediationTO.getAnyURPayload().getKey());\n                                 newAnyObjectTO = AnyOperations.patch(\n-                                        previousAnyObjectTO, (AnyObjectPatch) remediationTO.getAnyPatchPayload());\n+                                        previousAnyObjectTO, (AnyObjectUR) remediationTO.getAnyURPayload());\n                             }\n \n                             AjaxWizard.EditItemActionEvent<AnyObjectTO> anyObjectEvent =\n@@ -370,24 +370,24 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n \n             ProvisioningResult<UserTO> result;\n \n-            if (remediationTO.getAnyPatchPayload() == null) {\n+            if (remediationTO.getAnyURPayload() == null) {\n                 result = restClient.remedy(remediationTO.getKey(), inner);\n             } else {\n-                UserPatch patch = AnyOperations.diff(inner, previousUserTO, false);\n+                UserUR req = AnyOperations.diff(inner, previousUserTO, false);\n \n                 if (StringUtils.isNotBlank(inner.getPassword())) {\n                     PasswordPatch passwordPatch = new PasswordPatch.Builder().\n                             value(inner.getPassword()).onSyncope(true).resources(inner.\n                             getResources()).\n                             build();\n-                    patch.setPassword(passwordPatch);\n+                    req.setPassword(passwordPatch);\n                 }\n                 // update just if it is changed\n-                if (patch.isEmpty()) {\n+                if (req.isEmpty()) {\n                     result = new ProvisioningResult<>();\n                     result.setEntity(inner);\n                 } else {\n-                    result = restClient.remedy(remediationTO.getKey(), patch);\n+                    result = restClient.remedy(remediationTO.getKey(), req);\n                 }\n             }\n \n@@ -422,17 +422,17 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n \n             ProvisioningResult<GroupTO> result;\n \n-            if (remediationTO.getAnyPatchPayload() == null) {\n+            if (remediationTO.getAnyURPayload() == null) {\n                 result = restClient.remedy(remediationTO.getKey(), inner);\n             } else {\n-                GroupPatch patch = AnyOperations.diff(inner, previousGroupTO, false);\n+                GroupUR req = AnyOperations.diff(inner, previousGroupTO, false);\n \n                 // update just if it is changed\n-                if (patch.isEmpty()) {\n+                if (req.isEmpty()) {\n                     result = new ProvisioningResult<>();\n                     result.setEntity(inner);\n                 } else {\n-                    result = restClient.remedy(remediationTO.getKey(), patch);\n+                    result = restClient.remedy(remediationTO.getKey(), req);\n                 }\n             }\n \n@@ -467,17 +467,17 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n \n             ProvisioningResult<AnyObjectTO> result;\n \n-            if (remediationTO.getAnyPatchPayload() == null) {\n+            if (remediationTO.getAnyURPayload() == null) {\n                 result = restClient.remedy(remediationTO.getKey(), inner);\n             } else {\n-                AnyObjectPatch patch = AnyOperations.diff(inner, previousAnyObjectTO, false);\n+                AnyObjectUR req = AnyOperations.diff(inner, previousAnyObjectTO, false);\n \n                 // update just if it is changed\n-                if (patch.isEmpty()) {\n+                if (req.isEmpty()) {\n                     result = new ProvisioningResult<>();\n                     result.setEntity(inner);\n                 } else {\n-                    result = restClient.remedy(remediationTO.getKey(), patch);\n+                    result = restClient.remedy(remediationTO.getKey(), req);\n                 }\n             }\n "},{"sha":"16bbcdc49c70c1449e2eaf05e15bb67af2527d0f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/TypeExtensionDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.any.TypeExtensionWizardBuilder;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.wicket.PageReference;\n@@ -85,12 +85,12 @@ protected TypeExtensionDirectoryPanel(\n \n     @Override\n     public void onSubmit(final AjaxRequestTarget target) {\n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(groupTO.getKey());\n-        patch.getTypeExtensions().addAll(groupTO.getTypeExtensions());\n+        GroupUR req = new GroupUR();\n+        req.setKey(groupTO.getKey());\n+        req.getTypeExtensions().addAll(groupTO.getTypeExtensions());\n \n         try {\n-            new GroupRestClient().update(groupTO.getETagValue(), patch);\n+            new GroupRestClient().update(groupTO.getETagValue(), req);\n \n             this.baseModal.show(false);\n             this.baseModal.close(target);"},{"sha":"3956e7d48a085f34ef1d4bbe271f598e0ae12857","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -33,9 +33,9 @@\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n-import org.apache.syncope.common.lib.patch.AssociationPatch;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.request.ResourceAR;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n+import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n@@ -92,17 +92,17 @@ public Map<String, String> associate(\n                 client.accept(RESTHeaders.MULTIPART_MIXED);\n             }\n \n-            StatusPatch statusPatch = StatusUtils.statusPatch(statuses).build();\n+            StatusR statusR = StatusUtils.statusR(statuses).build();\n \n-            AssociationPatch associationPatch = new AssociationPatch.Builder().key(key).\n+            ResourceAR resourceAR = new ResourceAR.Builder().key(key).\n                     action(action).\n-                    onSyncope(statusPatch.isOnSyncope()).\n-                    resources(statusPatch.getResources()).build();\n+                    onSyncope(statusR.isOnSyncope()).\n+                    resources(statusR.getResources()).build();\n             try {\n-                List<BatchResponseItem> items = parseBatchResponse(service.associate(associationPatch));\n+                List<BatchResponseItem> items = parseBatchResponse(service.associate(resourceAR));\n                 for (int i = 0; i < items.size(); i++) {\n                     result.put(\n-                            associationPatch.getResources().get(i),\n+                            resourceAR.getResources().get(i),\n                             getStatus(items.get(i).getStatus()));\n                 }\n             } catch (IOException e) {\n@@ -129,14 +129,14 @@ public Map<String, String> deassociate(\n                 client.accept(RESTHeaders.MULTIPART_MIXED);\n             }\n \n-            DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(key).\n+            ResourceDR resourceDR = new ResourceDR.Builder().key(key).\n                     action(action).\n-                    resources(StatusUtils.statusPatch(statuses).build().getResources()).build();\n+                    resources(StatusUtils.statusR(statuses).build().getResources()).build();\n             try {\n-                List<BatchResponseItem> items = parseBatchResponse(service.deassociate(deassociationPatch));\n+                List<BatchResponseItem> items = parseBatchResponse(service.deassociate(resourceDR));\n                 for (int i = 0; i < items.size(); i++) {\n                     result.put(\n-                            deassociationPatch.getResources().get(i),\n+                            resourceDR.getResources().get(i),\n                             getStatus(items.get(i).getStatus()));\n                 }\n             } catch (IOException e) {"},{"sha":"c2e71f69a79bcba5288000fcce6998973c46d492","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AnyObjectRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAnyObjectRestClient.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n@@ -47,10 +47,10 @@ public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO) {\n         });\n     }\n \n-    public ProvisioningResult<AnyObjectTO> update(final String etag, final AnyObjectPatch patch) {\n+    public ProvisioningResult<AnyObjectTO> update(final String etag, final AnyObjectUR updateReq) {\n         ProvisioningResult<AnyObjectTO> result;\n         synchronized (this) {\n-            result = getService(etag, AnyObjectService.class).update(patch).\n+            result = getService(etag, AnyObjectService.class).update(updateReq).\n                     readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {\n                     });\n             resetClient(getAnyServiceClass());"},{"sha":"f5bd6c38045343cf9ab723ef489846622359dff7","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ProvisionAction;\n@@ -48,10 +48,10 @@ public ProvisioningResult<GroupTO> create(final GroupTO groupTO) {\n         });\n     }\n \n-    public ProvisioningResult<GroupTO> update(final String etag, final GroupPatch patch) {\n+    public ProvisioningResult<GroupTO> update(final String etag, final GroupUR updateReq) {\n         ProvisioningResult<GroupTO> result;\n         synchronized (this) {\n-            result = getService(etag, GroupService.class).update(patch).\n+            result = getService(etag, GroupService.class).update(updateReq).\n                     readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n                     });\n             resetClient(getAnyServiceClass());"},{"sha":"30fb1b11a09ecd66b1dce53835f4c5bc4c5f4203","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/RemediationRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRemediationRestClient.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RemediationTO;\n@@ -55,8 +55,8 @@ public <T extends AnyTO> ProvisioningResult<T> remedy(final String key, final T\n         });\n     }\n \n-    public <T extends AnyTO> ProvisioningResult<T> remedy(final String key, final AnyPatch anyPatch) {\n-        Response response = getService(RemediationService.class).remedy(key, anyPatch);\n+    public <T extends AnyTO> ProvisioningResult<T> remedy(final String key, final AnyUR anyUR) {\n+        Response response = getService(RemediationService.class).remedy(key, anyUR);\n         return response.readEntity(new GenericType<ProvisioningResult<T>>() {\n         });\n     }"},{"sha":"223e37f36e5fb9090275ffa2f48ae3fdd701ed7e","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -27,13 +27,13 @@\n import org.apache.syncope.client.console.commons.status.Status;\n import org.apache.syncope.client.console.commons.status.StatusBean;\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n-import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ExecStatus;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -57,10 +57,10 @@ public ProvisioningResult<UserTO> create(final UserTO userTO, final boolean stor\n         });\n     }\n \n-    public ProvisioningResult<UserTO> update(final String etag, final UserPatch patch) {\n+    public ProvisioningResult<UserTO> update(final String etag, final UserUR updateReq) {\n         ProvisioningResult<UserTO> result;\n         synchronized (this) {\n-            result = getService(etag, UserService.class).update(patch).\n+            result = getService(etag, UserService.class).update(updateReq).\n                     readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                     });\n             resetClient(getAnyServiceClass());\n@@ -86,20 +86,20 @@ public List<UserTO> search(\n     }\n \n     public ProvisioningResult<UserTO> mustChangePassword(final String etag, final boolean value, final String key) {\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(key);\n-        userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(value).build());\n-        return update(etag, userPatch);\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(key);\n+        userUR.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(value).build());\n+        return update(etag, userUR);\n     }\n \n     private Map<String, String> status(\n-            final StatusPatchType type, final String etag, final String userKey, final List<StatusBean> statuses) {\n+            final StatusRType type, final String etag, final String userKey, final List<StatusBean> statuses) {\n \n-        StatusPatch statusPatch = StatusUtils.statusPatch(statuses).key(userKey).type(type).build();\n+        StatusR statusR = StatusUtils.statusR(statuses).key(userKey).type(type).build();\n \n         Map<String, String> results;\n         synchronized (this) {\n-            ProvisioningResult<UserTO> provisioningResult = getService(etag, UserService.class).status(statusPatch).\n+            ProvisioningResult<UserTO> provisioningResult = getService(etag, UserService.class).status(statusR).\n                     readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                     });\n \n@@ -126,12 +126,12 @@ private Map<String, String> status(\n                     ifPresent(statusBean -> statusBean.setStatus(\n                     \"suspended\".equalsIgnoreCase(provisioningResult.getEntity().getStatus())\n                     ? Status.SUSPENDED : Status.ACTIVE));\n-            if (statusPatch.isOnSyncope()) {\n+            if (statusR.isOnSyncope()) {\n                 results.put(Constants.SYNCOPE,\n                         (\"suspended\".equalsIgnoreCase(provisioningResult.getEntity().getStatus())\n-                        && type == StatusPatchType.SUSPEND)\n+                        && type == StatusRType.SUSPEND)\n                         || (\"active\".equalsIgnoreCase(provisioningResult.getEntity().getStatus())\n-                        && type == StatusPatchType.REACTIVATE)\n+                        && type == StatusRType.REACTIVATE)\n                                 ? ExecStatus.SUCCESS.name()\n                                 : ExecStatus.FAILURE.name());\n             }\n@@ -144,12 +144,12 @@ private Map<String, String> status(\n     public Map<String, String> suspend(\n             final String etag, final String userKey, final List<StatusBean> statuses) {\n \n-        return status(StatusPatchType.SUSPEND, etag, userKey, statuses);\n+        return status(StatusRType.SUSPEND, etag, userKey, statuses);\n     }\n \n     public Map<String, String> reactivate(\n             final String etag, final String userKey, final List<StatusBean> statuses) {\n \n-        return status(StatusPatchType.REACTIVATE, etag, userKey, statuses);\n+        return status(StatusRType.REACTIVATE, etag, userKey, statuses);\n     }\n }"},{"sha":"247f8c47332dad9db0e2a419406622e2fd4a0efb","filename":"client/console/src/main/java/org/apache/syncope/client/console/status/ChangePasswordModal.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fstatus%2FChangePasswordModal.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -32,8 +32,8 @@\n import org.apache.syncope.client.console.wizards.any.PasswordPanel;\n import org.apache.syncope.client.console.wizards.any.StatusPanel;\n import org.apache.syncope.client.console.wizards.any.UserWrapper;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -86,14 +86,12 @@ public void onSubmit(final AjaxRequestTarget target) {\n                     }\n                 }\n \n-                final UserPatch patch = new UserPatch();\n-                patch.setKey(inner.getKey());\n+                UserUR req = new UserUR.Builder().key(inner.getKey()).\n+                        password(new PasswordPatch.Builder().\n+                                value(inner.getPassword()).onSyncope(isOnSyncope).resources(resources).build()).\n+                        build();\n \n-                PasswordPatch passwordPatch = new PasswordPatch.Builder().\n-                        value(inner.getPassword()).onSyncope(isOnSyncope).resources(resources).build();\n-                patch.setPassword(passwordPatch);\n-\n-                userRestClient.update(inner.getETagValue(), patch);\n+                userRestClient.update(inner.getETagValue(), req);\n                 SyncopeConsoleSession.get().info(getString(Constants.OPERATION_SUCCEEDED));\n                 modal.show(false);\n                 modal.close(target);"},{"sha":"12b9dea0cb3bef7d6a90df40825a7025d1715c9d","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectWizardBuilder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectWizardBuilder.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.client.console.rest.AnyObjectRestClient;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.wicket.PageReference;\n@@ -73,14 +73,14 @@ protected Serializable onApplyInternal(final AnyWrapper<AnyObjectTO> modelObject\n             result = anyObjectRestClient.create(inner);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n-            AnyObjectPatch patch = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);\n+            AnyObjectUR req = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);\n \n             // update just if it is changed\n-            if (patch.isEmpty()) {\n+            if (req.isEmpty()) {\n                 result = new ProvisioningResult<>();\n                 result.setEntity(inner);\n             } else {\n-                result = anyObjectRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);\n+                result = anyObjectRestClient.update(getOriginalItem().getInnerObject().getETagValue(), req);\n             }\n         }\n "},{"sha":"dbbde35acb81c86d0f41dc4fe03751cf3aef9d6a","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupWizardBuilder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupWizardBuilder.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.wicket.PageReference;\n@@ -92,7 +92,7 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n             result = groupRestClient.create(inner);\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n-            GroupPatch patch = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);\n+            GroupUR groupUR = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);\n             GroupTO originaObj = getOriginalItem().getInnerObject();\n \n             // SYNCOPE-1170\n@@ -107,11 +107,11 @@ protected Serializable onApplyInternal(final AnyWrapper<GroupTO> modelObject) {\n                     || !CollectionUtils.diff(inner.getTypeExtensions(), originaObj.getTypeExtensions()).isEmpty();\n \n             // update just if it is changed\n-            if (patch.isEmpty() && !othersNotEqualsOrBlanks) {\n+            if (groupUR.isEmpty() && !othersNotEqualsOrBlanks) {\n                 result = new ProvisioningResult<>();\n                 result.setEntity(inner);\n             } else {\n-                result = groupRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);\n+                result = groupRestClient.update(getOriginalItem().getInnerObject().getETagValue(), groupUR);\n             }\n         }\n "},{"sha":"c95cb5b517c0042d20b25eb2afa808e401d07664","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -26,8 +26,8 @@\n import org.apache.syncope.client.console.rest.UserRestClient;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.PageReference;\n@@ -83,20 +83,20 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n                     : StringUtils.isNotBlank(inner.getPassword()));\n         } else {\n             fixPlainAndVirAttrs(inner, getOriginalItem().getInnerObject());\n-            UserPatch patch = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);\n+            UserUR userUR = AnyOperations.diff(inner, getOriginalItem().getInnerObject(), false);\n \n             if (StringUtils.isNotBlank(inner.getPassword())) {\n                 PasswordPatch passwordPatch = new PasswordPatch.Builder().\n                         value(inner.getPassword()).onSyncope(true).resources(inner.getResources()).build();\n-                patch.setPassword(passwordPatch);\n+                userUR.setPassword(passwordPatch);\n             }\n \n             // update just if it is changed\n-            if (patch.isEmpty()) {\n+            if (userUR.isEmpty()) {\n                 result = new ProvisioningResult<>();\n                 result.setEntity(inner);\n             } else {\n-                result = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);\n+                result = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), userUR);\n             }\n         }\n "},{"sha":"5d6a7700f36da66973b82958105b0c1815eaa824","filename":"client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyLogicActions.groovy","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyLogicActions.groovy?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -17,8 +17,8 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n-import org.apache.syncope.common.lib.patch.AnyPatch\n-import org.apache.syncope.common.lib.patch.AttrPatch\n+import org.apache.syncope.common.lib.request.AnyUR\n+import org.apache.syncope.common.lib.request.AttrPatch\n import org.apache.syncope.common.lib.to.AnyTO\n import org.apache.syncope.common.lib.to.AttrTO\n import org.apache.syncope.core.provisioning.api.LogicActions\n@@ -32,7 +32,7 @@ class MyLogicActions implements LogicActions {\n   }\n \n   @Override\n-  <M extends AnyPatch> M beforeUpdate(final M input) {\n+  <R extends AnyUR> R beforeUpdate(final R input) {\n     return input;\n   }\n }"},{"sha":"125d527c3352daef973ad9eed09374ce79f23c4d","filename":"client/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPullActions.groovy","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPullActions.groovy?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -17,7 +17,7 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n-import org.apache.syncope.common.lib.patch.AnyPatch\n+import org.apache.syncope.common.lib.request.AnyUR\n import org.apache.syncope.common.lib.to.EntityTO\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask\n import org.apache.syncope.core.provisioning.api.pushpull.IgnoreProvisionException\n@@ -85,11 +85,11 @@ class MyPullActions implements PullActions {\n   }\n \n   @Override\n-  <P extends AnyPatch> void beforeUpdate(\n+  <R extends AnyUR> void beforeUpdate(\n     ProvisioningProfile profile,\n     SyncDelta delta,\n     EntityTO entity,\n-    P anyPatch) throws JobExecutionException {\n+    R anyUR) throws JobExecutionException {\n \n   }\n "},{"sha":"98bb010da514c23683d38c60a11335286cf142b0","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.client.enduser.util.Validation;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.EntityTOUtils;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -151,16 +151,16 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                     completeUserObject(userTO, selfTO);\n                 }\n                 // create diff patch\n-                UserPatch userPatch = AnyOperations.diff(userTO, selfTO, false);\n-                if (userPatch.isEmpty()) {\n+                UserUR userUR = AnyOperations.diff(userTO, selfTO, false);\n+                if (userUR.isEmpty()) {\n                     // nothing to do\n                     buildResponse(response,\n                             Response.Status.OK.getStatusCode(),\n                             \"No need to update [\" + selfTO.getUsername() + \"]\");\n                 } else {\n                     // update user by patch\n                     Response coreResponse = SyncopeEnduserSession.get().\n-                            getService(userTO.getETagValue(), UserSelfService.class).update(userPatch);\n+                            getService(userTO.getETagValue(), UserSelfService.class).update(userUR);\n \n                     buildResponse(response,\n                             coreResponse.getStatus(),"},{"sha":"59d8ac2cc73cdcd275e48eae5213c6e179f24a13","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -27,18 +27,18 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.RelationshipPatch;\n-import org.apache.syncope.common.lib.patch.AbstractReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.RelationshipPatch;\n+import org.apache.syncope.common.lib.request.AbstractReplacePatchItem;\n+import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -51,7 +51,7 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * Utility class for comparing {@link AnyTO} instances in order to generate {@link AnyPatch} instances.\n+ * Utility class for comparing {@link AnyTO} instances in order to generate {@link AnyUR} instances.\n  */\n public final class AnyOperations {\n \n@@ -75,7 +75,7 @@ private static <T, K extends AbstractReplacePatchItem<T>> K replacePatchItem(\n     }\n \n     private static void diff(\n-            final AnyTO updated, final AnyTO original, final AnyPatch result, final boolean incremental) {\n+            final AnyTO updated, final AnyTO original, final AnyUR result, final boolean incremental) {\n \n         // check same key\n         if (updated.getKey() == null && original.getKey() != null\n@@ -168,12 +168,12 @@ private static void diff(\n      * @param updated updated AnyObjectTO\n      * @param original original AnyObjectTO\n      * @param incremental perform incremental diff (without removing existing info)\n-     * @return AnyObjectPatch containing differences\n+     * @return {@link AnyObjectUR} containing differences\n      */\n-    public static AnyObjectPatch diff(\n+    public static AnyObjectUR diff(\n             final AnyObjectTO updated, final AnyObjectTO original, final boolean incremental) {\n \n-        AnyObjectPatch result = new AnyObjectPatch();\n+        AnyObjectUR result = new AnyObjectUR();\n \n         diff(updated, original, result, incremental);\n \n@@ -251,10 +251,10 @@ private static void diff(\n      * @param updated updated UserTO\n      * @param original original UserTO\n      * @param incremental perform incremental diff (without removing existing info)\n-     * @return UserPatch containing differences\n+     * @return {@link UserUR} containing differences\n      */\n-    public static UserPatch diff(final UserTO updated, final UserTO original, final boolean incremental) {\n-        UserPatch result = new UserPatch();\n+    public static UserUR diff(final UserTO updated, final UserTO original, final boolean incremental) {\n+        UserUR result = new UserUR();\n \n         diff(updated, original, result, incremental);\n \n@@ -359,10 +359,10 @@ public static UserPatch diff(final UserTO updated, final UserTO original, final\n      * @param updated updated GroupTO\n      * @param original original GroupTO\n      * @param incremental perform incremental diff (without removing existing info)\n-     * @return GroupPatch containing differences\n+     * @return {@link GroupUR} containing differences\n      */\n-    public static GroupPatch diff(final GroupTO updated, final GroupTO original, final boolean incremental) {\n-        GroupPatch result = new GroupPatch();\n+    public static GroupUR diff(final GroupTO updated, final GroupTO original, final boolean incremental) {\n+        GroupUR result = new GroupUR();\n \n         diff(updated, original, result, incremental);\n \n@@ -386,7 +386,7 @@ public static GroupPatch diff(final GroupTO updated, final GroupTO original, fin\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public static <TO extends AnyTO, P extends AnyPatch> P diff(\n+    public static <TO extends AnyTO, P extends AnyUR> P diff(\n             final TO updated, final TO original, final boolean incremental) {\n \n         if (updated instanceof UserTO && original instanceof UserTO) {\n@@ -416,21 +416,21 @@ private static Collection<AttrTO> patch(final Map<String, AttrTO> attrs, final S\n         return rwattrs.values();\n     }\n \n-    private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, final K patch, final T result) {\n+    private static <T extends AnyTO, K extends AnyUR> void patch(final T to, final K req, final T result) {\n         // check same key\n-        if (to.getKey() == null || !to.getKey().equals(patch.getKey())) {\n+        if (to.getKey() == null || !to.getKey().equals(req.getKey())) {\n             throw new IllegalArgumentException(\n-                    to.getClass().getSimpleName() + \" and \" + patch.getClass().getSimpleName()\n+                    to.getClass().getSimpleName() + \" and \" + req.getClass().getSimpleName()\n                     + \" keys must be the same\");\n         }\n \n         // 0. realm\n-        if (patch.getRealm() != null) {\n-            result.setRealm(patch.getRealm().getValue());\n+        if (req.getRealm() != null) {\n+            result.setRealm(req.getRealm().getValue());\n         }\n \n         // 1. auxiliary classes\n-        for (StringPatchItem auxClassPatch : patch.getAuxClasses()) {\n+        for (StringPatchItem auxClassPatch : req.getAuxClasses()) {\n             switch (auxClassPatch.getOperation()) {\n                 case ADD_REPLACE:\n                     result.getAuxClasses().add(auxClassPatch.getValue());\n@@ -444,14 +444,14 @@ private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, fina\n \n         // 2. plain attributes\n         result.getPlainAttrs().clear();\n-        result.getPlainAttrs().addAll(patch(EntityTOUtils.buildAttrMap(to.getPlainAttrs()), patch.getPlainAttrs()));\n+        result.getPlainAttrs().addAll(patch(EntityTOUtils.buildAttrMap(to.getPlainAttrs()), req.getPlainAttrs()));\n \n         // 3. virtual attributes\n         result.getVirAttrs().clear();\n-        result.getVirAttrs().addAll(patch.getVirAttrs());\n+        result.getVirAttrs().addAll(req.getVirAttrs());\n \n         // 4. resources\n-        for (StringPatchItem resourcePatch : patch.getResources()) {\n+        for (StringPatchItem resourcePatch : req.getResources()) {\n             switch (resourcePatch.getOperation()) {\n                 case ADD_REPLACE:\n                     result.getResources().add(resourcePatch.getValue());\n@@ -464,51 +464,51 @@ private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, fina\n         }\n     }\n \n-    public static AnyTO patch(final AnyTO anyTO, final AnyPatch anyPatch) {\n+    public static AnyTO patch(final AnyTO anyTO, final AnyUR anyUR) {\n         if (anyTO instanceof UserTO) {\n-            return patch((UserTO) anyTO, (UserPatch) anyPatch);\n+            return patch((UserTO) anyTO, (UserUR) anyUR);\n         }\n         if (anyTO instanceof GroupTO) {\n-            return patch((GroupTO) anyTO, (GroupPatch) anyPatch);\n+            return patch((GroupTO) anyTO, (GroupUR) anyUR);\n         }\n         if (anyTO instanceof AnyObjectTO) {\n-            return patch((AnyObjectTO) anyTO, (AnyObjectPatch) anyPatch);\n+            return patch((AnyObjectTO) anyTO, (AnyObjectUR) anyUR);\n         }\n         return null;\n     }\n \n-    public static GroupTO patch(final GroupTO groupTO, final GroupPatch groupPatch) {\n+    public static GroupTO patch(final GroupTO groupTO, final GroupUR groupUR) {\n         GroupTO result = SerializationUtils.clone(groupTO);\n-        patch(groupTO, groupPatch, result);\n+        patch(groupTO, groupUR, result);\n \n-        if (groupPatch.getName() != null) {\n-            result.setName(groupPatch.getName().getValue());\n+        if (groupUR.getName() != null) {\n+            result.setName(groupUR.getName().getValue());\n         }\n \n-        if (groupPatch.getUserOwner() != null) {\n-            result.setGroupOwner(groupPatch.getUserOwner().getValue());\n+        if (groupUR.getUserOwner() != null) {\n+            result.setGroupOwner(groupUR.getUserOwner().getValue());\n         }\n-        if (groupPatch.getGroupOwner() != null) {\n-            result.setGroupOwner(groupPatch.getGroupOwner().getValue());\n+        if (groupUR.getGroupOwner() != null) {\n+            result.setGroupOwner(groupUR.getGroupOwner().getValue());\n         }\n \n-        result.setUDynMembershipCond(groupPatch.getUDynMembershipCond());\n+        result.setUDynMembershipCond(groupUR.getUDynMembershipCond());\n         result.getADynMembershipConds().clear();\n-        result.getADynMembershipConds().putAll(groupPatch.getADynMembershipConds());\n+        result.getADynMembershipConds().putAll(groupUR.getADynMembershipConds());\n \n         return result;\n     }\n \n-    public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPatch anyObjectPatch) {\n+    public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectUR anyObjectUR) {\n         AnyObjectTO result = SerializationUtils.clone(anyObjectTO);\n-        patch(anyObjectTO, anyObjectPatch, result);\n+        patch(anyObjectTO, anyObjectUR, result);\n \n-        if (anyObjectPatch.getName() != null) {\n-            result.setName(anyObjectPatch.getName().getValue());\n+        if (anyObjectUR.getName() != null) {\n+            result.setName(anyObjectUR.getName().getValue());\n         }\n \n         // 1. relationships\n-        anyObjectPatch.getRelationships().\n+        anyObjectUR.getRelationships().\n                 forEach(relPatch -> {\n                     if (relPatch.getRelationshipTO() == null) {\n                         LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n@@ -521,7 +521,7 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPa\n                 });\n \n         // 2. memberships\n-        anyObjectPatch.getMemberships().\n+        anyObjectUR.getMemberships().\n                 forEach(membPatch -> {\n                     if (membPatch.getGroup() == null) {\n                         LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n@@ -548,22 +548,22 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPa\n         return result;\n     }\n \n-    public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n+    public static UserTO patch(final UserTO userTO, final UserUR userUR) {\n         UserTO result = SerializationUtils.clone(userTO);\n-        patch(userTO, userPatch, result);\n+        patch(userTO, userUR, result);\n \n         // 1. password\n-        if (userPatch.getPassword() != null) {\n-            result.setPassword(userPatch.getPassword().getValue());\n+        if (userUR.getPassword() != null) {\n+            result.setPassword(userUR.getPassword().getValue());\n         }\n \n         // 2. username\n-        if (userPatch.getUsername() != null) {\n-            result.setUsername(userPatch.getUsername().getValue());\n+        if (userUR.getUsername() != null) {\n+            result.setUsername(userUR.getUsername().getValue());\n         }\n \n         // 3. relationships\n-        userPatch.getRelationships().\n+        userUR.getRelationships().\n                 forEach(relPatch -> {\n                     if (relPatch.getRelationshipTO() == null) {\n                         LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n@@ -576,7 +576,7 @@ public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n                 });\n \n         // 4. memberships\n-        userPatch.getMemberships().\n+        userUR.getMemberships().\n                 forEach(membPatch -> {\n                     if (membPatch.getGroup() == null) {\n                         LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n@@ -601,7 +601,7 @@ public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n                 });\n \n         // 5. roles\n-        for (StringPatchItem rolePatch : userPatch.getRoles()) {\n+        for (StringPatchItem rolePatch : userUR.getRoles()) {\n             switch (rolePatch.getOperation()) {\n                 case ADD_REPLACE:\n                     result.getRoles().add(rolePatch.getValue());\n@@ -620,10 +620,10 @@ public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n      * Add PLAIN attribute DELETE patch for those attributes of the input AnyTO without values or containing null value\n      *\n      * @param anyTO User, Group or Any Object to look for attributes with no value\n-     * @param patch patch to enrich with DELETE statements\n+     * @param anyUR update req to enrich with DELETE statements\n      */\n-    public static void cleanEmptyAttrs(final AnyTO anyTO, final AnyPatch patch) {\n-        patch.getPlainAttrs().addAll(anyTO.getPlainAttrs().stream().\n+    public static void cleanEmptyAttrs(final AnyTO anyTO, final AnyUR anyUR) {\n+        anyUR.getPlainAttrs().addAll(anyTO.getPlainAttrs().stream().\n                 filter(plainAttrTO -> isEmpty(plainAttrTO)).\n                 map(plainAttrTO -> new AttrPatch.Builder().\n                 operation(PatchOperation.DELETE)."},{"sha":"6c4dbc57aa18f040049d78219f7709a61c799993","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/ResourceDeassociationPatch.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/fb7dc553223ee0d483001a94a4cbeb070f4cf879/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FResourceDeassociationPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/fb7dc553223ee0d483001a94a4cbeb070f4cf879/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FResourceDeassociationPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FResourceDeassociationPatch.java?ref=fb7dc553223ee0d483001a94a4cbeb070f4cf879","patch":"@@ -1,80 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.patch;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.ws.rs.PathParam;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n-\n-@XmlRootElement(name = \"resourceDeassociationPatch\")\n-@XmlType\n-public class ResourceDeassociationPatch implements Serializable {\n-\n-    private static final long serialVersionUID = -9116268525079837276L;\n-\n-    private String key;\n-\n-    private String anyTypeKey;\n-\n-    private ResourceDeassociationAction action;\n-\n-    private final List<String> anyKyes = new ArrayList<>();\n-\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @PathParam(\"key\")\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n-    public String getAnyTypeKey() {\n-        return anyTypeKey;\n-    }\n-\n-    @PathParam(\"anyTypeKey\")\n-    public void setAnyTypeKey(final String anyTypeKey) {\n-        this.anyTypeKey = anyTypeKey;\n-    }\n-\n-    public ResourceDeassociationAction getAction() {\n-        return action;\n-    }\n-\n-    @PathParam(\"action\")\n-    public void setAction(final ResourceDeassociationAction action) {\n-        this.action = action;\n-    }\n-\n-    @XmlElementWrapper(name = \"anyKyes\")\n-    @XmlElement(name = \"key\")\n-    @JsonProperty(\"anyKyes\")\n-    public List<String> getAnyKyes() {\n-        return anyKyes;\n-    }\n-\n-}"},{"sha":"8d8665933e7689573742089f7b4728bdd206380a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AbstractPatch.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatch.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import java.io.Serializable;\n import javax.xml.bind.annotation.XmlSeeAlso;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AbstractPatch.java"},{"sha":"be918ac919d74d1b85d7573116e969a569b89405","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AbstractPatchItem.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractPatchItem.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import javax.xml.bind.annotation.XmlElement;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AbstractPatchItem.java"},{"sha":"672ef27b77cf0e5d047ea0318c79c443e03b1caf","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AbstractReplacePatchItem.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractReplacePatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractReplacePatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAbstractReplacePatchItem.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,18 +16,18 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n \n /**\n- * When a field of this type from {@link AnyPatch}, {@link AnyObjectPatch}, {@link GroupPatch} or {@link UserPatch} is\n+ * When a field of this type from {@link AnyUR}, {@link AnyObjectUR}, {@link GroupUR} or {@link UserUR} is\n  * {@code null}, no change will be performed; otherwise the result from {@link #getValue()} will replace the current\n  * value of the related field.\n  *\n- * @param <T> {@code String}, {@code Long} or {@code Boolean}\n+ * @param <T> {@code String}, {@code Boolean}\n  */\n @XmlType\n @XmlSeeAlso({ BooleanReplacePatchItem.class, StringReplacePatchItem.class })","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AbstractReplacePatchItem.java"},{"sha":"87136fe8455e7d1baf143d23cc56668023d064c7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyObjectUR.java","status":"renamed","additions":51,"deletions":6,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyObjectUR.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,10 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n@@ -29,21 +31,64 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-@XmlRootElement(name = \"anyObjectPatch\")\n+@XmlRootElement(name = \"anyObjectUR\")\n @XmlType\n-@Schema(allOf = { AnyPatch.class })\n-public class AnyObjectPatch extends AnyPatch {\n+@Schema(allOf = { AnyUR.class })\n+public class AnyObjectUR extends AnyUR {\n \n     private static final long serialVersionUID = -1644118942622556097L;\n \n+    public static class Builder extends AnyUR.Builder<AnyObjectUR, Builder> {\n+\n+        @Override\n+        protected AnyObjectUR newInstance() {\n+            return new AnyObjectUR();\n+        }\n+\n+        public Builder name(final StringReplacePatchItem name) {\n+            getInstance().setName(name);\n+            return this;\n+        }\n+\n+        public Builder relationship(final RelationshipPatch relationship) {\n+            getInstance().getRelationships().add(relationship);\n+            return this;\n+        }\n+\n+        public Builder relationships(final RelationshipPatch... relationships) {\n+            getInstance().getRelationships().addAll(Arrays.asList(relationships));\n+            return this;\n+        }\n+\n+        public Builder relationships(final Collection<RelationshipPatch> relationships) {\n+            getInstance().getRelationships().addAll(relationships);\n+            return this;\n+        }\n+\n+        public Builder membership(final MembershipPatch membership) {\n+            getInstance().getMemberships().add(membership);\n+            return this;\n+        }\n+\n+        public Builder memberships(final MembershipPatch... memberships) {\n+            getInstance().getMemberships().addAll(Arrays.asList(memberships));\n+            return this;\n+        }\n+\n+        public Builder memberships(final Collection<MembershipPatch> memberships) {\n+            getInstance().getMemberships().addAll(memberships);\n+            return this;\n+        }\n+    }\n+\n     private StringReplacePatchItem name;\n \n     private final Set<RelationshipPatch> relationships = new HashSet<>();\n \n     private final Set<MembershipPatch> memberships = new HashSet<>();\n \n     @JsonProperty(\"@class\")\n-    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.patch.AnyObjectPatch\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.AnyObjectUR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();\n@@ -97,7 +142,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final AnyObjectPatch other = (AnyObjectPatch) obj;\n+        final AnyObjectUR other = (AnyObjectUR) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(name, other.name).","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyObjectPatch.java"},{"sha":"d0befda8f2a547c8ba6bcde56e4db44de80d95a2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AnyUR.java","status":"renamed","additions":109,"deletions":5,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAnyUR.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,14 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n@@ -37,14 +39,116 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n \n @XmlType\n-@XmlSeeAlso({ UserPatch.class, GroupPatch.class, AnyObjectPatch.class })\n+@XmlSeeAlso({ UserUR.class, GroupUR.class, AnyObjectUR.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n @JsonPropertyOrder(value = { \"@class\", \"key\" })\n-@Schema(subTypes = { UserPatch.class, GroupPatch.class, AnyObjectPatch.class }, discriminatorProperty = \"@class\")\n-public abstract class AnyPatch implements Serializable, AttributablePatch {\n+@Schema(subTypes = { UserUR.class, GroupUR.class, AnyObjectUR.class }, discriminatorProperty = \"@class\")\n+public abstract class AnyUR implements Serializable, AttributableUR {\n \n     private static final long serialVersionUID = -7445489774552440544L;\n \n+    protected abstract static class Builder<R extends AnyUR, B extends Builder<R, B>> {\n+\n+        protected R instance;\n+\n+        protected abstract R newInstance();\n+\n+        protected R getInstance() {\n+            if (instance == null) {\n+                instance = newInstance();\n+            }\n+            return instance;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B key(final String key) {\n+            getInstance().setKey(key);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B realm(final StringReplacePatchItem realm) {\n+            getInstance().setRealm(realm);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B auxClass(final StringPatchItem auxClass) {\n+            getInstance().getAuxClasses().add(auxClass);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B auxClasses(final StringPatchItem... auxClasses) {\n+            getInstance().getAuxClasses().addAll(Arrays.asList(auxClasses));\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B auxClasses(final Collection<StringPatchItem> auxClasses) {\n+            getInstance().getAuxClasses().addAll(auxClasses);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B plainAttr(final AttrPatch plainAttr) {\n+            getInstance().getPlainAttrs().add(plainAttr);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B plainAttrs(final AttrPatch... plainAttrs) {\n+            getInstance().getPlainAttrs().addAll(Arrays.asList(plainAttrs));\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B plainAttrs(final Collection<AttrPatch> plainAttrs) {\n+            getInstance().getPlainAttrs().addAll(plainAttrs);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B virAttr(final AttrTO virAttr) {\n+            getInstance().getVirAttrs().add(virAttr);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B virAttrs(final Collection<AttrTO> virAttrs) {\n+            getInstance().getVirAttrs().addAll(virAttrs);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B virAttrs(final AttrTO... virAttrs) {\n+            getInstance().getVirAttrs().addAll(Arrays.asList(virAttrs));\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B resource(final StringPatchItem resource) {\n+            getInstance().getResources().add(resource);\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B resources(final StringPatchItem... resources) {\n+            getInstance().getResources().addAll(Arrays.asList(resources));\n+            return (B) this;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B resources(final Collection<StringPatchItem> resources) {\n+            getInstance().getResources().addAll(resources);\n+            return (B) this;\n+        }\n+\n+        public R build() {\n+            return getInstance();\n+        }\n+    }\n+\n     @XmlTransient\n     @JsonProperty(\"@class\")\n     private String discriminator;\n@@ -152,7 +256,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final AnyPatch other = (AnyPatch) obj;\n+        final AnyUR other = (AnyUR) obj;\n         return new EqualsBuilder().\n                 append(discriminator, other.discriminator).\n                 append(key, other.key).","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyPatch.java"},{"sha":"033ad874b5feb329f22afa8c19b92801f5ef0abf","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AttrPatch.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttrPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttrPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttrPatch.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import javax.xml.bind.annotation.XmlRootElement;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AttrPatch.java"},{"sha":"30b8396ef94658070862c62f14208bac69f3ec09","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/AttributableUR.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttributableUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttributableUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FAttributableUR.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,12 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import java.util.Set;\n import org.apache.syncope.common.lib.to.AttrTO;\n \n-public interface AttributablePatch {\n+public interface AttributableUR {\n \n     Set<AttrPatch> getPlainAttrs();\n ","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AttributablePatch.java"},{"sha":"bbc58423105d45ffdf0e4f0e9cd4a36e57d73da8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/BooleanReplacePatchItem.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FBooleanReplacePatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FBooleanReplacePatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FBooleanReplacePatchItem.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/BooleanReplacePatchItem.java"},{"sha":"a3b3b65d87faf1c5cc595ad450cf86ee92e06a40","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/GroupUR.java","status":"renamed","additions":56,"deletions":6,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FGroupUR.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,12 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -36,13 +38,61 @@\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n \n-@XmlRootElement(name = \"groupPatch\")\n+@XmlRootElement(name = \"groupUR\")\n @XmlType\n-@Schema(allOf = { AnyPatch.class })\n-public class GroupPatch extends AnyPatch {\n+@Schema(allOf = { AnyUR.class })\n+public class GroupUR extends AnyUR {\n \n     private static final long serialVersionUID = -460284378124440077L;\n \n+    public static class Builder extends AnyUR.Builder<GroupUR, Builder> {\n+\n+        @Override\n+        protected GroupUR newInstance() {\n+            return new GroupUR();\n+        }\n+\n+        public Builder name(final StringReplacePatchItem name) {\n+            getInstance().setName(name);\n+            return this;\n+        }\n+\n+        public Builder userOwner(final StringReplacePatchItem userOwner) {\n+            getInstance().setUserOwner(userOwner);\n+            return this;\n+        }\n+\n+        public Builder groupOwner(final StringReplacePatchItem groupOwner) {\n+            getInstance().setGroupOwner(groupOwner);\n+            return this;\n+        }\n+\n+        public Builder udynMembershipCond(final String udynMembershipCond) {\n+            getInstance().setUDynMembershipCond(udynMembershipCond);\n+            return this;\n+        }\n+\n+        public Builder adynMembershipCond(final String type, final String fiql) {\n+            getInstance().getADynMembershipConds().put(type, fiql);\n+            return this;\n+        }\n+\n+        public Builder typeExtension(final TypeExtensionTO typeExtension) {\n+            getInstance().getTypeExtensions().add(typeExtension);\n+            return this;\n+        }\n+\n+        public Builder typeExtensions(final TypeExtensionTO... typeExtensions) {\n+            getInstance().getTypeExtensions().addAll(Arrays.asList(typeExtensions));\n+            return this;\n+        }\n+\n+        public Builder typeExtensions(final Collection<TypeExtensionTO> typeExtensions) {\n+            getInstance().getTypeExtensions().addAll(typeExtensions);\n+            return this;\n+        }\n+    }\n+\n     private StringReplacePatchItem name;\n \n     private StringReplacePatchItem userOwner;\n@@ -57,7 +107,7 @@ public class GroupPatch extends AnyPatch {\n     private final List<TypeExtensionTO> typeExtensions = new ArrayList<>();\n \n     @JsonProperty(\"@class\")\n-    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.patch.GroupPatch\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.GroupUR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();\n@@ -143,7 +193,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final GroupPatch other = (GroupPatch) obj;\n+        final GroupUR other = (GroupUR) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(name, other.name).","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java"},{"sha":"078b368ba6f88c99f9607b23371805d8a58220c3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/LongPatchItem.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FLongPatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FLongPatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FLongPatchItem.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/LongPatchItem.java"},{"sha":"b79bf9cf528947888771c0a6bb78d4b283f699dc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/MembershipPatch.java","status":"renamed","additions":33,"deletions":1,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FMembershipPatch.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,9 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n@@ -46,6 +48,36 @@ public Builder group(final String group) {\n             getInstance().setGroup(group);\n             return this;\n         }\n+\n+        public Builder plainAttr(final AttrTO plainAttr) {\n+            getInstance().getPlainAttrs().add(plainAttr);\n+            return this;\n+        }\n+\n+        public Builder plainAttrs(final AttrTO... plainAttrs) {\n+            getInstance().getPlainAttrs().addAll(Arrays.asList(plainAttrs));\n+            return this;\n+        }\n+\n+        public Builder plainAttrs(final Collection<AttrTO> plainAttrs) {\n+            getInstance().getPlainAttrs().addAll(plainAttrs);\n+            return this;\n+        }\n+\n+        public Builder virAttr(final AttrTO virAttr) {\n+            getInstance().getVirAttrs().add(virAttr);\n+            return this;\n+        }\n+\n+        public Builder virAttrs(final AttrTO... virAttrs) {\n+            getInstance().getVirAttrs().addAll(Arrays.asList(virAttrs));\n+            return this;\n+        }\n+\n+        public Builder virAttrs(final Collection<AttrTO> virAttrs) {\n+            getInstance().getVirAttrs().addAll(virAttrs);\n+            return this;\n+        }\n     }\n \n     private String group;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/MembershipPatch.java"},{"sha":"02558809cf9a0cc5acad124a501dbb0000fb0c19","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/PasswordPatch.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FPasswordPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FPasswordPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FPasswordPatch.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n@@ -33,7 +33,7 @@\n \n @XmlRootElement(name = \"passwordPatch\")\n @XmlType\n-@XmlSeeAlso({ AssociationPatch.class, StatusPatch.class })\n+@XmlSeeAlso({ ResourceAR.class, StatusR.class })\n public class PasswordPatch extends StringReplacePatchItem {\n \n     private static final long serialVersionUID = 961023537479513071L;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/PasswordPatch.java"},{"sha":"e777de7d81dc7d8721b0694ca687c149ea660ade","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/RelationshipPatch.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FRelationshipPatch.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/RelationshipPatch.java"},{"sha":"052bab0987c0ba5ad27017f7c5ff944cb5034435","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/ResourceAR.java","status":"renamed","additions":13,"deletions":10,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceAR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceAR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceAR.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import java.util.Collection;\n import javax.ws.rs.PathParam;\n@@ -26,27 +26,30 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n \n-@XmlRootElement(name = \"associationPatch\")\n+/**\n+ * Resource Association Request.\n+ */\n+@XmlRootElement(name = \"resourceAR\")\n @XmlType\n-public class AssociationPatch extends PasswordPatch {\n+public class ResourceAR extends PasswordPatch {\n \n     private static final long serialVersionUID = 6295778399633883767L;\n \n     public static class Builder extends PasswordPatch.Builder {\n \n         @Override\n-        protected AssociationPatch newInstance() {\n-            return new AssociationPatch();\n+        protected ResourceAR newInstance() {\n+            return new ResourceAR();\n         }\n \n         @Override\n-        protected AssociationPatch getInstance() {\n-            return (AssociationPatch) super.getInstance();\n+        protected ResourceAR getInstance() {\n+            return (ResourceAR) super.getInstance();\n         }\n \n         @Override\n-        public AssociationPatch build() {\n-            return (AssociationPatch) super.build();\n+        public ResourceAR build() {\n+            return (ResourceAR) super.build();\n         }\n \n         @Override\n@@ -127,7 +130,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final AssociationPatch other = (AssociationPatch) obj;\n+        final ResourceAR other = (ResourceAR) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(key, other.key).","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AssociationPatch.java"},{"sha":"af7fb3bc80e4c0312a31ab6dd61de5e32ba1e790","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/ResourceDR.java","status":"renamed","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceDR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceDR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FResourceDR.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.io.Serializable;\n@@ -31,18 +31,21 @@\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n \n-@XmlRootElement(name = \"deassociationPatch\")\n+/**\n+ * Resource De-association Request.\n+ */\n+@XmlRootElement(name = \"resourceDR\")\n @XmlType\n-public class DeassociationPatch implements Serializable {\n+public class ResourceDR implements Serializable {\n \n     private static final long serialVersionUID = 6295778399633883767L;\n \n     public static class Builder {\n \n-        private final DeassociationPatch instance;\n+        private final ResourceDR instance;\n \n         public Builder() {\n-            this.instance = new DeassociationPatch();\n+            this.instance = new ResourceDR();\n         }\n \n         public Builder key(final String key) {\n@@ -74,7 +77,7 @@ public Builder resources(final Collection<String> resources) {\n             return this;\n         }\n \n-        public DeassociationPatch build() {\n+        public ResourceDR build() {\n             return instance;\n         }\n     }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/DeassociationPatch.java"},{"sha":"f4c7acf7b54bbc8566d9fd07be58b1e26217f16f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/StatusR.java","status":"renamed","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStatusR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStatusR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStatusR.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,37 +16,37 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import java.util.Collection;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.StatusRType;\n \n-@XmlRootElement(name = \"statusPatch\")\n+@XmlRootElement(name = \"statusR\")\n @XmlType\n-public class StatusPatch extends PasswordPatch {\n+public class StatusR extends PasswordPatch {\n \n     private static final long serialVersionUID = 99309988426922612L;\n \n     public static class Builder extends PasswordPatch.Builder {\n \n         @Override\n-        protected StatusPatch newInstance() {\n-            return new StatusPatch();\n+        protected StatusR newInstance() {\n+            return new StatusR();\n         }\n \n         @Override\n-        protected StatusPatch getInstance() {\n-            return (StatusPatch) super.getInstance();\n+        protected StatusR getInstance() {\n+            return (StatusR) super.getInstance();\n         }\n \n         @Override\n-        public StatusPatch build() {\n-            return (StatusPatch) super.build();\n+        public StatusR build() {\n+            return (StatusR) super.build();\n         }\n \n         @Override\n@@ -74,7 +74,7 @@ public Builder key(final String key) {\n             return this;\n         }\n \n-        public Builder type(final StatusPatchType type) {\n+        public Builder type(final StatusRType type) {\n             getInstance().setType(type);\n             return this;\n         }\n@@ -90,7 +90,7 @@ public Builder token(final String token) {\n      */\n     private String key;\n \n-    private StatusPatchType type;\n+    private StatusRType type;\n \n     /**\n      * Update token (if required).\n@@ -106,11 +106,11 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public StatusPatchType getType() {\n+    public StatusRType getType() {\n         return type;\n     }\n \n-    public void setType(final StatusPatchType type) {\n+    public void setType(final StatusRType type) {\n         this.type = type;\n     }\n \n@@ -143,7 +143,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final StatusPatch other = (StatusPatch) obj;\n+        final StatusR other = (StatusR) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(key, other.key).","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/StatusPatch.java"},{"sha":"98494a7eabfcf0b5a3fed0ecf26227452c05146a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/StringPatchItem.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStringPatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStringPatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStringPatchItem.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/StringPatchItem.java"},{"sha":"9a60b9ce29283b7f3b89ff77877ce2c2584e9937","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/StringReplacePatchItem.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStringReplacePatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStringReplacePatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FStringReplacePatchItem.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/StringReplacePatchItem.java"},{"sha":"abe50cb1a26534c9d6905c7022996e118b46c48e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/UserUR.java","status":"renamed","additions":86,"deletions":6,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -16,10 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n@@ -29,13 +31,91 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n-@XmlRootElement(name = \"userPatch\")\n+@XmlRootElement(name = \"userUR\")\n @XmlType\n-@Schema(allOf = { AnyPatch.class })\n-public class UserPatch extends AnyPatch {\n+@Schema(allOf = { AnyUR.class })\n+public class UserUR extends AnyUR {\n \n     private static final long serialVersionUID = 2872795537911821448L;\n \n+    public static class Builder extends AnyUR.Builder<UserUR, Builder> {\n+\n+        @Override\n+        protected UserUR newInstance() {\n+            return new UserUR();\n+        }\n+\n+        public Builder username(final StringReplacePatchItem username) {\n+            getInstance().setUsername(username);\n+            return this;\n+        }\n+\n+        public Builder password(final PasswordPatch password) {\n+            getInstance().setPassword(password);\n+            return this;\n+        }\n+\n+        public Builder securityQuestion(final StringReplacePatchItem securityQuestion) {\n+            getInstance().setSecurityQuestion(securityQuestion);\n+            return this;\n+        }\n+\n+        public Builder securityAnswer(final StringReplacePatchItem securityAnswer) {\n+            getInstance().setSecurityAnswer(securityAnswer);\n+            return this;\n+        }\n+\n+        public Builder mustChangePassword(final BooleanReplacePatchItem mustChangePassword) {\n+            getInstance().setMustChangePassword(mustChangePassword);\n+            return this;\n+        }\n+\n+        public Builder relationship(final RelationshipPatch relationship) {\n+            getInstance().getRelationships().add(relationship);\n+            return this;\n+        }\n+\n+        public Builder relationships(final RelationshipPatch... relationships) {\n+            getInstance().getRelationships().addAll(Arrays.asList(relationships));\n+            return this;\n+        }\n+\n+        public Builder relationships(final Collection<RelationshipPatch> relationships) {\n+            getInstance().getRelationships().addAll(relationships);\n+            return this;\n+        }\n+\n+        public Builder membership(final MembershipPatch membership) {\n+            getInstance().getMemberships().add(membership);\n+            return this;\n+        }\n+\n+        public Builder memberships(final MembershipPatch... memberships) {\n+            getInstance().getMemberships().addAll(Arrays.asList(memberships));\n+            return this;\n+        }\n+\n+        public Builder memberships(final Collection<MembershipPatch> memberships) {\n+            getInstance().getMemberships().addAll(memberships);\n+            return this;\n+        }\n+\n+        public Builder role(final StringPatchItem role) {\n+            getInstance().getRoles().add(role);\n+            return this;\n+        }\n+\n+        public Builder roles(final StringPatchItem... roles) {\n+            getInstance().getRoles().addAll(Arrays.asList(roles));\n+            return this;\n+        }\n+\n+        public Builder roles(final Collection<StringPatchItem> roles) {\n+            getInstance().getRoles().addAll(roles);\n+            return this;\n+        }\n+    }\n+\n     private StringReplacePatchItem username;\n \n     private PasswordPatch password;\n@@ -53,7 +133,7 @@ public class UserPatch extends AnyPatch {\n     private final Set<StringPatchItem> roles = new HashSet<>();\n \n     @JsonProperty(\"@class\")\n-    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.patch.UserPatch\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.UserUR\")\n     @Override\n     public String getDiscriminator() {\n         return getClass().getName();\n@@ -153,7 +233,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final UserPatch other = (UserPatch) obj;\n+        final UserUR other = (UserUR) obj;\n         return new EqualsBuilder().\n                 appendSuper(super.equals(obj)).\n                 append(username, other.username).","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/UserPatch.java"},{"sha":"ea81a3aba6673d279114187d6bfef9f0b1e55263","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/request/package-info.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2Fpackage-info.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,7 +20,7 @@\n         namespace = SyncopeConstants.NS,\n         xmlns = { @XmlNs(prefix = SyncopeConstants.NS_PREFIX,\n                     namespaceURI = SyncopeConstants.NS) })\n-package org.apache.syncope.common.lib.patch;\n+package org.apache.syncope.common.lib.request;\n \n import javax.xml.bind.annotation.XmlNs;\n import javax.xml.bind.annotation.XmlSchema;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/package-info.java"},{"sha":"e27ecb0a5083601b8a6eb5e226c123bfa28452f4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RemediationTO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRemediationTO.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -24,7 +24,7 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.BaseBean;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n \n @XmlRootElement(name = \"remediation\")\n@@ -41,7 +41,7 @@ public class RemediationTO extends BaseBean implements EntityTO {\n \n     private AnyTO anyTOPayload;\n \n-    private AnyPatch anyPatchPayload;\n+    private AnyUR anyURPayload;\n \n     private String keyPayload;\n \n@@ -94,12 +94,12 @@ public void setAnyTOPayload(final AnyTO anyTOPayload) {\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n-    public AnyPatch getAnyPatchPayload() {\n-        return anyPatchPayload;\n+    public AnyUR getAnyURPayload() {\n+        return anyURPayload;\n     }\n \n-    public void setAnyPatchPayload(final AnyPatch anyPatchPayload) {\n-        this.anyPatchPayload = anyPatchPayload;\n+    public void setAnyURPayload(final AnyUR anyURPayload) {\n+        this.anyURPayload = anyURPayload;\n     }\n \n     @Schema(accessMode = Schema.AccessMode.READ_ONLY)"},{"sha":"281a72e4b14f5c748e82a83b423b5ef463a8ddf2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AnyTypeKind.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -19,10 +19,10 @@\n package org.apache.syncope.common.lib.types;\n \n import javax.xml.bind.annotation.XmlEnum;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -31,25 +31,25 @@\n @XmlEnum\n public enum AnyTypeKind {\n \n-    USER(UserTO.class, UserPatch.class),\n-    GROUP(GroupTO.class, GroupPatch.class),\n-    ANY_OBJECT(AnyObjectTO.class, AnyObjectPatch.class);\n+    USER(UserTO.class, UserUR.class),\n+    GROUP(GroupTO.class, GroupUR.class),\n+    ANY_OBJECT(AnyObjectTO.class, AnyObjectUR.class);\n \n     private final Class<? extends AnyTO> toClass;\n \n-    private final Class<? extends AnyPatch> patchClass;\n+    private final Class<? extends AnyUR> reqClass;\n \n-    AnyTypeKind(final Class<? extends AnyTO> toClass, final Class<? extends AnyPatch> patchClass) {\n+    AnyTypeKind(final Class<? extends AnyTO> toClass, final Class<? extends AnyUR> reqClass) {\n         this.toClass = toClass;\n-        this.patchClass = patchClass;\n+        this.reqClass = reqClass;\n     }\n \n     public Class<? extends AnyTO> getTOClass() {\n         return toClass;\n     }\n \n-    public Class<? extends AnyPatch> getPatchClass() {\n-        return patchClass;\n+    public Class<? extends AnyUR> getURClass() {\n+        return reqClass;\n     }\n \n     public static AnyTypeKind fromTOClass(final Class<? extends AnyTO> clazz) {"},{"sha":"1731ec70e66977b43cd9907d88f5593dcbbaf800","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StatusRType.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStatusRType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStatusRType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStatusRType.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -21,7 +21,7 @@\n import javax.xml.bind.annotation.XmlEnum;\n \n @XmlEnum\n-public enum StatusPatchType {\n+public enum StatusRType {\n \n     ACTIVATE,\n     SUSPEND,","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StatusPatchType.java"},{"sha":"41393d46487a0de660dd366a54acfbf5038a3c75","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/AnyOperationsTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperationsTest.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,8 +20,8 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n@@ -41,7 +41,7 @@ public void mindiff() {\n         newOne.getPlainAttrs().add(new AttrTO.Builder().schema(\"plain\").value(\"newValue\").build());\n         newOne.getPlainAttrs().add(new AttrTO.Builder().schema(\"encrypted\").value(\"oldValue\").build());\n \n-        AnyObjectPatch diff = AnyOperations.diff(newOne, oldOne, true);\n+        AnyObjectUR diff = AnyOperations.diff(newOne, oldOne, true);\n         assertEquals(1, diff.getPlainAttrs().size());\n \n         AttrPatch patch = diff.getPlainAttrs().iterator().next();"},{"sha":"a63d558af6ada49826878a37e3ed0293797f7a66","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JAXBTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -30,7 +30,7 @@\n import javax.xml.bind.Unmarshaller;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -45,10 +45,10 @@ public class JAXBTest {\n     @Test\n     public void marshal() {\n         try {\n-            JAXBContext context = JAXBContext.newInstance(UserTO.class, UserPatch.class, UserReportletConf.class);\n+            JAXBContext context = JAXBContext.newInstance(UserTO.class, UserUR.class, UserReportletConf.class);\n             Marshaller marshaller = context.createMarshaller();\n             marshaller.marshal(new UserTO(), new StringWriter());\n-            marshaller.marshal(new UserPatch(), new StringWriter());\n+            marshaller.marshal(new UserUR(), new StringWriter());\n         } catch (JAXBException e) {\n             fail(ExceptionUtils.getStackTrace(e));\n         }"},{"sha":"7ef5c241d1e05e64594cd103f1c5b9ff9e7f514d","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -26,11 +26,11 @@\n import java.io.IOException;\n import java.io.StringWriter;\n import java.util.UUID;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -43,7 +43,7 @@ public class JSONTest {\n \n     @Test\n     public void map() throws IOException {\n-        GroupPatch prop = new GroupPatch();\n+        GroupUR prop = new GroupUR();\n         prop.getADynMembershipConds().put(\"key1\", \"value1\");\n         prop.getADynMembershipConds().put(\"key2\", \"value2\");\n \n@@ -52,31 +52,31 @@ public void map() throws IOException {\n         StringWriter writer = new StringWriter();\n         mapper.writeValue(writer, prop);\n \n-        GroupPatch unserializedProp = mapper.readValue(writer.toString(), GroupPatch.class);\n+        GroupUR unserializedProp = mapper.readValue(writer.toString(), GroupUR.class);\n         assertEquals(prop, unserializedProp);\n     }\n \n     @Test\n     public void patch() throws IOException {\n-        UserPatch patch = new UserPatch();\n-        patch.setKey(UUID.randomUUID().toString());\n-        patch.setUsername(new StringReplacePatchItem.Builder().value(\"newusername\").build());\n-        assertNotNull(patch.getUsername().getValue());\n-        patch.setPassword(new PasswordPatch.Builder().\n+        UserUR req = new UserUR();\n+        req.setKey(UUID.randomUUID().toString());\n+        req.setUsername(new StringReplacePatchItem.Builder().value(\"newusername\").build());\n+        assertNotNull(req.getUsername().getValue());\n+        req.setPassword(new PasswordPatch.Builder().\n                 onSyncope(false).\n                 resource(\"ext1\").resource(\"ext2\").\n                 value(\"newpassword\").\n                 build());\n-        assertNotNull(patch.getPassword().getValue());\n-        patch.getRoles().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(\"role\").build());\n+        assertNotNull(req.getPassword().getValue());\n+        req.getRoles().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(\"role\").build());\n \n         ObjectMapper mapper = new ObjectMapper();\n \n         StringWriter writer = new StringWriter();\n-        mapper.writeValue(writer, patch);\n+        mapper.writeValue(writer, req);\n \n-        UserPatch actual = mapper.readValue(writer.toString(), UserPatch.class);\n-        assertEquals(patch, actual);\n+        UserUR actual = mapper.readValue(writer.toString(), UserUR.class);\n+        assertEquals(req, actual);\n     }\n \n     @Test"},{"sha":"4a2878719aef701003bc82c2f65d55ac7510afad","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java","status":"modified","additions":3,"deletions":47,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -32,13 +32,12 @@\n import javax.ws.rs.Consumes;\n import javax.ws.rs.PATCH;\n import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -111,7 +110,7 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n     /**\n      * Updates any object matching the provided key.\n      *\n-     * @param anyObjectPatch modification to be applied to any object matching the provided key\n+     * @param updateReq modification to be applied to any object matching the provided key\n      * @return Response object featuring the updated any object enriched with propagation status information\n      */\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n@@ -149,48 +148,5 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response update(@NotNull AnyObjectPatch anyObjectPatch);\n-\n-    /**\n-     * Updates any object matching the provided key.\n-     *\n-     * @param anyObjectTO complete update\n-     * @return Response object featuring the updated any object enriched with propagation status information\n-     */\n-    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n-            description = \"Allows client to specify a preference for the result to be returned from the server\",\n-            allowEmptyValue = true, schema =\n-            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n-    @Parameter(name = HttpHeaders.IF_MATCH, in = ParameterIn.HEADER,\n-            description = \"When the provided ETag value does not match the latest modification date of the entity, \"\n-            + \"an error is reported and the requested operation is not performed.\",\n-            allowEmptyValue = true, schema =\n-            @Schema(type = \"string\"))\n-    @Parameter(name = RESTHeaders.NULL_PRIORITY_ASYNC, in = ParameterIn.HEADER,\n-            description = \"If 'true', instructs the propagation process not to wait for completion when communicating\"\n-            + \" with External Resources with no priority set\",\n-            allowEmptyValue = true, schema =\n-            @Schema(type = \"boolean\", defaultValue = \"false\"))\n-    @Parameter(name = \"key\", description = \"Any Object's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"200\",\n-                description = \"Any object successfully updated enriched with propagation status information, as Entity\",\n-                content =\n-                @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class))),\n-        @ApiResponse(responseCode = \"204\",\n-                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n-                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n-                        @Schema(type = \"string\"),\n-                        description = \"Allows the server to inform the \"\n-                        + \"client about the fact that a specified preference was applied\")),\n-        @ApiResponse(responseCode = \"412\",\n-                description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n-                + \" date of the entity\") })\n-    @PUT\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response update(@NotNull AnyObjectTO anyObjectTO);\n+    Response update(@NotNull AnyObjectUR updateReq);\n }"},{"sha":"53f51ef90c8222a790a6964db10721d126a32adb","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -40,8 +40,8 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.AssociationPatch;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.request.ResourceAR;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -190,7 +190,7 @@ void delete(\n     /**\n      * Executes resource-related operations on given entity.\n      *\n-     * @param patch external resources to be used for propagation-related operations\n+     * @param req external resources to be used for propagation-related operations\n      * @return batch results as Response entity\n      */\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n@@ -227,12 +227,12 @@ void delete(\n     @Path(\"{key}/deassociate/{action}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces(RESTHeaders.MULTIPART_MIXED)\n-    Response deassociate(@NotNull DeassociationPatch patch);\n+    Response deassociate(@NotNull ResourceDR req);\n \n     /**\n      * Executes resource-related operations on given entity.\n      *\n-     * @param patch external resources to be used for propagation-related operations\n+     * @param req external resources to be used for propagation-related operations\n      * @return batch results as Response entity\n      */\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n@@ -269,5 +269,5 @@ void delete(\n     @Path(\"{key}/associate/{action}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces(RESTHeaders.MULTIPART_MIXED)\n-    Response associate(@NotNull AssociationPatch patch);\n+    Response associate(@NotNull ResourceAR req);\n }"},{"sha":"21aee3cb8d266fec2895bfec31c0b663c114e7a8","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":3,"deletions":47,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -34,14 +34,13 @@\n import javax.ws.rs.GET;\n import javax.ws.rs.PATCH;\n import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -115,7 +114,7 @@ public interface GroupService extends AnyService<GroupTO> {\n     /**\n      * Updates group matching the provided key.\n      *\n-     * @param groupPatch modification to be applied to group matching the provided key\n+     * @param updateReq modification to be applied to group matching the provided key\n      * @return Response object featuring the updated group enriched with propagation status information\n      */\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n@@ -153,50 +152,7 @@ public interface GroupService extends AnyService<GroupTO> {\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response update(@NotNull GroupPatch groupPatch);\n-\n-    /**\n-     * Updates group matching the provided key.\n-     *\n-     * @param groupTO complete update\n-     * @return Response object featuring the updated group enriched with propagation status information\n-     */\n-    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n-            description = \"Allows client to specify a preference for the result to be returned from the server\",\n-            allowEmptyValue = true, schema =\n-            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n-    @Parameter(name = HttpHeaders.IF_MATCH, in = ParameterIn.HEADER,\n-            description = \"When the provided ETag value does not match the latest modification date of the entity, \"\n-            + \"an error is reported and the requested operation is not performed.\",\n-            allowEmptyValue = true, schema =\n-            @Schema(type = \"string\"))\n-    @Parameter(name = RESTHeaders.NULL_PRIORITY_ASYNC, in = ParameterIn.HEADER,\n-            description = \"If 'true', instructs the propagation process not to wait for completion when communicating\"\n-            + \" with External Resources with no priority set\",\n-            allowEmptyValue = true, schema =\n-            @Schema(type = \"boolean\", defaultValue = \"false\"))\n-    @Parameter(name = \"key\", description = \"Group's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"200\",\n-                description = \"Group successfully updated enriched with propagation status information, as Entity\",\n-                content =\n-                @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class))),\n-        @ApiResponse(responseCode = \"204\",\n-                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n-                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n-                        @Schema(type = \"string\"),\n-                        description = \"Allows the server to inform the \"\n-                        + \"client about the fact that a specified preference was applied\")),\n-        @ApiResponse(responseCode = \"412\",\n-                description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n-                + \" date of the entity\") })\n-    @PUT\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response update(@NotNull GroupTO groupTO);\n+    Response update(@NotNull GroupUR updateReq);\n \n     /**\n      * This method allows a user to read his own groups."},{"sha":"f3c4e8426e99aa82843acee5f7a89bc3186a24fe","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RemediationService.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRemediationService.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -41,7 +41,7 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -137,7 +137,7 @@ public interface RemediationService extends JAXRSService {\n      * Perform remediation by updating the provided user, group or any object.\n      *\n      * @param remediationKey key for remediation to act on\n-     * @param anyPatch user, group or any object to update\n+     * @param updateReq user, group or any object to update\n      * @return Response object featuring the updated object enriched with propagation status information\n      */\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n@@ -175,7 +175,7 @@ public interface RemediationService extends JAXRSService {\n     @Path(\"{remediationKey}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response remedy(@NotNull @PathParam(\"remediationKey\") String remediationKey, @NotNull AnyPatch anyPatch);\n+    Response remedy(@NotNull @PathParam(\"remediationKey\") String remediationKey, @NotNull AnyUR updateReq);\n \n     /**\n      * Perform remediation by deleting the provided user, group or any object."},{"sha":"e278f70b5f40f3f48d73219749d6c6d46007fe7e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -42,8 +42,8 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -117,7 +117,7 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-updates user.\n      *\n-     * @param patch modification to be applied to self\n+     * @param updateReq modification to be applied to self\n      * @return Response object featuring the updated user\n      */\n     @Operation(security = {\n@@ -145,7 +145,7 @@ Response create(@NotNull UserTO userTO,\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response update(@NotNull UserPatch patch);\n+    Response update(@NotNull UserUR updateReq);\n \n     /**\n      * Self-updates user.\n@@ -183,7 +183,7 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-perform a status update.\n      *\n-     * @param statusPatch status update details\n+     * @param statusR status update details\n      * @return Response object featuring the updated user enriched with propagation status information\n      */\n     @Operation(security = {\n@@ -211,7 +211,7 @@ Response create(@NotNull UserTO userTO,\n     @Path(\"{key}/status\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response status(@NotNull StatusPatch statusPatch);\n+    Response status(@NotNull StatusR statusR);\n \n     /**\n      * Self-deletes user."},{"sha":"e54c181c4ee053866a6450b21032c907c61877e4","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":6,"deletions":51,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -33,15 +33,14 @@\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.PATCH;\n import javax.ws.rs.POST;\n-import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -116,7 +115,7 @@ Response create(\n     /**\n      * Updates user matching the provided key.\n      *\n-     * @param userPatch modification to be applied to user matching the provided key\n+     * @param updateReq modification to be applied to user matching the provided key\n      * @return Response object featuring the updated user enriched with propagation status information\n      */\n     @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n@@ -154,56 +153,12 @@ Response create(\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response update(@NotNull UserPatch userPatch);\n-\n-    /**\n-     * Updates user matching the provided key.\n-     *\n-     * @param userTO complete update\n-     * @return Response object featuring the updated user enriched with propagation status information\n-     */\n-    @Parameter(\n-            name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n-            description = \"Allows client to specify a preference for the result to be returned from the server\",\n-            allowEmptyValue = true, schema =\n-            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n-    @Parameter(name = HttpHeaders.IF_MATCH, in = ParameterIn.HEADER,\n-            description = \"When the provided ETag value does not match the latest modification date of the entity, \"\n-            + \"an error is reported and the requested operation is not performed.\",\n-            allowEmptyValue = true, schema =\n-            @Schema(type = \"string\"))\n-    @Parameter(name = RESTHeaders.NULL_PRIORITY_ASYNC, in = ParameterIn.HEADER,\n-            description = \"If 'true', instructs the propagation process not to wait for completion when communicating\"\n-            + \" with External Resources with no priority set\",\n-            allowEmptyValue = true, schema =\n-            @Schema(type = \"boolean\", defaultValue = \"false\"))\n-    @Parameter(name = \"key\", description = \"User's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses({\n-        @ApiResponse(responseCode = \"200\",\n-                description = \"User successfully updated enriched with propagation status information, as Entity\",\n-                content =\n-                @Content(schema =\n-                        @Schema(implementation = ProvisioningResult.class))),\n-        @ApiResponse(responseCode = \"204\",\n-                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n-                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n-                        @Schema(type = \"string\"),\n-                        description = \"Allows the server to inform the \"\n-                        + \"client about the fact that a specified preference was applied\")),\n-        @ApiResponse(responseCode = \"412\",\n-                description = \"The ETag value provided via the 'If-Match' header does not match the latest modification\"\n-                + \" date of the entity\") })\n-    @PUT\n-    @Path(\"{key}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response update(@NotNull UserTO userTO);\n+    Response update(@NotNull UserUR updateReq);\n \n     /**\n      * Performs a status update on given user.\n      *\n-     * @param statusPatch status update details\n+     * @param updateReq status update details\n      * @return Response object featuring the updated user enriched with propagation status information\n      */\n     @Parameter(\n@@ -242,5 +197,5 @@ Response create(\n     @Path(\"{key}/status\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response status(@NotNull StatusPatch statusPatch);\n+    Response status(@NotNull StatusR updateReq);\n }"},{"sha":"31329a60cad9cb011134d6bcf7262cc16f4166f3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -50,7 +50,7 @@\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch> extends AbstractResourceAssociator<TO> {\n+public abstract class AbstractAnyLogic<TO extends AnyTO, R extends AnyUR> extends AbstractResourceAssociator<TO> {\n \n     @Autowired\n     protected UserDAO userDAO;\n@@ -117,15 +117,15 @@ protected Pair<TO, List<LogicActions>> beforeCreate(final TO input) {\n         return ImmutablePair.of(any, actions);\n     }\n \n-    protected Pair<P, List<LogicActions>> beforeUpdate(final P input, final String realmPath) {\n+    protected Pair<R, List<LogicActions>> beforeUpdate(final R input, final String realmPath) {\n         Realm realm = realmDAO.findByFullPath(realmPath);\n         if (realm == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n             sce.getElements().add(realmPath);\n             throw sce;\n         }\n \n-        P mod = input;\n+        R mod = input;\n \n         List<LogicActions> actions = getActions(realm);\n         for (LogicActions action : actions) {\n@@ -253,7 +253,7 @@ public abstract Pair<Integer, List<TO>> search(\n             String realm,\n             boolean details);\n \n-    public abstract ProvisioningResult<TO> update(P anyPatch, boolean nullPriorityAsync);\n+    public abstract ProvisioningResult<TO> update(R updateReq, boolean nullPriorityAsync);\n \n     public abstract ProvisioningResult<TO> delete(String key, boolean nullPriorityAsync);\n }"},{"sha":"5ed80cf88d22e2f6d072dc28d31f2d4b10567dbf","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,8 +28,8 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -56,7 +56,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> {\n+public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectUR> {\n \n     @Autowired\n     protected AnySearchDAO searchDAO;\n@@ -121,11 +121,11 @@ public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO, fin\n \n     @Override\n     public ProvisioningResult<AnyObjectTO> update(\n-            final AnyObjectPatch anyObjectPatch, final boolean nullPriorityAsync) {\n+            final AnyObjectUR updateReq, final boolean nullPriorityAsync) {\n \n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(anyObjectPatch.getKey());\n+        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(updateReq.getKey());\n         Set<String> dynRealmsBefore = new HashSet<>(anyObjectTO.getDynRealms());\n-        Pair<AnyObjectPatch, List<LogicActions>> before = beforeUpdate(anyObjectPatch, anyObjectTO.getRealm());\n+        Pair<AnyObjectUR, List<LogicActions>> before = beforeUpdate(updateReq, anyObjectTO.getRealm());\n \n         String realm =\n                 before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())\n@@ -136,8 +136,8 @@ public ProvisioningResult<AnyObjectTO> update(\n                 realm);\n         boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n \n-        Pair<AnyObjectPatch, List<PropagationStatus>> updated =\n-                provisioningManager.update(anyObjectPatch, nullPriorityAsync);\n+        Pair<AnyObjectUR, List<PropagationStatus>> updated =\n+                provisioningManager.update(updateReq, nullPriorityAsync);\n \n         return afterUpdate(\n                 binder.getAnyObjectTO(updated.getLeft().getKey()),\n@@ -174,13 +174,13 @@ public AnyObjectTO unlink(final String key, final Collection<String> resources)\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n \n-        AnyObjectPatch patch = new AnyObjectPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        AnyObjectUR req = new AnyObjectUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n                 collect(Collectors.toList()));\n \n-        return binder.getAnyObjectTO(provisioningManager.unlink(patch));\n+        return binder.getAnyObjectTO(provisioningManager.unlink(req));\n     }\n \n     @Override\n@@ -192,13 +192,13 @@ public AnyObjectTO link(final String key, final Collection<String> resources) {\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n \n-        AnyObjectPatch patch = new AnyObjectPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        AnyObjectUR req = new AnyObjectUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n                 collect(Collectors.toList()));\n \n-        return binder.getAnyObjectTO(provisioningManager.link(patch));\n+        return binder.getAnyObjectTO(provisioningManager.link(req));\n     }\n \n     @Override\n@@ -212,13 +212,13 @@ public ProvisioningResult<AnyObjectTO> unassign(\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n \n-        AnyObjectPatch patch = new AnyObjectPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        AnyObjectUR req = new AnyObjectUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n                 collect(Collectors.toList()));\n \n-        return update(patch, nullPriorityAsync);\n+        return update(req, nullPriorityAsync);\n     }\n \n     @Override\n@@ -236,13 +236,13 @@ public ProvisioningResult<AnyObjectTO> assign(\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n \n-        AnyObjectPatch patch = new AnyObjectPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        AnyObjectUR req = new AnyObjectUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n                 collect(Collectors.toList()));\n \n-        return update(patch, nullPriorityAsync);\n+        return update(req, nullPriorityAsync);\n     }\n \n     @Override\n@@ -299,8 +299,8 @@ protected AnyObjectTO resolveReference(final Method method, final Object... args\n                     key = (String) args[i];\n                 } else if (args[i] instanceof AnyObjectTO) {\n                     key = ((AnyObjectTO) args[i]).getKey();\n-                } else if (args[i] instanceof AnyObjectPatch) {\n-                    key = ((AnyObjectPatch) args[i]).getKey();\n+                } else if (args[i] instanceof AnyObjectUR) {\n+                    key = ((AnyObjectUR) args[i]).getKey();\n                 }\n             }\n         }"},{"sha":"0da1b9d1deae499d031bc819b271b11c580483a9","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":33,"deletions":34,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -33,8 +33,8 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -81,7 +81,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n+public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupUR> {\n \n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n@@ -193,10 +193,10 @@ public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean n\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n-    public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boolean nullPriorityAsync) {\n-        GroupTO groupTO = binder.getGroupTO(groupPatch.getKey());\n+    public ProvisioningResult<GroupTO> update(final GroupUR req, final boolean nullPriorityAsync) {\n+        GroupTO groupTO = binder.getGroupTO(req.getKey());\n         Set<String> dynRealmsBefore = new HashSet<>(groupTO.getDynRealms());\n-        Pair<GroupPatch, List<LogicActions>> before = beforeUpdate(groupPatch, groupTO.getRealm());\n+        Pair<GroupUR, List<LogicActions>> before = beforeUpdate(req, groupTO.getRealm());\n \n         String realm =\n                 before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())\n@@ -207,8 +207,7 @@ public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boo\n                 realm);\n         boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n \n-        Pair<GroupPatch, List<PropagationStatus>> updated =\n-                provisioningManager.update(groupPatch, nullPriorityAsync);\n+        Pair<GroupUR, List<PropagationStatus>> updated = provisioningManager.update(req, nullPriorityAsync);\n \n         return afterUpdate(\n                 binder.getGroupTO(updated.getLeft().getKey()),\n@@ -255,15 +254,15 @@ public GroupTO unlink(final String key, final Collection<String> resources) {\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().\n+        GroupUR req = new GroupUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().\n                 map(resource -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n                 collect(Collectors.toList()));\n-        patch.setUDynMembershipCond(group.getUDynMembershipCond());\n-        patch.getADynMembershipConds().putAll(group.getADynMembershipConds());\n+        req.setUDynMembershipCond(group.getUDynMembershipCond());\n+        req.getADynMembershipConds().putAll(group.getADynMembershipConds());\n \n-        return binder.getGroupTO(provisioningManager.unlink(patch));\n+        return binder.getGroupTO(provisioningManager.unlink(req));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n@@ -276,15 +275,15 @@ public GroupTO link(final String key, final Collection<String> resources) {\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        GroupUR req = new GroupUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n                 collect(Collectors.toList()));\n-        patch.getADynMembershipConds().putAll(group.getADynMembershipConds());\n-        patch.setUDynMembershipCond(group.getUDynMembershipCond());\n+        req.getADynMembershipConds().putAll(group.getADynMembershipConds());\n+        req.setUDynMembershipCond(group.getUDynMembershipCond());\n \n-        return binder.getGroupTO(provisioningManager.link(patch));\n+        return binder.getGroupTO(provisioningManager.link(req));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n@@ -299,15 +298,15 @@ public ProvisioningResult<GroupTO> unassign(\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        GroupUR req = new GroupUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n                 collect(Collectors.toList()));\n-        patch.getADynMembershipConds().putAll(group.getADynMembershipConds());\n-        patch.setUDynMembershipCond(group.getUDynMembershipCond());\n+        req.getADynMembershipConds().putAll(group.getADynMembershipConds());\n+        req.setUDynMembershipCond(group.getUDynMembershipCond());\n \n-        return update(patch, nullPriorityAsync);\n+        return update(req, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n@@ -326,15 +325,15 @@ public ProvisioningResult<GroupTO> assign(\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        GroupUR req = new GroupUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n                 collect(Collectors.toList()));\n-        patch.getADynMembershipConds().putAll(group.getADynMembershipConds());\n-        patch.setUDynMembershipCond(group.getUDynMembershipCond());\n+        req.getADynMembershipConds().putAll(group.getADynMembershipConds());\n+        req.setUDynMembershipCond(group.getUDynMembershipCond());\n \n-        return update(patch, nullPriorityAsync);\n+        return update(req, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_UPDATE + \"')\")\n@@ -451,8 +450,8 @@ protected GroupTO resolveReference(final Method method, final Object... args) th\n                     key = (String) args[i];\n                 } else if (args[i] instanceof GroupTO) {\n                     key = ((GroupTO) args[i]).getKey();\n-                } else if (args[i] instanceof GroupPatch) {\n-                    key = ((GroupPatch) args[i]).getKey();\n+                } else if (args[i] instanceof GroupUR) {\n+                    key = ((GroupUR) args[i]).getKey();\n                 }\n             }\n         }"},{"sha":"57576651044dfa9b653f2e15d4dc2343691cabf7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/RemediationLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRemediationLogic.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -24,10 +24,10 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -133,7 +133,7 @@ public ProvisioningResult<?> remedy(final String key, final AnyTO anyTO, final b\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REMEDIATION_REMEDY + \"')\")\n-    public ProvisioningResult<?> remedy(final String key, final AnyPatch anyPatch, final boolean nullPriorityAsync) {\n+    public ProvisioningResult<?> remedy(final String key, final AnyUR anyUR, final boolean nullPriorityAsync) {\n         Remediation remediation = remediationDAO.find(key);\n         if (remediation == null) {\n             LOG.error(\"Could not find remediation '\" + key + \"'\");\n@@ -145,15 +145,15 @@ public ProvisioningResult<?> remedy(final String key, final AnyPatch anyPatch, f\n         switch (remediation.getAnyType().getKind()) {\n             case USER:\n             default:\n-                result = userLogic.update((UserPatch) anyPatch, nullPriorityAsync);\n+                result = userLogic.update((UserUR) anyUR, nullPriorityAsync);\n                 break;\n \n             case GROUP:\n-                result = groupLogic.update((GroupPatch) anyPatch, nullPriorityAsync);\n+                result = groupLogic.update((GroupUR) anyUR, nullPriorityAsync);\n                 break;\n \n             case ANY_OBJECT:\n-                result = anyObjectLogic.update((AnyObjectPatch) anyPatch, nullPriorityAsync);\n+                result = anyObjectLogic.update((AnyObjectUR) anyUR, nullPriorityAsync);\n         }\n \n         remediationDAO.delete(remediation);"},{"sha":"e970b100f78ef29cf3f66db612bc0382bf128719","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -29,11 +29,11 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -65,7 +65,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n+public class UserLogic extends AbstractAnyLogic<UserTO, UserUR> {\n \n     @Autowired\n     protected AnySearchDAO searchDAO;\n@@ -167,10 +167,10 @@ protected ProvisioningResult<UserTO> doCreate(\n     @PreAuthorize(\"isAuthenticated() \"\n             + \"and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"')) \"\n             + \"and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n-    public ProvisioningResult<UserTO> selfUpdate(final UserPatch userPatch, final boolean nullPriorityAsync) {\n+    public ProvisioningResult<UserTO> selfUpdate(final UserUR userUR, final boolean nullPriorityAsync) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n-        userPatch.setKey(userTO.getKey());\n-        ProvisioningResult<UserTO> updated = doUpdate(userPatch, true, nullPriorityAsync);\n+        userUR.setKey(userTO.getKey());\n+        ProvisioningResult<UserTO> updated = doUpdate(userUR, true, nullPriorityAsync);\n \n         // Ensures that, if the self update above moves the user into a status from which no authentication\n         // is possible, the existing Access Token is clean up to avoid issues with future authentications\n@@ -186,16 +186,16 @@ public ProvisioningResult<UserTO> selfUpdate(final UserPatch userPatch, final bo\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n     @Override\n-    public ProvisioningResult<UserTO> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n-        return doUpdate(userPatch, false, nullPriorityAsync);\n+    public ProvisioningResult<UserTO> update(final UserUR userUR, final boolean nullPriorityAsync) {\n+        return doUpdate(userUR, false, nullPriorityAsync);\n     }\n \n     protected ProvisioningResult<UserTO> doUpdate(\n-            final UserPatch userPatch, final boolean self, final boolean nullPriorityAsync) {\n+            final UserUR userUR, final boolean self, final boolean nullPriorityAsync) {\n \n-        UserTO userTO = binder.getUserTO(userPatch.getKey());\n+        UserTO userTO = binder.getUserTO(userUR.getKey());\n         Set<String> dynRealmsBefore = new HashSet<>(userTO.getDynRealms());\n-        Pair<UserPatch, List<LogicActions>> before = beforeUpdate(userPatch, userTO.getRealm());\n+        Pair<UserUR, List<LogicActions>> before = beforeUpdate(userUR, userTO.getRealm());\n \n         boolean authDynRealms = false;\n         if (!self\n@@ -209,7 +209,7 @@ protected ProvisioningResult<UserTO> doUpdate(\n                     securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n-        Pair<UserPatch, List<PropagationStatus>> updated =\n+        Pair<UserUR, List<PropagationStatus>> updated =\n                 provisioningManager.update(before.getLeft(), nullPriorityAsync);\n \n         return afterUpdate(\n@@ -221,22 +221,22 @@ protected ProvisioningResult<UserTO> doUpdate(\n     }\n \n     protected Pair<String, List<PropagationStatus>> setStatusOnWfAdapter(\n-            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+            final StatusR statusR, final boolean nullPriorityAsync) {\n \n         Pair<String, List<PropagationStatus>> updated;\n \n-        switch (statusPatch.getType()) {\n+        switch (statusR.getType()) {\n             case SUSPEND:\n-                updated = provisioningManager.suspend(statusPatch, nullPriorityAsync);\n+                updated = provisioningManager.suspend(statusR, nullPriorityAsync);\n                 break;\n \n             case REACTIVATE:\n-                updated = provisioningManager.reactivate(statusPatch, nullPriorityAsync);\n+                updated = provisioningManager.reactivate(statusR, nullPriorityAsync);\n                 break;\n \n             case ACTIVATE:\n             default:\n-                updated = provisioningManager.activate(statusPatch, nullPriorityAsync);\n+                updated = provisioningManager.activate(statusR, nullPriorityAsync);\n                 break;\n \n         }\n@@ -245,18 +245,18 @@ protected Pair<String, List<PropagationStatus>> setStatusOnWfAdapter(\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n-    public ProvisioningResult<UserTO> status(final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+    public ProvisioningResult<UserTO> status(final StatusR statusR, final boolean nullPriorityAsync) {\n         // security checks\n-        UserTO toUpdate = binder.getUserTO(statusPatch.getKey());\n+        UserTO toUpdate = binder.getUserTO(statusR.getKey());\n         Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 toUpdate.getRealm());\n         securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n \n-        // ensures the actual user key is effectively on the patch - as the binder.getUserTO(statusPatch.getKey())\n+        // ensures the actual user key is effectively on the request - as the binder.getUserTO(statusR.getKey())\n         // call above works with username as well\n-        statusPatch.setKey(toUpdate.getKey());\n-        Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch, nullPriorityAsync);\n+        statusR.setKey(toUpdate.getKey());\n+        Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusR, nullPriorityAsync);\n \n         return afterUpdate(\n                 binder.returnUserTO(binder.getUserTO(updated.getKey())),\n@@ -267,9 +267,9 @@ public ProvisioningResult<UserTO> status(final StatusPatch statusPatch, final bo\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n-    public ProvisioningResult<UserTO> selfStatus(final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n-        statusPatch.setKey(userDAO.findKey(AuthContextUtils.getUsername()));\n-        Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch, nullPriorityAsync);\n+    public ProvisioningResult<UserTO> selfStatus(final StatusR statusR, final boolean nullPriorityAsync) {\n+        statusR.setKey(userDAO.findKey(AuthContextUtils.getUsername()));\n+        Pair<String, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusR, nullPriorityAsync);\n \n         return afterUpdate(\n                 binder.returnUserTO(binder.getUserTO(updated.getKey())),\n@@ -281,10 +281,10 @@ public ProvisioningResult<UserTO> selfStatus(final StatusPatch statusPatch, fina\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.MUST_CHANGE_PASSWORD + \"')\")\n     public ProvisioningResult<UserTO> mustChangePassword(final String password, final boolean nullPriorityAsync) {\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setPassword(new PasswordPatch.Builder().value(password).build());\n-        userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(false).build());\n-        return selfUpdate(userPatch, nullPriorityAsync);\n+        UserUR userUR = new UserUR();\n+        userUR.setPassword(new PasswordPatch.Builder().value(password).build());\n+        userUR.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(false).build());\n+        return selfUpdate(userUR, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"isAnonymous() or hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n@@ -376,13 +376,13 @@ public UserTO unlink(final String key, final Collection<String> resources) {\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        UserPatch patch = new UserPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        UserUR req = new UserUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n                 collect(Collectors.toList()));\n \n-        return binder.returnUserTO(binder.getUserTO(provisioningManager.unlink(patch)));\n+        return binder.returnUserTO(binder.getUserTO(provisioningManager.unlink(req)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n@@ -395,13 +395,13 @@ public UserTO link(final String key, final Collection<String> resources) {\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        UserPatch patch = new UserPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        UserUR req = new UserUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n                 collect(Collectors.toList()));\n \n-        return binder.returnUserTO(binder.getUserTO(provisioningManager.link(patch)));\n+        return binder.returnUserTO(binder.getUserTO(provisioningManager.link(req)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n@@ -416,13 +416,13 @@ public ProvisioningResult<UserTO> unassign(\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        UserPatch patch = new UserPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        UserUR req = new UserUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n                 collect(Collectors.toList()));\n \n-        return update(patch, nullPriorityAsync);\n+        return update(req, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n@@ -441,18 +441,18 @@ public ProvisioningResult<UserTO> assign(\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        UserPatch patch = new UserPatch();\n-        patch.setKey(key);\n-        patch.getResources().addAll(resources.stream().map(resource\n+        UserUR req = new UserUR();\n+        req.setKey(key);\n+        req.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n                 collect(Collectors.toList()));\n \n         if (changepwd) {\n-            patch.setPassword(new PasswordPatch.Builder().\n+            req.setPassword(new PasswordPatch.Builder().\n                     value(password).onSyncope(false).resources(resources).build());\n         }\n \n-        return update(patch, nullPriorityAsync);\n+        return update(req, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_UPDATE + \"')\")\n@@ -512,10 +512,10 @@ protected UserTO resolveReference(final Method method, final Object... args) thr\n                     key = (String) args[i];\n                 } else if (args[i] instanceof UserTO) {\n                     key = ((UserTO) args[i]).getKey();\n-                } else if (args[i] instanceof UserPatch) {\n-                    key = ((UserPatch) args[i]).getKey();\n-                } else if (args[i] instanceof StatusPatch) {\n-                    key = ((StatusPatch) args[i]).getKey();\n+                } else if (args[i] instanceof UserUR) {\n+                    key = ((UserUR) args[i]).getKey();\n+                } else if (args[i] instanceof StatusR) {\n+                    key = ((StatusR) args[i]).getKey();\n                 }\n             }\n         }"},{"sha":"71033527f5c556799f01abe18913faf910a578de","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,7 +20,7 @@\n \n import java.lang.reflect.Field;\n import java.util.Set;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n@@ -50,7 +50,7 @@ public interface AnyUtils {\n \n     <T extends AnyTO> T newAnyTO();\n \n-    <P extends AnyPatch> P newAnyPatch(String key);\n+    <P extends AnyUR> P newAnyUR(String key);\n \n     <A extends Any<?>> AnyDAO<A> dao();\n "},{"sha":"cbca8ea0d9531f2267b973b8048080dfc13ccb26","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Remediation.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRemediation.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.persistence.api.entity;\n \n import java.util.Date;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n@@ -36,13 +36,13 @@ public interface Remediation extends Entity {\n \n     void setPayload(AnyTO anyTO);\n \n-    void setPayload(AnyPatch anyPatch);\n+    void setPayload(AnyUR anyUR);\n \n     void setPayload(String key);\n \n     <T extends AnyTO> T getPayloadAsTO(Class<T> reference);\n \n-    <P extends AnyPatch> P getPayloadAsPatch(Class<P> reference);\n+    <P extends AnyUR> P getPayloadAsUR(Class<P> reference);\n \n     String getPayloadAsKey();\n "},{"sha":"5914353566a5299299f44fee6aea2a129c7aed84","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -27,10 +27,10 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.ClassUtils;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -308,20 +308,20 @@ public <T extends AnyTO> T newAnyTO() {\n     }\n \n     @Override\n-    public <P extends AnyPatch> P newAnyPatch(final String key) {\n+    public <P extends AnyUR> P newAnyUR(final String key) {\n         P result = null;\n \n         switch (anyTypeKind) {\n             case USER:\n-                result = (P) new UserPatch();\n+                result = (P) new UserUR();\n                 break;\n \n             case GROUP:\n-                result = (P) new GroupPatch();\n+                result = (P) new GroupUR();\n                 break;\n \n             case ANY_OBJECT:\n-                result = (P) new AnyObjectPatch();\n+                result = (P) new AnyObjectUR();\n                 break;\n \n             default:"},{"sha":"87f9c9e888b6bbf6ca33659dd33817d7e76f2faf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARemediation.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARemediation.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,7 +28,7 @@\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -99,7 +99,7 @@ public <T extends AnyTO> T getPayloadAsTO(final Class<T> reference) {\n     }\n \n     @Override\n-    public <P extends AnyPatch> P getPayloadAsPatch(final Class<P> reference) {\n+    public <P extends AnyUR> P getPayloadAsUR(final Class<P> reference) {\n         return POJOHelper.deserialize(this.payload, reference);\n     }\n \n@@ -114,8 +114,8 @@ public void setPayload(final AnyTO anyTO) {\n     }\n \n     @Override\n-    public void setPayload(final AnyPatch anyPatch) {\n-        this.payload = POJOHelper.serialize(anyPatch);\n+    public void setPayload(final AnyUR anyUR) {\n+        this.payload = POJOHelper.serialize(anyUR);\n     }\n \n     @Override"},{"sha":"4a8a468cd5e17625cf219a40e0d98ff5f9c8d81f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RemediationValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRemediationValidator.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -43,11 +43,11 @@ public boolean isValid(final Remediation remediation, final ConstraintValidatorC\n                 break;\n \n             case UPDATE:\n-                if (remediation.getPayloadAsPatch(remediation.getAnyType().getKind().getPatchClass()) == null) {\n+                if (remediation.getPayloadAsUR(remediation.getAnyType().getKind().getURClass()) == null) {\n                     context.disableDefaultConstraintViolation();\n                     context.buildConstraintViolationWithTemplate(\n                             getTemplate(EntityViolationType.InvalidRemediation,\n-                                    \"Expected \" + remediation.getAnyType().getKind().getPatchClass().getName())).\n+                                    \"Expected \" + remediation.getAnyType().getKind().getURClass().getName())).\n                             addPropertyNode(\"payload\").addConstraintViolation();\n \n                     isValid = false;"},{"sha":"8937684ad21a5f227210418be51b706a55611660","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyObjectProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -22,11 +22,11 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n-public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectPatch> {\n+public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectUR> {\n \n     Pair<String, List<PropagationStatus>> create(\n             AnyObjectTO anyObjectTO, Set<String> excludedResources, boolean nullPriorityAsync);"},{"sha":"94e850f39a7f755ad51b24226b8a3532910f624d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -23,11 +23,11 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n \n-public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupPatch> {\n+public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupUR> {\n \n     Pair<String, List<PropagationStatus>> create(\n             GroupTO groupTO,"},{"sha":"a5d952d082fd2c00d501eda04f270a870060b215","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/LogicActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n \n /**\n@@ -34,7 +34,7 @@ default <A extends AnyTO> A afterCreate(A input) {\n         return input;\n     }\n \n-    default <P extends AnyPatch> P beforeUpdate(P input) {\n+    default <P extends AnyUR> P beforeUpdate(P input) {\n         return input;\n     }\n "},{"sha":"2672f9ded4b75823b216f078d36d5d22ccae9ad8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisioningManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -22,25 +22,25 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n-public interface ProvisioningManager<T extends AnyTO, P extends AnyPatch> {\n+public interface ProvisioningManager<T extends AnyTO, R extends AnyUR> {\n \n     Pair<String, List<PropagationStatus>> create(T anyTO, boolean nullPriorityAsync);\n \n-    Pair<P, List<PropagationStatus>> update(P patch, boolean nullPriorityAsync);\n+    Pair<R, List<PropagationStatus>> update(R anyUR, boolean nullPriorityAsync);\n \n-    Pair<P, List<PropagationStatus>> update(P patch, Set<String> excludedResources, boolean nullPriorityAsync);\n+    Pair<R, List<PropagationStatus>> update(R anyUR, Set<String> excludedResources, boolean nullPriorityAsync);\n \n     List<PropagationStatus> delete(String anyKey, boolean nullPriorityAsync);\n \n     List<PropagationStatus> delete(String anyKey, Set<String> excludedResources, boolean nullPriorityAsync);\n \n-    String unlink(P anyMod);\n+    String unlink(R anyUR);\n \n-    String link(P anyMod);\n+    String link(R anyUR);\n \n     List<PropagationStatus> deprovision(String anyKey, Collection<String> resources, boolean nullPriorityAsync);\n "},{"sha":"91e4a02e8cd466f923a07607a24fcac292eb24cc","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -22,19 +22,19 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n \n-public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserPatch> {\n+public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserUR> {\n \n-    Pair<String, List<PropagationStatus>> activate(StatusPatch statusPatch, boolean nullPriorityAsync);\n+    Pair<String, List<PropagationStatus>> activate(StatusR statusR, boolean nullPriorityAsync);\n \n-    Pair<String, List<PropagationStatus>> reactivate(StatusPatch statusPatch, boolean nullPriorityAsync);\n+    Pair<String, List<PropagationStatus>> reactivate(StatusR statusR, boolean nullPriorityAsync);\n \n-    Pair<String, List<PropagationStatus>> suspend(StatusPatch statusPatch, boolean nullPriorityAsync);\n+    Pair<String, List<PropagationStatus>> suspend(StatusR statusR, boolean nullPriorityAsync);\n \n     void internalSuspend(String key);\n \n@@ -48,8 +48,8 @@ Pair<String, List<PropagationStatus>> create(\n             Set<String> excludedResources,\n             boolean nullPriorityAsync);\n \n-    Pair<UserPatch, List<PropagationStatus>> update(\n-            UserPatch userPatch,\n+    Pair<UserUR, List<PropagationStatus>> update(\n+            UserUR userUR,\n             ProvisioningReport result,\n             Boolean enabled,\n             Set<String> excludedResources,"},{"sha":"6669188caaa20835759dcec777002f20e99a957d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AnyObjectDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -31,5 +31,5 @@ public interface AnyObjectDataBinder {\n \n     void create(AnyObject anyObject, AnyObjectTO anyObjectTO);\n \n-    PropagationByResource update(AnyObject toBeUpdated, AnyObjectPatch anyObjectPatch);\n+    PropagationByResource update(AnyObject toBeUpdated, AnyObjectUR anyObjectUR);\n }"},{"sha":"0570af3801c0d7582f1ebfed4da3bb5d1dc868f2","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/GroupDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import java.util.Map;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -36,7 +36,7 @@ public interface GroupDataBinder {\n \n     void create(Group group, GroupTO groupTO);\n \n-    PropagationByResource update(Group group, GroupPatch groupPatch);\n+    PropagationByResource update(Group group, GroupUR groupUR);\n \n     /**\n      * Finds any objects having resources assigned exclusively because of memberships of the given group."},{"sha":"fe9800b4fea7366b1e676e919c7d413e5e097012","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -36,12 +36,12 @@ public interface UserDataBinder {\n     void create(User user, UserTO userTO, boolean storePassword);\n \n     /**\n-     * Update user, given {@link UserPatch}.\n+     * Update user, given {@link UserUR}.\n      *\n      * @param toBeUpdated user to be updated\n-     * @param userPatch bean containing update request\n+     * @param userUR bean containing update request\n      * @return updated user + propagation by resource\n      * @see PropagationByResource\n      */\n-    PropagationByResource update(User toBeUpdated, UserPatch userPatch);\n+    PropagationByResource update(User toBeUpdated, UserUR userUR);\n }"},{"sha":"141fe1d4a51193d2e4fd6ac19d9ee48ab5c22df1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -21,7 +21,7 @@\n import java.util.Collection;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -98,7 +98,7 @@ List<PropagationTaskInfo> getUpdateTasks(\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> getUserUpdateTasks(\n-            WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n+            WorkflowResult<Pair<UserUR, Boolean>> wfResult,\n             boolean changePwd,\n             Collection<String> noPropResourceKeys);\n \n@@ -109,7 +109,7 @@ List<PropagationTaskInfo> getUserUpdateTasks(\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskInfo> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n+    List<PropagationTaskInfo> getUserUpdateTasks(WorkflowResult<Pair<UserUR, Boolean>> wfResult);\n \n     /**\n      * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceKeys}."},{"sha":"1bf9d0b555218e28e0864657592ff158ee0b7b68","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/PullActions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FPullActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n@@ -146,14 +146,14 @@ default void beforeLink(\n      * @param profile profile of the pull being executed.\n      * @param delta retrieved pull information\n      * @param entity entity\n-     * @param anyPatch modification\n+     * @param anyUR modification\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    default <P extends AnyPatch> void beforeUpdate(\n+    default <P extends AnyUR> void beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n             EntityTO entity,\n-            P anyPatch) throws JobExecutionException {\n+            P anyUR) throws JobExecutionException {\n     }\n \n     /**"},{"sha":"b1be40457386015f52590e418ab42707e5b77f6a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -88,26 +88,26 @@ public Pair<String, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<AnyObjectPatch, List<PropagationStatus>> update(\n-            final AnyObjectPatch anyObjectPatch, final boolean nullPriorityAsync) {\n+    public Pair<AnyObjectUR, List<PropagationStatus>> update(\n+            final AnyObjectUR anyObjectUR, final boolean nullPriorityAsync) {\n \n-        return update(anyObjectPatch, Collections.<String>emptySet(), nullPriorityAsync);\n+        return update(anyObjectUR, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n-    public Pair<AnyObjectPatch, List<PropagationStatus>> update(\n-            final AnyObjectPatch anyObjectPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+    public Pair<AnyObjectUR, List<PropagationStatus>> update(\n+            final AnyObjectUR anyObjectUR, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        WorkflowResult<AnyObjectPatch> updated = awfAdapter.update(anyObjectPatch);\n+        WorkflowResult<AnyObjectUR> updated = awfAdapter.update(anyObjectUR);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n                 AnyTypeKind.ANY_OBJECT,\n                 updated.getResult().getKey(),\n                 false,\n                 null,\n                 updated.getPropByRes(),\n-                anyObjectPatch.getVirAttrs(),\n+                anyObjectUR.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n@@ -149,13 +149,13 @@ public List<PropagationStatus> delete(\n     }\n \n     @Override\n-    public String unlink(final AnyObjectPatch anyObjectPatch) {\n-        return awfAdapter.update(anyObjectPatch).getResult().getKey();\n+    public String unlink(final AnyObjectUR anyObjectUR) {\n+        return awfAdapter.update(anyObjectUR).getResult().getKey();\n     }\n \n     @Override\n-    public String link(final AnyObjectPatch anyObjectPatch) {\n-        return awfAdapter.update(anyObjectPatch).getResult().getKey();\n+    public String link(final AnyObjectUR anyObjectUR) {\n+        return awfAdapter.update(anyObjectUR).getResult().getKey();\n     }\n \n     @Override"},{"sha":"69de66bb1e6033985c1a00e3fa938825f70fe8e8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,7 +28,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -110,26 +110,26 @@ public Pair<String, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<GroupPatch, List<PropagationStatus>> update(\n-            final GroupPatch groupPatch, final boolean nullPriorityAsync) {\n+    public Pair<GroupUR, List<PropagationStatus>> update(\n+            final GroupUR groupUR, final boolean nullPriorityAsync) {\n \n-        return update(groupPatch, Collections.<String>emptySet(), nullPriorityAsync);\n+        return update(groupUR, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n-    public Pair<GroupPatch, List<PropagationStatus>> update(\n-            final GroupPatch groupPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+    public Pair<GroupUR, List<PropagationStatus>> update(\n+            final GroupUR groupUR, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        WorkflowResult<GroupPatch> updated = gwfAdapter.update(groupPatch);\n+        WorkflowResult<GroupUR> updated = gwfAdapter.update(groupUR);\n \n         List<PropagationTaskInfo> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.GROUP,\n                 updated.getResult().getKey(),\n                 false,\n                 null,\n                 updated.getPropByRes(),\n-                groupPatch.getVirAttrs(),\n+                groupUR.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(tasks, nullPriorityAsync);\n \n@@ -182,8 +182,8 @@ public List<PropagationStatus> delete(\n     }\n \n     @Override\n-    public String unlink(final GroupPatch groupPatch) {\n-        return gwfAdapter.update(groupPatch).getResult().getKey();\n+    public String unlink(final GroupUR groupUR) {\n+        return gwfAdapter.update(groupUR).getResult().getKey();\n     }\n \n     @Override\n@@ -226,7 +226,7 @@ public List<PropagationStatus> deprovision(\n     }\n \n     @Override\n-    public String link(final GroupPatch groupPatch) {\n-        return gwfAdapter.update(groupPatch).getResult().getKey();\n+    public String link(final GroupUR groupUR) {\n+        return gwfAdapter.update(groupUR).getResult().getKey();\n     }\n }"},{"sha":"4d1a69a975553d93f1752fe0d3bc79eae7e75405","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":54,"deletions":63,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -26,10 +26,10 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -40,7 +40,7 @@\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -112,8 +112,8 @@ public Pair<String, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<UserPatch, List<PropagationStatus>> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n-        WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n+    public Pair<UserUR, List<PropagationStatus>> update(final UserUR userUR, final boolean nullPriorityAsync) {\n+        WorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.update(userUR);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n@@ -122,46 +122,46 @@ public Pair<UserPatch, List<PropagationStatus>> update(final UserPatch userPatch\n     }\n \n     @Override\n-    public Pair<UserPatch, List<PropagationStatus>> update(\n-            final UserPatch userPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+    public Pair<UserUR, List<PropagationStatus>> update(\n+            final UserUR userUR, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        return update(userPatch, new ProvisioningReport(), null, excludedResources, nullPriorityAsync);\n+        return update(userUR, new ProvisioningReport(), null, excludedResources, nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n-    public Pair<UserPatch, List<PropagationStatus>> update(\n-            final UserPatch userPatch,\n+    public Pair<UserUR, List<PropagationStatus>> update(\n+            final UserUR userUR,\n             final ProvisioningReport result,\n             final Boolean enabled,\n             final Set<String> excludedResources,\n             final boolean nullPriorityAsync) {\n \n-        WorkflowResult<Pair<UserPatch, Boolean>> updated;\n+        WorkflowResult<Pair<UserUR, Boolean>> updated;\n         try {\n-            updated = uwfAdapter.update(userPatch);\n+            updated = uwfAdapter.update(userUR);\n         } catch (Exception e) {\n             LOG.error(\"Update of user {} failed, trying to pull its status anyway (if configured)\",\n-                    userPatch.getKey(), e);\n+                    userUR.getKey(), e);\n \n             result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to pull status anyway (if configured)\\n\" + e.getMessage());\n \n             updated = new WorkflowResult<>(\n-                    Pair.of(userPatch, false), new PropagationByResource(),\n+                    Pair.of(userUR, false), new PropagationByResource(),\n                     new HashSet<>());\n         }\n \n         if (enabled != null) {\n-            User user = userDAO.find(userPatch.getKey());\n+            User user = userDAO.find(userUR.getKey());\n \n             WorkflowResult<String> enableUpdate = null;\n             if (user.isSuspended() == null) {\n-                enableUpdate = uwfAdapter.activate(userPatch.getKey(), null);\n+                enableUpdate = uwfAdapter.activate(userUR.getKey(), null);\n             } else if (enabled && user.isSuspended()) {\n-                enableUpdate = uwfAdapter.reactivate(userPatch.getKey());\n+                enableUpdate = uwfAdapter.reactivate(userUR.getKey());\n             } else if (!enabled && !user.isSuspended()) {\n-                enableUpdate = uwfAdapter.suspend(userPatch.getKey());\n+                enableUpdate = uwfAdapter.suspend(userUR.getKey());\n             }\n \n             if (enableUpdate != null) {\n@@ -215,59 +215,50 @@ public List<PropagationStatus> delete(\n     }\n \n     @Override\n-    public String unlink(final UserPatch userPatch) {\n-        WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n+    public String unlink(final UserUR userUR) {\n+        WorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.update(userUR);\n         return updated.getResult().getLeft().getKey();\n     }\n \n     @Override\n-    public String link(final UserPatch userPatch) {\n-        return uwfAdapter.update(userPatch).getResult().getLeft().getKey();\n+    public String link(final UserUR userUR) {\n+        return uwfAdapter.update(userUR).getResult().getLeft().getKey();\n     }\n \n     @Override\n-    public Pair<String, List<PropagationStatus>> activate(\n-            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n+    public Pair<String, List<PropagationStatus>> activate(final StatusR statusR, final boolean nullPriorityAsync) {\n+        WorkflowResult<String> updated = statusR.isOnSyncope()\n+                ? uwfAdapter.activate(statusR.getKey(), statusR.getToken())\n+                : new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n \n-        WorkflowResult<String> updated = statusPatch.isOnSyncope()\n-                ? uwfAdapter.activate(statusPatch.getKey(), statusPatch.getToken())\n-                : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n-\n-        return Pair.of(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n+        return Pair.of(updated.getResult(), propagateStatus(statusR, nullPriorityAsync));\n     }\n \n     @Override\n-    public Pair<String, List<PropagationStatus>> reactivate(\n-            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n-\n-        WorkflowResult<String> updated = statusPatch.isOnSyncope()\n-                ? uwfAdapter.reactivate(statusPatch.getKey())\n-                : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n+    public Pair<String, List<PropagationStatus>> reactivate(final StatusR statusR, final boolean nullPriorityAsync) {\n+        WorkflowResult<String> updated = statusR.isOnSyncope()\n+                ? uwfAdapter.reactivate(statusR.getKey())\n+                : new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n \n-        return Pair.of(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n+        return Pair.of(updated.getResult(), propagateStatus(statusR, nullPriorityAsync));\n     }\n \n     @Override\n-    public Pair<String, List<PropagationStatus>> suspend(\n-            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n-\n-        WorkflowResult<String> updated = statusPatch.isOnSyncope()\n-                ? uwfAdapter.suspend(statusPatch.getKey())\n-                : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n+    public Pair<String, List<PropagationStatus>> suspend(final StatusR statusR, final boolean nullPriorityAsync) {\n+        WorkflowResult<String> updated = statusR.isOnSyncope()\n+                ? uwfAdapter.suspend(statusR.getKey())\n+                : new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n \n-        return Pair.of(updated.getResult(), propagateStatus(statusPatch, nullPriorityAsync));\n+        return Pair.of(updated.getResult(), propagateStatus(statusR, nullPriorityAsync));\n     }\n \n-    protected List<PropagationStatus> propagateStatus(\n-            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n-\n+    protected List<PropagationStatus> propagateStatus(final StatusR statusR, final boolean nullPriorityAsync) {\n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n-        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n-                AnyTypeKind.USER,\n-                statusPatch.getKey(),\n+        propByRes.addAll(ResourceOperation.UPDATE, statusR.getResources());\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(AnyTypeKind.USER,\n+                statusR.getKey(),\n                 false,\n-                statusPatch.getType() != StatusPatchType.SUSPEND,\n+                statusR.getType() != StatusRType.SUSPEND,\n                 propByRes,\n                 null,\n                 null);\n@@ -282,11 +273,11 @@ public void internalSuspend(final String key) {\n \n         // propagate suspension if and only if it is required by policy\n         if (updated != null && updated.getRight()) {\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(updated.getLeft().getResult());\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(updated.getLeft().getResult());\n \n             List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(new WorkflowResult<>(\n-                    Pair.of(userPatch, Boolean.FALSE),\n+                    Pair.of(userUR, Boolean.FALSE),\n                     updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n             taskExecutor.execute(taskInfos, false);\n         }\n@@ -300,9 +291,9 @@ public List<PropagationStatus> provision(\n             final Collection<String> resources,\n             final boolean nullPriorityAsync) {\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(key);\n-        userPatch.getResources().addAll(resources.stream().map(resource\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(key);\n+        userUR.getResources().addAll(resources.stream().map(resource\n                 -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n                 collect(Collectors.toSet()));\n \n@@ -311,14 +302,14 @@ public List<PropagationStatus> provision(\n             passwordPatch.setOnSyncope(false);\n             passwordPatch.getResources().addAll(resources);\n             passwordPatch.setValue(password);\n-            userPatch.setPassword(passwordPatch);\n+            userUR.setPassword(passwordPatch);\n         }\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<>(\n-                ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n+        WorkflowResult<Pair<UserUR, Boolean>> wfResult = new WorkflowResult<>(\n+                ImmutablePair.of(userUR, (Boolean) null), propByRes, \"update\");\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n@@ -352,7 +343,7 @@ public void requestPasswordReset(final String key) {\n \n     @Override\n     public void confirmPasswordReset(final String key, final String token, final String password) {\n-        WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.confirmPasswordReset(key, token, password);\n+        WorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.confirmPasswordReset(key, token, password);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n "},{"sha":"a4b8443048185fc9a9fd0a032fd931805603e247","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -31,9 +31,9 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -137,11 +137,11 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected IntAttrNameParser intAttrNameParser;\n \n-    protected void setRealm(final Any<?> any, final AnyPatch anyPatch) {\n-        if (anyPatch.getRealm() != null && StringUtils.isNotBlank(anyPatch.getRealm().getValue())) {\n-            Realm newRealm = realmDAO.findByFullPath(anyPatch.getRealm().getValue());\n+    protected void setRealm(final Any<?> any, final AnyUR anyUR) {\n+        if (anyUR.getRealm() != null && StringUtils.isNotBlank(anyUR.getRealm().getValue())) {\n+            Realm newRealm = realmDAO.findByFullPath(anyUR.getRealm().getValue());\n             if (newRealm == null) {\n-                LOG.debug(\"Invalid realm specified: {}, ignoring\", anyPatch.getRealm().getValue());\n+                LOG.debug(\"Invalid realm specified: {}, ignoring\", anyUR.getRealm().getValue());\n             } else {\n                 any.setRealm(newRealm);\n             }\n@@ -343,14 +343,14 @@ protected void processAttrPatch(\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     protected PropagationByResource fill(\n             final Any any,\n-            final AnyPatch anyPatch,\n+            final AnyUR anyUR,\n             final AnyUtils anyUtils,\n             final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n         // 1. anyTypeClasses\n-        for (StringPatchItem patch : anyPatch.getAuxClasses()) {\n+        for (StringPatchItem patch : anyUR.getAuxClasses()) {\n             AnyTypeClass auxClass = anyTypeClassDAO.find(patch.getValue());\n             if (auxClass == null) {\n                 LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", patch.getValue());\n@@ -368,7 +368,7 @@ protected PropagationByResource fill(\n         }\n \n         // 2. resources\n-        for (StringPatchItem patch : anyPatch.getResources()) {\n+        for (StringPatchItem patch : anyUR.getResources()) {\n             ExternalResource resource = resourceDAO.find(patch.getValue());\n             if (resource == null) {\n                 LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \" {}, ignoring...\", patch.getValue());\n@@ -391,7 +391,7 @@ protected PropagationByResource fill(\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // 3. plain attributes\n-        anyPatch.getPlainAttrs().stream().\n+        anyUR.getPlainAttrs().stream().\n                 filter(patch -> patch.getAttrTO() != null).forEach(patch -> {\n             PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n             if (schema == null) {"},{"sha":"714cfb6e9ba84bbdcac910b2d6d0a49472c0fd50","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -31,8 +31,8 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -239,7 +239,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n     }\n \n     @Override\n-    public PropagationByResource update(final AnyObject toBeUpdated, final AnyObjectPatch anyObjectPatch) {\n+    public PropagationByResource update(final AnyObject toBeUpdated, final AnyObjectUR anyObjectUR) {\n         // Re-merge any pending change from workflow tasks\n         AnyObject anyObject = anyObjectDAO.save(toBeUpdated);\n \n@@ -255,20 +255,20 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         Map<String, String> oldConnObjectKeys = getConnObjectKeys(anyObject, anyUtils);\n \n         // realm\n-        setRealm(anyObject, anyObjectPatch);\n+        setRealm(anyObject, anyObjectUR);\n \n         // name\n-        if (anyObjectPatch.getName() != null && StringUtils.isNotBlank(anyObjectPatch.getName().getValue())) {\n+        if (anyObjectUR.getName() != null && StringUtils.isNotBlank(anyObjectUR.getName().getValue())) {\n             propByRes.addAll(ResourceOperation.UPDATE, anyObjectDAO.findAllResourceKeys(anyObject.getKey()));\n \n-            anyObject.setName(anyObjectPatch.getName().getValue());\n+            anyObject.setName(anyObjectUR.getName().getValue());\n         }\n \n         // attributes and resources\n-        propByRes.merge(fill(anyObject, anyObjectPatch, anyUtils, scce));\n+        propByRes.merge(fill(anyObject, anyObjectUR, anyUtils, scce));\n \n         // relationships\n-        anyObjectPatch.getRelationships().stream().\n+        anyObjectUR.getRelationships().stream().\n                 filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n             RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n             if (relationshipType == null) {\n@@ -336,7 +336,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        anyObjectPatch.getMemberships().stream().\n+        anyObjectUR.getMemberships().stream().\n                 filter((membPatch) -> (membPatch.getGroup() != null)).forEachOrdered(membPatch -> {\n             anyObject.getMembership(membPatch.getGroup()).ifPresent(membership -> {\n                 anyObject.remove(membership);"},{"sha":"b960fd790cde089aa79b3d4ce90938128f5edd4a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -27,7 +27,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -185,7 +185,7 @@ public void create(final Group group, final GroupTO groupTO) {\n     }\n \n     @Override\n-    public PropagationByResource update(final Group toBeUpdated, final GroupPatch groupPatch) {\n+    public PropagationByResource update(final Group toBeUpdated, final GroupUR groupUR) {\n         // Re-merge any pending change from workflow tasks\n         Group group = groupDAO.save(toBeUpdated);\n \n@@ -199,29 +199,29 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         Map<String, String> oldConnObjectKeys = getConnObjectKeys(group, anyUtils);\n \n         // realm\n-        setRealm(group, groupPatch);\n+        setRealm(group, groupUR);\n \n         // name\n-        if (groupPatch.getName() != null && StringUtils.isNotBlank(groupPatch.getName().getValue())) {\n+        if (groupUR.getName() != null && StringUtils.isNotBlank(groupUR.getName().getValue())) {\n             propByRes.addAll(ResourceOperation.UPDATE, groupDAO.findAllResourceKeys(group.getKey()));\n \n-            group.setName(groupPatch.getName().getValue());\n+            group.setName(groupUR.getName().getValue());\n         }\n \n         // owner\n-        if (groupPatch.getUserOwner() != null) {\n-            group.setUserOwner(groupPatch.getUserOwner().getValue() == null\n+        if (groupUR.getUserOwner() != null) {\n+            group.setUserOwner(groupUR.getUserOwner().getValue() == null\n                     ? null\n-                    : userDAO.find(groupPatch.getUserOwner().getValue()));\n+                    : userDAO.find(groupUR.getUserOwner().getValue()));\n         }\n-        if (groupPatch.getGroupOwner() != null) {\n-            group.setGroupOwner(groupPatch.getGroupOwner().getValue() == null\n+        if (groupUR.getGroupOwner() != null) {\n+            group.setGroupOwner(groupUR.getGroupOwner().getValue() == null\n                     ? null\n-                    : groupDAO.find(groupPatch.getGroupOwner().getValue()));\n+                    : groupDAO.find(groupUR.getGroupOwner().getValue()));\n         }\n \n         // attributes and resources\n-        propByRes.merge(fill(group, groupPatch, anyUtils, scce));\n+        propByRes.merge(fill(group, groupUR, anyUtils, scce));\n \n         // check if some connObjectKey was changed by the update above\n         Map<String, String> newConnObjectKeys = getConnObjectKeys(group, anyUtils);\n@@ -236,22 +236,22 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         group = groupDAO.save(group);\n \n         // dynamic membership\n-        if (groupPatch.getUDynMembershipCond() == null) {\n+        if (groupUR.getUDynMembershipCond() == null) {\n             if (group.getUDynMembership() != null) {\n                 group.getUDynMembership().setGroup(null);\n                 group.setUDynMembership(null);\n                 groupDAO.clearUDynMembers(group);\n             }\n         } else {\n-            setDynMembership(group, anyTypeDAO.findUser(), groupPatch.getUDynMembershipCond());\n+            setDynMembership(group, anyTypeDAO.findUser(), groupUR.getUDynMembershipCond());\n         }\n         for (Iterator<? extends ADynGroupMembership> itor = group.getADynMemberships().iterator(); itor.hasNext();) {\n             ADynGroupMembership memb = itor.next();\n             memb.setGroup(null);\n             itor.remove();\n         }\n         groupDAO.clearADynMembers(group);\n-        for (Map.Entry<String, String> entry : groupPatch.getADynMembershipConds().entrySet()) {\n+        for (Map.Entry<String, String> entry : groupUR.getADynMembershipConds().entrySet()) {\n             AnyType anyType = anyTypeDAO.find(entry.getKey());\n             if (anyType == null) {\n                 LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n@@ -263,7 +263,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         group = groupDAO.saveAndRefreshDynMemberships(group);\n \n         // type extensions\n-        for (TypeExtensionTO typeExtTO : groupPatch.getTypeExtensions()) {\n+        for (TypeExtensionTO typeExtTO : groupUR.getTypeExtensions()) {\n             AnyType anyType = anyTypeDAO.find(typeExtTO.getAnyType());\n             if (anyType == null) {\n                 LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), typeExtTO.getAnyType());\n@@ -298,7 +298,7 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n         }\n         // remove all type extensions not contained in the TO\n         group.getTypeExtensions().\n-                removeIf(typeExt -> !groupPatch.getTypeExtension(typeExt.getAnyType().getKey()).isPresent());\n+                removeIf(typeExt -> !groupUR.getTypeExtension(typeExt.getAnyType().getKey()).isPresent());\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {"},{"sha":"04302954feb6a881fcd37197dc7feb14aa587576","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -42,8 +42,8 @@ public RemediationTO getRemediationTO(final Remediation remediation) {\n                 break;\n \n             case UPDATE:\n-                remediationTO.setAnyPatchPayload(\n-                        remediation.getPayloadAsPatch(remediation.getAnyType().getKind().getPatchClass()));\n+                remediationTO.setAnyURPayload(\n+                        remediation.getPayloadAsUR(remediation.getAnyType().getKind().getURClass()));\n                 break;\n \n             case DELETE:"},{"sha":"d7d5f1a490cd66a6bd5c44c5fecf038cd037df66","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -34,10 +34,10 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -265,7 +265,7 @@ private boolean isPasswordMapped(final ExternalResource resource) {\n     }\n \n     @Override\n-    public PropagationByResource update(final User toBeUpdated, final UserPatch userPatch) {\n+    public PropagationByResource update(final User toBeUpdated, final UserUR userUR) {\n         // Re-merge any pending change from workflow tasks\n         User user = userDAO.save(toBeUpdated);\n \n@@ -281,57 +281,57 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         Map<String, String> oldConnObjectKeys = getConnObjectKeys(user, anyUtils);\n \n         // realm\n-        setRealm(user, userPatch);\n+        setRealm(user, userUR);\n \n         // password\n-        if (userPatch.getPassword() != null && StringUtils.isNotBlank(userPatch.getPassword().getValue())) {\n-            if (userPatch.getPassword().isOnSyncope()) {\n-                setPassword(user, userPatch.getPassword().getValue(), scce);\n+        if (userUR.getPassword() != null && StringUtils.isNotBlank(userUR.getPassword().getValue())) {\n+            if (userUR.getPassword().isOnSyncope()) {\n+                setPassword(user, userUR.getPassword().getValue(), scce);\n                 user.setChangePwdDate(new Date());\n             }\n \n-            propByRes.addAll(ResourceOperation.UPDATE, userPatch.getPassword().getResources());\n+            propByRes.addAll(ResourceOperation.UPDATE, userUR.getPassword().getResources());\n         }\n \n         // username\n-        if (userPatch.getUsername() != null && StringUtils.isNotBlank(userPatch.getUsername().getValue())) {\n+        if (userUR.getUsername() != null && StringUtils.isNotBlank(userUR.getUsername().getValue())) {\n             String oldUsername = user.getUsername();\n-            user.setUsername(userPatch.getUsername().getValue());\n+            user.setUsername(userUR.getUsername().getValue());\n \n             if (oldUsername.equals(AuthContextUtils.getUsername())) {\n-                AuthContextUtils.updateUsername(userPatch.getUsername().getValue());\n+                AuthContextUtils.updateUsername(userUR.getUsername().getValue());\n             }\n \n             AccessToken accessToken = accessTokenDAO.findByOwner(oldUsername);\n             if (accessToken != null) {\n-                accessToken.setOwner(userPatch.getUsername().getValue());\n+                accessToken.setOwner(userUR.getUsername().getValue());\n                 accessTokenDAO.save(accessToken);\n             }\n \n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n         }\n \n         // security question / answer:\n-        if (userPatch.getSecurityQuestion() != null) {\n-            if (userPatch.getSecurityQuestion().getValue() == null) {\n+        if (userUR.getSecurityQuestion() != null) {\n+            if (userUR.getSecurityQuestion().getValue() == null) {\n                 user.setSecurityQuestion(null);\n                 user.setSecurityAnswer(null);\n             } else {\n                 SecurityQuestion securityQuestion =\n-                        securityQuestionDAO.find(userPatch.getSecurityQuestion().getValue());\n+                        securityQuestionDAO.find(userUR.getSecurityQuestion().getValue());\n                 if (securityQuestion != null) {\n                     user.setSecurityQuestion(securityQuestion);\n-                    user.setSecurityAnswer(userPatch.getSecurityAnswer().getValue());\n+                    user.setSecurityAnswer(userUR.getSecurityAnswer().getValue());\n                 }\n             }\n         }\n \n-        if (userPatch.getMustChangePassword() != null) {\n-            user.setMustChangePassword(userPatch.getMustChangePassword().getValue());\n+        if (userUR.getMustChangePassword() != null) {\n+            user.setMustChangePassword(userUR.getMustChangePassword().getValue());\n         }\n \n         // roles\n-        for (StringPatchItem patch : userPatch.getRoles()) {\n+        for (StringPatchItem patch : userUR.getRoles()) {\n             Role role = roleDAO.find(patch.getValue());\n             if (role == null) {\n                 LOG.warn(\"Ignoring unknown role with key {}\", patch.getValue());\n@@ -349,10 +349,10 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         }\n \n         // attributes and resources\n-        propByRes.merge(fill(user, userPatch, anyUtils, scce));\n+        propByRes.merge(fill(user, userUR, anyUtils, scce));\n \n         // relationships\n-        userPatch.getRelationships().stream().\n+        userUR.getRelationships().stream().\n                 filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n             RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n             if (relationshipType == null) {\n@@ -409,7 +409,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        userPatch.getMemberships().stream().\n+        userUR.getMemberships().stream().\n                 filter(membPatch -> membPatch.getGroup() != null).forEachOrdered((membPatch) -> {\n             user.getMembership(membPatch.getGroup()).ifPresent(membership -> {\n                 user.remove(membership);\n@@ -473,13 +473,13 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                     // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n                     // ensure that they are counted for password propagation\n                     if (toBeUpdated.canDecodePassword()) {\n-                        if (userPatch.getPassword() == null) {\n-                            userPatch.setPassword(new PasswordPatch());\n+                        if (userUR.getPassword() == null) {\n+                            userUR.setPassword(new PasswordPatch());\n                         }\n                         group.getResources().stream().\n                                 filter(resource -> isPasswordMapped(resource)).\n                                 forEachOrdered(resource -> {\n-                                    userPatch.getPassword().getResources().add(resource.getKey());\n+                                    userUR.getPassword().getResources().add(resource.getKey());\n                                 });\n                     }\n                 } else {"},{"sha":"a404e05c7b70a608159a90b5bebf60fd3aaa6266","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -22,8 +22,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n@@ -64,17 +64,17 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                         (Map<String, Set<String>>) context.getMergedJobDataMap().get(MEMBERSHIPS_AFTER_KEY);\n                 LOG.debug(\"Memberships after pull (User -> Groups) {}\", membershipsAfter);\n \n-                List<UserPatch> patches = new ArrayList<>();\n+                List<UserUR> updateReqs = new ArrayList<>();\n \n                 membershipsAfter.forEach((user, groups) -> {\n-                    UserPatch userPatch = new UserPatch();\n-                    userPatch.setKey(user);\n-                    patches.add(userPatch);\n+                    UserUR userUR = new UserUR();\n+                    userUR.setKey(user);\n+                    updateReqs.add(userUR);\n \n                     groups.forEach(group -> {\n                         Set<String> before = membershipsBefore.get(user);\n                         if (before == null || !before.contains(group)) {\n-                            userPatch.getMemberships().add(\n+                            userUR.getMemberships().add(\n                                     new MembershipPatch.Builder().\n                                             operation(PatchOperation.ADD_REPLACE).\n                                             group(group).\n@@ -84,19 +84,18 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                 });\n \n                 membershipsBefore.forEach((user, groups) -> {\n-                    UserPatch userPatch = patches.stream().\n-                            filter(patch -> user.equals(patch.getKey())).findFirst().\n+                    UserUR userUR = updateReqs.stream().\n+                            filter(req -> user.equals(req.getKey())).findFirst().\n                             orElseGet(() -> {\n-                                UserPatch patch = new UserPatch();\n-                                patch.setKey(user);\n-                                patches.add(patch);\n-                                return patch;\n+                                UserUR req = new UserUR.Builder().key(user).build();\n+                                updateReqs.add(req);\n+                                return req;\n                             });\n \n                     groups.forEach(group -> {\n                         Set<String> after = membershipsAfter.get(user);\n                         if (after == null || !after.contains(group)) {\n-                            userPatch.getMemberships().add(\n+                            userUR.getMemberships().add(\n                                     new MembershipPatch.Builder().\n                                             operation(PatchOperation.DELETE).\n                                             group(group).\n@@ -105,9 +104,9 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n                     });\n                 });\n \n-                patches.stream().filter(patch -> !patch.isEmpty()).forEach(patch -> {\n-                    LOG.debug(\"About to update User {}\", patch);\n-                    userProvisioningManager.update(patch, true);\n+                updateReqs.stream().filter(req -> !req.isEmpty()).forEach(req -> {\n+                    LOG.debug(\"About to update User {}\", req);\n+                    userProvisioningManager.update(req, true);\n                 });\n \n                 return null;"},{"sha":"1d6f37ad1c8f98edd25230f5a43067c6ce3539c4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -29,7 +29,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -190,7 +190,7 @@ public List<PropagationTaskInfo> getUpdateTasks(\n \n     @Override\n     public List<PropagationTaskInfo> getUserUpdateTasks(\n-            final WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n+            final WorkflowResult<Pair<UserUR, Boolean>> wfResult,\n             final boolean changePwd,\n             final Collection<String> noPropResourceKeys) {\n \n@@ -207,35 +207,35 @@ public List<PropagationTaskInfo> getUserUpdateTasks(\n     }\n \n     @Override\n-    public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult) {\n-        UserPatch userPatch = wfResult.getResult().getKey();\n+    public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<UserUR, Boolean>> wfResult) {\n+        UserUR userUR = wfResult.getResult().getLeft();\n \n         // Propagate password update only to requested resources\n         List<PropagationTaskInfo> tasks = new ArrayList<>();\n-        if (userPatch.getPassword() == null) {\n+        if (userUR.getPassword() == null) {\n             // a. no specific password propagation request: generate propagation tasks for any resource associated\n             tasks = getUserUpdateTasks(wfResult, false, null);\n         } else {\n             // b. generate the propagation task list in two phases: first the ones containing password,\n             // the the rest (with no password)\n-            WorkflowResult<Pair<UserPatch, Boolean>> pwdWFResult = new WorkflowResult<>(\n+            WorkflowResult<Pair<UserUR, Boolean>> pwdWFResult = new WorkflowResult<>(\n                     wfResult.getResult(), new PropagationByResource(), wfResult.getPerformedTasks());\n \n-            Set<String> pwdResourceNames = new HashSet<>(userPatch.getPassword().getResources());\n-            Collection<String> allResourceNames = userDAO.findAllResourceKeys(userPatch.getKey());\n+            Set<String> pwdResourceNames = new HashSet<>(userUR.getPassword().getResources());\n+            Collection<String> allResourceNames = userDAO.findAllResourceKeys(userUR.getKey());\n             pwdResourceNames.retainAll(allResourceNames);\n \n             pwdWFResult.getPropByRes().addAll(ResourceOperation.UPDATE, pwdResourceNames);\n             if (!pwdWFResult.getPropByRes().isEmpty()) {\n                 Set<String> toBeExcluded = new HashSet<>(allResourceNames);\n-                toBeExcluded.addAll(userPatch.getResources().stream().\n+                toBeExcluded.addAll(userUR.getResources().stream().\n                         map(patchItem -> patchItem.getValue()).collect(Collectors.toList()));\n                 toBeExcluded.removeAll(pwdResourceNames);\n \n                 tasks.addAll(getUserUpdateTasks(pwdWFResult, true, toBeExcluded));\n             }\n \n-            WorkflowResult<Pair<UserPatch, Boolean>> noPwdWFResult = new WorkflowResult<>(\n+            WorkflowResult<Pair<UserUR, Boolean>> noPwdWFResult = new WorkflowResult<>(\n                     wfResult.getResult(), new PropagationByResource(), wfResult.getPerformedTasks());\n \n             noPwdWFResult.getPropByRes().merge(wfResult.getPropByRes());"},{"sha":"566403c299f5e272cd3a66cbaf98567f6a14335c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -24,8 +24,8 @@\n import java.util.List;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n@@ -103,7 +103,7 @@ public abstract class AbstractPullResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract AnyTO doCreate(AnyTO anyTO, SyncDelta delta);\n \n-    protected abstract AnyPatch doUpdate(AnyTO before, AnyPatch anyPatch, SyncDelta delta, ProvisioningReport result);\n+    protected abstract AnyUR doUpdate(AnyTO before, AnyUR req, SyncDelta delta, ProvisioningReport result);\n \n     @Override\n     public void setPullExecutor(final SyncopePullExecutor executor) {\n@@ -345,15 +345,15 @@ protected List<ProvisioningReport> update(\n             if (!profile.isDryRun()) {\n                 Result resultStatus;\n                 Object output;\n-                AnyPatch effectivePatch = null;\n+                AnyUR effectiveReq = null;\n \n                 if (before == null) {\n                     resultStatus = Result.FAILURE;\n                     output = null;\n                 } else {\n-                    AnyPatch anyPatch = null;\n+                    AnyUR anyUR = null;\n                     try {\n-                        anyPatch = connObjectUtils.getAnyPatch(\n+                        anyUR = connObjectUtils.getAnyUR(\n                                 before.getKey(),\n                                 delta.getObject(),\n                                 before,\n@@ -362,11 +362,11 @@ protected List<ProvisioningReport> update(\n                                 getAnyUtils());\n \n                         for (PullActions action : profile.getActions()) {\n-                            action.beforeUpdate(profile, delta, before, anyPatch);\n+                            action.beforeUpdate(profile, delta, before, anyUR);\n                         }\n \n-                        effectivePatch = doUpdate(before, anyPatch, delta, result);\n-                        AnyTO updated = AnyOperations.patch(before, effectivePatch);\n+                        effectiveReq = doUpdate(before, anyUR, delta, result);\n+                        AnyTO updated = AnyOperations.patch(before, effectiveReq);\n \n                         for (PullActions action : profile.getActions()) {\n                             action.after(profile, delta, updated, result);\n@@ -398,7 +398,7 @@ protected List<ProvisioningReport> update(\n                             Remediation entity = entityFactory.newEntity(Remediation.class);\n                             entity.setAnyType(provision.getAnyType());\n                             entity.setOperation(ResourceOperation.UPDATE);\n-                            entity.setPayload(anyPatch);\n+                            entity.setPayload(anyUR);\n                             entity.setError(result.getMessage());\n                             entity.setInstant(new Date());\n                             entity.setRemoteName(delta.getObject().getName().getNameValue());\n@@ -409,7 +409,7 @@ protected List<ProvisioningReport> update(\n                     }\n                 }\n                 finalize(MatchingRule.toEventName(MatchingRule.UPDATE),\n-                        resultStatus, before, output, delta, effectivePatch);\n+                        resultStatus, before, output, delta, effectiveReq);\n             }\n             results.add(result);\n         }\n@@ -481,17 +481,17 @@ protected List<ProvisioningReport> deprovision(\n                                 null),\n                                 false);\n \n-                        AnyPatch anyPatch = null;\n+                        AnyUR anyUR = null;\n                         if (unlink) {\n-                            anyPatch = getAnyUtils().newAnyPatch(key);\n-                            anyPatch.getResources().add(new StringPatchItem.Builder().\n+                            anyUR = getAnyUtils().newAnyUR(key);\n+                            anyUR.getResources().add(new StringPatchItem.Builder().\n                                     operation(PatchOperation.DELETE).\n                                     value(profile.getTask().getResource().getKey()).build());\n                         }\n-                        if (anyPatch == null) {\n+                        if (anyUR == null) {\n                             output = getAnyTO(key);\n                         } else {\n-                            output = doUpdate(before, anyPatch, delta, result);\n+                            output = doUpdate(before, anyUR, delta, result);\n                         }\n \n                         for (PullActions action : profile.getActions()) {\n@@ -567,7 +567,7 @@ protected List<ProvisioningReport> link(\n             if (!profile.isDryRun()) {\n                 Result resultStatus;\n                 Object output;\n-                AnyPatch effectivePatch = null;\n+                AnyUR effectiveReq = null;\n \n                 if (before == null) {\n                     resultStatus = Result.FAILURE;\n@@ -586,13 +586,13 @@ protected List<ProvisioningReport> link(\n                             }\n                         }\n \n-                        AnyPatch anyPatch = getAnyUtils().newAnyPatch(before.getKey());\n-                        anyPatch.getResources().add(new StringPatchItem.Builder().\n+                        AnyUR anyUR = getAnyUtils().newAnyUR(before.getKey());\n+                        anyUR.getResources().add(new StringPatchItem.Builder().\n                                 operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n                                 value(profile.getTask().getResource().getKey()).build());\n \n-                        effectivePatch = update(anyPatch).getResult();\n-                        output = AnyOperations.patch(before, effectivePatch);\n+                        effectiveReq = update(anyUR).getResult();\n+                        output = AnyOperations.patch(before, effectiveReq);\n \n                         for (PullActions action : profile.getActions()) {\n                             action.after(profile, delta, AnyTO.class.cast(output), result);\n@@ -622,7 +622,7 @@ protected List<ProvisioningReport> link(\n                 finalize(unlink\n                         ? MatchingRule.toEventName(MatchingRule.UNLINK)\n                         : MatchingRule.toEventName(MatchingRule.LINK),\n-                        resultStatus, before, output, delta, effectivePatch);\n+                        resultStatus, before, output, delta, effectiveReq);\n             }\n             results.add(result);\n         }"},{"sha":"28bc56a15610cf2f9241ccdfae2ae08766f465b4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -25,8 +25,8 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n@@ -175,34 +175,34 @@ protected void provision(final Any<?> any, final Boolean enable, final Provision\n     }\n \n     protected void link(final Any<?> any, final boolean unlink, final ProvisioningReport result) {\n-        AnyPatch patch = getAnyUtils().newAnyPatch(any.getKey());\n-        patch.getResources().add(new StringPatchItem.Builder().\n+        AnyUR req = getAnyUtils().newAnyUR(any.getKey());\n+        req.getResources().add(new StringPatchItem.Builder().\n                 operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n                 value(profile.getTask().getResource().getKey()).build());\n \n-        update(patch);\n+        update(req);\n \n         result.setStatus(ProvisioningReport.Status.SUCCESS);\n     }\n \n     protected void unassign(final Any<?> any, final ConnectorObject beforeObj, final ProvisioningReport result) {\n-        AnyPatch patch = getAnyUtils().newAnyPatch(any.getKey());\n-        patch.getResources().add(new StringPatchItem.Builder().\n+        AnyUR req = getAnyUtils().newAnyUR(any.getKey());\n+        req.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.DELETE).\n                 value(profile.getTask().getResource().getKey()).build());\n \n-        update(patch);\n+        update(req);\n \n         deprovision(any, beforeObj, result);\n     }\n \n     protected void assign(final Any<?> any, final Boolean enabled, final ProvisioningReport result) {\n-        AnyPatch patch = getAnyUtils().newAnyPatch(any.getKey());\n-        patch.getResources().add(new StringPatchItem.Builder().\n+        AnyUR req = getAnyUtils().newAnyUR(any.getKey());\n+        req.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n                 value(profile.getTask().getResource().getKey()).build());\n \n-        update(patch);\n+        update(req);\n \n         provision(any, enabled, result);\n     }"},{"sha":"b8b0df9950366b69b7b067b693543c270ec8f778","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractSyncopeResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n@@ -92,7 +92,7 @@\n \n     protected abstract AnyTO getAnyTO(String key);\n \n-    protected abstract WorkflowResult<? extends AnyPatch> update(AnyPatch patch);\n+    protected abstract WorkflowResult<? extends AnyUR> update(AnyUR req);\n \n     @Override\n     public void setProfile(final ProvisioningProfile<T, A> profile) {"},{"sha":"f5251f0e0455781aa217abb276d96a96e4b90145","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.Optional;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -73,14 +73,14 @@ public void beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <M extends AnyPatch> void beforeUpdate(\n+    public <M extends AnyUR> void beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final EntityTO entityTO,\n-            final M anyPatch) throws JobExecutionException {\n+            final M anyUR) throws JobExecutionException {\n \n-        if (anyPatch instanceof UserPatch) {\n-            PasswordPatch modPassword = ((UserPatch) anyPatch).getPassword();\n+        if (anyUR instanceof UserUR) {\n+            PasswordPatch modPassword = ((UserUR) anyUR).getPassword();\n             parseEncodedPassword(modPassword == null ? null : modPassword.getValue(), profile.getConnector());\n         }\n     }"},{"sha":"5fc6a17eb599348c2329a617490b37f2cbc624c6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultAnyObjectPullResultHandler.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPullResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -22,8 +22,8 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -63,8 +63,8 @@ protected AnyTO getAnyTO(final String key) {\n     }\n \n     @Override\n-    protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n-        return awfAdapter.update((AnyObjectPatch) patch);\n+    protected WorkflowResult<? extends AnyUR> update(final AnyUR req) {\n+        return awfAdapter.update((AnyObjectUR) req);\n     }\n \n     @Override\n@@ -78,17 +78,17 @@ protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta) {\n     }\n \n     @Override\n-    protected AnyPatch doUpdate(\n+    protected AnyUR doUpdate(\n             final AnyTO before,\n-            final AnyPatch anyPatch,\n+            final AnyUR req,\n             final SyncDelta delta,\n             final ProvisioningReport result) {\n \n-        AnyObjectPatch anyObjectPatch = AnyObjectPatch.class.cast(anyPatch);\n+        AnyObjectUR anyObjectUR = AnyObjectUR.class.cast(req);\n \n-        Pair<AnyObjectPatch, List<PropagationStatus>> updated = anyObjectProvisioningManager.update(\n-                anyObjectPatch, Collections.singleton(profile.getTask().getResource().getKey()), true);\n+        Pair<AnyObjectUR, List<PropagationStatus>> updated = anyObjectProvisioningManager.update(\n+                anyObjectUR, Collections.singleton(profile.getTask().getResource().getKey()), true);\n \n-        return anyPatch;\n+        return updated.getLeft();\n     }\n }"},{"sha":"98e4d6cd5def68a66311c63ef7f4873f90e92546","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultAnyObjectPushResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultAnyObjectPushResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -46,7 +46,7 @@ protected AnyTO getAnyTO(final String key) {\n     }\n \n     @Override\n-    protected WorkflowResult<? extends AnyObjectPatch> update(final AnyPatch patch) {\n-        return awfAdapter.update((AnyObjectPatch) patch);\n+    protected WorkflowResult<? extends AnyObjectUR> update(final AnyUR req) {\n+        return awfAdapter.update((AnyObjectUR) req);\n     }\n }"},{"sha":"2cc291cbabcc3c0966dac6b583bbf84b5e53f9bf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultGroupPullResultHandler.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPullResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -23,9 +23,9 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -73,8 +73,8 @@ protected AnyTO getAnyTO(final String key) {\n     }\n \n     @Override\n-    protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n-        return gwfAdapter.update((GroupPatch) patch);\n+    protected WorkflowResult<? extends AnyUR> update(final AnyUR req) {\n+        return gwfAdapter.update((GroupUR) req);\n     }\n \n     @Override\n@@ -91,19 +91,19 @@ protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta) {\n     }\n \n     @Override\n-    protected AnyPatch doUpdate(\n+    protected AnyUR doUpdate(\n             final AnyTO before,\n-            final AnyPatch anyPatch,\n+            final AnyUR req,\n             final SyncDelta delta,\n             final ProvisioningReport result) {\n \n-        GroupPatch groupPatch = GroupPatch.class.cast(anyPatch);\n+        GroupUR groupUR = GroupUR.class.cast(req);\n \n-        Pair<GroupPatch, List<PropagationStatus>> updated = groupProvisioningManager.update(\n-                groupPatch, Collections.singleton(profile.getTask().getResource().getKey()), true);\n+        Pair<GroupUR, List<PropagationStatus>> updated = groupProvisioningManager.update(\n+                groupUR, Collections.singleton(profile.getTask().getResource().getKey()), true);\n \n         String groupOwner = null;\n-        for (AttrPatch attrPatch : groupPatch.getPlainAttrs()) {\n+        for (AttrPatch attrPatch : groupUR.getPlainAttrs()) {\n             if (attrPatch.getOperation() == PatchOperation.ADD_REPLACE && attrPatch.getAttrTO() != null\n                     && attrPatch.getAttrTO().getSchema().isEmpty() && !attrPatch.getAttrTO().getValues().isEmpty()) {\n \n@@ -114,7 +114,7 @@ protected AnyPatch doUpdate(\n             groupOwnerMap.put(updated.getLeft().getKey(), groupOwner);\n         }\n \n-        return anyPatch;\n+        return req;\n     }\n \n }"},{"sha":"39da94a832cbe6ae7055e196192a41805c680304","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultGroupPushResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultGroupPushResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -46,7 +46,7 @@ protected AnyTO getAnyTO(final String key) {\n     }\n \n     @Override\n-    protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n-        return gwfAdapter.update((GroupPatch) patch);\n+    protected WorkflowResult<? extends AnyUR> update(final AnyUR req) {\n+        return gwfAdapter.update((GroupUR) req);\n     }\n }"},{"sha":"ede43f2d713ca2c3309635537ccf88a2648adf61","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPullResultHandler.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPullResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -22,8 +22,8 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -63,8 +63,8 @@ protected AnyTO getAnyTO(final String key) {\n     }\n \n     @Override\n-    protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n-        WorkflowResult<Pair<UserPatch, Boolean>> update = uwfAdapter.update((UserPatch) patch);\n+    protected WorkflowResult<? extends AnyUR> update(final AnyUR req) {\n+        WorkflowResult<Pair<UserUR, Boolean>> update = uwfAdapter.update((UserUR) req);\n         return new WorkflowResult<>(update.getResult().getLeft(), update.getPropByRes(), update.getPerformedTasks());\n     }\n \n@@ -81,17 +81,17 @@ protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta) {\n     }\n \n     @Override\n-    protected AnyPatch doUpdate(\n+    protected AnyUR doUpdate(\n             final AnyTO before,\n-            final AnyPatch anyPatch,\n+            final AnyUR anyUR,\n             final SyncDelta delta,\n             final ProvisioningReport result) {\n \n-        UserPatch userPatch = UserPatch.class.cast(anyPatch);\n+        UserUR userUR = UserUR.class.cast(anyUR);\n         Boolean enabled = pullUtils.readEnabled(delta.getObject(), profile.getTask());\n \n-        Pair<UserPatch, List<PropagationStatus>> updated = userProvisioningManager.update(\n-                userPatch,\n+        Pair<UserUR, List<PropagationStatus>> updated = userProvisioningManager.update(\n+                userUR,\n                 result,\n                 enabled,\n                 Collections.singleton(profile.getTask().getResource().getKey()),"},{"sha":"9bfec6055badd7787e846c26ef421b946570ce3f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -21,8 +21,8 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -74,8 +74,8 @@ protected AnyTO getAnyTO(final String key) {\n     }\n \n     @Override\n-    protected WorkflowResult<? extends AnyPatch> update(final AnyPatch patch) {\n-        WorkflowResult<Pair<UserPatch, Boolean>> update = uwfAdapter.update((UserPatch) patch);\n+    protected WorkflowResult<? extends AnyUR> update(final AnyUR req) {\n+        WorkflowResult<Pair<UserUR, Boolean>> update = uwfAdapter.update((UserUR) req);\n         return new WorkflowResult<>(update.getResult().getLeft(), update.getPropByRes(), update.getPerformedTasks());\n     }\n }"},{"sha":"969571dd10808277d7cd6741cbb22c902645db44","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPMembershipPullActions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPMembershipPullActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -25,7 +25,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -129,14 +129,14 @@ protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector\n      */\n     @Transactional(readOnly = true)\n     @Override\n-    public <P extends AnyPatch> void beforeUpdate(\n+    public <P extends AnyUR> void beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final EntityTO entity,\n-            final P anyPatch) throws JobExecutionException {\n+            final P anyUR) throws JobExecutionException {\n \n         if (!(entity instanceof GroupTO)) {\n-            super.beforeUpdate(profile, delta, entity, anyPatch);\n+            super.beforeUpdate(profile, delta, entity, anyUR);\n         }\n \n         groupDAO.findUMemberships(groupDAO.find(entity.getKey())).forEach(uMembership -> {"},{"sha":"fcc6384aee242a692d5a286fbc198281183e6424","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,9 +20,9 @@\n \n import java.util.Base64;\n import javax.xml.bind.DatatypeConverter;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -68,14 +68,14 @@ public void beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <M extends AnyPatch> void beforeUpdate(\n+    public <M extends AnyUR> void beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final EntityTO entityTO,\n-            final M anyPatch) throws JobExecutionException {\n+            final M anyUR) throws JobExecutionException {\n \n-        if (anyPatch instanceof UserPatch) {\n-            PasswordPatch modPassword = ((UserPatch) anyPatch).getPassword();\n+        if (anyUR instanceof UserUR) {\n+            PasswordPatch modPassword = ((UserUR) anyUR).getPassword();\n             parseEncodedPassword(modPassword == null ? null : modPassword.getValue());\n         }\n     }"},{"sha":"a7acb6f8f72f5a8ff864f0237aa14b241a042740","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -25,7 +25,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -216,7 +216,7 @@ public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final\n     }\n \n     /**\n-     * Build {@link AnyPatch} out of connector object attributes and schema mapping.\n+     * Build {@link AnyUR} out of connector object attributes and schema mapping.\n      *\n      * @param key any object to be updated\n      * @param obj connector object\n@@ -229,7 +229,7 @@ public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final\n      */\n     @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n-    public <T extends AnyPatch> T getAnyPatch(\n+    public <T extends AnyUR> T getAnyUR(\n             final String key,\n             final ConnectorObject obj,\n             final AnyTO original,\n@@ -240,7 +240,7 @@ public <T extends AnyPatch> T getAnyPatch(\n         AnyTO updated = getAnyTOFromConnObject(obj, pullTask, provision, anyUtils);\n         updated.setKey(key);\n \n-        T anyPatch = null;\n+        T anyUR = null;\n         if (null != anyUtils.anyTypeKind()) {\n             switch (anyUtils.anyTypeKind()) {\n                 case USER:\n@@ -263,7 +263,7 @@ public <T extends AnyPatch> T getAnyPatch(\n                     updatedUser.setSecurityQuestion(updatedUser.getSecurityQuestion());\n                     updatedUser.setMustChangePassword(originalUser.isMustChangePassword());\n \n-                    anyPatch = (T) AnyOperations.diff(updatedUser, originalUser, true);\n+                    anyUR = (T) AnyOperations.diff(updatedUser, originalUser, true);\n                     break;\n \n                 case GROUP:\n@@ -279,7 +279,7 @@ public <T extends AnyPatch> T getAnyPatch(\n                     updatedGroup.getADynMembershipConds().putAll(originalGroup.getADynMembershipConds());\n                     updatedGroup.getTypeExtensions().addAll(originalGroup.getTypeExtensions());\n \n-                    anyPatch = (T) AnyOperations.diff(updatedGroup, originalGroup, true);\n+                    anyUR = (T) AnyOperations.diff(updatedGroup, originalGroup, true);\n                     break;\n \n                 case ANY_OBJECT:\n@@ -290,17 +290,17 @@ public <T extends AnyPatch> T getAnyPatch(\n                         updatedAnyObject.setName(originalAnyObject.getName());\n                     }\n \n-                    anyPatch = (T) AnyOperations.diff(updatedAnyObject, originalAnyObject, true);\n+                    anyUR = (T) AnyOperations.diff(updatedAnyObject, originalAnyObject, true);\n                     break;\n \n                 default:\n             }\n         }\n         // SYNCOPE-1343, remove null or empty values from the patch plain attributes\n-        if (anyPatch != null) {\n-            AnyOperations.cleanEmptyAttrs(updated, anyPatch);\n+        if (anyUR != null) {\n+            AnyOperations.cleanEmptyAttrs(updated, anyUR);\n         }\n-        return anyPatch;\n+        return anyUR;\n     }\n \n     private <T extends AnyTO> T getAnyTOFromConnObject("},{"sha":"79a2ac32c1dadc725af79187583ee758463b621c","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -29,10 +29,10 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.AssociationPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.ResourceAR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -55,15 +55,15 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n-public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>\n+public abstract class AbstractAnyService<TO extends AnyTO, UR extends AnyUR>\n         extends AbstractServiceImpl\n         implements AnyService<TO> {\n \n     protected abstract AnyDAO<?> getAnyDAO();\n \n-    protected abstract AbstractAnyLogic<TO, P> getAnyLogic();\n+    protected abstract AbstractAnyLogic<TO, UR> getAnyLogic();\n \n-    protected abstract P newPatch(String key);\n+    protected abstract UR newUpdateReq(String key);\n \n     @Override\n     public Set<AttrTO> read(final String key, final SchemaType schemaType) {\n@@ -149,12 +149,12 @@ protected Date findLastChange(final String key) {\n         return lastChange;\n     }\n \n-    protected Response doUpdate(final P anyPatch) {\n-        anyPatch.setKey(getActualKey(getAnyDAO(), anyPatch.getKey()));\n-        Date etagDate = findLastChange(anyPatch.getKey());\n+    protected Response doUpdate(final UR updateReq) {\n+        updateReq.setKey(getActualKey(getAnyDAO(), updateReq.getKey()));\n+        Date etagDate = findLastChange(updateReq.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n-        ProvisioningResult<TO> updated = getAnyLogic().update(anyPatch, isNullPriorityAsync());\n+        ProvisioningResult<TO> updated = getAnyLogic().update(updateReq, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n \n@@ -165,22 +165,22 @@ private void addUpdateOrReplaceAttr(\n             throw new NotFoundException(\"Must specify schema\");\n         }\n \n-        P patch = newPatch(key);\n+        UR updateReq = newUpdateReq(key);\n \n         switch (schemaType) {\n             case VIRTUAL:\n-                patch.getVirAttrs().add(attrTO);\n+                updateReq.getVirAttrs().add(attrTO);\n                 break;\n \n             case PLAIN:\n-                patch.getPlainAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n+                updateReq.getPlainAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n                 break;\n \n             case DERIVED:\n             default:\n         }\n \n-        doUpdate(patch);\n+        doUpdate(updateReq);\n     }\n \n     @Override\n@@ -211,32 +211,32 @@ public Response delete(final String key) {\n     }\n \n     @Override\n-    public Response deassociate(final DeassociationPatch patch) {\n-        Date etagDate = findLastChange(patch.getKey());\n+    public Response deassociate(final ResourceDR req) {\n+        Date etagDate = findLastChange(req.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> updated;\n-        switch (patch.getAction()) {\n+        switch (req.getAction()) {\n             case UNLINK:\n                 updated = new ProvisioningResult<>();\n-                updated.setEntity(getAnyLogic().unlink(patch.getKey(), patch.getResources()));\n+                updated.setEntity(getAnyLogic().unlink(req.getKey(), req.getResources()));\n                 break;\n \n             case UNASSIGN:\n-                updated = getAnyLogic().unassign(patch.getKey(), patch.getResources(), isNullPriorityAsync());\n+                updated = getAnyLogic().unassign(req.getKey(), req.getResources(), isNullPriorityAsync());\n                 break;\n \n             case DEPROVISION:\n-                updated = getAnyLogic().deprovision(patch.getKey(), patch.getResources(), isNullPriorityAsync());\n+                updated = getAnyLogic().deprovision(req.getKey(), req.getResources(), isNullPriorityAsync());\n                 break;\n \n             default:\n                 throw new BadRequestException(\"Missing action\");\n         }\n \n         List<BatchResponseItem> batchResponseItems;\n-        if (patch.getAction() == ResourceDeassociationAction.UNLINK) {\n-            batchResponseItems = patch.getResources().stream().map(resource -> {\n+        if (req.getAction() == ResourceDeassociationAction.UNLINK) {\n+            batchResponseItems = req.getResources().stream().map(resource -> {\n                 BatchResponseItem item = new BatchResponseItem();\n \n                 item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(resource));\n@@ -288,34 +288,34 @@ public Response deassociate(final DeassociationPatch patch) {\n     }\n \n     @Override\n-    public Response associate(final AssociationPatch patch) {\n-        Date etagDate = findLastChange(patch.getKey());\n+    public Response associate(final ResourceAR req) {\n+        Date etagDate = findLastChange(req.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> updated;\n-        switch (patch.getAction()) {\n+        switch (req.getAction()) {\n             case LINK:\n                 updated = new ProvisioningResult<>();\n                 updated.setEntity(getAnyLogic().link(\n-                        patch.getKey(),\n-                        patch.getResources()));\n+                        req.getKey(),\n+                        req.getResources()));\n                 break;\n \n             case ASSIGN:\n                 updated = getAnyLogic().assign(\n-                        patch.getKey(),\n-                        patch.getResources(),\n-                        patch.getValue() != null,\n-                        patch.getValue(),\n+                        req.getKey(),\n+                        req.getResources(),\n+                        req.getValue() != null,\n+                        req.getValue(),\n                         isNullPriorityAsync());\n                 break;\n \n             case PROVISION:\n                 updated = getAnyLogic().provision(\n-                        patch.getKey(),\n-                        patch.getResources(),\n-                        patch.getValue() != null,\n-                        patch.getValue(),\n+                        req.getKey(),\n+                        req.getResources(),\n+                        req.getValue() != null,\n+                        req.getValue(),\n                         isNullPriorityAsync());\n                 break;\n \n@@ -324,8 +324,8 @@ public Response associate(final AssociationPatch patch) {\n         }\n \n         List<BatchResponseItem> batchResponseItems;\n-        if (patch.getAction() == ResourceAssociationAction.LINK) {\n-            batchResponseItems = patch.getResources().stream().map(resource -> {\n+        if (req.getAction() == ResourceAssociationAction.LINK) {\n+            batchResponseItems = req.getResources().stream().map(resource -> {\n                 BatchResponseItem item = new BatchResponseItem();\n \n                 item.getHeaders().put(RESTHeaders.RESOURCE_KEY, Arrays.asList(resource));"},{"sha":"8bcb7bed191dd67a3bae9b2fb4b6cca28e158494","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":7,"deletions":23,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,9 +20,8 @@\n \n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -38,7 +37,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObjectPatch> implements AnyObjectService {\n+public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObjectUR> implements AnyObjectService {\n \n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n@@ -52,15 +51,13 @@ protected AnyDAO<?> getAnyDAO() {\n     }\n \n     @Override\n-    protected AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> getAnyLogic() {\n+    protected AbstractAnyLogic<AnyObjectTO, AnyObjectUR> getAnyLogic() {\n         return logic;\n     }\n \n     @Override\n-    protected AnyObjectPatch newPatch(final String key) {\n-        AnyObjectPatch patch = new AnyObjectPatch();\n-        patch.setKey(key);\n-        return patch;\n+    protected AnyObjectUR newUpdateReq(final String key) {\n+        return new AnyObjectUR.Builder().key(key).build();\n     }\n \n     @Override\n@@ -70,20 +67,8 @@ public Response create(final AnyObjectTO anyObjectTO) {\n     }\n \n     @Override\n-    public Response update(final AnyObjectTO anyObjectTO) {\n-        anyObjectTO.setKey(getActualKey(getAnyDAO(), anyObjectTO.getKey()));\n-        AnyObjectTO before = logic.read(anyObjectTO.getKey());\n-\n-        checkETag(before.getETagValue());\n-\n-        ProvisioningResult<AnyObjectTO> updated =\n-                logic.update(AnyOperations.diff(anyObjectTO, before, false), isNullPriorityAsync());\n-        return modificationResponse(updated);\n-    }\n-\n-    @Override\n-    public Response update(final AnyObjectPatch anyObjectPatch) {\n-        return doUpdate(anyObjectPatch);\n+    public Response update(final AnyObjectUR updateReq) {\n+        return doUpdate(updateReq);\n     }\n \n     @Override\n@@ -98,5 +83,4 @@ public PagedResult<AnyObjectTO> search(final AnyQuery anyQuery) {\n \n         return super.search(anyQuery);\n     }\n-\n }"},{"sha":"3f453c528c58031a8bf4d635b7580882ac37b19a","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":7,"deletions":22,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,8 +20,7 @@\n \n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -35,7 +34,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupPatch> implements GroupService {\n+public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupUR> implements GroupService {\n \n     @Autowired\n     private GroupDAO groupDAO;\n@@ -49,15 +48,13 @@ protected AnyDAO<?> getAnyDAO() {\n     }\n \n     @Override\n-    protected AbstractAnyLogic<GroupTO, GroupPatch> getAnyLogic() {\n+    protected AbstractAnyLogic<GroupTO, GroupUR> getAnyLogic() {\n         return logic;\n     }\n \n     @Override\n-    protected GroupPatch newPatch(final String key) {\n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(key);\n-        return patch;\n+    protected GroupUR newUpdateReq(final String key) {\n+        return new GroupUR.Builder().key(key).build();\n     }\n \n     @Override\n@@ -67,20 +64,8 @@ public Response create(final GroupTO groupTO) {\n     }\n \n     @Override\n-    public Response update(final GroupTO groupTO) {\n-        groupTO.setKey(getActualKey(getAnyDAO(), groupTO.getKey()));\n-        GroupTO before = logic.read(groupTO.getKey());\n-\n-        checkETag(before.getETagValue());\n-\n-        ProvisioningResult<GroupTO> updated =\n-                logic.update(AnyOperations.diff(groupTO, before, false), isNullPriorityAsync());\n-        return modificationResponse(updated);\n-    }\n-\n-    @Override\n-    public Response update(final GroupPatch groupPatch) {\n-        return doUpdate(groupPatch);\n+    public Response update(final GroupUR updateReq) {\n+        return doUpdate(updateReq);\n     }\n \n     @Override"},{"sha":"e6965e53e3a57594513c73ebe63b5036f9192db0","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RemediationServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRemediationServiceImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -102,10 +102,10 @@ private void check(final String key, final String anyKey) {\n     }\n \n     @Override\n-    public Response remedy(final String remediationKey, final AnyPatch anyPatch) {\n-        check(remediationKey, anyPatch.getKey());\n+    public Response remedy(final String remediationKey, final AnyUR anyUR) {\n+        check(remediationKey, anyUR.getKey());\n \n-        ProvisioningResult<?> updated = logic.remedy(remediationKey, anyPatch, isNullPriorityAsync());\n+        ProvisioningResult<?> updated = logic.remedy(remediationKey, anyUR, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n "},{"sha":"1227609d64f0d3c4199ceec8e7a1a0c2d8bf5e94","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -22,8 +22,8 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -66,8 +66,8 @@ public Response read() {\n     }\n \n     @Override\n-    public Response update(final UserPatch patch) {\n-        ProvisioningResult<UserTO> updated = logic.selfUpdate(patch, isNullPriorityAsync());\n+    public Response update(final UserUR updateReq) {\n+        ProvisioningResult<UserTO> updated = logic.selfUpdate(updateReq, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n \n@@ -78,8 +78,8 @@ public Response update(final UserTO user) {\n     }\n \n     @Override\n-    public Response status(final StatusPatch statusPatch) {\n-        ProvisioningResult<UserTO> updated = logic.selfStatus(statusPatch, isNullPriorityAsync());\n+    public Response status(final StatusR statusR) {\n+        ProvisioningResult<UserTO> updated = logic.selfStatus(statusR, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n "},{"sha":"29648f1d479c04bdb9107860eb07b096cae58baf","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":11,"deletions":26,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,9 +20,8 @@\n \n import java.util.Date;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -34,7 +33,7 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserServiceImpl extends AbstractAnyService<UserTO, UserPatch> implements UserService {\n+public class UserServiceImpl extends AbstractAnyService<UserTO, UserUR> implements UserService {\n \n     @Autowired\n     private UserDAO userDAO;\n@@ -48,15 +47,13 @@ protected AnyDAO<?> getAnyDAO() {\n     }\n \n     @Override\n-    protected AbstractAnyLogic<UserTO, UserPatch> getAnyLogic() {\n+    protected AbstractAnyLogic<UserTO, UserUR> getAnyLogic() {\n         return logic;\n     }\n \n     @Override\n-    protected UserPatch newPatch(final String key) {\n-        UserPatch patch = new UserPatch();\n-        patch.setKey(key);\n-        return patch;\n+    protected UserUR newUpdateReq(final String key) {\n+        return new UserUR.Builder().key(key).build();\n     }\n \n     @Override\n@@ -66,28 +63,16 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n     }\n \n     @Override\n-    public Response update(final UserTO userTO) {\n-        userTO.setKey(getActualKey(getAnyDAO(), userTO.getKey()));\n-        UserTO before = logic.read(userTO.getKey());\n-\n-        checkETag(before.getETagValue());\n-\n-        ProvisioningResult<UserTO> updated =\n-                logic.update(AnyOperations.diff(userTO, before, false), isNullPriorityAsync());\n-        return modificationResponse(updated);\n-    }\n-\n-    @Override\n-    public Response update(final UserPatch userPatch) {\n-        return doUpdate(userPatch);\n+    public Response update(final UserUR updateReq) {\n+        return doUpdate(updateReq);\n     }\n \n     @Override\n-    public Response status(final StatusPatch statusPatch) {\n-        Date etagDate = findLastChange(statusPatch.getKey());\n+    public Response status(final StatusR statusR) {\n+        Date etagDate = findLastChange(statusR.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n-        ProvisioningResult<UserTO> updated = logic.status(statusPatch, isNullPriorityAsync());\n+        ProvisioningResult<UserTO> updated = logic.status(statusR, isNullPriorityAsync());\n         return modificationResponse(updated);\n     }\n }"},{"sha":"4b3bbf85a7f39405f993a09245c2e89401ccfea4","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/AnyObjectWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n \n@@ -38,10 +38,10 @@ public interface AnyObjectWorkflowAdapter extends WorkflowAdapter {\n     /**\n      * Update a anyObject.\n      *\n-     * @param anyObjectPatch modification set to be performed\n+     * @param anyObjectUR modification set to be performed\n      * @return anyObject just updated and propagations to be performed\n      */\n-    WorkflowResult<AnyObjectPatch> update(AnyObjectPatch anyObjectPatch);\n+    WorkflowResult<AnyObjectUR> update(AnyObjectUR anyObjectUR);\n \n     /**\n      * Delete a anyObject."},{"sha":"dd7fe6108d9d19bbb94a8b9b084c27537ce04495","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/GroupWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.common.lib.to.GroupTO;\n \n@@ -38,10 +38,10 @@ public interface GroupWorkflowAdapter extends WorkflowAdapter {\n     /**\n      * Update a group.\n      *\n-     * @param groupPatch modification set to be performed\n+     * @param groupUR modification set to be performed\n      * @return group just updated and propagations to be performed\n      */\n-    WorkflowResult<GroupPatch> update(GroupPatch groupPatch);\n+    WorkflowResult<GroupUR> update(GroupUR groupUR);\n \n     /**\n      * Delete a group."},{"sha":"57cb24949a8e492ed695dc534780f08947068ccf","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/UserWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.workflow.api;\n \n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.common.lib.to.UserTO;\n \n@@ -61,10 +61,10 @@ WorkflowResult<Pair<String, Boolean>> create(\n     /**\n      * Update an user.\n      *\n-     * @param userPatch modification set to be performed\n+     * @param userUR modification set to be performed\n      * @return user just updated and propagations to be performed\n      */\n-    WorkflowResult<Pair<UserPatch, Boolean>> update(UserPatch userPatch);\n+    WorkflowResult<Pair<UserUR, Boolean>> update(UserUR userUR);\n \n     /**\n      * Suspend an user.\n@@ -105,7 +105,7 @@ WorkflowResult<Pair<String, Boolean>> create(\n      * @param password new password value\n      * @return user just updated and propagations to be performed\n      */\n-    WorkflowResult<Pair<UserPatch, Boolean>> confirmPasswordReset(String userKey, String token, String password);\n+    WorkflowResult<Pair<UserUR, Boolean>> confirmPasswordReset(String userKey, String token, String password);\n \n     /**\n      * Delete an user."},{"sha":"0b4b66d771809ea0ad6a8f0105b61719d454ebef","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractAnyObjectWorkflowAdapter.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -54,15 +54,14 @@ public WorkflowResult<String> create(final AnyObjectTO anyObjectTO) {\n         return doCreate(anyObjectTO);\n     }\n \n-    protected abstract WorkflowResult<AnyObjectPatch> doUpdate(AnyObject anyObject, AnyObjectPatch anyObjectPatch);\n+    protected abstract WorkflowResult<AnyObjectUR> doUpdate(AnyObject anyObject, AnyObjectUR anyObjectUR);\n \n     @Override\n-    public WorkflowResult<AnyObjectPatch> update(final AnyObjectPatch anyObjectPatch) {\n-        WorkflowResult<AnyObjectPatch> result =\n-                doUpdate(anyObjectDAO.authFind(anyObjectPatch.getKey()), anyObjectPatch);\n+    public WorkflowResult<AnyObjectUR> update(final AnyObjectUR anyObjectUR) {\n+        WorkflowResult<AnyObjectUR> result = doUpdate(anyObjectDAO.authFind(anyObjectUR.getKey()), anyObjectUR);\n \n         // re-read to ensure that requester's administration rights are still valid\n-        anyObjectDAO.authFind(anyObjectPatch.getKey());\n+        anyObjectDAO.authFind(anyObjectUR.getKey());\n \n         return result;\n     }"},{"sha":"ca8c6bbfb24964e0d618c8ea6e3a3b2aa9926941","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractGroupWorkflowAdapter.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -54,14 +54,14 @@ public WorkflowResult<String> create(final GroupTO groupTO) {\n         return doCreate(groupTO);\n     }\n \n-    protected abstract WorkflowResult<GroupPatch> doUpdate(Group group, GroupPatch groupPatch);\n+    protected abstract WorkflowResult<GroupUR> doUpdate(Group group, GroupUR groupUR);\n \n     @Override\n-    public WorkflowResult<GroupPatch> update(final GroupPatch groupPatch) {\n-        WorkflowResult<GroupPatch> result = doUpdate(groupDAO.authFind(groupPatch.getKey()), groupPatch);\n+    public WorkflowResult<GroupUR> update(final GroupUR groupUR) {\n+        WorkflowResult<GroupUR> result = doUpdate(groupDAO.authFind(groupUR.getKey()), groupUR);\n \n         // re-read to ensure that requester's administration rights are still valid\n-        groupDAO.authFind(groupPatch.getKey());\n+        groupDAO.authFind(groupUR.getKey());\n \n         return result;\n     }"},{"sha":"33433d9dcd6ce37ab7e7f9ad5ba2ee75ee29f84c","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -78,14 +78,14 @@ public WorkflowResult<String> activate(final String key, final String token) {\n         return doActivate(userDAO.authFind(key), token);\n     }\n \n-    protected abstract WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(User user, UserPatch userPatch);\n+    protected abstract WorkflowResult<Pair<UserUR, Boolean>> doUpdate(User user, UserUR userUR);\n \n     @Override\n-    public WorkflowResult<Pair<UserPatch, Boolean>> update(final UserPatch userPatch) {\n-        WorkflowResult<Pair<UserPatch, Boolean>> result = doUpdate(userDAO.authFind(userPatch.getKey()), userPatch);\n+    public WorkflowResult<Pair<UserUR, Boolean>> update(final UserUR userUR) {\n+        WorkflowResult<Pair<UserUR, Boolean>> result = doUpdate(userDAO.authFind(userUR.getKey()), userUR);\n \n         // re-read to ensure that requester's administration rights are still valid\n-        userDAO.authFind(userPatch.getKey());\n+        userDAO.authFind(userUR.getKey());\n \n         return result;\n     }\n@@ -146,11 +146,11 @@ public void requestPasswordReset(final String key) {\n         doRequestPasswordReset(userDAO.authFind(key));\n     }\n \n-    protected abstract WorkflowResult<Pair<UserPatch, Boolean>> doConfirmPasswordReset(\n+    protected abstract WorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n             User user, String token, String password);\n \n     @Override\n-    public WorkflowResult<Pair<UserPatch, Boolean>> confirmPasswordReset(\n+    public WorkflowResult<Pair<UserUR, Boolean>> confirmPasswordReset(\n             final String key, final String token, final String password) {\n \n         return doConfirmPasswordReset(userDAO.authFind(key), token, password);"},{"sha":"0cc7dd9dec182014c941e030900f30ccee5d0585","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -43,9 +43,9 @@ protected WorkflowResult<String> doCreate(final AnyObjectTO anyObjectTO) {\n     }\n \n     @Override\n-    protected WorkflowResult<AnyObjectPatch> doUpdate(final AnyObject anyObject, final AnyObjectPatch anyObjectPatch) {\n-        PropagationByResource propByRes = dataBinder.update(anyObject, anyObjectPatch);\n-        return new WorkflowResult<>(anyObjectPatch, propByRes, \"update\");\n+    protected WorkflowResult<AnyObjectUR> doUpdate(final AnyObject anyObject, final AnyObjectUR anyObjectUR) {\n+        PropagationByResource propByRes = dataBinder.update(anyObject, anyObjectUR);\n+        return new WorkflowResult<>(anyObjectUR, propByRes, \"update\");\n     }\n \n     @Override"},{"sha":"262dabc71b7a7c31c21737011e8cf3f9ecee1827","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -43,9 +43,9 @@ protected WorkflowResult<String> doCreate(final GroupTO groupTO) {\n     }\n \n     @Override\n-    protected WorkflowResult<GroupPatch> doUpdate(final Group group, final GroupPatch groupPatch) {\n-        PropagationByResource propByRes = dataBinder.update(group, groupPatch);\n-        return new WorkflowResult<>(groupPatch, propByRes, \"update\");\n+    protected WorkflowResult<GroupUR> doUpdate(final Group group, final GroupUR groupUR) {\n+        PropagationByResource propByRes = dataBinder.update(group, groupUR);\n+        return new WorkflowResult<>(groupUR, propByRes, \"update\");\n     }\n \n     @Override"},{"sha":"76b7f587a1de290419978055377f1c362d1f7ec1","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.workflow.java;\n \n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -89,9 +89,9 @@ protected WorkflowResult<String> doActivate(final User user, final String token)\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(final User user, final UserPatch userPatch) {\n-        PropagationByResource propByRes = dataBinder.update(user, userPatch);\n-        return new WorkflowResult<>(Pair.of(userPatch, !user.isSuspended()), propByRes, \"update\");\n+    protected WorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final UserUR userUR) {\n+        PropagationByResource propByRes = dataBinder.update(user, userUR);\n+        return new WorkflowResult<>(Pair.of(userUR, !user.isSuspended()), propByRes, \"update\");\n     }\n \n     @Override\n@@ -119,7 +119,7 @@ protected void doRequestPasswordReset(final User user) {\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserPatch, Boolean>> doConfirmPasswordReset(\n+    protected WorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n             final User user, final String token, final String password) {\n \n         if (!user.checkToken(token)) {\n@@ -128,14 +128,14 @@ protected WorkflowResult<Pair<UserPatch, Boolean>> doConfirmPasswordReset(\n \n         user.removeToken();\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(user.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().\n                 onSyncope(true).\n                 resources(userDAO.findAllResourceKeys(user.getKey())).\n                 value(password).build());\n \n-        return doUpdate(user, userPatch);\n+        return doUpdate(user, userUR);\n     }\n \n     @Override"},{"sha":"8cdfa37f65d4a4ee20998e10741419c37f0cc050","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelAnyObjectProvisioningManager.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -27,7 +27,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n@@ -66,25 +66,25 @@ public Pair<String, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<AnyObjectPatch, List<PropagationStatus>> update(\n-            final AnyObjectPatch anyPatch, final boolean nullPriorityAsync) {\n+    public Pair<AnyObjectUR, List<PropagationStatus>> update(\n+            final AnyObjectUR anyUR, final boolean nullPriorityAsync) {\n \n-        return update(anyPatch, Collections.<String>emptySet(), nullPriorityAsync);\n+        return update(anyUR, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<AnyObjectPatch, List<PropagationStatus>> update(\n-            final AnyObjectPatch anyPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+    public Pair<AnyObjectUR, List<PropagationStatus>> update(\n+            final AnyObjectUR anyUR, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateAnyObjectPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:updateAnyObject\", anyPatch, props);\n+        sendMessage(\"direct:updateAnyObject\", anyUR, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -124,33 +124,33 @@ public List<PropagationStatus> delete(\n     }\n \n     @Override\n-    public String unlink(final AnyObjectPatch anyObjectPatch) {\n+    public String unlink(final AnyObjectUR anyObjectUR) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkAnyObjectPort\");\n \n-        sendMessage(\"direct:unlinkAnyObject\", anyObjectPatch);\n+        sendMessage(\"direct:unlinkAnyObject\", anyObjectUR);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(AnyObjectPatch.class).getKey();\n+        return exchange.getIn().getBody(AnyObjectUR.class).getKey();\n     }\n \n     @Override\n-    public String link(final AnyObjectPatch anyObjectPatch) {\n+    public String link(final AnyObjectUR anyObjectUR) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:linkAnyObjectPort\");\n \n-        sendMessage(\"direct:linkAnyObject\", anyObjectPatch);\n+        sendMessage(\"direct:linkAnyObject\", anyObjectUR);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(AnyObjectPatch.class).getKey();\n+        return exchange.getIn().getBody(AnyObjectUR.class).getKey();\n     }\n \n     @Override"},{"sha":"ebb563c9aeb6f2cd767a7df59136ca3c931f187a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -27,7 +27,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n@@ -85,25 +85,23 @@ public Pair<String, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<GroupPatch, List<PropagationStatus>> update(\n-            final GroupPatch anyPatch, final boolean nullPriorityAsync) {\n-\n-        return update(anyPatch, Collections.<String>emptySet(), nullPriorityAsync);\n+    public Pair<GroupUR, List<PropagationStatus>> update(final GroupUR groupUR, final boolean nullPriorityAsync) {\n+        return update(groupUR, Collections.<String>emptySet(), nullPriorityAsync);\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<GroupPatch, List<PropagationStatus>> update(\n-            final GroupPatch anyPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+    public Pair<GroupUR, List<PropagationStatus>> update(\n+            final GroupUR groupUR, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:updateGroup\", anyPatch, props);\n+        sendMessage(\"direct:updateGroup\", groupUR, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -143,33 +141,33 @@ public List<PropagationStatus> delete(\n     }\n \n     @Override\n-    public String unlink(final GroupPatch groupPatch) {\n+    public String unlink(final GroupUR groupUR) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkGroupPort\");\n \n-        sendMessage(\"direct:unlinkGroup\", groupPatch);\n+        sendMessage(\"direct:unlinkGroup\", groupUR);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(GroupPatch.class).getKey();\n+        return exchange.getIn().getBody(GroupUR.class).getKey();\n     }\n \n     @Override\n-    public String link(final GroupPatch groupPatch) {\n+    public String link(final GroupUR groupUR) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:linkGroupPort\");\n \n-        sendMessage(\"direct:linkGroup\", groupPatch);\n+        sendMessage(\"direct:linkGroup\", groupUR);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(GroupPatch.class).getKey();\n+        return exchange.getIn().getBody(GroupUR.class).getKey();\n     }\n \n     @Override"},{"sha":"b2ca24bab4832803501ab45808f5d6274afa4d50","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":38,"deletions":44,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,8 +28,8 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -90,13 +90,13 @@ public Pair<String, List<PropagationStatus>> create(\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<UserPatch, List<PropagationStatus>> update(final UserPatch userPatch, final boolean nullPriorityAsync) {\n+    public Pair<UserUR, List<PropagationStatus>> update(final UserUR userUR, final boolean nullPriorityAsync) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:updatePort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:updateUser\", userPatch, props);\n+        sendMessage(\"direct:updateUser\", userUR, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -108,10 +108,10 @@ public Pair<UserPatch, List<PropagationStatus>> update(final UserPatch userPatch\n     }\n \n     @Override\n-    public Pair<UserPatch, List<PropagationStatus>> update(\n-            final UserPatch anyPatch, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n+    public Pair<UserUR, List<PropagationStatus>> update(\n+            final UserUR userUR, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        return update(anyPatch, new ProvisioningReport(), null, excludedResources, nullPriorityAsync);\n+        return update(userUR, new ProvisioningReport(), null, excludedResources, nullPriorityAsync);\n     }\n \n     @Override\n@@ -143,38 +143,36 @@ public List<PropagationStatus> delete(\n     }\n \n     @Override\n-    public String unlink(final UserPatch userPatch) {\n+    public String unlink(final UserUR userUR) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkPort\");\n \n-        sendMessage(\"direct:unlinkUser\", userPatch);\n+        sendMessage(\"direct:unlinkUser\", userUR);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(UserPatch.class).getKey();\n+        return exchange.getIn().getBody(UserUR.class).getKey();\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> activate(\n-            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n-\n+    public Pair<String, List<PropagationStatus>> activate(final StatusR statusR, final boolean nullPriorityAsync) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"token\", statusPatch.getToken());\n-        props.put(\"key\", statusPatch.getKey());\n-        props.put(\"statusPatch\", statusPatch);\n+        props.put(\"token\", statusR.getToken());\n+        props.put(\"key\", statusR.getKey());\n+        props.put(\"statusR\", statusR);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        if (statusPatch.isOnSyncope()) {\n-            sendMessage(\"direct:activateUser\", statusPatch.getKey(), props);\n+        if (statusR.isOnSyncope()) {\n+            sendMessage(\"direct:activateUser\", statusR.getKey(), props);\n         } else {\n             WorkflowResult<String> updated =\n-                    new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -189,21 +187,19 @@ public Pair<String, List<PropagationStatus>> activate(\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> reactivate(\n-            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n-\n+    public Pair<String, List<PropagationStatus>> reactivate(final StatusR statusR, final boolean nullPriorityAsync) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", statusPatch.getKey());\n-        props.put(\"statusPatch\", statusPatch);\n+        props.put(\"key\", statusR.getKey());\n+        props.put(\"statusR\", statusR);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        if (statusPatch.isOnSyncope()) {\n-            sendMessage(\"direct:reactivateUser\", statusPatch.getKey(), props);\n+        if (statusR.isOnSyncope()) {\n+            sendMessage(\"direct:reactivateUser\", statusR.getKey(), props);\n         } else {\n             WorkflowResult<String> updated =\n-                    new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -218,21 +214,19 @@ public Pair<String, List<PropagationStatus>> reactivate(\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<String, List<PropagationStatus>> suspend(\n-            final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n-\n+    public Pair<String, List<PropagationStatus>> suspend(final StatusR statusR, final boolean nullPriorityAsync) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", statusPatch.getKey());\n-        props.put(\"statusPatch\", statusPatch);\n+        props.put(\"key\", statusR.getKey());\n+        props.put(\"statusR\", statusR);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        if (statusPatch.isOnSyncope()) {\n-            sendMessage(\"direct:suspendUser\", statusPatch.getKey(), props);\n+        if (statusR.isOnSyncope()) {\n+            sendMessage(\"direct:suspendUser\", statusR.getKey(), props);\n         } else {\n             WorkflowResult<String> updated =\n-                    new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -246,18 +240,18 @@ public Pair<String, List<PropagationStatus>> suspend(\n     }\n \n     @Override\n-    public String link(final UserPatch anyPatch) {\n+    public String link(final UserUR userUR) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:linkPort\");\n \n-        sendMessage(\"direct:linkUser\", anyPatch);\n+        sendMessage(\"direct:linkUser\", userUR);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        return exchange.getIn().getBody(UserPatch.class).getKey();\n+        return exchange.getIn().getBody(UserUR.class).getKey();\n     }\n \n     @Override\n@@ -314,8 +308,8 @@ public List<PropagationStatus> deprovision(\n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<UserPatch, List<PropagationStatus>> update(\n-            final UserPatch userPatch,\n+    public Pair<UserUR, List<PropagationStatus>> update(\n+            final UserUR userUR,\n             final ProvisioningReport result,\n             final Boolean enabled,\n             final Set<String> excludedResources,\n@@ -324,13 +318,13 @@ public Pair<UserPatch, List<PropagationStatus>> update(\n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateInPullPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"key\", userPatch.getKey());\n+        props.put(\"key\", userUR.getKey());\n         props.put(\"result\", result);\n         props.put(\"enabled\", enabled);\n         props.put(\"excludedResources\", excludedResources);\n         props.put(\"nullPriorityAsync\", nullPriorityAsync);\n \n-        sendMessage(\"direct:updateUserInPull\", userPatch, props);\n+        sendMessage(\"direct:updateUserInPull\", userUR, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -342,8 +336,8 @@ public Pair<UserPatch, List<PropagationStatus>> update(\n             result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to pull status anyway (if configured)\\n\" + ex.getMessage());\n \n-            WorkflowResult<Pair<UserPatch, Boolean>> updated = new WorkflowResult<>(\n-                    Pair.of(userPatch, false), new PropagationByResource(),\n+            WorkflowResult<Pair<UserUR, Boolean>> updated = new WorkflowResult<>(\n+                    Pair.of(userUR, false), new PropagationByResource(),\n                     new HashSet<>());\n             sendMessage(\"direct:userInPull\", updated, props);\n             exchange = pollingConsumer.receive();"},{"sha":"a0fff0abae3979419c30941582e1e07c78761e99","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -23,7 +23,7 @@\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n@@ -38,8 +38,8 @@ public ConfirmPasswordResetProducer(final Endpoint endpoint, final AnyTypeKind a\n     @Override\n     public void process(final Exchange exchange) throws Exception {\n         if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            WorkflowResult<Pair<UserPatch, Boolean>> updated =\n-                    (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n+            WorkflowResult<Pair<UserUR, Boolean>> updated =\n+                    (WorkflowResult<Pair<UserUR, Boolean>>) exchange.getIn().getBody();\n \n             List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(updated);\n "},{"sha":"abfc4cfb3506b9f92e57105230855dea189c17e4","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -24,9 +24,9 @@\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -52,22 +52,22 @@ public void process(final Exchange exchange) throws Exception {\n             Boolean changePwd = exchange.getProperty(\"changePwd\", Boolean.class);\n             String password = exchange.getProperty(\"password\", String.class);\n \n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(key);\n-            userPatch.getResources().addAll(resources.stream().map(resource\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(key);\n+            userUR.getResources().addAll(resources.stream().map(resource\n                     -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n                     collect(Collectors.toList()));\n \n             if (changePwd) {\n-                userPatch.setPassword(\n+                userUR.setPassword(\n                         new PasswordPatch.Builder().onSyncope(true).value(password).resources(resources).build());\n             }\n \n             PropagationByResource propByRes = new PropagationByResource();\n             propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-            WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<>(\n-                    ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n+            WorkflowResult<Pair<UserUR, Boolean>> wfResult = new WorkflowResult<>(\n+                    ImmutablePair.of(userUR, (Boolean) null), propByRes, \"update\");\n \n             List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n             PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);"},{"sha":"176cbb61b6709750096e5ac01bfddd50795f8526","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -24,11 +24,11 @@\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -58,8 +58,8 @@ public StatusProducer(\n     @Override\n     public void process(final Exchange exchange) throws Exception {\n         if (getAnyTypeKind() == AnyTypeKind.USER && isPull()) {\n-            WorkflowResult<Map.Entry<UserPatch, Boolean>> updated =\n-                    (WorkflowResult<Entry<UserPatch, Boolean>>) exchange.getIn().getBody();\n+            WorkflowResult<Map.Entry<UserUR, Boolean>> updated =\n+                    (WorkflowResult<Entry<UserUR, Boolean>>) exchange.getIn().getBody();\n \n             Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n             String key = exchange.getProperty(\"key\", String.class);\n@@ -86,16 +86,15 @@ public void process(final Exchange exchange) throws Exception {\n             }\n         } else if (getAnyTypeKind() == AnyTypeKind.USER) {\n             WorkflowResult<String> updated = (WorkflowResult<String>) exchange.getIn().getBody();\n-            StatusPatch statusPatch = exchange.getProperty(\"statusPatch\", StatusPatch.class);\n+            StatusR statusR = exchange.getProperty(\"statusR\", StatusR.class);\n             Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n             PropagationByResource propByRes = new PropagationByResource();\n-            propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n-            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n-                    AnyTypeKind.USER,\n-                    statusPatch.getKey(),\n+            propByRes.addAll(ResourceOperation.UPDATE, statusR.getResources());\n+            List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(AnyTypeKind.USER,\n+                    statusR.getKey(),\n                     false,\n-                    statusPatch.getType() != StatusPatchType.SUSPEND,\n+                    statusR.getType() != StatusRType.SUSPEND,\n                     propByRes,\n                     null,\n                     null);"},{"sha":"646fe364806a5f90ce5b88f008b468656c3dc882","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -23,7 +23,7 @@\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n@@ -43,12 +43,11 @@ public void process(final Exchange exchange) throws Exception {\n \n             // propagate suspension if and only if it is required by policy\n             if (updated != null && updated.getValue()) {\n-                UserPatch userPatch = new UserPatch();\n-                userPatch.setKey(updated.getKey().getResult());\n+                UserUR userUR = new UserUR.Builder().key(updated.getKey().getResult()).build();\n \n                 List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(\n                         new WorkflowResult<>(\n-                                Pair.of(userPatch, Boolean.FALSE),\n+                                Pair.of(userUR, Boolean.FALSE),\n                                 updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n                 getPropagationTaskExecutor().execute(taskInfos, false);\n             }"},{"sha":"11c5e28f999d83f70ef22e062106122ae4b2825e","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -23,9 +23,9 @@\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -45,9 +45,9 @@ public void process(final Exchange exchange) throws Exception {\n             Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n             Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-            if (actual instanceof UserPatch || isPull()) {\n-                WorkflowResult<Pair<UserPatch, Boolean>> updated =\n-                        (WorkflowResult<Pair<UserPatch, Boolean>>) exchange.getIn().getBody();\n+            if (actual instanceof UserUR || isPull()) {\n+                WorkflowResult<Pair<UserUR, Boolean>> updated =\n+                        (WorkflowResult<Pair<UserUR, Boolean>>) exchange.getIn().getBody();\n \n                 List<PropagationTaskInfo> taskInfos;\n                 if (isPull()) {\n@@ -59,17 +59,17 @@ public void process(final Exchange exchange) throws Exception {\n                 PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n                 exchange.getOut().setBody(Pair.of(updated.getResult().getLeft(), reporter.getStatuses()));\n-            } else if (actual instanceof AnyPatch) {\n-                WorkflowResult<? extends AnyPatch> updated =\n-                        (WorkflowResult<? extends AnyPatch>) exchange.getIn().getBody();\n+            } else if (actual instanceof AnyUR) {\n+                WorkflowResult<? extends AnyUR> updated =\n+                        (WorkflowResult<? extends AnyUR>) exchange.getIn().getBody();\n \n                 List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(\n-                        actual instanceof AnyObjectPatch ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n+                        actual instanceof AnyObjectUR ? AnyTypeKind.ANY_OBJECT : AnyTypeKind.GROUP,\n                         updated.getResult().getKey(),\n                         false,\n                         null,\n                         updated.getPropByRes(),\n-                        ((AnyPatch) actual).getVirAttrs(),\n+                        ((AnyUR) actual).getVirAttrs(),\n                         excludedResources);\n                 PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n "},{"sha":"bfeeec3da2208a32feeae1d4260d10ad33a7dd88","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDetails.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDetails.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -37,17 +37,17 @@ public UserRequestFormDetails(final PageReference pageRef, final UserRequestForm\n \n         final UserTO newUserTO;\n         final UserTO previousUserTO;\n-        if (formTO.getUserPatch() == null) {\n+        if (formTO.getUserUR() == null) {\n             newUserTO = formTO.getUserTO();\n             previousUserTO = null;\n         } else if (formTO.getUserTO() == null) {\n             // make it stronger by handling possible NPE\n             previousUserTO = new UserTO();\n-            previousUserTO.setKey(formTO.getUserPatch().getKey());\n-            newUserTO = AnyOperations.patch(previousUserTO, formTO.getUserPatch());\n+            previousUserTO.setKey(formTO.getUserUR().getKey());\n+            newUserTO = AnyOperations.patch(previousUserTO, formTO.getUserUR());\n         } else {\n-            formTO.getUserTO().setKey(formTO.getUserPatch().getKey());\n-            newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserPatch());\n+            formTO.getUserTO().setKey(formTO.getUserUR().getKey());\n+            newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserUR());\n             previousUserTO = formTO.getUserTO();\n         }\n "},{"sha":"2d083f80f2c8fb82ad991ef3051b536d06557fea","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormDirectoryPanel.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormDirectoryPanel.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -45,8 +45,8 @@\n import org.apache.syncope.client.console.wizards.any.UserWizardBuilder;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n@@ -227,19 +227,19 @@ public void onClick(final AjaxRequestTarget target, final UserRequestForm ignore\n                 UserRequestForm formTO = model.getObject();\n                 UserTO newUserTO;\n                 UserTO previousUserTO;\n-                if (formTO.getUserPatch() == null) {\n+                if (formTO.getUserUR() == null) {\n                     newUserTO = formTO.getUserTO();\n                     previousUserTO = null;\n                 } else if (formTO.getUserTO() == null) {\n                     // make it stronger by handling possible NPE\n                     previousUserTO = new UserTO();\n-                    previousUserTO.setKey(formTO.getUserPatch().getKey());\n-                    newUserTO = AnyOperations.patch(previousUserTO, formTO.getUserPatch());\n+                    previousUserTO.setKey(formTO.getUserUR().getKey());\n+                    newUserTO = AnyOperations.patch(previousUserTO, formTO.getUserUR());\n                 } else {\n                     previousUserTO = formTO.getUserTO();\n-                    formTO.getUserTO().setKey(formTO.getUserPatch().getKey());\n+                    formTO.getUserTO().setKey(formTO.getUserUR().getKey());\n                     formTO.getUserTO().setPassword(null);\n-                    newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserPatch());\n+                    newUserTO = AnyOperations.patch(formTO.getUserTO(), formTO.getUserUR());\n                 }\n \n                 AjaxWizard.EditItemActionEvent<UserTO> editItemActionEvent =\n@@ -357,23 +357,23 @@ private class FormUserWizardBuilder extends UserWizardBuilder {\n         protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n             UserTO inner = modelObject.getInnerObject();\n \n-            UserPatch patch = AnyOperations.diff(inner, formTO.getUserTO(), false);\n+            UserUR userUR = AnyOperations.diff(inner, formTO.getUserTO(), false);\n \n             if (StringUtils.isNotBlank(inner.getPassword())) {\n                 PasswordPatch passwordPatch = new PasswordPatch.Builder().\n                         value(inner.getPassword()).onSyncope(true).resources(inner.\n                         getResources()).\n                         build();\n-                patch.setPassword(passwordPatch);\n+                userUR.setPassword(passwordPatch);\n             }\n \n             // update just if it is changed\n             ProvisioningResult<UserTO> result;\n-            if (patch.isEmpty()) {\n+            if (userUR.isEmpty()) {\n                 result = new ProvisioningResult<>();\n                 result.setEntity(inner);\n             } else {\n-                result = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), patch);\n+                result = userRestClient.update(getOriginalItem().getInnerObject().getETagValue(), userUR);\n                 restClient.getForm(result.getEntity().getKey()).ifPresent(form -> claimForm(form.getTaskId()));\n             }\n "},{"sha":"539c9f824778e22e2322f8afa5292314fda665f1","filename":"ext/flowable/common-lib/src/main/java/org/apache/syncope/common/lib/to/UserRequestForm.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestForm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestForm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserRequestForm.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -29,7 +29,7 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.BaseBean;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n \n @XmlRootElement(name = \"userRequestForm\")\n @XmlType\n@@ -55,7 +55,7 @@ public class UserRequestForm extends BaseBean {\n \n     private UserTO userTO;\n \n-    private UserPatch userPatch;\n+    private UserUR userUR;\n \n     private final List<UserRequestFormProperty> properties = new ArrayList<>();\n \n@@ -145,12 +145,12 @@ public void setUserTO(final UserTO userTO) {\n         this.userTO = userTO;\n     }\n \n-    public UserPatch getUserPatch() {\n-        return userPatch;\n+    public UserUR getUserUR() {\n+        return userUR;\n     }\n \n-    public void setUserPatch(final UserPatch userPatch) {\n-        this.userPatch = userPatch;\n+    public void setUserUR(final UserUR userUR) {\n+        this.userUR = userUR;\n     }\n \n     @JsonIgnore"},{"sha":"5bd8c9b806f547a43d5c90b725da45eab533310c","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -118,5 +118,5 @@ Pair<Integer, List<UserRequestForm>> getForms(\n      * @param form to be submitted\n      * @return user updated by this form submit\n      */\n-    WorkflowResult<UserPatch> submitForm(UserRequestForm form);\n+    WorkflowResult<UserUR> submitForm(UserRequestForm form);\n }"},{"sha":"093baf8c976e7f2a1c8abe1945bb8ae90fe2546e","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -59,7 +59,7 @@ public final class FlowableRuntimeUtils {\n \n     public static final String ENABLED = \"enabled\";\n \n-    public static final String USER_PATCH = \"userPatch\";\n+    public static final String USER_UR = \"userUR\";\n \n     public static final String TASK = \"task\";\n "},{"sha":"c4997ca7c092eb94452e28806c39a9cc664bbd1d","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -29,8 +29,8 @@\n import javax.annotation.Resource;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestFormProperty;\n@@ -372,8 +372,8 @@ protected UserRequestForm getHistoricFormTO(\n \n         formTO.setUserTO(engine.getRuntimeService().\n                 getVariable(procInstId, FlowableRuntimeUtils.USER_TO, UserTO.class));\n-        formTO.setUserPatch(engine.getRuntimeService().\n-                getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));\n+        formTO.setUserUR(engine.getRuntimeService().\n+                getVariable(procInstId, FlowableRuntimeUtils.USER_UR, UserUR.class));\n \n         formTO.getProperties().addAll(props.stream().map(prop -> {\n             UserRequestFormProperty propertyTO = new UserRequestFormProperty();\n@@ -410,8 +410,8 @@ protected UserRequestForm getForm(\n \n         formTO.setUserTO(engine.getRuntimeService().\n                 getVariable(procInstId, FlowableRuntimeUtils.USER_TO, UserTO.class));\n-        formTO.setUserPatch(engine.getRuntimeService().\n-                getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class));\n+        formTO.setUserUR(engine.getRuntimeService().\n+                getVariable(procInstId, FlowableRuntimeUtils.USER_UR, UserUR.class));\n \n         formTO.getProperties().addAll(props.stream().map(fProp -> {\n             UserRequestFormProperty propertyTO = new UserRequestFormProperty();\n@@ -620,7 +620,7 @@ private Map<String, String> getPropertiesForSubmit(final UserRequestForm form) {\n     }\n \n     @Override\n-    public WorkflowResult<UserPatch> submitForm(final UserRequestForm form) {\n+    public WorkflowResult<UserUR> submitForm(final UserRequestForm form) {\n         Pair<Task, TaskFormData> parsed = parseTask(form.getTaskId());\n \n         String authUser = AuthContextUtils.getUsername();\n@@ -655,7 +655,7 @@ public WorkflowResult<UserPatch> submitForm(final UserRequestForm form) {\n \n         user = userDAO.save(user);\n \n-        UserPatch userPatch = null;\n+        UserUR userUR = null;\n         String clearPassword = null;\n         PropagationByResource propByRes = null;\n \n@@ -694,20 +694,19 @@ public WorkflowResult<UserPatch> submitForm(final UserRequestForm form) {\n                     enabled,\n                     propByRes);\n \n-            userPatch = engine.getRuntimeService().\n-                    getVariable(procInstId, FlowableRuntimeUtils.USER_PATCH, UserPatch.class);\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER_PATCH);\n+            userUR = engine.getRuntimeService().getVariable(procInstId, FlowableRuntimeUtils.USER_UR, UserUR.class);\n+            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER_UR);\n         }\n-        if (userPatch == null) {\n-            userPatch = new UserPatch();\n-            userPatch.setKey(user.getKey());\n-            userPatch.setPassword(new PasswordPatch.Builder().onSyncope(true).value(clearPassword).build());\n+        if (userUR == null) {\n+            userUR = new UserUR();\n+            userUR.setKey(user.getKey());\n+            userUR.setPassword(new PasswordPatch.Builder().onSyncope(true).value(clearPassword).build());\n \n             if (propByRes != null) {\n-                userPatch.getPassword().getResources().addAll(propByRes.get(ResourceOperation.CREATE));\n+                userUR.getPassword().getResources().addAll(propByRes.get(ResourceOperation.CREATE));\n             }\n         }\n \n-        return new WorkflowResult<>(userPatch, propByRes, postTasks);\n+        return new WorkflowResult<>(userUR, propByRes, postTasks);\n     }\n }"},{"sha":"446aad4f6cd381934727c2773ae0095242e49d29","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -26,7 +26,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowTask;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n@@ -217,20 +217,20 @@ protected WorkflowResult<String> doActivate(final User user, final String token)\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(final User user, final UserPatch userPatch) {\n+    protected WorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final UserUR userUR) {\n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n \n         // save some existing variable values for later processing, after actual update is made \n-        UserPatch patchBeforeUpdate = engine.getRuntimeService().getVariable(\n-                procInstID, FlowableRuntimeUtils.USER_PATCH, UserPatch.class);\n+        UserUR beforeUpdate = engine.getRuntimeService().\n+                getVariable(procInstID, FlowableRuntimeUtils.USER_UR, UserUR.class);\n         PropagationByResource propByResBeforeUpdate = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n \n         // whether the initial status is a form task\n         boolean inFormTask = FlowableRuntimeUtils.getFormTask(engine, procInstID) != null;\n \n         Map<String, Object> variables = new HashMap<>(2);\n-        variables.put(FlowableRuntimeUtils.USER_PATCH, userPatch);\n+        variables.put(FlowableRuntimeUtils.USER_UR, userUR);\n         variables.put(FlowableRuntimeUtils.TASK, \"update\");\n \n         Set<String> tasks = doExecuteNextTask(procInstID, user, variables);\n@@ -244,17 +244,17 @@ protected WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(final User user, fin\n \n         // if the original status was a form task, restore the patch as before the process started\n         if (inFormTask) {\n-            if (patchBeforeUpdate == null) {\n-                engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_PATCH);\n+            if (beforeUpdate == null) {\n+                engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_UR);\n             } else {\n-                engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER_PATCH, patchBeforeUpdate);\n+                engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER_UR, beforeUpdate);\n             }\n         }\n \n         // whether the after status is a form task\n         inFormTask = FlowableRuntimeUtils.getFormTask(engine, procInstID) != null;\n         if (!inFormTask) {\n-            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_PATCH);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_UR);\n         }\n \n         PropagationByResource propByRes = engine.getRuntimeService().getVariable(\n@@ -266,15 +266,15 @@ protected WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(final User user, fin\n                 procInstID,\n                 updated,\n                 dataBinder.getUserTO(updated, true),\n-                userPatch.getPassword() == null ? null : userPatch.getPassword().getValue(),\n+                userUR.getPassword() == null ? null : userUR.getPassword().getValue(),\n                 null,\n                 propByResBeforeUpdate == null ? propByRes : propByResBeforeUpdate);\n \n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE, Boolean.class);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE);\n \n-        return new WorkflowResult<>(Pair.of(userPatch, propagateEnable), propByRes, tasks);\n+        return new WorkflowResult<>(Pair.of(userUR, propagateEnable), propByRes, tasks);\n     }\n \n     @Override\n@@ -328,7 +328,7 @@ protected void doRequestPasswordReset(final User user) {\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserPatch, Boolean>> doConfirmPasswordReset(\n+    protected WorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n             final User user, final String token, final String password) {\n \n         Map<String, Object> variables = new HashMap<>(5);\n@@ -351,9 +351,9 @@ protected WorkflowResult<Pair<UserPatch, Boolean>> doConfirmPasswordReset(\n         PropagationByResource propByRes = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE);\n-        UserPatch updatedPatch = engine.getRuntimeService().getVariable(\n-                procInstID, FlowableRuntimeUtils.USER_PATCH, UserPatch.class);\n-        engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_PATCH);\n+        UserUR updatedPatch = engine.getRuntimeService().getVariable(procInstID, FlowableRuntimeUtils.USER_UR,\n+                UserUR.class);\n+        engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_UR);\n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE, Boolean.class);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE);"},{"sha":"b4fa31816975e57227330b9c16f530a4b884fd57","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/AutoActivate.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FAutoActivate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FAutoActivate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FAutoActivate.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.flowable.task;\n \n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -45,11 +45,11 @@ protected void doExecute(final DelegateExecution execution) {\n         if (userTO != null && userTO.getKey() != null && user.getKey() != null) {\n             user = userDAO.save(user);\n \n-            UserPatch userPatch = AnyOperations.diff(userTO, dataBinder.getUserTO(user, true), false);\n+            UserUR req = AnyOperations.diff(userTO, dataBinder.getUserTO(user, true), false);\n             // don't mess with password, as the cleartext values was already properly saved\n-            userPatch.setPassword(null);\n+            req.setPassword(null);\n \n-            dataBinder.update(user, userPatch);\n+            dataBinder.update(user, req);\n \n             execution.setVariable(FlowableRuntimeUtils.USER, user);\n         }"},{"sha":"2d431f20b188a93f0a8f174fa75c9f6c0228f9dd","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/PasswordReset.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.flowable.task;\n \n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -51,18 +51,18 @@ protected void doExecute(final DelegateExecution execution) {\n \n         user.removeToken();\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().\n-                onSyncope(true).\n-                resources(userDAO.findAllResourceKeys(user.getKey())).\n-                value(password).build());\n+        UserUR req = new UserUR.Builder().key(user.getKey()).\n+                password(new PasswordPatch.Builder().\n+                        onSyncope(true).\n+                        resources(userDAO.findAllResourceKeys(user.getKey())).\n+                        value(password).build()).\n+                build();\n \n-        PropagationByResource propByRes = dataBinder.update(user, userPatch);\n+        PropagationByResource propByRes = dataBinder.update(user, req);\n \n         // report updated user and propagation by resource as result\n         execution.setVariable(FlowableRuntimeUtils.USER, user);\n-        execution.setVariable(FlowableRuntimeUtils.USER_PATCH, userPatch);\n+        execution.setVariable(FlowableRuntimeUtils.USER_UR, req);\n         execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"6e2ea2c6b6fd84adb0668126533ca7b3ddcb02e2","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Update.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FUpdate.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.flowable.task;\n \n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -39,15 +39,15 @@ public class Update extends FlowableServiceTask {\n \n     @Override\n     protected void doExecute(final DelegateExecution execution) {\n-        UserPatch userPatch = execution.getVariable(FlowableRuntimeUtils.USER_PATCH, UserPatch.class);\n-        if (userPatch == null || userPatch.isEmpty()) {\n-            LOG.warn(\"No actual update is to be performed: null patch\");\n+        UserUR req = execution.getVariable(FlowableRuntimeUtils.USER_UR, UserUR.class);\n+        if (req == null || req.isEmpty()) {\n+            LOG.warn(\"No actual update is to be performed: empty or null request\");\n         } else {\n             User user = execution.getVariable(FlowableRuntimeUtils.USER, User.class);\n \n             user = userDAO.save(user);\n \n-            PropagationByResource propByRes = dataBinder.update(user, userPatch);\n+            PropagationByResource propByRes = dataBinder.update(user, req);\n \n             // report updated user and propagation by resource as result\n             execution.setVariable(FlowableRuntimeUtils.USER, user);"},{"sha":"e7c87274a94bf04601295ad8085fd8420b125fae","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -23,7 +23,7 @@\n import org.apache.commons.io.output.NullOutputStream;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -190,7 +190,7 @@ public UserTO submitForm(final UserRequestForm form) {\n                     \"Submitting forms for user\" + form.getUsername() + \" not allowed\");\n         }\n \n-        WorkflowResult<UserPatch> wfResult = userRequestHandler.submitForm(form);\n+        WorkflowResult<UserUR> wfResult = userRequestHandler.submitForm(form);\n \n         // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)"},{"sha":"5e5fbcf0e50e5372258b3ebe5506f921a7ac6178","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowTaskLogic.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -21,7 +21,7 @@\n import java.lang.reflect.Method;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowTask;\n@@ -69,13 +69,11 @@ public List<WorkflowTask> getAvailableTasks(final String key) {\n     public UserTO executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput) {\n         WorkflowResult<String> updated = wfTaskManager.executeNextTask(workflowTaskExecInput);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(updated.getResult());\n+        UserUR userUR = new UserUR.Builder().key(updated.getResult()).build();\n \n-        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(\n-                new WorkflowResult<>(\n-                        Pair.<UserPatch, Boolean>of(userPatch, null),\n-                        updated.getPropByRes(), updated.getPerformedTasks()));\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(new WorkflowResult<>(\n+                Pair.<UserUR, Boolean>of(userUR, null),\n+                updated.getPropByRes(), updated.getPerformedTasks()));\n \n         taskExecutor.execute(taskInfos, false);\n "},{"sha":"1d57761c6469910b716895c9bc90a85535a5ac17","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,7 +28,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n@@ -275,14 +275,14 @@ public String update(final String username, final OIDCProvider op, final OIDCLog\n \n         fill(op, responseTO, userTO);\n \n-        UserPatch userPatch = AnyOperations.diff(userTO, original, true);\n+        UserUR userUR = AnyOperations.diff(userTO, original, true);\n \n         List<OIDCProviderActions> actions = getActions(op);\n         for (OIDCProviderActions action : actions) {\n-            userPatch = action.beforeUpdate(userPatch, responseTO);\n+            userUR = action.beforeUpdate(userUR, responseTO);\n         }\n \n-        Pair<UserPatch, List<PropagationStatus>> updated = provisioningManager.update(userPatch, false);\n+        Pair<UserUR, List<PropagationStatus>> updated = provisioningManager.update(userUR, false);\n         userTO = binder.getUserTO(updated.getLeft().getKey());\n \n         for (OIDCProviderActions action : actions) {"},{"sha":"05945b372ba82a318c97e51bba663036a1204fad","filename":"ext/oidcclient/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/OIDCProviderActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FOIDCProviderActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n@@ -28,7 +28,7 @@ public interface OIDCProviderActions {\n \n     UserTO afterCreate(UserTO input, OIDCLoginResponseTO loginResponse);\n \n-    UserPatch beforeUpdate(UserPatch input, OIDCLoginResponseTO loginResponse);\n+    UserUR beforeUpdate(UserUR input, OIDCLoginResponseTO loginResponse);\n \n     UserTO afterUpdate(UserTO input, OIDCLoginResponseTO loginResponse);\n "},{"sha":"21505671ff8290950112a87182822858de852218","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultOIDCProviderActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultOIDCProviderActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.OIDCLoginResponseTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.OIDCProviderActions;\n@@ -36,7 +36,7 @@ public UserTO afterCreate(final UserTO input, final OIDCLoginResponseTO loginRes\n     }\n \n     @Override\n-    public UserPatch beforeUpdate(final UserPatch input, final OIDCLoginResponseTO loginResponse) {\n+    public UserUR beforeUpdate(final UserUR input, final OIDCLoginResponseTO loginResponse) {\n         return input;\n     }\n "},{"sha":"1b48d1099702126246fbe7b6daa7b532a0e967e0","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,7 +28,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n@@ -289,14 +289,14 @@ public String update(final String username, final SAML2IdPEntity idp, final SAML\n \n         fill(idp.getKey(), responseTO, userTO);\n \n-        UserPatch userPatch = AnyOperations.diff(userTO, original, true);\n+        UserUR userUR = AnyOperations.diff(userTO, original, true);\n \n         List<SAML2IdPActions> actions = getActions(idp);\n         for (SAML2IdPActions action : actions) {\n-            userPatch = action.beforeUpdate(userPatch, responseTO);\n+            userUR = action.beforeUpdate(userUR, responseTO);\n         }\n \n-        Pair<UserPatch, List<PropagationStatus>> updated = provisioningManager.update(userPatch, false);\n+        Pair<UserUR, List<PropagationStatus>> updated = provisioningManager.update(userUR, false);\n         userTO = binder.getUserTO(updated.getLeft().getKey());\n \n         for (SAML2IdPActions action : actions) {"},{"sha":"0decd0cd3b1cdd5cb1aafc8d2515875ebfd51df3","filename":"ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/SAML2IdPActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FSAML2IdPActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n@@ -32,7 +32,7 @@ default UserTO afterCreate(UserTO input, SAML2LoginResponseTO loginResponse) {\n         return input;\n     }\n \n-    default UserPatch beforeUpdate(UserPatch input, SAML2LoginResponseTO loginResponse) {\n+    default UserUR beforeUpdate(UserUR input, SAML2LoginResponseTO loginResponse) {\n         return input;\n     }\n "},{"sha":"7938b5250f56510e9570e8532d0c89a794abe9d9","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/GroupServiceImpl.java","status":"modified","additions":22,"deletions":23,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -29,8 +29,8 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -41,7 +41,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.ext.scimv2.api.BadRequestException;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n-import org.apache.syncope.ext.scimv2.api.data.Member;\n import org.apache.syncope.ext.scimv2.api.data.SCIMGroup;\n import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;\n import org.apache.syncope.ext.scimv2.api.service.GroupService;\n@@ -57,18 +56,18 @@ public Response create(final SCIMGroup group) {\n         ProvisioningResult<GroupTO> result = groupLogic().create(binder().toGroupTO(group), false);\n \n         // then assign members\n-        for (Member member : group.getMembers()) {\n-            UserPatch patch = new UserPatch();\n-            patch.setKey(member.getValue());\n-            patch.getMemberships().add(new MembershipPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build());\n-\n+        group.getMembers().forEach(member -> {\n+            UserUR req = new UserUR.Builder().\n+                    key(member.getValue()).\n+                    membership(new MembershipPatch.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build()).\n+                    build();\n             try {\n-                userLogic().update(patch, false);\n+                userLogic().update(req, false);\n             } catch (Exception e) {\n                 LOG.error(\"While setting membership of {} to {}\", result.getEntity().getKey(), member.getValue(), e);\n             }\n-        }\n+        });\n \n         return createResponse(\n                 result.getEntity().getKey(),\n@@ -137,13 +136,13 @@ public Response replace(final String id, final SCIMGroup group) {\n             afterMembers.add(member.getValue());\n \n             if (!beforeMembers.contains(member.getValue())) {\n-                UserPatch patch = new UserPatch();\n-                patch.setKey(member.getValue());\n-                patch.getMemberships().add(new MembershipPatch.Builder().\n-                        operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build());\n-\n+                UserUR req = new UserUR.Builder().\n+                        key(member.getValue()).\n+                        membership(new MembershipPatch.Builder().\n+                                operation(PatchOperation.ADD_REPLACE).group(result.getEntity().getKey()).build()).\n+                        build();\n                 try {\n-                    userLogic().update(patch, false);\n+                    userLogic().update(req, false);\n                 } catch (Exception e) {\n                     LOG.error(\"While setting membership of {} to {}\",\n                             result.getEntity().getKey(), member.getValue(), e);\n@@ -152,13 +151,13 @@ public Response replace(final String id, final SCIMGroup group) {\n         });\n         // remove unconfirmed members\n         beforeMembers.stream().filter(member -> !afterMembers.contains(member)).forEach(user -> {\n-            UserPatch patch = new UserPatch();\n-            patch.setKey(user);\n-            patch.getMemberships().add(new MembershipPatch.Builder().\n-                    operation(PatchOperation.DELETE).group(result.getEntity().getKey()).build());\n-\n+            UserUR req = new UserUR.Builder().\n+                    key(user).\n+                    membership(new MembershipPatch.Builder().\n+                            operation(PatchOperation.DELETE).group(result.getEntity().getKey()).build()).\n+                    build();\n             try {\n-                userLogic().update(patch, false);\n+                userLogic().update(req, false);\n             } catch (Exception e) {\n                 LOG.error(\"While removing membership of {} from {}\", result.getEntity().getKey(), user, e);\n             }"},{"sha":"d4c17ed6aad835bc35ba6abe4f2bcc64f01de2ab","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.core.reference.flowable;\n \n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;\n import org.apache.syncope.core.flowable.task.FlowableServiceTask;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -48,12 +48,12 @@ protected void doExecute(final DelegateExecution execution) {\n         if (Boolean.TRUE.equals(secondLevelApprove)) {\n             user = userDAO.save(user);\n \n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(user.getKey());\n-            userPatch.getMemberships().add(new MembershipPatch.Builder().\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(user.getKey());\n+            userUR.getMemberships().add(new MembershipPatch.Builder().\n                     group(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").build());\n \n-            PropagationByResource propByRes = dataBinder.update(user, userPatch);\n+            PropagationByResource propByRes = dataBinder.update(user, userUR);\n \n             // report updated user and propagation by resource as result\n             execution.setVariable(FlowableRuntimeUtils.USER, user);"},{"sha":"9c9b33eee9f8cfa9fcdabb441c9e6bd5c0babd75","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.fit.core.reference.flowable;\n \n-import org.apache.syncope.common.lib.patch.RelationshipPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.RelationshipPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;\n import org.apache.syncope.core.flowable.task.FlowableServiceTask;\n@@ -51,14 +51,14 @@ protected void doExecute(final DelegateExecution execution) {\n \n             String printer = execution.getVariable(\"printer\", String.class);\n \n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(user.getKey());\n-            userPatch.getRelationships().add(new RelationshipPatch.Builder().\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(user.getKey());\n+            userUR.getRelationships().add(new RelationshipPatch.Builder().\n                     relationshipTO(new RelationshipTO.Builder().\n                             otherEnd(\"PRINTER\", printer).type(\"neighborhood\").build()).\n                     build());\n \n-            PropagationByResource propByRes = dataBinder.update(user, userPatch);\n+            PropagationByResource propByRes = dataBinder.update(user, userUR);\n \n             // report updated user and propagation by resource as result\n             execution.setVariable(FlowableRuntimeUtils.USER, user);"},{"sha":"de1d8f32bed5c03e1e03c514616ad9f6cd3c5ec7","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPullActions.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPullActions.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.fit.core.reference;\n \n import java.util.Optional;\n-import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.request.AnyUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n@@ -69,14 +69,14 @@ public void beforeAssign(\n     }\n \n     @Override\n-    public <M extends AnyPatch> void beforeUpdate(\n+    public <M extends AnyUR> void beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final EntityTO entityTO,\n-            final M anyPatch) throws JobExecutionException {\n+            final M anyUR) throws JobExecutionException {\n \n         AttrPatch fullnamePatch = null;\n-        for (AttrPatch attrPatch : anyPatch.getPlainAttrs()) {\n+        for (AttrPatch attrPatch : anyUR.getPlainAttrs()) {\n             if (\"fullname\".equals(attrPatch.getAttrTO().getSchema())) {\n                 fullnamePatch = attrPatch;\n             }"},{"sha":"4199d6b34fd8c1617004d9c75a1084efb2f90723","filename":"fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -99,7 +99,7 @@ try {\n     <exclusiveGateway id=\"activeGw\"/>\n     <sequenceFlow id=\"active2UpdateApproval\" sourceRef=\"activeGw\" targetRef=\"updateApproval\">\n       <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${wfExecutor == user.getUsername() and task == 'update' \n-        and (!userPatch.getMemberships().isEmpty())}]]></conditionExpression>\n+        and (!userUR.getMemberships().isEmpty())}]]></conditionExpression>\n     </sequenceFlow>\n     <sequenceFlow id=\"active2DeleteApproval\" sourceRef=\"activeGw\" targetRef=\"deleteApproval\">\n       <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${wfExecutor == user.getUsername() and task == 'delete'}]]></conditionExpression>"},{"sha":"ca444abeeb01ff4410616346100d63e115f97345","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -47,10 +47,10 @@\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -460,8 +460,8 @@ protected ProvisioningResult<UserTO> createUser(final UserTO userTO, final boole\n         });\n     }\n \n-    protected ProvisioningResult<UserTO> updateUser(final UserPatch userPatch) {\n-        return userService.update(userPatch).\n+    protected ProvisioningResult<UserTO> updateUser(final UserUR req) {\n+        return userService.update(req).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 });\n     }\n@@ -484,8 +484,8 @@ protected ProvisioningResult<AnyObjectTO> createAnyObject(final AnyObjectTO anyO\n         });\n     }\n \n-    protected ProvisioningResult<AnyObjectTO> updateAnyObject(final AnyObjectPatch anyObjectPatch) {\n-        return anyObjectService.update(anyObjectPatch).\n+    protected ProvisioningResult<AnyObjectTO> updateAnyObject(final AnyObjectUR req) {\n+        return anyObjectService.update(req).\n                 readEntity(new GenericType<ProvisioningResult<AnyObjectTO>>() {\n                 });\n     }\n@@ -508,8 +508,8 @@ protected ProvisioningResult<GroupTO> createGroup(final GroupTO groupTO) {\n         });\n     }\n \n-    protected ProvisioningResult<GroupTO> updateGroup(final GroupPatch groupPatch) {\n-        return groupService.update(groupPatch).\n+    protected ProvisioningResult<GroupTO> updateGroup(final GroupUR req) {\n+        return groupService.update(req).\n                 readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n                 });\n     }"},{"sha":"16d06e672dc486edf0f6cc0d6f95b80ca159bfe5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -32,7 +32,7 @@\n import java.util.concurrent.TimeUnit;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -104,14 +104,14 @@ protected void ldapCleanup() {\n         groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"name\").equalTo(\"testLDAPGroup\").query()).\n                 build()).getResult().forEach(group -> {\n-                    groupService.deassociate(new DeassociationPatch.Builder().key(group.getKey()).\n+                    groupService.deassociate(new ResourceDR.Builder().key(group.getKey()).\n                             action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_LDAP).build());\n                     groupService.delete(group.getKey());\n                 });\n         userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(\"pullFromLDAP\").query()).\n                 build()).getResult().forEach(user -> {\n-                    userService.deassociate(new DeassociationPatch.Builder().key(user.getKey()).\n+                    userService.deassociate(new ResourceDR.Builder().key(user.getKey()).\n                             action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_LDAP).build());\n                     userService.delete(user.getKey());\n                 });"},{"sha":"8c98ccfb1d4528e2b62e8440245beb2375bbe0fe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -145,12 +145,12 @@ public void update() {\n \n         assertEquals(1, anyObjectTO.getPlainAttrs().size());\n \n-        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n-        anyObjectPatch.setKey(anyObjectTO.getKey());\n+        AnyObjectUR anyObjectUR = new AnyObjectUR();\n+        anyObjectUR.setKey(anyObjectTO.getKey());\n         String newLocation = \"new\" + getUUIDString();\n-        anyObjectPatch.getPlainAttrs().add(attrAddReplacePatch(\"location\", newLocation));\n+        anyObjectUR.getPlainAttrs().add(attrAddReplacePatch(\"location\", newLocation));\n \n-        anyObjectTO = updateAnyObject(anyObjectPatch).getEntity();\n+        anyObjectTO = updateAnyObject(anyObjectUR).getEntity();\n \n         assertEquals(newLocation, anyObjectTO.getPlainAttr(\"location\").get().getValues().get(0));\n     }"},{"sha":"b9dbfb5a4db940467264fe6e2d81c41d0fdd30fe","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -39,12 +39,12 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -63,7 +63,7 @@\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.UserRequestFormQuery;\n@@ -266,22 +266,22 @@ public void delegatedUserCRUD() {\n             assertEquals(\"surname\", user.getPlainAttr(\"surname\").get().getValues().get(0));\n \n             // 5. as delegated, update user attempting to move under realm / -> fail\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(user.getKey());\n-            userPatch.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n-            userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(user.getKey());\n+            userUR.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n+            userUR.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n \n             try {\n-                delegatedUserService.update(userPatch);\n+                delegatedUserService.update(userUR);\n                 fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n \n             // 6. revert realm change -> succeed\n-            userPatch.setRealm(null);\n+            userUR.setRealm(null);\n \n-            response = delegatedUserService.update(userPatch);\n+            response = delegatedUserService.update(userUR);\n             assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n             user = response.readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n@@ -396,8 +396,8 @@ public void checkUserSuspension() {\n             assertNotNull(e);\n         }\n \n-        StatusPatch reactivate = new StatusPatch.Builder().key(userTO.getKey()).\n-                type(StatusPatchType.REACTIVATE).build();\n+        StatusR reactivate = new StatusR.Builder().key(userTO.getKey()).\n+                type(StatusRType.REACTIVATE).build();\n         userTO = userService.status(reactivate).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(userTO);\n@@ -460,11 +460,11 @@ public void anyTypeEntitlement() {\n         role = createRole(role);\n \n         UserTO bellini = userService.read(\"bellini\");\n-        UserPatch patch = new UserPatch();\n-        patch.setKey(bellini.getKey());\n-        patch.getRoles().add(new StringPatchItem.Builder().\n+        UserUR req = new UserUR();\n+        req.setKey(bellini.getKey());\n+        req.getRoles().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(role.getKey()).build());\n-        bellini = updateUser(patch).getEntity();\n+        bellini = updateUser(req).getEntity();\n         assertTrue(bellini.getRoles().contains(role.getKey()));\n \n         // 5. now the instance of the type above can be created successfully\n@@ -523,15 +523,15 @@ public void issueSYNCOPE164() throws Exception {\n         assertNotNull(user);\n \n         // 2. unlink the resource from the created user\n-        DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(user.getKey()).\n+        ResourceDR resourceDR = new ResourceDR.Builder().key(user.getKey()).\n                 action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_TESTDB).build();\n-        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n+        assertNotNull(parseBatchResponse(userService.deassociate(resourceDR)));\n \n         // 3. change password on Syncope\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n-        user = updateUser(userPatch).getEntity();\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(user.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n+        user = updateUser(userUR).getEntity();\n         assertNotNull(user);\n \n         // 4. check that the db resource has still the initial password value"},{"sha":"0d621b01f0bd7ab2eb63b9cb00f1897daf9aed70","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BatchITCase.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBatchITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -50,8 +50,8 @@\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.client.lib.batch.BatchResponse;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -108,10 +108,10 @@ private String requestBody(final String boundary) throws JsonProcessingException\n         reqItems.add(createGroup);\n \n         // 3. update the user above as JSON, request for no user data being returned\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getUsername());\n-        userPatch.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n-        String updateUserPayload = MAPPER.writeValueAsString(userPatch);\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(user.getUsername());\n+        userUR.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n+        String updateUserPayload = MAPPER.writeValueAsString(userUR);\n \n         BatchRequestItem updateUser = new BatchRequestItem();\n         updateUser.setMethod(HttpMethod.PATCH);\n@@ -288,10 +288,10 @@ private BatchRequest batchRequest() {\n         client = WebClient.client(batchUserService).reset();\n         client.type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n         client.header(RESTHeaders.PREFER, Preference.RETURN_NO_CONTENT.toString());\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getUsername());\n-        userPatch.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n-        batchUserService.update(userPatch);\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(user.getUsername());\n+        userUR.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n+        batchUserService.update(userUR);\n \n         // 4. generate not found\n         batchRequest.getService(ResourceService.class).read(UUID.randomUUID().toString());"},{"sha":"f4d368bebeaa484d79a914426771670f3abd1d83","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DynRealmITCase.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDynRealmITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,10 +28,10 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -173,31 +173,31 @@ public void delegatedAdmin() {\n             assertTrue(matchingUsers.getResult().stream().anyMatch(object -> object.getKey().equals(userKey)));\n \n             // USER_UPDATE\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userKey);\n-            userPatch.getResources().add(new StringPatchItem.Builder().\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userKey);\n+            userUR.getResources().add(new StringPatchItem.Builder().\n                     value(RESOURCE_NAME_LDAP).operation(PatchOperation.DELETE).build());\n             // this will fail because unassigning resource-ldap would result in removing the user from the dynamic realm\n             try {\n-                delegatedUserService.update(userPatch);\n+                delegatedUserService.update(userUR);\n                 fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n             // this will succeed instead\n-            userPatch.getResources().clear();\n-            userPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_NOPROPAGATION).build());\n-            user = delegatedUserService.update(userPatch).\n+            userUR.getResources().clear();\n+            userUR.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_NOPROPAGATION).build());\n+            user = delegatedUserService.update(userUR).\n                     readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                     }).getEntity();\n             assertNotNull(user);\n             assertTrue(user.getResources().contains(RESOURCE_NAME_NOPROPAGATION));\n \n             // GROUP_UPDATE\n-            GroupPatch groupPatch = new GroupPatch();\n-            groupPatch.setKey(groupKey);\n-            groupPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"icon\", \"modified\")).build());\n-            group = delegatedGroupService.update(groupPatch).\n+            GroupUR groupUR = new GroupUR();\n+            groupUR.setKey(groupKey);\n+            groupUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"icon\", \"modified\")).build());\n+            group = delegatedGroupService.update(groupUR).\n                     readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n                     }).getEntity();\n             assertNotNull(group);"},{"sha":"1dc462a64fee8189bf833c26c2fbebda3d1d69ab","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":104,"deletions":101,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -46,13 +46,13 @@\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AssociationPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.ResourceAR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n@@ -132,11 +132,11 @@ public void create() {\n         assertNotNull(connObjectTO.getAttr(\"owner\"));\n \n         // SYNCOPE-515: remove ownership\n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(groupTO.getKey());\n-        groupPatch.setGroupOwner(new StringReplacePatchItem());\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(groupTO.getKey());\n+        groupUR.setGroupOwner(new StringReplacePatchItem());\n \n-        assertNull(updateGroup(groupPatch).getEntity().getGroupOwner());\n+        assertNull(updateGroup(groupUR).getEntity().getGroupOwner());\n     }\n \n     @Test\n@@ -222,21 +222,24 @@ public void update() {\n \n         assertEquals(1, groupTO.getPlainAttrs().size());\n \n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(groupTO.getKey());\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(groupTO.getKey());\n         String modName = \"finalGroup\" + getUUIDString();\n-        groupPatch.setName(new StringReplacePatchItem.Builder().value(modName).build());\n-        groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"show\", \"FALSE\"));\n+        groupUR.setName(new StringReplacePatchItem.Builder().value(modName).build());\n+        groupUR.getPlainAttrs().add(attrAddReplacePatch(\"show\", \"FALSE\"));\n \n-        groupTO = updateGroup(groupPatch).getEntity();\n+        groupTO = updateGroup(groupUR).getEntity();\n \n         assertEquals(modName, groupTO.getName());\n         assertEquals(2, groupTO.getPlainAttrs().size());\n \n         groupTO.getPlainAttr(\"show\").get().getValues().clear();\n \n-        groupTO = groupService.update(groupTO).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n-        }).getEntity();\n+        groupUR = new GroupUR.Builder().key(groupTO.getKey()).\n+                plainAttr(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n+                        attrTO(new AttrTO.Builder().schema(\"show\").build()).build()).build();\n+\n+        groupTO = updateGroup(groupUR).getEntity();\n \n         assertFalse(groupTO.getPlainAttr(\"show\").isPresent());\n     }\n@@ -259,8 +262,8 @@ public void patch() {\n \n         original = groupService.read(created.getKey());\n \n-        GroupPatch patch = AnyOperations.diff(created, original, true);\n-        GroupTO updated = updateGroup(patch).getEntity();\n+        GroupUR groupUR = AnyOperations.diff(created, original, true);\n+        GroupTO updated = updateGroup(groupUR).getEntity();\n \n         Map<String, AttrTO> attrs = EntityTOUtils.buildAttrMap(updated.getPlainAttrs());\n         assertFalse(attrs.containsKey(\"icon\"));\n@@ -282,15 +285,15 @@ public void updateAsGroupOwner() {\n         assertEquals(\"admin\", groupTO.getLastModifier());\n \n         // 2. prepare update\n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(groupTO.getKey());\n-        groupPatch.setName(new StringReplacePatchItem.Builder().value(\"Director\").build());\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(groupTO.getKey());\n+        groupUR.setName(new StringReplacePatchItem.Builder().value(\"Director\").build());\n \n         // 3. try to update as verdi, not owner of group 6 - fail\n         GroupService groupService2 = clientFactory.create(\"verdi\", ADMIN_PWD).getService(GroupService.class);\n \n         try {\n-            groupService2.update(groupPatch);\n+            groupService2.update(groupUR);\n             fail(\"This should not happen\");\n         } catch (ForbiddenException e) {\n             assertNotNull(e);\n@@ -299,7 +302,7 @@ public void updateAsGroupOwner() {\n         // 4. update as puccini, owner of group 6 - success\n         GroupService groupService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(GroupService.class);\n \n-        groupTO = groupService3.update(groupPatch).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n+        groupTO = groupService3.update(groupUR).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n         }).getEntity();\n         assertEquals(\"Director\", groupTO.getName());\n \n@@ -318,10 +321,10 @@ public void unlink() throws IOException {\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n+        ResourceDR resourceDR = new ResourceDR.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_LDAP).build();\n \n-        assertNotNull(parseBatchResponse(groupService.deassociate(deassociationPatch)));\n+        assertNotNull(parseBatchResponse(groupService.deassociate(resourceDR)));\n \n         actual = groupService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -345,10 +348,10 @@ public void link() throws IOException {\n             assertNotNull(e);\n         }\n \n-        AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n+        ResourceAR resourceAR = new ResourceAR.Builder().key(actual.getKey()).\n                 action(ResourceAssociationAction.LINK).resource(RESOURCE_NAME_LDAP).build();\n \n-        assertNotNull(parseBatchResponse(groupService.associate(associationPatch)));\n+        assertNotNull(parseBatchResponse(groupService.associate(resourceAR)));\n \n         actual = groupService.read(actual.getKey());\n         assertFalse(actual.getResources().isEmpty());\n@@ -372,12 +375,12 @@ public void unassign() throws IOException {\n             assertNotNull(resourceService.readConnObject(\n                     RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n \n-            DeassociationPatch deassociationPatch = new DeassociationPatch();\n-            deassociationPatch.setKey(groupTO.getKey());\n-            deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n-            deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+            ResourceDR resourceDR = new ResourceDR();\n+            resourceDR.setKey(groupTO.getKey());\n+            resourceDR.setAction(ResourceDeassociationAction.UNASSIGN);\n+            resourceDR.getResources().add(RESOURCE_NAME_LDAP);\n \n-            assertNotNull(parseBatchResponse(groupService.deassociate(deassociationPatch)));\n+            assertNotNull(parseBatchResponse(groupService.deassociate(resourceDR)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertNotNull(groupTO);\n@@ -412,10 +415,10 @@ public void assign() throws IOException {\n                 assertNotNull(e);\n             }\n \n-            AssociationPatch associationPatch = new AssociationPatch.Builder().key(groupTO.getKey()).\n+            ResourceAR resourceAR = new ResourceAR.Builder().key(groupTO.getKey()).\n                     action(ResourceAssociationAction.ASSIGN).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(parseBatchResponse(groupService.associate(associationPatch)));\n+            assertNotNull(parseBatchResponse(groupService.associate(resourceAR)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertFalse(groupTO.getResources().isEmpty());\n@@ -439,10 +442,10 @@ public void deprovision() throws IOException {\n \n             assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n \n-            DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(groupTO.getKey()).\n+            ResourceDR resourceDR = new ResourceDR.Builder().key(groupTO.getKey()).\n                     action(ResourceDeassociationAction.DEPROVISION).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(parseBatchResponse(groupService.deassociate(deassociationPatch)));\n+            assertNotNull(parseBatchResponse(groupService.deassociate(resourceDR)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertNotNull(groupTO);\n@@ -477,10 +480,10 @@ public void provision() throws IOException {\n                 assertNotNull(e);\n             }\n \n-            AssociationPatch associationPatch = new AssociationPatch.Builder().key(groupTO.getKey()).\n+            ResourceAR resourceAR = new ResourceAR.Builder().key(groupTO.getKey()).\n                     action(ResourceAssociationAction.PROVISION).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(parseBatchResponse(groupService.associate(associationPatch)));\n+            assertNotNull(parseBatchResponse(groupService.associate(resourceAR)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertTrue(groupTO.getResources().isEmpty());\n@@ -510,21 +513,21 @@ public void deprovisionUnlinked() throws IOException {\n                 assertNotNull(e);\n             }\n \n-            AssociationPatch associationPatch = new AssociationPatch.Builder().key(groupTO.getKey()).\n+            ResourceAR resourceAR = new ResourceAR.Builder().key(groupTO.getKey()).\n                     action(ResourceAssociationAction.PROVISION).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(parseBatchResponse(groupService.associate(associationPatch)));\n+            assertNotNull(parseBatchResponse(groupService.associate(resourceAR)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertTrue(groupTO.getResources().isEmpty());\n \n             assertNotNull(resourceService.readConnObject(\n                     RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n \n-            DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(groupTO.getKey()).\n+            ResourceDR resourceDR = new ResourceDR.Builder().key(groupTO.getKey()).\n                     action(ResourceDeassociationAction.DEPROVISION).resource(RESOURCE_NAME_LDAP).build();\n \n-            assertNotNull(parseBatchResponse(groupService.deassociate(deassociationPatch)));\n+            assertNotNull(parseBatchResponse(groupService.deassociate(resourceDR)));\n \n             groupTO = groupService.read(groupTO.getKey());\n             assertNotNull(groupTO);\n@@ -569,20 +572,20 @@ public void createWithMandatorySchema() {\n \n         try {\n             // 4. update group: failure since no values are provided and it is mandatory\n-            GroupPatch groupPatch = new GroupPatch();\n-            groupPatch.setKey(groupTO.getKey());\n+            GroupUR groupUR = new GroupUR();\n+            groupUR.setKey(groupTO.getKey());\n \n             try {\n-                updateGroup(groupPatch);\n+                updateGroup(groupUR);\n                 fail(\"This should not happen\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n             }\n \n             // 5. also add an actual attribute for badge - it will work\n-            groupPatch.getPlainAttrs().add(attrAddReplacePatch(badge.getKey(), \"xxxxxxxxxx\"));\n+            groupUR.getPlainAttrs().add(attrAddReplacePatch(badge.getKey(), \"xxxxxxxxxx\"));\n \n-            groupTO = updateGroup(groupPatch).getEntity();\n+            groupTO = updateGroup(groupUR).getEntity();\n             assertNotNull(groupTO);\n             assertNotNull(groupTO.getPlainAttr(badge.getKey()));\n         } finally {\n@@ -633,10 +636,10 @@ public void uDynMembership() {\n         assertTrue(memberships.stream().anyMatch(m -> m.getGroupKey().equals(groupKey)));\n         assertEquals(1, groupService.read(group.getKey()).getDynamicUserMembershipCount());\n \n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(group.getKey());\n-        patch.setUDynMembershipCond(\"cool==false\");\n-        groupService.update(patch);\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(group.getKey());\n+        groupUR.setUDynMembershipCond(\"cool==false\");\n+        groupService.update(groupUR);\n \n         assertTrue(userService.read(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\").getDynMemberships().isEmpty());\n         assertEquals(0, groupService.read(group.getKey()).getDynamicUserMembershipCount());\n@@ -675,24 +678,24 @@ public void aDynMembership() {\n         // 2. update group and change aDynMembership condition\n         fiql = SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").is(\"location\").nullValue().query();\n \n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(group.getKey());\n-        patch.getADynMembershipConds().put(\"PRINTER\", fiql);\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(group.getKey());\n+        groupUR.getADynMembershipConds().put(\"PRINTER\", fiql);\n \n-        group = updateGroup(patch).getEntity();\n+        group = updateGroup(groupUR).getEntity();\n         assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n \n         group = groupService.read(group.getKey());\n         assertEquals(fiql, group.getADynMembershipConds().get(\"PRINTER\"));\n \n         // verify that the condition is dynamically applied\n-        AnyObjectPatch anyPatch = new AnyObjectPatch();\n-        anyPatch.setKey(newAny.getKey());\n-        anyPatch.getPlainAttrs().add(new AttrPatch.Builder().\n+        AnyObjectUR anyObjectUR = new AnyObjectUR();\n+        anyObjectUR.setKey(newAny.getKey());\n+        anyObjectUR.getPlainAttrs().add(new AttrPatch.Builder().\n                 operation(PatchOperation.DELETE).\n                 attrTO(new AttrTO.Builder().schema(\"location\").build()).\n                 build());\n-        newAny = updateAnyObject(anyPatch).getEntity();\n+        newAny = updateAnyObject(anyObjectUR).getEntity();\n         assertFalse(newAny.getPlainAttr(\"location\").isPresent());\n \n         memberships = anyObjectService.read(\n@@ -780,12 +783,12 @@ public void capabilitiesOverride() {\n             group = result.getEntity();\n \n             // 2. update succeeds\n-            GroupPatch patch = new GroupPatch();\n-            patch.setKey(group.getKey());\n-            patch.getPlainAttrs().add(new AttrPatch.Builder().\n+            GroupUR groupUR = new GroupUR();\n+            groupUR.setKey(group.getKey());\n+            groupUR.getPlainAttrs().add(new AttrPatch.Builder().\n                     operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"second\")).build());\n \n-            result = updateGroup(patch);\n+            result = updateGroup(groupUR);\n             assertNotNull(result);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n@@ -802,12 +805,12 @@ public void capabilitiesOverride() {\n             assertTrue(ldap.getCapabilitiesOverride().contains(ConnectorCapability.SEARCH));\n \n             // 4. update succeeds again\n-            patch = new GroupPatch();\n-            patch.setKey(group.getKey());\n-            patch.getPlainAttrs().add(new AttrPatch.Builder().\n+            groupUR = new GroupUR();\n+            groupUR.setKey(group.getKey());\n+            groupUR.getPlainAttrs().add(new AttrPatch.Builder().\n                     operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"third\")).build());\n \n-            result = updateGroup(patch);\n+            result = updateGroup(groupUR);\n             assertNotNull(result);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n@@ -824,12 +827,12 @@ public void capabilitiesOverride() {\n             assertTrue(ldap.getCapabilitiesOverride().contains(ConnectorCapability.SEARCH));\n \n             // 6. update now fails\n-            patch = new GroupPatch();\n-            patch.setKey(group.getKey());\n-            patch.getPlainAttrs().add(new AttrPatch.Builder().\n+            groupUR = new GroupUR();\n+            groupUR.setKey(group.getKey());\n+            groupUR.getPlainAttrs().add(new AttrPatch.Builder().\n                     operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(\"title\", \"fourth\")).build());\n \n-            result = updateGroup(patch);\n+            result = updateGroup(groupUR);\n             assertNotNull(result);\n             assertEquals(1, result.getPropagationStatuses().size());\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n@@ -861,11 +864,11 @@ public void typeExtensions() {\n         typeExtension.getAuxClasses().add(\"csv\");\n         typeExtension.getAuxClasses().add(\"other\");\n \n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(groupTO.getKey());\n-        groupPatch.getTypeExtensions().add(typeExtension);\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(groupTO.getKey());\n+        groupUR.getTypeExtensions().add(typeExtension);\n \n-        groupTO = updateGroup(groupPatch).getEntity();\n+        groupTO = updateGroup(groupUR).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getTypeExtensions().size());\n         assertEquals(2, groupTO.getTypeExtension(AnyTypeKind.USER.name()).get().getAuxClasses().size());\n@@ -885,10 +888,10 @@ public void provisionMembers() throws InterruptedException {\n         userTO = createUser(userTO).getEntity();\n \n         // 3. modify the group by assiging the LDAP resource\n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(groupTO.getKey());\n-        groupPatch.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_LDAP).build());\n-        ProvisioningResult<GroupTO> groupUpdateResult = updateGroup(groupPatch);\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(groupTO.getKey());\n+        groupUR.getResources().add(new StringPatchItem.Builder().value(RESOURCE_NAME_LDAP).build());\n+        ProvisioningResult<GroupTO> groupUpdateResult = updateGroup(groupUR);\n         groupTO = groupUpdateResult.getEntity();\n \n         PropagationStatus propStatus = groupUpdateResult.getPropagationStatuses().get(0);\n@@ -948,12 +951,12 @@ public void issue178() {\n         assertNotNull(actual);\n         assertEquals(groupName, actual.getName());\n \n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(actual.getKey());\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(actual.getKey());\n         String renamedGroup = \"renamed\" + getUUIDString();\n-        groupPatch.setName(new StringReplacePatchItem.Builder().value(renamedGroup).build());\n+        groupUR.setName(new StringReplacePatchItem.Builder().value(renamedGroup).build());\n \n-        actual = updateGroup(groupPatch).getEntity();\n+        actual = updateGroup(groupUR).getEntity();\n         assertNotNull(actual);\n         assertEquals(renamedGroup, actual.getName());\n     }\n@@ -1003,21 +1006,21 @@ public void issueSYNCOPE632() {\n             assertNotNull(newLDAP);\n \n             // 2. update group and give the resource created above\n-            GroupPatch patch = new GroupPatch();\n-            patch.setKey(groupTO.getKey());\n-            patch.getResources().add(new StringPatchItem.Builder().\n+            GroupUR groupUR = new GroupUR();\n+            groupUR.setKey(groupTO.getKey());\n+            groupUR.getResources().add(new StringPatchItem.Builder().\n                     operation(PatchOperation.ADD_REPLACE).\n                     value(\"new-ldap\").build());\n \n-            groupTO = updateGroup(patch).getEntity();\n+            groupTO = updateGroup(groupUR).getEntity();\n             assertNotNull(groupTO);\n \n             // 3. update the group\n-            GroupPatch groupPatch = new GroupPatch();\n-            groupPatch.setKey(groupTO.getKey());\n-            groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"icon\", \"anotherIcon\"));\n+            groupUR = new GroupUR();\n+            groupUR.setKey(groupTO.getKey());\n+            groupUR.getPlainAttrs().add(attrAddReplacePatch(\"icon\", \"anotherIcon\"));\n \n-            groupTO = updateGroup(groupPatch).getEntity();\n+            groupTO = updateGroup(groupUR).getEntity();\n             assertNotNull(groupTO);\n \n             // 4. check that a single group exists in LDAP for the group created and updated above\n@@ -1095,11 +1098,11 @@ public void issueSYNCOPE717() {\n         assertEquals(\"11.230\", groupTO.getPlainAttr(doubleSchemaName).get().getValues().get(0));\n \n         // 5. modify group with new double value\n-        GroupPatch patch = new GroupPatch();\n-        patch.setKey(groupTO.getKey());\n-        patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.257\")).build());\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(groupTO.getKey());\n+        groupUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.257\")).build());\n \n-        groupTO = updateGroup(patch).getEntity();\n+        groupTO = updateGroup(groupUR).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(\"11.257\", groupTO.getPlainAttr(doubleSchemaName).get().getValues().get(0));\n \n@@ -1108,11 +1111,11 @@ public void issueSYNCOPE717() {\n         schemaService.update(SchemaType.PLAIN, schema);\n \n         // 7. modify group with new double value, verify that no pattern is applied\n-        patch = new GroupPatch();\n-        patch.setKey(groupTO.getKey());\n-        patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.23\")).build());\n+        groupUR = new GroupUR();\n+        groupUR.setKey(groupTO.getKey());\n+        groupUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(doubleSchemaName, \"11.23\")).build());\n \n-        groupTO = updateGroup(patch).getEntity();\n+        groupTO = updateGroup(groupUR).getEntity();\n         assertNotNull(groupTO);\n         assertEquals(\"11.23\", groupTO.getPlainAttr(doubleSchemaName).get().getValues().get(0));\n     }"},{"sha":"d4fefd9d09851d1dc1cb01e89a5b5dc7da30eabf","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,10 +28,10 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -110,20 +110,20 @@ public void misc() {\n             assertFalse(membership.getDerAttr(\"noschema\").get().getValues().isEmpty());\n \n             // update user - change some values and add new membership attribute\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(user.getKey());\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(user.getKey());\n \n-            userPatch.getPlainAttrs().add(new AttrPatch.Builder().\n+            userUR.getPlainAttrs().add(new AttrPatch.Builder().\n                     attrTO(new AttrTO.Builder().schema(\"aLong\").value(\"1977\").build()).build());\n \n             MembershipPatch membershipPatch = new MembershipPatch.Builder().group(membership.getGroupKey()).build();\n             membershipPatch.getPlainAttrs().add(\n                     new AttrTO.Builder().schema(\"aLong\").value(\"1976\").build());\n             membershipPatch.getPlainAttrs().add(\n                     new AttrTO.Builder().schema(\"ctype\").value(\"membership type\").build());\n-            userPatch.getMemberships().add(membershipPatch);\n+            userUR.getMemberships().add(membershipPatch);\n \n-            user = updateUser(userPatch).getEntity();\n+            user = updateUser(userUR).getEntity();\n \n             // 4. verify that 'aLong' is correctly populated for user\n             assertEquals(1, user.getPlainAttr(\"aLong\").get().getValues().size());\n@@ -141,14 +141,14 @@ public void misc() {\n             assertEquals(\"membership type\", membership.getPlainAttr(\"ctype\").get().getValues().get(0));\n \n             // finally remove membership\n-            userPatch = new UserPatch();\n-            userPatch.setKey(user.getKey());\n+            userUR = new UserUR();\n+            userUR.setKey(user.getKey());\n \n             membershipPatch = new MembershipPatch.Builder().group(membership.getGroupKey()).\n                     operation(PatchOperation.DELETE).build();\n-            userPatch.getMemberships().add(membershipPatch);\n+            userUR.getMemberships().add(membershipPatch);\n \n-            user = updateUser(userPatch).getEntity();\n+            user = updateUser(userUR).getEntity();\n \n             assertTrue(user.getMemberships().isEmpty());\n         } finally {\n@@ -259,11 +259,11 @@ public void pull() {\n             assertEquals(\"5432\", idOnResource);\n \n             // 3. unlink user from resource, then remove it\n-            DeassociationPatch patch = new DeassociationPatch();\n-            patch.setKey(user.getKey());\n-            patch.setAction(ResourceDeassociationAction.UNLINK);\n-            patch.getResources().add(newResource.getKey());\n-            assertNotNull(parseBatchResponse(userService.deassociate(patch)));\n+            ResourceDR req = new ResourceDR();\n+            req.setKey(user.getKey());\n+            req.setAction(ResourceDeassociationAction.UNLINK);\n+            req.getResources().add(newResource.getKey());\n+            assertNotNull(parseBatchResponse(userService.deassociate(req)));\n \n             userService.delete(user.getKey());\n "},{"sha":"5621c24a48503e917598a0f41ef3a0120467e606","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":23,"deletions":28,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -29,16 +29,13 @@\n import java.util.Base64;\n import java.util.List;\n import java.util.Locale;\n-import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n-import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -186,56 +183,56 @@ public void binaryValidation() throws IOException {\n         userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n         // validation OK - application/pdf -> application/pdf\n-        userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                 attrTO(attrTO(\"BinaryPDF\",\n                         Base64.getEncoder().encodeToString(\n                                 IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.pdf\"))))).\n                 build());\n \n-        updateUser(userPatch);\n+        updateUser(userUR);\n         assertNotNull(userService.read(userTO.getKey()).getPlainAttr(\"BinaryPDF\"));\n \n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n         // validation KO - text/html -> application/pdf\n         try {\n-            userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+            userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                     attrTO(attrTO(\"BinaryPDF\",\n                             Base64.getEncoder().encodeToString(\n                                     IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.html\"))))).\n                     build());\n \n-            updateUser(userPatch);\n+            updateUser(userUR);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidValues, e.getType());\n         }\n \n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n         // validation ok - application/json -> application/json\n-        userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                 attrTO(attrTO(\"BinaryJSON\",\n                         Base64.getEncoder().encodeToString(\n                                 IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.json\"))))).\n                 build());\n \n-        updateUser(userPatch);\n+        updateUser(userUR);\n         assertNotNull(userService.read(userTO.getKey()).getPlainAttr(\"BinaryJSON\"));\n \n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n         // no validation - application/xml -> application/json\n-        userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                 attrTO(attrTO(\"BinaryJSON2\",\n                         Base64.getEncoder().encodeToString(\n                                 IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/test.xml\"))))).\n                 build());\n \n-        updateUser(userPatch);\n+        updateUser(userUR);\n         assertNotNull(userService.read(userTO.getKey()).getPlainAttr(\"BinaryJSON2\"));\n     }\n \n@@ -353,13 +350,11 @@ public void issue259() {\n         userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n-        UserTO newUserTO = SerializationUtils.clone(userTO);\n-        newUserTO.getMemberships().add(\n-                new MembershipTO.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build());\n+        UserUR req = new UserUR.Builder().key(userTO.getKey()).\n+                membership(new MembershipPatch.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build()).build();\n \n-        userTO = userService.update(newUserTO).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n-        }).getEntity();\n-        assertNotNull(userTO);\n+        UserTO newUserTO = updateUser(req).getEntity();\n+        assertNotNull(newUserTO);\n     }\n \n     @Test"},{"sha":"30e49af648d3adca47c06c0da1bfdb11712b76d3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -32,8 +32,8 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.lib.batch.BatchRequest;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -253,14 +253,14 @@ public void issueSYNCOPE1288() {\n \n         // generate some PropagationTasks\n         for (int i = 0; i < 9; i++) {\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userTO.getKey());\n-            userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userTO.getKey());\n+            userUR.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                     attrTO(new AttrTO.Builder().schema(\"userId\").value(\n                             \"test\" + getUUIDString() + i + \"@test.com\").build()).\n                     build());\n \n-            userService.update(userPatch);\n+            userService.update(userUR);\n         }\n \n         // ASC order"},{"sha":"bb8a25cec86102375752f59b3aabbec9fea08e21","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -48,9 +48,9 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -539,7 +539,7 @@ public void reconcileFromScriptedSQL() throws IOException {\n                                     is(\"location\").equalTo(\"pull*\").query()).build());\n             assertTrue(matchingPrinters.getSize() > 0);\n             for (AnyObjectTO printer : matchingPrinters.getResult()) {\n-                anyObjectService.deassociate(new DeassociationPatch.Builder().key(printer.getKey()).\n+                anyObjectService.deassociate(new ResourceDR.Builder().key(printer.getKey()).\n                         action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_DBSCRIPTED).build());\n                 anyObjectService.delete(printer.getKey());\n             }\n@@ -767,7 +767,7 @@ public void remediation() {\n             assertEquals(AnyTypeKind.USER.name(), remediation.get().getAnyType());\n             assertEquals(ResourceOperation.CREATE, remediation.get().getOperation());\n             assertNotNull(remediation.get().getAnyTOPayload());\n-            assertNull(remediation.get().getAnyPatchPayload());\n+            assertNull(remediation.get().getAnyURPayload());\n             assertNull(remediation.get().getKeyPayload());\n             assertTrue(remediation.get().getError().contains(\"RequiredValuesMissing [userId]\"));\n \n@@ -954,11 +954,11 @@ public void issueSYNCOPE258() throws IOException {\n         userTO = createUser(userTO).getEntity();\n \n         // change email in order to unmatch the second user\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"email\", \"s258@apache.org\"));\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"email\", \"s258@apache.org\"));\n \n-        userService.update(userPatch);\n+        userService.update(userUR);\n \n         execProvisioningTask(taskService, TaskType.PULL, task.getKey(), 50, false);\n \n@@ -1127,10 +1127,10 @@ public void issueSYNCOPE313LDAP() throws Exception {\n \n             // 2. request to change password only on Syncope and not on LDAP\n             String newCleanPassword = \"new-security123\";\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(user.getKey());\n-            userPatch.setPassword(new PasswordPatch.Builder().value(newCleanPassword).build());\n-            user = updateUser(userPatch).getEntity();\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(user.getKey());\n+            userUR.setPassword(new PasswordPatch.Builder().value(newCleanPassword).build());\n+            user = updateUser(userUR).getEntity();\n \n             // 3. Check that the Syncope user now has the changed password\n             Pair<Map<String, Set<String>>, UserTO> self ="},{"sha":"523ef51bf5a43b1d7dc78ced41ccbe5ec5baabc5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RESTITCase.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -44,9 +44,9 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -114,11 +114,11 @@ public void noContent() throws IOException {\n         group = getObject(response.getLocation(), GroupService.class, GroupTO.class);\n         assertNotNull(group);\n \n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(group.getKey());\n-        groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"badge\", \"xxxxxxxxxx\"));\n+        GroupUR groupUR = new GroupUR();\n+        groupUR.setKey(group.getKey());\n+        groupUR.getPlainAttrs().add(attrAddReplacePatch(\"badge\", \"xxxxxxxxxx\"));\n \n-        response = noContentService.update(groupPatch);\n+        response = noContentService.update(groupUR);\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(\n@@ -145,19 +145,19 @@ public void ifMatch() {\n         assertNotNull(etag);\n         assertTrue(StringUtils.isNotBlank(etag.getValue()));\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"XX\").build());\n-        userTO = userService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"XX\").build());\n+        userTO = userService.update(userUR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertTrue(userTO.getUsername().endsWith(\"XX\"));\n         EntityTag etag1 = adminClient.getLatestEntityTag(userService);\n         assertFalse(etag.getValue().equals(etag1.getValue()));\n \n         UserService ifMatchService = adminClient.ifMatch(adminClient.getService(UserService.class), etag);\n-        userPatch.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"YY\").build());\n+        userUR.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"YY\").build());\n         try {\n-            ifMatchService.update(userPatch);\n+            ifMatchService.update(userUR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.ConcurrentModification, e.getType());"},{"sha":"e8033786cb09fd18fa4d880a0835939646f515e2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -28,10 +28,10 @@\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -485,11 +485,11 @@ public void issueSYNCOPE980() {\n                     new MembershipTO.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n             serviceKey = createAnyObject(anyObjectTO).getEntity().getKey();\n \n-            AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n-            anyObjectPatch.setKey(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n-            anyObjectPatch.getMemberships().add(\n+            AnyObjectUR anyObjectUR = new AnyObjectUR();\n+            anyObjectUR.setKey(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\");\n+            anyObjectUR.getMemberships().add(\n                     new MembershipPatch.Builder().group(\"29f96485-729e-4d31-88a1-6fc60e4677f3\").build());\n-            updateAnyObject(anyObjectPatch);\n+            updateAnyObject(anyObjectUR);\n \n             PagedResult<AnyObjectTO> matching = anyObjectService.search(new AnyQuery.Builder().fiql(\n                     SyncopeClient.getAnyObjectSearchConditionBuilder(service.getKey()).\n@@ -517,10 +517,10 @@ public void issueSYNCOPE983() {\n \n     @Test\n     public void issueSYNCOPE1223() {\n-        UserPatch patch = new UserPatch();\n-        patch.setKey(\"vivaldi\");\n-        patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"ctype\", \"ou=sample,o=isp\")).build());\n-        userService.update(patch);\n+        UserUR req = new UserUR();\n+        req.setKey(\"vivaldi\");\n+        req.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"ctype\", \"ou=sample,o=isp\")).build());\n+        userService.update(req);\n \n         try {\n             PagedResult<UserTO> users = userService.search(new AnyQuery.Builder().fiql(\n@@ -529,9 +529,9 @@ public void issueSYNCOPE1223() {\n             assertEquals(1, users.getTotalCount());\n             assertEquals(\"vivaldi\", users.getResult().get(0).getUsername());\n         } finally {\n-            patch.getPlainAttrs().clear();\n-            patch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"ctype\", \"F\")).build());\n-            userService.update(patch);\n+            req.getPlainAttrs().clear();\n+            req.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"ctype\", \"F\")).build());\n+            userService.update(req);\n         }\n     }\n "},{"sha":"ceb82a3a977bf973e388e3a05f8d540e743321a2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":94,"deletions":95,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -48,14 +48,14 @@\n import org.apache.syncope.client.lib.batch.BatchRequest;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.AssociationPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.ResourceAR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.ResourceDR;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n@@ -79,7 +79,7 @@\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n@@ -507,13 +507,12 @@ public void updateWithoutPassword() {\n \n         assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n-                attrTO(new AttrTO.Builder().schema(\"ctype\").build()).\n-                build());\n+        UserUR userUR = new UserUR.Builder().key(userTO.getKey()).\n+                plainAttr(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n+                        attrTO(new AttrTO.Builder().schema(\"ctype\").build()).\n+                        build()).build();\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n \n         assertNotNull(userTO);\n         assertFalse(userTO.getPlainAttr(\"ctype\").isPresent());\n@@ -527,11 +526,11 @@ public void updateInvalidPassword() {\n             userTO = createUser(userTO).getEntity();\n             assertNotNull(userTO);\n \n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userTO.getKey());\n-            userPatch.setPassword(new PasswordPatch.Builder().value(\"pass\").build());\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userTO.getKey());\n+            userUR.setPassword(new PasswordPatch.Builder().value(\"pass\").build());\n \n-            userService.update(userPatch);\n+            userService.update(userUR);\n         });\n     }\n \n@@ -544,11 +543,11 @@ public void updateSamePassword() {\n             userTO = createUser(userTO).getEntity();\n             assertNotNull(userTO);\n \n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userTO.getKey());\n-            userPatch.setPassword(new PasswordPatch.Builder().value(\"password123\").build());\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userTO.getKey());\n+            userUR.setPassword(new PasswordPatch.Builder().value(\"password123\").build());\n \n-            userService.update(userPatch);\n+            userService.update(userUR);\n         });\n     }\n \n@@ -564,22 +563,22 @@ public void update() {\n         assertFalse(userTO.getDerAttrs().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"new2Password\").build());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"new2Password\").build());\n \n         String newUserId = getUUIDString() + \"t.w@spre.net\";\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"userId\", newUserId));\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"userId\", newUserId));\n \n         String newFullName = getUUIDString() + \"g.h@t.com\";\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"fullname\", newFullName));\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"fullname\", newFullName));\n \n-        userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+        userUR.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                 group(\"f779c0d4-633b-4be5-8f57-32eb478a3ca5\").build());\n-        userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+        userUR.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                 group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n \n         // issue SYNCOPE-15\n@@ -599,12 +598,12 @@ public void update() {\n         assertEquals(Collections.singletonList(newFullName), fullNameAttr.getValues());\n \n         // update by username\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getUsername());\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getUsername());\n         String newUsername = UUID.randomUUID().toString();\n-        userPatch.setUsername(new StringReplacePatchItem.Builder().value(newUsername).build());\n+        userUR.setUsername(new StringReplacePatchItem.Builder().value(newUsername).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(newUsername, userTO.getUsername());\n     }\n@@ -620,11 +619,11 @@ public void updatePasswordOnly() {\n \n         userTO = createUser(userTO).getEntity();\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").resource(RESOURCE_NAME_WS2).build());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").resource(RESOURCE_NAME_WS2).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n \n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n@@ -675,12 +674,12 @@ public void verifyTaskRegistration() {\n         // --------------------------------------\n         // Update operation\n         // --------------------------------------\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n \n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n \n         assertNotNull(userTO);\n \n@@ -729,10 +728,10 @@ public void createActivate() {\n \n         assertEquals(\"created\", userTO.getStatus());\n \n-        StatusPatch statusPatch = new StatusPatch.Builder().key(userTO.getKey()).\n-                type(StatusPatchType.ACTIVATE).token(userTO.getToken()).build();\n+        StatusR statusR = new StatusR.Builder().key(userTO.getKey()).\n+                type(StatusRType.ACTIVATE).token(userTO.getToken()).build();\n \n-        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        userTO = userService.status(statusR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n \n         assertNotNull(userTO);\n@@ -755,17 +754,17 @@ public void suspendReactivate() {\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n \n-        StatusPatch statusPatch = new StatusPatch.Builder().key(userTO.getKey()).\n-                type(StatusPatchType.SUSPEND).token(userTO.getToken()).build();\n+        StatusR statusR = new StatusR.Builder().key(userTO.getKey()).\n+                type(StatusRType.SUSPEND).token(userTO.getToken()).build();\n \n-        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        userTO = userService.status(statusR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        statusPatch = new StatusPatch.Builder().key(userTO.getKey()).type(StatusPatchType.REACTIVATE).build();\n+        statusR = new StatusR.Builder().key(userTO.getKey()).type(StatusRType.REACTIVATE).build();\n \n-        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        userTO = userService.status(statusR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -793,12 +792,12 @@ public void suspendReactivateOnResource() {\n         String userKey = userTO.getKey();\n \n         // Suspend with effect on syncope, ldap and db => user should be suspended in syncope and all resources\n-        StatusPatch statusPatch = new StatusPatch.Builder().key(userKey).\n-                type(StatusPatchType.SUSPEND).\n+        StatusR statusR = new StatusR.Builder().key(userKey).\n+                type(StatusRType.SUSPEND).\n                 onSyncope(true).\n                 resources(RESOURCE_NAME_TESTDB, RESOURCE_NAME_LDAP).\n                 build();\n-        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        userTO = userService.status(statusR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n@@ -811,14 +810,14 @@ public void suspendReactivateOnResource() {\n         assertNotNull(connObjectTO);\n \n         // Suspend and reactivate only on ldap => db and syncope should still show suspended\n-        statusPatch = new StatusPatch.Builder().key(userKey).\n-                type(StatusPatchType.SUSPEND).\n+        statusR = new StatusR.Builder().key(userKey).\n+                type(StatusRType.SUSPEND).\n                 onSyncope(false).\n                 resources(RESOURCE_NAME_LDAP).\n                 build();\n-        userService.status(statusPatch);\n-        statusPatch.setType(StatusPatchType.REACTIVATE);\n-        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        userService.status(statusR);\n+        statusR.setType(StatusRType.REACTIVATE);\n+        userTO = userService.status(statusR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n@@ -827,12 +826,12 @@ public void suspendReactivateOnResource() {\n         assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n         // Reactivate on syncope and db => syncope and db should show the user as active\n-        statusPatch = new StatusPatch.Builder().key(userKey).\n-                type(StatusPatchType.REACTIVATE).\n+        statusR = new StatusR.Builder().key(userKey).\n+                type(StatusRType.REACTIVATE).\n                 onSyncope(true).\n                 resources(RESOURCE_NAME_TESTDB).\n                 build();\n-        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        userTO = userService.status(statusR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -854,14 +853,14 @@ public void updateMultivalueAttribute() {\n         assertNotNull(loginDate);\n         assertEquals(1, loginDate.getValues().size());\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n \n         loginDate.getValues().add(\"2000-01-01\");\n-        userPatch.getPlainAttrs().add(new AttrPatch.Builder().\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder().\n                 operation(PatchOperation.ADD_REPLACE).attrTO(loginDate).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n \n         loginDate = userTO.getPlainAttr(\"loginDate\").get();\n@@ -899,13 +898,13 @@ public void async() {\n         assertNotNull(result);\n         verifyAsyncResult(result.getPropagationStatuses());\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(result.getEntity().getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(result.getEntity().getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().\n                 onSyncope(true).resources(RESOURCE_NAME_LDAP, RESOURCE_NAME_TESTDB, RESOURCE_NAME_TESTDB2).\n                 value(\"password321\").build());\n \n-        result = asyncService.update(userPatch).readEntity(\n+        result = asyncService.update(userUR).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertNotNull(result);\n@@ -1051,8 +1050,8 @@ public void batch() throws IOException {\n \n         UserService batchUserService = batchRequest.getService(UserService.class);\n         users.forEach(user -> {\n-            batchUserService.status(\n-                    new StatusPatch.Builder().key(user).type(StatusPatchType.SUSPEND).onSyncope(true).build());\n+            batchUserService.status(new StatusR.Builder().key(user).type(StatusRType.SUSPEND).onSyncope(true).\n+                    build());\n         });\n         List<BatchResponseItem> batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n         assertEquals(10, batchResponseItems.stream().\n@@ -1063,8 +1062,8 @@ public void batch() throws IOException {\n \n         UserService batchUserService2 = batchRequest.getService(UserService.class);\n         users.forEach(user -> {\n-            batchUserService2.status(\n-                    new StatusPatch.Builder().key(user).type(StatusPatchType.REACTIVATE).onSyncope(true).build());\n+            batchUserService2.status(new StatusR.Builder().key(user).type(StatusRType.REACTIVATE).onSyncope(true).\n+                    build());\n         });\n         batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n         assertEquals(10, batchResponseItems.stream().\n@@ -1104,10 +1103,10 @@ public void unlink() throws IOException {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n+        ResourceDR resourceDR = new ResourceDR.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.UNLINK).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n+        assertNotNull(parseBatchResponse(userService.deassociate(resourceDR)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1135,10 +1134,10 @@ public void link() throws IOException {\n             assertNotNull(e);\n         }\n \n-        AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n+        ResourceAR resourceAR = new ResourceAR.Builder().key(actual.getKey()).\n                 action(ResourceAssociationAction.LINK).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(parseBatchResponse(userService.associate(associationPatch)));\n+        assertNotNull(parseBatchResponse(userService.associate(resourceAR)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1165,10 +1164,10 @@ public void unassign() throws IOException {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n+        ResourceDR resourceDR = new ResourceDR.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.UNASSIGN).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n+        assertNotNull(parseBatchResponse(userService.deassociate(resourceDR)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1201,10 +1200,10 @@ public void assign() throws IOException {\n             assertNotNull(e);\n         }\n \n-        AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n+        ResourceAR resourceAR = new ResourceAR.Builder().key(actual.getKey()).\n                 value(\"password\").action(ResourceAssociationAction.ASSIGN).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(parseBatchResponse(userService.associate(associationPatch)));\n+        assertNotNull(parseBatchResponse(userService.associate(resourceAR)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1225,10 +1224,10 @@ public void deprovision() throws IOException {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n+        ResourceDR resourceDR = new ResourceDR.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.DEPROVISION).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n+        assertNotNull(parseBatchResponse(userService.deassociate(resourceDR)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1261,10 +1260,10 @@ public void provision() throws IOException {\n             assertNotNull(e);\n         }\n \n-        AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n+        ResourceAR resourceAR = new ResourceAR.Builder().key(actual.getKey()).\n                 value(\"password\").action(ResourceAssociationAction.PROVISION).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(parseBatchResponse(userService.associate(associationPatch)));\n+        assertNotNull(parseBatchResponse(userService.associate(resourceAR)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1291,20 +1290,20 @@ public void deprovisionUnlinked() throws IOException {\n             assertNotNull(e);\n         }\n \n-        AssociationPatch associationPatch = new AssociationPatch.Builder().key(actual.getKey()).\n+        ResourceAR resourceAR = new ResourceAR.Builder().key(actual.getKey()).\n                 value(\"password\").action(ResourceAssociationAction.PROVISION).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(parseBatchResponse(userService.associate(associationPatch)));\n+        assertNotNull(parseBatchResponse(userService.associate(resourceAR)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        DeassociationPatch deassociationPatch = new DeassociationPatch.Builder().key(actual.getKey()).\n+        ResourceDR resourceDR = new ResourceDR.Builder().key(actual.getKey()).\n                 action(ResourceDeassociationAction.DEPROVISION).resource(RESOURCE_NAME_CSV).build();\n \n-        assertNotNull(parseBatchResponse(userService.deassociate(deassociationPatch)));\n+        assertNotNull(parseBatchResponse(userService.deassociate(resourceDR)));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1341,11 +1340,11 @@ public void restResource() {\n         assertNotNull(response.getEntity());\n \n         // 2. update\n-        UserPatch patch = new UserPatch();\n-        patch.setKey(result.getEntity().getKey());\n-        patch.getPlainAttrs().add(new AttrPatch.Builder().\n-                attrTO(new AttrTO.Builder().schema(\"surname\").value(\"surname2\").build()).build());\n-        result = userService.update(patch).readEntity(\n+        UserUR userUR = new UserUR.Builder().key(result.getEntity().getKey()).\n+                plainAttr(new AttrPatch.Builder().\n+                        attrTO(new AttrTO.Builder().schema(\"surname\").value(\"surname2\").build()).build()).\n+                build();\n+        result = userService.update(userUR).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n         });\n         assertEquals(1, result.getPropagationStatuses().size());"},{"sha":"d3b6463dc8a003722d9d75b952aa9eca92627b5f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":154,"deletions":153,"changes":307,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -45,12 +45,12 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -112,40 +112,41 @@ public void issue186() {\n         assertTrue(userTO.getResources().isEmpty());\n \n         // 2. update assigning a resource forcing mandatory constraints: must fail with RequiredValuesMissing\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n+        UserUR userUR = new UserUR.Builder().\n+                key(userTO.getKey()).\n+                password(new PasswordPatch.Builder().value(\"newPassword123\").build()).\n+                resource(new StringPatchItem.Builder().\n+                        operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build()).\n+                build();\n \n         try {\n-            userTO = updateUser(userPatch).getEntity();\n+            userTO = updateUser(userUR).getEntity();\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n         // 3. update assigning a resource NOT forcing mandatory constraints\n         // AND priority: must fail with PropagationException\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n \n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userUR);\n         assertNotNull(result.getPropagationStatuses().get(0).getFailureReason());\n         userTO = result.getEntity();\n \n         // 4. update assigning a resource NOT forcing mandatory constraints\n         // BUT not priority: must succeed\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123456\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"newPassword123456\").build());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_CSV).build());\n \n-        updateUser(userPatch);\n+        updateUser(userUR);\n     }\n \n     @Test\n@@ -162,12 +163,12 @@ public void issue213() {\n                 jdbcTemplate, 50, \"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n         assertEquals(userTO.getUsername(), username);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getResources().add(\n                 new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(RESOURCE_NAME_TESTDB).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertTrue(userTO.getResources().isEmpty());\n \n         Exception exception = null;\n@@ -187,12 +188,12 @@ public void issue234() {\n         UserTO userTO = createUser(inUserTO).getEntity();\n         assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n+        UserUR userUR = new UserUR();\n \n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setUsername(new StringReplacePatchItem.Builder().value(\"1\" + userTO.getUsername()).build());\n+        userUR.setKey(userTO.getKey());\n+        userUR.setUsername(new StringReplacePatchItem.Builder().value(\"1\" + userTO.getUsername()).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"1\" + inUserTO.getUsername(), userTO.getUsername());\n     }\n@@ -206,14 +207,14 @@ public void issue280() {\n         userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().onSyncope(false).\n                 resource(RESOURCE_NAME_TESTDB).value(\"123password\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n \n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userUR);\n         assertNotNull(result);\n \n         List<PropagationStatus> propagations = result.getPropagationStatuses();\n@@ -285,13 +286,13 @@ public void issueSYNCOPE108() {\n         // -----------------------------------\n         // Remove the first membership: de-provisioning shouldn't happen\n         // -----------------------------------\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n \n-        userPatch.getMemberships().add(new MembershipPatch.Builder().\n+        userUR.getMemberships().add(new MembershipPatch.Builder().\n                 operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n \n@@ -302,13 +303,13 @@ public void issueSYNCOPE108() {\n         // -----------------------------------\n         // Remove the resource assigned directly: de-provisioning shouldn't happen\n         // -----------------------------------\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n \n-        userPatch.getResources().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).\n+        userUR.getResources().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).\n                 value(userTO.getResources().iterator().next()).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getMemberships().size());\n         assertFalse(userTO.getResources().isEmpty());\n@@ -320,13 +321,13 @@ public void issueSYNCOPE108() {\n         // -----------------------------------\n         // Remove the first membership: de-provisioning should happen\n         // -----------------------------------\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n \n-        userPatch.getMemberships().add(new MembershipPatch.Builder().\n+        userUR.getMemberships().add(new MembershipPatch.Builder().\n                 operation(PatchOperation.DELETE).group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n         assertTrue(userTO.getMemberships().isEmpty());\n         assertTrue(userTO.getResources().isEmpty());\n@@ -431,14 +432,14 @@ public void issueSYNCOPE266() {\n         userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n \n         // this resource has not a mapping for Password\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_UPDATE).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n     }\n \n@@ -486,12 +487,12 @@ public void issueSYNCOPE122() {\n         String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().iterator().next();\n \n         // 2. request to change password only on testdb (no Syncope, no testdb2)\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(getUUIDString()).onSyncope(false).\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(getUUIDString()).onSyncope(false).\n                 resource(RESOURCE_NAME_TESTDB).build());\n \n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userUR);\n         userTO = result.getEntity();\n \n         // 3a. Chech that only a single propagation took place\n@@ -539,13 +540,13 @@ public void issueSYNCOPE136AES() {\n             assertNotNull(userTO);\n \n             // 4. update user, assign a propagation priority resource but don't provide any password\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userTO.getKey());\n-            userPatch.getResources().add(new StringPatchItem.Builder().\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userTO.getKey());\n+            userUR.getResources().add(new StringPatchItem.Builder().\n                     operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n-            userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n+            userUR.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n \n-            ProvisioningResult<UserTO> result = updateUser(userPatch);\n+            ProvisioningResult<UserTO> result = updateUser(userUR);\n             assertNotNull(result);\n             userTO = result.getEntity();\n             assertNotNull(userTO);\n@@ -578,13 +579,13 @@ public void issueSYNCOPE136Random() {\n         assertNotNull(userTO);\n \n         // 2. update user, assign a propagation priority resource but don't provide any password\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n-        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n+        userUR.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n \n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userUR);\n         assertNotNull(result);\n \n         // 3. verify that propagation was successful\n@@ -607,10 +608,10 @@ public void issueSYNCOPE265() {\n             \"823074dc-d280-436d-a7dd-07399fae48ec\" };\n \n         for (String userKey : userKeys) {\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userKey);\n-            userPatch.getPlainAttrs().add(attrAddReplacePatch(\"ctype\", \"a type\"));\n-            UserTO userTO = updateUser(userPatch).getEntity();\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userKey);\n+            userUR.getPlainAttrs().add(attrAddReplacePatch(\"ctype\", \"a type\"));\n+            UserTO userTO = updateUser(userUR).getEntity();\n             assertEquals(\"a type\", userTO.getPlainAttr(\"ctype\").get().getValues().get(0));\n         }\n     }\n@@ -652,12 +653,12 @@ public void issueSYNCOPE354() {\n                 contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n \n         // 4. remove membership\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n                 group(userTO.getMemberships().get(0).getGroupKey()).build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n         // 5. read group on resource, check that user DN was removed from uniqueMember\n@@ -735,12 +736,12 @@ public void issueSYNCOPE383() {\n         assertNotNull(userTO);\n \n         // 2. assign resource without specifying a new pwd and check propagation failure\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n \n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userUR);\n         assertNotNull(result);\n         userTO = result.getEntity();\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n@@ -749,13 +750,13 @@ public void issueSYNCOPE383() {\n         userTO = result.getEntity();\n \n         // 3. request to change password only on testdb\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(\n                 new PasswordPatch.Builder().value(getUUIDString() + \"abbcbcbddd123\").resource(RESOURCE_NAME_TESTDB).\n                         build());\n \n-        result = updateUser(userPatch);\n+        result = updateUser(userUR);\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n     }\n@@ -779,14 +780,14 @@ public void issueSYNCOPE402() {\n \n         // 2. update assigning a resource NOT forcing mandatory constraints\n         // AND priority: must fail with PropagationException\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userUR);\n \n         PropagationStatus ws1PropagationStatus = result.getPropagationStatuses().stream().\n                 filter(propStatus -> RESOURCE_NAME_WS1.equals(propStatus.getResource())).\n@@ -827,11 +828,11 @@ public void issueSYNCOPE420() throws IOException {\n         userTO = createUser(userTO).getEntity();\n         assertEquals(\"6\", userTO.getPlainAttr(\"makeItDouble\").get().getValues().get(0));\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"makeItDouble\", \"7\"));\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"makeItDouble\", \"7\"));\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertEquals(\"14\", userTO.getPlainAttr(\"makeItDouble\").get().getValues().get(0));\n     }\n \n@@ -841,10 +842,10 @@ public void issueSYNCOPE426() {\n         userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n-        userTO = userService.update(userPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n+        userTO = userService.update(userUR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertNotNull(userTO);\n     }\n@@ -858,12 +859,12 @@ public void issueSYNCOPE435() {\n         assertNotNull(userTO);\n \n         // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n \n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userUR);\n         assertNotNull(result);\n         userTO = result.getEntity();\n         assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n@@ -891,12 +892,12 @@ public void issueSYNCOPE454() throws NamingException {\n                 connObject.getAttr(Name.NAME).get().getValues().get(0)));\n \n         // 4. update user without any password change request\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch());\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n \n-        userService.update(userPatch);\n+        userService.update(userUR);\n \n         // 5. try (and succeed again) to perform simple LDAP binding: password has not changed\n         assertNotNull(getLdapRemoteObject(\n@@ -946,12 +947,12 @@ public void issueSYNCOPE493() {\n         assertEquals(7, mapItems.size());\n \n         // 3.  update user and check firstname propagation\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"firstname\", \"firstnameNew\"));\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch());\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"firstname\", \"firstnameNew\"));\n \n-        result = updateUser(userPatch);\n+        result = updateUser(userUR);\n         assertNotNull(userTO);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(ExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n@@ -1003,14 +1004,14 @@ public void issueSYNCOPE505DB() throws Exception {\n         resourceService.update(resourceTO);\n \n         // 3. Add a db resource to the User\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(user.getKey());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n \n-        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n+        userUR.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n \n-        user = updateUser(userPatch).getEntity();\n+        user = updateUser(userUR).getEntity();\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n \n@@ -1054,14 +1055,14 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         resourceService.update(resourceTO);\n \n         // 3. Add a resource to the User\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(user.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(user.getKey());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n \n-        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n+        userUR.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n \n-        user = updateUser(userPatch).getEntity();\n+        user = updateUser(userUR).getEntity();\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n \n@@ -1209,11 +1210,11 @@ public void issueSYNCOPE647() {\n         assertNotNull(connObjectTO);\n         assertEquals(\"postalAddress\", connObjectTO.getAttr(\"postalAddress\").get().getValues().get(0));\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(actual.getKey());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"postalAddress\", \"newPostalAddress\"));\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(actual.getKey());\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"postalAddress\", \"newPostalAddress\"));\n \n-        actual = updateUser(userPatch).getEntity();\n+        actual = updateUser(userUR).getEntity();\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n         assertNotNull(connObjectTO);\n@@ -1294,12 +1295,12 @@ public void issueSYNCOPE686() {\n             assertNotNull(userTO);\n \n             // 5. update user with the new group, and don't provide any password\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userTO.getKey());\n-            userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userTO.getKey());\n+            userUR.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                     group(group.getKey()).build());\n \n-            ProvisioningResult<UserTO> result = updateUser(userPatch);\n+            ProvisioningResult<UserTO> result = updateUser(userUR);\n             assertNotNull(result);\n \n             // 5. verify that propagation was successful\n@@ -1340,12 +1341,12 @@ public void issueSYNCOPE710() {\n         userTO = result.getEntity();\n \n         // 3. request to propagate password only to db\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().\n                 onSyncope(false).resource(RESOURCE_NAME_TESTDB).value(\"newpassword123\").build());\n \n-        result = updateUser(userPatch);\n+        result = updateUser(userUR);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_TESTDB, result.getPropagationStatuses().get(0).getResource());\n     }\n@@ -1419,20 +1420,20 @@ public void issueSYNCOPE1166() {\n         userTO = createUser(userTO).getEntity();\n         assertNotNull(userTO);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n         // resource-ldap has password mapped, resource-db-virattr does not\n-        userPatch.setPassword(new PasswordPatch.Builder().\n+        userUR.setPassword(new PasswordPatch.Builder().\n                 onSyncope(true).\n                 resource(RESOURCE_NAME_LDAP).\n                 value(\"new2Password\").build());\n \n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_DBVIRATTR).build());\n \n-        ProvisioningResult<UserTO> result = updateUser(userPatch);\n+        ProvisioningResult<UserTO> result = updateUser(userUR);\n         assertNotNull(result);\n         assertEquals(2, result.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n@@ -1459,20 +1460,20 @@ public void issueSYNCOPE1206() {\n         assertTrue(result.getPropagationStatuses().isEmpty());\n \n         // 3. update user to match the dynamic condition: expect propagation to LDAP\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(result.getEntity().getKey());\n-        userPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"cool\", \"true\")).build());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(result.getEntity().getKey());\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"cool\", \"true\")).build());\n \n-        result = updateUser(userPatch);\n+        result = updateUser(userUR);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n \n         // 4. update again user to not match the dynamic condition any more: expect propagation to LDAP\n-        userPatch = new UserPatch();\n-        userPatch.setKey(result.getEntity().getKey());\n-        userPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"cool\", \"false\")).build());\n+        userUR = new UserUR();\n+        userUR.setKey(result.getEntity().getKey());\n+        userUR.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"cool\", \"false\")).build());\n \n-        result = updateUser(userPatch);\n+        result = updateUser(userUR);\n         assertEquals(1, result.getPropagationStatuses().size());\n         assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n     }\n@@ -1495,25 +1496,25 @@ public void issueSYNCOPE1337() {\n             assertNotNull(userTO);\n \n             // 3. attempt to set the same password value: fails\n-            UserPatch patch = new UserPatch();\n-            patch.setKey(userTO.getKey());\n-            patch.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password123\").build());\n+            UserUR req = new UserUR();\n+            req.setKey(userTO.getKey());\n+            req.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password123\").build());\n             try {\n-                updateUser(patch);\n+                updateUser(req);\n                 fail(\"Password update should not work\");\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.InvalidUser, e.getType());\n                 assertTrue(e.getMessage().contains(\"InvalidPassword\"));\n             }\n \n             // 4. set another password value: works\n-            patch.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password124\").build());\n-            userTO = updateUser(patch).getEntity();\n+            req.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password124\").build());\n+            userTO = updateUser(req).getEntity();\n             assertNotNull(userTO);\n \n             // 5. set the original password value: works (history length is 1)\n-            patch.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password123\").build());\n-            userTO = updateUser(patch).getEntity();\n+            req.setPassword(new PasswordPatch.Builder().onSyncope(true).value(\"Password123\").build());\n+            userTO = updateUser(req).getEntity();\n             assertNotNull(userTO);\n         } finally {\n             // finally revert the cipher algorithm"},{"sha":"8b33f8cf54ab31026040a38f869d5153031fcd19","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -40,12 +40,12 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.MembershipPatch;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.request.MembershipPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n@@ -224,12 +224,12 @@ public void updateWithoutApproval() {\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n         // 2. self-update (username) - works\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(created.getKey());\n-        userPatch.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(created.getKey());\n+        userUR.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n-        UserTO updated = authClient.getService(UserSelfService.class).update(userPatch).\n+        UserTO updated = authClient.getService(UserSelfService.class).update(userUR).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n         assertNotNull(updated);\n@@ -248,20 +248,20 @@ public void updateWithApproval() {\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n         // 2. self-update (username + memberships + resource) - works but needs approval\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(created.getKey());\n-        userPatch.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n-        userPatch.getMemberships().add(new MembershipPatch.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(created.getKey());\n+        userUR.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n+        userUR.getMemberships().add(new MembershipPatch.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n                 group(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").\n                 build());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n-        userPatch.setPassword(new PasswordPatch.Builder().\n+        userUR.setPassword(new PasswordPatch.Builder().\n                 value(\"newPassword123\").onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n-        UserTO updated = authClient.getService(UserSelfService.class).update(userPatch).\n+        UserTO updated = authClient.getService(UserSelfService.class).update(userUR).\n                 readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n                 }).getEntity();\n         assertNotNull(updated);\n@@ -420,21 +420,21 @@ public void passwordResetWithoutSecurityQuestion() {\n     @Test\n     public void mustChangePassword() {\n         // PRE: reset vivaldi's password\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"password321\").build());\n-        userService.update(userPatch);\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"password321\").build());\n+        userService.update(userUR);\n \n         // 0. access as vivaldi -> succeed\n         SyncopeClient vivaldiClient = clientFactory.create(\"vivaldi\", \"password321\");\n         Response response = vivaldiClient.getService(AccessTokenService.class).refresh();\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n \n         // 1. update user vivaldi requiring password update\n-        userPatch = new UserPatch();\n-        userPatch.setKey(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n-        userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(true).build());\n-        UserTO vivaldi = updateUser(userPatch).getEntity();\n+        userUR = new UserUR();\n+        userUR.setKey(\"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\");\n+        userUR.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(true).build());\n+        UserTO vivaldi = updateUser(userUR).getEntity();\n         assertTrue(vivaldi.isMustChangePassword());\n \n         // 2. attempt to access -> fail\n@@ -484,11 +484,11 @@ public void createWithReject() {\n         // groupForWorkflowApproval, designated for approval in workflow definition: fail\n         UserTO rossini = userService.read(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n         if (!rossini.getRoles().contains(\"User manager\")) {\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n-            userPatch.getRoles().add(new StringPatchItem.Builder().\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(\"1417acbe-cbf6-4277-9372-e75e04f97000\");\n+            userUR.getRoles().add(new StringPatchItem.Builder().\n                     operation(PatchOperation.ADD_REPLACE).value(\"User manager\").build());\n-            rossini = updateUser(userPatch).getEntity();\n+            rossini = updateUser(userUR).getEntity();\n         }\n         assertTrue(rossini.getRoles().contains(\"User manager\"));\n \n@@ -571,18 +571,18 @@ public void createWithApproval() {\n \n         // 3. as admin, update user: still pending approval\n         String updatedUsername = \"changed-\" + UUID.randomUUID().toString();\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setUsername(new StringReplacePatchItem.Builder().value(updatedUsername).build());\n-        updateUser(userPatch);\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setUsername(new StringReplacePatchItem.Builder().value(updatedUsername).build());\n+        updateUser(userUR);\n \n         UserRequestForm form = userRequestService.getForms(\n                 new UserRequestFormQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getUserTO());\n         assertEquals(updatedUsername, form.getUserTO().getUsername());\n-        assertNull(form.getUserPatch());\n+        assertNull(form.getUserUR());\n         assertNull(form.getAssignee());\n \n         // 4. claim task (as admin)\n@@ -591,7 +591,7 @@ public void createWithApproval() {\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getUserTO());\n         assertEquals(updatedUsername, form.getUserTO().getUsername());\n-        assertNull(form.getUserPatch());\n+        assertNull(form.getUserUR());\n         assertNotNull(form.getAssignee());\n \n         // 5. approve user (and verify that propagation occurred)\n@@ -607,11 +607,11 @@ public void createWithApproval() {\n         assertEquals(userTO.getUsername(), username);\n \n         // 6. update user\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n     }\n \n@@ -629,12 +629,12 @@ public void updateApproval() {\n         assertEquals(\"/\", created.getRealm());\n         assertEquals(0, created.getMemberships().size());\n \n-        UserPatch patch = new UserPatch();\n-        patch.setKey(created.getKey());\n-        patch.getMemberships().add(new MembershipPatch.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build());\n+        UserUR req = new UserUR();\n+        req.setKey(created.getKey());\n+        req.getMemberships().add(new MembershipPatch.Builder().group(\"b1f7c12d-ec83-441f-a50e-1691daaedf3b\").build());\n \n         SyncopeClient client = clientFactory.create(created.getUsername(), \"password123\");\n-        Response response = client.getService(UserSelfService.class).update(patch);\n+        Response response = client.getService(UserSelfService.class).update(req);\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\"updateApproval\", userService.read(created.getKey()).getStatus());\n \n@@ -647,11 +647,11 @@ public void updateApproval() {\n         assertNotNull(form.getTaskId());\n         assertNull(form.getAssignee());\n         assertNotNull(form.getUserTO());\n-        assertNotNull(form.getUserPatch());\n-        assertEquals(patch, form.getUserPatch());\n+        assertNotNull(form.getUserUR());\n+        assertEquals(req, form.getUserUR());\n \n         // as admin, update user: still pending approval\n-        UserPatch adminPatch = new UserPatch();\n+        UserUR adminPatch = new UserUR();\n         adminPatch.setKey(created.getKey());\n         adminPatch.setRealm(new StringReplacePatchItem.Builder().value(\"/even/two\").build());\n \n@@ -663,7 +663,7 @@ public void updateApproval() {\n         // the patch is not updated in the approval form\n         form = userRequestService.getForms(\n                 new UserRequestFormQuery.Builder().user(created.getKey()).build()).getResult().get(0);\n-        assertEquals(patch, form.getUserPatch());\n+        assertEquals(req, form.getUserUR());\n \n         // approve the user\n         form = userRequestService.claimForm(form.getTaskId());"},{"sha":"1831dc4dfcda5be0425f36ceeee29e603a9f300f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirAttrITCase.java","status":"modified","additions":45,"deletions":46,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirAttrITCase.java?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -33,10 +33,10 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.patch.PasswordPatch;\n-import org.apache.syncope.common.lib.patch.StatusPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n-import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.StatusR;\n+import org.apache.syncope.common.lib.request.StringPatchItem;\n+import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -56,7 +56,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.lib.types.StatusRType;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.fit.AbstractITCase;\n@@ -89,12 +89,12 @@ public void issueSYNCOPE16() {\n         assertNotNull(userTO);\n         assertEquals(\"virtualvalue\", userTO.getVirAttr(\"virtualdata\").get().getValues().get(0));\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n \n         // 3. update virtual attribute\n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n \n         // 4. check for virtual attribute value\n@@ -148,11 +148,11 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // update user virtual attribute and check virtual attribute value update propagation\n         // ----------------------------------\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getVirAttrs().add(attrTO(virSchema.getKey(), \"virtualvalue2\"));\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getVirAttrs().add(attrTO(virSchema.getKey(), \"virtualvalue2\"));\n \n-        result = updateUser(userPatch);\n+        result = updateUser(userUR);\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n@@ -166,18 +166,17 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // suspend/reactivate user and check virtual attribute value (unchanged)\n         // ----------------------------------\n-        StatusPatch statusPatch = new StatusPatch.Builder().key(userTO.getKey()).\n-                type(StatusPatchType.SUSPEND).build();\n-        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        StatusR statusR = new StatusR.Builder().key(userTO.getKey()).type(StatusRType.SUSPEND).build();\n+        userTO = userService.status(statusR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n         assertEquals(\"virtualvalue2\", connObjectTO.getAttr(\"COMPANYNAME\").get().getValues().get(0));\n \n-        statusPatch = new StatusPatch.Builder().key(userTO.getKey()).\n-                type(StatusPatchType.REACTIVATE).build();\n-        userTO = userService.status(statusPatch).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        statusR = new StatusR.Builder().key(userTO.getKey()).\n+                type(StatusRType.REACTIVATE).build();\n+        userTO = userService.status(statusR).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n         }).getEntity();\n         assertEquals(\"active\", userTO.getStatus());\n \n@@ -188,11 +187,11 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // update user attribute and check virtual attribute value (unchanged)\n         // ----------------------------------\n-        userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"Surname2\"));\n+        userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"Surname2\"));\n \n-        result = updateUser(userPatch);\n+        result = updateUser(userUR);\n         assertNotNull(result);\n         assertFalse(result.getPropagationStatuses().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, result.getPropagationStatuses().get(0).getResource());\n@@ -246,12 +245,12 @@ public void virAttrCache() {\n         actual = userService.read(actual.getKey());\n         assertEquals(\"virattrcache\", actual.getVirAttr(\"virtualdata\").get().getValues().get(0));\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(actual.getKey());\n-        userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(actual.getKey());\n+        userUR.getVirAttrs().add(attrTO(\"virtualdata\", \"virtualupdated\"));\n \n         // 5. update virtual attribute\n-        actual = updateUser(userPatch).getEntity();\n+        actual = updateUser(userUR).getEntity();\n         assertNotNull(actual);\n \n         // 6. check for virtual attribute value\n@@ -317,23 +316,23 @@ public void issueSYNCOPE397() {\n \n             // update user\n             UserTO toBeUpdated = userService.read(userTO.getKey());\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(toBeUpdated.getKey());\n-            userPatch.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(toBeUpdated.getKey());\n+            userUR.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n             // assign new resource to user\n-            userPatch.getResources().add(new StringPatchItem.Builder().\n+            userUR.getResources().add(new StringPatchItem.Builder().\n                     operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n             // modify virtual attribute\n-            userPatch.getVirAttrs().add(attrTO(virSchema.getKey(), \"test@testoneone.com\"));\n+            userUR.getVirAttrs().add(attrTO(virSchema.getKey(), \"test@testoneone.com\"));\n \n             // check Syncope change password\n-            userPatch.setPassword(new PasswordPatch.Builder().\n+            userUR.setPassword(new PasswordPatch.Builder().\n                     value(\"password234\").\n                     onSyncope(true).\n                     resource(RESOURCE_NAME_WS2).\n                     build());\n \n-            ProvisioningResult<UserTO> result = updateUser(userPatch);\n+            ProvisioningResult<UserTO> result = updateUser(userUR);\n             assertNotNull(result);\n             toBeUpdated = result.getEntity();\n             assertTrue(toBeUpdated.getVirAttrs().iterator().next().getValues().contains(\"test@testoneone.com\"));\n@@ -421,11 +420,11 @@ public void issueSYNCOPE442() {\n         assertEquals(\"virattrcache\", userTO.getVirAttr(\"virtualdata\").get().getValues().get(0));\n \n         // force cache update by adding a resource which has virtualdata mapped for propagation\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n+        userUR.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n \n         userTO = userService.read(userTO.getKey());\n@@ -604,12 +603,12 @@ public void issueSYNCOPE501() {\n         assertEquals(\"syncope501@apache.org\", userTO.getVirAttr(\"virtualdata\").get().getValues().get(0));\n \n         // 2. update virtual attribute\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(userTO.getKey());\n+        UserUR userUR = new UserUR();\n+        userUR.setKey(userTO.getKey());\n         // change virtual attribute value\n-        userPatch.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501_updated@apache.org\"));\n+        userUR.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501_updated@apache.org\"));\n \n-        userTO = updateUser(userPatch).getEntity();\n+        userTO = updateUser(userUR).getEntity();\n         assertNotNull(userTO);\n \n         // 3. check that user virtual attribute has really been updated \n@@ -679,16 +678,16 @@ public void issueSYNCOPE691() {\n             assertTrue(userTO.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom2.org\"));\n \n             // update user\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(userTO.getKey());\n+            UserUR userUR = new UserUR();\n+            userUR.setKey(userTO.getKey());\n             // modify virtual attribute\n-            userPatch.getVirAttrs().add(\n+            userUR.getVirAttrs().add(\n                     new AttrTO.Builder().schema(virSchema.getKey()).\n                             value(\"test@issue691.dom3.org\").\n                             value(\"test@issue691.dom4.org\").\n                             build());\n \n-            UserTO updated = updateUser(userPatch).getEntity();\n+            UserTO updated = updateUser(userUR).getEntity();\n             assertNotNull(updated);\n             assertEquals(2, updated.getVirAttrs().iterator().next().getValues().size());\n             assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom3.org\"));"},{"sha":"9d01e695891fe97366dbc0e17d93a28f92cac2e2","filename":"fit/core-reference/src/test/resources/DoubleValueLogicActions.groovy","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2FDoubleValueLogicActions.groovy?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -1,3 +1,4 @@\n+\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,8 +18,8 @@\n  * under the License.\n  */\n import groovy.transform.CompileStatic\n-import org.apache.syncope.common.lib.patch.AnyPatch\n-import org.apache.syncope.common.lib.patch.AttrPatch\n+import org.apache.syncope.common.lib.request.AnyUR\n+import org.apache.syncope.common.lib.request.AttrPatch\n import org.apache.syncope.common.lib.to.AnyTO\n import org.apache.syncope.common.lib.to.AttrTO\n import org.apache.syncope.core.provisioning.api.LogicActions\n@@ -52,7 +53,7 @@ class DoubleValueLogicActions implements LogicActions {\n   }\n \n   @Override\n-  <M extends AnyPatch> M beforeUpdate(final M input) {\n+  <R extends AnyUR> R beforeUpdate(final R input) {\n     for (AttrPatch patch : input.getPlainAttrs()) {\n       if (NAME.equals(patch.getAttrTO().getSchema())) {\n         List<String> values = new ArrayList<String>(patch.getAttrTO().getValues().size());"},{"sha":"acacc2f6abf7501baf2bad8ee0d2a535e55abc1a","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/restfulservices.adoc","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8340ea41714d393acf77be86d6d21f0f972f5cd0/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8340ea41714d393acf77be86d6d21f0f972f5cd0/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Frestfulservices.adoc?ref=8340ea41714d393acf77be86d6d21f0f972f5cd0","patch":"@@ -258,8 +258,8 @@ Accept: application/xml\n Content-Length: 628\n Content-Type: application/xml\n ^M\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><syncope21:group xmlns:syncope21=\"http://syncope.apache.org/2.1\">\n-</syncope21:group>\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><syncope30:group xmlns:syncope30=\"http://syncope.apache.org/3.0\">\n+</syncope30:group>\n --batch_61bfef8d-0a00-41aa-b775-7b6efff37652\n Content-Type: application/http\n Content-Transfer-Encoding: binary\n@@ -270,7 +270,7 @@ Content-Length: 362\n Content-Type: application/json\n Prefer: return-no-content\n ^M\n-{\"@class\":\"org.apache.syncope.common.lib.patch.UserPatch\",\"key\":\"24eb15aebatch@syncope.apache.org\"}\n+{\"@class\":\"org.apache.syncope.common.lib.request.UserUR\",\"key\":\"24eb15aebatch@syncope.apache.org\"}\n --batch_61bfef8d-0a00-41aa-b775-7b6efff37652\n Content-Type: application/http\n Content-Transfer-Encoding: binary\n@@ -334,7 +334,7 @@ X-Syncope-Domain: Master\n X-Syncope-Key: 843b2fc3-b8a8-4a8b-bb2f-c3b8a87a8b2e\n ^M\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n-<syncope21:provisioningResult xmlns:syncope21=\"http://syncope.apache.org/2.1\"></syncope21:provisioningResult>\n+<syncope30:provisioningResult xmlns:syncope30=\"http://syncope.apache.org/3.0\"></syncope30:provisioningResult>\n --batch_61bfef8d-0a00-41aa-b775-7b6efff37652\n Content-Type: application/http\n Content-Transfer-Encoding: binary\n@@ -712,10 +712,10 @@ Map<String, Set<String>> realm2entitlements = self.getLeft(); // <2>\n [source,java]\n ----\n String key = ...; // <1>\n-StatusPatch statusPatch = new StatusPatch();\n-statusPatch.setKey(key);\n-statusPatch.setType(StatusPatchType.SUSPEND); // <2>\n-UserTO userTO = userService.status(statusPatch).\n+StatusR statusR = new StatusR();\n+statusR.setKey(key);\n+statusR.setType(StatusRType.SUSPEND); // <2>\n+UserTO userTO = userService.status(statusR).\n   readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n   }).getEntity(); // <3>\n ----"}]}