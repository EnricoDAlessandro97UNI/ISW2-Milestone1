{"sha":"11804ed53f253f7f61f2b5f7939c9047ce3ac889","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExODA0ZWQ1M2YyNTNmN2Y2MWYyYjVmNzkzOWM5MDQ3Y2UzYWM4ODk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-01T15:28:18Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-01T15:28:18Z"},"message":"bug-fixing and test improvement of identityconnectors features\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246454 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aff3733f537353d646f8ab7ec2009d086fd4885c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/aff3733f537353d646f8ab7ec2009d086fd4885c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/11804ed53f253f7f61f2b5f7939c9047ce3ac889","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11804ed53f253f7f61f2b5f7939c9047ce3ac889","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/11804ed53f253f7f61f2b5f7939c9047ce3ac889","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/11804ed53f253f7f61f2b5f7939c9047ce3ac889/comments","author":null,"committer":null,"parents":[{"sha":"cef8e27eff769ea8525cd71e8ddcc236901703e0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cef8e27eff769ea8525cd71e8ddcc236901703e0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cef8e27eff769ea8525cd71e8ddcc236901703e0"}],"stats":{"total":886,"additions":637,"deletions":249},"files":[{"sha":"67a2cf500c7409aa921c266627c2d22c2fe5fd77","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -40,7 +40,6 @@\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;"},{"sha":"a7fe56029f08de66bdd6e432ed9ce642d4b2a1b4","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -111,6 +111,9 @@ public TargetResource getResource(TargetResource resource, ResourceTO resourceTO\n         resource.setConnector(connector);\n         connector.addResource(resource);\n \n+        resource.setForceMandatoryConstraint(\n+                resourceTO.isForceMandatoryConstraint());\n+\n         return resource;\n     }\n \n@@ -145,6 +148,9 @@ public ResourceTO getResourceTO(TargetResource resource) {\n         // set the mappings\n         resourceTO.setMappings(getSchemaMappingTOs(resource.getMappings()));\n \n+        resourceTO.setForceMandatoryConstraint(\n+                resource.isForceMandatoryConstraint());\n+\n         return resourceTO;\n     }\n "},{"sha":"6840a654fae45133724fa1de9bfd8d9c2d3aeb7d","filename":"identityconnectors/bundles/staticws/staticwebservice/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/WebServiceConnector.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2FWebServiceConnector.java?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -506,6 +506,8 @@ public void executeQuery(\n \n             List<WSUser> resultSet = provisioning.query(query);\n \n+            if (resultSet == null) return;\n+\n             Iterator i = resultSet.iterator();\n \n             WSUser user = null;\n@@ -806,6 +808,8 @@ private ConnectorObjectBuilder buildConnectorObject(\n             if (attribute.isKey()) {\n                 uid = attribute.getStringValue();\n                 bld.setName(uid);\n+                bld.addAttribute(AttributeBuilder.build(\n+                        attribute.getName(), attribute.getValue()));\n             }\n \n             if (!attribute.isKey() && !attribute.isPassword()) {\n@@ -832,7 +836,6 @@ private ConnectorObjectBuilder buildConnectorObject(\n         // Add objectclass\n         bld.setObjectClass(ObjectClass.ACCOUNT);\n \n-\n         return bld;\n     }\n "},{"sha":"efeac1126e8ddef6e08f773e8265ed355c3a88af","filename":"identityconnectors/bundles/staticws/staticwebservice/src/test/java/org/syncope/identityconnectors/bundles/StaticWSTestITCase.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fstaticwebservice%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2FStaticWSTestITCase.java?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -260,27 +260,35 @@ public void search() {\n \n             @Override\n             public boolean handle(ConnectorObject obj) {\n+\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Add record \" + obj);\n+                }\n+\n                 results.add(obj);\n                 return true;\n             }\n         };\n \n         Filter usernameFilter = FilterBuilder.startsWith(\n-                AttributeBuilder.build(Name.NAME, \"test\"));\n+                AttributeBuilder.build(\"USERID\", \"test\"));\n \n         Filter nameFilter = FilterBuilder.equalTo(\n-                AttributeBuilder.build(\"name\", \"jhon\"));\n+                AttributeBuilder.build(\"NAME\", \"jhon\"));\n \n         Filter surnameFilter = FilterBuilder.equalTo(\n-                AttributeBuilder.build(\"surname\", \"doe\"));\n+                AttributeBuilder.build(\"SURNAME\", \"doe\"));\n \n         Filter filter = FilterBuilder.or(\n                 usernameFilter,\n                 FilterBuilder.and(nameFilter, surnameFilter));\n \n         connector.search(ObjectClass.ACCOUNT, filter, resultsHandler, null);\n \n-        // pay attention: results will be returned according to the filter\n+        /**\n+         * Pay attention: results will be returned according to the filter\n+         * above.\n+         */\n         assertFalse(results.isEmpty());\n \n         if (log.isDebugEnabled()) {"},{"sha":"7019921024151d0c733359a9b1ebfbe4a998837d","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/utilities/Operand.java","status":"modified","additions":46,"deletions":20,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperand.java?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -117,29 +117,55 @@ public void setNot(boolean not) {\n \n     @Override\n     public String toString() {\n-        StringBuffer str = new StringBuffer();\n \n-        if (not)\n-            str.append(\"(! \");\n-\n-        if (logical && operands != null) {\n-            str.append(\"(\" + this.op.toString());\n-            for (Operand o : operands)\n-                str.append(o.toString());\n-            str.append(\")\");\n-        } else\n-            str.append(\n-                    \"(\" +\n-                    getName() +\n-                    \" \" +\n-                    op.toString() +\n-                    \" \" +\n-                    getValue().toString() +\n-                    \")\");\n+        if (Operator.STARTS.equals(op)) {\n+            return (not ? \"NOT\" : \"\") +\n+                    getName() + \" LIKE '\" + getValue() + \"%'\";\n+        }\n+\n+        if (Operator.ENDS.equals(op)) {\n+            return (not ? \"NOT\" : \"\") +\n+                    getName() + \" LIKE '%\" + getValue() + \"'\";\n+        }\n+\n+        if (Operator.CONTAINS.equals(op)) {\n+            return (not ? \"NOT\" : \"\") +\n+                    getName() + \" LIKE '%\" + getValue() + \"%'\";\n+        }\n+\n+        if (Operator.GT.equals(op)) {\n+            return (not ? \"NOT\" : \"\") +\n+                    getName() + \">'\" + getValue() + \"'\";\n+        }\n+\n+        if (Operator.LT.equals(op)) {\n+            return (not ? \"NOT\" : \"\") +\n+                    getName() + \"<'\" + getValue() + \"'\";\n+        }\n+\n+        if (Operator.EQ.equals(op)) {\n+            return (not ? \"NOT\" : \"\") +\n+                    getName() + \"='\" + getValue() + \"'\";\n+        }\n+\n+        if (operands == null) return null;\n+\n+        StringBuilder queryBuilder = new StringBuilder();\n+\n+        for (Operand operand : operands) {\n+\n+            if (queryBuilder.length() > 0)\n+                queryBuilder.append(\" \" + op.toString() + \" \");\n+\n+            queryBuilder.append(operand.toString());\n+        }\n \n         if (not)\n-            str.append(\")\");\n+            return \"NOT (\" + queryBuilder + \")\";\n+\n+        if (operands.size() > 1)\n+            return \"(\" + queryBuilder + \")\";\n \n-        return str.toString();\n+        return queryBuilder.toString();\n     }\n }"},{"sha":"97fb4a73bc25bd80ffda2d1d395fc1b310899fa6","filename":"identityconnectors/bundles/staticws/utilities/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/utilities/Operator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Futilities%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Futilities%2FOperator.java?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -19,11 +19,11 @@ public enum Operator {\n     GT(\">\"),\n     LT(\"<\"),\n     EQ(\"=\"),\n-    CONTAINS(\"contains\"),\n-    ENDS(\"endswith\"),\n-    STARTS(\"startswith\"),\n-    AND(\"&\"),\n-    OR(\"|\");\n+    CONTAINS(\"%\"),\n+    ENDS(\"%\"),\n+    STARTS(\"%\"),\n+    AND(\"AND\"),\n+    OR(\"OR\");\n \n     final private String op;\n "},{"sha":"56e8d715a05530514b2dd214028c144d81d4af21","filename":"identityconnectors/bundles/staticws/ws-target-resource/pom.xml","status":"modified","additions":37,"deletions":1,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fpom.xml?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -80,6 +80,33 @@\n             <version>${parent.version}</version>\n         </dependency>\n \n+        <!-- persistence dependencies -->\n+        <dependency>\n+            <groupId>hsqldb</groupId>\n+            <artifactId>hsqldb</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.dbunit</groupId>\n+            <artifactId>dbunit</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-jdbc</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>servlet-api</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+        \n+        <dependency>\n+            <groupId>javax.servlet.jsp</groupId>\n+            <artifactId>jsp-api</artifactId>\n+            <version>${jsp-api.version}</version>\n+            <scope>provided</scope>\n+        </dependency>\n+        \n         <!-- Test dependencies -->\n         <dependency>\n             <groupId>org.springframework</groupId>\n@@ -178,8 +205,17 @@\n                     </execution>\n                 </executions>\n             </plugin>\n-\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>2.0.2</version>\n+                <configuration>\n+                    <source>1.6</source>\n+                    <target>1.6</target>\n+                </configuration>\n+            </plugin>\n         </plugins>\n     </build>\n </project>\n \n+"},{"sha":"a06fa61a42fd9ec82d6e8600d26b138eb76be22f","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/java/org/syncope/identityconnectors/bundles/staticwebservice/wstarget/ProvisioningImpl.java","status":"modified","additions":364,"deletions":197,"changes":561,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2FProvisioningImpl.java?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -14,13 +14,18 @@\n  */\n package org.syncope.identityconnectors.bundles.staticwebservice.wstarget;\n \n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n import java.util.ArrayList;\n-import java.util.HashSet;\n+import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import javax.jws.WebService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttribute;\n import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSAttributeValue;\n import org.syncope.identityconnectors.bundles.commons.staticwebservice.to.WSChange;\n@@ -36,59 +41,331 @@ public class ProvisioningImpl implements Provisioning {\n     private static final Logger log =\n             LoggerFactory.getLogger(Provisioning.class);\n \n-    /**\n-     * Returns true if authentication is supported false otherwise.\n-     * @return true if authentication is supported false otherwise.\n-     */\n     @Override\n-    public Boolean isAuthenticationSupported() {\n-        return Boolean.TRUE;\n+    public String delete(String accountid) throws ProvisioningException {\n+\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n+        }\n+\n+        Connection conn = null;\n+\n+        try {\n+            conn = connect();\n+\n+            Statement statement = conn.createStatement();\n+\n+            String query =\n+                    \"DELETE FROM user WHERE userId='\" + accountid + \"';\";\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Execute query: \" + query);\n+            }\n+\n+            statement.executeUpdate(query);\n+\n+            return accountid;\n+\n+        } catch (SQLException ex) {\n+            throw new ProvisioningException(\"Delete operation failed\");\n+        } finally {\n+\n+            if (conn != null) {\n+                try {\n+                    close(conn);\n+                } catch (SQLException ignore) {\n+                    // ignore exception\n+                }\n+            }\n+\n+        }\n     }\n \n-    /**\n-     * Returns true if synchronization is supported false otherwise.\n-     * @return true if synchronization is supported false otherwise.\n-     */\n     @Override\n     public Boolean isSyncSupported() {\n-        return Boolean.TRUE;\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n+        }\n+\n+        return Boolean.FALSE;\n     }\n \n-    /**\n-     * Verify user creentials\n-     * @param username\n-     * @param password\n-     * @return \n-     * the accountid of the first account that match username and password.\n-     * @throws\n-     * ProvisioningException in case of authentication failed.\n-     */\n     @Override\n-    public String authenticate(final String username, final String password)\n+    public String checkAlive() {\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n+        }\n+\n+        try {\n+\n+            close(connect());\n+\n+            if (log.isInfoEnabled()) {\n+                log.info(\"Services available\");\n+            }\n+\n+            return \"OK\";\n+\n+        } catch (Exception e) {\n+\n+            if (log.isInfoEnabled()) {\n+                log.info(\"Services not available\");\n+            }\n+\n+            return \"KO\";\n+        }\n+    }\n+\n+    @Override\n+    public String update(String accountid, List<WSAttributeValue> data)\n             throws ProvisioningException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\n-                    \"\\nUsername: \" + username +\n-                    \"\\nPassword: \" + password);\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n         }\n \n-        return \"TESTUSER\";\n+        Connection conn = null;\n+\n+        try {\n+\n+            conn = connect();\n+            Statement statement = conn.createStatement();\n+\n+            StringBuffer set = new StringBuffer();\n+\n+            for (WSAttributeValue attr : data) {\n+                if (!attr.isKey()) {\n+\n+                    if (set.length() > 0) set.append(\",\");\n+                    set.append(attr.getName() + \"='\" + attr.getValue().toString() + \"'\");\n+\n+                }\n+            }\n+\n+            String query =\n+                    \"UPDATE user SET \" + set.toString() +\n+                    \" WHERE userId='\" + accountid + \"';\";\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Execute query: \" + query);\n+            }\n+\n+            statement.executeUpdate(query);\n+\n+            return accountid;\n+\n+        } catch (SQLException ex) {\n+            log.error(\"Update failed\", ex);\n+            throw new ProvisioningException(\"Update operation failed\");\n+        } finally {\n+\n+            if (conn != null) {\n+                try {\n+                    close(conn);\n+                } catch (SQLException ignore) {\n+                    // ignore exception\n+                }\n+            }\n+\n+        }\n     }\n \n-    /**\n-     * Returns \"OK\" if the resource is available.\n-     * @return the string \"OK\" in case of availability of the resource.\n-     */\n     @Override\n-    public String checkAlive() {\n-        return \"OK\";\n+    public List<WSUser> query(Operand query) {\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n+        }\n+\n+        List<WSUser> results = new ArrayList<WSUser>();\n+\n+        Connection conn = null;\n+\n+        try {\n+            String queryString =\n+                    \"SELECT * FROM user WHERE \" + query.toString();\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Execute query: \" + queryString);\n+            }\n+\n+            if (queryString == null || queryString.length() == 0)\n+                throw new SQLException(\"Invalid query [\" + queryString + \"]\");\n+\n+            conn = connect();\n+            Statement statement = conn.createStatement();\n+\n+            ResultSet rs = statement.executeQuery(queryString);\n+\n+            ResultSetMetaData metaData = rs.getMetaData();\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Metadata: \" + metaData.toString());\n+            }\n+\n+            WSUser user = null;\n+            WSAttributeValue attr = null;\n+\n+            while (rs.next()) {\n+\n+                user = new WSUser();\n+\n+                for (int i = 0; i < metaData.getColumnCount(); i++) {\n+                    attr = new WSAttributeValue();\n+                    attr.setName(metaData.getColumnLabel(i + 1));\n+                    attr.setValue(rs.getString(i + 1));\n+\n+                    if (\"userId\".equalsIgnoreCase(\n+                            metaData.getColumnName(i + 1))) {\n+                        attr.setKey(true);\n+                        user.setAccountid(attr.getValue().toString());\n+                    }\n+\n+                    user.addAttribute(attr);\n+                }\n+\n+                results.add(user);\n+            }\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Retrieved users: \" + results);\n+            }\n+\n+        } catch (SQLException ex) {\n+            log.error(\"Search operation failed\", ex);\n+        } finally {\n+\n+            if (conn != null) {\n+                try {\n+                    close(conn);\n+                } catch (SQLException ignore) {\n+                    // ignore exception\n+                }\n+            }\n+\n+        }\n+\n+        return results;\n+    }\n+\n+    @Override\n+    public String create(List<WSAttributeValue> data)\n+            throws ProvisioningException {\n+\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n+        }\n+\n+        Connection conn = null;\n+        try {\n+            conn = connect();\n+            Statement statement = conn.createStatement();\n+\n+            StringBuffer keys = new StringBuffer();\n+            StringBuffer values = new StringBuffer();\n+\n+            String accountid = null;\n+\n+            for (WSAttributeValue attr : data) {\n+                if (keys.length() > 0) keys.append(\",\");\n+                keys.append(attr.getName());\n+\n+                if (values.length() > 0) values.append(\",\");\n+                values.append(\n+                        \"'\" +\n+                        (attr.getValue() == null ? null : attr.getValue().toString()) +\n+                        \"'\");\n+\n+                if (attr.isKey()) {\n+                    accountid = attr.getValue().toString();\n+                }\n+            }\n+\n+            String query =\n+                    \"INSERT INTO user (\" + keys.toString() + \")\" +\n+                    \"VALUES (\" + values.toString() + \");\";\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Execute query: \" + query);\n+            }\n+\n+            statement.executeUpdate(query);\n+\n+            return accountid;\n+        } catch (SQLException ex) {\n+            log.error(\"Creation failed\", ex);\n+            throw new ProvisioningException(\"Create operation failed\");\n+        } finally {\n+\n+            if (conn != null) {\n+                try {\n+                    close(conn);\n+                } catch (SQLException ignore) {\n+                    // ignore exception\n+                }\n+            }\n+\n+        }\n+    }\n+\n+    @Override\n+    public int getLatestChangeNumber() throws ProvisioningException {\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n+        }\n+\n+        return 0;\n+    }\n+\n+    @Override\n+    public List<WSChange> sync() throws ProvisioningException {\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n+        }\n+\n+        return Collections.EMPTY_LIST;\n+    }\n+\n+    @Override\n+    public String resolve(String username) throws ProvisioningException {\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n+        }\n+\n+        Connection conn = null;\n+\n+        try {\n+            conn = connect();\n+            Statement statement = conn.createStatement();\n+\n+            String query =\n+                    \"SELECT userId FROM user WHERE userId='\" + username + \"';\";\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Execute query: \" + query);\n+            }\n+\n+            ResultSet rs = statement.executeQuery(query);\n+\n+            if (rs.next())\n+                return rs.getString(1);\n+            else\n+                return null;\n+\n+        } catch (SQLException ex) {\n+            throw new ProvisioningException(\"Resolve operation failed\");\n+        } finally {\n+\n+            if (conn != null) {\n+                try {\n+                    close(conn);\n+                } catch (SQLException ignore) {\n+                    // ignore exception\n+                }\n+            }\n+\n+        }\n     }\n \n-    /**\n-     * Returns the schema.\n-     * @return a set of attributes.\n-     */\n     @Override\n     public List<WSAttribute> schema() {\n         if (log.isInfoEnabled()) {\n@@ -259,191 +536,81 @@ public List<WSAttribute> schema() {\n         attr.setType(\"String\");\n         attrs.add(attr);\n \n-        return attrs;\n-    }\n-\n-    /**\n-     * Creates user account.\n-     * @param a set of account attributes.\n-     * @return accountid of the account created.\n-     * @throws ProvisioningException in case of failure.\n-     */\n-    @Override\n-    public String create(final List<WSAttributeValue> data)\n-            throws ProvisioningException {\n-\n-        List<String> schema = new ArrayList<String>();\n-        List<WSAttribute> attrs = schema();\n-        for (WSAttribute attr : attrs) {\n-            schema.add(attr.getName());\n-        }\n-\n-        String res = null;\n-\n-\n-        for (WSAttributeValue value : data) {\n-\n-            if (!schema.contains(value.getName())) {\n-                throw new IllegalArgumentException(\"Invalid schema \" +\n-                        value.getName());\n-            }\n+        attr = new WSAttribute();\n+        attr.setName(\"mandatoryDisclaimer\");\n+        attr.setNullable(true);\n+        attr.setPassword(false);\n+        attr.setKey(false);\n+        attr.setType(\"Boolean\");\n+        attrs.add(attr);\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\n-                        \"\\nName: \" + value.getName() +\n-                        \"\\nType: \" + value.getType() +\n-                        \"\\nNullable: \" + value.isNullable() +\n-                        \"\\nKey: \" + value.isKey() +\n-                        \"\\nPassword: \" + value.isPassword() +\n-                        \"\\nValue: \" + value.getValue().toString());\n-            }\n+        attr = new WSAttribute();\n+        attr.setName(\"promoRCSDisclaimer\");\n+        attr.setNullable(true);\n+        attr.setPassword(false);\n+        attr.setKey(false);\n+        attr.setType(\"Boolean\");\n+        attrs.add(attr);\n \n-            if (value.isKey()) {\n-                res = value.getValue().toString();\n-            }\n-            \n-        }\n+        attr = new WSAttribute();\n+        attr.setName(\"promoThirdPartyDisclaimer\");\n+        attr.setNullable(true);\n+        attr.setPassword(false);\n+        attr.setKey(false);\n+        attr.setType(\"Boolean\");\n+        attrs.add(attr);\n \n-        return res;\n+        return attrs;\n     }\n \n-    /**\n-     * Deletes user account.\n-     * @param accountid.\n-     * @return accountid.\n-     * @throws ProvisioningException in case of failure.\n-     */\n     @Override\n-    public String delete(final String accountid) throws ProvisioningException {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Account name: \" + accountid);\n+    public String authenticate(String username, String password)\n+            throws ProvisioningException {\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n         }\n \n-        return accountid;\n+        return username;\n     }\n \n-    /**\n-     * Updates user account.\n-     * @param accountid.\n-     * @param a set of attributes to be updated.\n-     * @return accountid.\n-     * @throws ProvisioningException in case of failure\n-     */\n     @Override\n-    public String update(\n-            final String accountid,\n-            final List<WSAttributeValue> data) throws ProvisioningException {\n-\n-        for (WSAttributeValue value : data) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\n-                        \"\\nName: \" + value.getName() +\n-                        \"\\nType: \" + value.getType() +\n-                        \"\\nNullable: \" + value.isNullable() +\n-                        \"\\nKey: \" + value.isKey() +\n-                        \"\\nPassword: \" + value.isPassword() +\n-                        \"\\nValue: \" + value.getValue().toString());\n-            }\n+    public Boolean isAuthenticationSupported() {\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Operation request received\");\n         }\n \n-        return accountid;\n+        return Boolean.FALSE;\n     }\n \n     /**\n-     * Searches for user accounts.\n-     * @param query filter\n-     * @return a set of user accounts.\n+     * Establish a connection to db addressbook\n+     * @return\n+     * @throws ClassNotFoundException\n+     * @throws SQLException\n      */\n-    @Override\n-    public List<WSUser> query(Operand query) {\n+    private Connection connect() throws SQLException {\n \n-        List<WSUser> resultSet = new ArrayList<WSUser>();\n-\n-        WSUser user = null;\n-        WSAttributeValue attr = null;\n-\n-        for (int i = 0; i < 5; i++) {\n-            user = new WSUser(\"test\" + i, new HashSet<WSAttributeValue>());\n-\n-            attr = new WSAttributeValue();\n-            attr.setName(\"username\");\n-            attr.setKey(true);\n-            attr.setValue(\"test\" + i);\n-\n-            user.addAttribute(attr);\n-\n-            attr = new WSAttributeValue();\n-            attr.setName(\"nome\");\n-            attr.setValue(\"ntest\" + i);\n-\n-            user.addAttribute(attr);\n-\n-            attr = new WSAttributeValue();\n-            attr.setName(\"cognome\");\n-            attr.setValue(\"ctest\" + i);\n+        if (DefaultContentLoader.localDataSource == null) {\n+            log.error(\"Data Source is null\");\n+            return null;\n+        }\n \n-            user.addAttribute(attr);\n+        Connection conn = DataSourceUtils.getConnection(\n+                DefaultContentLoader.localDataSource);\n \n-            resultSet.add(user);\n+        if (conn == null) {\n+            log.error(\"Connection is null\");\n         }\n \n-        return resultSet;\n-    }\n+        return conn;\n \n-    /**\n-     * Returns accountid related to the specified username.\n-     * @param username.\n-     * @return accountid.\n-     * @throws ProvisioningException in case of failure or username not found.\n-     */\n-    @Override\n-    public String resolve(final String username) throws ProvisioningException {\n-        return \"TESTUSER\";\n-    }\n-\n-    /**\n-     * Gets the latest change id.\n-     * @return change id.\n-     * @throws ProvisioningException in case of failure.\n-     */\n-    @Override\n-    public int getLatestChangeNumber() throws ProvisioningException {\n-        return 1;\n     }\n \n     /**\n-     * Returns changes to be synchronized.\n-     * @return a set of changes\n-     * @throws ProvisioningException in case of failure\n+     * Close connection to db addressbook\n+     * @throws SQLException\n      */\n-    @Override\n-    public List<WSChange> sync() throws ProvisioningException {\n-\n-        WSChange change = new WSChange();\n-\n-        // specify the change id\n-        change.setId(1);\n-        change.setType(\"CREATE_OR_UPDATE\");\n-\n-        // specify the account id\n-        WSAttributeValue uid = new WSAttributeValue();\n-        uid.setName(\"username\");\n-        uid.setValue(\"test1\");\n-        uid.setKey(true);\n-\n-        // specify the attributes changed\n-        WSAttributeValue attr = new WSAttributeValue();\n-        attr.setName(\"name\");\n-\n-        Set<WSAttributeValue> attrs = new HashSet<WSAttributeValue>();\n-        attrs.add(uid);\n-        attrs.add(attr);\n-\n-        change.setAttributes(attrs);\n-\n-        List<WSChange> changes = new ArrayList<WSChange>();\n-        changes.add(change);\n-\n-        return changes;\n+    private void close(Connection conn) throws SQLException {\n+        conn.close();\n     }\n }"},{"sha":"2eac59c549ecb8f033820e7524e7f1f710d278a1","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/resources/beans.xml","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fbeans.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fbeans.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fbeans.xml?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -14,4 +14,15 @@ http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd\">\n \t  id=\"provisioning\"\n \t  implementor=\"org.syncope.identityconnectors.bundles.staticwebservice.wstarget.ProvisioningImpl\"\n \t  address=\"/provisioning\" />\n+\n+\n+    <bean id=\"dbUnitDataTypeFactory\" class=\"org.dbunit.ext.hsqldb.HsqldbDataTypeFactory\"/>\n+\n+    <bean id=\"localDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n+        <property name=\"driverClassName\" value=\"org.hsqldb.jdbcDriver\"/>\n+        <property name=\"url\" value=\"jdbc:hsqldb:mem:syncopedb\"/>\n+        <property name=\"username\" value=\"sa\"/>\n+        <property name=\"password\" value=\"\"/>\n+    </bean>\n+    \n </beans>"},{"sha":"60dce033ec30efc794fb6aa2692175e3f4357268","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/resources/content.xml","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<dataset>\n+    <user\n+        capsId=\"1\"\n+        userId=\"test1\"\n+        password=\"XXX\"\n+        name=\"Alberto\"\n+        surname=\"Bianchi\"\n+        type=\"persona fisica\"\n+        mandatoryDisclaimer=\"TRUE\"\n+        promoRCSDisclaimer=\"TRUE\"\n+        promoThirdPartyDisclaimer=\"TRUE\"\n+    />\n+\n+    <user\n+        capsId=\"2\"\n+        userId=\"test2\"\n+        password=\"XXX\"\n+        name=\"Mario\"\n+        surname=\"Rossi\"\n+        type=\"persona fisica\"\n+        mandatoryDisclaimer=\"TRUE\"\n+        promoRCSDisclaimer=\"TRUE\"\n+        promoThirdPartyDisclaimer=\"TRUE\"\n+    />\n+</dataset>"},{"sha":"0b9fa17b2a172a421ad594055a7d9da418052ad8","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/resources/schema.sql","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fschema.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fschema.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fresources%2Fschema.sql?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -0,0 +1,25 @@\n+CREATE TABLE PUBLIC.user(\n+capsId INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1)PRIMARY KEY,\n+userId VARCHAR(30) NOT NULL,\n+password VARCHAR(30) NOT NULL,\n+type VARCHAR(17) NOT NULL,\n+residence VARCHAR(60),\n+telephone VARCHAR(20),\n+fax VARCHAR(20),\n+preference VARCHAR(120),\n+name VARCHAR(30),\n+surname VARCHAR(35),\n+birthdate VARCHAR(30),\n+gender VARCHAR(1),\n+taxNumber VARCHAR(16),\n+state VARCHAR(15),\n+studyTitle VARCHAR(30),\n+studyArea VARCHAR(30),\n+job VARCHAR(30),\n+companyType VARCHAR(30),\n+companyName VARCHAR(30),\n+vatNumber VARCHAR(11),\n+mandatoryDisclaimer BOOLEAN,\n+promoRCSDisclaimer BOOLEAN,\n+promoThirdPartyDisclaimer BOOLEAN,\n+UNIQUE(userId))\n\\ No newline at end of file"},{"sha":"bd6418ab6187c40ca29ae069af2b6af762b919d7","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -4,18 +4,25 @@\n \n <web-app>\n     <display-name>WS Target Sample</display-name>\n-    \n+\n+    <!-- Spring context configuration -->\n     <context-param>\n         <param-name>contextConfigLocation</param-name>\n         <param-value>classpath:/beans.xml</param-value>\n     </context-param>\n \n+    <!-- Spring context loader -->\n     <listener>\n         <listener-class>\n             org.springframework.web.context.ContextLoaderListener\n         </listener-class>\n     </listener>\n \n+    <!-- persistence listener -->\n+    <listener>\n+        <listener-class>org.syncope.identityconnectors.bundles.staticwebservice.wstarget.DefaultContentLoader</listener-class>\n+    </listener>\n+    \n     <servlet>\n         <servlet-name>CXFServlet</servlet-name>\n         <display-name>CXF Servlet</display-name>"},{"sha":"2331718b8563e3468ea550072aff1ee580ae08ce","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/main/webapp/exploredb.jsp","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2Fexploredb.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2Fexploredb.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Fmain%2Fwebapp%2Fexploredb.jsp?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -0,0 +1,53 @@\n+<%-- \n+    Document   : exploredb\n+    Created on : Jul 23, 2010, 5:03:59 PM\n+    Author     : fabio\n+--%>\n+\n+<%@page contentType=\"text/html\" pageEncoding=\"MacRoman\"%>\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n+    \"http://www.w3.org/TR/html4/loose.dtd\">\n+\n+<%@page import=\"\n+        org.syncope.identityconnectors.bundles.staticwebservice.wstarget.DefaultContentLoader,\n+        java.sql.*,\n+        org.springframework.jdbc.datasource.DataSourceUtils\" %>\n+\n+<%\n+\n+            Connection conn = DataSourceUtils.getConnection(\n+                    DefaultContentLoader.localDataSource);\n+\n+            Statement st = conn.createStatement();\n+\n+            ResultSet rs = st.executeQuery(\"SELECT * FROM user\");\n+\n+%>\n+<html>\n+    <head>\n+        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=MacRoman\">\n+        <title>JSP Page</title>\n+    </head>\n+    <body>\n+        <%\n+            ResultSetMetaData metaData = rs.getMetaData();\n+            StringBuilder row = new StringBuilder();\n+\n+            while (rs.next()) {\n+                for (int i = 0; i < metaData.getColumnCount(); i++) {\n+                    row.append(metaData.getColumnLabel(i + 1)).append(\"=\").\n+                            append(rs.getString(i + 1)).append(\" \");\n+                }\n+\n+        %>\n+        <%=row.toString()%><br />;\n+        <%\n+                row.delete(0, row.length());\n+            }\n+\n+            rs.close();\n+            st.close();\n+            conn.close();\n+        %>\n+    </body>\n+</html>"},{"sha":"e641e5fd82d719e1e089c6cbbef241ef03f84317","filename":"identityconnectors/bundles/staticws/ws-target-resource/src/test/java/org/syncope/identityconnectors/bundles/staticwebservice/wstarget/test/ProvisioningTestITCase.java","status":"modified","additions":31,"deletions":19,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2Ftest%2FProvisioningTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2Ftest%2FProvisioningTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/identityconnectors%2Fbundles%2Fstaticws%2Fws-target-resource%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fidentityconnectors%2Fbundles%2Fstaticwebservice%2Fwstarget%2Ftest%2FProvisioningTestITCase.java?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -163,7 +163,7 @@ public void create() {\n \n             WSAttributeValue birthdate = new WSAttributeValue();\n             birthdate.setName(\"birthdate\");\n-            birthdate.setValue(\"1990-01-01\");\n+            birthdate.setValue(\"01/01/1990\");\n \n             List<WSAttributeValue> attrs = new ArrayList<WSAttributeValue>();\n             attrs.add(uid);\n@@ -173,12 +173,15 @@ public void create() {\n             attrs.add(surname);\n             attrs.add(birthdate);\n \n-            provisioning.create(attrs);\n+            String accountId = provisioning.create(attrs);\n+\n+            assertNotNull(accountId);\n+            assertEquals(accountId, \"john.doe@gmail.com\");\n \n         } catch (Exception e) {\n \n             if (log.isDebugEnabled()) {\n-                    log.debug(\"Unknown exception!\", e);\n+                log.debug(\"Unknown exception!\", e);\n             }\n \n             t = e;\n@@ -196,22 +199,22 @@ public void update() {\n \n             WSAttributeValue surname = new WSAttributeValue();\n             surname.setName(\"surname\");\n-            surname.setValue(\"test1\");\n+            surname.setValue(\"verde\");\n             surname.setKey(true);\n \n             WSAttributeValue name = new WSAttributeValue();\n-            name.setName(\"nome\");\n-            name.setValue(\"test1\");\n+            name.setName(\"name\");\n+            name.setValue(\"pino\");\n \n \n             List<WSAttributeValue> attrs = new ArrayList<WSAttributeValue>();\n             attrs.add(surname);\n             attrs.add(name);\n \n-            String uid = provisioning.update(\"test1\", attrs);\n+            String uid = provisioning.update(\"test2\", attrs);\n \n             assertNotNull(uid);\n-            assertEquals(\"test1\", uid);\n+            assertEquals(\"test2\", uid);\n \n         } catch (Exception e) {\n \n@@ -233,7 +236,7 @@ public void delete() {\n \n         try {\n \n-            provisioning.delete(\"TESTUSER\");\n+            provisioning.delete(\"test1\");\n \n         } catch (Exception e) {\n \n@@ -255,9 +258,9 @@ public void query() {\n \n         try {\n \n-            Operand op1 = new Operand(Operator.EQ, \"nome\", \"john\");\n-            Operand op2 = new Operand(Operator.EQ, \"cognome\", \"doe\");\n-            Operand op3 = new Operand(Operator.EQ, \"cognome\", \"black\");\n+            Operand op1 = new Operand(Operator.EQ, \"name\", \"Pino\");\n+            Operand op2 = new Operand(Operator.EQ, \"surname\", \"Bianchi\");\n+            Operand op3 = new Operand(Operator.EQ, \"surname\", \"Rossi\");\n \n             Set<Operand> sop1 = new HashSet<Operand>();\n             sop1.add(op1);\n@@ -278,8 +281,11 @@ public void query() {\n \n             List<WSUser> results = provisioning.query(query);\n \n+            assertNotNull(results);\n+            assertFalse(results.isEmpty());\n+\n             for (WSUser user : results) {\n-                log.debug(\"Name: \" + user.getAccountid());\n+                log.debug(\"User: \" + user);\n             }\n \n \n@@ -302,9 +308,9 @@ public void resolve() {\n \n         try {\n \n-            String uid = provisioning.resolve(\"fmartelli\");\n+            String uid = provisioning.resolve(\"test2\");\n \n-            assertEquals(\"TESTUSER\", uid);\n+            assertEquals(\"test2\", uid);\n \n         } catch (Exception e) {\n \n@@ -327,7 +333,7 @@ public void getLatestChangeNumber() {\n \n             int token = provisioning.getLatestChangeNumber();\n \n-            assertEquals(1, token);\n+            assertEquals(0, token);\n \n         } catch (Exception e) {\n \n@@ -348,10 +354,16 @@ public void sync() {\n \n         try {\n \n-            List<WSChange> results = provisioning.sync();\n+            List<WSChange> results = null;\n+\n+            if (provisioning.isSyncSupported()) {\n+\n+                results = provisioning.sync();\n+                assertNotNull(results);\n+\n+                for (WSChange change : results)\n+                    log.debug(\"Delta: \" + change.getId());\n \n-            for (WSChange change : results) {\n-                log.debug(\"Delta: \" + change.getId());\n             }\n \n         } catch (Exception e) {"},{"sha":"f9e48be199d5364240f95870b9bad08799727704","filename":"pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/11804ed53f253f7f61f2b5f7939c9047ce3ac889/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/11804ed53f253f7f61f2b5f7939c9047ce3ac889/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=11804ed53f253f7f61f2b5f7939c9047ce3ac889","patch":"@@ -119,6 +119,8 @@\n \n         <org.apache.cxf.version>2.2.9</org.apache.cxf.version>\n \n+        <hsqldb.version>1.8.0.10</hsqldb.version>\n+\n         <log4j.version>1.2.16</log4j.version>\n         <slf4j.version>1.5.2</slf4j.version>\n \n@@ -306,6 +308,12 @@\n                 <version>${wicket.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>hsqldb</groupId>\n+                <artifactId>hsqldb</artifactId>\n+                <version>${hsqldb.version}</version>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>log4j</groupId>\n                 <artifactId>log4j</artifactId>"}]}