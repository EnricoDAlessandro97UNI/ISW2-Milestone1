{"sha":"49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ5Y2E3MWQ4YzNkM2QxZDljMTI2YWE5ZmM5ODA4ZGFjMmIzYjBkNWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-15T11:32:36Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-15T16:03:36Z"},"message":"[SYNCOPE-1274] Adding documentation for request / response additional headers","tree":{"sha":"a05ab00ed0c1d3b2b33df1b9a4f5fdd0044b1e6c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a05ab00ed0c1d3b2b33df1b9a4f5fdd0044b1e6c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"08c1aa43b3f6a3e700bf3675120b5315c0dffb3a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/08c1aa43b3f6a3e700bf3675120b5315c0dffb3a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/08c1aa43b3f6a3e700bf3675120b5315c0dffb3a"}],"stats":{"total":712,"additions":686,"deletions":26},"files":[{"sha":"40cd8ba98980e45a838512b880492dcdb69a23b7","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -66,7 +66,7 @@ public final class RESTHeaders {\n     public static final String PREFER = \"Prefer\";\n \n     /**\n-     * Allowd the server to inform the client about the fact that a specified preference was applied.\n+     * Allows the server to inform the client about the fact that a specified preference was applied.\n      * <a href=\"http://msdn.microsoft.com/en-us/library/hh554623.aspx\">More information</a>.\n      *\n      * @see Preference"},{"sha":"b9756b0ca977fcf8c40d3cccb600e0dca87899fd","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -19,6 +19,10 @@\n package org.apache.syncope.common.rest.api.service;\n \n import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.tags.Tag;\n import javax.ws.rs.BeanParam;\n@@ -33,6 +37,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AccessTokenQuery;\n \n /**\n@@ -50,6 +55,15 @@ public interface AccessTokenService extends JAXRSService {\n      */\n     @Operation(security = {\n         @SecurityRequirement(name = \"BasicAuthentication\") })\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\",\n+                    description = \"JWT successfully generated\", headers = {\n+                @Header(name = RESTHeaders.TOKEN, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Generated JWT\")\n+                , @Header(name = RESTHeaders.TOKEN_EXPIRE, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Expiration of the generated JWT\") }))\n     @POST\n     @Path(\"login\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -63,6 +77,15 @@ public interface AccessTokenService extends JAXRSService {\n      */\n     @Operation(security = {\n         @SecurityRequirement(name = \"Bearer\") })\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\",\n+                    description = \"JWT successfully refreshed\", headers = {\n+                @Header(name = RESTHeaders.TOKEN, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Generated JWT\")\n+                , @Header(name = RESTHeaders.TOKEN_EXPIRE, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Expiration of the refreshed JWT\") }))\n     @POST\n     @Path(\"refresh\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"a694adc576bd55358ad62379c25154dc5817ef3d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java","status":"modified","additions":73,"deletions":3,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -28,10 +35,15 @@\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n \n /**\n  * REST operations for anyObjects.\n@@ -43,13 +55,41 @@\n @Path(\"anyObjects\")\n public interface AnyObjectService extends AnyService<AnyObjectTO> {\n \n+    @Override\n+    AnyObjectTO read(String key);\n+\n+    @Override\n+    PagedResult<AnyObjectTO> search(AnyQuery anyQuery);\n+\n     /**\n      * Creates a new any object.\n      *\n      * @param anyObjectTO any object to be created\n      * @return Response object featuring Location header of created any object as well as the any\n-     * object itself enriched with propagation status information - ProvisioningResult as Entity\n+     * object itself enriched with propagation status information\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description =\n+                    \"Any object successfully created enriched with propagation status information, as Entity,\"\n+                    + \"or empty if 'Prefer: return-no-content' was specified\",\n+                    content =\n+                    @Content(schema =\n+                            @Schema(implementation = ProvisioningResult.class)), headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the any object created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the any object created\")\n+                , @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\") }))\n     @POST\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -60,8 +100,23 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n      *\n      * @param anyObjectPatch modification to be applied to any object matching the provided key\n      * @return Response object featuring the updated any object enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Any object successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PATCH\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -73,8 +128,23 @@ public interface AnyObjectService extends AnyService<AnyObjectTO> {\n      *\n      * @param anyObjectTO complete update\n      * @return Response object featuring the updated any object enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Any object successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PUT\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"5dcccb1dea919504d902ddb15283996a70f252b5","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import java.util.Set;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n@@ -37,7 +44,9 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n \n public interface AnyService<TO extends AnyTO> extends JAXRSService {\n@@ -138,8 +147,23 @@ Response delete(\n      *\n      * @param key any object key or name\n      * @return Response object featuring the deleted any object enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"User, Group or Any Object successfully deleted enriched with propagation status \"\n+                + \"information, as Entity\", content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @DELETE\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"6eb97a12e59a1f6d2a0d7bb43a59de51f93ce323","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,9 +35,11 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for any type classes.\n@@ -71,6 +77,15 @@ public interface AnyTypeClassService extends JAXRSService {\n      * @param anyTypeClassTO anyTypeClass to be created\n      * @return Response object featuring Location header of created anyTypeClass\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"AnyTypeClass successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"b1932459a3db4d01f0e5d1388f88f8909e055a68","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,9 +35,11 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for any types.\n@@ -71,6 +77,15 @@ public interface AnyTypeService extends JAXRSService {\n      * @param anyTypeTO anyType to be created\n      * @return Response object featuring Location header of created anyType\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"AnyType successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     Response create(@NotNull AnyTypeTO anyTypeTO);"},{"sha":"63a55fc751876487c2e6f0d1101e8fc5f37c80b8","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -33,11 +37,13 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for connector bundles and instances.\n@@ -122,6 +128,15 @@ ConnInstanceTO readByResource(\n      * @param connInstanceTO connector instance to be created\n      * @return Response object featuring Location header of created connector instance\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"ConnInstance successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"a9945a5bd4e7f81a827af8e943cf1a504c0b7c6c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,9 +35,11 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.DomainTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for domains.\n@@ -71,6 +77,15 @@ public interface DomainService extends JAXRSService {\n      * @param domainTO domain to be created\n      * @return Response object featuring Location header of created domain\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Domain successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"69342e257391a09ea31b024811bea19602869da3","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DynRealmService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDynRealmService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,9 +35,11 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for dynamic realms.\n@@ -71,6 +77,15 @@ public interface DynRealmService extends JAXRSService {\n      * @param dynDynRealmTO dynamic realm to be created\n      * @return Response object featuring Location header of created dynamic realm\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"DynRealm successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"d999df3b04c07ccde7f9d64b74fe6aff61ddad7b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":73,"deletions":5,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,12 +38,17 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.BulkMembersActionType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n \n /**\n  * REST operations for groups.\n@@ -48,13 +60,40 @@\n @Path(\"groups\")\n public interface GroupService extends AnyService<GroupTO> {\n \n+    @Override\n+    GroupTO read(String key);\n+\n+    @Override\n+    PagedResult<GroupTO> search(AnyQuery anyQuery);\n+\n     /**\n      * Creates a new group.\n      *\n      * @param groupTO group to be created\n      * @return Response object featuring Location header of created group as well as the any\n-     * object itself enriched with propagation status information - ProvisioningResult as Entity\n+     * object itself enriched with propagation status information\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Group successfully created enriched with propagation status information, as Entity,\"\n+                    + \"or empty if 'Prefer: return-no-content' was specified\",\n+                    content =\n+                    @Content(schema =\n+                            @Schema(implementation = ProvisioningResult.class)), headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the group created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the group created\")\n+                , @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\") }))\n     @POST\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -65,8 +104,23 @@ public interface GroupService extends AnyService<GroupTO> {\n      *\n      * @param groupPatch modification to be applied to group matching the provided key\n      * @return Response object featuring the updated group enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Group successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PATCH\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -78,17 +132,31 @@ public interface GroupService extends AnyService<GroupTO> {\n      *\n      * @param groupTO complete update\n      * @return Response object featuring the updated group enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Group successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PUT\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     Response update(@NotNull GroupTO groupTO);\n \n     /**\n-     * This method is similar to read() but uses different authentication handling to ensure that a group\n-     * can read his own groups.\n+     * This method allows a user to read his own groups.\n      *\n      * @return own groups\n      */"},{"sha":"0e83a90f7cf55b692539f41122972ac049a3ac15","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/MailTemplateService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FMailTemplateService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FMailTemplateService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FMailTemplateService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -32,10 +36,12 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for mail templates.\n@@ -62,6 +68,15 @@ public interface MailTemplateService extends JAXRSService {\n      * @param mailTemplateTO Creates a new mail template.\n      * @return Response object featuring Location header of created mail template\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"MailTemplate successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"343a0c8242144c5148d17dbfa2b382126fe918ba","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -32,11 +36,13 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for notifications.\n@@ -74,6 +80,15 @@ public interface NotificationService extends JAXRSService {\n      * @param notificationTO Creates a new notification.\n      * @return Response object featuring Location header of created notification\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Notification successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"c2b7c33d6321b60c59f7f8e7c2a5841e475c211a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,10 +35,12 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for policies.\n@@ -78,6 +84,15 @@ public interface PolicyService extends JAXRSService {\n      * @param policyTO Policy to be created (needs to match type)\n      * @return Response object featuring Location header of created policy\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Policy successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Path(\"{type}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"517aa20f5e045bcc8d8145eb47b72c16bc2b4a36","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java","status":"modified","additions":64,"deletions":3,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,9 +38,12 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for realms.\n@@ -71,8 +81,29 @@ public interface RealmService extends JAXRSService {\n      * @param parentPath full path of the parent realm\n      * @param realmTO new realm.\n      * @return Response object featuring Location header of created realm as well as the realm itself\n-     * enriched with propagation status information - ProvisioningResult as Entity\n+     * enriched with propagation status information\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Realm successfully created enriched with propagation status information, as Entity,\"\n+                    + \"or empty if 'Prefer: return-no-content' was specified\",\n+                    content =\n+                    @Content(schema =\n+                            @Schema(implementation = ProvisioningResult.class)), headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the realm created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the realm created\")\n+                , @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\") }))\n     @POST\n     @Path(\"{parentPath:.*}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -84,8 +115,23 @@ public interface RealmService extends JAXRSService {\n      *\n      * @param realmTO realm to be stored\n      * @return Response object featuring the updated realm enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Realm successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PUT\n     @Path(\"{fullPath:.*}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -97,8 +143,23 @@ public interface RealmService extends JAXRSService {\n      *\n      * @param fullPath realm path\n      * @return Response object featuring the deleted realm enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"Realm successfully deleted enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @DELETE\n     @Path(\"{fullPath:.*}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"a5f49878d379fb617839005eccf823827c979a26","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,9 +35,11 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.RelationshipTypeTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for relationship types.\n@@ -71,6 +77,15 @@ public interface RelationshipTypeService extends JAXRSService {\n      * @param relationshipTypeTO relationshipType to be created\n      * @return Response object featuring Location header of created relationshipType\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"RelationshipType successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"2c5f3f156848eab8b62e69f8924c258ae7d957a9","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -32,10 +36,12 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for reports.\n@@ -73,6 +79,15 @@ public interface ReportService extends ExecutableService {\n      * @param reportTO report to be created\n      * @return Response object featuring Location header of created report\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Report successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"f85f133e1586db252538d5c3ad9fa558aaefc1f2","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportTemplateService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportTemplateService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportTemplateService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportTemplateService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -32,10 +36,12 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for report templates.\n@@ -62,6 +68,15 @@ public interface ReportTemplateService extends JAXRSService {\n      * @param reportTemplateTO Creates a new report template.\n      * @return Response object featuring Location header of created report template\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"ReportTemplate successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     Response create(@NotNull ReportTemplateTO reportTemplateTO);"},{"sha":"cc8662819f2c2bc87c0a6882c82beb8dda0de2b6","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -32,13 +36,15 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.ResourceDeassociationPatch;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n \n /**\n@@ -110,6 +116,15 @@ PagedConnObjectTOResult listConnObjects(\n      * @param resourceTO Resource to be created\n      * @return Response object featuring Location header of created resource\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Resource successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"a3ead88244584c3f453f8576749582c600c3afb3","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -32,9 +36,11 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for roles.\n@@ -72,6 +78,15 @@ public interface RoleService extends JAXRSService {\n      * @param roleTO role to be created\n      * @return Response object featuring Location header of created role\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Role successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"dc832b399e2bad309046b2c21dea890d01ba0fed","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -32,10 +36,12 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n \n /**\n@@ -81,6 +87,15 @@ <T extends SchemaTO> T read(\n      * @param schemaTO schema to be created\n      * @return Response object featuring Location header of created schema\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Schema successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Path(\"{type}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"2a2e0abf6a64f224bbc091f3b9e00f578c74ba83","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -31,9 +35,11 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for configuration.\n@@ -71,6 +77,15 @@ public interface SecurityQuestionService extends JAXRSService {\n      * @param securityQuestionTO security question to be created\n      * @return Response object featuring Location header of created security question\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"SecurityQuestion successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"60abb515a635accb3826b1297697ac369b27ffe5","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -33,6 +37,7 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.TaskTO;\n@@ -41,6 +46,7 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n \n /**\n@@ -89,6 +95,15 @@ <T extends TaskTO> T read(\n      * @param taskTO task to be created\n      * @return Response object featuring Location header of created task\n      */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"Task successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n     @POST\n     @Path(\"{type}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"},{"sha":"6ba8fd37d4be6b24b4b8ecf3d0c98e44be5d9a79","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":99,"deletions":9,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -19,6 +19,13 @@\n package org.apache.syncope.common.rest.api.service;\n \n import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.tags.Tag;\n import javax.validation.constraints.NotNull;\n@@ -32,11 +39,14 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for user self-management.\n@@ -48,12 +58,24 @@ public interface UserSelfService extends JAXRSService {\n     /**\n      * Returns the user making the service call.\n      *\n-     * @return calling user data, including owned entitlements as header value\n-     * {@link org.apache.syncope.common.rest.api.RESTHeaders#OWNED_ENTITLEMENTS}\n+     * @return calling user data, including own UUID and entitlements\n      */\n     @Operation(security = {\n         @SecurityRequirement(name = \"BasicAuthentication\")\n         , @SecurityRequirement(name = \"Bearer\") })\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"200\", description = \"Calling user data, including own UUID and entitlements\",\n+                    content =\n+                    @Content(schema =\n+                            @Schema(implementation = UserTO.class)), headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID of the calling user\")\n+                ,\n+                @Header(name = RESTHeaders.OWNED_ENTITLEMENTS, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"List of entitlements owned by the calling user\")\n+            }))\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     Response read();\n@@ -63,9 +85,30 @@ public interface UserSelfService extends JAXRSService {\n      *\n      * @param userTO user to be created\n      * @param storePassword whether password shall be stored internally\n-     * @return Response object featuring Location header of self-registered user as well as the user\n-     * itself - ProvisioningResult as Entity\n+     * @return Response object featuring Location header of self-registered user as well as the user itself\n+     * enriched with propagation status information\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"User successfully created enriched with propagation status information, as Entity,\"\n+                    + \"or empty if 'Prefer: return-no-content' was specified\",\n+                    content =\n+                    @Content(schema =\n+                            @Schema(implementation = ProvisioningResult.class)), headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the user created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the user created\")\n+                , @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\") }))\n     @POST\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -76,11 +119,27 @@ Response create(@NotNull UserTO userTO,\n      * Self-updates user.\n      *\n      * @param patch modification to be applied to self\n-     * @return Response object featuring the updated user - ProvisioningResult as Entity\n+     * @return Response object featuring the updated user\n      */\n     @Operation(security = {\n         @SecurityRequirement(name = \"BasicAuthentication\")\n         , @SecurityRequirement(name = \"Bearer\") })\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"User successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PATCH\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -91,11 +150,27 @@ Response create(@NotNull UserTO userTO,\n      * Self-updates user.\n      *\n      * @param user complete update\n-     * @return Response object featuring the updated user - ProvisioningResult as Entity\n+     * @return Response object featuring the updated user\n      */\n     @Operation(security = {\n         @SecurityRequirement(name = \"BasicAuthentication\")\n         , @SecurityRequirement(name = \"Bearer\") })\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"User successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PUT\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -107,11 +182,26 @@ Response create(@NotNull UserTO userTO,\n      *\n      * @param statusPatch status update details\n      * @return Response object featuring the updated user enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n     @Operation(security = {\n         @SecurityRequirement(name = \"BasicAuthentication\")\n         , @SecurityRequirement(name = \"Bearer\") })\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"User successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @POST\n     @Path(\"{key}/status\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -121,7 +211,7 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-deletes user.\n      *\n-     * @return Response object featuring the deleted user - ProvisioningResult as Entity\n+     * @return Response object featuring the deleted user\n      */\n     @Operation(security = {\n         @SecurityRequirement(name = \"BasicAuthentication\")\n@@ -135,7 +225,7 @@ Response create(@NotNull UserTO userTO,\n      *\n      * @param password the password value to update\n      *\n-     * @return Response object featuring the updated user - ProvisioningResult as Entity\n+     * @return Response object featuring the updated user\n      */\n     @Operation(security = {\n         @SecurityRequirement(name = \"BasicAuthentication\")"},{"sha":"82f9a72bdca6853423244a3614e1409dbefc5fa9","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":88,"deletions":4,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=49ca71d8c3d3d1d9c126aa9fc9808dac2b3b0d5b","patch":"@@ -18,6 +18,13 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -30,11 +37,16 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AnyQuery;\n \n /**\n  * REST operations for users.\n@@ -46,14 +58,41 @@\n @Path(\"users\")\n public interface UserService extends AnyService<UserTO> {\n \n+    @Override\n+    UserTO read(String key);\n+\n+    @Override\n+    PagedResult<UserTO> search(AnyQuery anyQuery);\n+\n     /**\n      * Creates a new user.\n      *\n      * @param userTO user to be created\n      * @param storePassword whether password shall be stored internally\n      * @return Response object featuring Location header of created user as well as the user itself\n-     * enriched with propagation status information - ProvisioningResult as Entity\n+     * enriched with propagation status information\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"User successfully created enriched with propagation status information, as Entity,\"\n+                    + \"or empty if 'Prefer: return-no-content' was specified\",\n+                    content =\n+                    @Content(schema =\n+                            @Schema(implementation = ProvisioningResult.class)), headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the user created\")\n+                , @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the user created\")\n+                , @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\") }))\n     @POST\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -66,8 +105,23 @@ Response create(\n      *\n      * @param userPatch modification to be applied to user matching the provided key\n      * @return Response object featuring the updated user enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"User successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PATCH\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -79,8 +133,23 @@ Response create(\n      *\n      * @param userTO complete update\n      * @return Response object featuring the updated user enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"User successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @PUT\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@@ -92,8 +161,23 @@ Response create(\n      *\n      * @param statusPatch status update details\n      * @return Response object featuring the updated user enriched with propagation status information\n-     * - ProvisioningResult as Entity\n      */\n+    @Parameter(name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"User successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class)))\n+        , @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @POST\n     @Path(\"{key}/status\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })"}]}