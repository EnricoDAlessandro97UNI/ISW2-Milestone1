{"sha":"b20869adca2a043e3772b78eaefc4a71d6dbfca2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIyMDg2OWFkY2EyYTA0M2UzNzcyYjc4ZWFlZmM0YTcxZDZkYmZjYTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-22T11:36:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-22T11:36:07Z"},"message":"Various minor cleanings\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1448998 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a6e310795e686ad3ec842e356622b5613222e531","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a6e310795e686ad3ec842e356622b5613222e531"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b20869adca2a043e3772b78eaefc4a71d6dbfca2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b20869adca2a043e3772b78eaefc4a71d6dbfca2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b20869adca2a043e3772b78eaefc4a71d6dbfca2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b20869adca2a043e3772b78eaefc4a71d6dbfca2/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6d4731d943f02d60565a98be1713bfadf9799898","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d4731d943f02d60565a98be1713bfadf9799898","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d4731d943f02d60565a98be1713bfadf9799898"}],"stats":{"total":878,"additions":341,"deletions":537},"files":[{"sha":"195d69d88e9bf39cf82cf7c268067352526ae3ce","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSchemaTO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -41,5 +41,4 @@ public String getName() {\n     public void setName(final String name) {\r\n         this.name = name;\r\n     }\r\n-\r\n }\r"},{"sha":"3c6ead238a1fb41292380ecd0c37e261634102ed","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -64,7 +64,7 @@ public class ConfigurationController extends AbstractController {\n     private ConfDAO confDAO;\n \n     @Autowired\n-    private ConfigurationDataBinder configurationDataBinder;\n+    private ConfigurationDataBinder binder;\n \n     @Autowired\n     private ImportExport importExport;\n@@ -84,23 +84,22 @@ public ConfigurationTO create(final HttpServletResponse response,\n             @RequestBody final ConfigurationTO configurationTO) {\n         LOG.debug(\"Configuration create called with parameters {}\", configurationTO);\n \n-        SyncopeConf conf = configurationDataBinder.createSyncopeConfiguration(configurationTO);\n+        SyncopeConf conf = binder.create(configurationTO);\n         conf = confDAO.save(conf);\n \n         auditManager.audit(Category.configuration, ConfigurationSubCategory.create, Result.success,\n                 \"Successfully created conf: \" + conf.getKey());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n \n-        return configurationDataBinder.getConfigurationTO(conf);\n+        return binder.getConfigurationTO(conf);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{key}\")\n-    public ConfigurationTO delete(@PathVariable(\"key\") final String key) throws MissingConfKeyException {\n-\n+    public ConfigurationTO delete(@PathVariable(\"key\") final String key) {\n         SyncopeConf conf = confDAO.find(key);\n-        ConfigurationTO confToDelete = configurationDataBinder.getConfigurationTO(conf);\n+        ConfigurationTO confToDelete = binder.getConfigurationTO(conf);\n         confDAO.delete(key);\n \n         auditManager.audit(Category.configuration, ConfigurationSubCategory.delete, Result.success,\n@@ -115,7 +114,7 @@ public List<ConfigurationTO> list(final HttpServletRequest request) {\n         List<ConfigurationTO> configurationTOs = new ArrayList<ConfigurationTO>(configurations.size());\n \n         for (SyncopeConf configuration : configurations) {\n-            configurationTOs.add(configurationDataBinder.getConfigurationTO(configuration));\n+            configurationTOs.add(binder.getConfigurationTO(configuration));\n         }\n \n         auditManager.audit(Category.configuration, ConfigurationSubCategory.list, Result.success,\n@@ -126,13 +125,12 @@ public List<ConfigurationTO> list(final HttpServletRequest request) {\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{key}\")\n-    public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"key\") final String key)\n-            throws MissingConfKeyException {\n+    public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"key\") final String key) {\n \n         ConfigurationTO result;\n         try {\n             SyncopeConf conf = confDAO.find(key);\n-            result = configurationDataBinder.getConfigurationTO(conf);\n+            result = binder.getConfigurationTO(conf);\n \n             auditManager.audit(Category.configuration, ConfigurationSubCategory.read, Result.success,\n                     \"Successfully read conf: \" + key);\n@@ -151,16 +149,14 @@ public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"k\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ConfigurationTO update(final HttpServletResponse response, @RequestBody final ConfigurationTO configurationTO)\n-            throws MissingConfKeyException {\n-\n+    public ConfigurationTO update(@RequestBody final ConfigurationTO configurationTO) {\n         SyncopeConf conf = confDAO.find(configurationTO.getKey());\n         conf.setValue(configurationTO.getValue());\n \n         auditManager.audit(Category.configuration, ConfigurationSubCategory.update, Result.success,\n                 \"Successfully updated conf: \" + conf.getKey());\n \n-        return configurationDataBinder.getConfigurationTO(conf);\n+        return binder.getConfigurationTO(conf);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n@@ -182,7 +178,6 @@ public ModelAndView getMailTemplates() {\n \n         try {\n             for (Resource resource : resResolver.getResources(\"classpath:/mailTemplates/*.vm\")) {\n-\n                 String template = resource.getURL().toExternalForm();\n                 if (template.endsWith(\".html.vm\")) {\n                     htmlTemplates.add("},{"sha":"5214afaeb2010e668f65932c8eca9d9f8400429e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -48,25 +48,25 @@ public class DerivedSchemaController extends AbstractController {\n     private AuditManager auditManager;\n \n     @Autowired\n-    private DerSchemaDAO derivedSchemaDAO;\n+    private DerSchemaDAO derSchemaDAO;\n \n     @Autowired\n-    private DerivedSchemaDataBinder derivedSchemaDataBinder;\n+    private DerivedSchemaDataBinder binder;\n \n     @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public DerivedSchemaTO create(final HttpServletResponse response,\n             @RequestBody final DerivedSchemaTO derivedSchemaTO, @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException {\n \n-        AbstractDerSchema derivedSchema = derivedSchemaDAO.save(\n-                derivedSchemaDataBinder.create(derivedSchemaTO, getAttributableUtil(kind).newDerSchema()));\n+        AbstractDerSchema derivedSchema = derSchemaDAO.save(\n+                binder.create(derivedSchemaTO, getAttributableUtil(kind).newDerSchema()));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.createDerived, Result.success,\n                 \"Successfully created derived schema: \" + kind + \"/\" + derivedSchema.getName());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n+        return binder.getDerivedSchemaTO(derivedSchema);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n@@ -75,14 +75,14 @@ public DerivedSchemaTO delete(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String derivedSchemaName) throws NotFoundException {\n \n         Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n-        AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n+        AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n         }\n \n-        DerivedSchemaTO schemaToDelete = derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n+        DerivedSchemaTO schemaToDelete = binder.getDerivedSchemaTO(derivedSchema);\n \n-        derivedSchemaDAO.delete(derivedSchemaName, getAttributableUtil(kind));\n+        derSchemaDAO.delete(derivedSchemaName, getAttributableUtil(kind));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.deleteDerived, Result.success,\n                 \"Successfully deleted derived schema: \" + kind + \"/\" + derivedSchema.getName());\n@@ -93,11 +93,11 @@ public DerivedSchemaTO delete(@PathVariable(\"kind\") final String kind,\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         AttributableUtil attributableUtil = getAttributableUtil(kind);\n-        List<AbstractDerSchema> derivedAttributeSchemas = derivedSchemaDAO.findAll(attributableUtil.derSchemaClass());\n+        List<AbstractDerSchema> derivedAttributeSchemas = derSchemaDAO.findAll(attributableUtil.derSchemaClass());\n \n         List<DerivedSchemaTO> derivedSchemaTOs = new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());\n         for (AbstractDerSchema derivedSchema : derivedAttributeSchemas) {\n-            derivedSchemaTOs.add(derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema));\n+            derivedSchemaTOs.add(binder.getDerivedSchemaTO(derivedSchema));\n         }\n \n         auditManager.audit(Category.schema, SchemaSubCategory.listDerived, Result.success,\n@@ -112,15 +112,15 @@ public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"derivedSchema\") final String derivedSchemaName) throws NotFoundException {\n \n         Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n-        AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n+        AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n         }\n \n         auditManager.audit(Category.schema, SchemaSubCategory.readDerived, Result.success,\n                 \"Successfully read derived schema: \" + kind + \"/\" + derivedSchema.getName());\n \n-        return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n+        return binder.getDerivedSchemaTO(derivedSchema);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n@@ -129,17 +129,17 @@ public DerivedSchemaTO update(@RequestBody final DerivedSchemaTO derivedSchemaTO\n             @PathVariable(\"kind\") final String kind) throws NotFoundException {\n \n         Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n-        AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaTO.getName(), reference);\n+        AbstractDerSchema derivedSchema = derSchemaDAO.find(derivedSchemaTO.getName(), reference);\n         if (derivedSchema == null) {\n             throw new NotFoundException(\"Derived schema '\" + derivedSchemaTO.getName() + \"'\");\n         }\n \n-        derivedSchema = derivedSchemaDataBinder.update(derivedSchemaTO, derivedSchema);\n-        derivedSchema = derivedSchemaDAO.save(derivedSchema);\n+        derivedSchema = binder.update(derivedSchemaTO, derivedSchema);\n+        derivedSchema = derSchemaDAO.save(derivedSchema);\n \n         auditManager.audit(Category.schema, SchemaSubCategory.updateDerived, Result.success,\n                 \"Successfully updated derived schema: \" + kind + \"/\" + derivedSchema.getName());\n \n-        return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n+        return binder.getDerivedSchemaTO(derivedSchema);\n     }\n }"},{"sha":"c2bd0bace73c8c7871795eeb70a0693efcd57b7f","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -55,8 +55,7 @@ public class NotificationController extends AbstractController {\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{notificationId}\")\n-    public NotificationTO read(@PathVariable(\"notificationId\") final Long notificationId) throws NotFoundException {\n-\n+    public NotificationTO read(@PathVariable(\"notificationId\") final Long notificationId) {\n         Notification notification = notificationDAO.find(notificationId);\n         if (notification == null) {\n             LOG.error(\"Could not find notification '\" + notificationId + \"'\");\n@@ -70,7 +69,6 @@ public NotificationTO read(@PathVariable(\"notificationId\") final Long notificati\n     @PreAuthorize(\"hasRole('NOTIFICATION_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n     public List<NotificationTO> list() {\n-\n         List<Notification> notifications = notificationDAO.findAll();\n \n         List<NotificationTO> notificationTOs = new ArrayList<NotificationTO>();\n@@ -86,15 +84,13 @@ public List<NotificationTO> list() {\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public NotificationTO create(final HttpServletResponse response, @RequestBody final NotificationTO notificationTO)\n-            throws NotFoundException {\n+    public NotificationTO create(final HttpServletResponse response, @RequestBody final NotificationTO notificationTO) {\n         NotificationTO savedNotificationTO = createInternal(notificationTO);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedNotificationTO;\n     }\n \n-    public NotificationTO createInternal(final NotificationTO notificationTO)\n-            throws NotFoundException {\n+    public NotificationTO createInternal(final NotificationTO notificationTO) {\n         LOG.debug(\"Notification create called with parameter {}\", notificationTO);\n         Notification notification = notificationDAO.save(binder.createNotification(notificationTO));\n         auditManager.audit(Category.notification, NotificationSubCategory.create, Result.success,\n@@ -104,8 +100,7 @@ public NotificationTO createInternal(final NotificationTO notificationTO)\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public NotificationTO update(@RequestBody final NotificationTO notificationTO) throws NotFoundException {\n-\n+    public NotificationTO update(@RequestBody final NotificationTO notificationTO) {\n         LOG.debug(\"ConnNotificationtor update called with parameter {}\", notificationTO);\n \n         Notification notification = notificationDAO.find(notificationTO.getId());\n@@ -126,22 +121,22 @@ public NotificationTO update(@RequestBody final NotificationTO notificationTO) t\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{notificationId}\")\n-    public NotificationTO delete(@PathVariable(\"notificationId\") final Long notificationId) throws NotFoundException {\n+    public NotificationTO delete(@PathVariable(\"notificationId\") final Long notificationId) {\n \n         Notification notification = notificationDAO.find(notificationId);\n         if (notification == null) {\n             LOG.error(\"Could not find notificatin '\" + notificationId + \"'\");\n \n             throw new NotFoundException(String.valueOf(notificationId));\n         }\n-        \n+\n         NotificationTO notificationToDelete = binder.getNotificationTO(notification);\n \n         auditManager.audit(Category.notification, NotificationSubCategory.delete, Result.success,\n                 \"Successfully deleted notification: \" + notification.getId());\n \n         notificationDAO.delete(notificationId);\n-        \n+\n         return notificationToDelete;\n     }\n }"},{"sha":"fdca12572c42f89615c8baab3b0f9191d44bd130","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":9,"deletions":19,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -29,7 +29,6 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.zip.ZipInputStream;\n-import javax.servlet.ServletOutputStream;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.MediaType;\n import org.apache.cocoon.optional.pipeline.components.sax.fop.FopSerializer;\n@@ -135,8 +134,7 @@ public ReportTO createInternal(final ReportTO reportTO) {\n \n     @PreAuthorize(\"hasRole('REPORT_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ReportTO update(@RequestBody final ReportTO reportTO) throws NotFoundException {\n-\n+    public ReportTO update(@RequestBody final ReportTO reportTO) {\n         LOG.debug(\"Report update called with parameter {}\", reportTO);\n \n         Report report = reportDAO.find(reportTO.getId());\n@@ -226,8 +224,7 @@ public Set<String> getReportletConfClassesInternal() {\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{reportId}\")\n-    public ReportTO read(@PathVariable(\"reportId\") final Long reportId) throws NotFoundException {\n-\n+    public ReportTO read(@PathVariable(\"reportId\") final Long reportId) {\n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n@@ -242,8 +239,7 @@ public ReportTO read(@PathVariable(\"reportId\") final Long reportId) throws NotFo\n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/execution/read/{executionId}\")\n     @Transactional(readOnly = true)\n-    public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long executionId) throws NotFoundException {\n-\n+    public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long executionId) {\n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n@@ -260,9 +256,9 @@ public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long execut\n     @Transactional(readOnly = true)\n     public void exportExecutionResult(final HttpServletResponse response,\n             @PathVariable(\"executionId\") final Long executionId,\n-            @RequestParam(value = \"fmt\", required = false) final ReportExecExportFormat fmt) throws NotFoundException {\n+            @RequestParam(value = \"fmt\", required = false) final ReportExecExportFormat fmt) {\n \n-        ServletOutputStream os;\n+        OutputStream os;\n         try {\n             os = response.getOutputStream();\n         } catch (IOException e) {\n@@ -342,9 +338,7 @@ public void exportExecutionResultInternal(final OutputStream os, final ReportExe\n                 \"Successfully exported report execution: \" + reportExec.getId());\n     }\n \n-    public ReportExec getAndCheckReportExecInternal(final Long executionId)\n-            throws NotFoundException {\n-\n+    public ReportExec getAndCheckReportExecInternal(final Long executionId) {\n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n@@ -364,7 +358,7 @@ public ReportExec getAndCheckReportExecInternal(final Long executionId)\n \n     @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/execute/{reportId}\")\n-    public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throws NotFoundException {\n+    public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) {\n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n@@ -407,9 +401,7 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throw\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{reportId}\")\n-    public ReportTO delete(@PathVariable(\"reportId\") final Long reportId)\n-            throws NotFoundException, SyncopeClientCompositeErrorException {\n-\n+    public ReportTO delete(@PathVariable(\"reportId\") final Long reportId) {\n         Report report = reportDAO.find(reportId);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + reportId);\n@@ -429,9 +421,7 @@ public ReportTO delete(@PathVariable(\"reportId\") final Long reportId)\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\n-    public ReportExecTO deleteExecution(@PathVariable(\"executionId\") final Long executionId)\n-            throws NotFoundException, SyncopeClientCompositeErrorException {\n-\n+    public ReportExecTO deleteExecution(@PathVariable(\"executionId\") final Long executionId) {\n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);"},{"sha":"650fd9e0999262609ac21096e6204a196c5848e7","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":7,"deletions":21,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.common.types.AuditElements.ResourceSubCategory;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.MappingPurpose;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n@@ -89,9 +88,7 @@ public class ResourceController extends AbstractController {\n \n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public ResourceTO create(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n-\n+    public ResourceTO create(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO) {\n         LOG.debug(\"Resource creation: {}\", resourceTO);\n \n         ExternalResource resource = resourceDAO.save(binder.create(resourceTO));\n@@ -105,9 +102,7 @@ public ResourceTO create(final HttpServletResponse response, @RequestBody final\n \n     @PreAuthorize(\"hasRole('RESOURCE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ResourceTO update(@RequestBody final ResourceTO resourceTO)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n-\n+    public ResourceTO update(@RequestBody final ResourceTO resourceTO) {\n         LOG.debug(\"Role update request: {}\", resourceTO);\n \n         ExternalResource resource = resourceDAO.find(resourceTO.getName());\n@@ -126,9 +121,7 @@ public ResourceTO update(@RequestBody final ResourceTO resourceTO)\n \n     @PreAuthorize(\"hasRole('RESOURCE_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{resourceName}\")\n-    public ResourceTO delete(@PathVariable(\"resourceName\") final String resourceName)\n-            throws NotFoundException {\n-\n+    public ResourceTO delete(@PathVariable(\"resourceName\") final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n@@ -147,9 +140,7 @@ public ResourceTO delete(@PathVariable(\"resourceName\") final String resourceName\n     @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{resourceName}\")\n-    public ResourceTO read(@PathVariable(\"resourceName\") final String resourceName)\n-            throws NotFoundException {\n-\n+    public ResourceTO read(@PathVariable(\"resourceName\") final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n@@ -175,9 +166,7 @@ public ModelAndView getPropagationActionsClasses() {\n \n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n-    public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstanceId\") final Long connInstanceId)\n-            throws NotFoundException {\n-\n+    public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstanceId\") final Long connInstanceId) {\n         List<ExternalResource> resources;\n \n         if (connInstanceId == null) {\n@@ -201,8 +190,7 @@ public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstan\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/read/{type}/{objectId}\")\n     public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourceName,\n-            @PathVariable(\"type\") final AttributableType type, @PathVariable(\"objectId\") final String objectId)\n-            throws NotFoundException {\n+            @PathVariable(\"type\") final AttributableType type, @PathVariable(\"objectId\") final String objectId) {\n \n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n@@ -240,9 +228,7 @@ public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourc\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/check\")\n     @Transactional(readOnly = true)\n-    public ModelAndView check(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n-\n+    public ModelAndView check(@RequestBody final ResourceTO resourceTO) {\n         final ConnInstance connInstance = binder.getConnInstance(resourceTO);\n \n         final Connector connector = connLoader.createConnector(connInstance, connInstance.getConfiguration());"},{"sha":"6a37e14e899ad2b9db4b3dd1a29838925f45ec5d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":33,"deletions":42,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -42,16 +42,16 @@\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.impl.DefaultPropagationHandler;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n-import org.apache.syncope.core.workflow.WorkflowException;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.core.context.SecurityContextHolder;\n@@ -65,7 +65,12 @@\n \n @Controller\n @RequestMapping(\"/role\")\n-public class RoleController extends AbstractController {\n+public class RoleController {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(RoleController.class);\n \n     @Autowired\n     private AuditManager auditManager;\n@@ -80,7 +85,7 @@ public class RoleController extends AbstractController {\n     private AttributableSearchDAO searchDAO;\n \n     @Autowired\n-    private RoleDataBinder dataBinder;\n+    private RoleDataBinder binder;\n \n     @Autowired\n     private RoleWorkflowAdapter rwfAdapter;\n@@ -100,10 +105,8 @@ public class RoleController extends AbstractController {\n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\n     @Transactional(readOnly = true)\n-    public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n-        SyncopeRole role = dataBinder.getRoleFromId(roleId);\n+    public RoleTO read(@PathVariable(\"roleId\") final Long roleId) {\n+        SyncopeRole role = binder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (!allowedRoleIds.contains(role.getId())) {\n@@ -113,16 +116,14 @@ public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n         auditManager.audit(Category.role, RoleSubCategory.read, Result.success,\n                 \"Successfully read role: \" + role.getId());\n \n-        return dataBinder.getRoleTO(role);\n+        return binder.getRoleTO(role);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/selfRead/{roleId}\")\n     @Transactional(readOnly = true)\n-    public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n-        // Explicit search instead of using dataBinder.getRoleFromId() in order to bypass auth checks - will do here\n+    public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId) {\n+        // Explicit search instead of using binder.getRoleFromId() in order to bypass auth checks - will do here\n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n             throw new NotFoundException(\"Role \" + roleId);\n@@ -145,16 +146,14 @@ public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId)\n         auditManager.audit(Category.role, RoleSubCategory.selfRead, Result.success,\n                 \"Successfully read own role: \" + role.getId());\n \n-        return dataBinder.getRoleTO(role);\n+        return binder.getRoleTO(role);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/parent/{roleId}\")\n     @Transactional(readOnly = true)\n-    public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n-        SyncopeRole role = dataBinder.getRoleFromId(roleId);\n+    public RoleTO parent(@PathVariable(\"roleId\") final Long roleId) {\n+        SyncopeRole role = binder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (role.getParent() != null && !allowedRoleIds.contains(role.getParent().getId())) {\n@@ -163,7 +162,7 @@ public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n \n         RoleTO result = role.getParent() == null\n                 ? null\n-                : dataBinder.getRoleTO(role.getParent());\n+                : binder.getRoleTO(role.getParent());\n \n         auditManager.audit(Category.role, RoleSubCategory.parent, Result.success,\n                 result == null\n@@ -176,18 +175,16 @@ public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/children/{roleId}\")\n     @Transactional(readOnly = true)\n-    public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n-        SyncopeRole role = dataBinder.getRoleFromId(roleId);\n+    public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n+        SyncopeRole role = binder.getRoleFromId(roleId);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n         List<SyncopeRole> children = roleDAO.findChildren(role);\n         List<RoleTO> childrenTOs = new ArrayList<RoleTO>(children.size());\n         for (SyncopeRole child : children) {\n             if (allowedRoleIds.contains(child.getId())) {\n-                childrenTOs.add(dataBinder.getRoleTO(child));\n+                childrenTOs.add(binder.getRoleTO(child));\n             }\n         }\n \n@@ -226,7 +223,7 @@ public List<RoleTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n         final List<RoleTO> result = new ArrayList<RoleTO>(matchingRoles.size());\n         for (SyncopeRole role : matchingRoles) {\n-            result.add(dataBinder.getRoleTO(role));\n+            result.add(binder.getRoleTO(role));\n         }\n \n         auditManager.audit(Category.role, AuditElements.RoleSubCategory.read, Result.success,\n@@ -258,7 +255,7 @@ public List<RoleTO> list() {\n \n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n         for (SyncopeRole role : roles) {\n-            roleTOs.add(dataBinder.getRoleTO(role));\n+            roleTOs.add(binder.getRoleTO(role));\n         }\n \n         auditManager.audit(Category.role, RoleSubCategory.list, Result.success,\n@@ -269,9 +266,7 @@ public List<RoleTO> list() {\n \n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO)\n-            throws UnauthorizedRoleException, WorkflowException, NotFoundException, PropagationException {\n-\n+    public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO) {\n         LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -288,7 +283,7 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n         final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n-        final RoleTO savedTO = dataBinder.getRoleTO(created.getResult());\n+        final RoleTO savedTO = binder.getRoleTO(created.getResult());\n         savedTO.setPropagationStatusTOs(propagations);\n \n         LOG.debug(\"About to return created role\\n{}\", savedTO);\n@@ -302,12 +297,10 @@ public RoleTO create(final HttpServletResponse response, @RequestBody final Role\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public RoleTO update(@RequestBody final RoleMod roleMod)\n-            throws NotFoundException, UnauthorizedRoleException, WorkflowException, PropagationException {\n-\n+    public RoleTO update(@RequestBody final RoleMod roleMod) {\n         LOG.debug(\"Role update called with {}\", roleMod);\n \n-        SyncopeRole role = dataBinder.getRoleFromId(roleMod.getId());\n+        SyncopeRole role = binder.getRoleFromId(roleMod.getId());\n \n         WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n \n@@ -317,7 +310,7 @@ public RoleTO update(@RequestBody final RoleMod roleMod)\n         final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n \n-        final RoleTO updatedTO = dataBinder.getRoleTO(updated.getResult());\n+        final RoleTO updatedTO = binder.getRoleTO(updated.getResult());\n         updatedTO.setPropagationStatusTOs(propagations);\n \n         auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n@@ -330,17 +323,15 @@ public RoleTO update(@RequestBody final RoleMod roleMod)\n \n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\n-    public RoleTO delete(@PathVariable(\"roleId\") final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException, WorkflowException, PropagationException {\n-\n-        SyncopeRole role = dataBinder.getRoleFromId(roleId);\n-\n-        RoleTO roleTO = dataBinder.getRoleTO(role);\n-\n+    public RoleTO delete(@PathVariable(\"roleId\") final Long roleId) {\n         List<PropagationTask> tasks = propagationManager.getRoleDeleteTaskIds(roleId);\n \n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setId(roleId);\n+\n         final List<PropagationStatusTO> propagations = new ArrayList<PropagationStatusTO>();\n         taskExecutor.execute(tasks, new DefaultPropagationHandler(connObjectUtil, propagations));\n+        roleTO.setPropagationStatusTOs(propagations);\n \n         rwfAdapter.delete(roleId);\n "},{"sha":"621c8d721f3759f6e6a7355486cab82a822bc798","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -50,22 +50,22 @@ public class SchemaController extends AbstractController {\n     private SchemaDAO schemaDAO;\n \n     @Autowired\n-    private SchemaDataBinder schemaDataBinder;\n+    private SchemaDataBinder binder;\n \n     @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public SchemaTO create(final HttpServletResponse response, @RequestBody final SchemaTO schemaTO,\n             @PathVariable(\"kind\") final String kind) {\n \n         AbstractSchema schema = getAttributableUtil(kind).newSchema();\n-        schemaDataBinder.create(schemaTO, schema);\n+        binder.create(schemaTO, schema);\n         schema = schemaDAO.save(schema);\n \n         auditManager.audit(Category.schema, SchemaSubCategory.create, Result.success,\n                 \"Successfully created schema: \" + kind + \"/\" + schema.getName());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return schemaDataBinder.getSchemaTO(schema, getAttributableUtil(kind));\n+        return binder.getSchemaTO(schema, getAttributableUtil(kind));\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n@@ -79,7 +79,7 @@ public SchemaTO delete(@PathVariable(\"kind\") final String kind, @PathVariable(\"s\n             throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n \n-        SchemaTO schemaToDelete = schemaDataBinder.getSchemaTO(schema, getAttributableUtil(kind));\n+        SchemaTO schemaToDelete = binder.getSchemaTO(schema, getAttributableUtil(kind));\n \n         schemaDAO.delete(schemaName, getAttributableUtil(kind));\n \n@@ -96,7 +96,7 @@ public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n \n         List<SchemaTO> schemaTOs = new ArrayList<SchemaTO>(schemas.size());\n         for (AbstractSchema schema : schemas) {\n-            schemaTOs.add(schemaDataBinder.getSchemaTO(schema, attributableUtil));\n+            schemaTOs.add(binder.getSchemaTO(schema, attributableUtil));\n         }\n \n         auditManager.audit(Category.schema, SchemaSubCategory.list, Result.success,\n@@ -119,7 +119,7 @@ public SchemaTO read(@PathVariable(\"kind\") final String kind, @PathVariable(\"sch\n         auditManager.audit(Category.schema, SchemaSubCategory.read, Result.success,\n                 \"Successfully read schema: \" + kind + \"/\" + schema.getName());\n \n-        return schemaDataBinder.getSchemaTO(schema, attributableUtil);\n+        return binder.getSchemaTO(schema, attributableUtil);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n@@ -133,12 +133,12 @@ public SchemaTO update(@RequestBody final SchemaTO schemaTO, @PathVariable(\"kind\n             throw new NotFoundException(\"Schema '\" + schemaTO.getName() + \"'\");\n         }\n \n-        schemaDataBinder.update(schemaTO, schema, attributableUtil);\n+        binder.update(schemaTO, schema, attributableUtil);\n         schema = schemaDAO.save(schema);\n \n         auditManager.audit(Category.schema, SchemaSubCategory.update, Result.success,\n                 \"Successfully updated schema: \" + kind + \"/\" + schema.getName());\n \n-        return schemaDataBinder.getSchemaTO(schema, attributableUtil);\n+        return binder.getSchemaTO(schema, attributableUtil);\n     }\n }"},{"sha":"98dd78b52d2227ebd4e1b9ba87157f3801b2c17b","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":10,"deletions":22,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -99,16 +99,13 @@ public class TaskController extends AbstractController {\n \n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create/sync\")\n-    public TaskTO createSyncTask(final HttpServletResponse response, @RequestBody final SyncTaskTO taskTO)\n-            throws NotFoundException {\n-\n+    public TaskTO createSyncTask(final HttpServletResponse response, @RequestBody final SyncTaskTO taskTO) {\n         return createSchedTask(response, taskTO);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create/sched\")\n-    public TaskTO createSchedTask(final HttpServletResponse response, @RequestBody final SchedTaskTO taskTO)\n-            throws NotFoundException {\n+    public TaskTO createSchedTask(final HttpServletResponse response, @RequestBody final SchedTaskTO taskTO) {\n         TaskTO createdTaskTO = createSchedTaskInternal(taskTO);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return createdTaskTO;\n@@ -143,15 +140,13 @@ public TaskTO createSchedTaskInternal(final SchedTaskTO taskTO) {\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update/sync\")\n-    public TaskTO updateSync(@RequestBody final SyncTaskTO taskTO) throws NotFoundException {\n-\n+    public TaskTO updateSync(@RequestBody final SyncTaskTO taskTO) {\n         return updateSched(taskTO);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update/sched\")\n-    public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO) throws NotFoundException {\n-\n+    public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO) {\n         LOG.debug(\"Task update called with parameter {}\", taskTO);\n \n         SchedTask task = taskDAO.find(taskTO.getId());\n@@ -254,8 +249,7 @@ public ModelAndView getSyncActionsClasses() {\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{taskId}\")\n-    public TaskTO read(@PathVariable(\"taskId\") final Long taskId) throws NotFoundException {\n-\n+    public TaskTO read(@PathVariable(\"taskId\") final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n@@ -270,8 +264,7 @@ public TaskTO read(@PathVariable(\"taskId\") final Long taskId) throws NotFoundExc\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/execution/read/{executionId}\")\n-    public TaskExecTO readExecution(@PathVariable(\"executionId\") final Long executionId) throws NotFoundException {\n-\n+    public TaskExecTO readExecution(@PathVariable(\"executionId\") final Long executionId) {\n         TaskExec taskExec = taskExecDAO.find(executionId);\n         if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n@@ -286,7 +279,7 @@ public TaskExecTO readExecution(@PathVariable(\"executionId\") final Long executio\n     @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/execute/{taskId}\")\n     public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n-            @RequestParam(value = \"dryRun\", defaultValue = \"false\") final boolean dryRun) throws NotFoundException {\n+            @RequestParam(value = \"dryRun\", defaultValue = \"false\") final boolean dryRun) {\n \n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n@@ -352,8 +345,7 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n     @RequestMapping(method = RequestMethod.GET, value = \"/execution/report/{executionId}\")\n     public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n             @RequestParam(\"executionStatus\") final PropagationTaskExecStatus status,\n-            @RequestParam(\"message\") final String message)\n-            throws NotFoundException, SyncopeClientCompositeErrorException {\n+            @RequestParam(\"message\") final String message) {\n \n         TaskExec exec = taskExecDAO.find(executionId);\n         if (exec == null) {\n@@ -410,9 +402,7 @@ public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{taskId}\")\n-    public TaskTO delete(@PathVariable(\"taskId\") final Long taskId)\n-            throws NotFoundException, SyncopeClientCompositeErrorException {\n-\n+    public TaskTO delete(@PathVariable(\"taskId\") final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n@@ -435,9 +425,7 @@ public TaskTO delete(@PathVariable(\"taskId\") final Long taskId)\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\n-    public TaskExecTO deleteExecution(@PathVariable(\"executionId\") final Long executionId)\n-            throws NotFoundException, SyncopeClientCompositeErrorException {\n-\n+    public TaskExecTO deleteExecution(@PathVariable(\"executionId\") final Long executionId) {\n         TaskExec taskExec = taskExecDAO.find(executionId);\n         if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);"},{"sha":"f50d2733131398eeb27ec6f432d6efffebde2998","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":58,"deletions":99,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -45,17 +45,14 @@\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.propagation.PropagationByResource;\n-import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.impl.DefaultPropagationHandler;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n-import org.apache.syncope.core.workflow.WorkflowException;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.slf4j.Logger;\n@@ -97,7 +94,7 @@ public class UserController {\n     protected AttributableSearchDAO searchDAO;\n \n     @Autowired\n-    protected UserDataBinder dataBinder;\n+    protected UserDataBinder binder;\n \n     @Autowired\n     protected UserWorkflowAdapter uwfAdapter;\n@@ -121,16 +118,15 @@ public class UserController {\n     @RequestMapping(method = RequestMethod.GET, value = \"/verifyPassword/{username}\")\n     @Transactional(readOnly = true)\n     public ModelAndView verifyPassword(@PathVariable(\"username\") String username,\n-            @RequestParam(\"password\") final String password)\n-            throws NotFoundException, UnauthorizedRoleException {\n+            @RequestParam(\"password\") final String password) {\n+\n         return new ModelAndView().addObject(verifyPasswordInternal(username, password));\n     }\n \n-    public Boolean verifyPasswordInternal(String username,\n-            final String password) {\n+    public Boolean verifyPasswordInternal(final String username, final String password) {\n         auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n                 \"Verified password for: \" + username);\n-        return dataBinder.verifyPassword(username, password);\n+        return binder.verifyPassword(username, password);\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n@@ -142,15 +138,15 @@ public ModelAndView count() {\n \n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public int countInternal() {\n-        Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n-        return userDAO.count(adminRoleIds);\n+        return userDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition)\n             throws InvalidSearchConditionException {\n+\n         return new ModelAndView().addObject(searchCountInternal(searchCondition));\n     }\n \n@@ -172,7 +168,7 @@ public List<UserTO> list() {\n \n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n-            userTOs.add(dataBinder.getUserTO(user));\n+            userTOs.add(binder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n@@ -190,7 +186,7 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n         List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n-            userTOs.add(dataBinder.getUserTO(user));\n+            userTOs.add(binder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n@@ -202,10 +198,8 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public UserTO read(@PathVariable(\"userId\") final Long userId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n-        UserTO result = dataBinder.getUserTO(userId);\n+    public UserTO read(@PathVariable(\"userId\") final Long userId) {\n+        UserTO result = binder.getUserTO(userId);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read user: \" + userId);\n@@ -216,10 +210,9 @@ public UserTO read(@PathVariable(\"userId\") final Long userId)\n     @PreAuthorize(\"#username == authentication.name or hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/readByUsername/{username}\")\n     @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public UserTO read(@PathVariable final String username)\n-            throws NotFoundException, UnauthorizedRoleException {\n+    public UserTO read(@PathVariable final String username) {\n \n-        UserTO result = dataBinder.getUserTO(username);\n+        UserTO result = binder.getUserTO(username);\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read user: \" + username);\n@@ -230,8 +223,8 @@ public UserTO read(@PathVariable final String username)\n     @PreAuthorize(\"isAuthenticated()\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/self\")\n     @Transactional(readOnly = true)\n-    public UserTO read() throws NotFoundException {\n-        UserTO userTO = dataBinder.getAuthenticatedUserTO();\n+    public UserTO read() {\n+        UserTO userTO = binder.getAuthenticatedUserTO();\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n                 \"Successfully read own data: \" + userTO.getUsername());\n@@ -268,7 +261,7 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n-            result.add(dataBinder.getUserTO(user));\n+            result.add(binder.getUserTO(user));\n         }\n \n         auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n@@ -279,8 +272,7 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n \n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public UserTO create(final HttpServletResponse response, @RequestBody final UserTO userTO)\n-            throws PropagationException, UnauthorizedRoleException, WorkflowException, NotFoundException {\n+    public UserTO create(final HttpServletResponse response, @RequestBody final UserTO userTO) {\n         UserTO savedTO = createInternal(userTO);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n@@ -310,7 +302,7 @@ public UserTO createInternal(final UserTO userTO) {\n \n         notificationManager.createTasks(created.getResult().getKey(), created.getPerformedTasks());\n \n-        final UserTO savedTO = dataBinder.getUserTO(created.getResult().getKey());\n+        final UserTO savedTO = binder.getUserTO(created.getResult().getKey());\n         savedTO.setPropagationStatusTOs(propagations);\n \n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n@@ -323,9 +315,7 @@ public UserTO createInternal(final UserTO userTO) {\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public UserTO update(@RequestBody final UserMod userMod)\n-            throws NotFoundException, PropagationException, UnauthorizedRoleException, WorkflowException {\n-\n+    public UserTO update(@RequestBody final UserMod userMod) {\n         LOG.debug(\"User update called with {}\", userMod);\n \n         final String changedPwd = userMod.getPassword();\n@@ -349,7 +339,7 @@ public UserTO update(@RequestBody final UserMod userMod)\n             origPropByRes.merge(updated.getPropByRes());\n \n             Set<String> pwdResourceNames = userMod.getPwdPropRequest().getResources();\n-            SyncopeUser user = dataBinder.getUserFromId(updated.getResult().getKey());\n+            SyncopeUser user = binder.getUserFromId(updated.getResult().getKey());\n             pwdResourceNames.retainAll(user.getResourceNames());\n             final PropagationByResource pwdPropByRes = new PropagationByResource();\n             pwdPropByRes.addAll(ResourceOperation.UPDATE, pwdResourceNames);\n@@ -381,7 +371,7 @@ public UserTO update(@RequestBody final UserMod userMod)\n         notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n \n         // 4. prepare result, including propagation status on external resources\n-        final UserTO updatedTO = dataBinder.getUserTO(updated.getResult().getKey());\n+        final UserTO updatedTO = binder.getUserTO(updated.getResult().getKey());\n         updatedTO.setPropagationStatusTOs(propagations);\n \n         auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n@@ -395,62 +385,53 @@ public UserTO update(@RequestBody final UserMod userMod)\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO activate(\n-            @PathVariable(\"userId\") final Long userId,\n-            @RequestParam(required = true) final String token)\n-            throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n+    public UserTO activate(@PathVariable(\"userId\") final Long userId,\n+            @RequestParam(required = true) final String token) {\n \n         return activate(userId, token, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/activate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO activate(\n-            @PathVariable(\"userId\") final Long userId,\n+    public UserTO activate(@PathVariable(\"userId\") final Long userId,\n             @RequestParam(required = true) final String token,\n-            @RequestBody final PropagationRequestTO propagationRequestTO)\n-            throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n+            @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n         LOG.debug(\"About to activate \" + userId);\n \n-        SyncopeUser user = dataBinder.getUserFromId(userId);\n+        SyncopeUser user = binder.getUserFromId(userId);\n \n         return setStatus(user, token, propagationRequestTO, true, \"activate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/activateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO activate(\n-            @PathVariable(\"username\") final String username,\n-            @RequestParam(required = true) final String token)\n-            throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n+    public UserTO activate(@PathVariable(\"username\") final String username,\n+            @RequestParam(required = true) final String token) {\n \n         return activate(username, token, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/activateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO activate(\n-            @PathVariable(\"username\") final String username,\n+    public UserTO activate(@PathVariable(\"username\") final String username,\n             @RequestParam(required = true) final String token,\n-            @RequestBody final PropagationRequestTO propagationRequestTO)\n-            throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n+            @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n         LOG.debug(\"About to activate \" + username);\n \n-        SyncopeUser user = dataBinder.getUserFromUsername(username);\n+        SyncopeUser user = binder.getUserFromUsername(username);\n \n         return setStatus(user, token, propagationRequestTO, true, \"activate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/suspend/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO suspend(@PathVariable(\"userId\") final Long userId)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+    public UserTO suspend(@PathVariable(\"userId\") final Long userId) {\n \n         return suspend(userId, null);\n     }\n@@ -459,21 +440,19 @@ public UserTO suspend(@PathVariable(\"userId\") final Long userId)\n     @RequestMapping(method = RequestMethod.POST, value = \"/suspend/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n-            @RequestBody final PropagationRequestTO propagationRequestTO)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+            @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n         LOG.debug(\"About to suspend \" + userId);\n \n-        SyncopeUser user = dataBinder.getUserFromId(userId);\n+        SyncopeUser user = binder.getUserFromId(userId);\n \n         return setStatus(user, null, propagationRequestTO, false, \"suspend\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/suspendByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO suspend(@PathVariable(\"username\") final String username)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+    public UserTO suspend(@PathVariable(\"username\") final String username) {\n \n         return suspend(username, null);\n     }\n@@ -482,89 +461,78 @@ public UserTO suspend(@PathVariable(\"username\") final String username)\n     @RequestMapping(method = RequestMethod.POST, value = \"/suspendByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n     public UserTO suspend(@PathVariable(\"username\") final String username,\n-            @RequestBody final PropagationRequestTO propagationRequestTO)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+            @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n         LOG.debug(\"About to suspend \" + username);\n \n-        SyncopeUser user = dataBinder.getUserFromUsername(username);\n+        SyncopeUser user = binder.getUserFromUsername(username);\n \n         return setStatus(user, null, propagationRequestTO, false, \"suspend\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO reactivate(final @PathVariable(\"userId\") Long userId)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+    public UserTO reactivate(@PathVariable(\"userId\") final Long userId) {\n \n         return reactivate(userId, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/reactivate/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO reactivate(final @PathVariable(\"userId\") Long userId,\n-            @RequestBody final PropagationRequestTO propagationRequestTO)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+    public UserTO reactivate(@PathVariable(\"userId\") final Long userId,\n+            @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n         LOG.debug(\"About to reactivate \" + userId);\n \n-        SyncopeUser user = dataBinder.getUserFromId(userId);\n+        SyncopeUser user = binder.getUserFromId(userId);\n \n         return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO reactivate(final @PathVariable(\"username\") String username)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+    public UserTO reactivate(@PathVariable(\"username\") final String username) {\n \n         return reactivate(username, null);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/reactivateByUsername/{username}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO reactivate(final @PathVariable(\"username\") String username,\n-            @RequestBody final PropagationRequestTO propagationRequestTO)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+    public UserTO reactivate(@PathVariable(\"username\") final String username,\n+            @RequestBody final PropagationRequestTO propagationRequestTO) {\n \n         LOG.debug(\"About to reactivate \" + username);\n \n-        SyncopeUser user = dataBinder.getUserFromUsername(username);\n+        SyncopeUser user = binder.getUserFromUsername(username);\n \n         return setStatus(user, null, propagationRequestTO, true, \"reactivate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n-    public UserTO delete(@PathVariable(\"userId\") final Long userId)\n-            throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n-\n+    public UserTO delete(@PathVariable(\"userId\") final Long userId) {\n         LOG.debug(\"User delete called with {}\", userId);\n \n         return doDelete(userId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/deleteByUsername/{username}\")\n-    public UserTO delete(@PathVariable final String username)\n-            throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n-\n+    public UserTO delete(@PathVariable final String username) {\n         LOG.debug(\"User delete called with {}\", username);\n \n-        UserTO result = dataBinder.getUserTO(username);\n+        UserTO result = binder.getUserTO(username);\n         long userId = result.getId();\n \n         return doDelete(userId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/execute/workflow/{taskId}\")\n-    public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"taskId\") final String taskId)\n-            throws WorkflowException, NotFoundException, UnauthorizedRoleException, PropagationException {\n-\n+    public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"taskId\") final String taskId) {\n         LOG.debug(\"About to execute {} on {}\", taskId, userTO.getId());\n \n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n@@ -577,7 +545,7 @@ public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"t\n \n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n \n-        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n+        final UserTO savedTO = binder.getUserTO(updated.getResult());\n \n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n@@ -602,10 +570,8 @@ public List<WorkflowFormTO> getForms() {\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/{userId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId)\n-            throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n-\n-        SyncopeUser user = dataBinder.getUserFromId(userId);\n+    public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId) {\n+        SyncopeUser user = binder.getUserFromId(userId);\n         WorkflowFormTO result = uwfAdapter.getForm(user.getWorkflowId());\n \n         auditManager.audit(Category.user, UserSubCategory.getFormForUser, Result.success,\n@@ -617,9 +583,7 @@ public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId)\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/claim/{taskId}\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public WorkflowFormTO claimForm(@PathVariable(\"taskId\") final String taskId)\n-            throws NotFoundException, WorkflowException {\n-\n+    public WorkflowFormTO claimForm(@PathVariable(\"taskId\") final String taskId) {\n         WorkflowFormTO result = uwfAdapter.claimForm(taskId,\n                 SecurityContextHolder.getContext().getAuthentication().getName());\n \n@@ -632,9 +596,7 @@ public WorkflowFormTO claimForm(@PathVariable(\"taskId\") final String taskId)\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/workflow/form/submit\")\n     @Transactional(rollbackFor = {Throwable.class})\n-    public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n-            throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n-\n+    public UserTO submitForm(@RequestBody final WorkflowFormTO form) {\n         LOG.debug(\"About to process form {}\", form);\n \n         WorkflowResult<Map.Entry<Long, String>> updated = uwfAdapter.submitForm(form,\n@@ -652,7 +614,7 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n                 null);\n         taskExecutor.execute(tasks);\n \n-        final UserTO savedTO = dataBinder.getUserTO(updated.getResult().getKey());\n+        final UserTO savedTO = binder.getUserTO(updated.getResult().getKey());\n \n         auditManager.audit(Category.user, UserSubCategory.submitForm, Result.success,\n                 \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n@@ -663,8 +625,7 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n     }\n \n     protected UserTO setStatus(final SyncopeUser user, final String token,\n-            final PropagationRequestTO propagationRequestTO, final boolean status, final String task)\n-            throws NotFoundException, WorkflowException, UnauthorizedRoleException, PropagationException {\n+            final PropagationRequestTO propagationRequestTO, final boolean status, final String task) {\n \n         LOG.debug(\"About to set status of {}\" + user);\n \n@@ -686,7 +647,7 @@ protected UserTO setStatus(final SyncopeUser user, final String token,\n \n         notificationManager.createTasks(updated.getResult(), updated.getPerformedTasks());\n \n-        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n+        final UserTO savedTO = binder.getUserTO(updated.getResult());\n \n         auditManager.audit(Category.user, UserSubCategory.setStatus, Result.success,\n                 \"Successfully changed status to \" + savedTO.getStatus() + \" for user: \" + savedTO.getUsername());\n@@ -708,9 +669,7 @@ protected WorkflowResult<Long> setStatusOnWfAdapter(final SyncopeUser user, fina\n         return updated;\n     }\n \n-    protected UserTO doDelete(final Long userId)\n-            throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n-\n+    protected UserTO doDelete(final Long userId) {\n         // Note here that we can only notify about \"delete\", not any other\n         // task defined in workflow process definition: this because this\n         // information could only be available after uwfAdapter.delete(), which"},{"sha":"d22a18152165f42fc3d2339d3e18b77b881bc3c9","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":33,"deletions":37,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -67,7 +67,7 @@ public class UserRequestController {\n     private UserRequestDAO userRequestDAO;\n \n     @Autowired\n-    private UserRequestDataBinder dataBinder;\n+    private UserRequestDataBinder binder;\n \n     public Boolean isCreateAllowedByConf() {\n         final SyncopeConf createRequestAllowed = confDAO.find(\"createRequest.allowed\", \"false\");\n@@ -85,7 +85,7 @@ public ModelAndView isCreateAllowed() {\n     }\n \n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public UserRequestTO create(@RequestBody final UserTO userTO) throws UnauthorizedRoleException {\n+    public UserRequestTO create(@RequestBody final UserTO userTO) {\n         if (!isCreateAllowedByConf()) {\n             LOG.error(\"Create requests are not allowed\");\n \n@@ -95,7 +95,7 @@ public UserRequestTO create(@RequestBody final UserTO userTO) throws Unauthorize\n         LOG.debug(\"Request user create called with {}\", userTO);\n \n         try {\n-            dataBinder.testCreate(userTO);\n+            binder.testCreate(userTO);\n         } catch (RollbackException e) {\n             LOG.debug(\"Testing create - ignore exception\");\n         }\n@@ -107,18 +107,16 @@ public UserRequestTO create(@RequestBody final UserTO userTO) throws Unauthorize\n         auditManager.audit(Category.userRequest, UserRequestSubCategory.create, Result.success,\n                 \"Successfully created user request for \" + request.getUserTO().getUsername());\n \n-        return dataBinder.getUserRequestTO(request);\n+        return binder.getUserRequestTO(request);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public UserRequestTO update(@RequestBody final UserMod userMod)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public UserRequestTO update(@RequestBody final UserMod userMod) {\n         LOG.debug(\"Request user update called with {}\", userMod);\n \n         try {\n-            dataBinder.testUpdate(userMod);\n+            binder.testUpdate(userMod);\n         } catch (RollbackException e) {\n             LOG.debug(\"Testing update - ignore exception\");\n         }\n@@ -130,30 +128,7 @@ public UserRequestTO update(@RequestBody final UserMod userMod)\n         auditManager.audit(Category.userRequest, UserRequestSubCategory.update, Result.success,\n                 \"Successfully updated user request for \" + request.getUserMod().getUsername());\n \n-        return dataBinder.getUserRequestTO(request);\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n-    public UserRequestTO delete(@PathVariable(\"userId\") final Long userId) throws NotFoundException,\n-            UnauthorizedRoleException {\n-\n-        LOG.debug(\"Request user delete called with {}\", userId);\n-\n-        try {\n-            dataBinder.testDelete(userId);\n-        } catch (RollbackException e) {\n-            LOG.debug(\"Testing delete - ignore exception\");\n-        }\n-\n-        UserRequest request = new UserRequest();\n-        request.setUserId(userId);\n-        request = userRequestDAO.save(request);\n-\n-        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n-                \"Successfully deleted user request for user\" + userId);\n-\n-        return dataBinder.getUserRequestTO(request);\n+        return binder.getUserRequestTO(request);\n     }\n \n     @PreAuthorize(\"hasRole('USER_REQUEST_LIST')\")\n@@ -163,7 +138,7 @@ public List<UserRequestTO> list() {\n         List<UserRequestTO> result = new ArrayList<UserRequestTO>();\n \n         for (UserRequest request : userRequestDAO.findAll()) {\n-            result.add(dataBinder.getUserRequestTO(request));\n+            result.add(binder.getUserRequestTO(request));\n         }\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.list, Result.success,\n@@ -175,7 +150,7 @@ public List<UserRequestTO> list() {\n     @PreAuthorize(\"hasRole('USER_REQUEST_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{requestId}\")\n     @Transactional(readOnly = true)\n-    public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) throws NotFoundException {\n+    public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) {\n         UserRequest request = userRequestDAO.find(requestId);\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);\n@@ -184,18 +159,39 @@ public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) throw\n         auditManager.audit(Category.userRequest, UserRequestSubCategory.read, Result.success,\n                 \"Successfully read user request for \" + request.getUserTO().getUsername());\n \n-        return dataBinder.getUserRequestTO(request);\n+        return binder.getUserRequestTO(request);\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\n+    public UserRequestTO delete(@PathVariable(\"userId\") final Long userId) {\n+        LOG.debug(\"Request user delete called with {}\", userId);\n+\n+        try {\n+            binder.testDelete(userId);\n+        } catch (RollbackException e) {\n+            LOG.debug(\"Testing delete - ignore exception\");\n+        }\n+\n+        UserRequest request = new UserRequest();\n+        request.setUserId(userId);\n+        request = userRequestDAO.save(request);\n+\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n+                \"Successfully deleted user request for user\" + userId);\n+\n+        return binder.getUserRequestTO(request);\n     }\n \n     @PreAuthorize(\"hasRole('USER_REQUEST_DELETE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/deleteRequest/{requestId}\")\n-    public UserRequestTO deleteRequest(@PathVariable(\"requestId\") final Long requestId) throws NotFoundException {\n+    public UserRequestTO deleteRequest(@PathVariable(\"requestId\") final Long requestId) {\n         UserRequest request = userRequestDAO.find(requestId);\n         if (request == null) {\n             throw new NotFoundException(\"User request \" + requestId);\n         }\n \n-        UserRequestTO requestToDelete = dataBinder.getUserRequestTO(request);\n+        UserRequestTO requestToDelete = binder.getUserRequestTO(request);\n \n         auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n                 \"Successfully deleted user request for user\" + request.getUserId());"},{"sha":"9b0f6325eacd2699c1fedd0f9ee17fc52546bc55","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/VirtualSchemaController.java","status":"modified","additions":38,"deletions":42,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.SchemaSubCategory;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n@@ -47,55 +46,34 @@ public class VirtualSchemaController extends AbstractController {\n     private AuditManager auditManager;\n \n     @Autowired\n-    private VirSchemaDAO virtualSchemaDAO;\n+    private VirSchemaDAO virSchemaDAO;\n \n     @Autowired\n-    private VirtualSchemaDataBinder virtualSchemaDataBinder;\n+    private VirtualSchemaDataBinder binder;\n \n     @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n     public VirtualSchemaTO create(final HttpServletResponse response,\n-            @RequestBody final VirtualSchemaTO virtualSchemaTO, @PathVariable(\"kind\") final String kind)\n-            throws SyncopeClientCompositeErrorException {\n+            @RequestBody final VirtualSchemaTO virtualSchemaTO, @PathVariable(\"kind\") final String kind) {\n \n-        AbstractVirSchema virtualSchema = virtualSchemaDAO.save(virtualSchemaDataBinder.create(\n-                virtualSchemaTO, getAttributableUtil(kind).newVirSchema(),\n-                getAttributableUtil(kind).schemaClass()));\n+        AbstractVirSchema virSchema = virSchemaDAO.save(binder.create(\n+                virtualSchemaTO, getAttributableUtil(kind).newVirSchema()));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.createVirtual, Result.success,\n-                \"Successfully created virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n+                \"Successfully created virtual schema: \" + kind + \"/\" + virSchema.getName());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n-        return virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n-    }\n-\n-    @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n-    public VirtualSchemaTO delete(@PathVariable(\"kind\") final String kind,\n-            @PathVariable(\"schema\") final String virtualSchemaName) throws NotFoundException {\n-\n-        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n-        AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaName, reference);\n-        if (virtualSchema == null) {\n-            throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n-        }\n-\n-        VirtualSchemaTO schemaToDelete = virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n-        virtualSchemaDAO.delete(virtualSchemaName, getAttributableUtil(kind));\n-\n-        auditManager.audit(Category.schema, SchemaSubCategory.deleteVirtual, Result.success,\n-                \"Successfully deleted virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n-        return schemaToDelete;\n+        return binder.getVirtualSchemaTO(virSchema);\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public List<VirtualSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n-        List<? extends AbstractVirSchema> virtualAttributeSchemas = virtualSchemaDAO.findAll(reference);\n+        List<? extends AbstractVirSchema> virAttrSchemas = virSchemaDAO.findAll(reference);\n \n-        List<VirtualSchemaTO> virtualSchemaTOs = new ArrayList<VirtualSchemaTO>(virtualAttributeSchemas.size());\n-        for (AbstractVirSchema virtualSchema : virtualAttributeSchemas) {\n-            virtualSchemaTOs.add(virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema));\n+        List<VirtualSchemaTO> virtualSchemaTOs = new ArrayList<VirtualSchemaTO>(virAttrSchemas.size());\n+        for (AbstractVirSchema virSchema : virSchemaDAO.findAll(reference)) {\n+            virtualSchemaTOs.add(binder.getVirtualSchemaTO(virSchema));\n         }\n \n         auditManager.audit(Category.schema, SchemaSubCategory.listVirtual, Result.success,\n@@ -107,38 +85,56 @@ public List<VirtualSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n     @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/read/{virtualSchema}\")\n     public VirtualSchemaTO read(@PathVariable(\"kind\") final String kind,\n-            @PathVariable(\"virtualSchema\") final String virtualSchemaName) throws NotFoundException {\n+            @PathVariable(\"virtualSchema\") final String virtualSchemaName) {\n \n         Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n-        AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaName, reference);\n+        AbstractVirSchema virtualSchema = virSchemaDAO.find(virtualSchemaName, reference);\n         if (virtualSchema == null) {\n             throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n         }\n \n         auditManager.audit(Category.schema, SchemaSubCategory.readVirtual, Result.success,\n                 \"Successfully read virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n \n-        return virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n+        return binder.getVirtualSchemaTO(virtualSchema);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public VirtualSchemaTO update(@RequestBody final VirtualSchemaTO virtualSchemaTO,\n-            @PathVariable(\"kind\") final String kind) throws SyncopeClientCompositeErrorException, NotFoundException {\n+            @PathVariable(\"kind\") final String kind) {\n \n         Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n-        AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaTO.getName(), reference);\n+        AbstractVirSchema virtualSchema = virSchemaDAO.find(virtualSchemaTO.getName(), reference);\n         if (virtualSchema == null) {\n             throw new NotFoundException(\"Virtual schema is null\");\n         }\n \n-        virtualSchema = virtualSchemaDataBinder.update(virtualSchemaTO, virtualSchema,\n-                getAttributableUtil(kind).schemaClass());\n-        virtualSchema = virtualSchemaDAO.save(virtualSchema);\n+        virtualSchema = binder.update(virtualSchemaTO, virtualSchema);\n+        virtualSchema = virSchemaDAO.save(virtualSchema);\n \n         auditManager.audit(Category.schema, SchemaSubCategory.updateVirtual, Result.success,\n                 \"Successfully updated virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n \n-        return virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n+        return binder.getVirtualSchemaTO(virtualSchema);\n+    }\n+\n+    @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\n+    public VirtualSchemaTO delete(@PathVariable(\"kind\") final String kind,\n+            @PathVariable(\"schema\") final String virtualSchemaName) {\n+\n+        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n+        AbstractVirSchema virSchema = virSchemaDAO.find(virtualSchemaName, reference);\n+        if (virSchema == null) {\n+            throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n+        }\n+\n+        VirtualSchemaTO schemaToDelete = binder.getVirtualSchemaTO(virSchema);\n+        virSchemaDAO.delete(virtualSchemaName, getAttributableUtil(kind));\n+\n+        auditManager.audit(Category.schema, SchemaSubCategory.deleteVirtual, Result.success,\n+                \"Successfully deleted virtual schema: \" + kind + \"/\" + virSchema.getName());\n+        return schemaToDelete;\n     }\n }"},{"sha":"cfb064efd890f3e402f3686273712d70b5d7b6a9","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/WorkflowController.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.WorkflowSubCategory;\n import org.apache.syncope.core.audit.AuditManager;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.workflow.WorkflowAdapter;\n import org.apache.syncope.core.workflow.WorkflowException;\n import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n@@ -75,9 +74,7 @@ public WorkflowDefinitionTO getRoleDefinition() throws WorkflowException {\n         return getDefinition(rwfAdapter);\n     }\n \n-    private void updateDefinition(final WorkflowAdapter adapter, final WorkflowDefinitionTO definition)\n-            throws NotFoundException, WorkflowException {\n-\n+    private void updateDefinition(final WorkflowAdapter adapter, final WorkflowDefinitionTO definition) {\n         adapter.updateDefinition(definition);\n \n         auditManager.audit(Category.workflow, WorkflowSubCategory.updateDefinition, Result.success,\n@@ -86,21 +83,17 @@ private void updateDefinition(final WorkflowAdapter adapter, final WorkflowDefin\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n     @RequestMapping(method = RequestMethod.PUT, value = \"/definition/user\")\n-    public void updateUserDefinition(@RequestBody final WorkflowDefinitionTO definition)\n-            throws NotFoundException, WorkflowException {\n-\n+    public void updateUserDefinition(@RequestBody final WorkflowDefinitionTO definition) {\n         updateDefinition(uwfAdapter, definition);\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n     @RequestMapping(method = RequestMethod.PUT, value = \"/definition/role\")\n-    public void updateRoleDefinition(@RequestBody final WorkflowDefinitionTO definition)\n-            throws NotFoundException, WorkflowException {\n-\n+    public void updateRoleDefinition(@RequestBody final WorkflowDefinitionTO definition) {\n         updateDefinition(rwfAdapter, definition);\n     }\n \n-    private List<String> getDefinedTasks(final WorkflowAdapter adapter) throws WorkflowException {\n+    private List<String> getDefinedTasks(final WorkflowAdapter adapter) {\n         List<String> definedTasks = adapter.getDefinedTasks();\n \n         auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinedTasks, Result.success,\n@@ -111,13 +104,13 @@ private List<String> getDefinedTasks(final WorkflowAdapter adapter) throws Workf\n \n     @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/tasks/user\")\n-    public ModelAndView getDefinedUserTasks() throws WorkflowException {\n+    public ModelAndView getDefinedUserTasks() {\n         return new ModelAndView().addObject(getDefinedTasks(uwfAdapter));\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/tasks/role\")\n-    public ModelAndView getDefinedRoleTasks() throws WorkflowException {\n+    public ModelAndView getDefinedRoleTasks() {\n         return new ModelAndView().addObject(getDefinedTasks(rwfAdapter));\n     }\n }"},{"sha":"438ab5380dd80083d9d7dbf2a0a9683a5e7b98fc","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -370,8 +370,7 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n \n     protected PropagationByResource fill(final AbstractAttributable attributable,\n             final AbstractAttributableMod attributableMod, final AttributableUtil attrUtil,\n-            final SyncopeClientCompositeErrorException scce)\n-            throws SyncopeClientCompositeErrorException {\n+            final SyncopeClientCompositeErrorException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n@@ -580,8 +579,7 @@ protected PropagationByResource fill(final AbstractAttributable attributable,\n             scce.addException(requiredValuesMissing);\n         }\n \n-        // Throw composite exception if there is at least one element set\n-        // in the composing exceptions\n+        // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n             throw scce;\n         }\n@@ -617,8 +615,7 @@ public void fillVirtual(final AbstractAttributable attributable, final List<Attr\n     }\n \n     protected void fill(final AbstractAttributable attributable, final AbstractAttributableTO attributableTO,\n-            final AttributableUtil attributableUtil, final SyncopeClientCompositeErrorException scce)\n-            throws SyncopeClientCompositeErrorException {\n+            final AttributableUtil attributableUtil, final SyncopeClientCompositeErrorException scce) {\n \n         // 1. attributes\n         SyncopeClientException invalidValues = new SyncopeClientException(SyncopeClientExceptionType.InvalidValues);"},{"sha":"e274ae46958419594d8f1ac93326a8debb075aee","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ConfigurationDataBinder.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConfigurationDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -25,8 +25,7 @@\n @Component\n public class ConfigurationDataBinder {\n \n-    public SyncopeConf createSyncopeConfiguration(final ConfigurationTO configurationTO) {\n-\n+    public SyncopeConf create(final ConfigurationTO configurationTO) {\n         SyncopeConf syncopeConfiguration = new SyncopeConf();\n         syncopeConfiguration.setKey(configurationTO.getKey());\n         syncopeConfiguration.setValue(configurationTO.getValue());\n@@ -35,7 +34,6 @@ public SyncopeConf createSyncopeConfiguration(final ConfigurationTO configuratio\n     }\n \n     public ConfigurationTO getConfigurationTO(final SyncopeConf syncopeConfiguration) {\n-\n         ConfigurationTO configurationTO = new ConfigurationTO();\n         configurationTO.setKey(syncopeConfiguration.getKey());\n         configurationTO.setValue(syncopeConfiguration.getValue());"},{"sha":"051091bafea9fa30a471579842257099b0bf9da6","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -40,7 +40,7 @@\n @Component\n public class ConnInstanceDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = {\"id\", \"resources\"};\n+    private static final String[] IGNORE_PROPERTIES = {\"id\"};\n \n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;"},{"sha":"2c03754b37dbb1cc2c73c5d71c4d5afbf75ba7b2","filename":"core/src/main/java/org/apache/syncope/core/rest/data/DerivedSchemaDataBinder.java","status":"modified","additions":15,"deletions":25,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FDerivedSchemaDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n-import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.util.JexlUtil;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -33,27 +32,24 @@\n @Component\n public class DerivedSchemaDataBinder {\n \n-    private static final String[] ignoreDerivedSchemaProperties = { \"schemas\", \"derivedAttributes\" };\n-\n     @Autowired\n     private JexlUtil jexlUtil;\n \n-    private <T extends AbstractSchema> AbstractDerSchema populate(final AbstractDerSchema derivedSchema,\n-            final DerivedSchemaTO derivedSchemaTO, final SyncopeClientCompositeErrorException scce)\n-            throws SyncopeClientCompositeErrorException {\n+    private AbstractDerSchema populate(final AbstractDerSchema derSchema, final DerivedSchemaTO derSchemaTO) {\n+        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n-        if (derivedSchemaTO.getExpression() == null) {\n+        if (derSchemaTO.getExpression() == null) {\n             SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n                     SyncopeClientExceptionType.RequiredValuesMissing);\n             requiredValuesMissing.addElement(\"expression\");\n \n             scce.addException(requiredValuesMissing);\n         }\n \n-        if (!jexlUtil.isExpressionValid(derivedSchemaTO.getExpression())) {\n+        if (!jexlUtil.isExpressionValid(derSchemaTO.getExpression())) {\n             SyncopeClientException invalidMandatoryCondition = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);\n-            invalidMandatoryCondition.addElement(derivedSchemaTO.getExpression());\n+            invalidMandatoryCondition.addElement(derSchemaTO.getExpression());\n \n             scce.addException(invalidMandatoryCondition);\n         }\n@@ -62,29 +58,23 @@ private <T extends AbstractSchema> AbstractDerSchema populate(final AbstractDerS\n             throw scce;\n         }\n \n-        BeanUtils.copyProperties(derivedSchemaTO, derivedSchema, ignoreDerivedSchemaProperties);\n+        BeanUtils.copyProperties(derSchemaTO, derSchema);\n \n-        return derivedSchema;\n+        return derSchema;\n     }\n \n-    public <T extends AbstractSchema> AbstractDerSchema create(final DerivedSchemaTO derivedSchemaTO,\n-            final AbstractDerSchema derivedSchema) {\n-\n-        return populate(derivedSchema, derivedSchemaTO,\n-                new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST));\n+    public AbstractDerSchema create(final DerivedSchemaTO derSchemaTO, final AbstractDerSchema derSchema) {\n+        return populate(derSchema, derSchemaTO);\n     }\n \n-    public AbstractDerSchema update(final DerivedSchemaTO derivedSchemaTO, final AbstractDerSchema derivedSchema) {\n-\n-        return populate(derivedSchema, derivedSchemaTO,\n-                new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST));\n+    public AbstractDerSchema update(final DerivedSchemaTO derSchemaTO, final AbstractDerSchema derSchema) {\n+        return populate(derSchema, derSchemaTO);\n     }\n \n-    public <T extends AbstractDerSchema> DerivedSchemaTO getDerivedSchemaTO(final T derivedSchema) {\n-\n-        DerivedSchemaTO derivedSchemaTO = new DerivedSchemaTO();\n-        BeanUtils.copyProperties(derivedSchema, derivedSchemaTO, ignoreDerivedSchemaProperties);\n+    public <T extends AbstractDerSchema> DerivedSchemaTO getDerivedSchemaTO(final T derSchema) {\n+        DerivedSchemaTO derSchemaTO = new DerivedSchemaTO();\n+        BeanUtils.copyProperties(derSchema, derSchemaTO);\n \n-        return derivedSchemaTO;\n+        return derSchemaTO;\n     }\n }"},{"sha":"5f426b08556195c460d58048c087377f48ecbd61","filename":"core/src/main/java/org/apache/syncope/core/rest/data/NotificationDataBinder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -41,7 +41,6 @@ public NotificationTO getNotificationTO(final Notification notification) {\n     }\n \n     public Notification createNotification(final NotificationTO notificationTO) {\n-\n         Notification result = new Notification();\n \n         updateNotification(result, notificationTO);\n@@ -50,7 +49,6 @@ public Notification createNotification(final NotificationTO notificationTO) {\n     }\n \n     public void updateNotification(final Notification notification, final NotificationTO notificationTO) {\n-\n         BeanUtils.copyProperties(notificationTO, notification, IGNORE_PROPERTIES);\n \n         notification.setAbout(notificationTO.getAbout());"},{"sha":"1aa8588254eee57a8a62554a6e4b933f29af30c5","filename":"core/src/main/java/org/apache/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":37,"deletions":34,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -18,12 +18,16 @@\n  */\n package org.apache.syncope.core.rest.data;\n \n+import static org.apache.syncope.common.types.PolicyType.GLOBAL_ACCOUNT;\n+import static org.apache.syncope.common.types.PolicyType.GLOBAL_PASSWORD;\n+import static org.apache.syncope.common.types.PolicyType.GLOBAL_SYNC;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n import org.apache.syncope.common.to.PolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.AccountPolicySpec;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n+import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.SyncPolicySpec;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n@@ -34,6 +38,22 @@\n @Component\n public class PolicyDataBinder {\n \n+    private boolean isGlobalPolicy(final PolicyType policyType) {\n+        boolean isGlobal;\n+        switch (policyType) {\n+            case GLOBAL_PASSWORD:\n+            case GLOBAL_ACCOUNT:\n+            case GLOBAL_SYNC:\n+                isGlobal = true;\n+                break;\n+\n+            default:\n+                isGlobal = false;\n+        }\n+\n+        return isGlobal;\n+    }\n+\n     /**\n      * Get policy TO from policy bean.\n      *\n@@ -44,23 +64,14 @@ public class PolicyDataBinder {\n     public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n         final PolicyTO policyTO;\n \n-        boolean isGlobal = Boolean.FALSE;\n-        switch (policy.getType()) {\n-            case GLOBAL_PASSWORD:\n-            case GLOBAL_ACCOUNT:\n-            case GLOBAL_SYNC:\n-                isGlobal = Boolean.TRUE;\n-                break;\n-\n-            default:\n-        }\n+        final boolean isGlobal = isGlobalPolicy(policy.getType());\n \n         switch (policy.getType()) {\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n                 if (!(policy.getSpecification() instanceof PasswordPolicySpec)) {\n-                    throw new ClassCastException(\"policy is expected to be typed PasswordPolicySpec: \" + policy.\n-                            getSpecification().getClass().getName());\n+                    throw new ClassCastException(\"Expected \" + PasswordPolicySpec.class.getName()\n+                            + \", found \" + policy.getSpecification().getClass().getName());\n                 }\n                 policyTO = new PasswordPolicyTO(isGlobal);\n                 ((PasswordPolicyTO) policyTO).setSpecification((PasswordPolicySpec) policy.getSpecification());\n@@ -69,8 +80,8 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n                 if (!(policy.getSpecification() instanceof AccountPolicySpec)) {\n-                    throw new ClassCastException(\"policy is expected to be typed AccountPolicySpec: \" + policy.\n-                            getSpecification().getClass().getName());\n+                    throw new ClassCastException(\"Expected \" + AccountPolicySpec.class.getName()\n+                            + \", found \" + policy.getSpecification().getClass().getName());\n                 }\n                 policyTO = new AccountPolicyTO(isGlobal);\n                 ((AccountPolicyTO) policyTO).setSpecification((AccountPolicySpec) policy.getSpecification());\n@@ -80,8 +91,9 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             case SYNC:\n             default:\n                 if (!(policy.getSpecification() instanceof SyncPolicySpec)) {\n-                    throw new ClassCastException(\"policy is expected to be typed SyncPolicySpec: \" + policy.\n-                            getSpecification().getClass().getName());\n+                    throw new ClassCastException(\"Expected \" + SyncPolicySpec.class.getName()\n+                            + \", found \" + policy.getSpecification().getClass().getName());\n+\n                 }\n                 policyTO = new SyncPolicyTO(isGlobal);\n                 ((SyncPolicyTO) policyTO).setSpecification((SyncPolicySpec) policy.getSpecification());\n@@ -96,27 +108,18 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n     @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> T getPolicy(T policy, final PolicyTO policyTO) {\n         if (policy != null && policy.getType() != policyTO.getType()) {\n-            throw new IllegalArgumentException(String.format(\"Cannot update %s from %s\", policy.getType(), policyTO.\n-                    getType()));\n+            throw new IllegalArgumentException(\n+                    String.format(\"Cannot update %s from %s\", policy.getType(), policyTO.getType()));\n         }\n \n-        boolean isGlobal = Boolean.FALSE;\n-        switch (policyTO.getType()) {\n-            case GLOBAL_PASSWORD:\n-            case GLOBAL_ACCOUNT:\n-            case GLOBAL_SYNC:\n-                isGlobal = Boolean.TRUE;\n-                break;\n-\n-            default:\n-        }\n+        final boolean isGlobal = isGlobalPolicy(policyTO.getType());\n \n         switch (policyTO.getType()) {\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n                 if (!(policyTO instanceof PasswordPolicyTO)) {\n-                    throw new ClassCastException(\"policyTO is expected to be typed PasswordPolicyTO: \" + policyTO.\n-                            getClass().getName());\n+                    throw new ClassCastException(\"Expected \" + PasswordPolicyTO.class.getName()\n+                            + \", found \" + policyTO.getClass().getName());\n                 }\n                 if (policy == null) {\n                     policy = (T) new PasswordPolicy(isGlobal);\n@@ -127,8 +130,8 @@ public <T extends Policy> T getPolicy(T policy, final PolicyTO policyTO) {\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n                 if (!(policyTO instanceof AccountPolicyTO)) {\n-                    throw new ClassCastException(\"policyTO is expected to be typed AccountPolicyTO: \" + policyTO.\n-                            getClass().getName());\n+                    throw new ClassCastException(\"Expected \" + AccountPolicyTO.class.getName()\n+                            + \", found \" + policyTO.getClass().getName());\n                 }\n                 if (policy == null) {\n                     policy = (T) new AccountPolicy(isGlobal);\n@@ -140,8 +143,8 @@ public <T extends Policy> T getPolicy(T policy, final PolicyTO policyTO) {\n             case SYNC:\n             default:\n                 if (!(policyTO instanceof SyncPolicyTO)) {\n-                    throw new ClassCastException(\"policyTO is expected to be typed SyncPolicyTO: \"\n-                            + policyTO.getClass().getName());\n+                    throw new ClassCastException(\"Expected \" + SyncPolicyTO.class.getName()\n+                            + \", found \" + policyTO.getClass().getName());\n                 }\n                 if (policy == null) {\n                     policy = (T) new SyncPolicy(isGlobal);"},{"sha":"662883220b1eb18aa52665942664a9446b782dd5","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ReportDataBinder.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.data;\n \n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n \n import org.apache.syncope.common.report.AbstractReportletConf;\n@@ -53,7 +52,7 @@ public class ReportDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ReportDataBinder.class);\n \n-    private static final String[] IGNORE_REPORT_PROPERTIES = {\"id\", \"reportlets\", \"executions\", \"latestExecStatus\"};\n+    private static final String[] IGNORE_REPORT_PROPERTIES = {\"id\", \"reportlets\", \"executions\"};\n \n     private static final String[] IGNORE_REPORT_EXECUTION_PROPERTIES = {\"id\", \"report\", \"execResult\"};\n \n@@ -66,7 +65,7 @@ public class ReportDataBinder {\n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     public Set<Class<Reportlet>> getAllReportletClasses() {\n         Set<Class<Reportlet>> reportletClasses = new HashSet<Class<Reportlet>>();\n \n@@ -156,7 +155,7 @@ public ReportTO getReportTO(final Report report) {\n         return reportTO;\n     }\n \n-    private void copyReportletConfs(Report report, ReportTO reportTO) {\n+    private void copyReportletConfs(final Report report, final ReportTO reportTO) {\n         reportTO.getReportletConfs().clear();\n         for (ReportletConf reportletConf : report.getReportletConfs()) {\n             reportTO.getReportletConfs().add((AbstractReportletConf) reportletConf);"},{"sha":"e45d15be1cf75e9d0e5118b9dd05052b8ee2b84a","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -75,15 +75,11 @@ public class ResourceDataBinder {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n-    public ExternalResource create(final ResourceTO resourceTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public ExternalResource create(final ResourceTO resourceTO) {\n         return update(new ExternalResource(), resourceTO);\n     }\n \n-    public ExternalResource update(final ExternalResource resource, final ResourceTO resourceTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public ExternalResource update(final ExternalResource resource, final ResourceTO resourceTO) {\n         if (resourceTO == null) {\n             return null;\n         }\n@@ -178,9 +174,7 @@ private Set<AbstractMappingItem> getMappingItems(final Collection<MappingItemTO>\n         return items;\n     }\n \n-    private AbstractMappingItem getMappingItem(final MappingItemTO itemTO, final AbstractMappingItem prototype)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    private AbstractMappingItem getMappingItem(final MappingItemTO itemTO, final AbstractMappingItem prototype) {\n         if (itemTO == null || itemTO.getIntMappingType() == null) {\n             LOG.error(\"Null mappingTO provided\");\n             return null;\n@@ -232,9 +226,7 @@ public ConnInstance getConnInstance(final ExternalResource resource) {\n         return getConnInstance(connInstanceClone, resource.getConfiguration());\n     }\n \n-    public ConnInstance getConnInstance(final ResourceTO resourceTO)\n-            throws NotFoundException {\n-\n+    public ConnInstance getConnInstance(final ResourceTO resourceTO) {\n         ConnInstance connInstance = connInstanceDAO.find(resourceTO.getConnectorId());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + resourceTO.getConnectorId() + \"'\");"},{"sha":"0dd6f2c98117dc3a2a2aa8446e01637bdf66a28b","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -58,9 +58,7 @@ public class RoleDataBinder extends AbstractAttributableDataBinder {\n     private EntitlementDAO entitlementDAO;\n \n     @Transactional(readOnly = true)\n-    public SyncopeRole getRoleFromId(final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public SyncopeRole getRoleFromId(final Long roleId) {\n         if (roleId == null) {\n             throw new NotFoundException(\"Null role id\");\n         }\n@@ -77,9 +75,7 @@ public SyncopeRole getRoleFromId(final Long roleId)\n         return role;\n     }\n \n-    public SyncopeRole create(final SyncopeRole role, final RoleTO roleTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public SyncopeRole create(final SyncopeRole role, final RoleTO roleTO) {\n         role.setInheritOwner(roleTO.isInheritOwner());\n \n         role.setInheritAttributes(roleTO.isInheritAttributes());\n@@ -164,9 +160,7 @@ public SyncopeRole create(final SyncopeRole role, final RoleTO roleTO)\n         return role;\n     }\n \n-    public PropagationByResource update(final SyncopeRole role, final RoleMod roleMod)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public PropagationByResource update(final SyncopeRole role, final RoleMod roleMod) {\n         PropagationByResource propByRes = new PropagationByResource();\n \n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n@@ -318,9 +312,7 @@ public RoleTO getRoleTO(final SyncopeRole role) {\n     }\n \n     @Transactional(readOnly = true)\n-    public RoleTO getRoleTO(final Long roleId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public RoleTO getRoleTO(final Long roleId) {\n         return getRoleTO(getRoleFromId(roleId));\n     }\n }"},{"sha":"9fe213dbeb684217419dcef1db3ab2c1dd4a8833","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -44,19 +44,16 @@ public class SchemaDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(SchemaDataBinder.class);\n \n-    private static final String[] IGNORE_SCHEMA_PROPERTIES = {\"derivedSchemas\", \"attributes\"};\n-\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n     @Autowired\n     private JexlUtil jexlUtil;\n \n-    private <T extends AbstractDerSchema> void populate(final AbstractSchema schema, final SchemaTO schemaTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    private <T extends AbstractDerSchema> void populate(final AbstractSchema schema, final SchemaTO schemaTO) {\n         if (!jexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException invalidMandatoryCondition = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);\n@@ -66,18 +63,14 @@ private <T extends AbstractDerSchema> void populate(final AbstractSchema schema,\n             throw scce;\n         }\n \n-        BeanUtils.copyProperties(schemaTO, schema, IGNORE_SCHEMA_PROPERTIES);\n+        BeanUtils.copyProperties(schemaTO, schema);\n     }\n \n-    public void create(final SchemaTO schemaTO, final AbstractSchema schema)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public void create(final SchemaTO schemaTO, final AbstractSchema schema) {\n         populate(schema, schemaTO);\n     }\n \n-    public void update(final SchemaTO schemaTO, final AbstractSchema schema, final AttributableUtil attributableUtil)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public void update(final SchemaTO schemaTO, final AbstractSchema schema, final AttributableUtil attributableUtil) {\n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n         List<AbstractAttr> attrs = schemaDAO.getAttributes(schema, attributableUtil.attrClass());\n@@ -106,9 +99,8 @@ public void update(final SchemaTO schemaTO, final AbstractSchema schema, final A\n     }\n \n     public <T extends AbstractSchema> SchemaTO getSchemaTO(final T schema, final AttributableUtil attributableUtil) {\n-\n         SchemaTO schemaTO = new SchemaTO();\n-        BeanUtils.copyProperties(schema, schemaTO, IGNORE_SCHEMA_PROPERTIES);\n+        BeanUtils.copyProperties(schema, schemaTO);\n \n         return schemaTO;\n     }"},{"sha":"efbfac71c80a9e6bce9e913201c26e6670a8ebad","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -64,7 +64,7 @@ public class TaskDataBinder {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    private static final String[] IGNORE_TASK_PROPERTIES = {\"latestExecStatus\", \"executions\", \"resource\",};\n+    private static final String[] IGNORE_TASK_PROPERTIES = {\"executions\", \"resource\",};\n \n     private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = {\"id\", \"task\"};\n \n@@ -143,9 +143,7 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n         task.setActionsClassName(taskTO.getActionsClassName());\n     }\n \n-    public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUtil)\n-            throws NotFoundException {\n-\n+    public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUtil) {\n         SchedTask task = taskUtil.newTask();\n         task.setCronExpression(taskTO.getCronExpression());\n         task.setName(taskTO.getName());"},{"sha":"87ea979a74fa1f078d0b5ba32f7996ffdffd348a","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":10,"deletions":27,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -72,9 +72,7 @@ public class UserDataBinder extends AbstractAttributableDataBinder {\n     private ConnObjectUtil connObjectUtil;\n \n     @Transactional(readOnly = true)\n-    public SyncopeUser getUserFromId(final Long userId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public SyncopeUser getUserFromId(final Long userId) {\n         if (userId == null) {\n             throw new NotFoundException(\"Null user id\");\n         }\n@@ -97,29 +95,23 @@ public SyncopeUser getUserFromId(final Long userId)\n     }\n \n     @Transactional(readOnly = true)\n-    public UserTO getAuthenticatedUserTO() throws NotFoundException {\n+    public UserTO getAuthenticatedUserTO() {\n         SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n         return getUserTO(authUser);\n     }\n \n     @Transactional(readOnly = true)\n-    public boolean verifyPassword(final String username, final String password)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public boolean verifyPassword(final String username, final String password) {\n         return verifyPassword(getUserFromUsername(username), password);\n     }\n \n     @Transactional(readOnly = true)\n-    public boolean verifyPassword(final SyncopeUser user, final String password)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public boolean verifyPassword(final SyncopeUser user, final String password) {\n         return PasswordEncoder.verify(password, user.getCipherAlgorithm(), user.getPassword());\n     }\n \n     @Transactional(readOnly = true)\n-    public SyncopeUser getUserFromUsername(final String username)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public SyncopeUser getUserFromUsername(final String username) {\n         if (username == null) {\n             throw new NotFoundException(\"Null username\");\n         }\n@@ -146,8 +138,7 @@ public SyncopeUser getUserFromUsername(final String username)\n      * @return cipher algorithm.\n      * @throws NotFoundException in case of algorithm not included into <code>CipherAlgorithm</code>.\n      */\n-    private CipherAlgorithm getPredefinedCipherAlgoritm()\n-            throws NotFoundException {\n+    private CipherAlgorithm getPredefinedCipherAlgoritm() {\n \n         final String algorithm = confDAO.find(\"password.cipher.algorithm\", \"AES\").getValue();\n \n@@ -158,9 +149,7 @@ private CipherAlgorithm getPredefinedCipherAlgoritm()\n         }\n     }\n \n-    public void create(final SyncopeUser user, final UserTO userTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public void create(final SyncopeUser user, final UserTO userTO) {\n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n         // memberships\n@@ -236,9 +225,7 @@ public void create(final SyncopeUser user, final UserTO userTO)\n      * @throws SyncopeClientCompositeErrorException if anything goes wrong\n      * @see PropagationByResource\n      */\n-    public PropagationByResource update(final SyncopeUser user, final UserMod userMod)\n-            throws SyncopeClientCompositeErrorException {\n-\n+    public PropagationByResource update(final SyncopeUser user, final UserMod userMod) {\n         PropagationByResource propByRes = new PropagationByResource();\n \n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n@@ -447,16 +434,12 @@ public UserTO getUserTO(final SyncopeUser user) {\n     }\n \n     @Transactional(readOnly = true)\n-    public UserTO getUserTO(final String username)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public UserTO getUserTO(final String username) {\n         return getUserTO(getUserFromUsername(username));\n     }\n \n     @Transactional(readOnly = true)\n-    public UserTO getUserTO(final Long userId)\n-            throws NotFoundException, UnauthorizedRoleException {\n-\n+    public UserTO getUserTO(final Long userId) {\n         return getUserTO(getUserFromId(userId));\n     }\n }"},{"sha":"5b0a9c97104ff3a7ad7be0ca7fbce484e473a066","filename":"core/src/main/java/org/apache/syncope/core/rest/data/VirtualSchemaDataBinder.java","status":"modified","additions":9,"deletions":31,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FVirtualSchemaDataBinder.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -19,52 +19,30 @@\n package org.apache.syncope.core.rest.data;\n \n import org.apache.syncope.common.to.VirtualSchemaTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n-import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n @Component\n public class VirtualSchemaDataBinder {\n \n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(VirtualSchemaDataBinder.class);\n+    private AbstractVirSchema populate(final AbstractVirSchema virSchema, final VirtualSchemaTO virSchemaTO) {\n+        BeanUtils.copyProperties(virSchemaTO, virSchema);\n \n-    private static final String[] ignoreVirtualSchemaProperties = { \"schemas\", \"virtualAttributes\" };\n-\n-    private <T extends AbstractSchema> AbstractVirSchema populate(AbstractVirSchema virtualSchema,\n-            final VirtualSchemaTO virtualSchemaTO, final Class<T> reference,\n-            final SyncopeClientCompositeErrorException scce) throws SyncopeClientCompositeErrorException {\n-\n-        BeanUtils.copyProperties(virtualSchemaTO, virtualSchema, ignoreVirtualSchemaProperties);\n-\n-        return virtualSchema;\n+        return virSchema;\n     }\n \n-    public <T extends AbstractSchema> AbstractVirSchema create(final VirtualSchemaTO virtualSchemaTO,\n-            AbstractVirSchema virtualSchema, final Class<T> reference) {\n-\n-        return populate(virtualSchema, virtualSchemaTO, reference, new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST));\n+    public AbstractVirSchema create(final VirtualSchemaTO virSchemaTO, final AbstractVirSchema virSchema) {\n+        return populate(virSchema, virSchemaTO);\n     }\n \n-    public <K extends AbstractSchema> AbstractVirSchema update(final VirtualSchemaTO virtualSchemaTO,\n-            AbstractVirSchema virtualSchema, final Class<K> reference) {\n-\n-        return populate(virtualSchema, virtualSchemaTO, reference, new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST));\n+    public AbstractVirSchema update(final VirtualSchemaTO virSchemaTO, final AbstractVirSchema virSchema) {\n+        return populate(virSchema, virSchemaTO);\n     }\n \n-    public <T extends AbstractVirSchema> VirtualSchemaTO getVirtualSchemaTO(final T virtualSchema) {\n-\n+    public <T extends AbstractVirSchema> VirtualSchemaTO getVirtualSchemaTO(final T virSchema) {\n         VirtualSchemaTO virtualSchemaTO = new VirtualSchemaTO();\n-        BeanUtils.copyProperties(virtualSchema, virtualSchemaTO, ignoreVirtualSchemaProperties);\n+        BeanUtils.copyProperties(virSchema, virtualSchemaTO);\n \n         return virtualSchemaTO;\n     }"},{"sha":"00b74d4fabb9928b95d75abef1586aa3cd74a038","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -20,7 +20,6 @@\n \r\n import java.io.IOException;\r\n import java.io.OutputStream;\r\n-import java.io.PrintStream;\r\n import java.net.URI;\r\n import java.util.List;\r\n import java.util.Set;\r\n@@ -53,26 +52,25 @@ public class ConfigurationServiceImpl implements ConfigurationService, ContextAw\n     public Response create(final ConfigurationTO configurationTO) {\r\n         ConfigurationTO created = configurationController.create(new DummyHTTPServletResponse(), configurationTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getKey()).build();\r\n+        return Response.created(location).\r\n+                header(SyncopeConstants.REST_HEADER_ID, created.getKey()).\r\n+                build();\r\n     }\r\n \r\n     @Override\r\n     public Response dbExport() {\r\n-    \tStreamingOutput sout = new StreamingOutput() {\r\n+        StreamingOutput sout = new StreamingOutput() {\r\n \r\n             @Override\r\n             public void write(final OutputStream os) throws IOException {\r\n-            \tPrintStream ps = new PrintStream(os);\r\n-            \tps.println(\"Test\");\r\n                 configurationController.dbExportInternal(os);\r\n             }\r\n         };\r\n         return Response.ok(sout)\r\n-        \t\t.type(MediaType.TEXT_XML)\r\n-        \t\t.header(SyncopeConstants.CONTENT_DISPOSITION_HEADER, \r\n-        \t\t\t\t\"attachment; filename=\" + ImportExport.CONTENT_FILE)\r\n-\r\n-        \t\t.build();\r\n+                .type(MediaType.TEXT_XML)\r\n+                .header(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\r\n+                \"attachment; filename=\" + ImportExport.CONTENT_FILE)\r\n+                .build();\r\n     }\r\n \r\n     @Override\r\n@@ -103,7 +101,7 @@ public ConfigurationTO read(final String key) {\n \r\n     @Override\r\n     public void update(final String key, final ConfigurationTO configurationTO) {\r\n-        configurationController.update(null, configurationTO);\r\n+        configurationController.update(configurationTO);\r\n     }\r\n \r\n     @Override\r"},{"sha":"9ff7f5b8d4cb739dbc839d4080d57a07780fcfb1","filename":"core/src/main/java/org/apache/syncope/core/services/ResourceServiceImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b20869adca2a043e3772b78eaefc4a71d6dbfca2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FResourceServiceImpl.java?ref=b20869adca2a043e3772b78eaefc4a71d6dbfca2","patch":"@@ -93,13 +93,11 @@ public ConnObjectTO getConnector(final String resourceName, final AttributableTy\n \r\n     @Override\r\n     public boolean check(final ResourceTO resourceTO) {\r\n-        return (Boolean) resourceController.check(new DummyHTTPServletResponse(), resourceTO).getModel().values()\r\n-                    .iterator().next();\r\n+        return (Boolean) resourceController.check(resourceTO).getModel().values().iterator().next();\r\n     }\r\n \r\n     @Override\r\n     public void setUriInfo(final UriInfo ui) {\r\n         this.uriInfo = ui;\r\n     }\r\n-\r\n }\r"}]}