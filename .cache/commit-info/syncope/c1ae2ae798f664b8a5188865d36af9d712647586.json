{"sha":"c1ae2ae798f664b8a5188865d36af9d712647586","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMxYWUyYWU3OThmNjY0YjhhNTE4ODg2NWQzNmFmOWQ3MTI2NDc1ODY=","commit":{"author":{"name":"DmitriyBrashevets","email":"47774349+DmitriyBrashevets@users.noreply.github.com","date":"2020-01-15T07:07:30Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2020-01-15T07:09:22Z"},"message":"[SYNCOPE-1533] added equals and hashCode methods for TOs (#157)","tree":{"sha":"72da6d34356b66ec6d59fd6b11f69d86c1dd432b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/72da6d34356b66ec6d59fd6b11f69d86c1dd432b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c1ae2ae798f664b8a5188865d36af9d712647586","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1ae2ae798f664b8a5188865d36af9d712647586","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c1ae2ae798f664b8a5188865d36af9d712647586","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c1ae2ae798f664b8a5188865d36af9d712647586/comments","author":{"login":"DmitriyBrashevets","id":47774349,"node_id":"MDQ6VXNlcjQ3Nzc0MzQ5","avatar_url":"https://avatars.githubusercontent.com/u/47774349?v=4","gravatar_id":"","url":"https://api.github.com/users/DmitriyBrashevets","html_url":"https://github.com/DmitriyBrashevets","followers_url":"https://api.github.com/users/DmitriyBrashevets/followers","following_url":"https://api.github.com/users/DmitriyBrashevets/following{/other_user}","gists_url":"https://api.github.com/users/DmitriyBrashevets/gists{/gist_id}","starred_url":"https://api.github.com/users/DmitriyBrashevets/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DmitriyBrashevets/subscriptions","organizations_url":"https://api.github.com/users/DmitriyBrashevets/orgs","repos_url":"https://api.github.com/users/DmitriyBrashevets/repos","events_url":"https://api.github.com/users/DmitriyBrashevets/events{/privacy}","received_events_url":"https://api.github.com/users/DmitriyBrashevets/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0b5c6d27ed020733674f29df318b12844f8cf173","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b5c6d27ed020733674f29df318b12844f8cf173","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0b5c6d27ed020733674f29df318b12844f8cf173"}],"stats":{"total":606,"additions":605,"deletions":1},"files":[{"sha":"b61d2b8a9020bcada80f14671c731c70c2a85e11","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceTO.java","status":"modified","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -30,6 +30,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n \n@@ -167,4 +169,45 @@ public void setPoolConf(final ConnPoolConfTO poolConf) {\n         this.poolConf = poolConf;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        ConnInstanceTO that = (ConnInstanceTO) o;\n+\n+        return new EqualsBuilder().\n+                append(key, that.key).\n+                append(adminRealm, that.adminRealm).\n+                append(location, that.location).\n+                append(connectorName, that.connectorName).\n+                append(bundleName, that.bundleName).\n+                append(version, that.version).\n+                append(conf, that.conf).\n+                append(capabilities, that.capabilities).\n+                append(displayName, that.displayName).\n+                append(connRequestTimeout, that.connRequestTimeout).\n+                append(poolConf, that.poolConf).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(adminRealm).\n+                append(location).\n+                append(connectorName).\n+                append(bundleName).\n+                append(version).\n+                append(conf).\n+                append(capabilities).\n+                append(displayName).\n+                append(connRequestTimeout).\n+                append(poolConf).\n+                toHashCode();\n+    }\n }"},{"sha":"176fde150bd137174847ba618adf1d4403dabd5e","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ConnPoolConfTO.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnPoolConfTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnPoolConfTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnPoolConfTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -21,6 +21,8 @@\n import java.io.Serializable;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @XmlRootElement(name = \"connPoolConf\")\n @XmlType\n@@ -78,4 +80,33 @@ public void setMinEvictableIdleTimeMillis(final Long minEvictableIdleTimeMillis)\n         this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        ConnPoolConfTO that = (ConnPoolConfTO) o;\n+\n+        return new EqualsBuilder().\n+                append(maxObjects, that.maxObjects).\n+                append(minIdle, that.minIdle).\n+                append(maxIdle, that.maxIdle).\n+                append(maxWait, that.maxWait).\n+                append(minEvictableIdleTimeMillis, that.minEvictableIdleTimeMillis).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(maxObjects).\n+                append(minIdle).\n+                append(maxIdle).\n+                append(maxWait).\n+                append(minEvictableIdleTimeMillis).\n+                toHashCode();\n+    }\n }"},{"sha":"54be5d9d9f5bffacde0a33e442ba241eb35f38c7","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -28,6 +28,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @XmlRootElement(name = \"mapping\")\n @XmlType\n@@ -91,4 +93,30 @@ public boolean remove(final ItemTO item) {\n     public List<ItemTO> getLinkingItems() {\n         return linkingItems;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        MappingTO mappingTO = (MappingTO) o;\n+\n+        return new EqualsBuilder().\n+                append(connObjectLink, mappingTO.connObjectLink).\n+                append(items, mappingTO.items).\n+                append(linkingItems, mappingTO.linkingItems).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(connObjectLink).\n+                append(items).\n+                append(linkingItems).\n+                toHashCode();\n+    }\n }"},{"sha":"8580165aacc90b56ec785f0a778380e54d1924eb","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -27,6 +27,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @XmlRootElement(name = \"orgUnit\")\n @XmlType\n@@ -123,4 +125,36 @@ public boolean add(final ItemTO item) {\n     public boolean remove(final ItemTO item) {\n         return this.items.remove(item);\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        OrgUnitTO orgUnitTO = (OrgUnitTO) o;\n+\n+        return new EqualsBuilder().\n+                append(ignoreCaseMatch, orgUnitTO.ignoreCaseMatch).\n+                append(key, orgUnitTO.key).\n+                append(objectClass, orgUnitTO.objectClass).\n+                append(syncToken, orgUnitTO.syncToken).\n+                append(connObjectLink, orgUnitTO.connObjectLink).\n+                append(items, orgUnitTO.items).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(objectClass).\n+                append(syncToken).\n+                append(ignoreCaseMatch).\n+                append(connObjectLink).\n+                append(items).\n+                toHashCode();\n+    }\n }"},{"sha":"af76faf80fc6d4fefe1fca797a5439e79f8a3e8c","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisionTO.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -25,6 +25,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @XmlRootElement(name = \"provision\")\n @XmlType\n@@ -122,4 +124,41 @@ public List<String> getVirSchemas() {\n         return virSchemas;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        ProvisionTO that = (ProvisionTO) o;\n+\n+        return new EqualsBuilder().\n+                append(ignoreCaseMatch, that.ignoreCaseMatch).\n+                append(key, that.key).\n+                append(anyType, that.anyType).\n+                append(objectClass, that.objectClass).\n+                append(auxClasses, that.auxClasses).\n+                append(syncToken, that.syncToken).\n+                append(uidOnCreate, that.uidOnCreate).\n+                append(mapping, that.mapping).\n+                append(virSchemas, that.virSchemas).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(anyType).\n+                append(objectClass).\n+                append(auxClasses).\n+                append(syncToken).\n+                append(ignoreCaseMatch).\n+                append(uidOnCreate).\n+                append(mapping).\n+                append(virSchemas).\n+                toHashCode();\n+    }\n }"},{"sha":"4e05d84f2f4ead341d0617b24f69541257bcb82b","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -30,6 +30,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -251,4 +253,64 @@ public void setProvisioningTraceLevel(final TraceLevel provisioningTraceLevel) {\n     public List<String> getPropagationActions() {\n         return propagationActions;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        ResourceTO that = (ResourceTO) o;\n+\n+        return new EqualsBuilder().\n+                append(randomPwdIfNotProvided, that.randomPwdIfNotProvided).\n+                append(enforceMandatoryCondition, that.enforceMandatoryCondition).\n+                append(overrideCapabilities, that.overrideCapabilities).\n+                append(key, that.key).\n+                append(connector, that.connector).\n+                append(connectorDisplayName, that.connectorDisplayName).\n+                append(provisions, that.provisions).\n+                append(orgUnit, that.orgUnit).\n+                append(propagationPriority, that.propagationPriority).\n+                append(createTraceLevel, that.createTraceLevel).\n+                append(updateTraceLevel, that.updateTraceLevel).\n+                append(deleteTraceLevel, that.deleteTraceLevel).\n+                append(provisioningTraceLevel, that.provisioningTraceLevel).\n+                append(passwordPolicy, that.passwordPolicy).\n+                append(accountPolicy, that.accountPolicy).\n+                append(pullPolicy, that.pullPolicy).\n+                append(pushPolicy, that.pushPolicy).\n+                append(confOverride, that.confOverride).\n+                append(capabilitiesOverride, that.capabilitiesOverride).\n+                append(propagationActions, that.propagationActions).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(connector).\n+                append(connectorDisplayName).\n+                append(provisions).\n+                append(orgUnit).\n+                append(propagationPriority).\n+                append(randomPwdIfNotProvided).\n+                append(enforceMandatoryCondition).\n+                append(createTraceLevel).\n+                append(updateTraceLevel).\n+                append(deleteTraceLevel).\n+                append(provisioningTraceLevel).\n+                append(passwordPolicy).\n+                append(accountPolicy).\n+                append(pullPolicy).\n+                append(pushPolicy).\n+                append(confOverride).\n+                append(overrideCapabilities).\n+                append(capabilitiesOverride).\n+                append(propagationActions).\n+                toHashCode();\n+    }\n }"},{"sha":"64e908222f483e7c0e5d8a1cd3866fb9f36d6f15","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"modified","additions":31,"deletions":1,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -19,14 +19,16 @@\n package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n-import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @XmlRootElement(name = \"passwordPolicy\")\n @XmlType\n@@ -72,4 +74,32 @@ public void setHistoryLength(final int historyLength) {\n     public List<String> getRules() {\n         return rules;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        PasswordPolicyTO that = (PasswordPolicyTO) o;\n+\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(o)).\n+                append(allowNullPassword, that.allowNullPassword).\n+                append(historyLength, that.historyLength).\n+                append(rules, that.rules).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(allowNullPassword).\n+                append(historyLength).\n+                append(rules).\n+                toHashCode();\n+    }\n }"},{"sha":"43f8113924c0cbc38fd5fed2ebd250122e3b1836","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/PolicyTO.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -31,6 +31,8 @@\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.to.EntityTO;\n \n @XmlRootElement(name = \"policy\")\n@@ -102,4 +104,33 @@ public List<String> getUsedByRealms() {\n         return usedByRealms;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        PolicyTO policyTO = (PolicyTO) o;\n+\n+        return new EqualsBuilder().\n+                append(discriminator, policyTO.discriminator).\n+                append(key, policyTO.key).\n+                append(description, policyTO.description).\n+                append(usedByResources, policyTO.usedByResources).\n+                append(usedByRealms, policyTO.usedByRealms).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(discriminator).\n+                append(key).\n+                append(description).\n+                append(usedByResources).\n+                append(usedByRealms).\n+                toHashCode();\n+    }\n }"},{"sha":"17da308e08352187f90a72c927581bc1da5a190c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AccessTokenTO.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -23,6 +23,8 @@\n \n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.BaseBean;\n \n @XmlRootElement(name = \"accessToken\")\n@@ -72,4 +74,32 @@ public String getOwner() {\n     public void setOwner(final String owner) {\n         this.owner = owner;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        AccessTokenTO that = (AccessTokenTO) o;\n+\n+        return new EqualsBuilder().\n+                append(key, that.key).\n+                append(body, that.body).\n+                append(expiryTime, that.expiryTime).\n+                append(owner, that.owner).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(body).\n+                append(expiryTime).\n+                append(owner).\n+                toHashCode();\n+    }\n }"},{"sha":"2188b9f54a7e65083788aff6d0e416a8450ee799","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTypeTO.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTypeTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -26,6 +26,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"anyType\")\n@@ -66,4 +68,29 @@ public List<String> getClasses() {\n         return classes;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        AnyTypeTO anyTypeTO = (AnyTypeTO) o;\n+\n+        return new EqualsBuilder().\n+                append(key, anyTypeTO.key).\n+                append(kind, anyTypeTO.kind).\n+                append(classes, anyTypeTO.classes).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(kind).\n+                append(classes).\n+                toHashCode();\n+    }\n }"},{"sha":"e8f4013836cafbb0585af6050fbf369cdd572312","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/ItemTO.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FItemTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -25,6 +25,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n \n @XmlRootElement(name = \"item\")\n@@ -158,4 +160,44 @@ public void setPullJEXLTransformer(final String pullJEXLTransformer) {\n     public List<String> getTransformers() {\n         return transformers;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        ItemTO itemTO = (ItemTO) o;\n+\n+        return new EqualsBuilder().\n+                append(connObjectKey, itemTO.connObjectKey).\n+                append(password, itemTO.password).\n+                append(key, itemTO.key).\n+                append(intAttrName, itemTO.intAttrName).\n+                append(extAttrName, itemTO.extAttrName).\n+                append(mandatoryCondition, itemTO.mandatoryCondition).\n+                append(purpose, itemTO.purpose).\n+                append(propagationJEXLTransformer, itemTO.propagationJEXLTransformer).\n+                append(pullJEXLTransformer, itemTO.pullJEXLTransformer).\n+                append(transformers, itemTO.transformers).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(intAttrName).\n+                append(extAttrName).\n+                append(connObjectKey).\n+                append(password).\n+                append(mandatoryCondition).\n+                append(purpose).\n+                append(propagationJEXLTransformer).\n+                append(pullJEXLTransformer).\n+                append(transformers).\n+                toHashCode();\n+    }\n }"},{"sha":"3a96d5006a04fa5ed11d64de3d6cadc47b54eed1","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/MailTemplateTO.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMailTemplateTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMailTemplateTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMailTemplateTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -21,6 +21,8 @@\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @XmlRootElement(name = \"mailTemplate\")\n @XmlType\n@@ -40,4 +42,26 @@ public String getKey() {\n     public void setKey(final String key) {\n         this.key = key;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        MailTemplateTO that = (MailTemplateTO) o;\n+\n+        return new EqualsBuilder().\n+                append(key, that.key).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                toHashCode();\n+    }\n }"},{"sha":"d878130656f6c98ebb818c9fd283a04b0880ac2e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -31,6 +31,8 @@\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"realm\")\n@@ -131,4 +133,41 @@ public Set<String> getResources() {\n         return resources;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        RealmTO realmTO = (RealmTO) o;\n+\n+        return new EqualsBuilder().\n+                append(key, realmTO.key).\n+                append(name, realmTO.name).\n+                append(parent, realmTO.parent).\n+                append(fullPath, realmTO.fullPath).\n+                append(accountPolicy, realmTO.accountPolicy).\n+                append(passwordPolicy, realmTO.passwordPolicy).\n+                append(actions, realmTO.actions).\n+                append(templates, realmTO.templates).\n+                append(resources, realmTO.resources).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(name).\n+                append(parent).\n+                append(fullPath).\n+                append(accountPolicy).\n+                append(passwordPolicy).\n+                append(actions).\n+                append(templates).\n+                append(resources).\n+                toHashCode();\n+    }\n }"},{"sha":"90941b7dff291969c62f8c4457fe34c50b24a61e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -28,6 +28,8 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n @XmlRootElement(name = \"role\")\n @XmlType\n@@ -94,4 +96,35 @@ public Set<String> getPrivileges() {\n         return privileges;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        RoleTO roleTO = (RoleTO) o;\n+\n+        return new EqualsBuilder().\n+                append(key, roleTO.key).\n+                append(entitlements, roleTO.entitlements).\n+                append(realms, roleTO.realms).\n+                append(dynRealms, roleTO.dynRealms).\n+                append(dynMembershipCond, roleTO.dynMembershipCond).\n+                append(privileges, roleTO.privileges).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(key).\n+                append(entitlements).\n+                append(realms).\n+                append(dynRealms).\n+                append(dynMembershipCond).\n+                append(privileges).\n+                toHashCode();\n+    }\n }"},{"sha":"358e4b05b903a558fc8ede061e5027b4b81a26a5","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AbstractQuery.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractQuery.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -24,6 +24,8 @@\n import javax.validation.constraints.Min;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.QueryParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n public abstract class AbstractQuery implements Serializable {\n@@ -108,4 +110,30 @@ public String getOrderBy() {\n     public void setOrderBy(final String orderBy) {\n         this.orderBy = orderBy;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        AbstractQuery that = (AbstractQuery) o;\n+\n+        return new EqualsBuilder().\n+                append(page, that.page).\n+                append(size, that.size).\n+                append(orderBy, that.orderBy).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(page).\n+                append(size).\n+                append(orderBy).\n+                toHashCode();\n+    }\n }"},{"sha":"efa24936a55bd643b46895ba33628fb7087f9095","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AnyQuery.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAnyQuery.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -23,6 +23,8 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.QueryParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n@@ -105,4 +107,32 @@ public String getFiql() {\n     public void setFiql(final String fiql) {\n         this.fiql = fiql;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        AnyQuery anyQuery = (AnyQuery) o;\n+\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(o)).\n+                append(realm, anyQuery.realm).\n+                append(details, anyQuery.details).\n+                append(fiql, anyQuery.fiql).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(realm).\n+                append(details).\n+                append(fiql).\n+                toHashCode();\n+    }\n }"},{"sha":"7c14a0a0ea2d1b9212324a0455df5eb0c69f9050","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecQuery.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecQuery.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -20,6 +20,8 @@\n \n import javax.validation.constraints.NotNull;\n import javax.ws.rs.PathParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n \n public class ExecQuery extends AbstractQuery {\n \n@@ -49,4 +51,28 @@ public String getKey() {\n     public void setKey(final String key) {\n         this.key = key;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        ExecQuery execQuery = (ExecQuery) o;\n+\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(o)).\n+                append(key, execQuery.key).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(key).\n+                toHashCode();\n+    }\n }"},{"sha":"ff0b9db4c389a10a45053ca3c94ae7a560b5597b","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c1ae2ae798f664b8a5188865d36af9d712647586/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=c1ae2ae798f664b8a5188865d36af9d712647586","patch":"@@ -25,6 +25,8 @@\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.types.SchemaType;\n \n public class SchemaQuery implements Serializable {\n@@ -105,4 +107,29 @@ public void setKeyword(final String keyword) {\n         this.keyword = keyword;\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+\n+        SchemaQuery that = (SchemaQuery) o;\n+\n+        return new EqualsBuilder().\n+                append(type, that.type).\n+                append(anyTypeClasses, that.anyTypeClasses).\n+                append(keyword, that.keyword).\n+                isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(type).\n+                append(anyTypeClasses).\n+                append(keyword).\n+                toHashCode();\n+    }\n }"}]}