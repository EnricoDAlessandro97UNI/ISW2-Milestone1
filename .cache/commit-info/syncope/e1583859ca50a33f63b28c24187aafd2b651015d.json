{"sha":"e1583859ca50a33f63b28c24187aafd2b651015d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUxNTgzODU5Y2E1MGEzM2Y2M2IyOGMyNDE4N2FhZmQyYjY1MTAxNWQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-24T12:37:45Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-24T12:37:45Z"},"message":"(Fixes issue #7)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246242 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c4152fc6288906e2abb999bdd30b682722fe8e1a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c4152fc6288906e2abb999bdd30b682722fe8e1a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e1583859ca50a33f63b28c24187aafd2b651015d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e1583859ca50a33f63b28c24187aafd2b651015d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e1583859ca50a33f63b28c24187aafd2b651015d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e1583859ca50a33f63b28c24187aafd2b651015d/comments","author":null,"committer":null,"parents":[{"sha":"165d0cde0acdac435bd5af75a2a0ee1f5b3d9b5f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/165d0cde0acdac435bd5af75a2a0ee1f5b3d9b5f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/165d0cde0acdac435bd5af75a2a0ee1f5b3d9b5f"}],"stats":{"total":1043,"additions":635,"deletions":408},"files":[{"sha":"50199a68fd162c7a1e79bf13abd8fe3a68489d00","filename":"core/pom.xml","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -332,7 +332,7 @@\n                                 <include>**/*Test.java</include>\n                             </includes>\n                             <excludes>\n-                                <exclude>**/*RelationshipTest.java</exclude>\n+                                <exclude>**/relationships/**Test.java</exclude>\n                             </excludes>\n                         </configuration>\n                     </execution>\n@@ -345,7 +345,7 @@\n                         <configuration>\n                             <skip>false</skip>\n                             <includes>\n-                                <include>**/*RelationshipTest.java</include>\n+                                <include>**/relationships/**Test.java</include>\n                             </includes>\n                         </configuration>\n                     </execution>\n@@ -391,12 +391,6 @@\n                 <groupId>org.codehaus.mojo</groupId>\n                 <artifactId>failsafe-maven-plugin</artifactId>\n                 <executions>\n-                    <execution>\n-                        <id>integration-test</id>\n-                        <goals>\n-                            <goal>integration-test</goal>\n-                        </goals>\n-                    </execution>\n                     <execution>\n                         <id>verify</id>\n                         <goals>"},{"sha":"958913afe450b509b89f34c0055b603e25c30afe","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -32,15 +32,37 @@ public <T extends AbstractAttribute> T getAttribute(String schemaName)\n                 result == null && itor.hasNext();) {\n \n             attribute = (T) itor.next();\n+            if (attribute.getSchema() != null\n+                    && schemaName.equals(attribute.getSchema().getName())) {\n \n-            if (schemaName.equals(attribute.getSchema().getName())) {\n                 result = attribute;\n             }\n         }\n \n         return result;\n     }\n \n+    public <T extends AbstractDerivedAttribute> T getDerivedAttribute(\n+            String derivedSchemaName) throws NoSuchElementException {\n+\n+        T result = null;\n+        T derivedAttribute = null;\n+        for (Iterator<? extends AbstractDerivedAttribute> itor =\n+                getDerivedAttributes().iterator();\n+                result == null && itor.hasNext();) {\n+\n+            derivedAttribute = (T) itor.next();\n+            if (derivedAttribute.getDerivedSchema() != null\n+                    && derivedSchemaName.equals(\n+                    derivedAttribute.getDerivedSchema().getName())) {\n+\n+                result = derivedAttribute;\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     public abstract <T extends AbstractAttribute> boolean addAttribute(T attribute);\n \n     public abstract <T extends AbstractAttribute> boolean removeAttribute(T attribute);"},{"sha":"39e8c3a19c64e758ec8a24aa728d94db779f61b8","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":20,"deletions":4,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -16,13 +16,12 @@\n \n import java.beans.PropertyDescriptor;\n import java.io.Serializable;\n+import java.lang.reflect.Method;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n import org.apache.commons.lang.builder.EqualsBuilder;\n import org.apache.commons.lang.builder.HashCodeBuilder;\n-import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang.builder.ToStringStyle;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -60,7 +59,24 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this,\n-                ToStringStyle.MULTI_LINE_STYLE);\n+        Method method = BeanUtils.findMethod(getClass(), \"getId\");\n+        if (method == null) {\n+            method = BeanUtils.findMethod(getClass(), \"getName\");\n+        }\n+\n+        StringBuffer result = new StringBuffer().append(\n+                getClass().getSimpleName()).append(\"[\");\n+        if (method != null) {\n+            try {\n+                result.append(method.invoke(this));\n+            } catch (Exception e) {\n+                if (log.isDebugEnabled()) {\n+                    log.error(\"While serializing to string\", e);\n+                }\n+            }\n+        }\n+        result.append(\"]\");\n+\n+        return result.toString();\n     }\n }"},{"sha":"ab7789c6d1c2663b7e0e611a6b09c903bd63a750","filename":"core/src/main/java/org/syncope/core/persistence/beans/Entitlement.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -48,6 +48,14 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n+    public boolean addRole(SyncopeRole role) {\n+        return roles.add(role);\n+    }\n+\n+    public boolean removeRole(SyncopeRole role) {\n+        return roles.remove(role);\n+    }\n+\n     public Set<SyncopeRole> getRoles() {\n         return roles;\n     }"},{"sha":"7297c6967f843df10c3f9d105583746c4b484024","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleAttribute.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -30,9 +30,9 @@\n @Entity\n public class RoleAttribute extends AbstractAttribute {\n \n-    @ManyToOne\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeRole owner;\n-    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private RoleSchema schema;\n     @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"attribute\")"},{"sha":"caa7e52737d29b73a185e8af652d39f3e4b69fa0","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleDerivedSchema.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleDerivedSchema.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -20,8 +20,6 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n-import org.hibernate.annotations.Cascade;\n-import org.hibernate.annotations.CascadeType;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -31,9 +29,7 @@ public class RoleDerivedSchema extends AbstractDerivedSchema {\n \n     @ManyToMany\n     private Set<RoleSchema> schemas;\n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"derivedSchema\")\n-    @Cascade(CascadeType.DELETE_ORPHAN)\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"derivedSchema\")\n     private Set<RoleDerivedAttribute> derivedAttributes;\n \n     public RoleDerivedSchema() {"},{"sha":"334a5ec2f34cbd99bef4f6a39f89320edec73a8d","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleSchema.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleSchema.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -20,18 +20,14 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n-import org.hibernate.annotations.Cascade;\n-import org.hibernate.annotations.CascadeType;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n public class RoleSchema extends AbstractSchema {\n \n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"schema\")\n-    @Cascade(CascadeType.DELETE_ORPHAN)\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n     Set<RoleAttribute> attributes;\n     @ManyToMany(mappedBy = \"schemas\")\n     Set<RoleDerivedSchema> derivedSchemas;"},{"sha":"30769f02189ba0255400f8b42231494fc4aeeec0","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,6 +17,7 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import java.util.HashSet;\n import java.util.Set;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n@@ -26,8 +27,6 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n-import org.hibernate.annotations.Cascade;\n-import org.hibernate.annotations.CascadeType;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n@@ -43,18 +42,15 @@ public class SyncopeRole extends AbstractAttributable {\n     private Long id;\n     private String name;\n     private String parent;\n-    @ManyToMany(cascade = javax.persistence.CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"roles\")\n+    @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"roles\")\n     private Set<SyncopeUser> users;\n     @ManyToMany(fetch = FetchType.LAZY)\n     private Set<Entitlement> entitlements;\n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    @Cascade(CascadeType.DELETE_ORPHAN)\n     private Set<RoleAttribute> attributes;\n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    @Cascade(CascadeType.DELETE_ORPHAN)\n     private Set<RoleDerivedAttribute> derivedAttributes;\n \n     public SyncopeRole() {"},{"sha":"28fe8ac0970ea05d4164a6fd3196ec19e07b6dbb","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -16,6 +16,7 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n@@ -24,8 +25,6 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.Transient;\n-import org.hibernate.annotations.Cascade;\n-import org.hibernate.annotations.CascadeType;\n import org.jasypt.util.password.PasswordEncryptor;\n import org.jasypt.util.password.StrongPasswordEncryptor;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n@@ -45,13 +44,11 @@ public class SyncopeUser extends AbstractAttributable {\n     private String password;\n     @ManyToMany(fetch = FetchType.EAGER)\n     private Set<SyncopeRole> roles;\n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    @Cascade(CascadeType.DELETE_ORPHAN)\n     private Set<UserAttribute> attributes;\n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n+    @OneToMany(cascade = CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"owner\")\n-    @Cascade(CascadeType.DELETE_ORPHAN)\n     private Set<UserDerivedAttribute> derivedAttributes;\n \n     public SyncopeUser() {"},{"sha":"5406e8764e178358c960cdf601188d60943b42b2","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttribute.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -30,9 +30,9 @@\n @Entity\n public class UserAttribute extends AbstractAttribute {\n \n-    @ManyToOne\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private SyncopeUser owner;\n-    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private UserSchema schema;\n     @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n     fetch = FetchType.EAGER, mappedBy = \"attribute\")"},{"sha":"ee2b97947400178a773fea2d8af699d4e16fb045","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserDerivedAttribute.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedAttribute.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -26,7 +26,7 @@ public class UserDerivedAttribute extends AbstractDerivedAttribute {\n \n     @ManyToOne\n     private SyncopeUser owner;\n-    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     UserDerivedSchema derivedSchema;\n \n     @Override"},{"sha":"fd56d23ae375f33e0794cf931ea97597c2ec86aa","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserDerivedSchema.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserDerivedSchema.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -20,8 +20,6 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n-import org.hibernate.annotations.Cascade;\n-import org.hibernate.annotations.CascadeType;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -31,9 +29,7 @@ public class UserDerivedSchema extends AbstractDerivedSchema {\n \n     @ManyToMany\n     private Set<UserSchema> schemas;\n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"derivedSchema\")\n-    @Cascade(CascadeType.DELETE_ORPHAN)\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"derivedSchema\")\n     private Set<UserDerivedAttribute> derivedAttributes;\n \n     public UserDerivedSchema() {"},{"sha":"762426dbfc52f7af2c07b9f50713408fe6e450ec","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserSchema.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserSchema.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -20,18 +20,14 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n-import org.hibernate.annotations.Cascade;\n-import org.hibernate.annotations.CascadeType;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n @Entity\n public class UserSchema extends AbstractSchema {\n \n-    @OneToMany(cascade = javax.persistence.CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"schema\")\n-    @Cascade(CascadeType.DELETE_ORPHAN)\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"schema\")\n     Set<UserAttribute> attributes;\n     @ManyToMany(mappedBy = \"schemas\")\n     Set<UserDerivedSchema> derivedSchemas;"},{"sha":"d040970a29f2a44745055822e607929801fcf570","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n \n-public interface AttributeDAO {\n+public interface AttributeDAO extends DAO {\n \n     <T extends AbstractAttribute> T find(Long id, Class<T> reference);\n \n@@ -26,4 +26,6 @@ public interface AttributeDAO {\n     <T extends AbstractAttribute> T save(T attribute);\n \n     <T extends AbstractAttribute> void delete(Long id, Class<T> reference);\n+\n+    <T extends AbstractAttribute> void delete(T attribute);\n }"},{"sha":"9744045dee39f0639d92e95f437b7caa37090551","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeValueDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n-public interface AttributeValueDAO {\n+public interface AttributeValueDAO extends DAO {\n \n     <T extends AbstractAttributeValue> T find(Long id, Class<T> reference);\n "},{"sha":"3e93a2e28935c288c2078fcfcab41b68b1fe83ce","filename":"core/src/main/java/org/syncope/core/persistence/dao/ConnectorInstanceDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorInstanceDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.ConnectorInstance;\n \n-public interface ConnectorInstanceDAO {\n+public interface ConnectorInstanceDAO extends DAO {\n \n     ConnectorInstance find(Long id);\n "},{"sha":"659bdf18f527575da8e0fbe1bcb7c49019cdbedc","filename":"core/src/main/java/org/syncope/core/persistence/dao/DAO.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -0,0 +1,22 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import javax.persistence.EntityManager;\n+\n+public interface DAO {\n+\n+    EntityManager getEntityManager();\n+}"},{"sha":"280a0cd7c4897f19957bda49e21cb66e6c3b0c2e","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedAttributeDAO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedAttributeDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,13 +17,15 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n \n-public interface DerivedAttributeDAO {\n+public interface DerivedAttributeDAO extends DAO {\n \n     <T extends AbstractDerivedAttribute> T find(Long id, Class<T> reference);\n \n     <T extends AbstractDerivedAttribute> List<T> findAll(Class<T> reference);\n \n-    <T extends AbstractDerivedAttribute> T save(AbstractDerivedAttribute attribute);\n+    <T extends AbstractDerivedAttribute> T save(T derivedAttribute);\n \n     <T extends AbstractDerivedAttribute> void delete(Long id, Class<T> reference);\n+\n+    <T extends AbstractDerivedAttribute> void delete(T derivedAttribute);\n }"},{"sha":"091d3019bee23ee724de78f2388e2f82eb08cd7b","filename":"core/src/main/java/org/syncope/core/persistence/dao/DerivedSchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDerivedSchemaDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n \n-public interface DerivedSchemaDAO {\n+public interface DerivedSchemaDAO extends DAO {\n \n     <T extends AbstractDerivedSchema> T find(String name, Class<T> reference);\n "},{"sha":"f9912c0af949c73307603f085b6f96344baf43b0","filename":"core/src/main/java/org/syncope/core/persistence/dao/EntitlementDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.Entitlement;\n \n-public interface EntitlementDAO {\n+public interface EntitlementDAO extends DAO {\n \n     Entitlement find(String name);\n "},{"sha":"4e2040421e8a1469826ae0e60c5d55ff942df696","filename":"core/src/main/java/org/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.AbstractSchema;\n \n-public interface SchemaDAO {\n+public interface SchemaDAO extends DAO {\n \n     <T extends AbstractSchema> T find(String name, Class<T> reference);\n "},{"sha":"23f114b879779d2e51c02f389b0c6e62376b405f","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeRoleDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeRoleDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n \n-public interface SyncopeRoleDAO {\n+public interface SyncopeRoleDAO extends DAO {\n \n     SyncopeRole find(String name, String parent);\n "},{"sha":"23d4923d10eaf95d5b260035fde6b445af67d57d","filename":"core/src/main/java/org/syncope/core/persistence/dao/SyncopeUserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSyncopeUserDAO.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,7 @@\n import java.util.List;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n-public interface SyncopeUserDAO {\n+public interface SyncopeUserDAO extends DAO {\n \n     SyncopeUser find(Long id);\n "},{"sha":"32c3ea6b3962e16f7a6383b448f6b7be3ec06a2f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":3,"deletions":19,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -15,35 +15,19 @@\n package org.syncope.core.persistence.dao.impl;\n \n import javax.persistence.EntityManager;\n-import javax.persistence.EntityNotFoundException;\n import javax.persistence.PersistenceContext;\n import javax.persistence.PersistenceContextType;\n import org.springframework.beans.factory.annotation.Configurable;\n+import org.syncope.core.persistence.dao.DAO;\n \n @Configurable\n-public abstract class AbstractDAOImpl {\n+public abstract class AbstractDAOImpl implements DAO {\n \n     @PersistenceContext(type = PersistenceContextType.EXTENDED)\n     protected EntityManager entityManager;\n \n+    @Override\n     public EntityManager getEntityManager() {\n         return entityManager;\n     }\n-\n-    public void setEntityManager(EntityManager entityManager) {\n-        this.entityManager = entityManager;\n-    }\n-\n-    protected boolean isDeletedOrNotManaged(Object entity) {\n-        boolean entityDeletedOrNotManaged = false;\n-        try {\n-            entityManager.refresh(entity);\n-        } catch (IllegalArgumentException iae) {\n-            entityDeletedOrNotManaged = true;\n-        } catch (EntityNotFoundException enf) {\n-            entityDeletedOrNotManaged = true;\n-        }\n-\n-        return entityDeletedOrNotManaged;\n-    }\n }"},{"sha":"6fa4520f2334cba4f5637b99a265ae41c0586032","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeDAOImpl.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -27,12 +27,7 @@ public class AttributeDAOImpl extends AbstractDAOImpl\n \n     @Override\n     public <T extends AbstractAttribute> T find(Long id, Class<T> reference) {\n-        T result = entityManager.find(reference, id);\n-        if (isDeletedOrNotManaged(result)) {\n-            result = null;\n-        }\n-\n-        return (T) result;\n+        return entityManager.find(reference, id);\n     }\n \n     @Override\n@@ -45,9 +40,7 @@ public <T extends AbstractAttribute> List<T> findAll(Class<T> reference) {\n     @Override\n     @Transactional\n     public <T extends AbstractAttribute> T save(T attribute) {\n-        T result = entityManager.merge(attribute);\n-        entityManager.flush();\n-        return result;\n+        return entityManager.merge(attribute);\n     }\n \n     @Override\n@@ -60,6 +53,17 @@ public <T extends AbstractAttribute> void delete(\n             return;\n         }\n \n+        delete(attribute);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public <T extends AbstractAttribute> void delete(T attribute) {\n+        if (attribute.getOwner() != null) {\n+            attribute.getOwner().removeAttribute(attribute);\n+        }\n+        attribute.getSchema().removeAttribute(attribute);\n+\n         entityManager.remove(attribute);\n     }\n }"},{"sha":"fa8a80b4cdc6c77e783b174d3b608019276b2afc","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeValueDAOImpl.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -26,13 +26,10 @@ public class AttributeValueDAOImpl extends AbstractDAOImpl\n         implements AttributeValueDAO {\n \n     @Override\n-    public <T extends AbstractAttributeValue> T find(Long id, Class<T> reference) {\n-        T result = entityManager.find(reference, id);\n-        if (isDeletedOrNotManaged(result)) {\n-            result = null;\n-        }\n-\n-        return result;\n+    public <T extends AbstractAttributeValue> T find(\n+            Long id, Class<T> reference) {\n+        \n+        return entityManager.find(reference, id);\n     }\n \n     @Override\n@@ -45,9 +42,7 @@ public <T extends AbstractAttributeValue> List<T> findAll(Class<T> reference) {\n     @Override\n     @Transactional\n     public <T extends AbstractAttributeValue> T save(T attributeValue) {\n-        T result = entityManager.merge(attributeValue);\n-        entityManager.flush();\n-        return result;\n+        return entityManager.merge(attributeValue);\n     }\n \n     @Override"},{"sha":"d2086cb261e829583c897a9e7bbb57c0173aa57d","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnectorInstanceDAOImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnectorInstanceDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -38,9 +38,7 @@ public List<ConnectorInstance> findAll() {\n \n     @Override\n     public ConnectorInstance save(ConnectorInstance connector) {\n-        ConnectorInstance result = entityManager.merge(connector);\n-        entityManager.flush();\n-        return result;\n+        return entityManager.merge(connector);\n     }\n \n     @Override"},{"sha":"fe928b600fe7c6dd0f5bc12e318cac6e79e13f7b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedAttributeDAOImpl.java","status":"modified","additions":20,"deletions":13,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedAttributeDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -19,39 +19,32 @@\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n \n @Repository\n public class DerivedAttributeDAOImpl extends AbstractDAOImpl\n         implements DerivedAttributeDAO {\n \n     @Override\n-    public <T extends AbstractDerivedAttribute> T find(Long id, Class<T> reference) {\n-        T result = entityManager.find(reference, id);\n-        if (isDeletedOrNotManaged(result)) {\n-            result = null;\n-        }\n+    public <T extends AbstractDerivedAttribute> T find(\n+            Long id, Class<T> reference) {\n \n-        return result;\n+        return entityManager.find(reference, id);\n     }\n \n     @Override\n     public <T extends AbstractDerivedAttribute> List<T> findAll(\n             Class<T> reference) {\n-        \n+\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();\n     }\n \n     @Override\n     @Transactional\n-    public AbstractDerivedAttribute save(AbstractDerivedAttribute attribute) {\n-        AbstractDerivedAttribute result = entityManager.merge(attribute);\n-        entityManager.flush();\n-        return result;\n+    public <T extends AbstractDerivedAttribute> T save(T derivedAttribute) {\n+        return entityManager.merge(derivedAttribute);\n     }\n \n     @Override\n@@ -64,6 +57,20 @@ public <T extends AbstractDerivedAttribute> void delete(\n             return;\n         }\n \n+        delete(derivedAttribute);\n+    }\n+\n+    @Override\n+    public <T extends AbstractDerivedAttribute> void delete(\n+            T derivedAttribute) {\n+\n+        if (derivedAttribute.getOwner() != null) {\n+            derivedAttribute.getOwner().removeDerivedAttribute(\n+                    derivedAttribute);\n+        }\n+        derivedAttribute.getDerivedSchema().removeDerivedAttribute(\n+                derivedAttribute);\n+\n         entityManager.remove(derivedAttribute);\n     }\n }"},{"sha":"39f167a42665b7f15d08be88c83d934e41bbfe64","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/DerivedSchemaDAOImpl.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerivedSchemaDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -14,12 +14,15 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n \n@@ -28,7 +31,7 @@ public class DerivedSchemaDAOImpl extends AbstractDAOImpl\n         implements DerivedSchemaDAO {\n \n     @Autowired\n-    DerivedAttributeDAO derivedAttributeDAO;\n+    private DerivedAttributeDAO derivedAttributeDAO;\n \n     @Override\n     public <T extends AbstractDerivedSchema> T find(String name,\n@@ -49,20 +52,32 @@ public <T extends AbstractDerivedSchema> List<T> findAll(\n     @Override\n     @Transactional\n     public <T extends AbstractDerivedSchema> T save(T derivedSchema) {\n-        T result = entityManager.merge(derivedSchema);\n-        entityManager.flush();\n-        return result;\n+        return entityManager.merge(derivedSchema);\n     }\n \n     @Override\n     @Transactional\n     public <T extends AbstractDerivedSchema> void delete(String name,\n             Class<T> reference) {\n-        T schema = find(name, reference);\n-        if (schema == null) {\n+\n+        T derivedSchema = find(name, reference);\n+        if (derivedSchema == null) {\n             return;\n         }\n \n-        entityManager.remove(schema);\n+        for (AbstractSchema schema : derivedSchema.getSchemas()) {\n+            schema.removeDerivedSchema(derivedSchema);\n+        }\n+        derivedSchema.setSchemas(Collections.EMPTY_SET);\n+\n+        for (AbstractDerivedAttribute derivedAttribute :\n+                derivedSchema.getDerivedAttributes()) {\n+\n+            derivedAttribute.setDerivedSchema(null);\n+            derivedAttributeDAO.delete(derivedAttribute.getId(),\n+                    derivedAttribute.getClass());\n+        }\n+\n+        entityManager.remove(derivedSchema);\n     }\n }"},{"sha":"3de8d19a2c961fa9f71f0ee4f39ee64bf77fd87f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -32,12 +32,7 @@ public class EntitlementDAOImpl extends AbstractDAOImpl implements EntitlementDA\n \n     @Override\n     public Entitlement find(String name) {\n-        Entitlement result = entityManager.find(Entitlement.class, name);\n-        if (isDeletedOrNotManaged(result)) {\n-            result = null;\n-        }\n-\n-        return result;\n+        return entityManager.find(Entitlement.class, name);\n     }\n \n     @Override\n@@ -49,9 +44,7 @@ public List<Entitlement> findAll() {\n \n     @Override\n     public Entitlement save(Entitlement entitlement) {\n-        Entitlement result = entityManager.merge(entitlement);\n-        entityManager.flush();\n-        return result;\n+        return entityManager.merge(entitlement);\n     }\n \n     @Override"},{"sha":"52cbc7ecef1c7b4d0eab6a96b5c77a172a6fdbe0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -14,11 +14,14 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n@@ -28,16 +31,11 @@ public class SchemaDAOImpl extends AbstractDAOImpl\n         implements SchemaDAO {\n \n     @Autowired\n-    AttributeDAO attributeDAO;\n+    private AttributeDAO attributeDAO;\n \n     @Override\n     public <T extends AbstractSchema> T find(String name, Class<T> reference) {\n-        T result = entityManager.find(reference, name);\n-        if (isDeletedOrNotManaged(result)) {\n-            result = null;\n-        }\n-\n-        return (T) result;\n+        return entityManager.find(reference, name);\n     }\n \n     @Override\n@@ -50,9 +48,7 @@ public <T extends AbstractSchema> List<T> findAll(Class<T> reference) {\n     @Override\n     @Transactional\n     public <T extends AbstractSchema> T save(T schema) {\n-        T result = entityManager.merge(schema);\n-        entityManager.flush();\n-        return result;\n+        return entityManager.merge(schema);\n     }\n \n     @Override\n@@ -65,6 +61,16 @@ public <T extends AbstractSchema> void delete(\n             return;\n         }\n \n+        for (AbstractDerivedSchema derivedSchema : schema.getDerivedSchemas()) {\n+            derivedSchema.removeSchema(schema);\n+        }\n+        schema.setDerivedSchemas(Collections.EMPTY_SET);\n+\n+        for (AbstractAttribute attribute : schema.getAttributes()) {\n+            attribute.setSchema(null);\n+            attributeDAO.delete(attribute.getId(), attribute.getClass());\n+        }\n+\n         entityManager.remove(schema);\n     }\n }"},{"sha":"dd8b9d0dcdf1f81730b800d1ca6e0d3ed8f73a2f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeRoleDAOImpl.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeRoleDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -14,11 +14,14 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n \n @Repository\n@@ -58,9 +61,7 @@ public List<SyncopeRole> findAll() {\n \n     @Override\n     public SyncopeRole save(SyncopeRole syncopeRole) {\n-        SyncopeRole result = entityManager.merge(syncopeRole);\n-        entityManager.flush();\n-        return result;\n+        return entityManager.merge(syncopeRole);\n     }\n \n     @Override\n@@ -78,7 +79,19 @@ public void delete(String name, String parent) {\n             }\n         }\n \n-        entityManager.remove(find(name, parent));\n+        SyncopeRole role = find(name, parent);\n+\n+        for (SyncopeUser user : role.getUsers()) {\n+            user.removeRole(role);\n+        }\n+        role.setUsers(Collections.EMPTY_SET);\n+\n+        for (Entitlement entitlement : role.getEntitlements()) {\n+            entitlement.removeRole(role);\n+        }\n+        role.setEntitlements(Collections.EMPTY_SET);\n+\n+        entityManager.remove(role);\n     }\n \n     @Override"},{"sha":"a0f207d1ab1f0d7d3e0b44fa29151a996dd2825a","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -14,10 +14,12 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n \n@@ -39,14 +41,19 @@ public List<SyncopeUser> findAll() {\n     @Override\n     @Transactional\n     public SyncopeUser save(SyncopeUser syncopeUser) {\n-        SyncopeUser result = entityManager.merge(syncopeUser);\n-        entityManager.flush();\n-        return result;\n+        return entityManager.merge(syncopeUser);\n     }\n \n     @Override\n     @Transactional\n     public void delete(Long id) {\n-        entityManager.remove(find(id));\n+        SyncopeUser user = find(id);\n+\n+        for (SyncopeRole role : user.getRoles()) {\n+            user.removeRole(role);\n+        }\n+        user.setRoles(Collections.EMPTY_SET);\n+\n+        entityManager.remove(user);\n     }\n }"},{"sha":"1e36c76418220b768fea3b2cb9d6c32cf4a75235","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":53,"deletions":4,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,6 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n@@ -52,16 +51,35 @@ public DerivedSchemaTO create(HttpServletResponse response,\n                     derivedSchemaTO, reference,\n                     getAttributable(kind).getSchemaClass());\n         } catch (Exception e) {\n-            log.error(\"Could not crate for  \" + derivedSchemaTO, e);\n+            log.error(\"Could not create for \" + derivedSchemaTO, e);\n             response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n         }\n \n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/{kind}/delete/{schema}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"kind\") String kind,\n+            @PathVariable(\"schema\") String derivedSchemaName)\n+            throws IOException {\n+\n+        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        AbstractDerivedSchema derivedSchema =\n+                derivedSchemaDAO.find(derivedSchemaName, reference);\n+        if (derivedSchema == null) {\n+            log.error(\"Could not find derived schema '\"\n+                    + derivedSchemaName + \"'\");\n+\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+        } else {\n+            derivedSchemaDAO.delete(derivedSchemaName, reference);\n+        }\n+    }\n+\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<DerivedSchemaTO> list(HttpServletRequest request,\n-            @PathVariable(\"kind\") String kind) {\n+    public List<DerivedSchemaTO> list(@PathVariable(\"kind\") String kind) {\n \n         Class reference = getAttributable(kind).getDerivedSchemaClass();\n         List<AbstractDerivedSchema> derivedAttributeSchemas =\n@@ -77,4 +95,35 @@ public List<DerivedSchemaTO> list(HttpServletRequest request,\n \n         return result;\n     }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{kind}/read/{derivedSchema}\")\n+    public DerivedSchemaTO read(HttpServletResponse response,\n+            @PathVariable(\"kind\") String kind,\n+            @PathVariable(\"derivedSchema\") String derivedSchemaName)\n+            throws IOException {\n+\n+        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        AbstractDerivedSchema derivedSchema =\n+                derivedSchemaDAO.find(derivedSchemaName, reference);\n+        if (derivedSchema == null) {\n+            log.error(\"Could not find derived schema '\"\n+                    + derivedSchemaName + \"'\");\n+\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+            return new DerivedSchemaTO();\n+        }\n+\n+        return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n+    }\n+\n+    // TODO: implement and verify if current attributes are affected by this update\n+    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n+    public DerivedSchemaTO update(HttpServletResponse response,\n+            @RequestBody DerivedSchemaTO derivedSchemaTO,\n+            @PathVariable(\"kind\") String kind)\n+            throws IOException {\n+\n+        return create(response, derivedSchemaTO, kind);\n+    }\n }"},{"sha":"bbb594b0140ddad58524429174a0f29cace7e775","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":53,"deletions":4,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -17,7 +17,6 @@\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n@@ -50,16 +49,39 @@ public SchemaTO create(HttpServletResponse response,\n             schema = schemaDataBinder.createSchema(schemaTO, reference,\n                     getAttributable(kind).getDerivedSchemaClass());\n         } catch (Exception e) {\n-            log.error(\"Could not crate for  \" + schemaTO, e);\n+            log.error(\"Could not create for \" + schemaTO, e);\n             response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+            return new SchemaTO();\n         }\n \n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/{kind}/delete/{schema}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"kind\") String kind,\n+            @PathVariable(\"schema\") String schemaName) throws IOException {\n+\n+        Class reference = getAttributable(kind).getSchemaClass();\n+        AbstractSchema schema = schemaDAO.find(schemaName, reference);\n+        if (schema == null) {\n+            log.error(\"Could not find schema '\" + schemaName + \"'\");\n+\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+        } else {\n+            try {\n+                schemaDAO.delete(schemaName, reference);\n+            } catch (Throwable t) {\n+                log.error(\"While deleting \" + schemaName, t);\n+                response.sendError(\n+                        HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+            }\n+        }\n+    }\n+\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<SchemaTO> list(HttpServletRequest request,\n-            @PathVariable(\"kind\") String kind) {\n+    public List<SchemaTO> list(@PathVariable(\"kind\") String kind) {\n \n         Class reference = getAttributable(kind).getSchemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n@@ -71,4 +93,31 @@ public List<SchemaTO> list(HttpServletRequest request,\n \n         return result;\n     }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{kind}/read/{schema}\")\n+    public SchemaTO read(HttpServletResponse response,\n+            @PathVariable(\"kind\") String kind,\n+            @PathVariable(\"schema\") String schemaName) throws IOException {\n+\n+        Class reference = getAttributable(kind).getSchemaClass();\n+        AbstractSchema schema = schemaDAO.find(schemaName, reference);\n+        if (schema == null) {\n+            log.error(\"Could not find schema '\" + schemaName + \"'\");\n+\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+            return new SchemaTO();\n+        }\n+\n+        return schemaDataBinder.getSchemaTO(schema);\n+    }\n+\n+    // TODO: implement and verify if current attributes are affected by this update\n+    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n+    public SchemaTO update(HttpServletResponse response,\n+            @RequestBody SchemaTO schemaTO, @PathVariable(\"kind\") String kind)\n+            throws IOException {\n+\n+        return create(response, schemaTO, kind);\n+    }\n }"},{"sha":"69f9352e6e00b68853590732cf6b9cab140696a7","filename":"core/src/test/java/org/syncope/core/test/persistence/AttributeDAOTest.java","status":"modified","additions":5,"deletions":21,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAttributeDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAttributeDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAttributeDAOTest.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -26,7 +26,6 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.validation.ValidationException;\n-import org.syncope.types.AttributeType;\n \n @Transactional\n public class AttributeDAOTest extends AbstractTest {\n@@ -40,7 +39,7 @@ public class AttributeDAOTest extends AbstractTest {\n     public final void findAll() {\n         List<UserAttribute> list = attributeDAO.findAll(UserAttribute.class);\n         assertEquals(\"did not get expected number of attributes \",\n-                5, list.size());\n+                6, list.size());\n     }\n \n     @Test\n@@ -55,23 +54,11 @@ public final void findById() {\n \n     @Test\n     public final void save() throws ClassNotFoundException {\n-        UserSchema emailSchema = new UserSchema();\n-        emailSchema.setName(\"email\");\n-        emailSchema.setType(AttributeType.String);\n-        emailSchema.setValidatorClass(\n-                \"org.syncope.core.persistence.validation.EmailAddressValidator\");\n-        emailSchema.setMandatory(false);\n-        emailSchema.setMultivalue(true);\n-\n-        userSchemaDAO.save(emailSchema);\n-\n-        UserSchema actualEmailSchema = userSchemaDAO.find(\"email\",\n-                UserSchema.class);\n-        assertNotNull(\"expected save to work for e-mail schema\",\n-                actualEmailSchema);\n+        UserSchema emailSchema = userSchemaDAO.find(\"email\", UserSchema.class);\n+        assertNotNull(emailSchema);\n \n         UserAttribute attribute = new UserAttribute();\n-        attribute.setSchema(actualEmailSchema);\n+        attribute.setSchema(emailSchema);\n \n         Exception thrown = null;\n         try {\n@@ -80,13 +67,10 @@ public final void save() throws ClassNotFoundException {\n             attribute.addValue(\"mario.rossi@gmail.com\",\n                     new UserAttributeValue());\n         } catch (ValidationException e) {\n-            e.printStackTrace();\n+            log.error(\"Unexpected exception\", e);\n             thrown = e;\n         }\n         assertNull(\"no validation exception expected here \", thrown);\n-        if (thrown != null) {\n-            log.error(\"Validation exception for \" + attribute, thrown);\n-        }\n \n         try {\n             attribute.addValue(\"http://www.apache.org\","},{"sha":"ff874fe076dfb386184efcfb5e0dc0c1dd69de5a","filename":"core/src/test/java/org/syncope/core/test/persistence/DerivedAttributeDAOTest.java","status":"modified","additions":9,"deletions":21,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FDerivedAttributeDAOTest.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -24,7 +24,6 @@\n import org.syncope.core.persistence.beans.user.UserAttributeValue;\n import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n@@ -38,7 +37,7 @@ public class DerivedAttributeDAOTest extends AbstractTest {\n     @Autowired\n     SyncopeUserDAO syncopeUserDAO;\n     @Autowired\n-    DerivedSchemaDAO derivedAttributeSchemaDAO;\n+    DerivedSchemaDAO derivedSchemaDAO;\n     @Autowired\n     SchemaDAO attributeSchemaDAO;\n \n@@ -60,27 +59,16 @@ public final void findById() {\n \n     @Test\n     public final void save() throws ClassNotFoundException {\n-        UserDerivedSchema derivedAttributeSchema =\n-                new UserDerivedSchema();\n-        derivedAttributeSchema.setName(\"cn2\");\n-        derivedAttributeSchema.setExpression(\"firstname + \\\" \\\" + surname\");\n-        derivedAttributeSchema.addSchema(\n-                attributeSchemaDAO.find(\"firstname\", UserSchema.class));\n-        derivedAttributeSchema.addSchema(\n-                attributeSchemaDAO.find(\"surname\", UserSchema.class));\n-\n-        derivedAttributeSchemaDAO.save(derivedAttributeSchema);\n-\n-        UserDerivedSchema actualCN2Schema =\n-                derivedAttributeSchemaDAO.find(\"cn2\", UserDerivedSchema.class);\n-        assertNotNull(\"expected save to work for CN2 schema\",\n-                actualCN2Schema);\n+        UserDerivedSchema cnSchema =\n+                derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class);\n+        assertNotNull(cnSchema);\n \n         SyncopeUser owner = syncopeUserDAO.find(3L);\n         assertNotNull(\"did not get expected user\", owner);\n \n         UserDerivedAttribute derivedAttribute = new UserDerivedAttribute();\n-        derivedAttribute.setDerivedSchema(derivedAttributeSchema);\n+        derivedAttribute.setOwner(owner);\n+        derivedAttribute.setDerivedSchema(cnSchema);\n \n         derivedAttribute = derivedAttributeDAO.save(derivedAttribute);\n \n@@ -97,8 +85,8 @@ public final void save() throws ClassNotFoundException {\n                 \"surname\").getAttributeValues().iterator().next();\n \n         assertEquals(\"expected derived value\",\n-                firstnameAttribute.getValue() + \" \"\n-                + surnameAttribute.getValue(),\n+                surnameAttribute.getValue() + \", \"\n+                + firstnameAttribute.getValue(),\n                 derivedAttribute.getValue(owner.getAttributes()));\n     }\n \n@@ -117,7 +105,7 @@ public final void delete() {\n         assertNull(\"delete did not work\", actual);\n \n         UserDerivedSchema attributeSchema =\n-                derivedAttributeSchemaDAO.find(attributeSchemaName,\n+                derivedSchemaDAO.find(attributeSchemaName,\n                 UserDerivedSchema.class);\n         assertNotNull(\"user derived attribute schema deleted \"\n                 + \"when deleting values\","},{"sha":"a2030f608ff3c78de274db38e67a7c4ede750ebf","filename":"core/src/test/java/org/syncope/core/test/persistence/RelationshipTest.java","status":"removed","additions":0,"deletions":183,"changes":183,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/165d0cde0acdac435bd5af75a2a0ee1f5b3d9b5f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FRelationshipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/165d0cde0acdac435bd5af75a2a0ee1f5b3d9b5f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FRelationshipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FRelationshipTest.java?ref=165d0cde0acdac435bd5af75a2a0ee1f5b3d9b5f","patch":"@@ -1,183 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.test.persistence;\n-\n-import static org.junit.Assert.*;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.test.annotation.Rollback;\n-import org.springframework.test.context.transaction.AfterTransaction;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.AbstractAttributeValue;\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n-import org.syncope.core.persistence.dao.AttributeDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n-import org.syncope.core.persistence.dao.AttributeValueDAO;\n-import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n-\n-/**\n- * TODO: complete refactor for http://code.google.com/p/syncope/issues/detail?id=7\n- */\n-@Transactional\n-public class RelationshipTest extends AbstractTest {\n-\n-    @Autowired\n-    SchemaDAO attributeSchemaDAO;\n-    @Autowired\n-    AttributeDAO attributeDAO;\n-    @Autowired\n-    AttributeValueDAO attributeValueDAO;\n-    @Autowired\n-    DerivedSchemaDAO derivedAttributeSchemaDAO;\n-    private Set<Long> loginDateAttributeIds;\n-    private Set<Long> allLoginDateAttributeValueIds;\n-    private Set<String> derivedAttributeSchemaNames;\n-    private Set<String> attributeSchemaNames;\n-\n-    @Test\n-    @Rollback(false)\n-    public final void prepare() {\n-        if (true) {\n-            return;\n-        }\n-\n-        // 1. AttributeSchema <-> Attribute <-> AttributeValue\n-        {\n-            UserSchema loginDateSchema =\n-                    attributeSchemaDAO.find(\"loginDate\", UserSchema.class);\n-            assertNotNull(loginDateSchema);\n-\n-            loginDateAttributeIds = new HashSet<Long>();\n-            allLoginDateAttributeValueIds = new HashSet<Long>();\n-            for (UserAttribute loginDateAttribute :\n-                    (Set<UserAttribute>) loginDateSchema.getAttributes()) {\n-\n-                loginDateAttributeIds.add(loginDateAttribute.getId());\n-\n-                for (AbstractAttributeValue loginDateAttributeValue :\n-                        loginDateAttribute.getAttributeValues()) {\n-\n-                    allLoginDateAttributeValueIds.add(\n-                            loginDateAttributeValue.getId());\n-                }\n-            }\n-\n-            attributeSchemaDAO.delete(\"loginDate\", UserSchema.class);\n-        }\n-\n-        // 2. AttributeSchema <-> DerivedAttributeSchema\n-        {\n-            UserSchema surnameSchema = attributeSchemaDAO.find(\"surname\",\n-                    UserSchema.class);\n-            assertNotNull(surnameSchema);\n-\n-            derivedAttributeSchemaNames = new HashSet<String>();\n-            for (AbstractDerivedSchema derivedAttributeSchema :\n-                    surnameSchema.getDerivedSchemas()) {\n-\n-                derivedAttributeSchemaNames.add(\n-                        derivedAttributeSchema.getName());\n-            }\n-\n-            attributeSchemaDAO.delete(\"surname\", UserSchema.class);\n-        }\n-\n-        // 3. DerivedAttributeSchema <-> AttributeSchema\n-        /*{\n-        DerivedAttributeSchema alternativeCNSchema =\n-        derivedAttributeSchemaDAO.find(\"icon2\");\n-        assertNotNull(alternativeCNSchema);\n-\n-        attributeSchemaNames = new HashSet<String>();\n-        for (AttributeSchema attributeSchema :\n-        alternativeCNSchema.getAttributeSchemas()) {\n-\n-        attributeSchemaNames.add(attributeSchema.getName());\n-        }\n-\n-        derivedAttributeSchemaDAO.delete(\"icon2\");\n-        }*/\n-    }\n-\n-    @AfterTransaction\n-    public final void verify() {\n-        if (true) {\n-            return;\n-        }\n-\n-        // 1. AttributeSchema <-> Attribute <-> AttributeValue\n-        {\n-            assertNotNull(loginDateAttributeIds);\n-            assertNotNull(allLoginDateAttributeValueIds);\n-            assertNull(attributeSchemaDAO.find(\"loginDate\", UserSchema.class));\n-\n-            for (Long loginDateAttribute : loginDateAttributeIds) {\n-                assertNull(attributeDAO.find(loginDateAttribute,\n-                        UserAttribute.class));\n-            }\n-            for (Long attributeValue : allLoginDateAttributeValueIds) {\n-                assertNull(attributeValueDAO.find(attributeValue,\n-                        UserAttributeValue.class));\n-            }\n-        }\n-\n-        // 2. AttributeSchema <-> DerivedAttributeSchema\n-        {\n-            assertNotNull(derivedAttributeSchemaNames);\n-            assertNull(attributeSchemaDAO.find(\"surname\", UserSchema.class));\n-\n-            AbstractDerivedSchema derivedAttributeSchema = null;\n-            for (String derivedAttributeSchemaName :\n-                    derivedAttributeSchemaNames) {\n-\n-                derivedAttributeSchema =\n-                        derivedAttributeSchemaDAO.find(\n-                        derivedAttributeSchemaName, UserDerivedSchema.class);\n-\n-                for (AbstractSchema attributeSchema :\n-                        derivedAttributeSchema.getSchemas()) {\n-\n-                    assertTrue(!\"surname\".equals(attributeSchema.getName()));\n-                }\n-            }\n-        }\n-\n-        // 3. DerivedAttributeSchema <-> AttributeSchema\n-        /*{\n-        assertNotNull(attributeSchemaNames);\n-        assertNull(derivedAttributeSchemaDAO.find(\"icon2\"));\n-\n-        AttributeSchema attributeSchema = null;\n-        for (String attributeSchemaName : attributeSchemaNames) {\n-        attributeSchema = attributeSchemaDAO.find(attributeSchemaName);\n-\n-        for (DerivedAttributeSchema derivedAttributeSchema :\n-        attributeSchema.getDerivedAttributeSchemas()) {\n-\n-        assertTrue(!\"icon2\".equals(\n-        derivedAttributeSchema.getName()));\n-        }\n-        }\n-        }*/\n-    }\n-}"},{"sha":"486527e63e8202c6d76e2811ac2314d2c32b1947","filename":"core/src/test/java/org/syncope/core/test/persistence/SchemaDAOTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSchemaDAOTest.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -34,7 +34,7 @@ public class SchemaDAOTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<UserSchema> userList = schemaDAO.findAll(UserSchema.class);\n-        assertEquals(4, userList.size());\n+        assertEquals(5, userList.size());\n \n         List<RoleSchema> roleList = schemaDAO.findAll(RoleSchema.class);\n         assertEquals(2, roleList.size());\n@@ -51,7 +51,7 @@ public final void findByName() {\n     @Test\n     public final void save() {\n         UserSchema attributeSchema = new UserSchema();\n-        attributeSchema.setName(\"email\");\n+        attributeSchema.setName(\"secondaryEmail\");\n         attributeSchema.setType(AttributeType.String);\n         attributeSchema.setValidatorClass(\n                 \"org.syncope.core.validation.EmailAddressValidator\");\n@@ -60,7 +60,7 @@ public final void save() {\n \n         schemaDAO.save(attributeSchema);\n \n-        UserSchema actual = schemaDAO.find(\"email\", UserSchema.class);\n+        UserSchema actual = schemaDAO.find(\"secondaryEmail\", UserSchema.class);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(attributeSchema, actual);\n     }"},{"sha":"0fd892de7ec47f27cc937ff150df19d2e50bfa2c","filename":"core/src/test/java/org/syncope/core/test/persistence/SyncopeUserDAOTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FSyncopeUserDAOTest.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -41,7 +41,7 @@ public class SyncopeUserDAOTest extends AbstractTest {\n     @Test\n     public final void findAll() {\n         List<SyncopeUser> list = syncopeUserDAO.findAll();\n-        assertEquals(\"did not get expected number of users \", 3, list.size());\n+        assertEquals(\"did not get expected number of users \", 4, list.size());\n     }\n \n     @Test\n@@ -50,7 +50,7 @@ public final void findById() {\n         assertNotNull(\"did not find expected user\", user);\n         user = syncopeUserDAO.find(3L);\n         assertNotNull(\"did not find expected user\", user);\n-        user = syncopeUserDAO.find(4L);\n+        user = syncopeUserDAO.find(5L);\n         assertNull(\"found user but did not expect it\", user);\n     }\n "},{"sha":"acb25647437a4343bc66588140875c874e742088","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/DerivedSchemaTest.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FDerivedSchemaTest.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -0,0 +1,60 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n+import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n+import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.test.persistence.AbstractTest;\n+\n+@Transactional\n+public class DerivedSchemaTest extends AbstractTest {\n+\n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+    @Autowired\n+    private DerivedSchemaDAO derivedSchemaDAO;\n+    @Autowired\n+    private AttributeDAO attributeDAO;\n+    @Autowired\n+    DerivedAttributeDAO derivedAttributeDAO;\n+\n+    @Test\n+    public final void test() {\n+        derivedSchemaDAO.delete(\"cn\", UserDerivedSchema.class);\n+\n+        derivedSchemaDAO.getEntityManager().flush();\n+\n+        assertNull(derivedSchemaDAO.find(\"cn\", UserDerivedSchema.class));\n+        assertNull(derivedAttributeDAO.find(1000L, UserDerivedAttribute.class));\n+        assertTrue(schemaDAO.find(\"surname\",\n+                UserSchema.class).getDerivedSchemas().isEmpty());\n+        assertTrue(schemaDAO.find(\"firstname\",\n+                UserSchema.class).getDerivedSchemas().isEmpty());\n+        assertNull(syncopeUserDAO.find(3L).getDerivedAttribute(\"cn\"));\n+    }\n+}"},{"sha":"83cb91764d0051183baa4fc563f051bb9fe15b4e","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/RoleTest.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FRoleTest.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -0,0 +1,62 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.role.RoleAttribute;\n+import org.syncope.core.persistence.beans.role.RoleAttributeValue;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.test.persistence.AbstractTest;\n+\n+@Transactional\n+public class RoleTest extends AbstractTest {\n+\n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+    @Autowired\n+    private SyncopeRoleDAO syncopeRoleDAO;\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+    @Autowired\n+    private AttributeDAO attributeDAO;\n+    @Autowired\n+    private AttributeValueDAO attributeValueDAO;\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    @Test\n+    public final void test() {\n+        syncopeRoleDAO.delete(2L);\n+\n+        syncopeRoleDAO.getEntityManager().flush();\n+\n+        assertNull(syncopeRoleDAO.find(2L));\n+        assertTrue(entitlementDAO.find(\"base\").getRoles().size() == 1);\n+        assertTrue(syncopeUserDAO.find(2L).getRoles().size() == 1);\n+        assertNull(attributeDAO.find(700L, RoleAttribute.class));\n+        assertNull(attributeValueDAO.find(41L, RoleAttributeValue.class));\n+        assertNotNull(schemaDAO.find(\"icon\", RoleSchema.class));\n+    }\n+}"},{"sha":"203c805c39a5e8055475dbfde5690ad0fdd6614a","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/SchemaTest.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.user.UserAttribute;\n+import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.test.persistence.AbstractTest;\n+\n+@Transactional\n+public class SchemaTest extends AbstractTest {\n+\n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+    @Autowired\n+    private DerivedSchemaDAO derivedSchemaDAO;\n+    @Autowired\n+    private AttributeDAO attributeDAO;\n+\n+    @Test\n+    public final void test() {\n+        // 1\n+        schemaDAO.delete(\"username\", UserSchema.class);\n+\n+        // 2\n+        schemaDAO.delete(\"surname\", UserSchema.class);\n+\n+        schemaDAO.getEntityManager().flush();\n+\n+        // 1\n+        assertNull(schemaDAO.find(\"username\", UserSchema.class));\n+        assertNull(attributeDAO.find(100L, UserAttribute.class));\n+        assertNull(attributeDAO.find(300L, UserAttribute.class));\n+        assertNull(syncopeUserDAO.find(1L).getAttribute(\"username\"));\n+        assertNull(syncopeUserDAO.find(3L).getAttribute(\"username\"));\n+\n+        // 2\n+        assertNull(schemaDAO.find(\"surname\", UserSchema.class));\n+        assertEquals(1, derivedSchemaDAO.find(\"cn\",\n+                UserDerivedSchema.class).getSchemas().size());\n+    }\n+}"},{"sha":"98b838b08e64c621c991334d361edeb9c127303a","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/UserTest.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FUserTest.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -0,0 +1,58 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.user.UserAttribute;\n+import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.test.persistence.AbstractTest;\n+\n+@Transactional\n+public class UserTest extends AbstractTest {\n+\n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+    @Autowired\n+    private SyncopeRoleDAO syncopeRoleDAO;\n+    @Autowired\n+    private SchemaDAO schemaDAO;\n+    @Autowired\n+    private AttributeDAO attributeDAO;\n+    @Autowired\n+    private AttributeValueDAO attributeValueDAO;\n+\n+    @Test\n+    public final void test() {\n+        syncopeUserDAO.delete(4L);\n+\n+        syncopeUserDAO.getEntityManager().flush();\n+\n+        assertNull(syncopeUserDAO.find(4L));\n+        assertNull(attributeDAO.find(550L, UserAttribute.class));\n+        assertNull(attributeValueDAO.find(22L, UserAttributeValue.class));\n+        assertNotNull(schemaDAO.find(\"loginDate\", UserSchema.class));\n+        assertTrue(syncopeRoleDAO.find(7L).getUsers().isEmpty());\n+    }\n+}"},{"sha":"d855c8e536cb529c48a88dbe05073af84da10588","filename":"core/src/test/java/org/syncope/core/test/rest/SchemaTestITCase.java","status":"modified","additions":28,"deletions":14,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FSchemaTestITCase.java?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -32,19 +32,7 @@ public class SchemaTestITCase extends AbstractTestITCase {\n     DerivedSchemaDAO derivedSchemaDAO;\n \n     @Test\n-    public void attributeList() {\n-        List<SchemaTO> userSchemas =\n-                restTemplate.getForObject(BASE_URL\n-                + \"schema/user/list.json\", List.class);\n-        assertFalse(userSchemas.isEmpty());\n-\n-        List<SchemaTO> roleSchemas = restTemplate.getForObject(BASE_URL\n-                + \"schema/role/list.json\", List.class);\n-        assertFalse(roleSchemas.isEmpty());\n-    }\n-\n-    @Test\n-    public void attributeCreate() {\n+    public void create() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"testAttribute\");\n         schemaTO.setMandatory(true);\n@@ -56,10 +44,36 @@ public void attributeCreate() {\n     }\n \n     @Test\n-    public void derivedAttributeList() {\n+    public void delete() {\n+        restTemplate.delete(BASE_URL + \"schema/user/delete/username.js\");\n+        System.out.println(restTemplate.getForObject(BASE_URL\n+                + \"schema/user/read/surname.json\", SchemaTO.class));\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<SchemaTO> userSchemas =\n+                restTemplate.getForObject(BASE_URL\n+                + \"schema/user/list.json\", List.class);\n+        assertFalse(userSchemas.isEmpty());\n+\n+        List<SchemaTO> roleSchemas = restTemplate.getForObject(BASE_URL\n+                + \"schema/role/list.json\", List.class);\n+        assertFalse(roleSchemas.isEmpty());\n+    }\n+\n+    @Test\n+    public void derivedList() {\n         List<DerivedSchemaTO> derivedSchemas =\n                 restTemplate.getForObject(BASE_URL\n                 + \"derivedSchema/user/list.json\", List.class);\n         assertFalse(derivedSchemas.isEmpty());\n     }\n+\n+    @Test\n+    public void derivedRead() {\n+        DerivedSchemaTO derivedSchemaTO = restTemplate.getForObject(BASE_URL\n+                + \"derivedSchema/user/read/cn.json\", DerivedSchemaTO.class);\n+        assertNotNull(derivedSchemaTO);\n+    }\n }"},{"sha":"2f6052b15baa37e7151a426242193613e417865b","filename":"core/src/test/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":22,"deletions":6,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e1583859ca50a33f63b28c24187aafd2b651015d/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=e1583859ca50a33f63b28c24187aafd2b651015d","patch":"@@ -16,6 +16,7 @@\n     <SyncopeUser id=\"1\" password=\"XXX\"/>\n     <SyncopeUser id=\"2\" password=\"YYY\"/>\n     <SyncopeUser id=\"3\" password=\"ZZZ\"/>\n+    <SyncopeUser id=\"4\" password=\"PPP\"/>\n \n     <SyncopeRole id=\"1\" name=\"root\"/>\n     <SyncopeRole id=\"2\" name=\"child\" parent=\"root\"/>\n@@ -27,6 +28,8 @@\n \n     <SyncopeUser_SyncopeRole users_id=\"1\" roles_id=\"1\"/>\n     <SyncopeUser_SyncopeRole users_id=\"2\" roles_id=\"1\"/>\n+    <SyncopeUser_SyncopeRole users_id=\"2\" roles_id=\"2\"/>\n+    <SyncopeUser_SyncopeRole users_id=\"4\" roles_id=\"7\"/>\n \n     <UserSchema name=\"username\" type=\"String\"\n                 mandatory=\"true\" multivalue=\"false\"/>\n@@ -37,6 +40,9 @@\n                 mandatory=\"false\" multivalue=\"false\"/>\n     <UserSchema name=\"surname\" type=\"String\"\n                 mandatory=\"true\" multivalue=\"false\"/>\n+    <UserSchema name=\"email\" type=\"String\"\n+                mandatory=\"false\" multivalue=\"true\"\n+                validatorClass=\"org.syncope.core.persistence.validation.EmailAddressValidator\"/>\n \n     <RoleSchema name=\"icon\" type=\"String\"\n                 mandatory=\"false\" multivalue=\"false\"/>\n@@ -48,6 +54,7 @@\n     <UserAttribute id=\"300\" owner_id=\"2\" schema_name=\"username\"/>\n     <UserAttribute id=\"400\" owner_id=\"3\" schema_name=\"firstname\"/>\n     <UserAttribute id=\"500\" owner_id=\"3\" schema_name=\"surname\"/>\n+    <UserAttribute id=\"550\" owner_id=\"4\" schema_name=\"loginDate\"/>\n \n     <RoleAttribute id=\"600\" owner_id=\"1\" schema_name=\"icon\"/>\n     <RoleAttribute id=\"700\" owner_id=\"2\" schema_name=\"icon\"/>\n@@ -59,6 +66,7 @@\n     <UserAttributeValue attribute_id=\"200\" id=\"21\" dateValue=\"2010-05-26 15:40:04\"/>\n     <UserAttributeValue attribute_id=\"400\" id=\"30\" stringValue=\"John\"/>\n     <UserAttributeValue attribute_id=\"500\" id=\"31\" stringValue=\"Doe\"/>\n+    <UserAttributeValue attribute_id=\"550\" id=\"22\" dateValue=\"2009-06-24\"/>\n \n     <RoleAttributeValue attribute_id=\"600\" id=\"40\" stringValue=\"niceIcon\"/>\n     <RoleAttributeValue attribute_id=\"700\" id=\"41\" stringValue=\"badIcon\"/>\n@@ -73,12 +81,9 @@\n                                             \n     <UserDerivedAttribute id=\"1000\" derivedSchema_name=\"cn\" owner_id=\"3\"/>\n \n-    <ConnectorInstance\n-        id=\"100\"\n-        connectorName=\"OpenAM\"\n-        bundleName=\"org.syncope.core.persistence.test.util.openam\"\n-        version=\"1.0\"\n-        xmlConfiguration=\"%lt;xml ... \" />\n+    <ConnectorInstance id=\"100\" connectorName=\"OpenAM\" version=\"1.0\"\n+                       bundleName=\"org.syncope.core.persistence.test.util.openam\"\n+                       xmlConfiguration=\"%lt;xml ... \" />\n \n     <Entitlement name=\"base\" description=\"NULL\"/>\n     <Entitlement name=\"advanced\" description=\"Advanced entitlement\"/>\n@@ -90,4 +95,15 @@\n     <SyncopeRole_Entitlement entitlements_name=\"base\"\n                              roles_id=\"2\"/>\n \n+    <RoleDerivedSchema name=\"displayProperty\"\n+                       expression=\"icon + ': ' + show\"/>\n+\n+    <RoleDerivedSchema_RoleSchema derivedSchemas_name=\"displayProperty\"\n+                                  schemas_name=\"icon\" />\n+    <RoleDerivedSchema_RoleSchema derivedSchemas_name=\"displayProperty\"\n+                                  schemas_name=\"show\" />\n+\n+    <RoleDerivedAttribute id=\"1001\" derivedSchema_name=\"displayProperty\"\n+                          owner_id=\"1\"/>\n+\n </dataset>"}]}