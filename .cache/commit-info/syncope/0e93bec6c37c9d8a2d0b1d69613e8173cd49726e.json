{"sha":"0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBlOTNiZWM2YzM3YzlkOGEyZDBiMWQ2OTYxM2U4MTczY2Q0OTcyNmU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-12T16:29:13Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-02-13T14:44:06Z"},"message":"[SYNCOPE-1274] Using Swagger annotations for TO hierarchies","tree":{"sha":"4288503e063d57e5e9f1f13156d8036101cd5305","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4288503e063d57e5e9f1f13156d8036101cd5305"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"dd638b27f631e1b882c113976f94ca3ca4da30bf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dd638b27f631e1b882c113976f94ca3ca4da30bf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dd638b27f631e1b882c113976f94ca3ca4da30bf"}],"stats":{"total":1016,"additions":675,"deletions":341},"files":[{"sha":"5b50a690a9c00c5a87a8f1864a1d069019d7223a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyRead.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -23,7 +23,7 @@\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -41,7 +41,7 @@ public PolicyRead(final Input input) {\n \n     public void read() {\n         if (input.parameterNumber() >= 1) {\n-            final List<AbstractPolicyTO> policyTOs = new ArrayList<>();\n+            final List<PolicyTO> policyTOs = new ArrayList<>();\n             for (final String parameter : input.getParameters()) {\n                 try {\n                     policyTOs.add(policySyncopeOperations.read(parameter));"},{"sha":"70d373dbfc46699951df40519951ba3014eb0116","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,15 +21,15 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n \n public class PolicyResultManager extends CommonsResultManager {\n \n-    public void printPolicies(final List<AbstractPolicyTO> policyTOs) {\n+    public void printPolicies(final List<PolicyTO> policyTOs) {\n         System.out.println(\"\");\n         policyTOs.forEach(policyTO -> {\n             if (policyTO instanceof AccountPolicyTO) {\n@@ -42,7 +42,7 @@ public void printPolicies(final List<AbstractPolicyTO> policyTOs) {\n         });\n     }\n \n-    public void printPoliciesByType(final String policyTypeString, final List<AbstractPolicyTO> policyTOs) {\n+    public void printPoliciesByType(final String policyTypeString, final List<PolicyTO> policyTOs) {\n         System.out.println(\"\");\n         final PolicyType policyType = PolicyType.valueOf(policyTypeString);\n         switch (policyType) {"},{"sha":"9bfad7562521bf86da167e859d477039981f112a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicySyncopeOperations.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicySyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicySyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicySyncopeOperations.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,19 +20,19 @@\n \n import java.util.List;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n \n public class PolicySyncopeOperations {\n \n     private final PolicyService policyService = SyncopeServices.get(PolicyService.class);\n \n-    public <T extends AbstractPolicyTO> T read(final String policyKey) {\n+    public <T extends PolicyTO> T read(final String policyKey) {\n         return policyService.read(policyKey);\n     }\n \n-    public <T extends AbstractPolicyTO> List<T> list(final String policyType) {\n+    public <T extends PolicyTO> List<T> list(final String policyType) {\n         return policyService.list(PolicyType.valueOf(policyType));\n     }\n "},{"sha":"96cd5cc39d6dcc5f2d194db54c49e527cf75e55f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaRead.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -47,7 +47,7 @@ public void read() {\n         if (input.parameterNumber() >= 2) {\n             final String[] parameters = Arrays.copyOfRange(input.getParameters(), 1, input.parameterNumber());\n             try {\n-                final List<AbstractSchemaTO> schemaTOs = new ArrayList<>();\n+                final List<SchemaTO> schemaTOs = new ArrayList<>();\n                 for (final String parameter : parameters) {\n                     schemaTOs.add(schemaSyncopeOperations.read(input.firstParameter(), parameter));\n                 }"},{"sha":"546e673facf99a838efdee86f47171bda1d4b633","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaResultManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -23,15 +23,15 @@\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n import org.apache.syncope.client.cli.view.Table;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n \n public class SchemaResultManager extends CommonsResultManager {\n \n-    public void toView(final String schemaTypeString, final List<? extends AbstractSchemaTO> schemaTOs) {\n+    public void toView(final String schemaTypeString, final List<? extends SchemaTO> schemaTOs) {\n         switch (SchemaType.valueOf(schemaTypeString)) {\n             case PLAIN:\n                 printPlainSchemasDetailed(schemaTOs);\n@@ -47,7 +47,7 @@ public void toView(final String schemaTypeString, final List<? extends AbstractS\n         }\n     }\n \n-    private void printPlainSchemasDetailed(final List<? extends AbstractSchemaTO> schemaTOs) {\n+    private void printPlainSchemasDetailed(final List<? extends SchemaTO> schemaTOs) {\n         System.out.println(\"\");\n         schemaTOs.forEach(schemaTO -> {\n             printPlanSchemaDetailed((PlainSchemaTO) schemaTO);\n@@ -67,7 +67,7 @@ private void printPlanSchemaDetailed(final PlainSchemaTO schemaTO) {\n         System.out.println(\"\");\n     }\n \n-    public void printPlainSchemas(final List<? extends AbstractSchemaTO> schemaTOs) {\n+    public void printPlainSchemas(final List<? extends SchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"plain schemas\").header(\"schema key\").header(\"type\").header(\"mandatory\");\n         schemaTOs.forEach(schemaTO -> {\n@@ -79,7 +79,7 @@ public void printPlainSchemas(final List<? extends AbstractSchemaTO> schemaTOs)\n         tableBuilder.build().print();\n     }\n \n-    public void fromListDerived(final List<? extends AbstractSchemaTO> schemaTOs) {\n+    public void fromListDerived(final List<? extends SchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"derived schemas\").header(\"schema key\").header(\"expression\");\n         schemaTOs.forEach(schemaTO -> {\n@@ -90,7 +90,7 @@ public void fromListDerived(final List<? extends AbstractSchemaTO> schemaTOs) {\n         tableBuilder.build().print();\n     }\n \n-    public void fromListVirtual(final List<? extends AbstractSchemaTO> schemaTOs) {\n+    public void fromListVirtual(final List<? extends SchemaTO> schemaTOs) {\n         final Table.TableBuilder tableBuilder =\n                 new Table.TableBuilder(\"virtual schemas\").header(\"schema key\").header(\"readonly\");\n         schemaTOs.forEach(schemaTO -> {"},{"sha":"79cb89a5f71d6d5d2e16a9042544bebdc1ac29c6","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaSyncopeOperations.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaSyncopeOperations.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n@@ -29,23 +29,23 @@ public class SchemaSyncopeOperations {\n \n     private final SchemaService schemaService = SyncopeServices.get(SchemaService.class);\n \n-    public <T extends AbstractSchemaTO> T read(final String schemaTypeString, final String schemaName) {\n+    public <T extends SchemaTO> T read(final String schemaTypeString, final String schemaName) {\n         return schemaService.read(SchemaType.valueOf(schemaTypeString), schemaName);\n     }\n \n-    public <T extends AbstractSchemaTO> List<T> list(final String schemaTypeString) {\n+    public <T extends SchemaTO> List<T> list(final String schemaTypeString) {\n         return schemaService.list(new SchemaQuery.Builder().type(SchemaType.valueOf(schemaTypeString)).build());\n     }\n \n-    public <T extends AbstractSchemaTO> List<T> listPlain() {\n+    public <T extends SchemaTO> List<T> listPlain() {\n         return schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n     }\n \n-    public <T extends AbstractSchemaTO> List<T> listDerived() {\n+    public <T extends SchemaTO> List<T> listDerived() {\n         return schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n     }\n \n-    public <T extends AbstractSchemaTO> List<T> listVirtual() {\n+    public <T extends SchemaTO> List<T> listVirtual() {\n         return schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n     }\n "},{"sha":"7d1660b02049e84e3c235b16700e59bd1560d517","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskDeleteAllProp.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDeleteAllProp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDeleteAllProp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDeleteAllProp.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,7 +21,7 @@\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -40,7 +40,7 @@ public TaskDeleteAllProp(final Input input) {\n     public void delete() {\n \n         if (input.parameterNumber() == 0) {\n-            for (final AbstractTaskTO taskTO : taskSyncopeOperations.listPropagationTask()) {\n+            for (final TaskTO taskTO : taskSyncopeOperations.listPropagationTask()) {\n                 final String taskId = String.valueOf(taskTO.getKey());\n                 try {\n                     taskSyncopeOperations.delete(taskId);"},{"sha":"03bebdddfbed8b6701c90237bb963d6dd9f6cbb5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskDetails.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDetails.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -24,13 +24,13 @@\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.slf4j.Logger;\n@@ -52,12 +52,12 @@ public void details() {\n         if (input.parameterNumber() == 0) {\n             try {\n                 final Map<String, String> details = new LinkedHashMap<>();\n-                final List<AbstractTaskTO> notificationTaskTOs =\n+                final List<TaskTO> notificationTaskTOs =\n                         taskSyncopeOperations.list(TaskType.NOTIFICATION.name());\n-                final List<AbstractTaskTO> propagationTaskTOs = taskSyncopeOperations.list(TaskType.PROPAGATION.name());\n-                final List<AbstractTaskTO> pushTaskTOs = taskSyncopeOperations.list(TaskType.PUSH.name());\n-                final List<AbstractTaskTO> scheduledTaskTOs = taskSyncopeOperations.list(TaskType.SCHEDULED.name());\n-                final List<AbstractTaskTO> pullTaskTOs = taskSyncopeOperations.list(TaskType.PULL.name());\n+                final List<TaskTO> propagationTaskTOs = taskSyncopeOperations.list(TaskType.PROPAGATION.name());\n+                final List<TaskTO> pushTaskTOs = taskSyncopeOperations.list(TaskType.PUSH.name());\n+                final List<TaskTO> scheduledTaskTOs = taskSyncopeOperations.list(TaskType.SCHEDULED.name());\n+                final List<TaskTO> pullTaskTOs = taskSyncopeOperations.list(TaskType.PULL.name());\n                 final List<JobTO> jobTOs = taskSyncopeOperations.listJobs();\n                 final int notificationTaskSize = notificationTaskTOs.size();\n                 final int propagationTaskSize = propagationTaskTOs.size();\n@@ -84,7 +84,7 @@ public void details() {\n \n                 int pullNotExecuted = 0;\n                 int pullFull = 0;\n-                for (final AbstractTaskTO pullTaskTO : pullTaskTOs) {\n+                for (final TaskTO pullTaskTO : pullTaskTOs) {\n                     if (((PullTaskTO) pullTaskTO).getExecutions().isEmpty()) {\n                         pullNotExecuted++;\n                     }"},{"sha":"0c05681029d983affa165ab2d575fc2491138160","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskRead.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -23,7 +23,7 @@\n import javax.xml.ws.WebServiceException;\n import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -41,7 +41,7 @@ public TaskRead(final Input input) {\n \n     public void read() {\n         if (input.parameterNumber() >= 1) {\n-            final List<AbstractTaskTO> taskTOs = new ArrayList<>();\n+            final List<TaskTO> taskTOs = new ArrayList<>();\n             for (final String parameter : input.getParameters()) {\n                 try {\n                     taskTOs.add(taskSyncopeOperations.read(parameter));"},{"sha":"6794a1854526cd24991d8c4938fa75481f050433","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,20 +21,21 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.client.cli.commands.CommonsResultManager;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n \n public class TaskResultManager extends CommonsResultManager {\n \n-    public void printTasks(final List<AbstractTaskTO> taskTOs) {\n+    public void printTasks(final List<TaskTO> taskTOs) {\n         System.out.println(\"\");\n         taskTOs.forEach(taskTO -> {\n             if (taskTO instanceof NotificationTaskTO) {\n@@ -43,15 +44,15 @@ public void printTasks(final List<AbstractTaskTO> taskTOs) {\n                 printPropagationTask((PropagationTaskTO) taskTO);\n             } else if (taskTO instanceof PushTaskTO) {\n                 printPushTask((PushTaskTO) taskTO);\n-            } else if (taskTO instanceof SchedTaskTO) {\n-                printScheduledTask((SchedTaskTO) taskTO);\n+            } else if (taskTO instanceof ProvisioningTaskTO) {\n+                printScheduledTask((ProvisioningTaskTO) taskTO);\n             } else if (taskTO instanceof PullTaskTO) {\n                 printPullTask((PullTaskTO) taskTO);\n             }\n         });\n     }\n \n-    public void printTasksType(final String taskTypeString, final List<AbstractTaskTO> taskTOs) {\n+    public void printTasksType(final String taskTypeString, final List<TaskTO> taskTOs) {\n         System.out.println(\"\");\n         switch (TaskType.valueOf(taskTypeString)) {\n             case NOTIFICATION:"},{"sha":"ad94a4feb77de6160c62a1f85982ce7c449fa7e4","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -36,19 +36,19 @@ public List<JobTO> listJobs() {\n         return taskService.listJobs();\n     }\n \n-    public <T extends AbstractTaskTO> T read(final String taskKey) {\n+    public <T extends TaskTO> T read(final String taskKey) {\n         return taskService.read(taskKey, true);\n     }\n \n     public void delete(final String taskKey) {\n         taskService.delete(taskKey);\n     }\n \n-    public List<AbstractTaskTO> list(final String type) {\n+    public List<TaskTO> list(final String type) {\n         return taskService.list(new TaskQuery.Builder(TaskType.valueOf(type)).build()).getResult();\n     }\n \n-    public List<AbstractTaskTO> listPropagationTask() {\n+    public List<TaskTO> listPropagationTask() {\n         return taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).build()).getResult();\n     }\n "},{"sha":"50f6fe70ed4c3088ced7e35408341c16f7c752f7","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/TaskDataProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FTaskDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FTaskDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FTaskDataProvider.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.client.console.commons;\n \n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.IModel;\n \n-public abstract class TaskDataProvider<T extends AbstractTaskTO> extends DirectoryDataProvider<T> {\n+public abstract class TaskDataProvider<T extends TaskTO> extends DirectoryDataProvider<T> {\n \n     private static final long serialVersionUID = -20112718133295756L;\n "},{"sha":"ff39d88eb4379a6f2502fd64713b961772894849","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSchemaDetailsPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSchemaDetailsPanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.client.console.panels;\n \n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -36,14 +36,14 @@ public abstract class AbstractSchemaDetailsPanel extends Panel {\n \n     protected static final String FORM = \"form\";\n \n-    protected final Form<AbstractSchemaTO> schemaForm;\n+    protected final Form<SchemaTO> schemaForm;\n \n-    protected final AbstractSchemaTO schemaTO;\n+    protected final SchemaTO schemaTO;\n \n     public AbstractSchemaDetailsPanel(\n             final String id,\n             final PageReference pageReference,\n-            final AbstractSchemaTO schemaTO) {\n+            final SchemaTO schemaTO) {\n         super(id);\n \n         this.schemaTO = schemaTO;"},{"sha":"e38bfc6f6aa7e1141b215a2ce350e52289a50716","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":5,"deletions":17,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -48,8 +48,8 @@\n import org.apache.syncope.common.lib.Schema;\n import org.apache.syncope.common.lib.report.SearchCondition;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -66,8 +66,6 @@\n import org.springframework.beans.PropertyAccessorFactory;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ReflectionUtils;\n-import org.springframework.util.ReflectionUtils.FieldCallback;\n-import org.springframework.util.ReflectionUtils.FieldFilter;\n \n public class BeanPanel<T extends Serializable> extends Panel {\n \n@@ -106,19 +104,9 @@ protected List<String> load() {\n                 final List<String> result = new ArrayList<>();\n \n                 if (BeanPanel.this.getDefaultModelObject() != null) {\n-                    ReflectionUtils.doWithFields(BeanPanel.this.getDefaultModelObject().getClass(),\n-                            new FieldCallback() {\n-\n-                        public void doWith(final Field field) throws IllegalArgumentException, IllegalAccessException {\n-                            result.add(field.getName());\n-                        }\n-\n-                    }, new FieldFilter() {\n-\n-                        public boolean matches(final Field field) {\n-                            return !BeanPanel.this.excluded.contains(field.getName());\n-                        }\n-                    });\n+                    ReflectionUtils.doWithFields(BeanPanel.this.getDefaultModelObject().getClass(), field -> {\n+                        result.add(field.getName());\n+                    }, field -> !BeanPanel.this.excluded.contains(field.getName()));\n                 }\n                 return result;\n             }\n@@ -191,7 +179,7 @@ protected void populateItem(final ListItem<String> item) {\n                     if (listItemType.equals(String.class) && schemaAnnot != null) {\n                         SchemaRestClient schemaRestClient = new SchemaRestClient();\n \n-                        final List<AbstractSchemaTO> choices = new ArrayList<>();\n+                        final List<SchemaTO> choices = new ArrayList<>();\n \n                         for (SchemaType type : schemaAnnot.type()) {\n                             switch (type) {"},{"sha":"aefc565108f25a8eb2739d538281208c32123ed0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -37,8 +37,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -300,7 +300,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n     }\n \n-    private void showHide(final AbstractSchemaTO schema, final AjaxDropDownChoicePanel<AttrSchemaType> type,\n+    private void showHide(final SchemaTO schema, final AjaxDropDownChoicePanel<AttrSchemaType> type,\n             final WebMarkupContainer conversionParams, final AjaxTextFieldPanel conversionPattern,\n             final WebMarkupContainer enumParams, final AjaxTextFieldPanel enumerationValuesPanel,\n             final MultiFieldPanel<String> enumerationValues, final MultiFieldPanel<String> enumerationKeys,"},{"sha":"8cb18178764c70b78d3eb1746e276312862b949a","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaModalPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaModalPanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,7 +21,7 @@\n import java.util.Arrays;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n@@ -30,17 +30,17 @@\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.model.Model;\n \n-public class SchemaModalPanel extends AbstractModalPanel<AbstractSchemaTO> {\n+public class SchemaModalPanel extends AbstractModalPanel<SchemaTO> {\n \n     private static final long serialVersionUID = -4681998932778822125L;\n \n     private final AbstractSchemaDetailsPanel schemaPanel;\n \n-    private final AbstractSchemaTO schemaTO;\n+    private final SchemaTO schemaTO;\n \n     public SchemaModalPanel(\n-            final BaseModal<AbstractSchemaTO> modal,\n-            final AbstractSchemaTO schemaTO,\n+            final BaseModal<SchemaTO> modal,\n+            final SchemaTO schemaTO,\n             final PageReference pageRef) {\n         super(modal, pageRef);\n \n@@ -64,13 +64,13 @@ public SchemaModalPanel(\n     }\n \n     private AbstractSchemaDetailsPanel getSchemaPanel(final String id,\n-            final SchemaType schemaType, final BaseModal<AbstractSchemaTO> modal) {\n+            final SchemaType schemaType, final BaseModal<SchemaTO> modal) {\n         final AbstractSchemaDetailsPanel panel;\n \n         if (schemaTO.getKey() != null) {\n             try {\n-                final Class<? extends AbstractSchemaTO> schemaTOClass = schemaType.getToClass();\n-                modal.setFormModel((AbstractSchemaTO) schemaTOClass.newInstance());\n+                final Class<? extends SchemaTO> schemaTOClass = schemaType.getToClass();\n+                modal.setFormModel((SchemaTO) schemaTOClass.newInstance());\n             } catch (InstantiationException | IllegalAccessException ex) {\n                 LOG.error(\"SchemaType not found\", ex);\n             }"},{"sha":"862c761a5e52698d7acd0a69d5547985ce704fce","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wizards.AbstractModalPanelBuilder;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -59,7 +59,7 @@\n import org.apache.wicket.model.ResourceModel;\n import org.springframework.util.ReflectionUtils;\n \n-public class SchemaTypePanel extends TypesDirectoryPanel<AbstractSchemaTO, SchemaProvider, SchemaRestClient> {\n+public class SchemaTypePanel extends TypesDirectoryPanel<SchemaTO, SchemaProvider, SchemaRestClient> {\n \n     private static final long serialVersionUID = 3905038169553185171L;\n \n@@ -88,15 +88,15 @@ public SchemaTypePanel(final String id, final SchemaType schemaType, final PageR\n \n         try {\n             this.addNewItemPanelBuilder(\n-                    new AbstractModalPanelBuilder<AbstractSchemaTO>(schemaType.getToClass().newInstance(), pageRef) {\n+                    new AbstractModalPanelBuilder<SchemaTO>(schemaType.getToClass().newInstance(), pageRef) {\n \n                 private static final long serialVersionUID = -6388405037134399367L;\n \n                 @Override\n-                public WizardModalPanel<AbstractSchemaTO> build(\n+                public WizardModalPanel<SchemaTO> build(\n                         final String id, final int index, final AjaxWizard.Mode mode) {\n \n-                    final AbstractSchemaTO modelObject = newModelObject();\n+                    final SchemaTO modelObject = newModelObject();\n                     return new SchemaModalPanel(modal, modelObject, pageRef) {\n \n                         private static final long serialVersionUID = -6227956682141146095L;\n@@ -147,8 +147,8 @@ protected Collection<ActionLink.ActionType> getBulkActions() {\n     }\n \n     @Override\n-    protected List<IColumn<AbstractSchemaTO, String>> getColumns() {\n-        final List<IColumn<AbstractSchemaTO, String>> columns = new ArrayList<>();\n+    protected List<IColumn<SchemaTO, String>> getColumns() {\n+        final List<IColumn<SchemaTO, String>> columns = new ArrayList<>();\n \n         for (final String field : COL_NAMES.get(schemaType)) {\n             final Field clazzField = ReflectionUtils.findField(schemaType.getToClass(), field);\n@@ -157,7 +157,7 @@ protected List<IColumn<AbstractSchemaTO, String>> getColumns() {\n                 if (clazzField.getType().equals(Boolean.class) || clazzField.getType().equals(boolean.class)) {\n                     columns.add(new BooleanPropertyColumn<>(new ResourceModel(field), field, field));\n                 } else {\n-                    final IColumn<AbstractSchemaTO, String> column = new PropertyColumn<AbstractSchemaTO, String>(\n+                    final IColumn<SchemaTO, String> column = new PropertyColumn<SchemaTO, String>(\n                             new ResourceModel(field), field, field) {\n \n                         private static final long serialVersionUID = 3282547854226892169L;\n@@ -182,24 +182,24 @@ public String getCssClass() {\n     }\n \n     @Override\n-    public ActionsPanel<AbstractSchemaTO> getActions(final IModel<AbstractSchemaTO> model) {\n-        final ActionsPanel<AbstractSchemaTO> panel = super.getActions(model);\n-        panel.add(new ActionLink<AbstractSchemaTO>() {\n+    public ActionsPanel<SchemaTO> getActions(final IModel<SchemaTO> model) {\n+        final ActionsPanel<SchemaTO> panel = super.getActions(model);\n+        panel.add(new ActionLink<SchemaTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final AbstractSchemaTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final SchemaTO ignore) {\n                 send(SchemaTypePanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n         }, ActionLink.ActionType.EDIT, StandardEntitlement.SCHEMA_UPDATE);\n-        panel.add(new ActionLink<AbstractSchemaTO>() {\n+        panel.add(new ActionLink<SchemaTO>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final AbstractSchemaTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final SchemaTO ignore) {\n                 try {\n                     switch (schemaType) {\n                         case DERIVED:\n@@ -229,11 +229,11 @@ public void onClick(final AjaxRequestTarget target, final AbstractSchemaTO ignor\n         return panel;\n     }\n \n-    protected final class SchemaProvider extends DirectoryDataProvider<AbstractSchemaTO> {\n+    protected final class SchemaProvider extends DirectoryDataProvider<SchemaTO> {\n \n         private static final long serialVersionUID = -185944053385660794L;\n \n-        private final SortableDataProviderComparator<AbstractSchemaTO> comparator;\n+        private final SortableDataProviderComparator<SchemaTO> comparator;\n \n         private final SchemaType schemaType;\n \n@@ -248,15 +248,15 @@ private SchemaProvider(final int paginatorRows, final SchemaType schemaType) {\n         }\n \n         @Override\n-        public Iterator<AbstractSchemaTO> iterator(final long first, final long count) {\n-            final List<AbstractSchemaTO> list = restClient.getSchemas(this.schemaType);\n+        public Iterator<SchemaTO> iterator(final long first, final long count) {\n+            final List<SchemaTO> list = restClient.getSchemas(this.schemaType);\n             Collections.sort(list, comparator);\n \n             if (SchemaType.PLAIN == this.schemaType) {\n                 final List<String> configurations = confRestClient.list().stream().\n                         map(AttrTO::getSchema).collect(Collectors.toList());\n \n-                final List<AbstractSchemaTO> res = new ArrayList<>();\n+                final List<SchemaTO> res = new ArrayList<>();\n                 list.stream().\n                         filter(item -> !configurations.contains(item.getKey())).\n                         forEachOrdered(item -> {\n@@ -277,7 +277,7 @@ public long size() {\n         }\n \n         @Override\n-        public IModel<AbstractSchemaTO> model(final AbstractSchemaTO object) {\n+        public IModel<SchemaTO> model(final SchemaTO object) {\n             return new CompoundPropertyModel<>(object);\n         }\n     }"},{"sha":"862747a4d18f4e97afa293d4c1e56df02d8f2e4f","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.console.wizards.any.GroupWrapper;\n import org.apache.syncope.client.console.wizards.any.UserWrapper;\n import org.apache.syncope.client.console.wizards.resources.ResourceProvision;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowDefinitionTO;\n@@ -194,8 +194,8 @@ private String getTargetKey(final Serializable modelObject) {\n             key = ((ReportTO) modelObject).getKey();\n         } else if (modelObject instanceof AttrTO) {\n             key = ((AttrTO) modelObject).getSchemaInfo().getKey();\n-        } else if (modelObject instanceof AbstractPolicyTO) {\n-            key = ((AbstractPolicyTO) modelObject).getKey();\n+        } else if (modelObject instanceof PolicyTO) {\n+            key = ((PolicyTO) modelObject).getKey();\n         } else if (modelObject instanceof SecurityQuestionTO) {\n             key = ((SecurityQuestionTO) modelObject).getKey();\n         } else if (modelObject instanceof AccessTokenTO) {\n@@ -204,8 +204,8 @@ private String getTargetKey(final Serializable modelObject) {\n             key = ((ExecTO) modelObject).getKey();\n         } else if (modelObject instanceof WorkflowDefinitionTO) {\n             key = ((WorkflowDefinitionTO) modelObject).getKey();\n-        } else if (modelObject instanceof SchedTaskTO) {\n-            key = ((SchedTaskTO) modelObject).getKey();\n+        } else if (modelObject instanceof ProvisioningTaskTO) {\n+            key = ((ProvisioningTaskTO) modelObject).getKey();\n         } else if (modelObject instanceof WorkflowFormTO) {\n             key = ((WorkflowFormTO) modelObject).getKey();\n         } else if (modelObject instanceof EntityTO) {"},{"sha":"d4b41f630cc7dbcc1bbd6ccb306258860cde5fc1","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -42,7 +42,7 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -60,7 +60,7 @@\n  *\n  * @param <T> policy type.\n  */\n-public abstract class PolicyDirectoryPanel<T extends AbstractPolicyTO>\n+public abstract class PolicyDirectoryPanel<T extends PolicyTO>\n         extends DirectoryPanel<T, T, DirectoryDataProvider<T>, PolicyRestClient> {\n \n     private static final long serialVersionUID = 4984337552918213290L;\n@@ -140,7 +140,7 @@ public ActionsPanel<T> getActions(final IModel<T> model) {\n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final AbstractPolicyTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 send(PolicyDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n                                 restClient.getPolicy(model.getObject().getKey()), target));\n@@ -152,8 +152,8 @@ public void onClick(final AjaxRequestTarget target, final AbstractPolicyTO ignor\n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final AbstractPolicyTO ignore) {\n-                final AbstractPolicyTO clone = SerializationUtils.clone(model.getObject());\n+            public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n+                final PolicyTO clone = SerializationUtils.clone(model.getObject());\n                 clone.setKey(null);\n                 send(PolicyDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(clone, target));\n@@ -167,7 +167,7 @@ public void onClick(final AjaxRequestTarget target, final AbstractPolicyTO ignor\n             private static final long serialVersionUID = -3722207913631435501L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final AbstractPolicyTO ignore) {\n+            public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 final T policyTO = model.getObject();\n                 try {\n                     restClient.delete(policyTO.getKey());"},{"sha":"75ddd09ed8391f4e4f8b801b4b446a81f637aaaf","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -40,7 +40,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wizards.AbstractModalPanelBuilder;\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n@@ -56,7 +56,7 @@\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n \n-public class PolicyModalPanelBuilder<T extends AbstractPolicyTO> extends AbstractModalPanelBuilder<T> {\n+public class PolicyModalPanelBuilder<T extends PolicyTO> extends AbstractModalPanelBuilder<T> {\n \n     private static final long serialVersionUID = 5945391813567245081L;\n "},{"sha":"6d0bfd5ecd0957cbd69e8f73a69fa80b5e49be37","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -43,8 +43,8 @@\n import org.apache.syncope.client.console.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.policy.ComposablePolicy;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.RuleConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n@@ -70,7 +70,7 @@\n  *\n  * @param <T> policy type.\n  */\n-public class PolicyRuleDirectoryPanel<T extends AbstractPolicyTO> extends DirectoryPanel<\n+public class PolicyRuleDirectoryPanel<T extends PolicyTO> extends DirectoryPanel<\n         PolicyRuleWrapper, PolicyRuleWrapper, DirectoryDataProvider<PolicyRuleWrapper>, PolicyRestClient>\n         implements ModalPanel {\n "},{"sha":"baf2c5103929273207769acbcee21ea480573c88","filename":"client/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.ComposablePolicy;\n import org.apache.syncope.common.lib.policy.RuleConf;\n import org.apache.syncope.common.lib.to.EntityTO;\n@@ -73,7 +73,7 @@ public PolicyRuleWizardBuilder(\n \n     @Override\n     protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n-        AbstractPolicyTO policyTO = restClient.getPolicy(policy);\n+        PolicyTO policyTO = restClient.getPolicy(policy);\n \n         ComposablePolicy composable;\n         if (policyTO instanceof ComposablePolicy) {"},{"sha":"6b0619e238065f32eaae8841602e4fb2e214ac0e","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -23,7 +23,7 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n \n@@ -34,7 +34,7 @@ public class PolicyRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1392090291817187902L;\n \n-    public <T extends AbstractPolicyTO> T getPolicy(final String key) {\n+    public <T extends PolicyTO> T getPolicy(final String key) {\n         T policy = null;\n         try {\n             policy = getService(PolicyService.class).read(key);\n@@ -45,7 +45,7 @@ public <T extends AbstractPolicyTO> T getPolicy(final String key) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractPolicyTO> List<T> getPolicies(final PolicyType type) {\n+    public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n         final List<T> res = new ArrayList<>();\n \n         try {\n@@ -58,24 +58,24 @@ public <T extends AbstractPolicyTO> List<T> getPolicies(final PolicyType type) {\n         return res;\n     }\n \n-    public <T extends AbstractPolicyTO> void createPolicy(final T policy) {\n+    public <T extends PolicyTO> void createPolicy(final T policy) {\n         getService(PolicyService.class).create(policy);\n     }\n \n-    public <T extends AbstractPolicyTO> void updatePolicy(final T policy) {\n+    public <T extends PolicyTO> void updatePolicy(final T policy) {\n         getService(PolicyService.class).update(policy);\n     }\n \n     public void delete(final String key) {\n         getService(PolicyService.class).delete(key);\n     }\n \n-    private class PolicyComparator implements Comparator<AbstractPolicyTO>, Serializable {\n+    private class PolicyComparator implements Comparator<PolicyTO>, Serializable {\n \n         private static final long serialVersionUID = -4921433085213223115L;\n \n         @Override\n-        public int compare(final AbstractPolicyTO left, final AbstractPolicyTO right) {\n+        public int compare(final PolicyTO left, final PolicyTO right) {\n             return left == null ? -1 : right == null ? 1 : left.getDescription().compareTo(right.getDescription());\n         }\n "},{"sha":"b82403fd10d50453de29e4435e78148dd150b27b","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -23,7 +23,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n@@ -42,7 +42,7 @@ public class SchemaRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -2479730152700312373L;\n \n-    public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaType, final AnyTypeKind kind) {\n+    public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final AnyTypeKind kind) {\n         final AnyTypeService client = getService(AnyTypeService.class);\n \n         final List<String> classes = new ArrayList<>();\n@@ -66,7 +66,7 @@ public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaTy\n         return getSchemas(schemaType, classes.toArray(new String[] {}));\n     }\n \n-    public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaType, final String typeName) {\n+    public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final String typeName) {\n         AnyTypeTO type = null;\n \n         try {\n@@ -82,7 +82,7 @@ public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaTy\n         }\n     }\n \n-    public <T extends AbstractSchemaTO> List<T> getSchemas(final SchemaType schemaType, final String... kind) {\n+    public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, final String... kind) {\n         List<T> schemas = new ArrayList<>();\n \n         try {\n@@ -128,11 +128,11 @@ public PlainSchemaTO read(final SchemaType schemaType, final String key) {\n \n     }\n \n-    public void create(final SchemaType schemaType, final AbstractSchemaTO modelObject) {\n+    public void create(final SchemaType schemaType, final SchemaTO modelObject) {\n         getService(SchemaService.class).create(schemaType, modelObject);\n     }\n \n-    public void update(final SchemaType schemaType, final AbstractSchemaTO modelObject) {\n+    public void update(final SchemaType schemaType, final SchemaTO modelObject) {\n         getService(SchemaService.class).update(schemaType, modelObject);\n     }\n "},{"sha":"ced46891918ce85d836408b70bae8b59a8e58531","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Date;\n import java.util.List;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -134,7 +134,7 @@ public List<NotificationTaskTO> listNotificationTasks(\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> List<T> list(\n+    public <T extends TaskTO> List<T> list(\n             final Class<T> reference, final int page, final int size, final SortParam<String> sort) {\n \n         return (List<T>) getService(TaskService.class).\n@@ -144,7 +144,7 @@ public <T extends AbstractTaskTO> List<T> list(\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> List<T> list(\n+    public <T extends TaskTO> List<T> list(\n             final String resource,\n             final Class<T> reference,\n             final int page,\n@@ -194,7 +194,7 @@ public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final S\n         return getService(TaskService.class).read(taskKey, false);\n     }\n \n-    public void delete(final String taskKey, final Class<? extends AbstractTaskTO> taskToClass) {\n+    public void delete(final String taskKey, final Class<? extends TaskTO> taskToClass) {\n         getService(TaskService.class).delete(taskKey);\n     }\n "},{"sha":"2ae10aacb4750fcb179cf81133d560c6457f49ab","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n+import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -41,7 +41,7 @@\n  *\n  * @param <T> Sched task type.\n  */\n-public abstract class ProvisioningTaskDirectoryPanel<T extends AbstractProvisioningTaskTO>\n+public abstract class ProvisioningTaskDirectoryPanel<T extends ProvisioningTaskTO>\n         extends SchedTaskDirectoryPanel<T> {\n \n     private static final long serialVersionUID = 4984337552918213290L;\n@@ -104,7 +104,7 @@ protected List<IColumn<T, String>> getFieldColumns() {\n         return columns;\n     }\n \n-    protected class ProvisioningTasksProvider<T extends AbstractProvisioningTaskTO> extends SchedTasksProvider<T> {\n+    protected class ProvisioningTasksProvider<T extends ProvisioningTaskTO> extends SchedTasksProvider<T> {\n \n         private static final long serialVersionUID = 4725679400450513556L;\n "},{"sha":"ef58d82a8163a6e98d9235383c4c8225f3756379","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -33,8 +33,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wizards.AjaxWizardBuilder;\n-import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -262,7 +262,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             WebMarkupContainer provisioningTaskSpecifics = new WebMarkupContainer(\"provisioningTaskSpecifics\");\n             add(provisioningTaskSpecifics.setRenderBodyOnly(true));\n \n-            if (taskTO instanceof AbstractProvisioningTaskTO) {\n+            if (taskTO instanceof ProvisioningTaskTO) {\n                 jobDelegate.setEnabled(false).setVisible(false);\n             } else {\n                 provisioningTaskSpecifics.setEnabled(false).setVisible(false);"},{"sha":"56a17a9d1cfa232632ba9da272d249846f6b3908","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/TaskDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskDirectoryPanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -41,7 +41,7 @@\n  *\n  * @param <T> task type.\n  */\n-public abstract class TaskDirectoryPanel<T extends AbstractTaskTO>\n+public abstract class TaskDirectoryPanel<T extends TaskTO>\n         extends DirectoryPanel<T, T, TaskDataProvider<T>, TaskRestClient> implements ModalPanel {\n \n     private static final long serialVersionUID = 4984337552918213290L;\n@@ -66,7 +66,7 @@ protected void resultTableCustomChanges(final AjaxDataTablePanel.Builder<T, Stri\n \n     protected abstract void viewTask(T taskTO, AjaxRequestTarget target);\n \n-    protected abstract class TasksProvider<T extends AbstractTaskTO> extends DirectoryDataProvider<T> {\n+    protected abstract class TasksProvider<T extends TaskTO> extends DirectoryDataProvider<T> {\n \n         private static final long serialVersionUID = -20112718133295756L;\n "},{"sha":"ef243f3335a3dc7768cd9dba0f4dcef2b8fc3fa2","filename":"client/console/src/main/java/org/apache/syncope/client/console/tasks/TaskExecutionDetails.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutionDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutionDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FTaskExecutionDetails.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.rest.TaskRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n \n@@ -30,7 +30,7 @@\n  *\n  * @param <T> actual type of task\n  */\n-public class TaskExecutionDetails<T extends AbstractTaskTO> extends MultilevelPanel.SecondLevel {\n+public class TaskExecutionDetails<T extends TaskTO> extends MultilevelPanel.SecondLevel {\n \n     private static final long serialVersionUID = -4110576026663173545L;\n "},{"sha":"4d63c3edc3fe94012b8e2c3a0e234ec9b7265375","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -37,11 +37,11 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n-import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.WorkflowDefinitionTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.wicket.PageReference;\n@@ -93,8 +93,8 @@ public void updateHeader(\n             header = ((ReportTO) modelObject).getName();\n         } else if (modelObject instanceof AttrTO) {\n             header = ((AttrTO) modelObject).getSchema();\n-        } else if (modelObject instanceof AbstractPolicyTO) {\n-            header = ((AbstractPolicyTO) modelObject).getDescription();\n+        } else if (modelObject instanceof PolicyTO) {\n+            header = ((PolicyTO) modelObject).getDescription();\n         } else if (modelObject instanceof SecurityQuestionTO) {\n             header = ((SecurityQuestionTO) modelObject).getContent();\n         } else if (modelObject instanceof AccessTokenTO) {\n@@ -103,8 +103,8 @@ public void updateHeader(\n             header = ((ExecTO) modelObject).getKey();\n         } else if (modelObject instanceof WorkflowDefinitionTO) {\n             header = ((WorkflowDefinitionTO) modelObject).getName();\n-        } else if (modelObject instanceof SchedTaskTO) {\n-            header = ((SchedTaskTO) modelObject).getName();\n+        } else if (modelObject instanceof ProvisioningTaskTO) {\n+            header = ((ProvisioningTaskTO) modelObject).getName();\n         } else if (modelObject instanceof WorkflowFormTO) {\n             header = ((WorkflowFormTO) modelObject).getKey();\n         } else if (modelObject instanceof EntityTO) {"},{"sha":"ba77916286ea800e20d4286a4cb61c7ec6e89b57","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.types.JobType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -404,8 +405,8 @@ public void onClick(final AjaxRequestTarget target, final JobTO ignore) {\n                             break;\n \n                         case TASK:\n-                            SchedTaskTO schedTaskTO = new TaskRestClient().\n-                                    readSchedTask(SchedTaskTO.class, jobTO.getRefKey());\n+                            ProvisioningTaskTO schedTaskTO = new TaskRestClient().\n+                                    readSchedTask(ProvisioningTaskTO.class, jobTO.getRefKey());\n \n                             SchedTaskWizardBuilder<SchedTaskTO> swb =\n                                     new SchedTaskWizardBuilder<>(schedTaskTO, pageRef);"},{"sha":"eb7645bf9b6f021510247fdef60f7e6b0f81316c","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n@@ -48,7 +48,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n \n-public abstract class AbstractAttrs<S extends AbstractSchemaTO> extends WizardStep implements ICondition {\n+public abstract class AbstractAttrs<S extends SchemaTO> extends WizardStep implements ICondition {\n \n     private static final long serialVersionUID = -5387344116983102292L;\n "},{"sha":"72ba53d0020325b53b5cf28b7e3953ae2180f8ab","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,9 +21,11 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.PolicyRenderer;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -74,11 +76,8 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            Map<String, String> res = new HashMap<>();\n-            policyRestClient.getPolicies(PolicyType.PULL).forEach(policyTO -> {\n-                res.put(policyTO.getKey(), policyTO.getDescription());\n-            });\n-            return res;\n+            return policyRestClient.getPolicies(PolicyType.PULL).stream().\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n "},{"sha":"e59374e8af5369aee159c5e8b675150b29050d15","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/model/SchemaResponse.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FSchemaResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FSchemaResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FSchemaResponse.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,56 +21,56 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n \n public class SchemaResponse implements Serializable {\n \n     private static final long serialVersionUID = -8896862106241712829L;\n \n-    private List<AbstractSchemaTO> plainSchemas = new ArrayList<>();\n+    private List<SchemaTO> plainSchemas = new ArrayList<>();\n \n-    private List<AbstractSchemaTO> derSchemas = new ArrayList<>();\n+    private List<SchemaTO> derSchemas = new ArrayList<>();\n \n-    private List<AbstractSchemaTO> virSchemas = new ArrayList<>();\n+    private List<SchemaTO> virSchemas = new ArrayList<>();\n \n     public SchemaResponse() {\n     }\n \n-    public List<AbstractSchemaTO> getPlainSchemas() {\n+    public List<SchemaTO> getPlainSchemas() {\n         return plainSchemas;\n     }\n \n-    public void setPlainSchemas(final List<AbstractSchemaTO> plainSchemas) {\n+    public void setPlainSchemas(final List<SchemaTO> plainSchemas) {\n         this.plainSchemas = plainSchemas;\n     }\n \n-    public List<AbstractSchemaTO> getDerSchemas() {\n+    public List<SchemaTO> getDerSchemas() {\n         return derSchemas;\n     }\n \n-    public void setDerSchemas(final List<AbstractSchemaTO> derSchemas) {\n+    public void setDerSchemas(final List<SchemaTO> derSchemas) {\n         this.derSchemas = derSchemas;\n     }\n \n-    public List<AbstractSchemaTO> getVirSchemas() {\n+    public List<SchemaTO> getVirSchemas() {\n         return virSchemas;\n     }\n \n-    public void setVirSchemas(final List<AbstractSchemaTO> virSchemas) {\n+    public void setVirSchemas(final List<SchemaTO> virSchemas) {\n         this.virSchemas = virSchemas;\n     }\n \n-    public SchemaResponse plainSchemas(final List<AbstractSchemaTO> value) {\n+    public SchemaResponse plainSchemas(final List<SchemaTO> value) {\n         this.plainSchemas = value;\n         return this;\n     }\n \n-    public SchemaResponse derSchemas(final List<AbstractSchemaTO> value) {\n+    public SchemaResponse derSchemas(final List<SchemaTO> value) {\n         this.derSchemas = value;\n         return this;\n     }\n \n-    public SchemaResponse virSchemas(final List<AbstractSchemaTO> value) {\n+    public SchemaResponse virSchemas(final List<SchemaTO> value) {\n         this.virSchemas = value;\n         return this;\n     }"},{"sha":"f6af472ba9976d38f2f40a39e312ce5b7e8cc5cb","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.client.enduser.model.CustomAttribute;\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.model.SchemaResponse;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -91,36 +91,36 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n             Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();\n \n             SchemaService schemaService = SyncopeEnduserSession.get().getService(SchemaService.class);\n-            final List<AbstractSchemaTO> plainSchemas = classes.isEmpty()\n-                    ? Collections.<AbstractSchemaTO>emptyList()\n+            final List<SchemaTO> plainSchemas = classes.isEmpty()\n+                    ? Collections.<SchemaTO>emptyList()\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.PLAIN.name()) == null\n                     ? schemaService.list(\n                             new SchemaQuery.Builder().type(SchemaType.PLAIN).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.PLAIN.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.PLAIN).\n                             anyTypeClasses(classes).build()), group, customForm.get(SchemaType.PLAIN.name()).\n                             getAttributes())\n-                    : Collections.<AbstractSchemaTO>emptyList();\n-            final List<AbstractSchemaTO> derSchemas = classes.isEmpty()\n-                    ? Collections.<AbstractSchemaTO>emptyList()\n+                    : Collections.<SchemaTO>emptyList();\n+            final List<SchemaTO> derSchemas = classes.isEmpty()\n+                    ? Collections.<SchemaTO>emptyList()\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.DERIVED.name()) == null\n                     ? schemaService.list(\n                             new SchemaQuery.Builder().type(SchemaType.DERIVED).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.DERIVED.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.DERIVED).\n                             anyTypeClasses(classes).build()), group, customForm.get(SchemaType.DERIVED.name()).\n                             getAttributes())\n-                    : Collections.<AbstractSchemaTO>emptyList();\n-            final List<AbstractSchemaTO> virSchemas = classes.isEmpty()\n-                    ? Collections.<AbstractSchemaTO>emptyList()\n+                    : Collections.<SchemaTO>emptyList();\n+            final List<SchemaTO> virSchemas = classes.isEmpty()\n+                    ? Collections.<SchemaTO>emptyList()\n                     : customForm == null || customForm.isEmpty() || customForm.get(SchemaType.VIRTUAL.name()) == null\n                     ? schemaService.list(\n                             new SchemaQuery.Builder().type(SchemaType.VIRTUAL).anyTypeClasses(classes).build())\n                     : customForm.get(SchemaType.VIRTUAL.name()).isShow()\n                     ? customizeSchemas(schemaService.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).\n                             anyTypeClasses(classes).build()), group, customForm.get(SchemaType.VIRTUAL.name()).\n                             getAttributes())\n-                    : Collections.<AbstractSchemaTO>emptyList();\n+                    : Collections.<SchemaTO>emptyList();\n \n             if (group != null) {\n                 plainSchemas.forEach(schema -> {\n@@ -158,8 +158,8 @@ public void writeData(final IResource.Attributes attributes) throws IOException\n         return response;\n     }\n \n-    private List<AbstractSchemaTO> customizeSchemas(\n-            final List<AbstractSchemaTO> schemaTOs,\n+    private List<SchemaTO> customizeSchemas(\n+            final List<SchemaTO> schemaTOs,\n             final String groupParam,\n             final Map<String, CustomAttribute> customForm) {\n "},{"sha":"8186c4ff4fd2b270721104bd62b39abd72be2238","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -34,7 +34,7 @@\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n import org.apache.cxf.staxutils.DocumentDepthProperties;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -102,7 +102,7 @@ protected JAXBElementProvider<?> defaultJAXBProvider() {\n         defaultJAXBProvider.setMarshallerProperties(marshallerProperties);\n \n         Map<String, String> collectionWrapperMap = new HashMap<>();\n-        collectionWrapperMap.put(AbstractPolicyTO.class.getName(), \"policies\");\n+        collectionWrapperMap.put(PolicyTO.class.getName(), \"policies\");\n         defaultJAXBProvider.setCollectionWrapperMap(collectionWrapperMap);\n \n         return defaultJAXBProvider;"},{"sha":"82d5c72710bb93a75ac9a0faeddd547e763a10ca","filename":"common/lib/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fpom.xml?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -48,6 +48,11 @@ under the License.\n       <artifactId>cxf-rt-rs-extension-search</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>io.swagger.core.v3</groupId>\n+      <artifactId>swagger-annotations</artifactId>\n+    </dependency>      \n+\n     <dependency>\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-annotations</artifactId>"},{"sha":"4562f702b12a55cf96bd1cd4c3f754b7acba8d00","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AbstractBaseBean.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAbstractBaseBean.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -25,15 +25,15 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n @XmlType\n // Reporting here only classes used via PagedResult\n-@XmlSeeAlso({ AbstractTaskTO.class, ReportTO.class, GroupTO.class, UserTO.class, AnyObjectTO.class })\n+@XmlSeeAlso({ TaskTO.class, ReportTO.class, GroupTO.class, UserTO.class, AnyObjectTO.class })\n public abstract class AbstractBaseBean implements Serializable {\n \n     private static final long serialVersionUID = 3119542005279892164L;"},{"sha":"6f72065d9638e925cd8cf886302bb9a6c77893b7","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AbstractPatchItem.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatchItem.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.lib.patch;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n \n@@ -39,6 +41,8 @@ public B value(final T value) {\n \n     private T value;\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public T getValue() {\n         return value;\n     }"},{"sha":"9a37cae3f5af7f1fab3c79fe9e500542f0401f50","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyObjectPatch.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.lib.patch;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.HashSet;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n@@ -38,6 +39,13 @@ public class AnyObjectPatch extends AnyPatch {\n \n     private final Set<MembershipPatch> memberships = new HashSet<>();\n \n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.patch.AnyObjectPatch\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public StringReplacePatchItem getName() {\n         return name;\n     }"},{"sha":"136c8ced400c40010461f8edad704bcaeddd0e13","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyPatch.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,20 +20,33 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.HashSet;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.to.AttrTO;\n \n @XmlType\n+@XmlSeeAlso({ UserPatch.class, GroupPatch.class, AnyObjectPatch.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n+@JsonPropertyOrder(value = { \"@class\", \"key\" })\n+@Schema(subTypes = { UserPatch.class, GroupPatch.class, AnyObjectPatch.class }, discriminatorProperty = \"@class\")\n public abstract class AnyPatch extends AbstractBaseBean implements AttributablePatch {\n \n     private static final long serialVersionUID = -7445489774552440544L;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    private String discriminator;\n+\n     private String key;\n \n     private StringReplacePatchItem realm;\n@@ -46,6 +59,15 @@ public abstract class AnyPatch extends AbstractBaseBean implements AttributableP\n \n     private final Set<StringPatchItem> resources = new HashSet<>();\n \n+    @Schema(name = \"@class\", required = true, readOnly = false)\n+    public abstract String getDiscriminator();\n+\n+    public void setDiscriminator(final String discriminator) {\n+        // do nothing\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getKey() {\n         return key;\n     }"},{"sha":"0ddddfb9f9084d922eff4e99257b9d14ac8fe963","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,6 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -52,6 +53,13 @@ public class GroupPatch extends AnyPatch {\n \n     private final List<TypeExtensionTO> typeExtensions = new ArrayList<>();\n \n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.patch.GroupPatch\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public StringReplacePatchItem getName() {\n         return name;\n     }"},{"sha":"c9e7038aa3bd268a7edecf7b1616306e86e6958c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/UserPatch.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.common.lib.patch;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.HashSet;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n@@ -48,6 +49,13 @@ public class UserPatch extends AnyPatch {\n \n     private final Set<StringPatchItem> roles = new HashSet<>();\n \n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.patch.UserPatch\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public StringReplacePatchItem getUsername() {\n         return username;\n     }"},{"sha":"bf05ea32e309d35111076baad3cf260454a7723e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountPolicyTO.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountPolicyTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,16 +19,18 @@\n package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlRootElement(name = \"accountPolicy\")\n @XmlType\n-public class AccountPolicyTO extends AbstractPolicyTO implements ComposablePolicy {\n+public class AccountPolicyTO extends PolicyTO implements ComposablePolicy {\n \n     private static final long serialVersionUID = -1557150042828800134L;\n \n@@ -40,6 +42,14 @@ public class AccountPolicyTO extends AbstractPolicyTO implements ComposablePolic\n \n     private final List<String> passthroughResources = new ArrayList<>();\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.policy.AccountPolicyTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public boolean isPropagateSuspension() {\n         return propagateSuspension;\n     }"},{"sha":"9f7107234c881cd42f7e2625dcc92721bf5984e1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordPolicyTO.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordPolicyTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,16 +19,18 @@\n package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlRootElement(name = \"passwordPolicy\")\n @XmlType\n-public class PasswordPolicyTO extends AbstractPolicyTO implements ComposablePolicy {\n+public class PasswordPolicyTO extends PolicyTO implements ComposablePolicy {\n \n     private static final long serialVersionUID = -5606086441294799690L;\n \n@@ -38,6 +40,14 @@ public class PasswordPolicyTO extends AbstractPolicyTO implements ComposablePoli\n \n     private final List<String> rules = new ArrayList<>();\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.policy.PasswordPolicyTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public boolean isAllowNullPassword() {\n         return allowNullPassword;\n     }"},{"sha":"f8ef9786d6bbe15443c478197ed4a0ce94c3e2c2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PolicyTO.java","status":"renamed","additions":26,"deletions":3,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPolicyTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,26 +19,37 @@\n package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.to.EntityTO;\n \n-@XmlRootElement(name = \"abstractPolicy\")\n+@XmlRootElement(name = \"policy\")\n @XmlType\n @XmlSeeAlso({ AccountPolicyTO.class, PasswordPolicyTO.class, PullPolicyTO.class })\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public abstract class AbstractPolicyTO extends AbstractBaseBean implements EntityTO {\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n+@JsonPropertyOrder(value = { \"@class\", \"key\", \"description\" })\n+@Schema(\n+        subTypes = { AccountPolicyTO.class, PasswordPolicyTO.class, PullPolicyTO.class },\n+        discriminatorProperty = \"@class\")\n+public abstract class PolicyTO extends AbstractBaseBean implements EntityTO {\n \n     private static final long serialVersionUID = -2903888572649721035L;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    private String discriminator;\n+\n     private String key;\n \n     private String description;\n@@ -47,6 +58,14 @@ public abstract class AbstractPolicyTO extends AbstractBaseBean implements Entit\n \n     private final List<String> usedByRealms = new ArrayList<>();\n \n+    @Schema(name = \"@class\", required = true, readOnly = false)\n+    public abstract String getDiscriminator();\n+\n+    public void setDiscriminator(final String discriminator) {\n+        // do nothing\n+    }\n+\n+    @Schema(readOnly = true)\n     @Override\n     public String getKey() {\n         return key;\n@@ -58,6 +77,8 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getDescription() {\n         return description;\n     }\n@@ -66,13 +87,15 @@ public void setDescription(final String description) {\n         this.description = description;\n     }\n \n+    @Schema(readOnly = true)\n     @XmlElementWrapper(name = \"usedByResources\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"usedByResources\")\n     public List<String> getUsedByResources() {\n         return usedByResources;\n     }\n \n+    @Schema(readOnly = true)\n     @XmlElementWrapper(name = \"usedByRealms\")\n     @XmlElement(name = \"group\")\n     @JsonProperty(\"usedByRealms\")","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractPolicyTO.java"},{"sha":"6ac847abf4bf5a43c56ef8fb9607c41bb8db2105","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PullPolicyTO.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullPolicyTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,22 +19,32 @@\n package org.apache.syncope.common.lib.policy;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.HashMap;\n import java.util.Map;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n \n @XmlRootElement(name = \"pullPolicy\")\n @XmlType\n-public class PullPolicyTO extends AbstractPolicyTO {\n+public class PullPolicyTO extends PolicyTO {\n \n     private static final long serialVersionUID = 993024634238024242L;\n \n     private ConflictResolutionAction conflictResolutionAction;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.policy.PullPolicyTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n     private final Map<String, String> correlationRules = new HashMap<>();\n "},{"sha":"b9b71ba7282d39bc741ad778cf5d545b035bdd98","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractAnnotatedBean.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractAnnotatedBean.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.common.lib.AbstractBaseBean;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.commons.lang3.StringUtils;\n@@ -64,6 +65,7 @@ public class AbstractAnnotatedBean extends AbstractBaseBean {\n      */\n     private Date lastChangeDate;\n \n+    @Schema(readOnly = true)\n     public String getCreator() {\n         return creator;\n     }\n@@ -72,6 +74,7 @@ public void setCreator(final String creator) {\n         this.creator = creator;\n     }\n \n+    @Schema(readOnly = true)\n     public Date getCreationDate() {\n         if (creationDate != null) {\n             return new Date(creationDate.getTime());\n@@ -87,6 +90,7 @@ public void setCreationDate(final Date creationDate) {\n         }\n     }\n \n+    @Schema(readOnly = true)\n     public String getLastModifier() {\n         return lastModifier;\n     }\n@@ -95,6 +99,7 @@ public void setLastModifier(final String lastModifier) {\n         this.lastModifier = lastModifier;\n     }\n \n+    @Schema(readOnly = true)\n     public Date getLastChangeDate() {\n         if (lastChangeDate != null) {\n             return new Date(lastChangeDate.getTime());"},{"sha":"9a65fa3dd412e3e32e83c639d46e38d00efba59f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractStartEndBean.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n@@ -31,6 +32,7 @@ public class AbstractStartEndBean extends AbstractBaseBean {\n \n     private Date end;\n \n+    @Schema(readOnly = true)\n     public Date getStart() {\n         return start == null\n                 ? null\n@@ -43,6 +45,7 @@ public void setStart(final Date start) {\n                 : new Date(start.getTime());\n     }\n \n+    @Schema(readOnly = true)\n     public Date getEnd() {\n         return end == null\n                 ? null"},{"sha":"61c717367c65c15bdd64994712c73aa043dff9de","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyObjectTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyObjectTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,12 +20,14 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlRootElement(name = \"anyObject\")\n@@ -42,6 +44,14 @@ public class AnyObjectTO extends AnyTO implements GroupableRelatableTO {\n \n     private final List<MembershipTO> dynMemberships = new ArrayList<>();\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.AnyObjectTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public String getName() {\n         return name;\n     }\n@@ -80,6 +90,7 @@ public List<MembershipTO> getMemberships() {\n         return memberships;\n     }\n \n+    @Schema(readOnly = true)\n     @XmlElementWrapper(name = \"dynMemberships\")\n     @XmlElement(name = \"dynMembership\")\n     @JsonProperty(\"dynMemberships\")"},{"sha":"b29c6e489b3380dd1a4dabc8ea9444c23e17977a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,7 +20,9 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n@@ -29,15 +31,22 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlType\n @XmlSeeAlso({ UserTO.class, GroupTO.class, AnyObjectTO.class })\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n+@JsonPropertyOrder(value = { \"@class\", \"key\", \"type\", \"realm\", \"username\", \"name\" })\n+@Schema(subTypes = { UserTO.class, GroupTO.class, AnyObjectTO.class }, discriminatorProperty = \"@class\")\n public abstract class AnyTO extends AbstractAnnotatedBean implements EntityTO, AttributableTO {\n \n     private static final long serialVersionUID = -754311920679872084L;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    private String discriminator;\n+\n     private String key;\n \n     private String type;\n@@ -58,6 +67,14 @@ public abstract class AnyTO extends AbstractAnnotatedBean implements EntityTO, A\n \n     private final Set<String> resources = new HashSet<>();\n \n+    @Schema(name = \"@class\", required = true, readOnly = false)\n+    public abstract String getDiscriminator();\n+\n+    public void setDiscriminator(final String discriminator) {\n+        // do nothing\n+    }\n+\n+    @Schema(readOnly = true)\n     @Override\n     public String getKey() {\n         return key;\n@@ -68,6 +85,7 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    @Schema(readOnly = true)\n     public String getType() {\n         return type;\n     }\n@@ -84,13 +102,15 @@ public void setRealm(final String realm) {\n         this.realm = realm;\n     }\n \n+    @Schema(readOnly = true)\n     @XmlElementWrapper(name = \"dynRealms\")\n     @XmlElement(name = \"dynRealmF\")\n     @JsonProperty(\"dynRealms\")\n     public List<String> getDynRealms() {\n         return dynRealms;\n     }\n \n+    @Schema(readOnly = true)\n     public String getStatus() {\n         return status;\n     }"},{"sha":"82a47dacea8eddc6e8bf588564ca9ecb1eb42db6","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.common.lib.AbstractBaseBean;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -45,7 +46,7 @@ public Builder schema(final String schema) {\n             return this;\n         }\n \n-        public Builder schemaInfo(final AbstractSchemaTO schemaInfo) {\n+        public Builder schemaInfo(final SchemaTO schemaInfo) {\n             instance.schemaInfo = schemaInfo;\n             return this;\n         }\n@@ -73,7 +74,7 @@ public AttrTO build() {\n     /**\n      * (Optional) schema information for this attribute.\n      */\n-    private AbstractSchemaTO schemaInfo;\n+    private SchemaTO schemaInfo;\n \n     /**\n      * Name of the schema that this attribute is referring to.\n@@ -88,17 +89,20 @@ public AttrTO build() {\n     /**\n      * @return schema information for this attribute; may be {@code NULL}\n      */\n-    public AbstractSchemaTO getSchemaInfo() {\n+    @Schema(readOnly = true)\n+    public SchemaTO getSchemaInfo() {\n         return schemaInfo;\n     }\n \n-    public void setSchemaInfo(final AbstractSchemaTO schemaInfo) {\n+    public void setSchemaInfo(final SchemaTO schemaInfo) {\n         this.schemaInfo = schemaInfo;\n     }\n \n     /**\n      * @return the name of the schema that this attribute is referring to\n      */\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getSchema() {\n         return schema;\n     }\n@@ -115,9 +119,9 @@ public void setSchema(final String schema) {\n     /**\n      * @return attribute values as strings\n      */\n-    @XmlElementWrapper(name = \"values\")\n-    @XmlElement(name = \"value\")\n-    @JsonProperty(\"values\")\n+    @XmlElementWrapper(name = \"values\", required = true)\n+    @XmlElement(name = \"value\", required = true)\n+    @JsonProperty(value = \"values\", required = true)\n     public List<String> getValues() {\n         return values;\n     }"},{"sha":"d2242b5909d651118e384506497bdf2d204a29b9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/DerSchemaTO.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDerSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDerSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDerSchemaTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,17 +18,28 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n \n-@XmlRootElement(name = \"derivedSchema\")\n+@XmlRootElement(name = \"derSchema\")\n @XmlType\n-public class DerSchemaTO extends AbstractSchemaTO {\n+public class DerSchemaTO extends SchemaTO {\n \n     private static final long serialVersionUID = -6747399803792103108L;\n \n     private String expression;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.DerSchemaTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public String getExpression() {\n         return expression;\n     }"},{"sha":"e1de0d77215c5bfd4fb0486aace0ecd42d16ae16","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,6 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -28,6 +29,7 @@\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n@@ -60,6 +62,14 @@ public class GroupTO extends AnyTO {\n \n     private final List<TypeExtensionTO> typeExtensions = new ArrayList<>();\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.GroupTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     @Override\n     public String getType() {\n         return AnyTypeKind.GROUP.name();\n@@ -102,6 +112,7 @@ public void setUDynMembershipCond(final String uDynMembershipCond) {\n         this.udynMembershipCond = uDynMembershipCond;\n     }\n \n+    @Schema(readOnly = true)\n     public int getStaticUserMembershipCount() {\n         return staticUserMembershipCount;\n     }\n@@ -110,6 +121,7 @@ public void setStaticUserMembershipCount(final int staticUserMembershipCount) {\n         this.staticUserMembershipCount = staticUserMembershipCount;\n     }\n \n+    @Schema(readOnly = true)\n     public int getDynamicUserMembershipCount() {\n         return dynamicUserMembershipCount;\n     }\n@@ -118,6 +130,7 @@ public void setDynamicUserMembershipCount(final int dynamicUserMembershipCount)\n         this.dynamicUserMembershipCount = dynamicUserMembershipCount;\n     }\n \n+    @Schema(readOnly = true)\n     public int getStaticAnyObjectMembershipCount() {\n         return staticAnyObjectMembershipCount;\n     }\n@@ -126,6 +139,7 @@ public void setStaticAnyObjectMembershipCount(final int staticAnyObjectMembershi\n         this.staticAnyObjectMembershipCount = staticAnyObjectMembershipCount;\n     }\n \n+    @Schema(readOnly = true)\n     public int getDynamicAnyObjectMembershipCount() {\n         return dynamicAnyObjectMembershipCount;\n     }"},{"sha":"0f6b4f17e88b64c5489d009c0a5f2056430713da","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/NotificationTaskTO.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FNotificationTaskTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,18 +19,20 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.HashSet;\n import java.util.Set;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.TraceLevel;\n \n @XmlRootElement(name = \"notificationTask\")\n @XmlType\n-public class NotificationTaskTO extends AbstractTaskTO {\n+public class NotificationTaskTO extends TaskTO {\n \n     private static final long serialVersionUID = 371671242591093846L;\n \n@@ -54,6 +56,15 @@ public class NotificationTaskTO extends AbstractTaskTO {\n \n     private TraceLevel traceLevel;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.NotificationTaskTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    @Schema(readOnly = true)\n     public String getNotification() {\n         return notification;\n     }\n@@ -62,6 +73,7 @@ public void setNotification(final String notification) {\n         this.notification = notification;\n     }\n \n+    @Schema(readOnly = true)\n     public AnyTypeKind getAnyTypeKind() {\n         return anyTypeKind;\n     }\n@@ -70,6 +82,7 @@ public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n+    @Schema(readOnly = true)\n     public String getEntityKey() {\n         return entityKey;\n     }\n@@ -78,13 +91,15 @@ public void setEntityKey(final String entityKey) {\n         this.entityKey = entityKey;\n     }\n \n+    @Schema(readOnly = true)\n     @XmlElementWrapper(name = \"recipients\")\n     @XmlElement(name = \"recipient\")\n     @JsonProperty(\"recipients\")\n     public Set<String> getRecipients() {\n         return recipients;\n     }\n \n+    @Schema(readOnly = true)\n     public String getSender() {\n         return sender;\n     }\n@@ -93,6 +108,7 @@ public void setSender(final String sender) {\n         this.sender = sender;\n     }\n \n+    @Schema(readOnly = true)\n     public String getSubject() {\n         return subject;\n     }\n@@ -101,6 +117,7 @@ public void setSubject(final String subject) {\n         this.subject = subject;\n     }\n \n+    @Schema(readOnly = true)\n     public String getTextBody() {\n         return textBody;\n     }\n@@ -109,6 +126,7 @@ public void setTextBody(final String textBody) {\n         this.textBody = textBody;\n     }\n \n+    @Schema(readOnly = true)\n     public String getHtmlBody() {\n         return htmlBody;\n     }\n@@ -117,6 +135,7 @@ public void setHtmlBody(final String htmlBody) {\n         this.htmlBody = htmlBody;\n     }\n \n+    @Schema(readOnly = true)\n     public boolean isExecuted() {\n         return executed;\n     }\n@@ -125,6 +144,7 @@ public void setExecuted(final boolean executed) {\n         this.executed = executed;\n     }\n \n+    @Schema(readOnly = true)\n     public TraceLevel getTraceLevel() {\n         return traceLevel;\n     }"},{"sha":"2eba6f65848b649a7b960b74ae6d3293d3d42534","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PlainSchemaTO.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPlainSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPlainSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPlainSchemaTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,16 +18,19 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n \n-@XmlRootElement(name = \"schema\")\n+@XmlRootElement(name = \"plainSchema\")\n @XmlType\n-public class PlainSchemaTO extends AbstractSchemaTO {\n+public class PlainSchemaTO extends SchemaTO {\n \n     private static final long serialVersionUID = -8133983392476990308L;\n \n@@ -55,6 +58,14 @@ public class PlainSchemaTO extends AbstractSchemaTO {\n \n     private String mimeType;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.PlainSchemaTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public String getConversionPattern() {\n         return conversionPattern;\n     }"},{"sha":"66f804e30f7d6b076d36144105ddf43c152ba581","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PropagationTaskTO.java","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPropagationTaskTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,14 +18,18 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n \n @XmlRootElement(name = \"propagationTask\")\n @XmlType\n-public class PropagationTaskTO extends AbstractTaskTO {\n+public class PropagationTaskTO extends TaskTO {\n \n     private static final long serialVersionUID = 386450127003321197L;\n \n@@ -47,6 +51,16 @@ public class PropagationTaskTO extends AbstractTaskTO {\n \n     private String entityKey;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.PropagationTaskTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getConnObjectKey() {\n         return connObjectKey;\n     }\n@@ -63,6 +77,8 @@ public void setOldConnObjectKey(final String oldConnObjectKey) {\n         this.oldConnObjectKey = oldConnObjectKey;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getResource() {\n         return resource;\n     }\n@@ -71,6 +87,8 @@ public void setResource(final String resource) {\n         this.resource = resource;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public ResourceOperation getOperation() {\n         return operation;\n     }\n@@ -79,6 +97,8 @@ public void setOperation(final ResourceOperation operation) {\n         this.operation = operation;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getAttributes() {\n         return attributes;\n     }\n@@ -87,6 +107,8 @@ public void setAttributes(final String attributes) {\n         this.attributes = attributes;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getObjectClassName() {\n         return objectClassName;\n     }\n@@ -95,6 +117,8 @@ public void setObjectClassName(final String objectClassName) {\n         this.objectClassName = objectClassName;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public AnyTypeKind getAnyTypeKind() {\n         return anyTypeKind;\n     }\n@@ -103,6 +127,8 @@ public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getAnyType() {\n         return anyType;\n     }\n@@ -111,6 +137,8 @@ public void setAnyType(final String anyType) {\n         this.anyType = anyType;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getEntityKey() {\n         return entityKey;\n     }"},{"sha":"c152190ccfada13382d6242ff967f84965522f97","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisioningTaskTO.java","status":"renamed","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisioningTaskTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,22 +19,25 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n+\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n \n-@XmlRootElement(name = \"abstractProvisioningTask\")\n+@XmlRootElement(name = \"provisioningTask\")\n @XmlType\n @XmlSeeAlso({ PushTaskTO.class, PullTaskTO.class })\n-public class AbstractProvisioningTaskTO extends SchedTaskTO {\n+@Schema(subTypes = { PushTaskTO.class, PullTaskTO.class }, discriminatorProperty = \"@class\")\n+public abstract class ProvisioningTaskTO extends SchedTaskTO {\n \n-    private static final long serialVersionUID = -2143537546915809016L;\n+    private static final long serialVersionUID = -5722284116974636425L;\n \n     private String resource;\n \n@@ -52,6 +55,8 @@ public class AbstractProvisioningTaskTO extends SchedTaskTO {\n \n     private final List<String> actions = new ArrayList<>();\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getResource() {\n         return resource;\n     }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractProvisioningTaskTO.java"},{"sha":"16e578dc3ba0258747191cd1ee58a1cd3f049bbd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PullTaskTO.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPullTaskTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,11 +19,14 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.HashMap;\n import java.util.Map;\n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n@@ -32,16 +35,28 @@\n @XmlRootElement(name = \"pullTask\")\n @XmlType\n @XmlAccessorType(XmlAccessType.FIELD)\n-public class PullTaskTO extends AbstractProvisioningTaskTO implements TemplatableTO {\n+public class PullTaskTO extends ProvisioningTaskTO implements TemplatableTO {\n \n     private static final long serialVersionUID = -2143537546915809017L;\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     private PullMode pullMode;\n \n     private String reconFilterBuilder;\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     private String destinationRealm;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.PullTaskTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n     private final Map<String, AnyTO> templates = new HashMap<>();\n "},{"sha":"2dc02c1522032c84df75eb114b85b024d76c3d72","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/PushTaskTO.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FPushTaskTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,27 +19,40 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.HashMap;\n import java.util.Map;\n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"pushTask\")\n @XmlType\n @XmlAccessorType(XmlAccessType.FIELD)\n-public class PushTaskTO extends AbstractProvisioningTaskTO {\n+public class PushTaskTO extends ProvisioningTaskTO {\n \n     private static final long serialVersionUID = -2143537546915809018L;\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     private String sourceRealm;\n \n     @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n     private final Map<String, String> filters = new HashMap<>();\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.PushTaskTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public String getSourceRealm() {\n         return sourceRealm;\n     }"},{"sha":"d903ad37c9b804c106b7eccefccda8a4e912780b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,16 +18,20 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.Date;\n-\n+import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n \n @XmlRootElement(name = \"schedTask\")\n @XmlType\n-@XmlSeeAlso(AbstractProvisioningTaskTO.class)\n-public class SchedTaskTO extends AbstractTaskTO {\n+@XmlSeeAlso({ ProvisioningTaskTO.class })\n+@Schema(subTypes = { ProvisioningTaskTO.class }, discriminatorProperty = \"@class\")\n+public class SchedTaskTO extends TaskTO {\n \n     private static final long serialVersionUID = -5722284116974636425L;\n \n@@ -47,6 +51,14 @@ public class SchedTaskTO extends AbstractTaskTO {\n \n     private boolean active = true;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.SchedTaskTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public Date getStartAt() {\n         return startAt == null ? null : new Date(startAt.getTime());\n     }\n@@ -71,6 +83,7 @@ public void setJobDelegate(final String jobDelegate) {\n         this.jobDelegate = jobDelegate;\n     }\n \n+    @Schema(readOnly = true)\n     public Date getLastExec() {\n         return lastExec == null ? null : new Date(lastExec.getTime());\n     }\n@@ -79,6 +92,7 @@ public void setLastExec(final Date lastExec) {\n         this.lastExec = lastExec == null ? null : new Date(lastExec.getTime());\n     }\n \n+    @Schema(readOnly = true)\n     public Date getNextExec() {\n         return nextExec == null ? null : new Date(nextExec.getTime());\n     }\n@@ -99,6 +113,8 @@ public String getName() {\n         return name;\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public void setName(final String name) {\n         this.name = name;\n     }\n@@ -110,5 +126,4 @@ public boolean isActive() {\n     public void setActive(final boolean active) {\n         this.active = active;\n     }\n-\n }"},{"sha":"99b57684a2bb3ba9a1bba037644623cb63366d02","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SchemaTO.java","status":"renamed","additions":20,"deletions":3,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchemaTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,25 +18,42 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n-@XmlRootElement(name = \"abstractSchema\")\n+@XmlRootElement(name = \"schema\")\n @XmlType\n @XmlSeeAlso({ PlainSchemaTO.class, DerSchemaTO.class, VirSchemaTO.class })\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public abstract class AbstractSchemaTO extends AbstractBaseBean implements EntityTO {\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n+@JsonPropertyOrder(value = { \"@class\", \"key\" })\n+@Schema(subTypes = { PlainSchemaTO.class, DerSchemaTO.class, VirSchemaTO.class }, discriminatorProperty = \"@class\")\n+public abstract class SchemaTO extends AbstractBaseBean implements EntityTO {\n \n     private static final long serialVersionUID = 4088388951694301759L;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    private String discriminator;\n+\n     private String key;\n \n     private String anyTypeClass;\n \n+    @Schema(name = \"@class\", required = true, readOnly = false)\n+    public abstract String getDiscriminator();\n+\n+    public void setDiscriminator(final String discriminator) {\n+        // do nothing\n+    }\n+\n     @Override\n     public String getKey() {\n         return key;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSchemaTO.java"},{"sha":"4b175b3e8d5eb8bac277748efc416acbaa517370","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/TaskTO.java","status":"renamed","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTaskTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,31 +19,49 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlTransient;\n import javax.xml.bind.annotation.XmlType;\n \n-@XmlRootElement(name = \"abstractTask\")\n+@XmlRootElement(name = \"task\")\n @XmlType\n-@XmlSeeAlso({ PropagationTaskTO.class, SchedTaskTO.class, NotificationTaskTO.class })\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public abstract class AbstractTaskTO extends AbstractStartEndBean implements EntityTO {\n+@XmlSeeAlso({ PropagationTaskTO.class, ProvisioningTaskTO.class, NotificationTaskTO.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n+@JsonPropertyOrder(value = { \"@class\", \"key\" })\n+@Schema(\n+        subTypes = { PropagationTaskTO.class, ProvisioningTaskTO.class, NotificationTaskTO.class },\n+        discriminatorProperty = \"@class\")\n+public abstract class TaskTO extends AbstractStartEndBean implements EntityTO {\n \n     private static final long serialVersionUID = 386450127003321197L;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    private String discriminator;\n+\n     private String key;\n \n     private String latestExecStatus;\n \n     private final List<ExecTO> executions = new ArrayList<>();\n \n+    @Schema(name = \"@class\", required = true, readOnly = false)\n+    public abstract String getDiscriminator();\n+\n+    public void setDiscriminator(final String discriminator) {\n+        // do nothing\n+    }\n+\n+    @Schema(readOnly = true)\n     @Override\n     public String getKey() {\n         return key;\n@@ -55,6 +73,7 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    @Schema(readOnly = true)\n     public String getLatestExecStatus() {\n         return latestExecStatus;\n     }\n@@ -63,6 +82,7 @@ public void setLatestExecStatus(final String latestExecStatus) {\n         this.latestExecStatus = latestExecStatus;\n     }\n \n+    @Schema(readOnly = true)\n     @XmlElementWrapper(name = \"executions\")\n     @XmlElement(name = \"execution\")\n     @JsonProperty(\"executions\")","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractTaskTO.java"},{"sha":"79d5c124228d01bbfc59bd1655a1da7c4f41d746","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,6 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n@@ -70,6 +71,13 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {\n \n     private final List<MembershipTO> dynMemberships = new ArrayList<>();\n \n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.UserTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     @Override\n     public String getType() {\n         return AnyTypeKind.USER.name();\n@@ -95,13 +103,15 @@ public List<String> getRoles() {\n         return roles;\n     }\n \n+    @Schema(readOnly = true)\n     @XmlElementWrapper(name = \"dynRoles\")\n     @XmlElement(name = \"role\")\n     @JsonProperty(\"dynRoles\")\n     public List<String> getDynRoles() {\n         return dynRoles;\n     }\n \n+    @Schema(readOnly = true)\n     public String getToken() {\n         return token;\n     }\n@@ -110,6 +120,7 @@ public void setToken(final String token) {\n         this.token = token;\n     }\n \n+    @Schema(readOnly = true)\n     public Date getTokenExpireTime() {\n         if (tokenExpireTime != null) {\n             return new Date(tokenExpireTime.getTime());\n@@ -125,6 +136,8 @@ public void setTokenExpireTime(final Date tokenExpireTime) {\n         }\n     }\n \n+    @JsonProperty(required = true)\n+    @XmlElement(required = true)\n     public String getUsername() {\n         return username;\n     }\n@@ -133,17 +146,20 @@ public void setUsername(final String username) {\n         this.username = username;\n     }\n \n+    @Schema(readOnly = true)\n     public Date getChangePwdDate() {\n         if (changePwdDate != null) {\n             return new Date(changePwdDate.getTime());\n         }\n         return null;\n     }\n \n+    @Schema(readOnly = true)\n     public Integer getFailedLogins() {\n         return failedLogins;\n     }\n \n+    @Schema(readOnly = true)\n     public Date getLastLoginDate() {\n         if (lastLoginDate != null) {\n             return new Date(lastLoginDate.getTime());\n@@ -187,6 +203,7 @@ public void setSecurityAnswer(final String securityAnswer) {\n         this.securityAnswer = securityAnswer;\n     }\n \n+    @Schema(readOnly = true)\n     public boolean isSuspended() {\n         return suspended;\n     }\n@@ -195,6 +212,7 @@ public void setSuspended(final boolean suspended) {\n         this.suspended = suspended;\n     }\n \n+    @Schema(readOnly = true)\n     public boolean isMustChangePassword() {\n         return mustChangePassword;\n     }\n@@ -233,6 +251,7 @@ public List<MembershipTO> getMemberships() {\n         return memberships;\n     }\n \n+    @Schema(readOnly = true)\n     @XmlElementWrapper(name = \"dynMemberships\")\n     @XmlElement(name = \"dynMembership\")\n     @JsonProperty(\"dynMemberships\")"},{"sha":"df7121b3f484ba82474b009ae583832d8ee7df33","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/VirSchemaTO.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n \n-@XmlRootElement(name = \"virtualSchema\")\n-public class VirSchemaTO extends AbstractSchemaTO {\n+@XmlRootElement(name = \"virSchema\")\n+public class VirSchemaTO extends SchemaTO {\n \n     private static final long serialVersionUID = -8198557479659701343L;\n \n@@ -33,6 +36,14 @@ public class VirSchemaTO extends AbstractSchemaTO {\n \n     private String extAttrName;\n \n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.VirSchemaTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n     public boolean isReadonly() {\n         return readonly;\n     }"},{"sha":"82f17ee06f4b2c15b7a4fb8b032087617d116735","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/SchemaType.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSchemaType.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.common.lib.types;\n \n import javax.xml.bind.annotation.XmlEnum;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n@@ -40,17 +40,17 @@ public enum SchemaType {\n      */\n     VIRTUAL(VirSchemaTO.class);\n \n-    private final Class<? extends AbstractSchemaTO> toClass;\n+    private final Class<? extends SchemaTO> toClass;\n \n-    SchemaType(final Class<? extends AbstractSchemaTO> toClass) {\n+    SchemaType(final Class<? extends SchemaTO> toClass) {\n         this.toClass = toClass;\n     }\n \n-    public Class<? extends AbstractSchemaTO> getToClass() {\n+    public Class<? extends SchemaTO> getToClass() {\n         return toClass;\n     }\n \n-    public static SchemaType fromToClass(final Class<? extends AbstractSchemaTO> toClass) {\n+    public static SchemaType fromToClass(final Class<? extends SchemaTO> toClass) {\n         SchemaType schemaType = null;\n \n         if (PlainSchemaTO.class.equals(toClass)) {"},{"sha":"fb073e8eae6bc18484e08b0f6299964691323d79","filename":"common/rest-api/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fpom.xml?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -47,11 +47,6 @@ under the License.\n       <groupId>javax.ws.rs</groupId>\n       <artifactId>javax.ws.rs-api</artifactId>\n     </dependency>\n-    \n-    <dependency>\n-      <groupId>io.swagger.core.v3</groupId>\n-      <artifactId>swagger-annotations</artifactId>\n-    </dependency>      \n \n     <dependency>\n       <groupId>org.apache.syncope.common</groupId>"},{"sha":"25c399318d98e8dad9880a7121b0ad4fcbdc52d3","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -34,7 +34,7 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n \n /**\n@@ -57,7 +57,7 @@ public interface PolicyService extends JAXRSService {\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends AbstractPolicyTO> T read(@NotNull @PathParam(\"key\") String key);\n+    <T extends PolicyTO> T read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Returns a list of policies of the matching type.\n@@ -68,7 +68,7 @@ public interface PolicyService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends AbstractPolicyTO> List<T> list(@NotNull @MatrixParam(\"type\") PolicyType type);\n+    <T extends PolicyTO> List<T> list(@NotNull @MatrixParam(\"type\") PolicyType type);\n \n     /**\n      * Create a new policy.\n@@ -79,7 +79,7 @@ public interface PolicyService extends JAXRSService {\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response create(@NotNull AbstractPolicyTO policyTO);\n+    Response create(@NotNull PolicyTO policyTO);\n \n     /**\n      * Updates policy matching the given key.\n@@ -91,7 +91,7 @@ public interface PolicyService extends JAXRSService {\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response update(@NotNull AbstractPolicyTO policyTO);\n+    Response update(@NotNull PolicyTO policyTO);\n \n     /**\n      * Delete policy matching the given key."},{"sha":"69b06dc3b4aab95be7ab52ca370e2b393dee07ba","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -34,7 +34,7 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n \n@@ -58,7 +58,7 @@ public interface SchemaService extends JAXRSService {\n     @GET\n     @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends AbstractSchemaTO> List<T> list(@BeanParam SchemaQuery query);\n+    <T extends SchemaTO> List<T> list(@BeanParam SchemaQuery query);\n \n     /**\n      * Returns schema matching the given type and key.\n@@ -71,7 +71,7 @@ public interface SchemaService extends JAXRSService {\n     @GET\n     @Path(\"{type}/{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends AbstractSchemaTO> T read(\n+    <T extends SchemaTO> T read(\n             @NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n@@ -85,7 +85,7 @@ <T extends AbstractSchemaTO> T read(\n     @Path(\"{type}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response create(@NotNull @PathParam(\"type\") SchemaType type, @NotNull AbstractSchemaTO schemaTO);\n+    Response create(@NotNull @PathParam(\"type\") SchemaType type, @NotNull SchemaTO schemaTO);\n \n     /**\n      * Updates the schema matching the given type and key.\n@@ -98,7 +98,7 @@ <T extends AbstractSchemaTO> T read(\n     @Path(\"{type}/{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response update(@NotNull @PathParam(\"type\") SchemaType type, @NotNull AbstractSchemaTO schemaTO);\n+    Response update(@NotNull @PathParam(\"type\") SchemaType type, @NotNull SchemaTO schemaTO);\n \n     /**\n      * Deletes the schema matching the given type and key."},{"sha":"ab2990cd26c26c0741b60de4b48303cca7e06ee7","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -35,7 +35,7 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -63,7 +63,7 @@ public interface TaskService extends ExecutableService {\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends AbstractTaskTO> T read(\n+    <T extends TaskTO> T read(\n             @NotNull @PathParam(\"key\") String key,\n             @QueryParam(JAXRSService.PARAM_DETAILS) @DefaultValue(\"true\") boolean details);\n \n@@ -76,7 +76,7 @@ <T extends AbstractTaskTO> T read(\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    <T extends AbstractTaskTO> PagedResult<T> list(@BeanParam TaskQuery query);\n+    <T extends TaskTO> PagedResult<T> list(@BeanParam TaskQuery query);\n \n     /**\n      * Creates a new task.\n@@ -97,7 +97,7 @@ <T extends AbstractTaskTO> T read(\n     @PUT\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n-    Response update(@NotNull AbstractTaskTO taskTO);\n+    Response update(@NotNull TaskTO taskTO);\n \n     /**\n      * Deletes the task matching the provided key."},{"sha":"c03b6bfe76b80e6d2004e10c2606d1add8ef581c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -38,7 +38,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class PolicyLogic extends AbstractTransactionalLogic<AbstractPolicyTO> {\n+public class PolicyLogic extends AbstractTransactionalLogic<PolicyTO> {\n \n     @Autowired\n     private PolicyDAO policyDAO;\n@@ -47,12 +47,12 @@ public class PolicyLogic extends AbstractTransactionalLogic<AbstractPolicyTO> {\n     private PolicyDataBinder binder;\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_CREATE + \"')\")\n-    public <T extends AbstractPolicyTO> T create(final T policyTO) {\n+    public <T extends PolicyTO> T create(final T policyTO) {\n         return binder.getPolicyTO(policyDAO.save(binder.create(policyTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_UPDATE + \"')\")\n-    public AbstractPolicyTO update(final AbstractPolicyTO policyTO) {\n+    public PolicyTO update(final PolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         return binder.getPolicyTO(policyDAO.save(binder.update(policy, policyTO)));\n     }\n@@ -75,13 +75,13 @@ private Class<? extends Policy> getPolicyClass(final PolicyType policyType) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_LIST + \"')\")\n-    public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n+    public <T extends PolicyTO> List<T> list(final PolicyType type) {\n         return policyDAO.find(getPolicyClass(type)).stream().\n                 <T>map(policy -> binder.getPolicyTO(policy)).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_READ + \"')\")\n-    public <T extends AbstractPolicyTO> T read(final String key) {\n+    public <T extends PolicyTO> T read(final String key) {\n         Policy policy = policyDAO.find(key);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + key + \" not found\");\n@@ -91,7 +91,7 @@ public <T extends AbstractPolicyTO> T read(final String key) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.POLICY_DELETE + \"')\")\n-    public <T extends AbstractPolicyTO> T delete(final String key) {\n+    public <T extends PolicyTO> T delete(final String key) {\n         Policy policy = policyDAO.find(key);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + key + \" not found\");\n@@ -104,7 +104,7 @@ public <T extends AbstractPolicyTO> T delete(final String key) {\n     }\n \n     @Override\n-    protected AbstractPolicyTO resolveReference(final Method method, final Object... args)\n+    protected PolicyTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n         String key = null;\n@@ -113,8 +113,8 @@ protected AbstractPolicyTO resolveReference(final Method method, final Object...\n             for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof String) {\n                     key = (String) args[i];\n-                } else if (args[i] instanceof AbstractPolicyTO) {\n-                    key = ((AbstractPolicyTO) args[i]).getKey();\n+                } else if (args[i] instanceof PolicyTO) {\n+                    key = ((PolicyTO) args[i]).getKey();\n                 }\n             }\n         }"},{"sha":"4303a05b975badb2e28949cc1f5f0e3bd1c91062","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSchemaLogic.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -26,7 +26,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n@@ -50,7 +50,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class SchemaLogic extends AbstractTransactionalLogic<AbstractSchemaTO> {\n+public class SchemaLogic extends AbstractTransactionalLogic<SchemaTO> {\n \n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n@@ -92,7 +92,7 @@ private boolean doesSchemaExist(final SchemaType schemaType, final String name)\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_CREATE + \"')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractSchemaTO> T create(final SchemaType schemaType, final T schemaTO) {\n+    public <T extends SchemaTO> T create(final SchemaType schemaType, final T schemaTO) {\n         if (StringUtils.isBlank(schemaTO.getKey())) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n             sce.getElements().add(\"Schema key\");\n@@ -146,7 +146,7 @@ public void delete(final SchemaType schemaType, final String schemaKey) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @SuppressWarnings({ \"unchecked\", \"Convert2Lambda\" })\n-    public <T extends AbstractSchemaTO> List<T> list(\n+    public <T extends SchemaTO> List<T> list(\n             final SchemaType schemaType, final List<String> anyTypeClasses) {\n \n         List<AnyTypeClass> classes = new ArrayList<>(anyTypeClasses == null ? 0 : anyTypeClasses.size());\n@@ -204,7 +204,7 @@ public T apply(final PlainSchema schema) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractSchemaTO> T read(final SchemaType schemaType, final String schemaKey) {\n+    public <T extends SchemaTO> T read(final SchemaType schemaType, final String schemaKey) {\n         T read;\n         switch (schemaType) {\n             case VIRTUAL:\n@@ -239,7 +239,7 @@ public <T extends AbstractSchemaTO> T read(final SchemaType schemaType, final St\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.SCHEMA_UPDATE + \"')\")\n-    public <T extends AbstractSchemaTO> void update(final SchemaType schemaType, final T schemaTO) {\n+    public <T extends SchemaTO> void update(final SchemaType schemaType, final T schemaTO) {\n         if (!doesSchemaExist(schemaType, schemaTO.getKey())) {\n             throw new NotFoundException(schemaType + \"/\" + schemaTO.getKey());\n         }\n@@ -275,7 +275,7 @@ public <T extends AbstractSchemaTO> void update(final SchemaType schemaType, fin\n     }\n \n     @Override\n-    protected AbstractSchemaTO resolveReference(final Method method, final Object... args)\n+    protected SchemaTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n         String kind = null;\n@@ -288,15 +288,15 @@ protected AbstractSchemaTO resolveReference(final Method method, final Object...\n                     } else {\n                         key = (String) args[i];\n                     }\n-                } else if (args[i] instanceof AbstractSchemaTO) {\n-                    key = ((AbstractSchemaTO) args[i]).getKey();\n+                } else if (args[i] instanceof SchemaTO) {\n+                    key = ((SchemaTO) args[i]).getKey();\n                 }\n             }\n         }\n \n         if (key != null) {\n             try {\n-                AbstractSchemaTO result = null;\n+                SchemaTO result = null;\n \n                 PlainSchema plainSchema = plainSchemaDAO.find(key);\n                 if (plainSchema == null) {"},{"sha":"018c3f7484f528db5873523be4168cfa23c0e53c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -27,7 +27,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n@@ -64,7 +64,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class TaskLogic extends AbstractExecutableLogic<AbstractTaskTO> {\n+public class TaskLogic extends AbstractExecutableLogic<TaskTO> {\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -146,7 +146,7 @@ public <T extends SchedTaskTO> T updateSchedTask(final SchedTaskTO taskTO) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> Pair<Integer, List<T>> list(\n+    public <T extends TaskTO> Pair<Integer, List<T>> list(\n             final TaskType type,\n             final String resource,\n             final String notification,\n@@ -180,7 +180,7 @@ public <T extends AbstractTaskTO> Pair<Integer, List<T>> list(\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n-    public <T extends AbstractTaskTO> T read(final String key, final boolean details) {\n+    public <T extends TaskTO> T read(final String key, final boolean details) {\n         Task task = taskDAO.find(key);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + key);\n@@ -261,7 +261,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n-    public <T extends AbstractTaskTO> T delete(final String key) {\n+    public <T extends TaskTO> T delete(final String key) {\n         Task task = taskDAO.find(key);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + key);\n@@ -373,7 +373,7 @@ public void actionJob(final String key, final JobAction action) {\n     }\n \n     @Override\n-    protected AbstractTaskTO resolveReference(final Method method, final Object... args)\n+    protected TaskTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n         String key = null;\n@@ -384,8 +384,8 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n             for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof String) {\n                     key = (String) args[i];\n-                } else if (args[i] instanceof AbstractTaskTO) {\n-                    key = ((AbstractTaskTO) args[i]).getKey();\n+                } else if (args[i] instanceof TaskTO) {\n+                    key = ((TaskTO) args[i]).getKey();\n                 }\n             }\n         }"},{"sha":"96bde0247e6b2f9252f1ad851746c5e8e2d15b42","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/TaskUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtils.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n \n public interface TaskUtils {\n@@ -27,10 +27,10 @@ public interface TaskUtils {\n \n     <T extends Task> T newTask();\n \n-    <T extends AbstractTaskTO> T newTaskTO();\n+    <T extends TaskTO> T newTaskTO();\n \n     <T extends Task> Class<T> taskClass();\n \n-    <T extends AbstractTaskTO> Class<T> taskTOClass();\n+    <T extends TaskTO> Class<T> taskTOClass();\n \n }"},{"sha":"78cbfcb286a45baa11e4ba5fd858eeeef785897d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/TaskUtilsFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FTaskUtilsFactory.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n \n public interface TaskUtilsFactory {\n@@ -27,7 +27,7 @@ public interface TaskUtilsFactory {\n \n     TaskUtils getInstance(Task task);\n \n-    TaskUtils getInstance(Class<? extends AbstractTaskTO> taskClass);\n+    TaskUtils getInstance(Class<? extends TaskTO> taskClass);\n \n-    TaskUtils getInstance(AbstractTaskTO taskTO);\n+    TaskUtils getInstance(TaskTO taskTO);\n }"},{"sha":"3f9c720aefe9eda037b7b272c0408984d9ba73c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtils.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -110,7 +110,7 @@ public <T extends Task> T newTask() {\n     }\n \n     @Override\n-    public <T extends AbstractTaskTO> Class<T> taskTOClass() {\n+    public <T extends TaskTO> Class<T> taskTOClass() {\n         Class<T> result = null;\n \n         switch (type) {\n@@ -141,7 +141,7 @@ public <T extends AbstractTaskTO> Class<T> taskTOClass() {\n     }\n \n     @Override\n-    public <T extends AbstractTaskTO> T newTaskTO() {\n+    public <T extends TaskTO> T newTaskTO() {\n         final Class<T> taskClass = taskTOClass();\n         try {\n             return taskClass == null ? null : taskClass.newInstance();"},{"sha":"be38e3a453df84d6371bafa9c3f0e3d519bc682d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskUtilsFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskUtilsFactory.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -64,7 +64,7 @@ public TaskUtils getInstance(final Task task) {\n     }\n \n     @Override\n-    public TaskUtils getInstance(final Class<? extends AbstractTaskTO> taskClass) {\n+    public TaskUtils getInstance(final Class<? extends TaskTO> taskClass) {\n         TaskType type;\n         if (taskClass == PropagationTaskTO.class) {\n             type = TaskType.PROPAGATION;\n@@ -84,7 +84,7 @@ public TaskUtils getInstance(final Class<? extends AbstractTaskTO> taskClass) {\n     }\n \n     @Override\n-    public TaskUtils getInstance(final AbstractTaskTO taskTO) {\n+    public TaskUtils getInstance(final TaskTO taskTO) {\n         return getInstance(taskTO.getClass());\n     }\n "},{"sha":"3ff922dcbd4a7cd1bd3aa08b6460d0a6f77851c6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/PolicyDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FPolicyDataBinder.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n \n public interface PolicyDataBinder {\n \n-    <T extends Policy> T create(AbstractPolicyTO policyTO);\n+    <T extends Policy> T create(PolicyTO policyTO);\n \n-    <T extends Policy> T update(T policy, AbstractPolicyTO policyTO);\n+    <T extends Policy> T update(T policy, PolicyTO policyTO);\n \n-    <T extends AbstractPolicyTO> T getPolicyTO(Policy policy);\n+    <T extends PolicyTO> T getPolicyTO(Policy policy);\n \n }"},{"sha":"974603145c641c133047274b9f2a2dfc485cf3eb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/TaskDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FTaskDataBinder.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n@@ -36,6 +36,6 @@ public interface TaskDataBinder {\n \n     ExecTO getExecTO(TaskExec execution);\n \n-    <T extends AbstractTaskTO> T getTaskTO(Task task, TaskUtils taskUtil, boolean details);\n+    <T extends TaskTO> T getTaskTO(Task task, TaskUtils taskUtil, boolean details);\n \n }"},{"sha":"4666c115975db333b9716c8a1bfcb4c8fcd6df0a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -20,7 +20,7 @@\n \n import java.util.stream.Collectors;\n import org.apache.syncope.core.provisioning.api.data.PolicyDataBinder;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n@@ -66,7 +66,7 @@ public class PolicyDataBinderImpl implements PolicyDataBinder {\n     private EntityFactory entityFactory;\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO policyTO) {\n+    private <T extends Policy> T getPolicy(final T policy, final PolicyTO policyTO) {\n         T result = policy;\n \n         if (policyTO instanceof PasswordPolicyTO) {\n@@ -170,18 +170,18 @@ private <T extends Policy> T getPolicy(final T policy, final AbstractPolicyTO po\n     }\n \n     @Override\n-    public <T extends Policy> T create(final AbstractPolicyTO policyTO) {\n+    public <T extends Policy> T create(final PolicyTO policyTO) {\n         return getPolicy(null, policyTO);\n     }\n \n     @Override\n-    public <T extends Policy> T update(final T policy, final AbstractPolicyTO policyTO) {\n+    public <T extends Policy> T update(final T policy, final PolicyTO policyTO) {\n         return getPolicy(policy, policyTO);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n+    public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n         T policyTO = null;\n \n         if (policy instanceof PasswordPolicy) {"},{"sha":"665c7ca8ff750e8e5c976b29a20f2f524a04162c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -22,8 +22,8 @@\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.ProvisioningTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n@@ -113,7 +113,7 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     @Autowired\n     private TaskUtilsFactory taskUtilsFactory;\n \n-    private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO taskTO) {\n+    private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO) {\n         if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n             PushTask pushTask = (PushTask) task;\n             PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n@@ -247,7 +247,7 @@ private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO\n \n     @Override\n     public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskUtils) {\n-        Class<? extends AbstractTaskTO> taskTOClass = taskUtils.taskTOClass();\n+        Class<? extends TaskTO> taskTOClass = taskUtils.taskTOClass();\n         if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n             throw new IllegalArgumentException(String.format(\"Expected %s, found %s\", taskTOClass, taskTO.getClass()));\n         }\n@@ -265,8 +265,8 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskU\n                 throw new NotFoundException(\"Implementation \" + taskTO.getJobDelegate());\n             }\n             task.setJobDelegate(implementation);\n-        } else if (taskTO instanceof AbstractProvisioningTaskTO) {\n-            AbstractProvisioningTaskTO provisioningTaskTO = (AbstractProvisioningTaskTO) taskTO;\n+        } else if (taskTO instanceof ProvisioningTaskTO) {\n+            ProvisioningTaskTO provisioningTaskTO = (ProvisioningTaskTO) taskTO;\n \n             ExternalResource resource = resourceDAO.find(provisioningTaskTO.getResource());\n             if (resource == null) {\n@@ -282,7 +282,7 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskU\n \n     @Override\n     public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, final TaskUtils taskUtils) {\n-        Class<? extends AbstractTaskTO> taskTOClass = taskUtils.taskTOClass();\n+        Class<? extends TaskTO> taskTOClass = taskUtils.taskTOClass();\n         if (taskTOClass == null || !taskTOClass.equals(taskTO.getClass())) {\n             throw new IllegalArgumentException(String.format(\"Expected %s, found %s\", taskTOClass, taskTO.getClass()));\n         }\n@@ -298,7 +298,7 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n         task.setActive(taskTO.isActive());\n \n         if (task instanceof ProvisioningTask) {\n-            fill((ProvisioningTask) task, (AbstractProvisioningTaskTO) taskTO);\n+            fill((ProvisioningTask) task, (ProvisioningTaskTO) taskTO);\n         }\n     }\n \n@@ -349,7 +349,7 @@ private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n     }\n \n     @Override\n-    public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils, final boolean details) {\n+    public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils, final boolean details) {\n         T taskTO = taskUtils.newTaskTO();\n         BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n "},{"sha":"2925fc7010b5240dc70f08f83deda66e77a1aa40","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,7 +21,7 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n@@ -36,8 +36,8 @@ public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyServ\n     private PolicyLogic logic;\n \n     @Override\n-    public Response create(final AbstractPolicyTO policyTO) {\n-        AbstractPolicyTO policy = logic.create(policyTO);\n+    public Response create(final PolicyTO policyTO) {\n+        PolicyTO policy = logic.create(policyTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(policy.getKey()).build();\n         return Response.created(location).\n                 header(RESTHeaders.RESOURCE_KEY, policy.getKey()).\n@@ -51,17 +51,17 @@ public Response delete(final String key) {\n     }\n \n     @Override\n-    public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n+    public <T extends PolicyTO> List<T> list(final PolicyType type) {\n         return logic.list(type);\n     }\n \n     @Override\n-    public <T extends AbstractPolicyTO> T read(final String key) {\n+    public <T extends PolicyTO> T read(final String key) {\n         return logic.read(key);\n     }\n \n     @Override\n-    public Response update(final AbstractPolicyTO policyTO) {\n+    public Response update(final PolicyTO policyTO) {\n         logic.update(policyTO);\n         return Response.noContent().build();\n     }"},{"sha":"f650839b6c5f725f5fecb5d98df7e5aeaf2bd0dc","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -21,7 +21,7 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n@@ -37,8 +37,8 @@ public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaServ\n     private SchemaLogic logic;\n \n     @Override\n-    public Response create(final SchemaType schemaType, final AbstractSchemaTO schemaTO) {\n-        AbstractSchemaTO created = logic.create(schemaType, schemaTO);\n+    public Response create(final SchemaType schemaType, final SchemaTO schemaTO) {\n+        SchemaTO created = logic.create(schemaType, schemaTO);\n \n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n         return Response.created(location).\n@@ -53,17 +53,17 @@ public Response delete(final SchemaType schemaType, final String key) {\n     }\n \n     @Override\n-    public <T extends AbstractSchemaTO> List<T> list(final SchemaQuery query) {\n+    public <T extends SchemaTO> List<T> list(final SchemaQuery query) {\n         return logic.list(query.getType(), query.getAnyTypeClasses());\n     }\n \n     @Override\n-    public <T extends AbstractSchemaTO> T read(final SchemaType schemaType, final String key) {\n+    public <T extends SchemaTO> T read(final SchemaType schemaType, final String key) {\n         return logic.read(schemaType, key);\n     }\n \n     @Override\n-    public Response update(final SchemaType schemaType, final AbstractSchemaTO schemaTO) {\n+    public Response update(final SchemaType schemaType, final SchemaTO schemaTO) {\n         logic.update(schemaType, schemaTO);\n         return Response.noContent().build();\n     }"},{"sha":"37067a3e131c2290d994112a04714016fb6ae91f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -23,7 +23,7 @@\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -70,7 +70,7 @@ public Response delete(final String key) {\n \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n+    public <T extends TaskTO> PagedResult<T> list(final TaskQuery query) {\n         Pair<Integer, List<T>> result = logic.list(\n                 query.getType(),\n                 query.getResource(),\n@@ -85,12 +85,12 @@ public <T extends AbstractTaskTO> PagedResult<T> list(final TaskQuery query) {\n     }\n \n     @Override\n-    public <T extends AbstractTaskTO> T read(final String key, final boolean details) {\n+    public <T extends TaskTO> T read(final String key, final boolean details) {\n         return logic.read(key, details);\n     }\n \n     @Override\n-    public Response update(final AbstractTaskTO taskTO) {\n+    public Response update(final TaskTO taskTO) {\n         if (taskTO instanceof SchedTaskTO) {\n             logic.updateSchedTask((SchedTaskTO) taskTO);\n             return Response.noContent().build();"},{"sha":"b08c1427ee229da3582b857cc3bb037cd27e68ad","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -50,7 +50,7 @@ under the License.\n       <map>\n         <entry>\n           <key>\n-            <value>org.apache.syncope.common.lib.policy.AbstractPolicyTO</value>\n+            <value>org.apache.syncope.common.lib.policy.PolicyTO</value>\n           </key>\n           <value>policies</value>\n         </entry>"},{"sha":"1ec5affc2b3f05d8b0615610271561fd634cfc02","filename":"fit/core-reference/src/main/resources/jboss/restCXFContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2FrestCXFContext.xml?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -50,7 +50,7 @@ under the License.\n       <map>\n         <entry>\n           <key>\n-            <value>org.apache.syncope.common.lib.policy.AbstractPolicyTO</value>\n+            <value>org.apache.syncope.common.lib.policy.PolicyTO</value>\n           </key>\n           <value>policies</value>\n         </entry>"},{"sha":"32f350a8e7c7fe8d1d15c5c3ea2d198b063dbcd5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -47,8 +47,8 @@\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -335,7 +335,7 @@ public static <T> T getObject(final URI location, final Class<?> serviceClass, f\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends AbstractSchemaTO> T createSchema(final SchemaType type, final T schemaTO) {\n+    protected <T extends SchemaTO> T createSchema(final SchemaType type, final T schemaTO) {\n         Response response = schemaService.create(type, schemaTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n@@ -487,7 +487,7 @@ protected ProvisioningResult<GroupTO> deleteGroup(final String key) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends AbstractPolicyTO> T createPolicy(final T policy) {\n+    protected <T extends PolicyTO> T createPolicy(final T policy) {\n         Response response = policyService.create(policy);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);"},{"sha":"d59422a260ab1ae3a62b87f816283e4308d689a5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractTaskITCase.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.DeassociationPatch;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.NotificationTaskTO;\n@@ -126,7 +126,7 @@ protected void ldapCleanup() {\n     protected static ExecTO execTask(final TaskService taskService, final String taskKey, final String initialStatus,\n             final int maxWaitSeconds, final boolean dryRun) {\n \n-        AbstractTaskTO taskTO = taskService.read(taskKey, true);\n+        TaskTO taskTO = taskService.read(taskKey, true);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n "},{"sha":"7ab6b22a7f5725bdc5c95d77d968c99397ce7c8d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PropagationTaskITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPropagationTaskITCase.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -27,7 +27,7 @@\n import java.util.List;\n import java.util.Optional;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -54,7 +54,7 @@ public void paginatedList() {\n         assertNotNull(tasks);\n         assertEquals(2, tasks.getResult().size());\n \n-        for (AbstractTaskTO task : tasks.getResult()) {\n+        for (TaskTO task : tasks.getResult()) {\n             assertNotNull(task);\n         }\n \n@@ -64,7 +64,7 @@ public void paginatedList() {\n         assertEquals(2, tasks.getPage());\n         assertEquals(2, tasks.getResult().size());\n \n-        for (AbstractTaskTO task : tasks.getResult()) {\n+        for (TaskTO task : tasks.getResult()) {\n             assertNotNull(task);\n         }\n \n@@ -158,15 +158,15 @@ public void issueSYNCOPE741() {\n         }\n \n         // check list\n-        PagedResult<AbstractTaskTO> tasks = taskService.list(\n+        PagedResult<TaskTO> tasks = taskService.list(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).details(false).build());\n-        for (AbstractTaskTO item : tasks.getResult()) {\n+        for (TaskTO item : tasks.getResult()) {\n             assertTrue(item.getExecutions().isEmpty());\n         }\n \n         tasks = taskService.list(\n                 new TaskQuery.Builder(TaskType.PROPAGATION).page(1).size(2).details(true).build());\n-        for (AbstractTaskTO item : tasks.getResult()) {\n+        for (TaskTO item : tasks.getResult()) {\n             assertFalse(item.getExecutions().isEmpty());\n         }\n "},{"sha":"3e6a4f0e9b59bd7ce5964b0203deb2ed421c62c7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0e93bec6c37c9d8a2d0b1d69613e8173cd49726e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=0e93bec6c37c9d8a2d0b1d69613e8173cd49726e","patch":"@@ -50,7 +50,7 @@\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.policy.PullPolicyTO;\n-import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.TaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -1113,7 +1113,7 @@ public void issueSYNCOPE1062() {\n                     getLdapRemoteObject(RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, userDn.getValues().get(0)));\n \n             // ...and propagated\n-            PagedResult<AbstractTaskTO> propagationTasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).\n+            PagedResult<TaskTO> propagationTasks = taskService.list(new TaskQuery.Builder(TaskType.PROPAGATION).\n                     resource(RESOURCE_NAME_DBPULL).\n                     anyTypeKind(AnyTypeKind.USER).entityKey(user.getKey()).build());\n             assertEquals(1, propagationTasks.getSize());"}]}