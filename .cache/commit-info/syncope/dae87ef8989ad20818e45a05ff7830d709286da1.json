{"sha":"dae87ef8989ad20818e45a05ff7830d709286da1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRhZTg3ZWY4OTg5YWQyMDgxOGU0NWEwNWZmNzgzMGQ3MDkyODZkYTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-31T14:31:25Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-31T14:31:25Z"},"message":"[SYNCOPE-620] Camel extension in: now time for IT","tree":{"sha":"74d37a0aed28143f1353cdbf45fa4658093ea102","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/74d37a0aed28143f1353cdbf45fa4658093ea102"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dae87ef8989ad20818e45a05ff7830d709286da1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dae87ef8989ad20818e45a05ff7830d709286da1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dae87ef8989ad20818e45a05ff7830d709286da1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dae87ef8989ad20818e45a05ff7830d709286da1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cc922e652cfa8b61772459819874c7b0d6fc80b0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cc922e652cfa8b61772459819874c7b0d6fc80b0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cc922e652cfa8b61772459819874c7b0d6fc80b0"}],"stats":{"total":2796,"additions":2730,"deletions":66},"files":[{"sha":"e1af7e5e8a2883f1ff51d4ab0a7cb64cbf8db1a2","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -48,27 +48,6 @@ public final class RESTHeaders {\n      */\n     public static final String PWDRESET_NEEDS_SECURITYQUESTIONS = \"Syncope.PasswordReset.SecurityQuestions\";\n \n-    /**\n-     * Option key stating if Activiti workflow adapter is in use for users.\n-     */\n-    public static final String ACTIVITI_USER_ENABLED = \"Syncope.Activiti.User.Enabled\";\n-\n-    /**\n-     * Option key stating if Activiti workflow adapter is in use for roles.\n-     */\n-    public static final String ACTIVITI_ROLE_ENABLED = \"Syncope.Activiti.Role.Enabled\";\n-    \n-     /**\n-     * Option key stating if Camel is the current provisioning manager engine.\n-     */\n-    public static final String CAMEL_USER_PROVISIONING_MANAGER =\"Syncope.Provisioning.Camel.User.Enabled\";\n-    \n-    /**\n-     * Option key stating if Camel is the current provisioning manager engine.\n-     */\n-    public static final String CAMEL_ROLE_PROVISIONING_MANAGER =\"Syncope.Provisioning.Camel.Role.Enabled\";\n-\n-\n     /**\n      * HTTP header key for object ID assigned to an object after its creation.\n      */"},{"sha":"92aa86b1a0f4fae9e200a5d4c3c609b326da4150","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -21,16 +21,12 @@\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n-import javax.ws.rs.OPTIONS;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.cxf.jaxrs.model.wadl.Description;\n-import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n-import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n@@ -40,22 +36,6 @@\n @Path(\"workflows/{kind}\")\n public interface WorkflowService extends JAXRSService {\n \n-    /**\n-     * Checks whether Activiti is enabled (for users or roles).\n-     *\n-     * @param kind user or role\n-     * @return <tt>Response</tt> contains special syncope HTTP header indicating if Activiti is enabled for\n-     * users / roles\n-     * @see org.apache.syncope.common.rest.api.RESTHeaders#ACTIVITI_USER_ENABLED\n-     * @see org.apache.syncope.common.rest.api.RESTHeaders#ACTIVITI_ROLE_ENABLED\n-     */\n-    @Descriptions({\n-        @Description(target = DocTarget.RESPONSE,\n-                value = \"Contains special syncope HTTP header indicating if Activiti is enabled for users / roles\")\n-    })\n-    @OPTIONS\n-    Response getOptions(@NotNull @PathParam(\"kind\") SubjectType kind);\n-\n     /**\n      * Exports workflow definition for matching kind.\n      *"},{"sha":"db8156593e71bfebde5a866981342ac618c3e616","filename":"syncope620/ext/camel/common-lib/pom.xml","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fcommon-lib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fcommon-lib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fcommon-lib%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-camel</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel Common Lib</name>\n+  <description>Apache Syncope Extensions: Camel Common Lib</description>\n+  <groupId>org.apache.syncope.ext.camel</groupId>\n+  <artifactId>syncope-ext-camel-common-lib</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"5572336340aacf414b488306c6fc1171d37077cd","filename":"syncope620/ext/camel/common-lib/src/main/java/org/apache/syncope/common/lib/to/CamelRouteTO.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FCamelRouteTO.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,60 @@\n+package org.apache.syncope.common.lib.to;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+\n+@XmlRootElement(name = \"camelRoute\")\n+@XmlType\n+public class CamelRouteTO extends AbstractBaseBean {\n+\n+    private String name;\n+\n+    private SubjectType subjectType;\n+\n+    private String content;\n+\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.name = key;\n+    }\n+\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    public void setContent(final String content) {\n+        this.content = content;\n+    }\n+\n+    public SubjectType getSubjectType() {\n+        return subjectType;\n+    }\n+\n+    public void setSubjectType(final SubjectType subjectType) {\n+        this.subjectType = subjectType;\n+    }\n+\n+}"},{"sha":"7e93f70add4461f6f422a39e2cf6416ffe57244e","filename":"syncope620/ext/camel/logic/pom.xml","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Flogic%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-camel</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel Logic</name>\n+  <description>Apache Syncope Extensions: Camel Logic</description>\n+  <groupId>org.apache.syncope.ext.camel</groupId>\n+  <artifactId>syncope-ext-camel-logic</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-provisioning</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>  \n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"4602b514c86e30b40a00c084baff572b64cb2477","filename":"syncope620/ext/camel/logic/src/main/java/org/apache/syncope/server/logic/CamelRouteLogic.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FCamelRouteLogic.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.CamelRouteTO;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.server.persistence.api.dao.CamelRouteDAO;\n+import org.apache.syncope.server.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+import org.apache.syncope.server.provisioning.api.data.CamelRouteDataBinder;\n+import org.apache.syncope.server.provisioning.camel.SyncopeCamelContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class CamelRouteLogic extends AbstractTransactionalLogic<CamelRouteTO> {\n+\n+    @Autowired\n+    private CamelRouteDAO routeDAO;\n+\n+    @Autowired\n+    private CamelRouteDataBinder binder;\n+\n+    @Autowired\n+    private SyncopeCamelContext context;\n+\n+    @PreAuthorize(\"hasRole('ROUTE_LIST')\")\n+    @Transactional(readOnly = true)\n+    public List<CamelRouteTO> list(final SubjectType subjectType) {\n+        List<CamelRouteTO> routes = new ArrayList<>();\n+\n+        for (CamelRoute route : routeDAO.find(subjectType)) {\n+            routes.add(binder.getRouteTO(route));\n+        }\n+        return routes;\n+    }\n+\n+    @PreAuthorize(\"hasRole('ROUTE_READ')\")\n+    @Transactional(readOnly = true)\n+    public CamelRouteTO read(final String key) {\n+        CamelRoute route = routeDAO.find(key);\n+        if (route == null) {\n+            throw new NotFoundException(\"CamelRoute with key=\" + key);\n+        }\n+\n+        return binder.getRouteTO(route);\n+    }\n+\n+    @PreAuthorize(\"hasRole('ROUTE_UPDATE')\")\n+    public void update(final CamelRouteTO routeTO) {\n+        CamelRoute route = routeDAO.find(routeTO.getKey());\n+        if (route == null) {\n+            throw new NotFoundException(\"CamelRoute with key=\" + routeTO.getKey());\n+        }\n+\n+        LOG.debug(\"Updating route {} with content {}\", routeTO.getKey(), routeTO.getContent());\n+        binder.update(route, routeTO);\n+\n+        context.reloadContext(routeTO.getKey());\n+    }\n+\n+    @Override\n+    protected CamelRouteTO resolveReference(Method method, Object... args) throws UnresolvedReferenceException {\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"865b4b1c8084c127aaf5133584c17c10c5bf2bc7","filename":"syncope620/ext/camel/logic/src/main/java/org/apache/syncope/server/logic/init/CamelRouteLoader.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.logic.init;\n+\n+import java.io.StringWriter;\n+import java.util.List;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.server.persistence.api.SyncopeLoader;\n+import org.apache.syncope.server.persistence.api.entity.CamelEntityFactory;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+@Component\n+public class CamelRouteLoader implements SyncopeLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CamelRouteLoader.class);\n+\n+    private static final DocumentBuilderFactory DOC_FACTORY = DocumentBuilderFactory.newInstance();\n+\n+    private static final TransformerFactory T_FACTORY = TransformerFactory.newInstance();\n+\n+    @Autowired\n+    private DataSource dataSource;\n+\n+    @Autowired\n+    private CamelEntityFactory entityFactory;\n+\n+    private int size = 0;\n+\n+    private boolean loaded = false;\n+\n+    @Override\n+    public Integer getPriority() {\n+        return 1000;\n+    }\n+\n+    @Transactional\n+    public void load() {\n+        synchronized (this) {\n+            if (!loaded) {\n+                loadRoutes(\"/userRoute.xml\", SubjectType.USER);\n+                loadRoutes(\"/roleRoute.xml\", SubjectType.ROLE);\n+                loadEntitlements();\n+                loaded = true;\n+            }\n+        }\n+    }\n+\n+    private boolean routesAvailable(final SubjectType subject) {\n+        final String sql = String.format(\"SELECT * FROM %s WHERE SUBJECT = ?\", CamelRoute.class.getSimpleName());\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+        final List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql, new Object[] { subject.name() });\n+        return !rows.isEmpty();\n+    }\n+\n+    private String nodeToString(final Node node) {\n+        StringWriter sw = new StringWriter();\n+        try {\n+            Transformer transformer = T_FACTORY.newTransformer();\n+            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+            transformer.transform(new DOMSource(node), new StreamResult(sw));\n+        } catch (TransformerException te) {\n+            LOG.debug(\"nodeToString Transformer Exception\", te);\n+        }\n+        return sw.toString();\n+    }\n+\n+    private void loadRoutes(final String path, final SubjectType subjectType) {\n+        if (routesAvailable(subjectType)) {\n+            final String query = String.format(\"INSERT INTO %s(ID, NAME, SUBJECT, ROUTECONTENT) VALUES (?, ?, ?, ?)\",\n+                    CamelRoute.class.getSimpleName());\n+            try {\n+                final DocumentBuilder dBuilder = DOC_FACTORY.newDocumentBuilder();\n+                final Document doc = dBuilder.parse(getClass().getResourceAsStream(path));\n+                doc.getDocumentElement().normalize();\n+                final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+                final NodeList listOfRoutes = doc.getElementsByTagName(\"route\");\n+                for (int s = 0; s < listOfRoutes.getLength(); s++) {\n+                    //getting the route node element\n+                    Node routeEl = listOfRoutes.item(s);\n+                    //crate an instance of CamelRoute Entity\n+                    CamelRoute route = entityFactory.newCamelRoute();\n+                    route.setSubjectType(subjectType);\n+                    route.setKey(((Element) routeEl).getAttribute(\"id\"));\n+                    route.setContent(nodeToString(listOfRoutes.item(s)));\n+\n+                    jdbcTemplate.update(query, new Object[] { size++, ((Element) routeEl).getAttribute(\"id\"),\n+                        subjectType.name(), nodeToString(listOfRoutes.item(s)) });\n+                    LOG.debug(\"Route {} successfully registered\", ((Element) routeEl).getAttribute(\"id\"));\n+                }\n+            } catch (DataAccessException e) {\n+                LOG.error(\"While trying to store queries {}\", e);\n+            } catch (Exception e) {\n+                LOG.error(\"Route Registration failed {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    private void loadEntitlements() {\n+        final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+        jdbcTemplate.update(\"INSERT INTO Entitlement VALUES('ROUTE_READ')\");\n+        jdbcTemplate.update(\"INSERT INTO Entitlement VALUES('ROUTE_LIST')\");\n+        jdbcTemplate.update(\"INSERT INTO Entitlement VALUES('ROUTE_UPDATE')\");\n+    }\n+}"},{"sha":"75f89afd826d3ad62928148f66935ac57d983aa7","filename":"syncope620/ext/camel/persistence-api/pom.xml","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-camel</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel Persistence API</name>\n+  <description>Apache Syncope Extensions: Camel Persistence API</description>\n+  <groupId>org.apache.syncope.ext.camel</groupId>\n+  <artifactId>syncope-ext-camel-persistence-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"dd39781b2ab26d82eb9eb774efcff8b58eaf48c1","filename":"syncope620/ext/camel/persistence-api/src/main/java/org/apache/syncope/server/persistence/api/dao/CamelRouteDAO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fdao%2FCamelRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fdao%2FCamelRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fdao%2FCamelRouteDAO.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.server.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+\n+public interface CamelRouteDAO extends DAO<CamelRoute, String> {\n+\n+    CamelRoute find(String key);\n+\n+    List<CamelRoute> find(SubjectType subjectType);\n+\n+    List<CamelRoute> findAll();\n+\n+    CamelRoute save(CamelRoute route) throws InvalidEntityException;\n+\n+    void delete(String key);\n+}"},{"sha":"49bd2cbd077061593bbf53bdc4d514a77f2b16d2","filename":"syncope620/ext/camel/persistence-api/src/main/java/org/apache/syncope/server/persistence/api/entity/CamelEntityFactory.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.api.entity;\n+\n+public interface CamelEntityFactory {\n+\n+    CamelRoute newCamelRoute();\n+}"},{"sha":"f2b166c7ecb7c2ba9aad28932631a955ebe28010","filename":"syncope620/ext/camel/persistence-api/src/main/java/org/apache/syncope/server/persistence/api/entity/CamelRoute.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2FCamelRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2FCamelRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fapi%2Fentity%2FCamelRoute.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.api.entity;\n+\n+import org.apache.syncope.common.lib.types.SubjectType;\n+\n+public interface CamelRoute extends Entity<String> {\n+\n+    String getContent();\n+\n+    SubjectType getSubjectType();\n+\n+    void setKey(String name);\n+\n+    void setContent(String routeContent);\n+\n+    void setSubjectType(SubjectType subject);\n+}"},{"sha":"ab16419e5414e33b85a91ec24157ac5c34004050","filename":"syncope620/ext/camel/persistence-jpa/pom.xml","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,138 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-camel</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel Persistence JPA</name>\n+  <description>Apache Syncope Extensions: Camel Persistence JPA</description>\n+  <groupId>org.apache.syncope.ext.camel</groupId>\n+  <artifactId>syncope-ext-camel-persistence-jpa</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>    \n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-persistence-jpa</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>${h2.version}</version>\n+          </dependency>\n+        </dependencies>\n+        <configuration>\n+          <persistenceXmlFile>${rootpom.basedir}/server/persistence-jpa/src/main/resources/META-INF/spring-persistence.xml</persistenceXmlFile> \n+          <includes>org/apache/syncope/server/persistence/jpa/entity/**/*.class</includes>\n+          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n+          <connectionProperties>\n+            driverClassName=org.h2.Driver,\n+            url=jdbc:h2:mem:syncopedb\n+            username=sa,\n+            password=\n+          </connectionProperties>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>enhancer</id>\n+            <phase>process-classes</phase>\n+            <goals>\n+              <goal>enhance</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+\n+    <testResources>\n+      <testResource>\n+        <directory>${rootpom.basedir}/server/persistence-jpa/src/main/resources</directory>\n+        <filtering>true</filtering>        \n+      </testResource>\n+    </testResources>\n+  </build>\n+\n+  <profiles>\n+    <profile>\n+      <id>sqlgen</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>sqlgenr</id>\n+                <phase>process-classes</phase>\n+                <goals>\n+                  <goal>sql</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+        \n+    </profile>\n+  </profiles>\n+\n+</project>"},{"sha":"33021508aa69572f9305aeb99675990349e6c3df","filename":"syncope620/ext/camel/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/dao/JPACamelRouteDAO.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.server.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.server.persistence.api.dao.CamelRouteDAO;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+import org.apache.syncope.server.persistence.jpa.entity.JPACamelRoute;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPACamelRouteDAO extends AbstractDAO<CamelRoute, String> implements CamelRouteDAO {\n+\n+    @Override\n+    public CamelRoute find(final String key) {\n+        return entityManager.find(CamelRoute.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<CamelRoute> find(final SubjectType subjectType) {\n+        TypedQuery<CamelRoute> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPACamelRoute.class.getSimpleName()\n+                + \" e WHERE e.subjectType = :subjectType\", CamelRoute.class);\n+        query.setParameter(\"subjectType\", subjectType);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<CamelRoute> findAll() {\n+        TypedQuery<CamelRoute> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPACamelRoute.class.getSimpleName() + \" e \", CamelRoute.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public CamelRoute save(final CamelRoute route) throws InvalidEntityException {\n+        return entityManager.merge(route);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        CamelRoute route = find(key);\n+        if (route != null) {\n+            entityManager.remove(route);\n+        }\n+    }\n+\n+}"},{"sha":"f4fee008e89df130f7c6c95313a295678a40b5ec","filename":"syncope620/ext/camel/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/JPACamelEntityFactory.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelEntityFactory.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.jpa.entity;\n+\n+import org.apache.syncope.server.persistence.api.entity.CamelEntityFactory;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JPACamelEntityFactory implements CamelEntityFactory {\n+\n+    @Override\n+    public CamelRoute newCamelRoute() {\n+        return new JPACamelRoute();\n+    }\n+\n+}"},{"sha":"d9d5fad18b9dd57fe868c7bcaa54d03bbbfc9e6e","filename":"syncope620/ext/camel/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/JPACamelRoute.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+\n+@Entity\n+@Table(name = JPACamelRoute.TABLE)\n+public class JPACamelRoute extends AbstractEntity<String> implements CamelRoute {\n+\n+    private static final long serialVersionUID = -2767606675667839161L;\n+\n+    public static final String TABLE = \"CamelRoute\";\n+\n+    @Id\n+    private String name;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private SubjectType subject;\n+\n+    @Lob\n+    private String content;\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public SubjectType getSubjectType() {\n+        return subject;\n+    }\n+\n+    @Override\n+    public void setSubjectType(final SubjectType subject) {\n+        this.subject = subject;\n+    }\n+\n+    @Override\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    @Override\n+    public void setContent(final String content) {\n+        this.content = content;\n+    }\n+\n+}"},{"sha":"0a95c941294024f66c14fce804ea455aa0e69187","filename":"syncope620/ext/camel/pom.xml","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-ext</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel</name>\n+  <description>Apache Syncope Extensions: Camel</description>\n+  <groupId>org.apache.syncope.ext</groupId>\n+  <artifactId>syncope-ext-camel</artifactId>\n+  <packaging>pom</packaging>\n+  \n+  <modules>\n+    <module>persistence-api</module>\n+    <module>persistence-jpa</module>\n+    <module>common-lib</module>\n+    <module>provisioning-api</module>\n+    <module>provisioning-camel</module>\n+    <module>logic</module>\n+    <module>rest-api</module>\n+    <module>rest-cxf</module>\n+  </modules>\n+\n+</project>"},{"sha":"b9bd6b9c653c5bf6051453a259ea56f27903e14a","filename":"syncope620/ext/camel/provisioning-api/pom.xml","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-api%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,71 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-camel</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel Provisioning API</name>\n+  <description>Apache Syncope Extensions: Camel Provisioning API</description>\n+  <groupId>org.apache.syncope.ext.camel</groupId>\n+  <artifactId>syncope-ext-camel-provisioning-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-provisioning-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"4d8e4ecde13101859dea987f35de2fbeeab99ed7","filename":"syncope620/ext/camel/provisioning-api/src/main/java/org/apache/syncope/server/provisioning/api/data/CamelRouteDataBinder.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fdata%2FCamelRouteDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fdata%2FCamelRouteDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fapi%2Fdata%2FCamelRouteDataBinder.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.CamelRouteTO;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+\n+public interface CamelRouteDataBinder {\n+\n+    CamelRouteTO getRouteTO(CamelRoute route);\n+\n+    void update(CamelRoute route, CamelRouteTO routeTO);\n+}"},{"sha":"5218d629a0e72f8714e4542674da14d631eeb6fb","filename":"syncope620/ext/camel/provisioning-camel/pom.xml","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-camel</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel Provisioning</name>\n+  <description>Apache Syncope Extensions: Camel Provisioning</description>\n+  <groupId>org.apache.syncope.ext.camel</groupId>\n+  <artifactId>syncope-ext-camel-provisioning</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-spring</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-script</artifactId>\n+    </dependency>\n+      \n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-provisioning-java</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-provisioning-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"b932d66ed19f0f7d44aebeba623b4f8d2bb00e1f","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/AbstractCamelProvisioningManager.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.PollingConsumer;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.impl.DefaultExchange;\n+import org.apache.camel.impl.DefaultMessage;\n+import org.apache.camel.model.RoutesDefinition;\n+import org.apache.camel.spring.SpringCamelContext;\n+import org.apache.syncope.server.persistence.api.dao.CamelRouteDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+abstract class AbstractCamelProvisioningManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CamelUserProvisioningManager.class);\n+\n+    @Autowired\n+    protected CamelRouteDAO routeDAO;\n+\n+    @Autowired\n+    protected SyncopeCamelContext contextFactory;\n+\n+    protected SpringCamelContext camelContext;\n+\n+    protected RoutesDefinition routes;\n+\n+    protected final Map<String, PollingConsumer> consumerMap = new HashMap<>();\n+\n+    protected final List<String> knownURIs = new ArrayList<>();\n+\n+    protected SpringCamelContext getContext() {\n+        return contextFactory.getContext();\n+    }\n+\n+    protected void sendMessage(final String uri, final Object obj) {\n+        Exchange exchange = new DefaultExchange(getContext());\n+\n+        DefaultMessage message = new DefaultMessage();\n+        message.setBody(obj);\n+        exchange.setIn(message);\n+\n+        ProducerTemplate template = getContext().createProducerTemplate();\n+        template.send(uri, exchange);\n+    }\n+\n+    protected void sendMessage(final String uri, final Object obj, final Map<String, Object> properties) {\n+        Exchange exchange = new DefaultExchange(getContext());\n+\n+        for (Map.Entry<String, Object> property : properties.entrySet()) {\n+            exchange.setProperty(property.getKey(), property.getValue());\n+            LOG.debug(\"Added property {}\", property.getKey());\n+        }\n+\n+        DefaultMessage message = new DefaultMessage();\n+        message.setBody(obj);\n+        exchange.setIn(message);\n+        ProducerTemplate template = getContext().createProducerTemplate();\n+        template.send(uri, exchange);\n+    }\n+\n+    protected PollingConsumer getConsumer(String uri) {\n+        if (!knownURIs.contains(uri)) {\n+            knownURIs.add(uri);\n+            Endpoint endpoint = getContext().getEndpoint(uri);\n+            PollingConsumer pollingConsumer = null;\n+            try {\n+                pollingConsumer = endpoint.createPollingConsumer();\n+                consumerMap.put(uri, pollingConsumer);\n+                pollingConsumer.start();\n+            } catch (Exception ex) {\n+                LOG.error(\"Unexpected error in Consumer creation \", ex);\n+            }\n+            return pollingConsumer;\n+        } else {\n+            return consumerMap.get(uri);\n+        }\n+    }\n+}"},{"sha":"4dbe36aa45df35aae29f968261e091a79fcedfac","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/CamelRoleProvisioningManager.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.PollingConsumer;\n+import org.apache.syncope.common.lib.mod.RoleMod;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.server.provisioning.api.RoleProvisioningManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+\n+public class CamelRoleProvisioningManager extends AbstractCamelProvisioningManager implements RoleProvisioningManager {\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO subject) {\n+        return create(subject, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO roleTO, final Set<String> excludedResources) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:createRole\", roleTO, props);\n+\n+        String uri = \"direct:createRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO roleTO, final Map<Long, String> roleOwnerMap,\n+            final Set<String> excludedResources) throws PropagationException {\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"roleOwnerMap\", roleOwnerMap);\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:createRoleSync\", roleTO, props);\n+\n+        String uri = \"direct:createRoleSyncPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(final RoleMod subjectMod) {\n+        return update(subjectMod, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> update(\n+            final RoleMod subjectMod, final Set<String> excludedResources) {\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:updateRole\", subjectMod, props);\n+\n+        String uri = \"direct:updateRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<PropagationStatus> delete(final Long roleKey) {\n+        sendMessage(\"direct:deleteRole\", roleKey);\n+\n+        String uri = \"direct:deleteRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(List.class);\n+    }\n+\n+    @Override\n+    public Long unlink(final RoleMod roleMod) {\n+        sendMessage(\"direct:unlinkRole\", roleMod);\n+\n+        String uri = \"direct:unlinkRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Long.class);\n+    }\n+\n+    @Override\n+    public Long link(final RoleMod roleMod) {\n+        sendMessage(\"direct:linkRole\", roleMod);\n+\n+        String uri = \"direct:linkRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Long.class);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<PropagationStatus> deprovision(final Long roleKey, Collection<String> resources) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"resources\", resources);\n+\n+        sendMessage(\"direct:deprovisionRole\", roleKey, props);\n+\n+        String uri = \"direct:deprovisionRolePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(List.class);\n+    }\n+\n+}"},{"sha":"1ed83fdf0f9b6bd2402729755014482380fbb87a","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/CamelUserProvisioningManager.java","status":"added","additions":342,"deletions":0,"changes":342,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,342 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel;\n+\n+import java.util.AbstractMap;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.PollingConsumer;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.UserProvisioningManager;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.sync.ProvisioningResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CamelUserProvisioningManager extends AbstractCamelProvisioningManager implements UserProvisioningManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CamelUserProvisioningManager.class);\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO) {\n+        return create(userTO, true, false, null, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, boolean storePassword) {\n+        return create(userTO, storePassword, false, null, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n+            boolean disablePwdPolicyCheck, Boolean enabled, Set<String> excludedResources) {\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"storePassword\", storePassword);\n+        props.put(\"disablePwdPolicyCheck\", disablePwdPolicyCheck);\n+        props.put(\"enabled\", enabled);\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:createUser\", userTO, props);\n+\n+        String uri = \"direct:createPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod) {\n+        return update(userMod, false);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> update(UserMod userMod, boolean removeMemberships) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"removeMemberships\", removeMemberships);\n+\n+        sendMessage(\"direct:updateUser\", userMod, props);\n+\n+        String uri = \"direct:updatePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public List<PropagationStatus> delete(final Long userKey) {\n+        return delete(userKey, Collections.<String>emptySet());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<PropagationStatus> delete(final Long userKey, final Set<String> excludedResources) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:deleteUser\", userKey, props);\n+\n+        String uri = \"direct:deletePort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(List.class);\n+    }\n+\n+    @Override\n+    public Long unlink(final UserMod userMod) {\n+        sendMessage(\"direct:unlinkUser\", userMod);\n+\n+        String uri = \"direct:unlinkPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        exchange.getIn().setBody((exchange.getIn().getBody(UserMod.class).getKey()));\n+        return exchange.getIn().getBody(Long.class);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> activate(final User user, final StatusMod statusMod) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"token\", statusMod.getToken());\n+        props.put(\"user\", user);\n+        props.put(\"statusMod\", statusMod);\n+\n+        if (statusMod.isOnSyncope()) {\n+            sendMessage(\"direct:activateUser\", user.getKey(), props);\n+        } else {\n+            WorkflowResult<Long> updated =\n+                    new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+            sendMessage(\"direct:statusUser\", updated, props);\n+        }\n+\n+        String uri = \"direct:statusPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> reactivate(final User user, final StatusMod statusMod) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"user\", user);\n+        props.put(\"statusMod\", statusMod);\n+\n+        if (statusMod.isOnSyncope()) {\n+            sendMessage(\"direct:reactivateUser\", user.getKey(), props);\n+        } else {\n+            WorkflowResult<Long> updated =\n+                    new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+            sendMessage(\"direct:statusUser\", updated, props);\n+        }\n+\n+        String uri = \"direct:statusPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final StatusMod statusMod) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"user\", user);\n+        props.put(\"statusMod\", statusMod);\n+\n+        if (statusMod.isOnSyncope()) {\n+            sendMessage(\"direct:suspendUser\", user.getKey(), props);\n+        } else {\n+            WorkflowResult<Long> updated =\n+                    new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n+            sendMessage(\"direct:statusUser\", updated, props);\n+        }\n+\n+        String uri = \"direct:statusPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public Long link(final UserMod subjectMod) {\n+        sendMessage(\"direct:linkUser\", subjectMod);\n+\n+        String uri = \"direct:linkPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        exchange.getIn().setBody((exchange.getIn().getBody(UserMod.class).getKey()));\n+        return exchange.getIn().getBody(Long.class);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<PropagationStatus> deprovision(final Long user, final Collection<String> resources) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"resources\", resources);\n+\n+        sendMessage(\"direct:deprovisionUser\", user, props);\n+\n+        String uri = \"direct:deprovisionPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+\n+        return exchange.getIn().getBody(List.class);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map.Entry<Long, List<PropagationStatus>> update(\n+            final UserMod userMod, Long id, final ProvisioningResult result,\n+            final Boolean enabled, final Set<String> excludedResources) {\n+\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"id\", id);\n+        props.put(\"result\", result);\n+        props.put(\"enabled\", enabled);\n+        props.put(\"excludedResources\", excludedResources);\n+\n+        sendMessage(\"direct:updateSyncUser\", userMod, props);\n+\n+        String uri = \"direct:updateSyncPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        Exception e;\n+        if ((e = (Exception) exchange.getProperty(Exchange.EXCEPTION_CAUGHT)) != null) {\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", id, e);\n+\n+            result.setStatus(ProvisioningResult.Status.FAILURE);\n+            result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n+\n+            WorkflowResult<Map.Entry<UserMod, Boolean>> updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                    new AbstractMap.SimpleEntry<>(userMod, false), new PropagationByResource(),\n+                    new HashSet<String>());\n+            sendMessage(\"direct:syncUserStatus\", updated, props);\n+            exchange = pollingConsumer.receive();\n+        }\n+\n+        return exchange.getIn().getBody(Map.Entry.class);\n+    }\n+\n+    @Override\n+    public void innerSuspend(final User user, final boolean suspend) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"suspend\", suspend);\n+\n+        sendMessage(\"direct:suspendUserWF\", user, props);\n+\n+        String uri = \"direct:suspendWFPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+    }\n+\n+    @Override\n+    public void requestPasswordReset(final Long userKey) {\n+        sendMessage(\"direct:requestPwdReset\", userKey);\n+\n+        String uri = \"direct:requestPwdResetPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+    }\n+\n+    @Override\n+    public void confirmPasswordReset(final User user, final String token, final String password) {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(\"user\", user);\n+        props.put(\"userId\", user.getKey());\n+        props.put(\"token\", token);\n+        props.put(\"password\", password);\n+\n+        sendMessage(\"direct:confirmPwdReset\", user, props);\n+\n+        String uri = \"direct:confirmPwdResetPort\";\n+        PollingConsumer pollingConsumer = getConsumer(uri);\n+        Exchange exchange = pollingConsumer.receive();\n+\n+        if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n+            throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n+        }\n+    }\n+\n+}"},{"sha":"125b17fd46aa36c606a20108c6099b6f015bb406","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/SyncopeCamelContext.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.URLDecoder;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBElement;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.apache.camel.model.Constants;\n+import org.apache.camel.model.RouteDefinition;\n+import org.apache.camel.spring.SpringCamelContext;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.dao.CamelRouteDAO;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+\n+@Component\n+public class SyncopeCamelContext {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeCamelContext.class);\n+\n+    @Autowired\n+    private CamelRouteDAO routeDAO;\n+\n+    private SpringCamelContext camelContext = null;\n+\n+    public SpringCamelContext getContext() {\n+        synchronized (this) {\n+            if (camelContext == null) {\n+                camelContext = new SpringCamelContext(ApplicationContextProvider.getApplicationContext());\n+            }\n+        }\n+\n+        if (camelContext.getRouteDefinitions().isEmpty()) {\n+            List<CamelRoute> routes = routeDAO.findAll();\n+            LOG.debug(\"{} route(s) are going to be loaded \", routes.size());\n+            loadContext(routeDAO, routes);\n+            try {\n+                camelContext.start();\n+            } catch (Exception e) {\n+                LOG.error(\"While starting Camel context\", e);\n+            }\n+        }\n+\n+        return camelContext;\n+    }\n+\n+    public void loadContext(final CamelRouteDAO routeDAO, final List<CamelRoute> routes) {\n+        try {\n+            DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+            JAXBContext jaxbContext = JAXBContext.newInstance(Constants.JAXB_CONTEXT_PACKAGES);\n+            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();\n+            List<RouteDefinition> routeDefs = new ArrayList<>();\n+            for (CamelRoute route : routes) {\n+                InputStream is = null;\n+                try {\n+                    is = new ByteArrayInputStream(\n+                            URLDecoder.decode(route.getContent(), SyncopeConstants.DEFAULT_ENCODING).getBytes());\n+                    Document doc = dBuilder.parse(is);\n+                    doc.getDocumentElement().normalize();\n+                    Node routeEl = doc.getElementsByTagName(\"route\").item(0);\n+                    JAXBElement<RouteDefinition> obj = unmarshaller.unmarshal(routeEl, RouteDefinition.class);\n+                    routeDefs.add(obj.getValue());\n+                } finally {\n+                    IOUtils.closeQuietly(is);\n+                }\n+            }\n+            camelContext.addRouteDefinitions(routeDefs);\n+        } catch (Exception e) {\n+            LOG.error(\"While loading Camel context {}\", e);\n+        }\n+    }\n+\n+    public void reloadContext() {\n+        if (camelContext == null) {\n+            getContext();\n+        } else {\n+            if (!camelContext.getRouteDefinitions().isEmpty()) {\n+                try {\n+                    camelContext.removeRouteDefinitions(new ArrayList<>(camelContext.getRouteDefinitions()));\n+                } catch (Exception e) {\n+                    LOG.error(\"While clearing Camel context {}\", e);\n+                }\n+            }\n+\n+            loadContext(routeDAO, new ArrayList<>(routeDAO.findAll()));\n+        }\n+    }\n+\n+    public void reloadContext(final String routeKey) {\n+        if (camelContext == null) {\n+            getContext();\n+        } else {\n+            if (!camelContext.getRouteDefinitions().isEmpty()) {\n+                camelContext.getRouteDefinitions().remove(camelContext.getRouteDefinition(routeKey));\n+                loadContext(routeDAO, Collections.singletonList(routeDAO.find(routeKey)));\n+            }\n+        }\n+    }\n+\n+    public List<RouteDefinition> getDefinitions() {\n+        return camelContext.getRouteDefinitions();\n+    }\n+}"},{"sha":"c271d65a33ee7a5aac8ec1bd9515609c6b61a5fa","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/data/CamelRouteDataBinderImpl.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.data;\n+\n+import org.apache.syncope.common.lib.to.CamelRouteTO;\n+import org.apache.syncope.server.misc.spring.BeanUtils;\n+import org.apache.syncope.server.persistence.api.dao.CamelRouteDAO;\n+import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n+import org.apache.syncope.server.provisioning.api.data.CamelRouteDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CamelRouteDataBinderImpl implements CamelRouteDataBinder {\n+\n+    @Autowired\n+    private CamelRouteDAO routeDAO;\n+\n+    @Override\n+    public CamelRouteTO getRouteTO(final CamelRoute route) {\n+        CamelRouteTO routeTO = new CamelRouteTO();\n+        BeanUtils.copyProperties(route, routeTO);\n+        return routeTO;\n+    }\n+\n+    @Override\n+    public void update(final CamelRoute route, final CamelRouteTO routeTO) {\n+        route.setContent(routeTO.getContent());\n+        routeDAO.save(route);\n+    }\n+\n+}"},{"sha":"b51dbee3c8c3d60d50c6e700628c51bcb9d81bd3","filename":"syncope620/ext/camel/provisioning-camel/src/main/resources/provisioning.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+userProvisioningManager=org.apache.syncope.server.provisioning.camel.CamelUserProvisioningManager\n+roleProvisioningManager=org.apache.syncope.server.provisioning.camel.CamelRoleProvisioningManager"},{"sha":"827d16e57364d4213aa1f0d51bf102fc8e601628","filename":"syncope620/ext/camel/provisioning-camel/src/main/resources/roleRoutes.xml","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FroleRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FroleRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FroleRoutes.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,168 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<routes>\n+ \n+  <!--\n+      The default routes define each task involved in user creation:\n+      main operations consist in user workflow creation and its propagation.         \n+  -->\n+  <!--\n+      CREATE ROLE\n+  -->\n+        \n+  <route id=\"createRole\">\n+    <from uri=\"direct:createRole\"/>\n+    <setProperty propertyName=\"subject\">\n+      <simple>${body}</simple>\n+    </setProperty>\n+    <doTry>\n+      <bean ref=\"rwfAdapter\" method=\"create(${body})\"/>\n+      <process ref=\"defaultRoleCreatePropagation\" />\n+      <to uri=\"direct:createRolePort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:createRolePort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route> \n+               \n+  <!--\n+      CREATE ROLE SYNC\n+  -->\n+  <route id=\"createRoleSync\">\n+    <from uri=\"direct:createRoleSync\"/>\n+    <setProperty propertyName=\"subject\">\n+      <simple>${body}</simple>\n+    </setProperty>\n+    <doTry>\n+      <bean ref=\"rwfAdapter\" method=\"create(${body})\"/>\n+      <process ref=\"defaultRoleCreateSyncPropagation\" />\n+      <to uri=\"direct:createRoleSyncPort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:createRoleSyncPort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route> \n+        \n+         \n+  <!--\n+      UPDATE ROLE\n+  -->\n+  <route id=\"updateRole\">\n+    <from uri=\"direct:updateRole\"/>\n+    <setProperty propertyName=\"subjectMod\">\n+      <simple>${body}</simple>\n+    </setProperty>\n+    <doTry>\n+      <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+      <process ref=\"defaultRoleUpdatePropagation\" />\n+      <to uri=\"direct:updateRolePort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:updateRolePort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route>\n+               \n+  <!--\n+      DELETE ROLE\n+  -->\n+  <route id=\"deleteRole\">\n+    <from uri=\"direct:deleteRole\"/>\n+    <doTry>\n+      <process ref=\"defaultRoleDeletePropagation\" />\n+      <bean ref=\"rwfAdapter\" method=\"delete(${body})\"/>\n+      <setBody>\n+        <simple>${property.statuses}</simple>\n+      </setBody>\n+      <to uri=\"direct:deleteRolePort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:deleteRolePort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route>\n+        \n+  <!-- \n+      UNLINK USER\n+  -->\n+  <route id=\"unlinkRole\">\n+    <from uri=\"direct:unlinkRole\"/>\n+    <doTry>\n+      <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+      <setBody>\n+        <simple>${body.getResult}</simple>\n+      </setBody>\n+      <to uri=\"direct:unlinkRolePort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:unlinkRolePort\"/>\n+      </doCatch>\n+    </doTry>            \n+  </route>\n+        \n+  <!--\n+      LINK USER\n+  -->\n+        \n+  <route id=\"linkRole\">\n+    <from uri=\"direct:linkRole\"/>\n+    <doTry>\n+      <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n+      <setBody>\n+        <simple>${body.getResult}</simple>\n+      </setBody>\n+      <to uri=\"direct:linkRolePort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:linkRolePort\"/>\n+      </doCatch>\n+    </doTry>            \n+  </route>\n+        \n+  <!--\n+      DEPROVISION ROLE\n+  -->\n+  <route id=\"deprovisionRole\">\n+    <from uri=\"direct:deprovisionRole\"/>            \n+    <process ref=\"defaultRoleDeprovisionPropagation\" />\n+    <to uri=\"direct:deprovisionRolePort\"/>              \n+  </route>\n+    \n+</routes>"},{"sha":"d62ab76625ef56f1f9319f7d8b9d25f7a2446ca6","filename":"syncope620/ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"added","additions":304,"deletions":0,"changes":304,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,304 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<routes>\n+ \n+  <!--\n+      The default routes define each task involved in user creation:\n+      main operations consist in user workflow creation and its propagation.         \n+  -->  \t\n+  <!--\n+      CREATE USER\n+      This is the entry point of the route and is involved in accepting\n+      the UserTO. When it arrives, the user workflow is created. If the\n+      creation is successfull, the result is sent to propagation, otherwise\n+      if an exception was raised, the exception has to be returned to the\n+      caller. The property actual allows to store the received UserTO in\n+      order to use it later.\n+  -->\n+        \n+  <route id=\"createUser\">\n+    <from uri=\"direct:createUser\"/>\n+    <setProperty propertyName=\"actual\">\n+      <simple>${body}</simple>\n+    </setProperty>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"create(${body},${property.disablePwdPolicyCheck},\n+                                 ${property.enabled},${property.storePassword})\"/>\n+      <process ref=\"defaultUserCreatePropagation\" />\n+      <to uri=\"direct:createPort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:createPort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route> \n+        \n+  <!--\n+      The propagation route deals with propagation of created user. In this\n+      case we used a custom processor to perform this task: it means that\n+      a custom java class contains the propagation strategy.\n+  -->\n+       \n+  <!--\n+      UPDATE USER\n+  -->\n+  <route id=\"updateUser\">\n+    <from uri=\"direct:updateUser\"/>\n+    <setProperty propertyName=\"actual\">\n+      <simple>${body}</simple>\n+    </setProperty>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+      <process ref=\"defaultUserUpdatePropagation\" />\n+      <to uri=\"direct:updatePort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:updatePort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route>\n+        \n+\n+                \n+  <!--\n+      UPDATE SYNC USER\n+  -->\n+  <route id=\"updateSyncUser\">\n+    <from uri=\"direct:updateSyncUser\"/>            \n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+      <to uri=\"direct:syncUserStatus\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:updateSyncPort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route>\n+        \n+  <route id=\"syncUserStatus\">\n+    <from uri=\"direct:syncUserStatus\"/>\n+    <process ref=\"userStatusOnSync\" />\n+    <process ref=\"defaultUserUpdateInSyncPropagation\" />\n+    <to uri=\"direct:updateSyncPort\"/>\n+  </route>\n+  <!--\n+      DELETE USER\n+  -->\n+  <route id=\"deleteUser\">\n+    <from uri=\"direct:deleteUser\"/>\n+    <doTry>\n+      <process ref=\"defaultUserDeletePropagation\" />\n+      <bean ref=\"uwfAdapter\" method=\"delete(${body})\"/>\n+      <setBody>\n+        <simple>${property.statuses}</simple>\n+      </setBody>\n+      <to uri=\"direct:deletePort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:deletePort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route>\n+        \n+  <!-- \n+      UNLINK USER\n+  -->\n+  <route id=\"unlinkUser\">\n+    <from uri=\"direct:unlinkUser\"/>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+      <setBody>\n+        <simple>${body.getResult.getKey}</simple>\n+      </setBody>\n+      <to uri=\"direct:unlinkPort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:unlinkPort\"/>\n+      </doCatch>\n+    </doTry>            \n+  </route>\n+        \n+  <!--\n+      LINK USER\n+  -->\n+        \n+  <route id=\"linkUser\">\n+    <from uri=\"direct:linkUser\"/>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n+      <setBody>\n+        <simple>${body.getResult.getKey}</simple>\n+      </setBody>\n+      <to uri=\"direct:linkPort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:linkPort\"/>\n+      </doCatch>\n+    </doTry>            \n+  </route>\n+        \n+  <!-- \n+      ACTIVATE USER\n+  -->\n+  <route id=\"activateUser\">\n+    <from uri=\"direct:activateUser\"/>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"activate(${body}, ${property.token})\"/>\n+      <to uri=\"direct:statusUser\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:statusPort\"/>\n+      </doCatch>\n+    </doTry>    \n+  </route>\n+  <!-- \n+      REACTIVATE USER\n+  -->\n+  <route id=\"reactivateUser\">\n+    <from uri=\"direct:reactivateUser\"/>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"reactivate(${body})\"/>\n+      <to uri=\"direct:statusUser\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:statusPort\"/>\n+      </doCatch>\n+    </doTry>    \n+  </route>\n+  <!-- \n+      SUSPEND USER\n+  -->\n+  <route id=\"suspendUser\">\n+    <from uri=\"direct:suspendUser\"/>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n+      <to uri=\"direct:statusUser\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:statusPort\"/>\n+      </doCatch>\n+    </doTry>  \n+  </route>\n+        \n+  <!-- \n+      STATUS PROPAGATION\n+  -->\n+        \n+  <route id=\"statusUser\">\n+    <from uri=\"direct:statusUser\"/>            \n+    <process ref=\"defaultUserStatusPropagation\" />\n+    <to uri=\"direct:statusPort\"/>              \n+  </route>\n+        \n+        \n+  <!--\n+      DEPROVISION USER\n+  -->\n+  <route id=\"deprovisionUser\">\n+    <from uri=\"direct:deprovisionUser\"/>            \n+    <process ref=\"defaultUserDeprovisionPropagation\" />\n+    <to uri=\"direct:deprovisionPort\"/>              \n+  </route>\n+    \n+  <!--\n+      SUSPEND USER AFTER POLICY VIOLATION\n+  -->\n+        \n+  <route id=\"suspendUserWF\">\n+    <from uri=\"direct:suspendUserWF\"/>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n+      <process ref=\"defaultUserWFSuspendPropagation\"/>\n+      <to uri=\"direct:suspendWFPort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:suspendWFPort\"/>\n+      </doCatch>\n+    </doTry>  \n+  </route>\n+        \n+  <!--\n+      REQUEST PASSWORD RESET ROUTE\n+  -->\n+        \n+  <route id=\"requestPwdReset\">\n+    <from uri=\"direct:requestPwdReset\"/>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"requestPasswordReset(${body})\"/>\n+      <to uri=\"direct:requestPwdResetPort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:requestPwdResetPort\"/>\n+      </doCatch>\n+    </doTry>  \n+  </route>\n+  <!--\n+      CONFIRM PASSWORD RESET\n+  -->\n+  <route id=\"confirmPwdReset\">\n+    <from uri=\"direct:confirmPwdReset\"/>\n+    <doTry>\n+      <bean ref=\"uwfAdapter\" method=\"confirmPasswordReset(${property.userId},${property.token},${property.password})\"/>\n+      <process ref=\"defaultUserConfirmPwdResetPropagation\" />\n+      <to uri=\"direct:confirmPwdResetPort\"/>\n+      <doCatch>        \n+        <exception>java.lang.RuntimeException</exception>\n+        <handled>\n+          <constant>false</constant>\n+        </handled>\n+        <to uri=\"direct:confirmPwdResetPort\"/>\n+      </doCatch>\n+    </doTry>\n+  </route>\n+\n+</routes>"},{"sha":"a2b2397246004dca5dd0c01b07986e1ad0dbd916","filename":"syncope620/ext/camel/rest-api/pom.xml","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Frest-api%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-camel</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel REST API</name>\n+  <description>Apache Syncope Extensions: Camel REST API</description>\n+  <groupId>org.apache.syncope.ext.camel</groupId>\n+  <artifactId>syncope-ext-camel-rest-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"d16b81293f31db0a9e4fa2213368cd805281cb97","filename":"syncope620/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.CamelRouteTO;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+\n+@Path(\"camelRoutes\")\n+public interface CamelRouteService extends JAXRSService {\n+\n+    @GET\n+    @Path(\"{subjectType}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<CamelRouteTO> list(@NotNull @PathParam(\"subjectType\") SubjectType subjectType);\n+\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    CamelRouteTO read(@PathParam(\"key\") String key);\n+\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@PathParam(\"key\") String key, CamelRouteTO route);\n+\n+}"},{"sha":"acae2fe7c7d74fb1bfc23f93293a25a20608ad23","filename":"syncope620/ext/camel/rest-cxf/pom.xml","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-camel</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: Camel REST CXF</name>\n+  <description>Apache Syncope Extensions: Camel REST CXF</description>\n+  <groupId>org.apache.syncope.ext.camel</groupId>\n+  <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.server</groupId>\n+      <artifactId>syncope-server-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"2d85376a3ccf0de54a38af1ac3a511dfe1431e10","filename":"syncope620/ext/camel/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/CamelRouteServiceImpl.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.rest.cxf.service;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.CamelRouteTO;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.rest.api.service.CamelRouteService;\n+import org.apache.syncope.server.logic.CamelRouteLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class CamelRouteServiceImpl extends AbstractServiceImpl implements CamelRouteService {\n+\n+    @Autowired\n+    private CamelRouteLogic logic;\n+\n+    @Override\n+    public List<CamelRouteTO> list(final SubjectType subjectType) {\n+        return logic.list(subjectType);\n+    }\n+\n+    @Override\n+    public CamelRouteTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public void update(final String key, final CamelRouteTO route) {\n+        route.setKey(key);\n+        logic.update(route);\n+    }\n+\n+}"},{"sha":"cecf9a4488d5e2ab5aa24593b5f778638fee1dfc","filename":"syncope620/ext/pom.xml","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fext%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions</name>\n+  <description>Apache Syncope Extensions</description>\n+  <groupId>org.apache.syncope</groupId>\n+  <artifactId>syncope-ext</artifactId>\n+  <packaging>pom</packaging>\n+\n+  <modules>\n+    <module>camel</module>\n+  </modules>\n+\n+</project>"},{"sha":"7bf75a1a9f3f32f045853376f938f9c3ae6789bb","filename":"syncope620/fit/reference/src/main/resources/serverContext.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2FserverContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2FserverContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2FserverContext.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -34,6 +34,7 @@ under the License.\n         <value>file:${conf.directory}/mail.properties</value>\n         <value>file:${conf.directory}/logic.properties</value>\n         <value>file:${conf.directory}/workflow.properties</value>\n+        <value>file:${conf.directory}/provisioning.properties</value>\n       </list>\n     </property>\n   </bean>\n@@ -46,6 +47,7 @@ under the License.\n         <value>classpath:mail.properties</value>\n         <value>classpath:logic.properties</value>\n         <value>classpath:workflow.properties</value>\n+        <value>classpath:provisioning.properties</value>\n       </list>\n     </property>\n   </bean>"},{"sha":"73c067fa838d2452293359be200a3b3507006c26","filename":"syncope620/pom.xml","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fpom.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -322,6 +322,8 @@ under the License.\n \n     <cxf.version>3.0.3</cxf.version>\n \n+    <camel.version>2.14.1</camel.version>\t\n+\n     <jackson.version>2.4.5</jackson.version>\n \n     <spring.version>4.1.4.RELEASE</spring.version>\n@@ -476,6 +478,24 @@ under the License.\n       </dependency>      \n       <!-- /CXF -->\n       \n+      <!-- Camel -->\n+      <dependency>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>camel-core</artifactId>\n+        <version>${camel.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>camel-spring</artifactId>\n+        <version>${camel.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>camel-script</artifactId>\n+        <version>${camel.version}</version>\n+      </dependency>\n+      <!-- /Camel -->\n+      \n       <dependency>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-jdbc</artifactId>\n@@ -1183,5 +1203,7 @@ under the License.\n     <module>server</module>\n     <module>client</module>\n     <module>fit</module>\n+    <module>ext</module>\n   </modules>\n+\n </project>"},{"sha":"0ad2585f9808c0043de145036291971d6e7d61d2","filename":"syncope620/server/logic/src/test/resources/logicTest.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Flogic%2Fsrc%2Ftest%2Fresources%2FlogicTest.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -31,6 +31,7 @@ under the License.\n         <value>classpath:mail.properties</value>\n         <value>classpath:logic.properties</value>\n         <value>classpath:workflow.properties</value>\n+        <value>classpath:provisioning.properties</value>\n       </list>\n     </property>\n     <property name=\"ignoreResourceNotFound\" value=\"true\"/>"},{"sha":"31a5704ccb3fda6395657a0556ce7ebd2137df91","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/DefaultRoleProvisioningManager.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -48,9 +48,7 @@\n import org.apache.syncope.server.misc.security.AuthContextUtil;\n import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.server.workflow.api.RoleWorkflowAdapter;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DefaultRoleProvisioningManager implements RoleProvisioningManager {\n \n     private static final Logger LOG = LoggerFactory.getLogger(RoleProvisioningManager.class);"},{"sha":"85a489b4a86861dbda203b73319adf17ce78a2c4","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -46,9 +46,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n public class DefaultUserProvisioningManager implements UserProvisioningManager {\n \n     private static final Logger LOG = LoggerFactory.getLogger(UserProvisioningManager.class);"},{"sha":"da646ccf045dbf2b92f337fc9392c53dd674184b","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -48,7 +48,6 @@\n import org.apache.syncope.server.persistence.api.entity.user.UMapping;\n import org.apache.syncope.server.persistence.api.entity.user.UMappingItem;\n import org.apache.syncope.server.provisioning.api.ConnectorRegistry;\n-import org.apache.syncope.server.provisioning.java.ConnectorManager;\n import org.apache.syncope.server.misc.jexl.JexlUtil;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"2ed4d0de6d4ef1e1758027062f044bd5d1d787a7","filename":"syncope620/server/provisioning-java/src/main/resources/provisioning.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+userProvisioningManager=org.apache.syncope.server.provisioning.java.DefaultUserProvisioningManager\n+roleProvisioningManager=org.apache.syncope.server.provisioning.java.DefaultRoleProvisioningManager"},{"sha":"72f6664dcfdd3f8c909c7de6f0078ef5f6d652a9","filename":"syncope620/server/provisioning-java/src/main/resources/provisioningContext.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -31,6 +31,9 @@ under the License.\n   <task:annotation-driven executor=\"connectorExecutor\"/>\n   <task:executor id=\"connectorExecutor\" pool-size=\"10\"/>\n   \n+  <bean class=\"${userProvisioningManager}\"/>\n+  <bean class=\"${roleProvisioningManager}\"/>\n+\n   <bean id=\"scheduler\" class=\"org.springframework.scheduling.quartz.SchedulerFactoryBean\"\n         lazy-init=\"false\" depends-on=\"nonJPAdbInitializer\">\n     <property name=\"autoStartup\" value=\"true\"/>"},{"sha":"a63d6650e294c200887d2a8aa4eef09a994cd7ff","filename":"syncope620/server/provisioning-java/src/test/resources/provisioningTest.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -30,6 +30,7 @@ under the License.\n         <value>classpath:connid.properties</value>\n         <value>classpath:mail.properties</value>\n         <value>classpath:workflow.properties</value>\n+        <value>classpath:provisioning.properties</value>\n       </list>\n     </property>\n     <property name=\"ignoreResourceNotFound\" value=\"true\"/>"},{"sha":"233d47be1801328d5a0b1b7011490a00e0fe38bd","filename":"syncope620/server/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/WorkflowServiceImpl.java","status":"modified","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FWorkflowServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dae87ef8989ad20818e45a05ff7830d709286da1/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FWorkflowServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FWorkflowServiceImpl.java?ref=dae87ef8989ad20818e45a05ff7830d709286da1","patch":"@@ -20,7 +20,6 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n-import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n@@ -37,25 +36,6 @@ public class WorkflowServiceImpl extends AbstractServiceImpl implements Workflow\n     @Autowired\n     private WorkflowLogic logic;\n \n-    @Override\n-    public Response getOptions(final SubjectType kind) {\n-        String key;\n-        String value;\n-        if (kind == SubjectType.USER) {\n-            key = RESTHeaders.ACTIVITI_USER_ENABLED;\n-            value = \"false\"; //Boolean.toString(ActivitiDetector.isActivitiEnabledForUsers());\n-        } else {\n-            key = RESTHeaders.ACTIVITI_ROLE_ENABLED;\n-            value = \"false\"; //Boolean.toString(ActivitiDetector.isActivitiEnabledForRoles());\n-        }\n-\n-        Response.ResponseBuilder builder = Response.ok().header(HttpHeaders.ALLOW, OPTIONS_ALLOW);\n-        if (key != null && value != null) {\n-            builder.header(key, value);\n-        }\n-        return builder.build();\n-    }\n-\n     @Override\n     public Response exportDefinition(final SubjectType kind) {\n         final MediaType accept ="}]}