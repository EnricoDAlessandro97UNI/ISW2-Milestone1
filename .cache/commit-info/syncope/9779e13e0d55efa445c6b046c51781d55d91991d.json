{"sha":"9779e13e0d55efa445c6b046c51781d55d91991d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk3NzllMTNlMGQ1NWVmYTQ0NWM2YjA0NmM1MTc4MWQ1NWQ5MTk5MWQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-10T16:35:33Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-10T16:35:46Z"},"message":"[SYNCOPE-1143] Now connector instances require an admin realm, which is used to enforce access control on it for administrative purposes","tree":{"sha":"0e96b7e4eb2092b242328c11b6ed744ccb5835c2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0e96b7e4eb2092b242328c11b6ed744ccb5835c2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9779e13e0d55efa445c6b046c51781d55d91991d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9779e13e0d55efa445c6b046c51781d55d91991d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9779e13e0d55efa445c6b046c51781d55d91991d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9779e13e0d55efa445c6b046c51781d55d91991d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f1eaaa2631431fd2de9d25a1b3c9b03f7cd77639","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1eaaa2631431fd2de9d25a1b3c9b03f7cd77639","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1eaaa2631431fd2de9d25a1b3c9b03f7cd77639"}],"stats":{"total":846,"additions":632,"deletions":214},"files":[{"sha":"ab84d10b58df6ab5609849683948600531411b8a","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":11,"deletions":17,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -19,19 +19,20 @@\n package org.apache.syncope.client.console;\n \n import java.text.DateFormat;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n+import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.list.SetUniqueList;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -217,25 +218,18 @@ public UserTO getSelfTO() {\n         return selfTO;\n     }\n \n-    public Set<String> getAvailableRealms(final String... entitlements) {\n-        final Set<String> availableRealms = new HashSet<>();\n-        if (entitlements != null && entitlements.length > 0) {\n-            for (String entitlement : entitlements) {\n-                final Set<String> realms = auth.get(entitlement);\n-                if (CollectionUtils.isNotEmpty(realms)) {\n-                    availableRealms.addAll(realms);\n-                }\n-            }\n-        } else {\n-            for (Map.Entry<String, Set<String>> entitlement : auth.entrySet()) {\n-                availableRealms.addAll(entitlement.getValue());\n-            }\n+    public List<String> getAuthRealms() {\n+        List<String> sortable = new ArrayList<>();\n+        List<String> available = SetUniqueList.setUniqueList(sortable);\n+        for (Map.Entry<String, Set<String>> entitlement : auth.entrySet()) {\n+            available.addAll(entitlement.getValue());\n         }\n-        return availableRealms;\n+        Collections.sort(sortable);\n+        return sortable;\n     }\n \n     public boolean owns(final String entitlements) {\n-        return owns(entitlements, \"/\");\n+        return owns(entitlements, SyncopeConstants.ROOT_REALM);\n     }\n \n     public boolean owns(final String entitlements, final String realm) {"},{"sha":"d569b149927de495b69d782e07259c053204972d","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -27,12 +27,12 @@\n import de.agilecoders.wicket.core.markup.html.bootstrap.image.IconType;\n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n@@ -72,7 +72,7 @@ public class RealmChoicePanel extends Panel {\n \n     private final Model<RealmTO> model;\n \n-    private final Set<String> availableRealms;\n+    private final Collection<String> availableRealms;\n \n     private final Map<String, Pair<RealmTO, List<RealmTO>>> tree;\n \n@@ -146,13 +146,13 @@ public int compare(final DynRealmTO left, final DynRealmTO right) {\n         container.setOutputMarkupId(true);\n         add(container);\n \n-        availableRealms = SyncopeConsoleSession.get().getAvailableRealms();\n+        availableRealms = SyncopeConsoleSession.get().getAuthRealms();\n \n         reloadRealmTree();\n     }\n \n     public final void reloadRealmTree() {\n-        final Label realmLabel = new Label(\"realmLabel\", new Model<String>());\n+        final Label realmLabel = new Label(\"realmLabel\", new Model<>());\n         realmLabel.setOutputMarkupId(true);\n \n         container.addOrReplace(realmLabel);\n@@ -186,7 +186,6 @@ protected List<AbstractLink> newSubMenuButtons(final String buttonMarkupId) {\n \n                     @Override\n                     public void onClick(final AjaxRequestTarget target) {\n-\n                     }\n \n                     @Override\n@@ -288,7 +287,7 @@ public boolean isEnabled() {\n \n                                     @Override\n                                     public boolean evaluate(final String availableRealm) {\n-                                        return \"/\".equals(availableRealm)\n+                                        return SyncopeConstants.ROOT_REALM.equals(availableRealm)\n                                                 || realmTO.getKey().equals(availableRealm);\n                                     }\n                                 });"},{"sha":"606a32d4215903530136b1573b97c1e26ad3dde3","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":30,"deletions":19,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -22,10 +22,13 @@\n import java.io.Serializable;\n import java.net.URI;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n@@ -39,6 +42,7 @@\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -92,8 +96,8 @@ protected List<ResourceTO> load() {\n         }\n     };\n \n-    private final LoadableDetachableModel<Map<String, List<ConnInstanceTO>>> connModel\n-            = new LoadableDetachableModel<Map<String, List<ConnInstanceTO>>>() {\n+    private final LoadableDetachableModel<Map<String, List<ConnInstanceTO>>> connModel =\n+            new LoadableDetachableModel<Map<String, List<ConnInstanceTO>>>() {\n \n         private static final long serialVersionUID = 5275935387613157432L;\n \n@@ -116,8 +120,8 @@ protected Map<String, List<ConnInstanceTO>> load() {\n         }\n     };\n \n-    private final LoadableDetachableModel<Pair<List<URI>, List<URI>>> csModel\n-            = new LoadableDetachableModel<Pair<List<URI>, List<URI>>>() {\n+    private final LoadableDetachableModel<Pair<List<URI>, List<URI>>> csModel =\n+            new LoadableDetachableModel<Pair<List<URI>, List<URI>>>() {\n \n         private static final long serialVersionUID = 5275935387613157433L;\n \n@@ -177,7 +181,7 @@ public void onClose(final AjaxRequestTarget target) {\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 target.appendJavaScript(\"zoomIn($('#drawing')[0]);\");\n             }\n-        }, ActionLink.ActionType.ZOOM_IN, StandardEntitlement.RESOURCE_LIST).disableIndicator().hideLabel();\n+        }, ActionLink.ActionType.ZOOM_IN, StandardEntitlement.CONNECTOR_LIST).disableIndicator().hideLabel();\n         zoomActionPanel.add(new ActionLink<Serializable>() {\n \n             private static final long serialVersionUID = -3722207913631435501L;\n@@ -186,7 +190,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 target.appendJavaScript(\"zoomOut($('#drawing')[0]);\");\n             }\n-        }, ActionLink.ActionType.ZOOM_OUT, StandardEntitlement.RESOURCE_LIST).disableIndicator().hideLabel();\n+        }, ActionLink.ActionType.ZOOM_OUT, StandardEntitlement.CONNECTOR_LIST).disableIndicator().hideLabel();\n \n         body.add(zoomActionPanel);\n         // -----------------------------------------\n@@ -366,24 +370,31 @@ protected void populateItem(final ListItem<ConnInstanceTO> item) {\n         // -----------------------------------------\n         // Add Resources\n         // -----------------------------------------\n+        final Collection<String> administrableConns = new HashSet<>();\n+        for (List<ConnInstanceTO> connInstances : connModel.getObject().values()) {\n+            administrableConns.addAll(CollectionUtils.collect(connInstances, EntityTOUtils.keyTransformer()));\n+        }\n+\n         final List<String> connToBeProcessed = new ArrayList<>();\n-        for (ResourceTO resourceTO : resModel.getObject()) {\n-            final TopologyNode topologynode = new TopologyNode(\n-                    resourceTO.getKey(), resourceTO.getKey(), TopologyNode.Kind.RESOURCE);\n+        for (final ResourceTO resourceTO : resModel.getObject()) {\n+            if (administrableConns.contains(resourceTO.getConnector())) {\n+                final TopologyNode topologynode = new TopologyNode(\n+                        resourceTO.getKey(), resourceTO.getKey(), TopologyNode.Kind.RESOURCE);\n \n-            final Map<Serializable, TopologyNode> remoteConnections;\n+                final Map<Serializable, TopologyNode> remoteConnections;\n \n-            if (connections.containsKey(resourceTO.getConnector())) {\n-                remoteConnections = connections.get(resourceTO.getConnector());\n-            } else {\n-                remoteConnections = new HashMap<>();\n-                connections.put(resourceTO.getConnector(), remoteConnections);\n-            }\n+                if (connections.containsKey(resourceTO.getConnector())) {\n+                    remoteConnections = connections.get(resourceTO.getConnector());\n+                } else {\n+                    remoteConnections = new HashMap<>();\n+                    connections.put(resourceTO.getConnector(), remoteConnections);\n+                }\n \n-            remoteConnections.put(topologynode.getKey(), topologynode);\n+                remoteConnections.put(topologynode.getKey(), topologynode);\n \n-            if (!connToBeProcessed.contains(resourceTO.getConnector())) {\n-                connToBeProcessed.add(resourceTO.getConnector());\n+                if (!connToBeProcessed.contains(resourceTO.getConnector())) {\n+                    connToBeProcessed.add(resourceTO.getConnector());\n+                }\n             }\n         }\n "},{"sha":"37377ef2e1a04331ad59bb8f29ff53cc840b82ce","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -152,15 +152,14 @@ protected WizardModel buildModelSteps(final AnyWrapper<A> modelObject, final Wiz\n     }\n \n     protected Details<A> addOptionalDetailsPanel(final AnyWrapper<A> modelObject) {\n-\n-        if (modelObject.getInnerObject().getKey() != null) {\n+        if (modelObject.getInnerObject().getKey() == null) {\n+            return null;\n+        } else {\n             return new Details<>(\n                     modelObject,\n                     mode == AjaxWizard.Mode.TEMPLATE,\n                     true,\n                     pageRef);\n-        } else {\n-            return null;\n         }\n     }\n }"},{"sha":"a7dd79aecc363d215595a009f4ccc8460de94ca7","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/Details.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -73,8 +73,7 @@ public Details(\n                     \"destinationRealm\", \"destinationRealm\", new PropertyModel<String>(inner, \"realm\"), false);\n \n             ((AjaxDropDownChoicePanel<String>) realm).setChoices(CollectionUtils.collect(\n-                    realms,\n-                    new Transformer<RealmTO, String>() {\n+                    realms, new Transformer<RealmTO, String>() {\n \n                 @Override\n                 public String transform(final RealmTO input) {"},{"sha":"6cf6023b9a9e5be5dda6e1840694d129fbc0637f","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserWizardBuilder.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserWizardBuilder.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -104,7 +104,6 @@ protected Serializable onApplyInternal(final AnyWrapper<UserTO> modelObject) {\n \n     @Override\n     protected Details<UserTO> addOptionalDetailsPanel(final AnyWrapper<UserTO> modelObject) {\n-\n         return new UserDetails(\n                 UserWrapper.class.cast(modelObject),\n                 mode == AjaxWizard.Mode.TEMPLATE,"},{"sha":"43d4d859683cec8e1b30af729ffea6b904d38b3a","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.java","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -19,32 +19,81 @@\n package org.apache.syncope.client.console.wizards.resources;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.rest.RealmRestClient;\n import org.apache.syncope.client.console.wicket.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n \n public class ConnectorDetailsPanel extends WizardStep {\n \n     private static final long serialVersionUID = -2435937897614232137L;\n \n+    private final LoadableDetachableModel<List<String>> realms;\n+\n     public ConnectorDetailsPanel(final ConnInstanceTO connInstanceTO, final List<ConnBundleTO> bundles) {\n         super();\n         setOutputMarkupId(true);\n \n+        final List<String> authRealms = SyncopeConsoleSession.get().getAuthRealms();\n+        realms = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                List<RealmTO> allRealms = new RealmRestClient().list();\n+                CollectionUtils.filter(allRealms, new Predicate<RealmTO>() {\n+\n+                    @Override\n+                    public boolean evaluate(final RealmTO realm) {\n+                        return IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n+\n+                            @Override\n+                            public boolean evaluate(final String fullpath) {\n+                                return realm.getFullPath().startsWith(fullpath);\n+                            }\n+                        });\n+                    }\n+                });\n+\n+                List<String> result = CollectionUtils.collect(allRealms, new Transformer<RealmTO, String>() {\n+\n+                    @Override\n+                    public String transform(final RealmTO realm) {\n+                        return realm.getFullPath();\n+                    }\n+                }, new ArrayList<String>());\n+                Collections.sort(result);\n+                return result;\n+            }\n+        };\n+\n+        AjaxDropDownChoicePanel<String> realm = new AjaxDropDownChoicePanel<>(\n+                \"adminRealm\", \"adminRealm\", new PropertyModel<String>(connInstanceTO, \"adminRealm\"), false);\n+        realm.setChoices(realms);\n+        realm.setOutputMarkupId(true);\n+        realm.addRequiredLabel();\n+        add(realm);\n+\n         AjaxTextFieldPanel displayName = new AjaxTextFieldPanel(\n                 \"displayName\", \"displayName\", new PropertyModel<String>(connInstanceTO, \"displayName\"), false);\n         displayName.setOutputMarkupId(true);"},{"sha":"01ac51247066c878d5cb9e748fd20bce4e3e87a8","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.html","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.html?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -22,6 +22,10 @@\n   </head>\n   <body>\n     <wicket:panel>\n+      <div class=\"form-group\">\n+        <span wicket:id=\"adminRealm\">[adminRealm]</span>\n+      </div>\n+\n       <div class=\"form-group\">\n         <span wicket:id=\"displayName\">[displayName]</span>\n       </div>"},{"sha":"23711a979affbda89077d3440ed5dab43f55c578","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.properties?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -24,3 +24,4 @@ poolMinIdle=Min idle objects\n poolMaxIdle=Max idle objects\n poolMaxWait=Max waiting time (msec)\n poolMinEvictableIdleTime=Min eviction time (msec)\n+adminRealm=Administration Realm"},{"sha":"0fd9aa775c7be512891b3d8aef126147d02a4713","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_it.properties?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -24,3 +24,4 @@ poolMinIdle=Max oggetti attivi\n poolMaxIdle=Max oggetti inattivi\n poolMaxWait=Tempo max attesa\n poolMinEvictableIdleTime=Tempo min espulsione\n+adminRealm=Realm di amministrazione"},{"sha":"db06733e5d9c870b0f3b757ad0d2cdbed53f23a7","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel_pt_BR.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_pt_BR.properties?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -24,3 +24,4 @@ poolMinIdle=Min idle objects\n poolMaxIdle=Max idle objects\n poolMaxWait=Max waiting time (msec)\n poolMinEvictableIdleTime=Min eviction time (msec)\n+adminRealm=Administration Realm"},{"sha":"c5d4b3f6fa9f2ade701202b7ee5ecd391ecafdf5","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel_ru.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel_ru.properties?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -25,3 +25,4 @@ poolMinIdle=\\u041c\\u0438\\u043d\\u0438\\u043c\\u0443\\u043c \\u043e\\u0431\\u044a\\u0435\\\n poolMaxIdle=\\u041c\\u0430\\u043a\\u0441\\u0438\\u043c\\u0443\\u043c \\u043e\\u0431\\u044a\\u0435\\u043a\\u0442\\u043e\\u0432 \\u0432 \\u043e\\u0436\\u0438\\u0434\\u0430\\u043d\\u0438\\u0438\n poolMaxWait=\\u041c\\u0430\\u043a\\u0441\\u0438\\u043c\\u0430\\u043b\\u044c\\u043d\\u043e\\u0435 \\u0432\\u0440\\u0435\\u043c\\u044f \\u043e\\u0436\\u0438\\u0434\\u0430\\u043d\\u0438\\u044f (\\u043c\\u0441)\n poolMinEvictableIdleTime=\\u041c\\u0438\\u043d\\u0438\\u043c\\u0430\\u043b\\u044c\\u043d\\u043e\\u0435 \\u0432\\u0440\\u0435\\u043c\\u044f \\u043e\\u0436\\u0438\\u0434\\u0430\\u043d\\u0438\\u044f (\\u043c\\u0441)\n+adminRealm=Administration Realm"},{"sha":"94409729fde780d55869b6be914c1fece827be9a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -42,6 +42,8 @@ public class ConnInstanceTO extends AbstractBaseBean implements EntityTO {\n \n     private String key;\n \n+    private String adminRealm;\n+\n     private String location;\n \n     private String connectorName;\n@@ -71,6 +73,14 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    public String getAdminRealm() {\n+        return adminRealm;\n+    }\n+\n+    public void setAdminRealm(final String adminRealm) {\n+        this.adminRealm = adminRealm;\n+    }\n+\n     public String getLocation() {\n         return location;\n     }"},{"sha":"bf83632f006626e5ba2f86fb52ba883f72aad337","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":4,"deletions":49,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -40,7 +39,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -53,6 +51,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n@@ -230,50 +229,6 @@ protected ProvisioningResult<TO> afterDelete(\n         return result;\n     }\n \n-    private static class StartsWithPredicate implements Predicate<String> {\n-\n-        private final Collection<String> targets;\n-\n-        StartsWithPredicate(final Collection<String> targets) {\n-            this.targets = targets;\n-        }\n-\n-        @Override\n-        public boolean evaluate(final String realm) {\n-            return IterableUtils.matchesAny(targets, new Predicate<String>() {\n-\n-                @Override\n-                public boolean evaluate(final String target) {\n-                    return realm.startsWith(target);\n-                }\n-            });\n-        }\n-\n-    }\n-\n-    protected static class DynRealmsPredicate implements Predicate<String> {\n-\n-        @Override\n-        public boolean evaluate(final String realm) {\n-            return !realm.startsWith(\"/\");\n-        }\n-    }\n-\n-    protected Set<String> getEffectiveRealms(final Set<String> allowedRealms, final String requestedRealm) {\n-        Set<String> allowed = RealmUtils.normalize(allowedRealms);\n-        Set<String> requested = new HashSet<>();\n-        requested.add(requestedRealm);\n-\n-        Set<String> effective = new HashSet<>();\n-        CollectionUtils.select(requested, new StartsWithPredicate(allowed), effective);\n-        CollectionUtils.select(allowed, new StartsWithPredicate(requested), effective);\n-\n-        // includes dynamic realms\n-        CollectionUtils.select(allowedRealms, new DynRealmsPredicate(), effective);\n-\n-        return effective;\n-    }\n-\n     protected boolean securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n         boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n \n@@ -293,15 +248,15 @@ public boolean evaluate(final String ownedRealm) {\n         if (!authorized) {\n             throw new DelegatedAdministrationException(\n                     realm,\n-                    this instanceof UserLogic\n+                    (this instanceof UserLogic\n                             ? AnyTypeKind.USER\n                             : this instanceof GroupLogic\n                                     ? AnyTypeKind.GROUP\n-                                    : AnyTypeKind.ANY_OBJECT,\n+                                    : AnyTypeKind.ANY_OBJECT).name(),\n                     key);\n         }\n \n-        return IterableUtils.matchesAny(effectiveRealms, new DynRealmsPredicate());\n+        return IterableUtils.matchesAny(effectiveRealms, new RealmUtils.DynRealmsPredicate());\n     }\n \n     public abstract Date findLastChange(String key);"},{"sha":"49d18dbdd3aab4b2576e48336433a758c9581019","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n@@ -109,7 +110,7 @@ public int searchCount(final SearchCond searchCond, final String realm) {\n             throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n         }\n \n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.SEARCH.getFor(searchCond.hasAnyTypeCond())),\n                 realm);\n \n@@ -125,7 +126,7 @@ public List<AnyObjectTO> search(final SearchCond searchCond, final int page, fin\n             throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n         }\n \n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.SEARCH.getFor(searchCond.hasAnyTypeCond())),\n                 realm);\n \n@@ -152,7 +153,7 @@ public ProvisioningResult<AnyObjectTO> create(final AnyObjectTO anyObjectTO, fin\n             throw SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n         }\n \n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.CREATE.getFor(before.getLeft().getType())),\n                 before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n@@ -174,7 +175,7 @@ public ProvisioningResult<AnyObjectTO> update(\n                 before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())\n                 ? before.getLeft().getRealm().getValue()\n                 : anyObjectTO.getRealm();\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 realm);\n         boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n@@ -194,7 +195,7 @@ public ProvisioningResult<AnyObjectTO> delete(final String key, final boolean nu\n         AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n         Pair<AnyObjectTO, List<LogicActions>> before = beforeDelete(anyObject);\n \n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.DELETE.getFor(before.getLeft().getType())),\n                 before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n@@ -211,7 +212,7 @@ public ProvisioningResult<AnyObjectTO> delete(final String key, final boolean nu\n     public AnyObjectTO unlink(final String key, final Collection<String> resources) {\n         // security checks\n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n@@ -233,7 +234,7 @@ public StringPatchItem transform(final String resource) {\n     public AnyObjectTO link(final String key, final Collection<String> resources) {\n         // security checks\n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n@@ -257,7 +258,7 @@ public ProvisioningResult<AnyObjectTO> unassign(\n \n         // security checks\n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n@@ -285,7 +286,7 @@ public ProvisioningResult<AnyObjectTO> assign(\n \n         // security checks\n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n@@ -309,7 +310,7 @@ public ProvisioningResult<AnyObjectTO> deprovision(\n \n         // security checks\n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n@@ -332,7 +333,7 @@ public ProvisioningResult<AnyObjectTO> provision(\n \n         // security checks\n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n                 anyObjectTO.getRealm());\n         securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());"},{"sha":"653293644acead56f3f89acdf3c5c4c53ba3fc6c","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":50,"deletions":3,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -26,6 +26,8 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -44,6 +46,9 @@\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConnectorInfo;\n@@ -75,23 +80,61 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n+    protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n+        boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String ownedRealm) {\n+                return realm.startsWith(ownedRealm);\n+            }\n+        });\n+        if (!authorized) {\n+            throw new DelegatedAdministrationException(realm, ConnInstance.class.getSimpleName(), key);\n+        }\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_CREATE + \"')\")\n     public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n+        if (connInstanceTO.getAdminRealm() == null) {\n+            throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+        }\n+\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_CREATE),\n+                connInstanceTO.getAdminRealm());\n+        securityChecks(effectiveRealms, connInstanceTO.getAdminRealm(), null);\n+\n         return binder.getConnInstanceTO(connInstanceDAO.save(binder.getConnInstance(connInstanceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_UPDATE + \"')\")\n     public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n+        if (connInstanceTO.getAdminRealm() == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n+            sce.getElements().add(\"Invalid or null realm specified: \" + connInstanceTO.getAdminRealm());\n+            throw sce;\n+        }\n+\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_UPDATE),\n+                connInstanceTO.getAdminRealm());\n+        securityChecks(effectiveRealms, connInstanceTO.getAdminRealm(), connInstanceTO.getKey());\n+\n         return binder.getConnInstanceTO(binder.update(connInstanceTO));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_DELETE + \"')\")\n     public ConnInstanceTO delete(final String key) {\n-        ConnInstance connInstance = connInstanceDAO.find(key);\n+        ConnInstance connInstance = connInstanceDAO.authFind(key);\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + key + \"'\");\n         }\n \n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_DELETE),\n+                connInstance.getAdminRealm().getFullPath());\n+        securityChecks(effectiveRealms, connInstance.getAdminRealm().getFullPath(), connInstance.getKey());\n+\n         if (!connInstance.getResources().isEmpty()) {\n             SyncopeClientException associatedResources = SyncopeClientException.build(\n                     ClientExceptionType.AssociatedResources);\n@@ -136,7 +179,7 @@ public ConnInstanceTO transform(final ConnInstance connInstance) {\n     public ConnInstanceTO read(final String key, final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n \n-        ConnInstance connInstance = connInstanceDAO.find(key);\n+        ConnInstance connInstance = connInstanceDAO.authFind(key);\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + key + \"'\");\n         }\n@@ -183,7 +226,7 @@ public List<ConnBundleTO> getBundles(final String lang) {\n     public List<ConnIdObjectClassTO> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n-        ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n+        ConnInstance connInstance = connInstanceDAO.authFind(connInstanceTO.getKey());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n         }\n@@ -214,6 +257,10 @@ public List<ConnIdObjectClassTO> buildObjectClassInfo(\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n     public void check(final ConnInstanceTO connInstanceTO) {\n+        if (connInstanceTO.getAdminRealm() == null) {\n+            throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+        }\n+\n         connFactory.createConnector(binder.getConnInstance(connInstanceTO)).test();\n     }\n "},{"sha":"7e9b88bb45c1dac6b5f7fbd060cb6146c573e00e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -122,10 +122,10 @@ public boolean evaluate(final String ownedRealm) {\n             authorized = !CollectionUtils.intersection(groupDAO.findDynRealms(key), effectiveRealms).isEmpty();\n         }\n         if (!authorized) {\n-            throw new DelegatedAdministrationException(realm, AnyTypeKind.GROUP, key);\n+            throw new DelegatedAdministrationException(realm, AnyTypeKind.GROUP.name(), key);\n         }\n \n-        return IterableUtils.matchesAny(effectiveRealms, new AbstractAnyLogic.DynRealmsPredicate());\n+        return IterableUtils.matchesAny(effectiveRealms, new RealmUtils.DynRealmsPredicate());\n     }\n \n     @Transactional(readOnly = true)\n@@ -177,7 +177,7 @@ public TypeExtensionTO readTypeExtension(final String key, final String anyTypeK\n     @Transactional(readOnly = true)\n     @Override\n     public int count(final String realm) {\n-        return groupDAO.count(getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realm));\n+        return groupDAO.count(RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm));\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -188,7 +188,7 @@ public List<GroupTO> list(\n             final String realm, final boolean details) {\n \n         return CollectionUtils.collect(groupDAO.findAll(\n-                getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n+                RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n                 page, size, orderBy),\n                 new Transformer<Group, GroupTO>() {\n \n@@ -205,7 +205,7 @@ public GroupTO transform(final Group input) {\n     @Override\n     public int searchCount(final SearchCond searchCondition, final String realm) {\n         return searchDAO.count(\n-                getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n+                RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n                 searchCondition, AnyTypeKind.GROUP);\n     }\n \n@@ -216,7 +216,7 @@ public List<GroupTO> search(final SearchCond searchCondition, final int page, fi\n             final List<OrderByClause> orderBy, final String realm, final boolean details) {\n \n         List<Group> matchingGroups = searchDAO.search(\n-                getEffectiveRealms(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n+                RealmUtils.getEffective(SyncopeConstants.FULL_ADMIN_REALMS, realm),\n                 searchCondition, page, size, orderBy, AnyTypeKind.GROUP);\n         return CollectionUtils.collect(matchingGroups, new Transformer<Group, GroupTO>() {\n \n@@ -237,7 +237,7 @@ public ProvisioningResult<GroupTO> create(final GroupTO groupTO, final boolean n\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n \n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_CREATE),\n                 before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n@@ -259,7 +259,7 @@ public ProvisioningResult<GroupTO> update(final GroupPatch groupPatch, final boo\n                 before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())\n                 ? before.getLeft().getRealm().getValue()\n                 : groupTO.getRealm();\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 realm);\n         boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n@@ -280,7 +280,7 @@ public ProvisioningResult<GroupTO> delete(final String key, final boolean nullPr\n         GroupTO group = binder.getGroupTO(key);\n         Pair<GroupTO, List<LogicActions>> before = beforeDelete(group);\n \n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_DELETE),\n                 before.getLeft().getRealm());\n         securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n@@ -312,7 +312,7 @@ public String transform(final Group group) {\n     public GroupTO unlink(final String key, final Collection<String> resources) {\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n@@ -335,7 +335,7 @@ public StringPatchItem transform(final String resource) {\n     public GroupTO link(final String key, final Collection<String> resources) {\n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n@@ -360,7 +360,7 @@ public ProvisioningResult<GroupTO> unassign(\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n@@ -389,7 +389,7 @@ public ProvisioningResult<GroupTO> assign(\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n@@ -414,7 +414,7 @@ public ProvisioningResult<GroupTO> deprovision(\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n@@ -438,7 +438,7 @@ public ProvisioningResult<GroupTO> provision(\n \n         // security checks\n         GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());"},{"sha":"1cde7456bf10fab5b72898d5af2de3200660e912","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":58,"deletions":8,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -25,7 +25,9 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.IteratorUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -62,7 +64,10 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -113,6 +118,19 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private ConnectorFactory connFactory;\n \n+    protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n+        boolean authorized = IterableUtils.matchesAny(effectiveRealms, new Predicate<String>() {\n+\n+            @Override\n+            public boolean evaluate(final String ownedRealm) {\n+                return realm.startsWith(ownedRealm);\n+            }\n+        });\n+        if (!authorized) {\n+            throw new DelegatedAdministrationException(realm, ExternalResource.class.getSimpleName(), key);\n+        }\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_CREATE + \"')\")\n     public ResourceTO create(final ResourceTO resourceTO) {\n         if (StringUtils.isBlank(resourceTO.getKey())) {\n@@ -121,7 +139,19 @@ public ResourceTO create(final ResourceTO resourceTO) {\n             throw sce;\n         }\n \n-        if (resourceDAO.find(resourceTO.getKey()) != null) {\n+        ConnInstance connInstance = connInstanceDAO.authFind(resourceTO.getConnector());\n+        if (connInstance == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidExternalResource);\n+            sce.getElements().add(\"Connector \" + resourceTO.getConnector());\n+            throw sce;\n+        }\n+\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_CREATE),\n+                connInstance.getAdminRealm().getFullPath());\n+        securityChecks(effectiveRealms, connInstance.getAdminRealm().getFullPath(), null);\n+\n+        if (resourceDAO.authFind(resourceTO.getKey()) != null) {\n             throw new DuplicateException(resourceTO.getKey());\n         }\n \n@@ -130,17 +160,22 @@ public ResourceTO create(final ResourceTO resourceTO) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n     public ResourceTO update(final ResourceTO resourceTO) {\n-        ExternalResource resource = resourceDAO.find(resourceTO.getKey());\n+        ExternalResource resource = resourceDAO.authFind(resourceTO.getKey());\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceTO.getKey() + \"'\");\n         }\n \n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n+                resource.getConnector().getAdminRealm().getFullPath());\n+        securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n+\n         return binder.getResourceTO(resourceDAO.save(binder.update(resource, resourceTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n     public void setLatestSyncToken(final String key, final String anyTypeKey) {\n-        ExternalResource resource = resourceDAO.find(key);\n+        ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n@@ -153,6 +188,11 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n             throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n         }\n \n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n+                resource.getConnector().getAdminRealm().getFullPath());\n+        securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n+\n         Connector connector;\n         try {\n             connector = connFactory.getConnector(resource);\n@@ -168,7 +208,7 @@ public void setLatestSyncToken(final String key, final String anyTypeKey) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_UPDATE + \"')\")\n     public void removeSyncToken(final String key, final String anyTypeKey) {\n-        ExternalResource resource = resourceDAO.find(key);\n+        ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n@@ -181,17 +221,27 @@ public void removeSyncToken(final String key, final String anyTypeKey) {\n             throw new NotFoundException(\"Provision for AnyType '\" + anyTypeKey + \"' in Resource '\" + key + \"'\");\n         }\n \n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_UPDATE),\n+                resource.getConnector().getAdminRealm().getFullPath());\n+        securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n+\n         provision.setSyncToken(null);\n         resourceDAO.save(resource);\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_DELETE + \"')\")\n     public ResourceTO delete(final String key) {\n-        ExternalResource resource = resourceDAO.find(key);\n+        ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n \n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_DELETE),\n+                resource.getConnector().getAdminRealm().getFullPath());\n+        securityChecks(effectiveRealms, resource.getConnector().getAdminRealm().getFullPath(), resource.getKey());\n+\n         ResourceTO resourceToDelete = binder.getResourceTO(resource);\n \n         resourceDAO.delete(key);\n@@ -202,7 +252,7 @@ public ResourceTO delete(final String key) {\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.RESOURCE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public ResourceTO read(final String key) {\n-        ExternalResource resource = resourceDAO.find(key);\n+        ExternalResource resource = resourceDAO.authFind(key);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + key + \"'\");\n         }\n@@ -225,7 +275,7 @@ public ResourceTO transform(final ExternalResource input) {\n     private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n             final String resourceKey, final String anyTypeKey) {\n \n-        ExternalResource resource = resourceDAO.find(resourceKey);\n+        ExternalResource resource = resourceDAO.authFind(resourceKey);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceKey + \"'\");\n         }\n@@ -305,7 +355,7 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n         ObjectClass objectClass;\n         OperationOptions options;\n         if (SyncopeConstants.REALM_ANYTYPE.equals(anyTypeKey)) {\n-            resource = resourceDAO.find(key);\n+            resource = resourceDAO.authFind(key);\n             if (resource == null) {\n                 throw new NotFoundException(\"Resource '\" + key + \"'\");\n             }"},{"sha":"ee68a4e7c3345cb26e0261014fa1bc8f3ad2afac","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -55,6 +55,7 @@\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -95,8 +96,8 @@ public Date findLastChange(final String key) {\n     @Transactional(readOnly = true)\n     @Override\n     public int count(final String realm) {\n-        return userDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm));\n+        return userDAO.count(RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm));\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.USER_SEARCH + \"')\")\n@@ -106,9 +107,8 @@ public List<UserTO> list(\n             final int page, final int size, final List<OrderByClause> orderBy,\n             final String realm, final boolean details) {\n \n-        return CollectionUtils.collect(userDAO.findAll(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n-                page, size, orderBy),\n+        return CollectionUtils.collect(userDAO.findAll(RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm), page, size, orderBy),\n                 new Transformer<User, UserTO>() {\n \n             @Transactional(readOnly = true)\n@@ -138,8 +138,8 @@ public UserTO read(final String key) {\n     @Transactional(readOnly = true)\n     @Override\n     public int searchCount(final SearchCond searchCondition, final String realm) {\n-        return searchDAO.count(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n+        return searchDAO.count(RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n                 searchCondition, AnyTypeKind.USER);\n     }\n \n@@ -149,8 +149,8 @@ public int searchCount(final SearchCond searchCondition, final String realm) {\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy, final String realm, final boolean details) {\n \n-        List<User> matchingUsers = searchDAO.search(\n-                getEffectiveRealms(AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n+        List<User> matchingUsers = searchDAO.search(RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_SEARCH), realm),\n                 searchCondition, page, size, orderBy, AnyTypeKind.USER);\n         return CollectionUtils.collect(matchingUsers, new Transformer<User, UserTO>() {\n \n@@ -195,7 +195,7 @@ protected ProvisioningResult<UserTO> doCreate(\n         }\n \n         if (!self) {\n-            Set<String> effectiveRealms = getEffectiveRealms(\n+            Set<String> effectiveRealms = RealmUtils.getEffective(\n                     AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_CREATE),\n                     before.getLeft().getRealm());\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n@@ -233,7 +233,7 @@ protected ProvisioningResult<UserTO> doUpdate(\n                 && before.getLeft().getRealm() != null\n                 && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n \n-            Set<String> effectiveRealms = getEffectiveRealms(\n+            Set<String> effectiveRealms = RealmUtils.getEffective(\n                     AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                     before.getLeft().getRealm().getValue());\n             authDynRealms =\n@@ -278,7 +278,7 @@ protected Pair<String, List<PropagationStatus>> setStatusOnWfAdapter(\n     public ProvisioningResult<UserTO> status(final StatusPatch statusPatch, final boolean nullPriorityAsync) {\n         // security checks\n         UserTO toUpdate = binder.getUserTO(statusPatch.getKey());\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 toUpdate.getRealm());\n         securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n@@ -354,7 +354,7 @@ protected ProvisioningResult<UserTO> doDelete(\n         Pair<UserTO, List<LogicActions>> before = beforeDelete(userTO);\n \n         if (!self) {\n-            Set<String> effectiveRealms = getEffectiveRealms(\n+            Set<String> effectiveRealms = RealmUtils.getEffective(\n                     AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_DELETE),\n                     before.getLeft().getRealm());\n             securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n@@ -391,7 +391,7 @@ public String transform(final Group group) {\n     public UserTO unlink(final String key, final Collection<String> resources) {\n         // security checks\n         UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n@@ -414,7 +414,7 @@ public StringPatchItem transform(final String resource) {\n     public UserTO link(final String key, final Collection<String> resources) {\n         // security checks\n         UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n@@ -439,7 +439,7 @@ public ProvisioningResult<UserTO> unassign(\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n@@ -468,7 +468,7 @@ public ProvisioningResult<UserTO> assign(\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n@@ -498,7 +498,7 @@ public ProvisioningResult<UserTO> deprovision(\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n@@ -522,7 +522,7 @@ public ProvisioningResult<UserTO> provision(\n \n         // security checks\n         UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n+        Set<String> effectiveRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(StandardEntitlement.USER_UPDATE),\n                 user.getRealm());\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());"},{"sha":"bb27896f87a529ff124622feca9c64a607bb83e9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ConnInstanceDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConnInstanceDAO.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -25,6 +25,8 @@ public interface ConnInstanceDAO extends DAO<ConnInstance> {\n \n     ConnInstance find(String key);\n \n+    ConnInstance authFind(String key);\n+\n     List<ConnInstance> findAll();\n \n     ConnInstance save(ConnInstance connector);"},{"sha":"b48fd79c6c43364445fbe88af9528344488440ae","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -30,16 +30,14 @@ public interface ExternalResourceDAO extends DAO<ExternalResource> {\n \n     ExternalResource find(String key);\n \n+    ExternalResource authFind(String key);\n+\n     List<Provision> findProvisionsByAuxClass(AnyTypeClass anyTypeClass);\n \n     List<ExternalResource> findByPolicy(Policy policy);\n \n-    List<ExternalResource> findWithoutPolicy(Class<? extends Policy> policyClass);\n-\n     List<ExternalResource> findAll();\n \n-    List<ExternalResource> findAllByPriority();\n-\n     ExternalResource save(ExternalResource resource);\n \n     void deleteMapping(String schemaName);"},{"sha":"908bb391c2585b7c374dd8c1cf00023679552439","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ConnInstance.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -26,6 +26,10 @@\n \n public interface ConnInstance extends Entity {\n \n+    Realm getAdminRealm();\n+\n+    void setAdminRealm(Realm adminRealm);\n+\n     void setConnectorName(String connectorName);\n \n     String getConnectorName();"},{"sha":"b052f304635be78cc67601fc3c238abf244bdb80","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -148,7 +148,7 @@ public boolean evaluate(final String realm) {\n         }\n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n             throw new DelegatedAdministrationException(\n-                    anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n+                    anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT.name(), anyObject.getKey());\n         }\n     }\n "},{"sha":"7d4c0c8479a1279a6de718e1b91013b446da7f92","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConnInstanceDAO.java","status":"modified","additions":53,"deletions":1,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConnInstanceDAO.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -18,11 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.CopyOnWriteArrayList;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -31,6 +37,8 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPAConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -51,11 +59,55 @@ public ConnInstance find(final String key) {\n         return entityManager().find(JPAConnInstance.class, key);\n     }\n \n+    @Override\n+    public ConnInstance authFind(final String key) {\n+        final ConnInstance connInstance = find(key);\n+        if (connInstance == null) {\n+            return null;\n+        }\n+\n+        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_READ);\n+        if (authRealms == null || authRealms.isEmpty()\n+                || !IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n+\n+                    @Override\n+                    public boolean evaluate(final String realm) {\n+                        return connInstance.getAdminRealm().getFullPath().startsWith(realm);\n+                    }\n+                })) {\n+\n+            throw new DelegatedAdministrationException(\n+                    connInstance.getAdminRealm().getFullPath(),\n+                    ConnInstance.class.getSimpleName(),\n+                    connInstance.getKey());\n+        }\n+\n+        return connInstance;\n+    }\n+\n     @Override\n     public List<ConnInstance> findAll() {\n+        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.CONNECTOR_LIST);\n+        if (authRealms == null || authRealms.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n         TypedQuery<ConnInstance> query = entityManager().createQuery(\n                 \"SELECT e FROM \" + JPAConnInstance.class.getSimpleName() + \" e\", ConnInstance.class);\n-        return query.getResultList();\n+\n+        return CollectionUtils.select(query.getResultList(), new Predicate<ConnInstance>() {\n+\n+            @Override\n+            public boolean evaluate(final ConnInstance connInstance) {\n+                return IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n+\n+                    @Override\n+                    public boolean evaluate(final String realm) {\n+                        return connInstance.getAdminRealm().getFullPath().startsWith(realm);\n+                    }\n+                });\n+            }\n+        }, new ArrayList<ConnInstance>());\n     }\n \n     @Override"},{"sha":"8989fc527cda6cfd874c2cab838028fbfb8e44de","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":33,"deletions":16,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -23,6 +23,9 @@\n import java.util.Set;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -53,6 +56,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n@@ -164,6 +169,33 @@ public ExternalResource find(final String name) {\n         return entityManager().find(JPAExternalResource.class, name);\n     }\n \n+    @Override\n+    public ExternalResource authFind(final String key) {\n+        final ExternalResource resource = find(key);\n+        if (resource == null) {\n+            return null;\n+        }\n+\n+        final Set<String> authRealms = AuthContextUtils.getAuthorizations().get(StandardEntitlement.RESOURCE_READ);\n+        if (authRealms == null || authRealms.isEmpty()\n+                || !IterableUtils.matchesAny(authRealms, new Predicate<String>() {\n+\n+                    @Override\n+                    public boolean evaluate(final String realm) {\n+                        return resource.getConnector() != null\n+                                && resource.getConnector().getAdminRealm().getFullPath().startsWith(realm);\n+                    }\n+                })) {\n+\n+            throw new DelegatedAdministrationException(\n+                    resource.getConnector().getAdminRealm().getFullPath(),\n+                    ExternalResource.class.getSimpleName(),\n+                    resource.getKey());\n+        }\n+\n+        return resource;\n+    }\n+\n     @Override\n     public List<Provision> findProvisionsByAuxClass(final AnyTypeClass anyTypeClass) {\n         TypedQuery<Provision> query = entityManager().createQuery(\n@@ -193,33 +225,18 @@ private StringBuilder getByPolicyQuery(final Class<? extends Policy> policyClass\n     @Override\n     public List<ExternalResource> findByPolicy(final Policy policy) {\n         TypedQuery<ExternalResource> query = entityManager().createQuery(\n-                getByPolicyQuery(policy.getClass()).append(\" = :policy\").toString(), ExternalResource.class);\n+                getByPolicyQuery(policy.getClass()).append(\"=:policy\").toString(), ExternalResource.class);\n         query.setParameter(\"policy\", policy);\n         return query.getResultList();\n     }\n \n-    @Override\n-    public List<ExternalResource> findWithoutPolicy(final Class<? extends Policy> policyClass) {\n-        TypedQuery<ExternalResource> query = entityManager().createQuery(\n-                getByPolicyQuery(policyClass).append(\" IS NULL\").toString(), ExternalResource.class);\n-        return query.getResultList();\n-    }\n-\n     @Override\n     public List<ExternalResource> findAll() {\n         TypedQuery<ExternalResource> query = entityManager().createQuery(\n                 \"SELECT e FROM  \" + JPAExternalResource.class.getSimpleName() + \" e\", ExternalResource.class);\n         return query.getResultList();\n     }\n \n-    @Override\n-    public List<ExternalResource> findAllByPriority() {\n-        TypedQuery<ExternalResource> query = entityManager().createQuery(\n-                \"SELECT e FROM  \" + JPAExternalResource.class.getSimpleName() + \" e ORDER BY e.propagationPriority\",\n-                ExternalResource.class);\n-        return query.getResultList();\n-    }\n-\n     @Override\n     @Transactional(rollbackFor = { Throwable.class })\n     public ExternalResource save(final ExternalResource resource) {"},{"sha":"4fb49e189a86593bd6dcf8160025270b5a415ba5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -172,7 +172,7 @@ public boolean evaluate(final String realm) {\n \n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n             throw new DelegatedAdministrationException(\n-                    group.getRealm().getFullPath(), AnyTypeKind.GROUP, group.getKey());\n+                    group.getRealm().getFullPath(), AnyTypeKind.GROUP.name(), group.getKey());\n         }\n     }\n "},{"sha":"5b7ec8e6fdfbaad819bfedc67881bf16d44a40dd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -191,7 +191,7 @@ public boolean evaluate(final String realm) {\n             }\n             if (authRealms == null || authRealms.isEmpty() || !authorized) {\n                 throw new DelegatedAdministrationException(\n-                        user.getRealm().getFullPath(), AnyTypeKind.USER, user.getKey());\n+                        user.getRealm().getFullPath(), AnyTypeKind.USER.name(), user.getKey());\n             }\n         }\n     }"},{"sha":"bd5a10846b4123b590a51182a4d761f2333061a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -38,7 +38,7 @@\n \n     private static final long serialVersionUID = -2666540708092702810L;\n \n-    @ManyToOne(fetch = FetchType.EAGER)\n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private JPARealm realm;\n \n     private String workflowId;"},{"sha":"7678fc2cbc89a842a24881188784d0744956717e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -32,6 +32,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.Lob;\n+import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n@@ -41,6 +42,7 @@\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.jpa.validation.entity.ConnInstanceCheck;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n@@ -57,6 +59,9 @@ public class JPAConnInstance extends AbstractGeneratedKeyEntity implements ConnI\n \n     private static final int DEFAULT_TIMEOUT = 10;\n \n+    @ManyToOne(fetch = FetchType.EAGER, optional = false)\n+    private JPARealm adminRealm;\n+\n     /**\n      * URI identifying the local / remote ConnId location where the related connector bundle is found.\n      */\n@@ -124,6 +129,17 @@ public class JPAConnInstance extends AbstractGeneratedKeyEntity implements ConnI\n \n     private JPAConnPoolConf poolConf;\n \n+    @Override\n+    public Realm getAdminRealm() {\n+        return adminRealm;\n+    }\n+\n+    @Override\n+    public void setAdminRealm(final Realm adminRealm) {\n+        checkType(adminRealm, JPARealm.class);\n+        this.adminRealm = (JPARealm) adminRealm;\n+    }\n+\n     @Override\n     public String getLocation() {\n         return location;"},{"sha":"5020adbdbdbf79ebd867bbbb172e687c26bc3324","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConnInstanceTest.java","status":"modified","additions":45,"deletions":10,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -23,18 +23,30 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.File;\n+import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n@@ -45,21 +57,44 @@ public class ConnInstanceTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<ConnInstance> connectors = connInstanceDAO.findAll();\n-        assertNotNull(connectors);\n-        assertFalse(connectors.isEmpty());\n+        List<GrantedAuthority> authorities = CollectionUtils.collect(StandardEntitlement.values(),\n+                new Transformer<String, GrantedAuthority>() {\n+\n+            @Override\n+            public GrantedAuthority transform(final String entitlement) {\n+                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+            }\n+        }, new ArrayList<GrantedAuthority>());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(\"Master\"));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+\n+        try {\n+            List<ConnInstance> connectors = connInstanceDAO.findAll();\n+            assertNotNull(connectors);\n+            assertFalse(connectors.isEmpty());\n+        } finally {\n+            SecurityContextHolder.getContext().setAuthentication(null);\n+        }\n     }\n \n     @Test\n     public void findById() {\n-        ConnInstance connectorInstance = connInstanceDAO.find(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n-\n-        assertNotNull(\"findById did not work\", connectorInstance);\n-\n+        ConnInstance connInstance = connInstanceDAO.find(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n+        assertNotNull(connInstance);\n         assertEquals(\"invalid connector name\",\n-                \"net.tirasa.connid.bundles.soap.WebServiceConnector\", connectorInstance.getConnectorName());\n-\n-        assertEquals(\"invalid bundle name\", \"net.tirasa.connid.bundles.soap\", connectorInstance.getBundleName());\n+                \"net.tirasa.connid.bundles.soap.WebServiceConnector\", connInstance.getConnectorName());\n+        assertEquals(\"invalid bundle name\", \"net.tirasa.connid.bundles.soap\", connInstance.getBundleName());\n+\n+        try {\n+            connInstanceDAO.authFind(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\");\n+            fail();\n+        } catch (DelegatedAdministrationException e) {\n+            assertNotNull(e);\n+        }\n     }\n \n     @Test"},{"sha":"03b516d54ea59aa73c922676491d05b6e84b6c04","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -74,6 +75,13 @@ public boolean evaluate(final MappingItem item) {\n                 return \"7f55b09c-b573-41dc-a9eb-ccd80bd3ea7a\".equals(item.getKey());\n             }\n         }));\n+\n+        try {\n+            resourceDAO.authFind(\"ws-target-resource-1\");\n+            fail();\n+        } catch (DelegatedAdministrationException e) {\n+            assertNotNull(e);\n+        }\n     }\n \n     @Test\n@@ -90,13 +98,6 @@ public void findAll() {\n         assertEquals(21, resources.size());\n     }\n \n-    @Test\n-    public void findAllByPriority() {\n-        List<ExternalResource> resources = resourceDAO.findAllByPriority();\n-        assertNotNull(resources);\n-        assertFalse(resources.isEmpty());\n-    }\n-\n     @Test\n     public void getConnObjectKey() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");"},{"sha":"717535ff5c7bb73873922090c67eb1fe24138f70","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -274,6 +274,18 @@ under the License.\n   <SyncopeRole_entitlements entitlement=\"USER_SEARCH\" role_id=\"Search for realm evenTwo\"/>\n   <SyncopeRole_Realm role_id=\"Search for realm evenTwo\" realm_id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\"/>\n \n+  <SyncopeRole id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_entitlements entitlement=\"CONNECTOR_READ\" role_id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_entitlements entitlement=\"CONNECTOR_UPDATE\" role_id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_entitlements entitlement=\"CONNECTOR_DELETE\" role_id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_entitlements entitlement=\"CONNECTOR_LIST\" role_id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_entitlements entitlement=\"RESOURCE_READ\" role_id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_entitlements entitlement=\"RESOURCE_UPDATE\" role_id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_entitlements entitlement=\"RESOURCE_DELETE\" role_id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_entitlements entitlement=\"RESOURCE_LIST\" role_id=\"Connector and Resource for realm evenTwo\"/>\n+  <SyncopeRole_Realm role_id=\"Connector and Resource for realm evenTwo\"\n+                     realm_id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\"/>\n+\n   <SyncopeUser id=\"1417acbe-cbf6-4277-9372-e75e04f97000\" workflowId=\"4\" status=\"active\"\n                password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n                realm_id=\"c5b75db1-fce7-470f-b780-3b9934d82a9d\"\n@@ -303,6 +315,7 @@ under the License.\n                username=\"puccini\" creator=\"admin\" lastModifier=\"admin\" \n                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n   <SyncopeUser_SyncopeRole user_id=\"823074dc-d280-436d-a7dd-07399fae48ec\" role_id=\"Search for realm evenTwo\"/>\n+  <SyncopeUser_SyncopeRole user_id=\"823074dc-d280-436d-a7dd-07399fae48ec\" role_id=\"Connector and Resource for realm evenTwo\"/>\n   \n   <SyncopeGroup id=\"37d15e4c-cdc1-460b-a591-8505c8133806\" name=\"root\"\n                 realm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n@@ -614,6 +627,7 @@ under the License.\n   <GPlainAttrValue attribute_id=\"22690472-ed3f-4972-8979-4c9251fab044\" id=\"e16765e6-f806-469e-ae34-1ddf56f2102a\" stringValue=\"r13\"/>\n \n   <ConnInstance id=\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\" displayName=\"ConnInstance100\"\n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\"\n                 bundleName=\"net.tirasa.connid.bundles.soap\"\n                 connectorName=\"net.tirasa.connid.bundles.soap.WebServiceConnector\"\n@@ -625,6 +639,7 @@ under the License.\n   <ConnInstance_capabilities connInstance_id=\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\" capability=\"SEARCH\"/>\n \n   <ConnInstance id=\"5aa5b8be-7521-481a-9651-c557aea078c1\" displayName=\"H2\"\n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 bundleName=\"net.tirasa.connid.bundles.db.table\"\n                 connectorName=\"net.tirasa.connid.bundles.db.table.DatabaseTableConnector\"\n@@ -638,6 +653,7 @@ under the License.\n   <ConnInstance_capabilities connInstance_id=\"5aa5b8be-7521-481a-9651-c557aea078c1\" capability=\"SYNC\"/>\n \n   <ConnInstance id=\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\" displayName=\"ConnInstance102\"\n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\"\n                 bundleName=\"net.tirasa.connid.bundles.soap\"\n                 connectorName=\"net.tirasa.connid.bundles.soap.WebServiceConnector\"\n@@ -650,13 +666,15 @@ under the License.\n   <ConnInstance_capabilities connInstance_id=\"5ffbb4ac-a8c3-4b44-b699-11b398a1ba08\" capability=\"SEARCH\"/>\n \n   <ConnInstance id=\"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\" displayName=\"ConnInstance103\"\n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\"\n                 bundleName=\"net.tirasa.connid.bundles.soap\"\n                 connectorName=\"net.tirasa.connid.bundles.soap.WebServiceConnector\"\n                 version=\"${connid.soap.version}\"\n                 jsonConf='[{\"schema\":{\"name\":\"endpoint\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"http://localhost:${cargo.servlet.port}/syncope-fit-build-tools/cxf/soap/provisioning\"]},{\"schema\":{\"name\":\"servicename\",\"displayName\":null,\"helpMessage\":null,\"type\":\"java.lang.String\",\"required\":true,\"order\":0,\"confidential\":false,\"defaultValues\":null},\"overridable\":false,\"values\":[\"net.tirasa.connid.bundles.soap.provisioning.interfaces.Provisioning\"]}]'/>\n \n   <ConnInstance id=\"6c2acf1b-b052-46f0-8c56-7a8ad6905edf\" displayName=\"CSVDir\"\n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\"\n                 bundleName=\"net.tirasa.connid.bundles.csvdir\"\n                 connectorName=\"net.tirasa.connid.bundles.csvdir.CSVDirConnector\"\n@@ -668,7 +686,9 @@ under the License.\n   <ConnInstance_capabilities connInstance_id=\"6c2acf1b-b052-46f0-8c56-7a8ad6905edf\" capability=\"SEARCH\"/>\n   <ConnInstance_capabilities connInstance_id=\"6c2acf1b-b052-46f0-8c56-7a8ad6905edf\" capability=\"SYNC\"/>\n     \n-  <ConnInstance id=\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\" bundleName=\"net.tirasa.connid.bundles.ldap\" displayName=\"ApacheDS\"\n+  <ConnInstance id=\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\"\n+                bundleName=\"net.tirasa.connid.bundles.ldap\" displayName=\"ApacheDS\"\n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" \n@@ -679,6 +699,7 @@ under the License.\n   <ConnInstance_capabilities connInstance_id=\"74141a3b-0762-4720-a4aa-fc3e374ef3ef\" capability=\"SEARCH\"/>\n   \n   <ConnInstance id=\"a28abd9b-9f4a-4ef6-a7a8-d19ad2a8f29d\" displayName=\"H2-test2\"\n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 bundleName=\"net.tirasa.connid.bundles.db.table\"\n                 connectorName=\"net.tirasa.connid.bundles.db.table.DatabaseTableConnector\"\n@@ -690,6 +711,7 @@ under the License.\n   <ConnInstance_capabilities connInstance_id=\"a28abd9b-9f4a-4ef6-a7a8-d19ad2a8f29d\" capability=\"SYNC\"/>\n   \n   <ConnInstance id=\"be24b061-019d-4e3e-baf0-0a6d0a45cb9c\" bundleName=\"net.tirasa.connid.bundles.db.table\" \n+                adminRealm_id=\"e4c28e7a-9dbf-4ee7-9441-93812a0d4a28\"\n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 connectorName=\"net.tirasa.connid.bundles.db.table.DatabaseTableConnector\" \n                 displayName=\"H2-testpull\" version=\"${connid.database.version}\"\n@@ -700,6 +722,7 @@ under the License.\n   <ConnInstance_capabilities connInstance_id=\"be24b061-019d-4e3e-baf0-0a6d0a45cb9c\" capability=\"SEARCH\"/>\n   \n   <ConnInstance id=\"a6d017fd-a705-4507-bb7c-6ab6a6745997\" bundleName=\"net.tirasa.connid.bundles.db.scriptedsql\" \n+                adminRealm_id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\"\n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 connectorName=\"net.tirasa.connid.bundles.db.scriptedsql.ScriptedSQLConnector\"\n                 displayName=\"Scripted SQL\" version=\"${connid.database.version}\"\n@@ -711,6 +734,7 @@ under the License.\n   <ConnInstance_capabilities connInstance_id=\"a6d017fd-a705-4507-bb7c-6ab6a6745997\" capability=\"SYNC\"/>\n   \n   <ConnInstance id=\"44c02549-19c3-483c-8025-4919c3283c37\" bundlename=\"net.tirasa.connid.bundles.rest\"\n+                adminRealm_id=\"0679e069-7355-4b20-bd11-a5a0a5453c7c\"\n                 location=\"connid://${testconnectorserver.key}@localhost:${testconnectorserver.port}\"\n                 connectorname=\"net.tirasa.connid.bundles.rest.RESTConnector\"\n                 displayname=\"REST\" version=\"${connid.rest.version}\""},{"sha":"4fd3db7fc5a271baf0bc449d0cff2215411568fd","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -185,6 +185,7 @@ we are happy to inform you that the password request was successfully executed f\n   <Notification_events notification_id=\"71769807-7f74-4dc3-ba61-e4a7a00eb8ad\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n   <ConnInstance id=\"b7ea96c3-c633-488b-98a0-b52ac35850f7\" bundleName=\"net.tirasa.connid.bundles.ldap\" displayName=\"LDAP\"\n+                adminRealm_id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\"\n                 location=\"${connid.location}\"\n                 connectorName=\"net.tirasa.connid.bundles.ldap.LdapConnector\"\n                 version=\"${connid.ldap.version}\" "},{"sha":"a21e1de104f7fb358b96cdf36c72beb2183eaa3b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/RealmUtils.java","status":"modified","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -21,6 +21,9 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n \n public final class RealmUtils {\n \n@@ -57,6 +60,50 @@ public static Set<String> normalize(final Collection<String> realms) {\n         return normalized;\n     }\n \n+    private static class StartsWithPredicate implements Predicate<String> {\n+\n+        private final Collection<String> targets;\n+\n+        StartsWithPredicate(final Collection<String> targets) {\n+            this.targets = targets;\n+        }\n+\n+        @Override\n+        public boolean evaluate(final String realm) {\n+            return IterableUtils.matchesAny(targets, new Predicate<String>() {\n+\n+                @Override\n+                public boolean evaluate(final String target) {\n+                    return realm.startsWith(target);\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    public static class DynRealmsPredicate implements Predicate<String> {\n+\n+        @Override\n+        public boolean evaluate(final String realm) {\n+            return !realm.startsWith(\"/\");\n+        }\n+    }\n+\n+    public static Set<String> getEffective(final Set<String> allowedRealms, final String requestedRealm) {\n+        Set<String> allowed = RealmUtils.normalize(allowedRealms);\n+        Set<String> requested = new HashSet<>();\n+        requested.add(requestedRealm);\n+\n+        Set<String> effective = new HashSet<>();\n+        CollectionUtils.select(requested, new StartsWithPredicate(allowed), effective);\n+        CollectionUtils.select(allowed, new StartsWithPredicate(requested), effective);\n+\n+        // includes dynamic realms\n+        CollectionUtils.select(allowedRealms, new DynRealmsPredicate(), effective);\n+\n+        return effective;\n+    }\n+\n     private RealmUtils() {\n         // empty constructor for static utility class \n     }"},{"sha":"901acc2e87b5e53a22136b7fc1c2bc1678d8abdb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -90,6 +90,7 @@ public ConnInstance buildConnInstanceOverride(\n         }\n \n         ConnInstance override = entityFactory.newEntity(ConnInstance.class);\n+        override.setAdminRealm(connInstance.getAdminRealm());\n         override.setConnectorName(connInstance.getConnectorName());\n         override.setDisplayName(connInstance.getDisplayName());\n         override.setBundleName(connInstance.getBundleName());"},{"sha":"06a802173b939a0e82b692b3a589553f260ece79","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":28,"deletions":16,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -24,8 +24,6 @@\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -37,9 +35,11 @@\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceHistoryConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnInstanceHistoryConf;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.utils.ConnPoolConfUtils;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n@@ -54,7 +54,7 @@\n @Component\n public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = { \"poolConf\", \"location\" };\n+    private static final String[] IGNORE_PROPERTIES = { \"poolConf\", \"location\", \"adminRealm\" };\n \n     @Autowired\n     private ConnIdBundleManager connIdBundleManager;\n@@ -65,6 +65,9 @@ public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n     @Autowired\n     private ConnInstanceHistoryConfDAO connInstanceHistoryConfDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private ConfDAO confDAO;\n \n@@ -98,6 +101,12 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n         ConnInstance connInstance = entityFactory.newEntity(ConnInstance.class);\n \n         BeanUtils.copyProperties(connInstanceTO, connInstance, IGNORE_PROPERTIES);\n+        if (connInstanceTO.getAdminRealm() != null) {\n+            connInstance.setAdminRealm(realmDAO.findByFullPath(connInstanceTO.getAdminRealm()));\n+        }\n+        if (connInstance.getAdminRealm() == null) {\n+            sce.getElements().add(\"Invalid or null realm specified: \" + connInstanceTO.getAdminRealm());\n+        }\n         if (connInstanceTO.getLocation() != null) {\n             connInstance.setLocation(connInstanceTO.getLocation());\n         }\n@@ -116,7 +125,7 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n \n     @Override\n     public ConnInstance update(final ConnInstanceTO connInstanceTO) {\n-        ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getKey());\n+        ConnInstance connInstance = connInstanceDAO.authFind(connInstanceTO.getKey());\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n         }\n@@ -143,6 +152,16 @@ public ConnInstance update(final ConnInstanceTO connInstanceTO) {\n         connInstance.getCapabilities().clear();\n         connInstance.getCapabilities().addAll(connInstanceTO.getCapabilities());\n \n+        if (connInstanceTO.getAdminRealm() != null) {\n+            Realm realm = realmDAO.findByFullPath(connInstanceTO.getAdminRealm());\n+            if (realm == null) {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+                sce.getElements().add(\"Invalid or null realm specified: \" + connInstanceTO.getAdminRealm());\n+                throw sce;\n+            }\n+            connInstance.setAdminRealm(realm);\n+        }\n+\n         if (connInstanceTO.getLocation() != null) {\n             connInstance.setLocation(connInstanceTO.getLocation());\n         }\n@@ -181,9 +200,9 @@ public ConnInstance update(final ConnInstanceTO connInstanceTO) {\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n         } catch (Exception e) {\n-            SyncopeClientException ex = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n-            ex.getElements().add(e.getMessage());\n-            throw ex;\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidConnInstance);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n         }\n \n         return connInstance;\n@@ -220,25 +239,18 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n \n         Pair<URI, ConnectorInfo> info = connIdBundleManager.getConnectorInfo(connInstance);\n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n+        connInstanceTO.setAdminRealm(connInstance.getAdminRealm().getFullPath());\n         connInstanceTO.setLocation(info.getLeft().toASCIIString());\n         // refresh stored properties in the given connInstance with direct information from underlying connector\n         ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(info.getRight());\n         for (final String propName : properties.getPropertyNames()) {\n             ConnConfPropSchema schema = build(properties.getProperty(propName));\n \n-            ConnConfProperty property = IterableUtils.find(connInstanceTO.getConf(),\n-                    new Predicate<ConnConfProperty>() {\n-\n-                @Override\n-                public boolean evaluate(final ConnConfProperty candidate) {\n-                    return propName.equals(candidate.getSchema().getName());\n-                }\n-            });\n+            ConnConfProperty property = connInstanceTO.getConf(propName);\n             if (property == null) {\n                 property = new ConnConfProperty();\n                 connInstanceTO.getConf().add(property);\n             }\n-\n             property.setSchema(schema);\n         }\n "},{"sha":"392ce410d27b13ce5d3dd61eff5c2efdb222c00a","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DelegatedAdministrationException.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDelegatedAdministrationException.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -24,7 +24,7 @@ public class DelegatedAdministrationException extends RuntimeException {\n \n     private static final long serialVersionUID = 7540587364235915081L;\n \n-    public DelegatedAdministrationException(final String realm, final AnyTypeKind type, final String key) {\n+    public DelegatedAdministrationException(final String realm, final String type, final String key) {\n         super(\"Missing entitlement or realm administration under \" + realm + \" for \"\n                 + (key == null\n                         ? \"new \" + type"},{"sha":"5bed533e9e60232366ba3e53203ecbdfe17690be","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -38,12 +38,15 @@\n import java.util.UUID;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n@@ -54,6 +57,7 @@\n import org.apache.syncope.common.lib.to.ProvisionTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n@@ -117,6 +121,7 @@ public void createWithException() {\n     @Test\n     public void create() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n+        connectorTO.setAdminRealm(SyncopeConstants.ROOT_REALM);\n         connectorTO.setLocation(connectorService.read(\n                 \"88a7a819-dab5-46b4-9b90-0b9769eabdb8\", Locale.ENGLISH.getLanguage()).getLocation());\n         connectorTO.setVersion(connIdSoapVersion);\n@@ -217,6 +222,7 @@ public void create() {\n     @Test\n     public void update() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n+        connectorTO.setAdminRealm(SyncopeConstants.ROOT_REALM);\n \n         // set connector instance key\n         connectorTO.setKey(\"fcf9f2b0-f7d6-42c9-84a6-61b28255a42b\");\n@@ -358,6 +364,7 @@ public void checkSelectedLanguage() {\n     @Test\n     public void validate() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n+        connectorTO.setAdminRealm(SyncopeConstants.ROOT_REALM);\n         connectorTO.setLocation(connectorServerLocation);\n         connectorTO.setVersion(connIdDbVersion);\n         connectorTO.setConnectorName(\"net.tirasa.connid.bundles.db.table.DatabaseTableConnector\");\n@@ -518,6 +525,52 @@ public void history() {\n         assertEquals(originalConfProp, ldapConn.getConf(\"maintainPosixGroupMembership\"));\n     }\n \n+    @Test\n+    public void authorizations() {\n+        SyncopeClient puccini = clientFactory.create(\"puccini\", ADMIN_PWD);\n+        ConnectorService pcs = puccini.getService(ConnectorService.class);\n+\n+        // 1. list connectors: get only the ones allowed\n+        List<ConnInstanceTO> connInstances = pcs.list(null);\n+        assertEquals(2, connInstances.size());\n+\n+        assertTrue(IterableUtils.matchesAll(connInstances, new Predicate<ConnInstanceTO>() {\n+\n+            @Override\n+            public boolean evaluate(final ConnInstanceTO object) {\n+                return \"a6d017fd-a705-4507-bb7c-6ab6a6745997\".equals(object.getKey())\n+                        || \"44c02549-19c3-483c-8025-4919c3283c37\".equals(object.getKey());\n+            }\n+        }));\n+\n+        // 2. attempt to read a connector with a different admin realm: fail\n+        try {\n+            pcs.read(\"88a7a819-dab5-46b4-9b90-0b9769eabdb8\", null);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n+        }\n+\n+        // 3. read and upate a connector in the realm for which entitlements are owned: succeed\n+        try {\n+            ConnInstanceTO scriptedsql = pcs.read(\"a6d017fd-a705-4507-bb7c-6ab6a6745997\", null);\n+            ConnConfProperty reloadScriptOnExecution = scriptedsql.getConf(\"reloadScriptOnExecution\");\n+            assertEquals(\"true\", reloadScriptOnExecution.getValues().get(0).toString());\n+\n+            reloadScriptOnExecution.getValues().set(0, \"false\");\n+            pcs.update(scriptedsql);\n+\n+            scriptedsql = pcs.read(scriptedsql.getKey(), null);\n+            reloadScriptOnExecution = scriptedsql.getConf(\"reloadScriptOnExecution\");\n+            assertEquals(\"false\", reloadScriptOnExecution.getValues().get(0).toString());\n+        } finally {\n+            ConnInstanceTO scriptedsql = connectorService.read(\"a6d017fd-a705-4507-bb7c-6ab6a6745997\", null);\n+            ConnConfProperty reloadScriptOnExecution = scriptedsql.getConf(\"reloadScriptOnExecution\");\n+            reloadScriptOnExecution.getValues().set(0, \"true\");\n+            connectorService.update(scriptedsql);\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE10() {\n         // ----------------------------------\n@@ -616,6 +669,7 @@ public void issueSYNCOPE112() {\n         // Create a new connector\n         // ----------------------------------------\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n+        connectorTO.setAdminRealm(SyncopeConstants.ROOT_REALM);\n \n         connectorTO.setLocation(connectorService.read(\n                 \"88a7a819-dab5-46b4-9b90-0b9769eabdb8\", Locale.ENGLISH.getLanguage()).getLocation());"},{"sha":"36286e03663c7eadfb8b79ba7e4c7aa96db45748","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MigrationITCase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMigrationITCase.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -31,6 +31,7 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -166,6 +167,7 @@ private String setupAnyTypeClass() {\n \n     private String setupConnector() {\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n+        connInstanceTO.setAdminRealm(SyncopeConstants.ROOT_REALM);\n         connInstanceTO.setLocation(connectorServerLocation);\n         connInstanceTO.setConnectorName(\"net.tirasa.connid.bundles.db.scriptedsql.ScriptedSQLConnector\");\n         connInstanceTO.setBundleName(\"net.tirasa.connid.bundles.db.scriptedsql\");"},{"sha":"8f881de609e91d9ed3025c41431e0e662217b112","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9779e13e0d55efa445c6b046c51781d55d91991d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9779e13e0d55efa445c6b046c51781d55d91991d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=9779e13e0d55efa445c6b046c51781d55d91991d","patch":"@@ -39,6 +39,7 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.console.commons.ConnIdSpecialName;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -609,6 +610,36 @@ public void history() {\n         assertEquals(originalFlag, ldap.isRandomPwdIfNotProvided());\n     }\n \n+    @Test\n+    public void authorizations() {\n+        SyncopeClient puccini = clientFactory.create(\"puccini\", ADMIN_PWD);\n+        ResourceService prs = puccini.getService(ResourceService.class);\n+\n+        // 1. attempt to read a resource for a connector with a different admin realm: fail\n+        try {\n+            prs.read(RESOURCE_NAME_WS1);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n+        }\n+\n+        // 2. read and upate a resource for a connector in the realm for which entitlements are owned: succeed\n+        try {\n+            ResourceTO scriptedsql = prs.read(RESOURCE_NAME_DBSCRIPTED);\n+            assertEquals(TraceLevel.ALL, scriptedsql.getCreateTraceLevel());\n+\n+            scriptedsql.setCreateTraceLevel(TraceLevel.FAILURES);\n+            prs.update(scriptedsql);\n+\n+            scriptedsql = prs.read(RESOURCE_NAME_DBSCRIPTED);\n+            assertEquals(TraceLevel.FAILURES, scriptedsql.getCreateTraceLevel());\n+        } finally {\n+            ResourceTO scriptedsql = resourceService.read(RESOURCE_NAME_DBSCRIPTED);\n+            scriptedsql.setCreateTraceLevel(TraceLevel.ALL);\n+            resourceService.update(scriptedsql);\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE323() {\n         ResourceTO actual = resourceService.read(RESOURCE_NAME_TESTDB);"}]}