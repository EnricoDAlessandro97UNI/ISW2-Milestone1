{"sha":"2a662ec5789f6a4d85848b9bd2b570ab3d17b742","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjJhNjYyZWM1Nzg5ZjZhNGQ4NTg0OGI5YmQyYjU3MGFiM2QxN2I3NDI=","commit":{"author":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-29T14:17:58Z"},"committer":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-29T14:17:58Z"},"message":"[SYNCOPE-231] Clean checkstyle errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1439902 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d49e9bbe43e4bf33d17f487358804454a80b08ea","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d49e9bbe43e4bf33d17f487358804454a80b08ea"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/2a662ec5789f6a4d85848b9bd2b570ab3d17b742","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a662ec5789f6a4d85848b9bd2b570ab3d17b742","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a662ec5789f6a4d85848b9bd2b570ab3d17b742","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a662ec5789f6a4d85848b9bd2b570ab3d17b742/comments","author":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"committer":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"parents":[{"sha":"44429a17dd83236caa82617a6f3dc5bbd79cde8f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44429a17dd83236caa82617a6f3dc5bbd79cde8f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/44429a17dd83236caa82617a6f3dc5bbd79cde8f"}],"stats":{"total":51,"additions":26,"deletions":25},"files":[{"sha":"d07b8384ce66124017f191938a6ee67447c5fa86","filename":"client/src/main/java/org/apache/syncope/client/rest/utils/RestClientExceptionMapper.java","status":"modified","additions":26,"deletions":25,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a662ec5789f6a4d85848b9bd2b570ab3d17b742/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a662ec5789f6a4d85848b9bd2b570ab3d17b742/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java?ref=2a662ec5789f6a4d85848b9bd2b570ab3d17b742","patch":"@@ -28,6 +28,7 @@\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.ext.ExceptionMapper;\r\n import javax.ws.rs.ext.Provider;\r\n+import javax.xml.ws.WebServiceException;\r\n \r\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n import org.apache.http.HttpStatus;\r\n@@ -44,15 +45,15 @@ public class RestClientExceptionMapper implements ExceptionMapper<Exception>, Re\n     private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\r\n \r\n     @Override\r\n-    public Response toResponse(final Exception e) {\r\n+    public Response toResponse(final Exception exception) {\r\n         throw new UnsupportedOperationException(\r\n                 \"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\r\n     }\r\n \r\n     @Override\r\n     public Exception fromResponse(final Response response) {\r\n         Exception ex = null;\r\n-        int statusCode = response.getStatus();\r\n+        final int statusCode = response.getStatus();\r\n \r\n         // 1. Check for composite exception in HTTP header\r\n         SyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n@@ -73,63 +74,63 @@ public Exception fromResponse(final Response response) {\n \r\n         } else {\r\n             // 4. All other codes are mapped to runtime exception with HTTP code information\r\n-            ex = new RuntimeException(String.format(\"Remote exception with status code: %s\", Response.Status\r\n+            ex = new WebServiceException(String.format(\"Remote exception with status code: %s\", Response.Status\r\n                     .fromStatusCode(statusCode).name()));\r\n         }\r\n         LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n         return ex;\r\n     }\r\n \r\n     private SyncopeClientCompositeErrorException checkCompositeException(final Response response) {\r\n-        int statusCode = response.getStatus();\r\n-        List<Object> exceptionTypesInHeaders = response.getHeaders().get(\r\n+        final int statusCode = response.getStatus();\r\n+        List<Object> exTypesInHeaders = response.getHeaders().get(\r\n                 SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n-        if (exceptionTypesInHeaders == null) {\r\n+        if (exTypesInHeaders == null) {\r\n             LOG.debug(\"No \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \" provided\");\r\n             return null;\r\n         }\r\n \r\n-        SyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(\r\n+        final SyncopeClientCompositeErrorException compException = new SyncopeClientCompositeErrorException(\r\n                 org.springframework.http.HttpStatus.valueOf(statusCode));\r\n \r\n-        Set<String> handledExceptions = new HashSet<String>();\r\n-        for (Object exceptionTypeValue : exceptionTypesInHeaders) {\r\n-            String exceptionTypeAsString = (String) exceptionTypeValue;\r\n+        final Set<String> handledExceptions = new HashSet<String>();\r\n+        for (Object exceptionTypeValue : exTypesInHeaders) {\r\n+            final String exTypeAsString = (String) exceptionTypeValue;\r\n             SyncopeClientExceptionType exceptionType = null;\r\n             try {\r\n-                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\r\n+                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exTypeAsString);\r\n             } catch (IllegalArgumentException e) {\r\n                 LOG.error(\"Unexpected value of \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \": \"\r\n-                        + exceptionTypeAsString, e);\r\n+                        + exTypeAsString, e);\r\n             }\r\n             if (exceptionType != null) {\r\n-                handledExceptions.add(exceptionTypeAsString);\r\n+                handledExceptions.add(exTypeAsString);\r\n \r\n-                SyncopeClientException clientException = new SyncopeClientException();\r\n+                final SyncopeClientException clientException = new SyncopeClientException();\r\n                 clientException.setType(exceptionType);\r\n                 if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n                         && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n                     // TODO update clientException to support list of objects\r\n-                    List<Object> elementsObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n-                    List<String> elementsStringList = new ArrayList<String>();\r\n-                    for (Object elementObject : elementsObjectList) {\r\n+                    final List<Object> elObjectList = response.getHeaders().get(exceptionType.getElementHeaderName());\r\n+                    final List<String> elStringList = new ArrayList<String>();\r\n+                    for (Object elementObject : elObjectList) {\r\n                         if (elementObject instanceof String) {\r\n-                            elementsStringList.add((String) elementObject);\r\n+                            elStringList.add((String) elementObject);\r\n                         }\r\n                     }\r\n-                    clientException.setElements(elementsStringList);\r\n+                    clientException.setElements(elStringList);\r\n                 }\r\n-                compositeException.addException(clientException);\r\n+                compException.addException(clientException);\r\n             }\r\n         }\r\n \r\n-        exceptionTypesInHeaders.removeAll(handledExceptions);\r\n-        if (!exceptionTypesInHeaders.isEmpty()) {\r\n-            LOG.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\r\n+        exTypesInHeaders.removeAll(handledExceptions);\r\n+        if (!exTypesInHeaders.isEmpty()) {\r\n+            LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\r\n         }\r\n \r\n-        if (compositeException.hasExceptions()) {\r\n-            return compositeException;\r\n+        if (compException.hasExceptions()) {\r\n+            return compException;\r\n         }\r\n \r\n         return null;\r"}]}