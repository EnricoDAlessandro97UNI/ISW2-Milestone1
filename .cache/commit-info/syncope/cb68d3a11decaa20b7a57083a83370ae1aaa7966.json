{"sha":"cb68d3a11decaa20b7a57083a83370ae1aaa7966","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNiNjhkM2ExMWRlY2FhMjBiN2E1NzA4M2E4MzM3MGFlMWFhYTc5NjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-04-11T07:46:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-04-11T07:46:35Z"},"message":"[SYNCOPE-55] Reworked provided patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1324610 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"492d2df5da29d80b3dcb4a6e8069399385e0421a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/492d2df5da29d80b3dcb4a6e8069399385e0421a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cb68d3a11decaa20b7a57083a83370ae1aaa7966","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb68d3a11decaa20b7a57083a83370ae1aaa7966","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cb68d3a11decaa20b7a57083a83370ae1aaa7966","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb68d3a11decaa20b7a57083a83370ae1aaa7966/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4ccc9cdf14a413bc481ecb7e50db6d75b6b15d41","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ccc9cdf14a413bc481ecb7e50db6d75b6b15d41","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4ccc9cdf14a413bc481ecb7e50db6d75b6b15d41"}],"stats":{"total":83,"additions":80,"deletions":3},"files":[{"sha":"f920f5c68b3da30093a0392b3bc3e40d80149d46","filename":"client/src/main/java/org/syncope/types/AuditElements.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb68d3a11decaa20b7a57083a83370ae1aaa7966/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb68d3a11decaa20b7a57083a83370ae1aaa7966/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java?ref=cb68d3a11decaa20b7a57083a83370ae1aaa7966","patch":"@@ -161,6 +161,7 @@ public enum RoleSubCategory {\n         list,\n         create,\n         read,\n+        selfRead,\n         update,\n         delete,\n         parent,\n@@ -230,7 +231,8 @@ public enum UserRequestSubCategory {\n         read,\n         update,\n         delete,\n-        isCreateAllowed,}\n+        isCreateAllowed,\n+    }\n \n     public enum WorkflowSubCategory {\n "},{"sha":"69ef5e0d74bc76db64651d990a01d7141b2e3a1f","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":41,"deletions":2,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb68d3a11decaa20b7a57083a83370ae1aaa7966/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb68d3a11decaa20b7a57083a83370ae1aaa7966/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=cb68d3a11decaa20b7a57083a83370ae1aaa7966","patch":"@@ -25,7 +25,9 @@\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -35,7 +37,9 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.rest.data.RoleDataBinder;\n import org.syncope.core.util.EntitlementUtil;\n import org.syncope.types.AuditElements.Category;\n@@ -52,6 +56,9 @@ public class RoleController extends AbstractController {\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n     @Autowired\n     private RoleDataBinder roleDataBinder;\n \n@@ -82,7 +89,7 @@ public void delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundExc\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n-            throw new NotFoundException(\"Role \" + String.valueOf(roleId));\n+            throw new NotFoundException(\"Role \" + roleId);\n         }\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -97,6 +104,7 @@ public void delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundExc\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n+    @Transactional(readOnly = true)\n     public List<RoleTO> list() {\n         List<SyncopeRole> roles = roleDAO.findAll();\n         List<RoleTO> roleTOs = new ArrayList<RoleTO>();\n@@ -112,6 +120,7 @@ public List<RoleTO> list() {\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/parent/{roleId}\")\n+    @Transactional(readOnly = true)\n     public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n@@ -139,6 +148,7 @@ public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/children/{roleId}\")\n+    @Transactional(readOnly = true)\n     public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n@@ -158,12 +168,13 @@ public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\n+    @Transactional(readOnly = true)\n     public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n             throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n-            throw new NotFoundException(String.valueOf(roleId));\n+            throw new NotFoundException(\"Role \" + roleId);\n         }\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -177,6 +188,34 @@ public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n         return roleDataBinder.getRoleTO(role);\n     }\n \n+    @PreAuthorize(\"isAuthenticated()\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/selfRead/{roleId}\")\n+    @Transactional(readOnly = true)\n+    public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n+\n+        SyncopeRole role = roleDAO.find(roleId);\n+        if (role == null) {\n+            throw new NotFoundException(\"Role \" + roleId);\n+        }\n+        SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n+        if (authUser == null) {\n+            throw new NotFoundException(\"Authenticated user \"\n+                    + SecurityContextHolder.getContext().getAuthentication().getName());\n+        }\n+\n+        Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n+        allowedRoleIds.addAll(authUser.getRoleIds());\n+        if (!allowedRoleIds.contains(role.getId())) {\n+            throw new UnauthorizedRoleException(role.getId());\n+        }\n+\n+        auditManager.audit(Category.role, RoleSubCategory.selfRead, Result.success,\n+                \"Successfully read own role: \" + role.getId());\n+\n+        return roleDataBinder.getRoleTO(role);\n+    }\n+\n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n     public RoleTO update(@RequestBody final RoleMod roleMod) throws NotFoundException, UnauthorizedRoleException {"},{"sha":"2866222b1957265e2f749fc8380c76947da0c83e","filename":"core/src/test/java/org/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb68d3a11decaa20b7a57083a83370ae1aaa7966/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb68d3a11decaa20b7a57083a83370ae1aaa7966/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=cb68d3a11decaa20b7a57083a83370ae1aaa7966","patch":"@@ -22,14 +22,19 @@\n \n import java.util.Arrays;\n import java.util.List;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.impl.client.DefaultHttpClient;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n+import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n public class RoleTestITCase extends AbstractTest {\n@@ -148,6 +153,37 @@ public void read() {\n         assertFalse(roleTO.getAttributes().isEmpty());\n     }\n \n+    @Test\n+    public void selfRead() {\n+        UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}\", UserTO.class, 1);\n+        assertNotNull(userTO);\n+\n+        assertTrue(userTO.getMembershipMap().containsKey(1L));\n+        assertFalse(userTO.getMembershipMap().containsKey(3L));\n+\n+        PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate.\n+                getRequestFactory());\n+        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n+                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n+\n+        SyncopeClientException exception = null;\n+        try {\n+            restTemplate.getForObject(BASE_URL + \"role/selfRead/{roleId}\", RoleTO.class, 3);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n+        }\n+        assertNotNull(exception);\n+\n+        RoleTO roleTO = restTemplate.getForObject(BASE_URL + \"role/selfRead/{roleId}\", RoleTO.class, 1);\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getAttributes());\n+        assertFalse(roleTO.getAttributes().isEmpty());\n+\n+        // restore admin authentication\n+        super.setupRestTemplate();\n+    }\n+\n     @Test\n     public void update() {\n         RoleTO roleTO = new RoleTO();"}]}