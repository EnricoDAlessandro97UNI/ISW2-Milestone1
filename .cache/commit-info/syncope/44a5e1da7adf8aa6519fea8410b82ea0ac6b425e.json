{"sha":"44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ0YTVlMWRhN2FkZjhhYTY1MTlmZWE4NDEwYjgyZWEwYWM2YjQyNWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-13T09:14:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-13T09:53:15Z"},"message":"[SYNCOPE-1299] Reworking REST service definition to allow more flexibility","tree":{"sha":"a5bcf43c48587d4860149093c15efe506076a9b7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a5bcf43c48587d4860149093c15efe506076a9b7"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"24f789932141ee05fa12d81eca9d43178953f508","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24f789932141ee05fa12d81eca9d43178953f508","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/24f789932141ee05fa12d81eca9d43178953f508"}],"stats":{"total":365,"additions":165,"deletions":200},"files":[{"sha":"2ebf6999ed940e1d17769d92c5ee91d200354e46","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ReconciliationRequest.java","status":"removed","additions":0,"deletions":100,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24f789932141ee05fa12d81eca9d43178953f508/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24f789932141ee05fa12d81eca9d43178953f508/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReconciliationRequest.java?ref=24f789932141ee05fa12d81eca9d43178953f508","patch":"@@ -1,100 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.to;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ReconciliationAction;\n-\n-public class ReconciliationRequest extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -2592156800185957182L;\n-\n-    private AnyTypeKind anyTypeKind;\n-\n-    private String anyKey;\n-\n-    private String resourceKey;\n-\n-    private ReconciliationAction action;\n-\n-    private boolean remediation;\n-\n-    private final List<String> actions = new ArrayList<>();\n-\n-    @JsonProperty(required = true)\n-    @XmlElement(required = true)\n-    public AnyTypeKind getAnyTypeKind() {\n-        return anyTypeKind;\n-    }\n-\n-    public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n-        this.anyTypeKind = anyTypeKind;\n-    }\n-\n-    @JsonProperty(required = true)\n-    @XmlElement(required = true)\n-    public String getAnyKey() {\n-        return anyKey;\n-    }\n-\n-    public void setAnyKey(final String anyKey) {\n-        this.anyKey = anyKey;\n-    }\n-\n-    @JsonProperty(required = true)\n-    @XmlElement(required = true)\n-    public String getResourceKey() {\n-        return resourceKey;\n-    }\n-\n-    public void setResourceKey(final String resourceKey) {\n-        this.resourceKey = resourceKey;\n-    }\n-\n-    @JsonProperty(required = true)\n-    @XmlElement(required = true)\n-    public ReconciliationAction getAction() {\n-        return action;\n-    }\n-\n-    public void setAction(final ReconciliationAction action) {\n-        this.action = action;\n-    }\n-\n-    public boolean isRemediation() {\n-        return remediation;\n-    }\n-\n-    public void setRemediation(final boolean remediation) {\n-        this.remediation = remediation;\n-    }\n-\n-    @XmlElementWrapper(name = \"actions\")\n-    @XmlElement(name = \"action\")\n-    @JsonProperty(\"actions\")\n-    public List<String> getActions() {\n-        return actions;\n-    }\n-}"},{"sha":"19b68c2ce855d50eb450e99c59aaf63f1f5a0910","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ReconciliationAction.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/24f789932141ee05fa12d81eca9d43178953f508/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReconciliationAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/24f789932141ee05fa12d81eca9d43178953f508/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReconciliationAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FReconciliationAction.java?ref=24f789932141ee05fa12d81eca9d43178953f508","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import javax.xml.bind.annotation.XmlEnum;\n-\n-@XmlEnum\n-public enum ReconciliationAction {\n-    PUSH,\n-    PULL\n-\n-}"},{"sha":"068f840ecae5245c680e91535b9b8d1a2ff962f4","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReconciliationService.java","status":"modified","additions":35,"deletions":5,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReconciliationService.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -32,7 +32,8 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.to.ReconciliationRequest;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconciliationStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n@@ -64,15 +65,44 @@ ReconciliationStatus status(\n             @NotNull @QueryParam(\"resourceKey\") String resourceKey);\n \n     /**\n-     * Perform the required reconciliation action (PUSH or PULL) to the given user, group or any object and\n-     * External Resource.\n+     * Pushes the given user, group or any object in Syncope onto the External Resource.\n      *\n-     * @param request reconciliation request\n+     * @param anyTypeKind anyTypeKind\n+     * @param anyKey user, group or any object: if value looks like a UUID then it is interpreted as key, otherwise as\n+     * a (user)name\n+     * @param resourceKey resource key\n+     * @param pushTask push specification\n      */\n     @ApiResponses(\n             @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @POST\n+    @Path(\"push\")\n     @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void reconcile(@NotNull ReconciliationRequest request);\n+    void push(\n+            @NotNull @QueryParam(\"anyTypeKind\") AnyTypeKind anyTypeKind,\n+            @NotNull @QueryParam(\"anyKey\") String anyKey,\n+            @NotNull @QueryParam(\"resourceKey\") String resourceKey,\n+            @NotNull PushTaskTO pushTask);\n+\n+    /**\n+     * Pulls the given user, group or any object from the External Resource into Syncope.\n+     *\n+     * @param anyTypeKind anyTypeKind\n+     * @param anyKey user, group or any object: if value looks like a UUID then it is interpreted as key, otherwise as\n+     * a (user)name\n+     * @param resourceKey resource key\n+     * @param pullTask pull specification\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @POST\n+    @Path(\"pull\")\n+    @Consumes({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, SyncopeConstants.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void pull(\n+            @NotNull @QueryParam(\"anyTypeKind\") AnyTypeKind anyTypeKind,\n+            @NotNull @QueryParam(\"anyKey\") String anyKey,\n+            @NotNull @QueryParam(\"resourceKey\") String resourceKey,\n+            @NotNull PullTaskTO pullTask);\n }"},{"sha":"a686215e572b252d5673ae0b67fbe79b17ab534b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":42,"deletions":31,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -29,14 +29,14 @@\n import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n-import org.apache.syncope.common.lib.to.ReconciliationRequest;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconciliationStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -75,9 +75,6 @@ public class ReconciliationLogic extends AbstractTransactionalLogic<AbstractBase\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n-    @Autowired\n-    private RealmDAO realmDAO;\n-\n     @Autowired\n     private MappingManager mappingManager;\n \n@@ -180,38 +177,52 @@ public ReconciliationStatus status(final AnyTypeKind anyTypeKind, final String a\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n-    public void reconcile(final ReconciliationRequest request) {\n-        Pair<Any<?>, Provision> init = init(request.getAnyTypeKind(), request.getAnyKey(), request.getResourceKey());\n+    public void push(\n+            final AnyTypeKind anyTypeKind,\n+            final String anyKey,\n+            final String resourceKey,\n+            final PushTaskTO pushTask) {\n+\n+        Pair<Any<?>, Provision> init = init(anyTypeKind, anyKey, resourceKey);\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n         try {\n-            List<ProvisioningReport> results = null;\n-            switch (request.getAction()) {\n-                case PUSH:\n-                    results = singlePushExecutor.push(\n-                            init.getRight(),\n-                            connFactory.getConnector(init.getRight().getResource()),\n-                            init.getLeft(),\n-                            request.getActions());\n-                    break;\n-\n-                case PULL:\n-                    results = singlePullExecutor.pull(\n-                            init.getRight(),\n-                            connFactory.getConnector(init.getRight().getResource()),\n-                            init.getRight().getMapping().getConnObjectKeyItem().get().getExtAttrName(),\n-                            mappingManager.getConnObjectKeyValue(init.getLeft(), init.getRight()).get(),\n-                            realmDAO.findByFullPath(init.getLeft().getRealm().getFullPath()),\n-                            request.isRemediation(),\n-                            request.getActions());\n-                    break;\n-\n-                default:\n+            List<ProvisioningReport> results = singlePushExecutor.push(\n+                    init.getRight(),\n+                    connFactory.getConnector(init.getRight().getResource()),\n+                    init.getLeft(),\n+                    pushTask);\n+            if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n+                sce.getElements().add(results.get(0).getMessage());\n             }\n+        } catch (JobExecutionException e) {\n+            sce.getElements().add(e.getMessage());\n+        }\n+\n+        if (!sce.isEmpty()) {\n+            throw sce;\n+        }\n+    }\n \n-            if (results != null && !results.isEmpty()\n-                    && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    public void pull(\n+            final AnyTypeKind anyTypeKind,\n+            final String anyKey,\n+            final String resourceKey,\n+            final PullTaskTO pullTask) {\n \n+        Pair<Any<?>, Provision> init = init(anyTypeKind, anyKey, resourceKey);\n+\n+        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Reconciliation);\n+        try {\n+            List<ProvisioningReport> results = singlePullExecutor.pull(\n+                    init.getRight(),\n+                    connFactory.getConnector(init.getRight().getResource()),\n+                    init.getRight().getMapping().getConnObjectKeyItem().get().getExtAttrName(),\n+                    mappingManager.getConnObjectKeyValue(init.getLeft(), init.getRight()).get(),\n+                    init.getLeft().getRealm(),\n+                    pullTask);\n+            if (!results.isEmpty() && results.get(0).getStatus() == ProvisioningReport.Status.FAILURE) {\n                 sce.getElements().add(results.get(0).getMessage());\n             }\n         } catch (JobExecutionException e) {"},{"sha":"000ee45fe35aa51f7476c36708b798d5bae1e71d","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePullExecutor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -32,6 +33,5 @@ List<ProvisioningReport> pull(\n             String connObjectKey,\n             String connObjectValue,\n             Realm realm,\n-            boolean remediation,\n-            List<String> actions) throws JobExecutionException;\n+            PullTaskTO pullTaskTO) throws JobExecutionException;\n }"},{"sha":"a8256cd2439c605aecc86d266021ae283b917c93","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePushExecutor.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.api.pushpull;\n \n import java.util.List;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -30,5 +31,5 @@ List<ProvisioningReport> push(\n             Provision provision,\n             Connector connector,\n             Any<?> any,\n-            List<String> actions) throws JobExecutionException;\n+            PushTaskTO pushTaskTO) throws JobExecutionException;\n }"},{"sha":"53c4258393a0da276e494227d0b240563a73a38c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractSyncopeResultHandler.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractSyncopeResultHandler.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -69,6 +69,7 @@\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n+    @Autowired\n     protected AnyObjectWorkflowAdapter awfAdapter;\n \n     /**"},{"sha":"bb410f9ff5baf9d71e20ba0cd3a141851eb83d0f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":36,"deletions":8,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -24,16 +24,20 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.collections.IteratorChain;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PullMode;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPullResultHandler;\n@@ -45,6 +49,7 @@\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopeSinglePullExecutor;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n+import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n@@ -59,20 +64,22 @@ public class SinglePullJobDelegate extends PullJobDelegate implements SyncopeSin\n     @Autowired\n     private ImplementationDAO implementationDAO;\n \n+    @Autowired\n+    private TemplateUtils templateUtils;\n+\n     @Override\n     public List<ProvisioningReport> pull(\n             final Provision provision,\n             final Connector connector,\n             final String connObjectKey,\n             final String connObjectValue,\n             final Realm realm,\n-            final boolean remediation,\n-            final List<String> actionKeys) throws JobExecutionException {\n+            final PullTaskTO pullTaskTO) throws JobExecutionException {\n \n         LOG.debug(\"Executing pull on {}\", provision.getResource());\n \n         List<PullActions> actions = new ArrayList<>();\n-        actionKeys.forEach(key -> {\n+        pullTaskTO.getActions().forEach(key -> {\n             Implementation impl = implementationDAO.find(key);\n             if (impl == null || impl.getType() != ImplementationType.PULL_ACTIONS) {\n                 LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n@@ -95,13 +102,34 @@ public List<ProvisioningReport> pull(\n \n             PullTask pullTask = entityFactory.newEntity(PullTask.class);\n             pullTask.setResource(provision.getResource());\n-            pullTask.setMatchingRule(MatchingRule.UPDATE);\n-            pullTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n+            pullTask.setMatchingRule(pullTaskTO.getMatchingRule() == null\n+                    ? MatchingRule.UPDATE : pullTaskTO.getMatchingRule());\n+            pullTask.setUnmatchingRule(pullTaskTO.getUnmatchingRule() == null\n+                    ? UnmatchingRule.PROVISION : pullTaskTO.getUnmatchingRule());\n             pullTask.setPullMode(PullMode.FILTERED_RECONCILIATION);\n-            pullTask.setPerformCreate(true);\n-            pullTask.setPerformUpdate(true);\n-            pullTask.setRemediation(remediation);\n+            pullTask.setPerformCreate(pullTaskTO.isPerformCreate());\n+            pullTask.setPerformUpdate(pullTaskTO.isPerformUpdate());\n+            pullTask.setPerformDelete(pullTaskTO.isPerformDelete());\n             pullTask.setDestinationRealm(realm);\n+            pullTask.setRemediation(pullTaskTO.isRemediation());\n+            // validate JEXL expressions from templates and proceed if fine\n+            templateUtils.check(pullTaskTO.getTemplates(), ClientExceptionType.InvalidPullTask);\n+            pullTaskTO.getTemplates().forEach((type, template) -> {\n+                AnyType anyType = anyTypeDAO.find(type);\n+                if (anyType == null) {\n+                    LOG.debug(\"Invalid AnyType {} specified, ignoring...\", type);\n+                } else {\n+                    AnyTemplatePullTask anyTemplate = pullTask.getTemplate(anyType).orElse(null);\n+                    if (anyTemplate == null) {\n+                        anyTemplate = entityFactory.newEntity(AnyTemplatePullTask.class);\n+                        anyTemplate.setAnyType(anyType);\n+                        anyTemplate.setPullTask(pullTask);\n+\n+                        pullTask.add(anyTemplate);\n+                    }\n+                    anyTemplate.set(template);\n+                }\n+            });\n \n             profile = new ProvisioningProfile<>(connector, pullTask);\n             profile.setDryRun(false);"},{"sha":"90b8f08855276213eaa3b31e4711fce8cb8be412","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -51,12 +52,12 @@ public List<ProvisioningReport> push(\n             final Provision provision,\n             final Connector connector,\n             final Any<?> any,\n-            final List<String> actionKeys) throws JobExecutionException {\n+            final PushTaskTO pushTaskTO) throws JobExecutionException {\n \n         LOG.debug(\"Executing push on {}\", provision.getResource());\n \n         List<PushActions> actions = new ArrayList<>();\n-        actionKeys.forEach(key -> {\n+        pushTaskTO.getActions().forEach(key -> {\n             Implementation impl = implementationDAO.find(key);\n             if (impl == null || impl.getType() != ImplementationType.PUSH_ACTIONS) {\n                 LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", key);\n@@ -72,10 +73,13 @@ public List<ProvisioningReport> push(\n         try {\n             PushTask pushTask = entityFactory.newEntity(PushTask.class);\n             pushTask.setResource(provision.getResource());\n-            pushTask.setMatchingRule(MatchingRule.UPDATE);\n-            pushTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n-            pushTask.setPerformCreate(true);\n-            pushTask.setPerformUpdate(true);\n+            pushTask.setMatchingRule(pushTaskTO.getMatchingRule() == null\n+                    ? MatchingRule.LINK : pushTaskTO.getMatchingRule());\n+            pushTask.setUnmatchingRule(pushTaskTO.getUnmatchingRule() == null\n+                    ? UnmatchingRule.ASSIGN : pushTaskTO.getUnmatchingRule());\n+            pushTask.setPerformCreate(pushTaskTO.isPerformCreate());\n+            pushTask.setPerformUpdate(pushTaskTO.isPerformUpdate());\n+            pushTask.setPerformDelete(pushTaskTO.isPerformDelete());\n \n             profile = new ProvisioningProfile<>(connector, pushTask);\n             profile.getActions().addAll(actions);"},{"sha":"ad460cb959a24a914755927a080b00cf3b128515","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReconciliationServiceImpl.java","status":"modified","additions":27,"deletions":5,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -18,7 +18,8 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import org.apache.syncope.common.lib.to.ReconciliationRequest;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconciliationStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.rest.api.service.ReconciliationService;\n@@ -45,9 +46,30 @@ public ReconciliationStatus status(final AnyTypeKind anyTypeKind, final String a\n     }\n \n     @Override\n-    public void reconcile(final ReconciliationRequest request) {\n-        request.setAnyKey(\n-                getActualKey(anyUtilsFactory.getInstance(request.getAnyTypeKind()).dao(), request.getAnyKey()));\n-        logic.reconcile(request);\n+    public void push(\n+            final AnyTypeKind anyTypeKind,\n+            final String anyKey,\n+            final String resourceKey,\n+            final PushTaskTO pushTask) {\n+\n+        logic.push(\n+                anyTypeKind,\n+                getActualKey(anyUtilsFactory.getInstance(anyTypeKind).dao(), anyKey),\n+                resourceKey,\n+                pushTask);\n+    }\n+\n+    @Override\n+    public void pull(\n+            final AnyTypeKind anyTypeKind,\n+            final String anyKey,\n+            final String resourceKey,\n+            final PullTaskTO pullTask) {\n+\n+        logic.pull(\n+                anyTypeKind,\n+                getActualKey(anyUtilsFactory.getInstance(anyTypeKind).dao(), anyKey),\n+                resourceKey,\n+                pullTask);\n     }\n }"},{"sha":"703799f004fce0847f243b9248c09ad4fa2e16f3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReconciliationITCase.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a5e1da7adf8aa6519fea8410b82ea0ac6b425e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReconciliationITCase.java?ref=44a5e1da7adf8aa6519fea8410b82ea0ac6b425e","patch":"@@ -28,10 +28,11 @@\n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ReconciliationRequest;\n+import org.apache.syncope.common.lib.to.PullTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ReconciliationStatus;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ReconciliationAction;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.jupiter.api.Test;\n@@ -66,12 +67,10 @@ public void push() {\n         assertNull(status.getOnResource());\n \n         // 4. push\n-        ReconciliationRequest request = new ReconciliationRequest();\n-        request.setAction(ReconciliationAction.PUSH);\n-        request.setAnyKey(printer.getKey());\n-        request.setAnyTypeKind(AnyTypeKind.ANY_OBJECT);\n-        request.setResourceKey(\"resource-db-scripted\");\n-        reconciliationService.reconcile(request);\n+        PushTaskTO pushTask = new PushTaskTO();\n+        pushTask.setPerformCreate(true);\n+        pushTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n+        reconciliationService.push(AnyTypeKind.ANY_OBJECT, printer.getKey(), \"resource-db-scripted\", pushTask);\n \n         // 5. verify that printer is now propagated\n         assertEquals(1, jdbcTemplate.queryForList(\n@@ -119,12 +118,9 @@ public void pull() {\n         assertNotEquals(status.getOnSyncope().getAttr(\"LOCATION\"), status.getOnResource().getAttr(\"LOCATION\"));\n \n         // 4. pull\n-        ReconciliationRequest request = new ReconciliationRequest();\n-        request.setAction(ReconciliationAction.PULL);\n-        request.setAnyKey(printer.getKey());\n-        request.setAnyTypeKind(AnyTypeKind.ANY_OBJECT);\n-        request.setResourceKey(\"resource-db-scripted\");\n-        reconciliationService.reconcile(request);\n+        PullTaskTO pullTask = new PullTaskTO();\n+        pullTask.setPerformUpdate(true);\n+        reconciliationService.pull(AnyTypeKind.ANY_OBJECT, printer.getName(), \"resource-db-scripted\", pullTask);\n \n         // 5. verify reconciliation result (and resource is still not assigned)\n         printer = anyObjectService.read(printer.getKey());"}]}