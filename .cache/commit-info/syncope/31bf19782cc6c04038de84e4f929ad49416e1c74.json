{"sha":"31bf19782cc6c04038de84e4f929ad49416e1c74","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMxYmYxOTc4MmNjNmMwNDAzOGRlODRlNGY5MjlhZDQ5NDE2ZTFjNzQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-12-08T06:32:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-12-08T06:35:12Z"},"message":"Align UserRequestService#submitForm with UserService#update","tree":{"sha":"7689500a110e536ddf065aed049f618b070836ba","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7689500a110e536ddf065aed049f618b070836ba"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/31bf19782cc6c04038de84e4f929ad49416e1c74","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31bf19782cc6c04038de84e4f929ad49416e1c74","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/31bf19782cc6c04038de84e4f929ad49416e1c74","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/31bf19782cc6c04038de84e4f929ad49416e1c74/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0032b47dfce40f11d1268abd807912a7a12f137e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0032b47dfce40f11d1268abd807912a7a12f137e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0032b47dfce40f11d1268abd807912a7a12f137e"}],"stats":{"total":86,"additions":68,"deletions":18},"files":[{"sha":"5afbe027df60a6382229f9403779af952d0040e7","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31bf19782cc6c04038de84e4f929ad49416e1c74/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31bf19782cc6c04038de84e4f929ad49416e1c74/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=31bf19782cc6c04038de84e4f929ad49416e1c74","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n@@ -42,6 +43,7 @@\n import org.apache.syncope.core.flowable.api.UserRequestHandler;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.flowable.engine.runtime.ProcessInstance;\n@@ -199,7 +201,7 @@ public Pair<Integer, List<UserRequestForm>> listForms(\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public UserTO submitForm(final UserRequestForm form) {\n+    public ProvisioningResult<UserTO> submitForm(final UserRequestForm form, final boolean nullPriorityAsync) {\n         if (form.getUsername() == null) {\n             securityChecks(null,\n                     FlowableEntitlement.USER_REQUEST_FORM_SUBMIT,\n@@ -210,7 +212,10 @@ public UserTO submitForm(final UserRequestForm form) {\n                     \"Submitting forms for user\" + form.getUsername() + \" not allowed\");\n         }\n \n+        ProvisioningResult<UserTO> result = new ProvisioningResult<>();\n+\n         UserWorkflowResult<UserUR> wfResult = userRequestHandler.submitForm(form);\n+\n         // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)\n         if (wfResult.getPropByRes() != null && !wfResult.getPropByRes().isEmpty()) {\n@@ -221,7 +226,9 @@ public UserTO submitForm(final UserRequestForm form) {\n                             wfResult.getPropByLinkedAccount(),\n                             wfResult.getPerformedTasks()));\n \n-            taskExecutor.execute(taskInfos, false, AuthContextUtils.getUsername());\n+            PropagationReporter propagationReporter = taskExecutor.execute(\n+                    taskInfos, nullPriorityAsync, AuthContextUtils.getUsername());\n+            result.getPropagationStatuses().addAll(propagationReporter.getStatuses());\n         }\n \n         UserTO userTO;\n@@ -231,7 +238,9 @@ public UserTO submitForm(final UserRequestForm form) {\n         } else {\n             userTO = binder.getUserTO(wfResult.getResult().getKey());\n         }\n-        return userTO;\n+        result.setEntity(binder.returnUserTO(userTO));\n+\n+        return result;\n     }\n \n     @Override"},{"sha":"348647cdc926f9b8dd6d8bb113cba4d39929e785","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java","status":"modified","additions":31,"deletions":3,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31bf19782cc6c04038de84e4f929ad49416e1c74/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31bf19782cc6c04038de84e4f929ad49416e1c74/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java?ref=31bf19782cc6c04038de84e4f929ad49416e1c74","patch":"@@ -18,6 +18,11 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n@@ -34,9 +39,10 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserRequest;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -144,11 +150,33 @@ UserRequestForm getForm(\n      * Submits a user request form.\n      *\n      * @param form user request form.\n-     * @return updated user\n+     * @return Response object featuring the updated user enriched with propagation status information\n      */\n+    @Parameter(\n+            name = RESTHeaders.PREFER, in = ParameterIn.HEADER,\n+            description = \"Allows client to specify a preference for the result to be returned from the server\",\n+            allowEmptyValue = true, schema =\n+            @Schema(defaultValue = \"return-content\", allowableValues = { \"return-content\", \"return-no-content\" }))\n+    @Parameter(name = RESTHeaders.NULL_PRIORITY_ASYNC, in = ParameterIn.HEADER,\n+            description = \"If 'true', instructs the propagation process not to wait for completion when communicating\"\n+            + \" with External Resources with no priority set\",\n+            allowEmptyValue = true, schema =\n+            @Schema(type = \"boolean\", defaultValue = \"false\"))\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"200\",\n+                description = \"User successfully updated enriched with propagation status information, as Entity\",\n+                content =\n+                @Content(schema =\n+                        @Schema(implementation = ProvisioningResult.class))),\n+        @ApiResponse(responseCode = \"204\",\n+                description = \"No content if 'Prefer: return-no-content' was specified\", headers =\n+                @Header(name = RESTHeaders.PREFERENCE_APPLIED, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Allows the server to inform the \"\n+                        + \"client about the fact that a specified preference was applied\")) })\n     @POST\n     @Path(\"forms\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    UserTO submitForm(@NotNull UserRequestForm form);\n+    Response submitForm(@NotNull UserRequestForm form);\n }"},{"sha":"6c422deb0913811953800f614bb349e7ddbd2674","filename":"ext/flowable/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserRequestServiceImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31bf19782cc6c04038de84e4f929ad49416e1c74/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31bf19782cc6c04038de84e4f929ad49416e1c74/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserRequestServiceImpl.java?ref=31bf19782cc6c04038de84e4f929ad49416e1c74","patch":"@@ -20,8 +20,10 @@\n \n import java.util.List;\n import java.util.Optional;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n@@ -94,7 +96,8 @@ public PagedResult<UserRequestForm> listForms(final UserRequestQuery query) {\n     }\n \n     @Override\n-    public UserTO submitForm(final UserRequestForm form) {\n-        return logic.submitForm(form);\n+    public Response submitForm(final UserRequestForm form) {\n+        ProvisioningResult<UserTO> submitted = logic.submitForm(form, isNullPriorityAsync());\n+        return modificationResponse(submitted);\n     }\n }"},{"sha":"0e38d87cdf4a2667c1d0fd7f12cd835d6afee9e7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31bf19782cc6c04038de84e4f929ad49416e1c74/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31bf19782cc6c04038de84e4f929ad49416e1c74/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=31bf19782cc6c04038de84e4f929ad49416e1c74","patch":"@@ -25,6 +25,7 @@\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.security.AccessControlException;\n import java.util.Map;\n import java.util.Set;\n@@ -494,7 +495,8 @@ public void issueSYNCOPE434() {\n                 new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n-        userTO = userRequestService.submitForm(form);\n+        userTO = userRequestService.submitForm(form).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n "},{"sha":"3c1f48fe7f35f0b5ee798634c12a63bc849f9eb3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserRequestITCase.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31bf19782cc6c04038de84e4f929ad49416e1c74/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31bf19782cc6c04038de84e4f929ad49416e1c74/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserRequestITCase.java?ref=31bf19782cc6c04038de84e4f929ad49416e1c74","patch":"@@ -28,13 +28,15 @@\n \n import java.io.IOException;\n import java.util.List;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.MediaType;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.to.UserRequest;\n@@ -119,7 +121,8 @@ public void twoLevelsApproval() {\n                 new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"secondLevelApprove\").get().setValue(Boolean.FALSE.toString());\n-        user = userRequestService.submitForm(form);\n+        user = userRequestService.submitForm(form).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n \n         // no more forms, group not assigned\n         assertTrue(userRequestService.listForms(\n@@ -142,7 +145,8 @@ public void twoLevelsApproval() {\n                 new UserRequestQuery.Builder().user(user.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"secondLevelApprove\").get().setValue(Boolean.TRUE.toString());\n-        user = userRequestService.submitForm(form);\n+        user = userRequestService.submitForm(form).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n \n         // check that the director group was effectively assigned\n         assertTrue(user.getMembership(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").isPresent());"},{"sha":"3750b468a0ef8dbfa13627e5a081c9be774391a6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserSelfITCase.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/31bf19782cc6c04038de84e4f929ad49416e1c74/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/31bf19782cc6c04038de84e4f929ad49416e1c74/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserSelfITCase.java?ref=31bf19782cc6c04038de84e4f929ad49416e1c74","patch":"@@ -129,7 +129,8 @@ public void createAndApprove() {\n                 new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n-        userTO = userRequestService.submitForm(form);\n+        userTO = userRequestService.submitForm(form).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey()));\n@@ -179,7 +180,8 @@ public void createAndUnclaim() {\n                 new UserRequestQuery.Builder().user(userTO.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n-        userTO = userRequestService.submitForm(form);\n+        userTO = userRequestService.submitForm(form).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userTO.getKey()));\n@@ -277,7 +279,8 @@ public void updateWithApproval() {\n                 new UserRequestQuery.Builder().user(updated.getKey()).build()).getResult().get(0);\n         form = userRequestService.claimForm(form.getTaskId());\n         form.getProperty(\"approveUpdate\").get().setValue(Boolean.TRUE.toString());\n-        updated = userRequestService.submitForm(form);\n+        updated = userRequestService.submitForm(form).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n         assertNotNull(updated);\n         assertEquals(\"active\", updated.getStatus());\n         assertTrue(updated.getUsername().endsWith(\"XX\"));\n@@ -515,7 +518,8 @@ public void createWithReject() {\n         // 5. reject user\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.FALSE.toString());\n         form.getProperty(\"rejectReason\").get().setValue(\"I don't like him.\");\n-        userTO = userService3.submitForm(form);\n+        userTO = userService3.submitForm(form).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(\"rejected\", userTO.getStatus());\n \n@@ -599,7 +603,8 @@ public void createWithApproval() {\n \n         // 5. approve user (and verify that propagation occurred)\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n-        userTO = userRequestService.submitForm(form);\n+        userTO = userRequestService.submitForm(form).readEntity(new GenericType<ProvisioningResult<UserTO>>() {\n+        }).getEntity();\n         assertNotNull(userTO);\n         assertEquals(updatedUsername, userTO.getUsername());\n         assertEquals(\"active\", userTO.getStatus());\n@@ -745,8 +750,7 @@ public void issueSYNCOPE15() {\n         form.getProperty(\"approveCreate\").get().setValue(Boolean.TRUE.toString());\n \n         // 6. submit approve\n-        userTO = userRequestService.submitForm(form);\n-        assertNotNull(userTO);\n+        userRequestService.submitForm(form);\n         assertEquals(preForms,\n                 userRequestService.listForms(new UserRequestQuery.Builder().build()).getTotalCount());\n         assertTrue(userRequestService.listForms("}]}