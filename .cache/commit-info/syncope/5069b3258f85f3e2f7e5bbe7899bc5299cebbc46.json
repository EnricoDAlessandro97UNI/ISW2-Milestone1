{"sha":"5069b3258f85f3e2f7e5bbe7899bc5299cebbc46","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUwNjliMzI1OGY4NWYzZTJmN2U1YmJlNzg5OWJjNTI5OWNlYmJjNDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-27T13:14:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-27T13:15:06Z"},"message":"[SYNCOPE-1050] CaptchaResource was not included","tree":{"sha":"114e99b278a2f528a6863e16edbc2e3744eb25cb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/114e99b278a2f528a6863e16edbc2e3744eb25cb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5069b3258f85f3e2f7e5bbe7899bc5299cebbc46","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5069b3258f85f3e2f7e5bbe7899bc5299cebbc46","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5069b3258f85f3e2f7e5bbe7899bc5299cebbc46","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5069b3258f85f3e2f7e5bbe7899bc5299cebbc46/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3039d68c286ae4fb2f3e9e9aa2c000188a7c3768","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3039d68c286ae4fb2f3e9e9aa2c000188a7c3768","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3039d68c286ae4fb2f3e9e9aa2c000188a7c3768"}],"stats":{"total":18,"additions":9,"deletions":9},"files":[{"sha":"7bec115d913ef4f5f02f7b4052e7c1ee3533200b","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5069b3258f85f3e2f7e5bbe7899bc5299cebbc46/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5069b3258f85f3e2f7e5bbe7899bc5299cebbc46/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=5069b3258f85f3e2f7e5bbe7899bc5299cebbc46","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.enduser.init.EnduserInitializer;\n-import org.apache.syncope.client.enduser.resources.BaseResource;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.wicket.Page;\n@@ -37,6 +36,7 @@\n import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.request.Request;\n import org.apache.wicket.request.Response;\n+import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.request.resource.ResourceReference;\n import org.apache.wicket.util.lang.Args;\n@@ -134,13 +134,13 @@ protected void init() {\n         ClassPathScanImplementationLookup classPathScanImplementationLookup =\n                 (ClassPathScanImplementationLookup) getServletContext().\n                         getAttribute(EnduserInitializer.CLASSPATH_LOOKUP);\n-        for (final Class<? extends BaseResource> resource : classPathScanImplementationLookup.getResources()) {\n+        for (final Class<? extends AbstractResource> resource : classPathScanImplementationLookup.getResources()) {\n             Resource annotation = resource.getAnnotation(Resource.class);\n             if (annotation == null) {\n                 LOG.debug(\"No @Resource annotation found on {}, ignoring\", resource.getName());\n             } else {\n                 try {\n-                    final BaseResource instance = resource.newInstance();\n+                    final AbstractResource instance = resource.newInstance();\n \n                     mountResource(annotation.path(), new ResourceReference(annotation.key()) {\n "},{"sha":"a482122ca07b3dcb745001908e48aa27dab13025","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/init/ClassPathScanImplementationLookup.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5069b3258f85f3e2f7e5bbe7899bc5299cebbc46/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5069b3258f85f3e2f7e5bbe7899bc5299cebbc46/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Finit%2FClassPathScanImplementationLookup.java?ref=5069b3258f85f3e2f7e5bbe7899bc5299cebbc46","patch":"@@ -23,7 +23,7 @@\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.client.enduser.annotations.Resource;\n-import org.apache.syncope.client.enduser.resources.BaseResource;\n+import org.apache.wicket.request.resource.AbstractResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.config.BeanDefinition;\n@@ -37,7 +37,7 @@ public class ClassPathScanImplementationLookup {\n \n     private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.client.enduser\";\n \n-    private List<Class<? extends BaseResource>> resources;\n+    private List<Class<? extends AbstractResource>> resources;\n \n     /**\n      * This method can be overridden by subclasses to customize classpath scan.\n@@ -53,17 +53,17 @@ public void load() {\n         resources = new ArrayList<>();\n \n         ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n-        scanner.addIncludeFilter(new AssignableTypeFilter(BaseResource.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(AbstractResource.class));\n \n         for (BeanDefinition bd : scanner.findCandidateComponents(getBasePackage())) {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName(bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n                 boolean isAbsractClazz = Modifier.isAbstract(clazz.getModifiers());\n \n                 if (!isAbsractClazz) {\n-                    if (BaseResource.class.isAssignableFrom(clazz)) {\n+                    if (AbstractResource.class.isAssignableFrom(clazz)) {\n                         if (clazz.isAnnotationPresent(Resource.class)) {\n-                            resources.add((Class<? extends BaseResource>) clazz);\n+                            resources.add((Class<? extends AbstractResource>) clazz);\n                         } else {\n                             LOG.error(\"Could not find annotation {} in {}, ignoring\",\n                                     Resource.class.getName(), clazz.getName());\n@@ -77,7 +77,7 @@ public void load() {\n         resources = Collections.unmodifiableList(resources);\n     }\n \n-    public List<Class<? extends BaseResource>> getResources() {\n+    public List<Class<? extends AbstractResource>> getResources() {\n         return resources;\n     }\n "}]}