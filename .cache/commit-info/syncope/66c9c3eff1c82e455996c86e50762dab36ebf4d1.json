{"sha":"66c9c3eff1c82e455996c86e50762dab36ebf4d1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY2YzljM2VmZjFjODJlNDU1OTk2Yzg2ZTUwNzYyZGFiMzZlYmY0ZDE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-18T11:58:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-18T11:58:53Z"},"message":"[SYNCOPE-679] Implementation provided","tree":{"sha":"d98995b5c3657db6ceb8d27d5dbed5403b322182","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d98995b5c3657db6ceb8d27d5dbed5403b322182"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/66c9c3eff1c82e455996c86e50762dab36ebf4d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66c9c3eff1c82e455996c86e50762dab36ebf4d1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/66c9c3eff1c82e455996c86e50762dab36ebf4d1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66c9c3eff1c82e455996c86e50762dab36ebf4d1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"83509d7eb8322ba8066f9278c25ba38a829cb439","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/83509d7eb8322ba8066f9278c25ba38a829cb439","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/83509d7eb8322ba8066f9278c25ba38a829cb439"}],"stats":{"total":591,"additions":386,"deletions":205},"files":[{"sha":"223d5332b3956609e7d371631717c3008f84c0fd","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportResultManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportResultManager.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -40,8 +40,8 @@ private void printReport(final ReportTO reportTO) {\n         System.out.println(\"    name: \" + reportTO.getName());\n         System.out.println(\"    cron expression: \" + reportTO.getCronExpression());\n         System.out.println(\"    latest execution status: \" + reportTO.getLatestExecStatus());\n-        System.out.println(\"    start date: \" + reportTO.getStartDate());\n-        System.out.println(\"    end date: \" + reportTO.getEndDate());\n+        System.out.println(\"    start date: \" + reportTO.getStart());\n+        System.out.println(\"    end date: \" + reportTO.getEnd());\n         System.out.println(\"    CONF:\");\n         for (final AbstractReportletConf reportletConf : reportTO.getReportletConfs()) {\n             printReportletConf(reportletConf);\n@@ -68,8 +68,8 @@ public void printReportExecution(final List<ReportExecTO> reportExecTOs) {\n             System.out.println(\"       REPORT EXEC ID: \" + reportExecTO.getKey());\n             System.out.println(\"       status: \" + reportExecTO.getStatus());\n             System.out.println(\"       message: \" + reportExecTO.getMessage());\n-            System.out.println(\"       start date: \" + reportExecTO.getStartDate());\n-            System.out.println(\"       end date: \" + reportExecTO.getEndDate());\n+            System.out.println(\"       start date: \" + reportExecTO.getStart());\n+            System.out.println(\"       end date: \" + reportExecTO.getEnd());\n             System.out.println(\"       report id: \" + reportExecTO.getReport());\n         }\n     }"},{"sha":"a92465159e4430ba3035e86fedf6911b51e2c5d9","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportSyncopeOperations.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.xml.sax.SAXException;\n \n@@ -73,7 +74,7 @@ public String exportExecutionResult(final String executionKey, final String repo\n     }\n \n     public void execute(final String reportKey) {\n-        reportService.execute(Long.valueOf(reportKey));\n+        reportService.execute(new ExecuteQuery.Builder().key(Long.valueOf(reportKey)).build());\n     }\n \n     public void deleteExecution(final String executionId) {"},{"sha":"6de6ea922ed50f1474fc5312b4f2c8d4734fd3d3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -93,8 +93,8 @@ private void printNotificationTask(final NotificationTaskTO notificationTaskTO)\n         System.out.println(\"     html body: \" + notificationTaskTO.getHtmlBody());\n         System.out.println(\"     latest execution status: \"\n                 + notificationTaskTO.getLatestExecStatus());\n-        System.out.println(\"     start date: \" + notificationTaskTO.getStartDate());\n-        System.out.println(\"     end date: \" + notificationTaskTO.getEndDate());\n+        System.out.println(\"     start date: \" + notificationTaskTO.getStart());\n+        System.out.println(\"     end date: \" + notificationTaskTO.getEnd());\n         System.out.println(\"     recipients: \" + notificationTaskTO.getRecipients());\n         System.out.println(\"     trace level: \" + notificationTaskTO.getTraceLevel());\n         printTaskExecTO(notificationTaskTO.getExecutions());\n@@ -114,8 +114,8 @@ private void printPropagationTask(final PropagationTaskTO propagationTaskTO) {\n                 + propagationTaskTO.getLatestExecStatus());\n         System.out.println(\"     class name: \" + propagationTaskTO.getObjectClassName());\n         System.out.println(\"     attributes: \" + propagationTaskTO.getAttributes());\n-        System.out.println(\"     start date: \" + propagationTaskTO.getStartDate());\n-        System.out.println(\"     end date: \" + propagationTaskTO.getEndDate());\n+        System.out.println(\"     start date: \" + propagationTaskTO.getStart());\n+        System.out.println(\"     end date: \" + propagationTaskTO.getEnd());\n         System.out.println(\"     operation: \" + propagationTaskTO.getOperation());\n         printTaskExecTO(propagationTaskTO.getExecutions());\n         System.out.println(\"\");\n@@ -131,8 +131,8 @@ private void printPushTask(final PushTaskTO pushTaskTO) {\n         System.out.println(\"     is perform delete: \" + pushTaskTO.isPerformDelete());\n         System.out.println(\"     is perform update: \" + pushTaskTO.isPerformUpdate());\n         System.out.println(\"     is sync status: \" + pushTaskTO.isSyncStatus());\n-        System.out.println(\"     start date: \" + pushTaskTO.getStartDate());\n-        System.out.println(\"     end date: \" + pushTaskTO.getEndDate());\n+        System.out.println(\"     start date: \" + pushTaskTO.getStart());\n+        System.out.println(\"     end date: \" + pushTaskTO.getEnd());\n         System.out.println(\"     last execution: \" + pushTaskTO.getLastExec());\n         System.out.println(\"     next execution: \" + pushTaskTO.getNextExec());\n         System.out.println(\"     latest execution status: \"\n@@ -151,8 +151,8 @@ private void printScheduledTask(final SchedTaskTO schedTaskTO) {\n         System.out.println(\"     name: \" + schedTaskTO.getName());\n         System.out.println(\"     cron expression: \" + schedTaskTO.getCronExpression());\n         System.out.println(\"     description: \" + schedTaskTO.getDescription());\n-        System.out.println(\"     start date: \" + schedTaskTO.getStartDate());\n-        System.out.println(\"     end date: \" + schedTaskTO.getEndDate());\n+        System.out.println(\"     start date: \" + schedTaskTO.getStart());\n+        System.out.println(\"     end date: \" + schedTaskTO.getEnd());\n         System.out.println(\"     last execution: \" + schedTaskTO.getLastExec());\n         System.out.println(\"     next execution: \" + schedTaskTO.getNextExec());\n         System.out.println(\"     latest execution status: \"\n@@ -177,8 +177,8 @@ private void printSyncTask(final SyncTaskTO syncTaskTO) {\n         System.out.println(\"     sync status: \" + syncTaskTO.isSyncStatus());\n         System.out.println(\"     TEMPLATES:\");\n         printTemplates(syncTaskTO.getTemplates());\n-        System.out.println(\"     start date: \" + syncTaskTO.getStartDate());\n-        System.out.println(\"     end date: \" + syncTaskTO.getEndDate());\n+        System.out.println(\"     start date: \" + syncTaskTO.getStart());\n+        System.out.println(\"     end date: \" + syncTaskTO.getEnd());\n         System.out.println(\"     next execution: \" + syncTaskTO.getNextExec());\n         System.out.println(\"     last execution: \" + syncTaskTO.getLastExec());\n         System.out.println(\"     latest execution status: \"\n@@ -213,8 +213,8 @@ public void printTaskExecTO(final List<TaskExecTO> taskExecTOs) {\n             System.out.println(\"       message: \" + taskExecTO.getMessage());\n             System.out.println(\"       ###############     <END   MESSAGE>     ###############\");\n             System.out.println(\"       status: \" + taskExecTO.getStatus());\n-            System.out.println(\"       start date: \" + taskExecTO.getStartDate());\n-            System.out.println(\"       end date: \" + taskExecTO.getEndDate());\n+            System.out.println(\"       start date: \" + taskExecTO.getStart());\n+            System.out.println(\"       end date: \" + taskExecTO.getEnd());\n             System.out.println(\"\");\n         }\n     }"},{"sha":"61ba77110cf9c94ced6270359a24cb24b5b2874f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n \n@@ -60,6 +61,6 @@ public void deleteExecution(final String executionKey) {\n     }\n \n     public TaskExecTO execute(final String executionKey, final boolean dryRun) {\n-        return taskService.execute(Long.valueOf(executionKey), dryRun);\n+        return taskService.execute(new ExecuteQuery.Builder().key(Long.valueOf(executionKey)).dryRun(dryRun).build());\n     }\n }"},{"sha":"bee1201b4514049b0cb5cdbb4f04144b663e366b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -48,9 +48,6 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     private static final long serialVersionUID = 5922413053568696414L;\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSearchPanel.class);\n \n     protected AnyTypeRestClient anyTypeRestClient = new AnyTypeRestClient();"},{"sha":"4717779c7b37f339b7a42526b1b8edb228aeec00","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels.search;\n \n-import static org.apache.syncope.client.console.panels.search.AbstractSearchPanel.LOG;\n-\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -38,14 +36,14 @@\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.search.SyncopeProperty;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public final class SearchUtils implements Serializable {\n \n     private static final long serialVersionUID = 398381905376547084L;\n \n-    private SearchUtils() {\n-\n-    }\n+    private static final Logger LOG = LoggerFactory.getLogger(SearchUtils.class);\n \n     private static Pattern getTypeConditionPattern(final String type) {\n         return Pattern.compile(String.format(\";\\\\$type==%s|\\\\$type==%s;\", type, type));\n@@ -77,7 +75,7 @@ public static List<SearchClause> getSearchClauses(final String fiql) {\n     }\n \n     public static List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc) {\n-        List<SearchClause> res = new ArrayList<SearchClause>();\n+        List<SearchClause> res = new ArrayList<>();\n \n         if (sc.getStatement() == null) {\n             res.addAll(getCompoundSearchClause(sc));\n@@ -89,7 +87,7 @@ public static List<SearchClause> getSearchClauses(final SearchCondition<SearchBe\n     }\n \n     public static List<SearchClause> getCompoundSearchClause(final SearchCondition<SearchBean> sc) {\n-        List<SearchClause> res = new ArrayList<SearchClause>();\n+        List<SearchClause> res = new ArrayList<>();\n \n         for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n             if (searchCondition.getStatement() == null) {\n@@ -263,4 +261,9 @@ public static String buildFIQL(final List<SearchClause> clauses, final AbstractF\n \n         return fiql;\n     }\n+\n+    private SearchUtils() {\n+        // private constructor for static utility class\n+    }\n+\n }"},{"sha":"e259fdd0e5a2988173807d32b18aaac227f761e8","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ExecutionRestClient.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -18,9 +18,11 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.util.Date;\n+\n public interface ExecutionRestClient {\n \n-    void startExecution(long executionCollectorId);\n+    void startExecution(long executionCollectorId, Date start);\n \n     void deleteExecution(long executionId);\n }"},{"sha":"99ed25b32386375bf0e6abba5f577f11465db33f","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.util.Date;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.springframework.stereotype.Component;\n \n@@ -30,8 +32,8 @@ public class ReportRestClient extends BaseRestClient implements ExecutionRestCli\n \n     private static final long serialVersionUID = 1644689667998953604L;\n \n-    public ReportTO read(final Long reportId) {\n-        return getService(ReportService.class).read(reportId);\n+    public ReportTO read(final Long reportKey) {\n+        return getService(ReportService.class).read(reportKey);\n     }\n \n     public List<ReportTO> list() {\n@@ -49,20 +51,15 @@ public void update(final ReportTO reportTO) {\n     /**\n      * Delete specified report.\n      *\n-     * @param reportId report to delete\n+     * @param reportKey report to delete\n      */\n-    public void delete(final Long reportId) {\n-        getService(ReportService.class).delete(reportId);\n+    public void delete(final Long reportKey) {\n+        getService(ReportService.class).delete(reportKey);\n     }\n \n-    /**\n-     * Start execution for the specified report.\n-     *\n-     * @param reportId report id\n-     */\n     @Override\n-    public void startExecution(final long reportId) {\n-        getService(ReportService.class).execute(reportId);\n+    public void startExecution(final long reportKey, final Date start) {\n+        getService(ReportService.class).execute(new ExecuteQuery.Builder().key(reportKey).start(start).build());\n     }\n \n     /**"},{"sha":"4f9f9133cdd41cb1d3cb4230e87f650364620a32","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n+import java.util.Date;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -30,6 +31,7 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -110,12 +112,13 @@ public void delete(final Long taskKey, final Class<? extends AbstractTaskTO> tas\n     }\n \n     @Override\n-    public void startExecution(final long taskKey) {\n-        startExecution(taskKey, false);\n+    public void startExecution(final long taskKey, final Date start) {\n+        startExecution(taskKey, start, false);\n     }\n \n-    public void startExecution(final long taskKey, final boolean dryRun) {\n-        getService(TaskService.class).execute(taskKey, dryRun);\n+    public void startExecution(final long taskKey, final Date start, final boolean dryRun) {\n+        getService(TaskService.class).execute(\n+                new ExecuteQuery.Builder().key(taskKey).start(start).dryRun(dryRun).build());\n     }\n \n     @Override"},{"sha":"badb845f95546f973161f157e33097d558c3962b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractStartEndBean.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -27,31 +27,31 @@ public class AbstractStartEndBean extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 2399577415544539917L;\n \n-    protected Date startDate;\n+    protected Date start;\n \n-    protected Date endDate;\n+    protected Date end;\n \n-    public Date getStartDate() {\n-        return startDate == null\n+    public Date getStart() {\n+        return start == null\n                 ? null\n-                : new Date(startDate.getTime());\n+                : new Date(start.getTime());\n     }\n \n-    public void setStartDate(final Date startDate) {\n-        if (startDate != null) {\n-            this.startDate = new Date(startDate.getTime());\n+    public void setStartDate(final Date start) {\n+        if (start != null) {\n+            this.start = new Date(start.getTime());\n         }\n     }\n \n-    public Date getEndDate() {\n-        return endDate == null\n+    public Date getEnd() {\n+        return end == null\n                 ? null\n-                : new Date(endDate.getTime());\n+                : new Date(end.getTime());\n     }\n \n-    public void setEndDate(final Date endDate) {\n-        if (endDate != null) {\n-            this.endDate = new Date(endDate.getTime());\n+    public void setEndDate(final Date end) {\n+        if (end != null) {\n+            this.end = new Date(end.getTime());\n         }\n     }\n }"},{"sha":"73297fcc8e6974785a242db4d1340ff822b530ad","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ReportTO.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FReportTO.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -100,29 +100,20 @@ public void setLatestExecStatus(final String latestExecStatus) {\n         this.latestExecStatus = latestExecStatus;\n     }\n \n-    @SuppressWarnings(\"CPD-START\")\n     public Date getLastExec() {\n-        return lastExec == null\n-                ? null\n-                : new Date(lastExec.getTime());\n+        return lastExec == null ? null : new Date(lastExec.getTime());\n     }\n \n     public void setLastExec(final Date lastExec) {\n-        if (lastExec != null) {\n-            this.lastExec = new Date(lastExec.getTime());\n-        }\n+        this.lastExec = lastExec == null ? null : new Date(lastExec.getTime());\n     }\n \n     public Date getNextExec() {\n-        return nextExec == null\n-                ? null\n-                : new Date(nextExec.getTime());\n+        return nextExec == null ? null : new Date(nextExec.getTime());\n     }\n \n     public void setNextExec(final Date nextExec) {\n-        if (nextExec != null) {\n-            this.nextExec = new Date(nextExec.getTime());\n-        }\n+        this.nextExec = nextExec == null ? null : new Date(nextExec.getTime());\n     }\n \n     public boolean isActive() {"},{"sha":"aa2abe5eb38952c51983b3bc27395fe689172b79","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -31,6 +31,8 @@ public class SchedTaskTO extends AbstractTaskTO {\n \n     private static final long serialVersionUID = -5722284116974636425L;\n \n+    private Date start;\n+\n     private String cronExpression;\n \n     private String jobDelegateClassName;\n@@ -45,6 +47,14 @@ public class SchedTaskTO extends AbstractTaskTO {\n \n     private boolean active;\n \n+    public Date getStart() {\n+        return start == null ? null : new Date(start.getTime());\n+    }\n+\n+    public void setStart(final Date start) {\n+        this.start = start == null ? null : new Date(start.getTime());\n+    }\n+\n     public String getCronExpression() {\n         return cronExpression;\n     }\n@@ -61,33 +71,22 @@ public void setJobDelegateClassName(final String jobDelegateClassName) {\n         this.jobDelegateClassName = jobDelegateClassName;\n     }\n \n-    @SuppressWarnings(\"CPD-START\")\n     public Date getLastExec() {\n-        return lastExec == null\n-                ? null\n-                : new Date(lastExec.getTime());\n+        return lastExec == null ? null : new Date(lastExec.getTime());\n     }\n \n     public void setLastExec(final Date lastExec) {\n-        if (lastExec != null) {\n-            this.lastExec = new Date(lastExec.getTime());\n-        }\n+        this.lastExec = lastExec == null ? null : new Date(lastExec.getTime());\n     }\n \n     public Date getNextExec() {\n-        return nextExec == null\n-                ? null\n-                : new Date(nextExec.getTime());\n+        return nextExec == null ? null : new Date(nextExec.getTime());\n     }\n \n     public void setNextExec(final Date nextExec) {\n-        if (nextExec != null) {\n-            this.nextExec = new Date(nextExec.getTime());\n-        }\n+        this.nextExec = nextExec == null ? null : new Date(nextExec.getTime());\n     }\n \n-    @SuppressWarnings(\"CPD-END\")\n-\n     public String getDescription() {\n         return description;\n     }"},{"sha":"a7bd753220ab0fde4976d493789980c4eeca8c42","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecuteQuery.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.util.Date;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+public class ExecuteQuery extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 3846547401120638351L;\n+\n+    public static class Builder {\n+\n+        private final ExecuteQuery instance = new ExecuteQuery();\n+\n+        public Builder key(final long key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public Builder start(final Date date) {\n+            instance.setStart(date);\n+            return this;\n+        }\n+\n+        public Builder dryRun(final boolean dryRun) {\n+            instance.setDryRun(dryRun);\n+            return this;\n+        }\n+\n+        public ExecuteQuery build() {\n+            return instance;\n+        }\n+    }\n+\n+    private Long key;\n+\n+    private Date start;\n+\n+    private Boolean dryRun;\n+\n+    public Long getKey() {\n+        return key;\n+    }\n+\n+    @NotNull\n+    @PathParam(\"key\")\n+    public void setKey(final Long key) {\n+        this.key = key;\n+    }\n+\n+    public Date getStart() {\n+        return start;\n+    }\n+\n+    @QueryParam(\"start\")\n+    public void setStart(final Date start) {\n+        this.start = start;\n+    }\n+\n+    public Boolean getDryRun() {\n+        return dryRun == null ? false : dryRun;\n+    }\n+\n+    @QueryParam(\"dryRun\")\n+    @DefaultValue(\"false\")\n+    public void setDryRun(final Boolean dryRun) {\n+        this.dryRun = dryRun;\n+    }\n+\n+}"},{"sha":"87eb28faf0f8ed464b261c997606cbc1a10a5e0d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -40,6 +40,7 @@\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n \n /**\n  * REST operations for reports.\n@@ -117,15 +118,15 @@ public interface ReportService extends JAXRSService {\n     BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n \n     /**\n-     * Executes the report with matching key.\n+     * Executes the report matching the given query.\n      *\n-     * @param key key of report to be executed\n-     * @return report execution result\n+     * @param query query conditions\n+     * @return execution report for the report matching the given query\n      */\n     @POST\n     @Path(\"{key}/execute\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ReportExecTO execute(@NotNull @PathParam(\"key\") Long key);\n+    ReportExecTO execute(@BeanParam ExecuteQuery query);\n \n     /**\n      * Exports the report execution with matching key in the requested format."},{"sha":"eda7c4b3a94155e7e1f879099d89e85130cc7e90","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n \n@@ -139,17 +140,15 @@ <T extends AbstractTaskTO> T read(\n     BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n \n     /**\n-     * Executes the task matching the given id.\n+     * Executes the task matching the given query.\n      *\n-     * @param key key of task to be executed\n-     * @param dryRun if true, task will only be simulated\n-     * @return execution report for the task matching the given id\n+     * @param query query conditions\n+     * @return execution report for the task matching the given query\n      */\n     @POST\n     @Path(\"{key}/execute\")\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    TaskExecTO execute(@NotNull @PathParam(\"key\") Long key,\n-            @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\n+    TaskExecTO execute(@BeanParam ExecuteQuery query);\n \n     /**\n      * Executes the provided bulk action."},{"sha":"cafca4c94ff8f73e96b24c89675dbd1b635d2ba1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":22,"deletions":23,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -91,7 +91,7 @@ public ReportTO create(final ReportTO reportTO) {\n         report = reportDAO.save(report);\n \n         try {\n-            jobInstanceLoader.registerJob(report);\n+            jobInstanceLoader.registerJob(report, null);\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -114,7 +114,7 @@ public ReportTO update(final ReportTO reportTO) {\n         report = reportDAO.save(report);\n \n         try {\n-            jobInstanceLoader.registerJob(report);\n+            jobInstanceLoader.registerJob(report, null);\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -139,10 +139,10 @@ public ReportTO transform(final Report input) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n-    public ReportTO read(final Long reportKey) {\n-        Report report = reportDAO.find(reportKey);\n+    public ReportTO read(final Long key) {\n+        Report report = reportDAO.find(key);\n         if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportKey);\n+            throw new NotFoundException(\"Report \" + key);\n         }\n         return binder.getReportTO(report);\n     }\n@@ -230,23 +230,22 @@ public ReportExec getAndCheckReportExec(final Long executionKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n-    public ReportExecTO execute(final Long reportKey) {\n-        Report report = reportDAO.find(reportKey);\n+    public ReportExecTO execute(final Long key, final Date start) {\n+        Report report = reportDAO.find(key);\n         if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportKey);\n+            throw new NotFoundException(\"Report \" + key);\n         }\n \n         if (!report.isActive()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Scheduling);\n-            sce.getElements().add(\"Report \" + reportKey + \" is not active\");\n+            sce.getElements().add(\"Report \" + key + \" is not active\");\n             throw sce;\n         }\n \n         try {\n-            jobInstanceLoader.registerJob(report);\n+            jobInstanceLoader.registerJob(report, start);\n \n-            scheduler.getScheduler().triggerJob(\n-                    new JobKey(JobNamer.getJobName(report), Scheduler.DEFAULT_GROUP));\n+            scheduler.getScheduler().triggerJob(new JobKey(JobNamer.getJobName(report), Scheduler.DEFAULT_GROUP));\n         } catch (Exception e) {\n             LOG.error(\"While executing report {}\", report, e);\n \n@@ -256,7 +255,7 @@ public ReportExecTO execute(final Long reportKey) {\n         }\n \n         ReportExecTO result = new ReportExecTO();\n-        result.setReport(reportKey);\n+        result.setReport(key);\n         result.setStartDate(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n@@ -265,10 +264,10 @@ public ReportExecTO execute(final Long reportKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n-    public ReportTO delete(final Long reportKey) {\n-        Report report = reportDAO.find(reportKey);\n+    public ReportTO delete(final Long key) {\n+        Report report = reportDAO.find(key);\n         if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportKey);\n+            throw new NotFoundException(\"Report \" + key);\n         }\n \n         ReportTO deletedReport = binder.getReportTO(report);\n@@ -291,12 +290,12 @@ public ReportExecTO deleteExecution(final Long executionKey) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n     public BulkActionResult deleteExecutions(\n-            final Long reportKey,\n+            final Long key,\n             final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n \n-        Report report = reportDAO.find(reportKey);\n+        Report report = reportDAO.find(key);\n         if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportKey);\n+            throw new NotFoundException(\"Report \" + key);\n         }\n \n         BulkActionResult result = new BulkActionResult();\n@@ -306,7 +305,7 @@ public BulkActionResult deleteExecutions(\n                 reportExecDAO.delete(exec);\n                 result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.SUCCESS);\n             } catch (Exception e) {\n-                LOG.error(\"Error deleting execution {} of report {}\", exec.getKey(), reportKey, e);\n+                LOG.error(\"Error deleting execution {} of report {}\", exec.getKey(), key, e);\n                 result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.FAILURE);\n             }\n         }\n@@ -326,10 +325,10 @@ public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, fin\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n-    public void actionJob(final Long reportKey, final JobAction action) {\n-        Report report = reportDAO.find(reportKey);\n+    public void actionJob(final Long key, final JobAction action) {\n+        Report report = reportDAO.find(key);\n         if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportKey);\n+            throw new NotFoundException(\"Report \" + key);\n         }\n         String jobName = JobNamer.getJobName(report);\n         actionJob(jobName, action);"},{"sha":"d7686ca760eae611dcb2ce6c373197dfca1299e4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -105,6 +105,7 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         try {\n             jobInstanceLoader.registerJob(\n                     task,\n+                    task.getStart(),\n                     confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n@@ -137,6 +138,7 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n         try {\n             jobInstanceLoader.registerJob(\n                     task,\n+                    task.getStart(),\n                     confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n@@ -185,7 +187,7 @@ public <T extends AbstractTaskTO> T read(final Long taskKey, final boolean detai\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n-    public TaskExecTO execute(final Long taskKey, final boolean dryRun) {\n+    public TaskExecTO execute(final Long taskKey, final Date start, final boolean dryRun) {\n         Task task = taskDAO.find(taskKey);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskKey);\n@@ -216,12 +218,16 @@ public TaskExecTO execute(final Long taskKey, final boolean dryRun) {\n                 try {\n                     Map<String, Object> jobDataMap = jobInstanceLoader.registerJob(\n                             (SchedTask) task,\n+                            start,\n                             confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n \n                     jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n-                    scheduler.getScheduler().triggerJob(\n-                            new JobKey(JobNamer.getJobName(task), Scheduler.DEFAULT_GROUP),\n-                            new JobDataMap(jobDataMap));\n+\n+                    if (start == null) {\n+                        scheduler.getScheduler().triggerJob(\n+                                new JobKey(JobNamer.getJobName(task), Scheduler.DEFAULT_GROUP),\n+                                new JobDataMap(jobDataMap));\n+                    }\n                 } catch (Exception e) {\n                     LOG.error(\"While executing task {}\", task, e);\n "},{"sha":"38ea5843e6b0eac48b50b97ad019b67ea7400217","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/JobInstanceLoaderImpl.java","status":"modified","additions":53,"deletions":33,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -20,6 +20,7 @@\n \n import java.text.ParseException;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -50,15 +51,16 @@\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n+import org.quartz.CronScheduleBuilder;\n import org.quartz.Job;\n+import org.quartz.JobBuilder;\n import org.quartz.JobDataMap;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n+import org.quartz.TriggerBuilder;\n import org.quartz.TriggerKey;\n-import org.quartz.impl.JobDetailImpl;\n-import org.quartz.impl.triggers.CronTriggerImpl;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.BeanCreationException;\n@@ -89,7 +91,9 @@ public class JobInstanceLoaderImpl implements JobInstanceLoader, SyncopeLoader {\n     private ConfDAO confDAO;\n \n     private void registerJob(\n-            final String jobName, final Job jobInstance, final String cronExpression, final Map<String, Object> jobMap)\n+            final String jobName, final Job jobInstance,\n+            final String cronExpression, final Date start,\n+            final Map<String, Object> jobMap)\n             throws SchedulerException, ParseException {\n \n         synchronized (scheduler.getScheduler()) {\n@@ -116,23 +120,34 @@ private void registerJob(\n         ApplicationContextProvider.getBeanFactory().registerSingleton(jobName, jobInstance);\n \n         // 2. JobDetail bean\n-        JobDetailImpl jobDetail = new JobDetailImpl();\n-        jobDetail.setName(jobName);\n-        jobDetail.setGroup(Scheduler.DEFAULT_GROUP);\n-        jobDetail.setJobClass(jobInstance.getClass());\n-        jobDetail.setJobDataMap(new JobDataMap(jobMap));\n+        JobBuilder jobDetailBuilder = JobBuilder.newJob(jobInstance.getClass()).\n+                withIdentity(jobName).\n+                usingJobData(new JobDataMap(jobMap));\n \n         // 3. Trigger\n-        if (cronExpression == null) {\n+        if (cronExpression == null && start == null) {\n             // Jobs added with no trigger must be durable\n-            jobDetail.setDurability(true);\n-            scheduler.getScheduler().addJob(jobDetail, true);\n+            scheduler.getScheduler().addJob(jobDetailBuilder.storeDurably().build(), true);\n         } else {\n-            CronTriggerImpl cronTrigger = new CronTriggerImpl();\n-            cronTrigger.setName(JobNamer.getTriggerName(jobName));\n-            cronTrigger.setCronExpression(cronExpression);\n+            TriggerBuilder<?> triggerBuilder;\n+\n+            if (cronExpression == null) {\n+                triggerBuilder = TriggerBuilder.newTrigger().\n+                        withIdentity(JobNamer.getTriggerName(jobName)).\n+                        startAt(start);\n+            } else {\n+                triggerBuilder = TriggerBuilder.newTrigger().\n+                        withIdentity(JobNamer.getTriggerName(jobName)).\n+                        withSchedule(CronScheduleBuilder.cronSchedule(cronExpression));\n+\n+                if (start == null) {\n+                    triggerBuilder = triggerBuilder.startNow();\n+                } else {\n+                    triggerBuilder = triggerBuilder.startAt(start);\n+                }\n+            }\n \n-            scheduler.getScheduler().scheduleJob(jobDetail, cronTrigger);\n+            scheduler.getScheduler().scheduleJob(jobDetailBuilder.build(), triggerBuilder.build());\n         }\n     }\n \n@@ -162,7 +177,7 @@ private <T> T createSpringBean(final Class<T> jobClass) {\n     }\n \n     @Override\n-    public Map<String, Object> registerJob(final SchedTask task, final long interruptMaxRetries)\n+    public Map<String, Object> registerJob(final SchedTask task, final Date start, final long interruptMaxRetries)\n             throws SchedulerException, ParseException {\n \n         TaskJob job = createSpringBean(TaskJob.class);\n@@ -179,25 +194,30 @@ public Map<String, Object> registerJob(final SchedTask task, final long interrup\n         jobMap.put(TaskJob.DELEGATE_CLASS_KEY, jobDelegateClassName);\n         jobMap.put(TaskJob.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n \n-        registerJob(JobNamer.getJobName(task), job, task.getCronExpression(), jobMap);\n+        registerJob(\n+                JobNamer.getJobName(task),\n+                job,\n+                task.getCronExpression(),\n+                start,\n+                jobMap);\n         return jobMap;\n     }\n \n     @Override\n-    public void registerJob(final Report report) throws SchedulerException, ParseException {\n+    public void registerJob(final Report report, final Date start) throws SchedulerException, ParseException {\n         ReportJob job = createSpringBean(ReportJob.class);\n         job.setReportKey(report.getKey());\n \n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobInstanceLoader.DOMAIN, AuthContextUtils.getDomain());\n \n-        registerJob(JobNamer.getJobName(report), job, report.getCronExpression(), jobMap);\n+        registerJob(JobNamer.getJobName(report), job, report.getCronExpression(), start, jobMap);\n     }\n \n     private void registerNotificationJob(final String cronExpression) throws SchedulerException, ParseException {\n         NotificationJob job = createSpringBean(NotificationJob.class);\n \n-        registerJob(\"taskNotificationJob\", job, cronExpression, Collections.<String, Object>emptyMap());\n+        registerJob(\"taskNotificationJob\", job, cronExpression, null, Collections.<String, Object>emptyMap());\n     }\n \n     private void unregisterJob(final String jobName) {\n@@ -234,22 +254,22 @@ public void load() {\n         final Pair<String, Long> notificationConf = AuthContextUtils.execWithAuthContext(SyncopeConstants.MASTER_DOMAIN,\n                 new AuthContextUtils.Executable<Pair<String, Long>>() {\n \n-                    @Override\n-                    public Pair<String, Long> exec() {\n-                        String notificationJobCronExpression = StringUtils.EMPTY;\n+            @Override\n+            public Pair<String, Long> exec() {\n+                String notificationJobCronExpression = StringUtils.EMPTY;\n \n-                        CPlainAttr notificationJobCronExp =\n+                CPlainAttr notificationJobCronExp =\n                         confDAO.find(\"notificationjob.cronExpression\", NotificationJob.DEFAULT_CRON_EXP);\n-                        if (!notificationJobCronExp.getValuesAsStrings().isEmpty()) {\n-                            notificationJobCronExpression = notificationJobCronExp.getValuesAsStrings().get(0);\n-                        }\n+                if (!notificationJobCronExp.getValuesAsStrings().isEmpty()) {\n+                    notificationJobCronExpression = notificationJobCronExp.getValuesAsStrings().get(0);\n+                }\n \n-                        long interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).\n+                long interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).\n                         getLongValue();\n \n-                        return ImmutablePair.of(notificationJobCronExpression, interruptMaxRetries);\n-                    }\n-                });\n+                return ImmutablePair.of(notificationJobCronExpression, interruptMaxRetries);\n+            }\n+        });\n \n         for (String domain : domainsHolder.getDomains().keySet()) {\n             AuthContextUtils.execWithAuthContext(domain, new AuthContextUtils.Executable<Void>() {\n@@ -262,7 +282,7 @@ public Void exec() {\n                     tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n                     for (SchedTask task : tasks) {\n                         try {\n-                            registerJob(task, notificationConf.getRight());\n+                            registerJob(task, task.getStart(), notificationConf.getRight());\n                         } catch (Exception e) {\n                             LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n                         }\n@@ -271,7 +291,7 @@ public Void exec() {\n                     // 2. ReportJobs\n                     for (Report report : reportDAO.findAll()) {\n                         try {\n-                            registerJob(report);\n+                            registerJob(report, null);\n                         } catch (Exception e) {\n                             LOG.error(\"While loading job instance for report \" + report.getName(), e);\n                         }"},{"sha":"3e0aaa4e6f213d63a87b4c9c0d2073cfc270a1ea","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SchedTask.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -18,23 +18,29 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.task;\n \n+import java.util.Date;\n+\n public interface SchedTask extends Task {\n \n-    String getCronExpression();\n+    void setName(String name);\n+\n+    String getName();\n+\n+    void setDescription(String description);\n \n     String getDescription();\n \n-    String getJobDelegateClassName();\n+    void setJobDelegateClassName(String jobDelegateClassName);\n \n-    String getName();\n+    String getJobDelegateClassName();\n \n-    void setCronExpression(String cronExpression);\n+    Date getStart();\n \n-    void setDescription(String description);\n+    void setStart(Date start);\n \n-    void setJobDelegateClassName(String jobDelegateClassName);\n+    void setCronExpression(String cronExpression);\n \n-    void setName(String name);\n+    String getCronExpression();\n \n     boolean isActive();\n "},{"sha":"ce8b47a8e5a0b0fd928b8f8fac94620eb951ed41","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":20,"deletions":4,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -18,9 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.task;\n \n+import java.util.Date;\n import javax.persistence.Basic;\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n@@ -35,14 +38,17 @@ public class JPASchedTask extends AbstractTask implements SchedTask {\n \n     private static final long serialVersionUID = 7596236684832602180L;\n \n-    protected String cronExpression;\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date start;\n \n-    protected String jobDelegateClassName;\n+    private String cronExpression;\n+\n+    private String jobDelegateClassName;\n \n     @NotNull\n-    protected String name;\n+    private String name;\n \n-    protected String description;\n+    private String description;\n \n     @NotNull\n     @Basic\n@@ -55,6 +61,16 @@ public JPASchedTask() {\n         this.type = TaskType.SCHEDULED;\n     }\n \n+    @Override\n+    public Date getStart() {\n+        return start;\n+    }\n+\n+    @Override\n+    public void setStart(final Date start) {\n+        this.start = start;\n+    }\n+\n     @Override\n     public String getCronExpression() {\n         return cronExpression;"},{"sha":"ff8486eaf0bb464078cfbe6b922bb0686c9fe58b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobInstanceLoader.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.api.job;\n \n import java.text.ParseException;\n+import java.util.Date;\n import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n@@ -29,10 +30,11 @@ public interface JobInstanceLoader {\n \n     String DOMAIN = \"domain\";\n \n-    Map<String, Object> registerJob(final SchedTask task, final long interruptMaxRetries)\n+    Map<String, Object> registerJob(final SchedTask task, final Date start, final long interruptMaxRetries)\n             throws SchedulerException, ParseException;\n \n-    void registerJob(final Report report) throws SchedulerException, ParseException;\n+    void registerJob(final Report report, final Date start)\n+            throws SchedulerException, ParseException;\n \n     void unregisterJob(Task task);\n "},{"sha":"77b697e3fb4949bf2d420be4bdd754c09c305579","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -198,6 +198,7 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskU\n         }\n \n         SchedTask task = taskUtils.newTask();\n+        task.setStart(taskTO.getStart());\n         task.setCronExpression(taskTO.getCronExpression());\n         task.setName(taskTO.getName());\n         task.setDescription(taskTO.getDescription());"},{"sha":"60cce62690ee6e4f4f03c5b3e8b3ce4af04ca772","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -88,8 +89,8 @@ public void write(final OutputStream os) throws IOException {\n     }\n \n     @Override\n-    public ReportExecTO execute(final Long key) {\n-        return logic.execute(key);\n+    public ReportExecTO execute(final ExecuteQuery query) {\n+        return logic.execute(query.getKey(), query.getStart());\n     }\n \n     @Override"},{"sha":"6e1f6f30018c19aed56764589c821dbabb496929","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -68,8 +69,8 @@ public void delete(final Long key) {\n     }\n \n     @Override\n-    public TaskExecTO execute(final Long key, final boolean dryRun) {\n-        return logic.execute(key, dryRun);\n+    public TaskExecTO execute(final ExecuteQuery query) {\n+        return logic.execute(query.getKey(), query.getStart(), query.getDryRun());\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -159,7 +160,7 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n             case DRYRUN:\n                 for (String key : bulkAction.getTargets()) {\n                     try {\n-                        logic.execute(Long.valueOf(key), true);\n+                        logic.execute(Long.valueOf(key), null, true);\n                         result.getResults().put(key, BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing dryrun for task {}\", key, e);\n@@ -171,7 +172,7 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n             case EXECUTE:\n                 for (String key : bulkAction.getTargets()) {\n                     try {\n-                        logic.execute(Long.valueOf(key), false);\n+                        logic.execute(Long.valueOf(key), null, false);\n                         result.getResults().put(key, BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing execute for task {}\", key, e);"},{"sha":"b1f106ef131e1208dc352c1d2088b88caa82f6e7","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSampleJobDelegate.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -19,25 +19,18 @@\n package org.apache.syncope.fit.core.reference;\n \n import java.util.Date;\n-import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.java.job.AbstractSchedTaskJobDelegate;\n import org.quartz.JobExecutionException;\n \n /**\n- * Sample implementation for execution a scheduled task.\n- *\n- * @see SchedTask\n+ * Sample implementation for executing a scheduled task.\n  */\n public class TestSampleJobDelegate extends AbstractSchedTaskJobDelegate {\n \n     @Override\n     protected String doExecute(final boolean dryRun) throws JobExecutionException {\n-        if (!(task instanceof SchedTask)) {\n-            throw new JobExecutionException(\"Task \" + task.getKey() + \" isn't a SchedTask\");\n-        }\n-\n-        for (int i = 0; i < 10; i++) {\n+        for (int i = 0; i < 2; i++) {\n             LOG.debug(\"TestSampleJob#doExecute round {} time {}\", i, new Date().toString());\n             try {\n                 Thread.sleep(1000);\n@@ -46,11 +39,9 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             }\n         }\n \n-        final SchedTask schedTask = (SchedTask) this.task;\n-\n-        LOG.info(\"TestSampleJob {}running [SchedTask {}]\", (dryRun\n+        LOG.info(\"TestSampleJob {} running [SchedTask {}]\", (dryRun\n                 ? \"dry \"\n-                : \"\"), schedTask.getKey());\n+                : \"\"), task.getKey());\n \n         return (dryRun\n                 ? \"DRY \""},{"sha":"8a20ea9e163a908bc86b3b08ae3b07e53e27edb0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n@@ -99,7 +100,8 @@ protected static TaskExecTO execTask(final TaskService taskService, final Long t\n         assertNotNull(taskTO.getExecutions());\n \n         int preSyncSize = taskTO.getExecutions().size();\n-        TaskExecTO execution = taskService.execute(taskTO.getKey(), dryRun);\n+        TaskExecTO execution = taskService.execute(\n+                new ExecuteQuery.Builder().key(taskTO.getKey()).dryRun(dryRun).build());\n         assertEquals(initialStatus, execution.getStatus());\n \n         int i = 0;"},{"sha":"43de36508b31d71f4bc69d272fc580da93564bcd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationTaskITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.core.logic.notification.NotificationJob;\n import org.junit.AfterClass;\n@@ -259,7 +260,7 @@ public void issueSYNCOPE192() throws Exception {\n         assertNotNull(taskTO);\n         assertTrue(taskTO.getExecutions().isEmpty());\n \n-        taskService.execute(taskTO.getKey(), false);\n+        taskService.execute(new ExecuteQuery.Builder().key(taskTO.getKey()).build());\n \n         try {\n             Thread.sleep(5);"},{"sha":"d5c77e71e3b7946629ac97917553b76e5114243d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.junit.FixMethodOrder;\n@@ -108,8 +109,8 @@ public void bulkAction() {\n     @Test\n     public void issueSYNCOPE741() {\n         for (int i = 0; i < 3; i++) {\n-            taskService.execute(1L, false);\n-            taskService.execute(2L, false);\n+            taskService.execute(new ExecuteQuery.Builder().key(1L).build());\n+            taskService.execute(new ExecuteQuery.Builder().key(2L).build());\n         }\n         try {\n             Thread.sleep(3000);"},{"sha":"aea35a9d0ed2ec57d0a2e9bd3009fd81fe6a8c19","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ReportITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -139,7 +140,7 @@ public void delete() {\n     }\n \n     private Long execute(final Long reportKey) {\n-        ReportExecTO execution = reportService.execute(reportKey);\n+        ReportExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportKey).build());\n         assertNotNull(execution);\n \n         int i = 0;\n@@ -251,7 +252,7 @@ public void issueSYNCOPE43() {\n         reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n \n-        ReportExecTO execution = reportService.execute(reportTO.getKey());\n+        ReportExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n         assertNotNull(execution);\n \n         int maxit = 50;\n@@ -280,7 +281,7 @@ public void issueSYNCOPE102() throws IOException {\n \n         // Execute (multiple requests)\n         for (int i = 0; i < 10; i++) {\n-            ReportExecTO execution = reportService.execute(reportTO.getKey());\n+            ReportExecTO execution = reportService.execute(new ExecuteQuery.Builder().key(reportTO.getKey()).build());\n             assertNotNull(execution);\n         }\n "},{"sha":"6b989b73d2a66d366a47b49ef39277cccb281e7f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":57,"deletions":9,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66c9c3eff1c82e455996c86e50762dab36ebf4d1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=66c9c3eff1c82e455996c86e50762dab36ebf4d1","patch":"@@ -25,9 +25,12 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.util.Calendar;\n+import java.util.Date;\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.time.DateUtils;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n@@ -37,6 +40,8 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n+import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.junit.FixMethodOrder;\n@@ -81,6 +86,49 @@ public void update() {\n         assertNull(actual.getCronExpression());\n     }\n \n+    @Test\n+    public void deferred() {\n+        SchedTaskTO task = new SchedTaskTO();\n+        task.setActive(true);\n+        task.setName(\"deferred\");\n+        task.setJobDelegateClassName(TestSampleJobDelegate.class.getName());\n+\n+        Response response = taskService.create(task);\n+        task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        assertNotNull(task);\n+\n+        Date initial = new Date();\n+        Date fiveSecsLater = DateUtils.addSeconds(initial, 2);\n+\n+        taskService.execute(new ExecuteQuery.Builder().key(task.getKey()).start(fiveSecsLater).build());\n+\n+        int i = 0;\n+        int maxit = 50;\n+\n+        // wait for completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            task = taskService.read(task.getKey(), true);\n+\n+            assertNotNull(task);\n+            assertNotNull(task.getExecutions());\n+\n+            i++;\n+        } while (task.getExecutions().isEmpty() && i < maxit);\n+\n+        PagedResult<TaskExecTO> execs =\n+                taskService.listExecutions(new TaskExecQuery.Builder().key(task.getKey()).build());\n+        assertEquals(1, execs.getTotalCount());\n+        assertTrue(execs.getResult().get(0).getStart().after(initial));\n+        assertEquals(\n+                DateUtils.round(fiveSecsLater, Calendar.SECOND),\n+                DateUtils.round(execs.getResult().get(0).getStart(), Calendar.SECOND));\n+    }\n+\n     @Test\n     public void issueSYNCOPE144() {\n         SchedTaskTO task = new SchedTaskTO();\n@@ -89,12 +137,12 @@ public void issueSYNCOPE144() {\n         task.setJobDelegateClassName(TestSampleJobDelegate.class.getName());\n \n         Response response = taskService.create(task);\n-        SchedTaskTO actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n-        assertNotNull(actual);\n-        assertEquals(\"issueSYNCOPE144\", actual.getName());\n-        assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n+        task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        assertNotNull(task);\n+        assertEquals(\"issueSYNCOPE144\", task.getName());\n+        assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());\n \n-        task = taskService.read(actual.getKey(), true);\n+        task = taskService.read(task.getKey(), true);\n         assertNotNull(task);\n         assertEquals(\"issueSYNCOPE144\", task.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", task.getDescription());\n@@ -103,10 +151,10 @@ public void issueSYNCOPE144() {\n         task.setDescription(\"issueSYNCOPE144 Description_2\");\n \n         response = taskService.create(task);\n-        actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n-        assertNotNull(actual);\n-        assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n-        assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n+        task = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+        assertNotNull(task);\n+        assertEquals(\"issueSYNCOPE144_2\", task.getName());\n+        assertEquals(\"issueSYNCOPE144 Description_2\", task.getDescription());\n     }\n \n     @Test"}]}