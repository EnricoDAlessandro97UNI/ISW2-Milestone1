{"sha":"ebc1e056e38b231c938da9ebd133e4d7af11d882","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmViYzFlMDU2ZTM4YjIzMWM5MzhkYTllYmQxMzNlNGQ3YWYxMWQ4ODI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-06-13T15:27:51Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-06-13T16:04:02Z"},"message":"[SYNCOPE-1324] Implementation provided","tree":{"sha":"8773db57659edc8b24415f59a5b122cd5c8447fd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8773db57659edc8b24415f59a5b122cd5c8447fd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ebc1e056e38b231c938da9ebd133e4d7af11d882","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ebc1e056e38b231c938da9ebd133e4d7af11d882","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ebc1e056e38b231c938da9ebd133e4d7af11d882","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ebc1e056e38b231c938da9ebd133e4d7af11d882/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"72ca184f5406678b913c9eae3c450ea7afce52df","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72ca184f5406678b913c9eae3c450ea7afce52df","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72ca184f5406678b913c9eae3c450ea7afce52df"}],"stats":{"total":235,"additions":217,"deletions":18},"files":[{"sha":"60eb62c5bea24687c6b405cdb5edfa0e2af1ddfe","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/HaveIBeenPwnedPasswordRuleConf.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebc1e056e38b231c938da9ebd133e4d7af11d882/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FHaveIBeenPwnedPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebc1e056e38b231c938da9ebd133e4d7af11d882/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FHaveIBeenPwnedPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FHaveIBeenPwnedPasswordRuleConf.java?ref=ebc1e056e38b231c938da9ebd133e4d7af11d882","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.policy;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"haveIBeenPwnedPasswordRuleConf\")\n+@XmlType\n+public class HaveIBeenPwnedPasswordRuleConf extends AbstractPasswordRuleConf {\n+\n+    private static final long serialVersionUID = -8962889598888347921L;\n+\n+}"},{"sha":"cc5bf94ff7a7de47e7fb37b9dd194068136a3284","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/HaveIBeenPwnedPasswordRule.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebc1e056e38b231c938da9ebd133e4d7af11d882/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FHaveIBeenPwnedPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebc1e056e38b231c938da9ebd133e4d7af11d882/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FHaveIBeenPwnedPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FHaveIBeenPwnedPasswordRule.java?ref=ebc1e056e38b231c938da9ebd133e4d7af11d882","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URI;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.stream.Stream;\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.utils.policy.PasswordPolicyException;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.springframework.web.client.RestTemplate;\n+\n+@PasswordRuleConfClass(HaveIBeenPwnedPasswordRuleConf.class)\n+public class HaveIBeenPwnedPasswordRule implements PasswordRule {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(HaveIBeenPwnedPasswordRule.class);\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n+    private HaveIBeenPwnedPasswordRuleConf conf;\n+\n+    @Override\n+    public HaveIBeenPwnedPasswordRuleConf getConf() {\n+        return conf;\n+    }\n+\n+    @Override\n+    public void setConf(final PasswordRuleConf conf) {\n+        if (conf instanceof HaveIBeenPwnedPasswordRuleConf) {\n+            this.conf = (HaveIBeenPwnedPasswordRuleConf) conf;\n+        } else {\n+            throw new IllegalArgumentException(\n+                    HaveIBeenPwnedPasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final User user) {\n+        String clearPassword = user.getClearPassword();\n+        String password = user.getPassword();\n+\n+        if (password != null && clearPassword != null) {\n+            try {\n+                final String sha1 = ENCRYPTOR.encode(clearPassword, CipherAlgorithm.SHA1);\n+\n+                HttpHeaders headers = new HttpHeaders();\n+                headers.set(HttpHeaders.USER_AGENT, \"Apache Syncope\");\n+                ResponseEntity<String> response = new RestTemplate().exchange(\n+                        URI.create(\"https://api.pwnedpasswords.com/range/\" + sha1.substring(0, 5)),\n+                        HttpMethod.GET,\n+                        new HttpEntity<>(null, headers),\n+                        String.class);\n+                if (StringUtils.isNotBlank(response.getBody())) {\n+                    if (Stream.of(response.getBody().split(\"\\\\n\")).anyMatch(line\n+                            -> sha1.equals(sha1.substring(0, 5) + StringUtils.substringBefore(line, \":\")))) {\n+\n+                        throw new PasswordPolicyException(\"Password pwned\");\n+                    }\n+                }\n+            } catch (UnsupportedEncodingException | InvalidKeyException | NoSuchAlgorithmException\n+                    | BadPaddingException | IllegalBlockSizeException | NoSuchPaddingException e) {\n+\n+                LOG.error(\"Could not encode the password value as SHA1\", e);\n+            } catch (HttpStatusCodeException e) {\n+                LOG.error(\"Error while contacting the PwnedPasswords service\", e);\n+            }\n+        }\n+    }\n+}"},{"sha":"a08eaf83768ca82f01d2705f72ea86e5460b8705","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebc1e056e38b231c938da9ebd133e4d7af11d882/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebc1e056e38b231c938da9ebd133e4d7af11d882/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=ebc1e056e38b231c938da9ebd133e4d7af11d882","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultPullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n@@ -65,6 +66,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.DefaultAccountRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPasswordRule;\n import org.apache.syncope.core.persistence.jpa.dao.DefaultPullCorrelationRule;\n+import org.apache.syncope.core.persistence.jpa.dao.HaveIBeenPwnedPasswordRule;\n import org.apache.syncope.core.provisioning.java.propagation.AzurePropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.DBPasswordPropagationActions;\n import org.apache.syncope.core.provisioning.java.propagation.GoogleAppsPropagationActions;\n@@ -121,6 +123,7 @@ public class ITImplementationLookup implements ImplementationLookup {\n         {\n             put(TestPasswordRuleConf.class, TestPasswordRule.class);\n             put(DefaultPasswordRuleConf.class, DefaultPasswordRule.class);\n+            put(HaveIBeenPwnedPasswordRuleConf.class, HaveIBeenPwnedPasswordRule.class);\n         }\n     };\n "},{"sha":"d67be2ab575700b396be60155a4c3c3a2678f467","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebc1e056e38b231c938da9ebd133e4d7af11d882/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebc1e056e38b231c938da9ebd133e4d7af11d882/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=ebc1e056e38b231c938da9ebd133e4d7af11d882","patch":"@@ -38,6 +38,7 @@\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n@@ -53,6 +54,7 @@\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.HaveIBeenPwnedPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n@@ -1341,4 +1343,40 @@ public void restResource() {\n         // verify user was removed by the backend REST service\n         assertEquals(404, webClient.get().getStatus());\n     }\n+\n+    @Test\n+    public void haveIBeenPwned() {\n+        ImplementationTO rule = new ImplementationTO();\n+        rule.setKey(\"HaveIBeenPwnedPasswordRuleConf\" + getUUIDString());\n+        rule.setEngine(ImplementationEngine.JAVA);\n+        rule.setType(ImplementationType.PASSWORD_RULE);\n+        rule.setBody(POJOHelper.serialize(new HaveIBeenPwnedPasswordRuleConf()));\n+        Response response = implementationService.create(rule);\n+        rule.setKey(response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+\n+        PasswordPolicyTO pwdPolicy = new PasswordPolicyTO();\n+        pwdPolicy.setDescription(\"Have I Been Pwned?\");\n+        pwdPolicy.getRules().add(rule.getKey());\n+        pwdPolicy = createPolicy(PolicyType.PASSWORD, pwdPolicy);\n+        assertNotNull(pwdPolicy.getKey());\n+\n+        RealmTO realm = new RealmTO();\n+        realm.setName(\"hibp\");\n+        realm.setPasswordPolicy(pwdPolicy.getKey());\n+        realmService.create(SyncopeConstants.ROOT_REALM, realm);\n+\n+        UserTO user = getUniqueSampleTO(\"hibp@syncope.apache.org\");\n+        user.setRealm(\"/hibp\");\n+        user.setPassword(\"password\");\n+        try {\n+            createUser(user);\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+            assertEquals(\"InvalidPassword: Password pwned\", e.getElements().iterator().next());\n+        }\n+\n+        user.setPassword(RandomStringUtils.randomAlphanumeric(10));\n+        user = createUser(user).getEntity();\n+        assertNotNull(user.getKey());\n+    }\n }"},{"sha":"ebae238e0c62d58073c4782344080787cf23d318","filename":"src/main/asciidoc/reference-guide/concepts/policies.adoc","status":"modified","additions":41,"deletions":18,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebc1e056e38b231c938da9ebd133e4d7af11d882/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebc1e056e38b231c938da9ebd133e4d7af11d882/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc?ref=ebc1e056e38b231c938da9ebd133e4d7af11d882","patch":"@@ -145,6 +145,38 @@ When defining a password policy, the following information must be provided:\n \n Password rules define constraints to apply to password values.\n \n+Some implementations are provided out-of-the-box, custom ones can be provided on given deployment.\n+\n+[TIP]\n+====\n+Writing custom account rules means:\n+\n+. providing configuration parameters in an implementation of\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java[AccountRuleConf^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/common/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java[AccountRuleConf^]\n+endif::[]\n+. implementing enforcement in an implementation of\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java[AccountRule^]\n+endif::[]\n+annotated via\n+ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java[@AccountRuleConfClass^]\n+endif::[]\n+ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n+https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRuleConfClass.java[@AccountRuleConfClass^]\n+endif::[]\n+referring to the configuration class\n+====\n+\n+====== Default Password Rule\n+\n The default password rule (enforced by\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPasswordRule.java[DefaultPasswordRule^]\n@@ -186,33 +218,24 @@ endif::[]\n * prefixes not permitted - list of strings that cannot be present as a prefix;\n * suffixes not permitted - list of strings that cannot be present as a suffix.\n \n-[TIP]\n-====\n-Writing custom password rules means:\n+====== \"Have I Been Pwned?\" Password Rule\n \n-. providing configuration parameters in an implementation of\n-ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordRuleConf.java[PasswordRuleConf^]\n-endif::[]\n-ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/common/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordRuleConf.java[PasswordRuleConf^]\n-endif::[]\n-. implementing enforcement in an implementation of\n+This password rule (enforced by\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java[PasswordRule^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/HaveIBeenPwnedPasswordRule.java[HaveIBeenPwnedPasswordRule^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java[PasswordRule^]\n+https://github.com/apache/syncope/blob/master/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/HaveIBeenPwnedPasswordRule.java[HaveIBeenPwnedPasswordRule^]\n endif::[]\n-annotated via\n+and configurable via\n ifeval::[\"{snapshotOrRelease}\" == \"release\"]\n-https://github.com/apache/syncope/blob/syncope-{docVersion}/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRuleConfClass.java[@PasswordRuleConfClass^]\n+https://github.com/apache/syncope/blob/syncope-{docVersion}/common/lib/src/main/java/org/apache/syncope/common/lib/policy/HaveIBeenPwnedPasswordRuleConf.java[HaveIBeenPwnedPasswordRuleConf^]\n endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n-https://github.com/apache/syncope/blob/master/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRuleConfClass.java[@PasswordRuleConfClass^]\n+https://github.com/apache/syncope/blob/master/common/lib/src/main/java/org/apache/syncope/common/lib/policy/HaveIBeenPwnedPasswordRuleConf.java[HaveIBeenPwnedPasswordRuleConf^]\n endif::[]\n-referring to the configuration class\n-====\n+) checks the provided password values against the popular\n+https://haveibeenpwned.com[\"Have I Been Pwned?\"^] service.\n \n [[policies-pull]]\n ==== Pull"}]}