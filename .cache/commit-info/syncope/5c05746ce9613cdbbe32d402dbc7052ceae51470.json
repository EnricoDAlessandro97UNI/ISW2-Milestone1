{"sha":"5c05746ce9613cdbbe32d402dbc7052ceae51470","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVjMDU3NDZjZTk2MTNjZGJiZTMyZDQwMmRiYzcwNTJjZWFlNTE0NzA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-31T16:26:23Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-31T16:26:23Z"},"message":"Update issue 94\nCreated entity, TO and REST controller (+ tests) for notifications\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247173 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"67716441c2dc8bb68b7c7512e026d02b97ae3c18","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/67716441c2dc8bb68b7c7512e026d02b97ae3c18"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5c05746ce9613cdbbe32d402dbc7052ceae51470","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5c05746ce9613cdbbe32d402dbc7052ceae51470","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5c05746ce9613cdbbe32d402dbc7052ceae51470","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5c05746ce9613cdbbe32d402dbc7052ceae51470/comments","author":null,"committer":null,"parents":[{"sha":"954c3174e0c21fba450d6ee7963e87347cba68b1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/954c3174e0c21fba450d6ee7963e87347cba68b1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/954c3174e0c21fba450d6ee7963e87347cba68b1"}],"stats":{"total":940,"additions":922,"deletions":18},"files":[{"sha":"ef92bbb1abb76067f23060d36a0ecf654174b74e","filename":"client/src/main/java/org/syncope/client/to/NotificationTO.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNotificationTO.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.client.search.NodeCond;\n+\n+public class NotificationTO extends AbstractBaseBean {\n+\n+    private Long id;\n+\n+    private List<String> events;\n+\n+    private NodeCond about;\n+\n+    private NodeCond recipients;\n+\n+    private String sender;\n+\n+    private String subject;\n+\n+    private String template;\n+\n+    public NotificationTO() {\n+        events = new ArrayList<String>();\n+    }\n+\n+    public NodeCond getAbout() {\n+        return about;\n+    }\n+\n+    public void setAbout(NodeCond about) {\n+        this.about = about;\n+    }\n+\n+    public List<String> getEvents() {\n+        return events;\n+    }\n+\n+    public boolean addEvent(final String event) {\n+        return event != null && !events.contains(event) && events.add(event);\n+    }\n+\n+    public boolean removeEvent(final String event) {\n+        return event != null && events.remove(event);\n+    }\n+\n+    public void setEvents(List<String> events) {\n+        this.events = events;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public NodeCond getRecipients() {\n+        return recipients;\n+    }\n+\n+    public void setRecipients(NodeCond recipients) {\n+        this.recipients = recipients;\n+    }\n+\n+    public String getSender() {\n+        return sender;\n+    }\n+\n+    public void setSender(String sender) {\n+        this.sender = sender;\n+    }\n+\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    public void setSubject(String subject) {\n+        this.subject = subject;\n+    }\n+\n+    public String getTemplate() {\n+        return template;\n+    }\n+\n+    public void setTemplate(String template) {\n+        this.template = template;\n+    }\n+}"},{"sha":"1c01cc3278002b178b7b4cb68371543eb5f84b75","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -65,6 +65,8 @@ public enum EntityViolationType {\n     \"org.syncope.core.validation.policy.invalid\"),\n     InvalidSyncPolicy(\n     \"org.syncope.core.validation.policy.invalid\"),\n+    InvalidNotification(\n+    \"org.syncope.core.validation.notification.invalid\"),\n     InvalidSchemaMapping(\n     \"org.syncope.core.validation.mapping.invalid\");\n "},{"sha":"2371684f26e0fb1117c567f00a59b6b1efe8d898","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -88,6 +88,9 @@ public enum SyncopeClientExceptionType {\n     InvalidExternalResource(\n     \"Syncope.InvalidExternalResource\",\n     \"Syncope.InvalidExternalResource.element\"),\n+    InvalidNotification(\n+    \"Syncope.InvalidNotification\",\n+    \"Syncope.InvalidNotification.element\"),\n     InvalidTask(\n     \"Syncope.InvalidTask\",\n     \"Syncope.InvalidTask.element\"),"},{"sha":"3d6ddc9d6793f5856fd3547ec282b1eba3833d5c","filename":"core/src/main/java/org/syncope/core/persistence/beans/Notification.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+import javax.validation.constraints.NotNull;\n+import org.hibernate.annotations.Type;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.core.persistence.util.XmlSerializer;\n+import org.syncope.core.persistence.validation.entity.NotificationCheck;\n+\n+@NotificationCheck\n+@Entity\n+public class Notification extends AbstractBaseBean {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private Long id;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    private List<String> events;\n+\n+    @NotNull\n+    @Lob\n+    @Type(type = \"org.hibernate.type.StringClobType\")\n+    private String xmlAbout;\n+\n+    @NotNull\n+    @Lob\n+    @Type(type = \"org.hibernate.type.StringClobType\")\n+    private String xmlRecipients;\n+\n+    @NotNull\n+    private String sender;\n+\n+    @NotNull\n+    private String subject;\n+\n+    @NotNull\n+    private String template;\n+\n+    public Notification() {\n+        events = new ArrayList<String>();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public NodeCond getAbout() {\n+        NodeCond result = XmlSerializer.<NodeCond>deserialize(xmlAbout);\n+        if (result == null) {\n+            result = new NodeCond();\n+        }\n+        return result;\n+    }\n+\n+    public void setAbout(NodeCond about) {\n+        if (about == null) {\n+            about = new NodeCond();\n+        }\n+\n+        xmlAbout = XmlSerializer.serialize(about);\n+    }\n+\n+    public NodeCond getRecipients() {\n+        NodeCond result = XmlSerializer.<NodeCond>deserialize(xmlRecipients);\n+        if (result == null) {\n+            result = new NodeCond();\n+        }\n+        return result;\n+    }\n+\n+    public void setRecipients(NodeCond recipients) {\n+        if (recipients == null) {\n+            recipients = new NodeCond();\n+        }\n+\n+        xmlRecipients = XmlSerializer.serialize(recipients);\n+    }\n+\n+    public List<String> getEvents() {\n+        return events;\n+    }\n+\n+    public boolean addEvent(final String event) {\n+        return event != null && !events.contains(event) && events.add(event);\n+    }\n+\n+    public boolean removeEvent(final String event) {\n+        return event != null && events.remove(event);\n+    }\n+\n+    public void setEvents(List<String> events) {\n+        this.events.clear();\n+        if (events != null) {\n+            this.events.addAll(events);\n+        }\n+    }\n+\n+    public String getSender() {\n+        return sender;\n+    }\n+\n+    public void setSender(String sender) {\n+        this.sender = sender;\n+    }\n+\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    public void setSubject(String subject) {\n+        this.subject = subject;\n+    }\n+\n+    public String getTemplate() {\n+        return template;\n+    }\n+\n+    public void setTemplate(String template) {\n+        this.template = template;\n+    }\n+}"},{"sha":"ebdd54104a39aa468438164db9b47f0a8c2cdc53","filename":"core/src/main/java/org/syncope/core/persistence/dao/ConnInstanceDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceDAO.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -27,7 +27,8 @@ public interface ConnInstanceDAO extends DAO {\n \n     List<ExternalResource> findExternalResources(ConnInstance connector);\n \n-    ConnInstance save(ConnInstance connector) throws InvalidEntityException;\n+    ConnInstance save(ConnInstance connector)\n+            throws InvalidEntityException;\n \n     void delete(Long id);\n }"},{"sha":"ef0eacc2c38ed1954fae6e82f323ccc892752c18","filename":"core/src/main/java/org/syncope/core/persistence/dao/NotificationDAO.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationDAO.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.Notification;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+public interface NotificationDAO extends DAO {\n+\n+    Notification find(Long id);\n+\n+    List<Notification> findAll();\n+\n+    Notification save(Notification notification)\n+            throws InvalidEntityException;\n+\n+    void delete(Long id);\n+}"},{"sha":"e4ed2bf32c3d18b2cee4212c73339f124436e37c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/NotificationDAOImpl.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FNotificationDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FNotificationDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FNotificationDAOImpl.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.Notification;\n+import org.syncope.core.persistence.dao.NotificationDAO;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+@Repository\n+public class NotificationDAOImpl extends AbstractDAOImpl\n+        implements NotificationDAO {\n+\n+    @Override\n+    public Notification find(final Long id) {\n+        return entityManager.find(Notification.class, id);\n+    }\n+\n+    @Override\n+    public List<Notification> findAll() {\n+        Query query = entityManager.createQuery(\"SELECT e \"\n+                + \"FROM \" + Notification.class.getSimpleName() + \" e\");\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Notification save(final Notification notification)\n+            throws InvalidEntityException {\n+\n+        return entityManager.merge(notification);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        entityManager.remove(find(id));\n+    }\n+}"},{"sha":"71bd295c352b869a1253cb7dd66c8e24e4fc2d0d","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/NotificationCheck.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationCheck.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = NotificationValidator.class)\n+@Documented\n+public @interface NotificationCheck {\n+\n+    String message() default \"{org.syncope.core.validation.notification}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}\n\\ No newline at end of file"},{"sha":"57f63c4b44a31d11fb8ef3e3df3e6ae3637a7416","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/NotificationValidator.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FNotificationValidator.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.syncope.core.persistence.beans.Notification;\n+import org.syncope.types.EntityViolationType;\n+\n+public class NotificationValidator extends AbstractValidator\n+        implements ConstraintValidator<NotificationCheck, Notification> {\n+\n+    @Override\n+    public void initialize(final NotificationCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(\n+            final Notification value,\n+            final ConstraintValidatorContext context) {\n+\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid = true;\n+\n+        if (value.getEvents().isEmpty()) {\n+            isValid = false;\n+\n+            context.buildConstraintViolationWithTemplate(\"No events\").addNode(\n+                    EntityViolationType.InvalidNotification.toString()).\n+                    addNode(\"events\").addConstraintViolation();\n+        }\n+        if (!value.getAbout().checkValidity()) {\n+            isValid = false;\n+\n+            context.buildConstraintViolationWithTemplate(\n+                    \"Invalid about search condition\").addNode(\n+                    EntityViolationType.InvalidNotification.toString()).\n+                    addNode(\"about\").addConstraintViolation();\n+        }\n+        if (!value.getRecipients().checkValidity()) {\n+            isValid = false;\n+\n+            context.buildConstraintViolationWithTemplate(\n+                    \"Invalid recipients search condition\").addNode(\n+                    EntityViolationType.InvalidNotification.toString()).\n+                    addNode(\"recipients\").addConstraintViolation();\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"bf73b60f9ef82f575ffb0090ad10a7d01ed06599","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchemaMappingValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaMappingValidator.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -38,7 +38,7 @@ public boolean isValid(\n                 && !object.isAccountid()\n                 && !object.isPassword()) {\n             context.buildConstraintViolationWithTemplate(\n-                    \"Missing destination attribute name\").addNode(\n+                    \"Missing external attribute name\").addNode(\n                     EntityViolationType.InvalidSchemaMapping.toString()).\n                     addConstraintViolation();\n \n@@ -53,7 +53,7 @@ public boolean isValid(\n                 && IntMappingType.Username\n                 != object.getIntMappingType()) {\n             context.buildConstraintViolationWithTemplate(\n-                    \"Missing source attribute name\").addNode(\n+                    \"Missing internal attribute name\").addNode(\n                     EntityViolationType.InvalidSchemaMapping.toString()).\n                     addConstraintViolation();\n "},{"sha":"5f9df86bee1180f6a50cb975d6b56542d6af500b","filename":"core/src/main/java/org/syncope/core/rest/controller/NotificationController.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javassist.NotFoundException;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.syncope.client.to.NotificationTO;\n+import org.syncope.core.persistence.beans.Notification;\n+import org.syncope.core.persistence.dao.NotificationDAO;\n+import org.syncope.core.rest.data.NotificationDataBinder;\n+\n+@Controller\n+@RequestMapping(\"/notification\")\n+public class NotificationController extends AbstractController {\n+\n+    @Autowired\n+    private NotificationDAO notificationDAO;\n+\n+    @Autowired\n+    private NotificationDataBinder binder;\n+\n+    @PreAuthorize(\"hasRole('NOTIFICATION_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{notificationId}\")\n+    public NotificationTO read(\n+            @PathVariable(\"notificationId\") Long notificationId)\n+            throws NotFoundException {\n+\n+        Notification notification = notificationDAO.find(notificationId);\n+        if (notification == null) {\n+            LOG.error(\"Could not find notification '\" + notificationId + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(notificationId));\n+        }\n+\n+        return binder.getNotificationTO(notification);\n+    }\n+\n+    @PreAuthorize(\"hasRole('NOTIFICATION_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    public List<NotificationTO> list()\n+            throws NotFoundException {\n+\n+        List<Notification> notifications = notificationDAO.findAll();\n+\n+        List<NotificationTO> notificationTOs =\n+                new ArrayList<NotificationTO>();\n+        for (Notification notification : notifications) {\n+            notificationTOs.add(binder.getNotificationTO(notification));\n+        }\n+\n+        return notificationTOs;\n+    }\n+\n+    @PreAuthorize(\"hasRole('NOTIFICATION_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create\")\n+    public NotificationTO create(final HttpServletResponse response,\n+            @RequestBody final NotificationTO notificationTO)\n+            throws NotFoundException {\n+\n+        LOG.debug(\"Notification create called with parameter {}\",\n+                notificationTO);\n+\n+        Notification notification = binder.createNotification(notificationTO);\n+        notification = notificationDAO.save(notification);\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return binder.getNotificationTO(notification);\n+    }\n+\n+    @PreAuthorize(\"hasRole('NOTIFICATION_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/update\")\n+    public NotificationTO update(\n+            @RequestBody final NotificationTO notificationTO)\n+            throws NotFoundException {\n+\n+        LOG.debug(\"ConnNotificationtor update called with parameter {}\",\n+                notificationTO);\n+\n+        Notification notification =\n+                notificationDAO.find(notificationTO.getId());\n+        if (notification == null) {\n+            LOG.error(\"Could not find notification '\"\n+                    + notificationTO.getId() + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(notificationTO.getId()));\n+        }\n+\n+        binder.updateNotification(notification, notificationTO);\n+        notification = notificationDAO.save(notification);\n+\n+        return binder.getNotificationTO(notification);\n+    }\n+\n+    @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{notificationId}\")\n+    public void delete(\n+            @PathVariable(\"notificationId\") final Long notificationId)\n+            throws NotFoundException {\n+\n+        Notification notification = notificationDAO.find(notificationId);\n+        if (notification == null) {\n+            LOG.error(\"Could not find notificatin '\" + notificationId + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(notificationId));\n+        }\n+\n+        notificationDAO.delete(notificationId);\n+    }\n+}"},{"sha":"47fd25f35c7035179aba7e42febfe2f9d3dd14ff","filename":"core/src/main/java/org/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -18,8 +18,6 @@\n import javassist.NotFoundException;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n@@ -37,13 +35,7 @@\n @Component\n public class ConnInstanceDataBinder {\n \n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            ConnInstanceDataBinder.class);\n-\n-    private static final String[] ignoreProperties = {\n+    private static final String[] IGNORE_PROPERTIES = {\n         \"id\", \"resources\", \"syncToken\"};\n \n     @Autowired\n@@ -84,7 +76,7 @@ public ConnInstance getConnInstance(\n         ConnInstance connectorInstance = new ConnInstance();\n \n         BeanUtils.copyProperties(\n-                connectorInstanceTO, connectorInstance, ignoreProperties);\n+                connectorInstanceTO, connectorInstance, IGNORE_PROPERTIES);\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n@@ -180,7 +172,7 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n                 connInstance.getConnectorName());\n \n         BeanUtils.copyProperties(\n-                connInstance, connInstanceTO, ignoreProperties);\n+                connInstance, connInstanceTO, IGNORE_PROPERTIES);\n \n         connInstanceTO.setSyncToken(\n                 connInstance.getSerializedSyncToken());"},{"sha":"6cdf3b275a0f0818daefc8cf7fa04807a7fbeb28","filename":"core/src/main/java/org/syncope/core/rest/data/NotificationDataBinder.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FNotificationDataBinder.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.NotificationTO;\n+import org.syncope.core.persistence.beans.Notification;\n+\n+@Component\n+public class NotificationDataBinder {\n+\n+    private static final String[] IGNORE_PROPERTIES = {\n+        \"id\", \"about\", \"recipients\"};\n+\n+    public NotificationTO getNotificationTO(final Notification notification) {\n+        NotificationTO result = new NotificationTO();\n+\n+        BeanUtils.copyProperties(notification, result, IGNORE_PROPERTIES);\n+\n+        result.setId(notification.getId());\n+        result.setAbout(notification.getAbout());\n+        result.setRecipients(notification.getRecipients());\n+\n+        return result;\n+    }\n+\n+    public Notification createNotification(\n+            final NotificationTO notificationTO) {\n+\n+        Notification result = new Notification();\n+\n+        updateNotification(result, notificationTO);\n+\n+        return result;\n+    }\n+\n+    public void updateNotification(final Notification notification,\n+            final NotificationTO notificationTO) {\n+\n+        BeanUtils.copyProperties(notificationTO, notification,\n+                IGNORE_PROPERTIES);\n+\n+        notification.setAbout(notificationTO.getAbout());\n+        notification.setRecipients(notificationTO.getRecipients());\n+    }\n+}"},{"sha":"f4da8475035e8184e7522648efcce5a9b29080bd","filename":"core/src/main/resources/content.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -90,5 +90,10 @@\n     <Entitlement name=\"WORKFLOW_FORM_READ\"/>\n     <Entitlement name=\"WORKFLOW_FORM_CLAIM\"/>\n     <Entitlement name=\"WORKFLOW_FORM_SUBMIT\"/>\n-\n+    <Entitlement name=\"NOTIFICATION_LIST\"/>\n+    <Entitlement name=\"NOTIFICATION_CREATE\"/>\n+    <Entitlement name=\"NOTIFICATION_READ\"/>\n+    <Entitlement name=\"NOTIFICATION_UPDATE\"/>\n+    <Entitlement name=\"NOTIFICATION_DELETE\"/>\n+    \n </dataset>"},{"sha":"b66af232e67fd9b17421aa372ca47ffe07e04e4c","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -36,7 +36,7 @@ public final void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n         // 53 real entitlements + 9 role entitlements\n         assertEquals(\"did not get expected number of entitlements \",\n-                62, list.size());\n+                67, list.size());\n     }\n \n     @Test"},{"sha":"e10f1cdc49fdd6d4c37ef2b5a51b88e354735a5c","filename":"core/src/test/java/org/syncope/core/persistence/dao/NotificationTest.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FNotificationTest.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,128 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.MembershipCond;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.core.AbstractTest;\n+import org.syncope.core.persistence.beans.Notification;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.types.EntityViolationType;\n+\n+@Transactional\n+public class NotificationTest extends AbstractTest {\n+\n+    @Autowired\n+    private NotificationDAO notificationDAO;\n+\n+    @Test\n+    public void find() {\n+        Notification notification = notificationDAO.find(1L);\n+        assertNotNull(notification);\n+        assertNotNull(notification.getEvents());\n+        assertFalse(notification.getEvents().isEmpty());\n+        assertNotNull(notification.getAbout());\n+        assertTrue(notification.getAbout().checkValidity());\n+        assertNotNull(notification.getRecipients());\n+        assertTrue(notification.getRecipients().checkValidity());\n+    }\n+\n+    @Test\n+    public final void findAll() {\n+        List<Notification> notifications = notificationDAO.findAll();\n+        assertNotNull(notifications);\n+        assertFalse(notifications.isEmpty());\n+    }\n+\n+    @Test\n+    public void save() {\n+        Notification notification = new Notification();\n+        notification.addEvent(\"save\");\n+\n+        AttributeCond fullnameLeafCond1 =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond1.setSchema(\"fullname\");\n+        fullnameLeafCond1.setExpression(\"%o%\");\n+        AttributeCond fullnameLeafCond2 =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond2.setSchema(\"fullname\");\n+        fullnameLeafCond2.setExpression(\"%i%\");\n+        NodeCond about = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(fullnameLeafCond1),\n+                NodeCond.getLeafCond(fullnameLeafCond2));\n+\n+        notification.setAbout(about);\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setRoleId(7L);\n+        NodeCond recipients = NodeCond.getLeafCond(membCond);\n+\n+        notification.setRecipients(recipients);\n+\n+        notification.setSender(\"syncope@syncope-idm.org\");\n+        notification.setSubject(\"Test notification\");\n+        notification.setTemplate(\"test\");\n+\n+        Notification actual = notificationDAO.save(notification);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getId());\n+    }\n+\n+    @Test\n+    public void saveWithException() {\n+        Notification notification = new Notification();\n+        notification.addEvent(\"saveWithException\");\n+\n+        MembershipCond membCond = new MembershipCond();\n+        NodeCond about = NodeCond.getLeafCond(membCond);\n+\n+        notification.setAbout(about);\n+\n+        NodeCond recipients = NodeCond.getLeafCond(membCond);\n+\n+        notification.setRecipients(recipients);\n+\n+        notification.setSender(\"syncope@syncope-idm.org\");\n+        notification.setSubject(\"Test notification\");\n+        notification.setTemplate(\"test\");\n+\n+\n+        Map<Class, Set<EntityViolationType>> violations;\n+        try {\n+            notificationDAO.save(notification);\n+            violations = null;\n+        } catch (InvalidEntityException e) {\n+            violations = e.getViolations();\n+        }\n+\n+        assertNotNull(violations);\n+        assertEquals(1, violations.size());\n+        assertFalse(violations.get(Notification.class).isEmpty());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        notificationDAO.delete(1L);\n+        assertNull(notificationDAO.find(1L));\n+    }\n+}"},{"sha":"a674a7b02635cd7bd7cd2e43c621666e39ced0e7","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -127,8 +127,7 @@ public void create() {\n         connectorTO.addCapability(ConnectorCapability.SYNC_CREATE);\n         connectorTO.addCapability(ConnectorCapability.ASYNC_UPDATE);\n \n-        ConnInstanceTO actual =\n-                (ConnInstanceTO) restTemplate.postForObject(\n+        ConnInstanceTO actual = restTemplate.postForObject(\n                 BASE_URL + \"connector/create.json\",\n                 connectorTO, ConnInstanceTO.class);\n "},{"sha":"d376d25cab9c9798502794b03705a6b68f7a167a","filename":"core/src/test/java/org/syncope/core/rest/NotificationTestITCase.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -0,0 +1,139 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.MembershipCond;\n+import org.syncope.client.search.NodeCond;\n+import org.syncope.client.to.NotificationTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+public class NotificationTestITCase extends AbstractTest {\n+\n+    @Test\n+    public void read() {\n+        NotificationTO notificationTO = restTemplate.getForObject(\n+                BASE_URL + \"notification/read/{notificationId}.json\",\n+                NotificationTO.class, \"1\");\n+\n+        assertNotNull(notificationTO);\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<NotificationTO> notificationTOs = Arrays.asList(\n+                restTemplate.getForObject(\n+                BASE_URL + \"notification/list.json\", NotificationTO[].class));\n+        assertNotNull(notificationTOs);\n+        assertFalse(notificationTOs.isEmpty());\n+        for (NotificationTO instance : notificationTOs) {\n+            assertNotNull(instance);\n+        }\n+    }\n+\n+    @Test\n+    public void create() {\n+        NotificationTO notificationTO = new NotificationTO();\n+        notificationTO.addEvent(\"create\");\n+\n+        AttributeCond fullnameLeafCond1 =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond1.setSchema(\"fullname\");\n+        fullnameLeafCond1.setExpression(\"%o%\");\n+        AttributeCond fullnameLeafCond2 =\n+                new AttributeCond(AttributeCond.Type.LIKE);\n+        fullnameLeafCond2.setSchema(\"fullname\");\n+        fullnameLeafCond2.setExpression(\"%i%\");\n+        NodeCond about = NodeCond.getAndCond(\n+                NodeCond.getLeafCond(fullnameLeafCond1),\n+                NodeCond.getLeafCond(fullnameLeafCond2));\n+\n+        notificationTO.setAbout(about);\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setRoleId(7L);\n+        NodeCond recipients = NodeCond.getLeafCond(membCond);\n+\n+        notificationTO.setRecipients(recipients);\n+\n+        notificationTO.setSender(\"syncope@syncope-idm.org\");\n+        notificationTO.setSubject(\"Test notification\");\n+        notificationTO.setTemplate(\"test\");\n+\n+        NotificationTO actual = restTemplate.postForObject(\n+                BASE_URL + \"notification/create.json\",\n+                notificationTO, NotificationTO.class);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getId());\n+        notificationTO.setId(actual.getId());\n+        assertEquals(actual, notificationTO);\n+    }\n+\n+    @Test\n+    public void update() {\n+        NotificationTO notificationTO = restTemplate.getForObject(\n+                BASE_URL + \"notification/read/{notificationId}.json\",\n+                NotificationTO.class, \"1\");\n+        assertNotNull(notificationTO);\n+\n+        notificationTO.setRecipients(\n+                NodeCond.getLeafCond(new MembershipCond()));\n+\n+        SyncopeClientException exception = null;\n+        try {\n+            restTemplate.postForObject(\n+                    BASE_URL + \"notification/update.json\",\n+                    notificationTO, NotificationTO.class);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            exception = e.getException(\n+                    SyncopeClientExceptionType.InvalidNotification);\n+        }\n+        assertNotNull(exception);\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setRoleId(7L);\n+        NodeCond recipients = NodeCond.getLeafCond(membCond);\n+\n+        notificationTO.setRecipients(recipients);\n+\n+        NotificationTO actual = restTemplate.postForObject(\n+                BASE_URL + \"notification/update.json\",\n+                notificationTO, NotificationTO.class);\n+        assertNotNull(actual);\n+        assertEquals(actual, notificationTO);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        restTemplate.delete(\n+                BASE_URL + \"notification/delete/{notificationId}.json\", \"2\");\n+\n+        SyncopeClientException exception = null;\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"notification/read/{notificationId}.json\",\n+                    NotificationTO.class, \"2\");\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            exception = e.getException(SyncopeClientExceptionType.NotFound);\n+        }\n+        assertNotNull(exception);\n+    }\n+}"},{"sha":"02f387a0fd4380ecfd02dd6216e1a34224da9368","filename":"core/src/test/resources/content.xml","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5c05746ce9613cdbbe32d402dbc7052ceae51470/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=5c05746ce9613cdbbe32d402dbc7052ceae51470","patch":"@@ -469,6 +469,11 @@\n     <Entitlement name=\"WORKFLOW_FORM_READ\"/>\n     <Entitlement name=\"WORKFLOW_FORM_CLAIM\"/>\n     <Entitlement name=\"WORKFLOW_FORM_SUBMIT\"/>\n+    <Entitlement name=\"NOTIFICATION_LIST\"/>\n+    <Entitlement name=\"NOTIFICATION_CREATE\"/>\n+    <Entitlement name=\"NOTIFICATION_READ\"/>\n+    <Entitlement name=\"NOTIFICATION_UPDATE\"/>\n+    <Entitlement name=\"NOTIFICATION_DELETE\"/>\n     <Entitlement name=\"ROLE_1\"/>\n     <Entitlement name=\"ROLE_2\"/>\n     <Entitlement name=\"ROLE_3\"/>\n@@ -494,4 +499,15 @@\n     <SyncopeRole_Entitlement entitlements_name=\"SCHEMA_READ\" roles_id=\"8\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"ROLE_LIST\" roles_id=\"8\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"WORKFLOW_FORM_CLAIM\" roles_id=\"8\"/>\n+    \n+    <Notification id=\"1\" sender=\"test@syncope-idm.org\" subject=\"Test subject\" template=\"test\"\n+                  xmlAbout=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++%3Cvoid+property%3D%22leftNodeCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++++%3Cvoid+property%3D%22attributeCond%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.client.search.AttributeCond%22%3E+%0A++++++%3Cvoid+property%3D%22expression%22%3E+%0A+++++++%3Cstring%3E%25o%25%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++++%3Cstring%3Efullname%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cobject+id%3D%22AttributeCond%24Type0%22+class%3D%22org.syncope.client.search.AttributeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++++++%3Cstring%3ELIKE%3C%2Fstring%3E+%0A+++++++%3C%2Fobject%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22type%22%3E+%0A+++++%3Cobject+id%3D%22NodeCond%24Type0%22+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++++%3Cstring%3ELEAF%3C%2Fstring%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22rightNodeCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++++%3Cvoid+property%3D%22attributeCond%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.client.search.AttributeCond%22%3E+%0A++++++%3Cvoid+property%3D%22expression%22%3E+%0A+++++++%3Cstring%3E%25i%25%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++++%3Cstring%3Efullname%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cobject+idref%3D%22AttributeCond%24Type0%22%2F%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22type%22%3E+%0A+++++%3Cobject+idref%3D%22NodeCond%24Type0%22%2F%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22type%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++%3Cstring%3EAND%3C%2Fstring%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++%3Cvoid+property%3D%22leftNodeCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++++%3Cvoid+property%3D%22attributeCond%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.client.search.AttributeCond%22%3E+%0A++++++%3Cvoid+property%3D%22expression%22%3E+%0A+++++++%3Cstring%3E%25o%25%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++++%3Cstring%3Efullname%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cobject+id%3D%22AttributeCond%24Type0%22+class%3D%22org.syncope.client.search.AttributeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++++++%3Cstring%3ELIKE%3C%2Fstring%3E+%0A+++++++%3C%2Fobject%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22type%22%3E+%0A+++++%3Cobject+id%3D%22NodeCond%24Type0%22+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++++%3Cstring%3ELEAF%3C%2Fstring%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22rightNodeCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++++%3Cvoid+property%3D%22attributeCond%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.client.search.AttributeCond%22%3E+%0A++++++%3Cvoid+property%3D%22expression%22%3E+%0A+++++++%3Cstring%3E%25i%25%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++++%3Cstring%3Efullname%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cobject+idref%3D%22AttributeCond%24Type0%22%2F%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22type%22%3E+%0A+++++%3Cobject+idref%3D%22NodeCond%24Type0%22%2F%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22type%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++%3Cstring%3EAND%3C%2Fstring%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"\n+                  xmlRecipients=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++%3Cvoid+property%3D%22membershipCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.MembershipCond%22%3E+%0A++++%3Cvoid+property%3D%22roleId%22%3E+%0A+++++%3Clong%3E7%3C%2Flong%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22type%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++%3Cstring%3ELEAF%3C%2Fstring%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+    <Notification id=\"2\" sender=\"test@syncope-idm.org\" subject=\"Test subject\" template=\"test\"\n+                  xmlAbout=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++%3Cvoid+property%3D%22leftNodeCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++++%3Cvoid+property%3D%22attributeCond%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.client.search.AttributeCond%22%3E+%0A++++++%3Cvoid+property%3D%22expression%22%3E+%0A+++++++%3Cstring%3E%25o%25%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++++%3Cstring%3Efullname%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cobject+id%3D%22AttributeCond%24Type0%22+class%3D%22org.syncope.client.search.AttributeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++++++%3Cstring%3ELIKE%3C%2Fstring%3E+%0A+++++++%3C%2Fobject%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22type%22%3E+%0A+++++%3Cobject+id%3D%22NodeCond%24Type0%22+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++++%3Cstring%3ELEAF%3C%2Fstring%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22rightNodeCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++++%3Cvoid+property%3D%22attributeCond%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.client.search.AttributeCond%22%3E+%0A++++++%3Cvoid+property%3D%22expression%22%3E+%0A+++++++%3Cstring%3E%25i%25%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++++%3Cstring%3Efullname%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cobject+idref%3D%22AttributeCond%24Type0%22%2F%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22type%22%3E+%0A+++++%3Cobject+idref%3D%22NodeCond%24Type0%22%2F%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22type%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++%3Cstring%3EAND%3C%2Fstring%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++%3Cvoid+property%3D%22leftNodeCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++++%3Cvoid+property%3D%22attributeCond%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.client.search.AttributeCond%22%3E+%0A++++++%3Cvoid+property%3D%22expression%22%3E+%0A+++++++%3Cstring%3E%25o%25%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++++%3Cstring%3Efullname%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cobject+id%3D%22AttributeCond%24Type0%22+class%3D%22org.syncope.client.search.AttributeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++++++%3Cstring%3ELIKE%3C%2Fstring%3E+%0A+++++++%3C%2Fobject%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22type%22%3E+%0A+++++%3Cobject+id%3D%22NodeCond%24Type0%22+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++++%3Cstring%3ELEAF%3C%2Fstring%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22rightNodeCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++++%3Cvoid+property%3D%22attributeCond%22%3E+%0A+++++%3Cobject+class%3D%22org.syncope.client.search.AttributeCond%22%3E+%0A++++++%3Cvoid+property%3D%22expression%22%3E+%0A+++++++%3Cstring%3E%25i%25%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22schema%22%3E+%0A+++++++%3Cstring%3Efullname%3C%2Fstring%3E+%0A++++++%3C%2Fvoid%3E+%0A++++++%3Cvoid+property%3D%22type%22%3E+%0A+++++++%3Cobject+idref%3D%22AttributeCond%24Type0%22%2F%3E+%0A++++++%3C%2Fvoid%3E+%0A+++++%3C%2Fobject%3E+%0A++++%3C%2Fvoid%3E+%0A++++%3Cvoid+property%3D%22type%22%3E+%0A+++++%3Cobject+idref%3D%22NodeCond%24Type0%22%2F%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22type%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++%3Cstring%3EAND%3C%2Fstring%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"\n+                  xmlRecipients=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.client.search.NodeCond%22%3E+%0A++%3Cvoid+property%3D%22membershipCond%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.MembershipCond%22%3E+%0A++++%3Cvoid+property%3D%22roleId%22%3E+%0A+++++%3Clong%3E7%3C%2Flong%3E+%0A++++%3C%2Fvoid%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A++%3Cvoid+property%3D%22type%22%3E+%0A+++%3Cobject+class%3D%22org.syncope.client.search.NodeCond%24Type%22+method%3D%22valueOf%22%3E+%0A++++%3Cstring%3ELEAF%3C%2Fstring%3E+%0A+++%3C%2Fobject%3E+%0A++%3C%2Fvoid%3E+%0A+%3C%2Fobject%3E+%0A%3C%2Fjava%3E+%0A\"/>\n+    <Notification_events Notification_id=\"1\" events=\"unexisting1\"/>\n+    <Notification_events Notification_id=\"1\" events=\"unexisting2\"/>\n+    <Notification_events Notification_id=\"2\" events=\"unexisting1\"/>\n+    <Notification_events Notification_id=\"2\" events=\"unexisting2\"/>\n </dataset>"}]}