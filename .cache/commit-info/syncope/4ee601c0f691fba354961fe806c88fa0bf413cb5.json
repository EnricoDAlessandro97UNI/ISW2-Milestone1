{"sha":"4ee601c0f691fba354961fe806c88fa0bf413cb5","node_id":"C_kwDOJfYA1toAKDRlZTYwMWMwZjY5MWZiYTM1NDk2MWZlODA2Yzg4ZmEwYmY0MTNjYjU","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2023-02-21T12:06:05Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-02-21T12:16:23Z"},"message":"[SYNCOPE-1731] Revisiting ManyToMany association between JPAAnyType and JPAAnyTypeClass (#412)","tree":{"sha":"5ce23b62437702410cf57442596eddfb543b119d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5ce23b62437702410cf57442596eddfb543b119d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4ee601c0f691fba354961fe806c88fa0bf413cb5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ee601c0f691fba354961fe806c88fa0bf413cb5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4ee601c0f691fba354961fe806c88fa0bf413cb5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4ee601c0f691fba354961fe806c88fa0bf413cb5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0007f555c1b2843b203094587b11d89cb0713421","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0007f555c1b2843b203094587b11d89cb0713421","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0007f555c1b2843b203094587b11d89cb0713421"}],"stats":{"total":67,"additions":22,"deletions":45},"files":[{"sha":"3cff9d31d81fa38fa21eeecb4d8a03a528a51ce1","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":9,"deletions":22,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=4ee601c0f691fba354961fe806c88fa0bf413cb5","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.reflect.Method;\n import java.util.List;\n+import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -58,12 +59,8 @@ public AnyTypeLogic(\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_READ + \"')\")\n     @Transactional(readOnly = true)\n     public AnyTypeTO read(final String key) {\n-        AnyType anyType = anyTypeDAO.find(key);\n-        if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + key + '\\'');\n-\n-            throw new NotFoundException(key);\n-        }\n+        AnyType anyType = Optional.ofNullable(anyTypeDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(\"AnyType \" + key));\n \n         return binder.getAnyTypeTO(anyType);\n     }\n@@ -89,27 +86,18 @@ public AnyTypeTO create(final AnyTypeTO anyTypeTO) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_UPDATE + \"')\")\n-    public AnyTypeTO update(final AnyTypeTO anyTypeTO) {\n-        AnyType anyType = anyTypeDAO.find(anyTypeTO.getKey());\n-        if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + '\\'');\n-\n-            throw new NotFoundException(anyTypeTO.getKey());\n-        }\n+    public void update(final AnyTypeTO anyTypeTO) {\n+        AnyType anyType = Optional.ofNullable(anyTypeDAO.find(anyTypeTO.getKey())).\n+                orElseThrow(() -> new NotFoundException(\"AnyType \" + anyTypeTO.getKey()));\n \n         binder.update(anyType, anyTypeTO);\n-\n-        return binder.getAnyTypeTO(anyTypeDAO.save(anyType));\n+        anyTypeDAO.save(anyType);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANYTYPE_DELETE + \"')\")\n     public AnyTypeTO delete(final String key) {\n-        AnyType anyType = anyTypeDAO.find(key);\n-        if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + key + '\\'');\n-\n-            throw new NotFoundException(key);\n-        }\n+        AnyType anyType = Optional.ofNullable(anyTypeDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(\"AnyType \" + key));\n \n         Integer anyObjects = anyObjectDAO.countByType().get(anyType);\n         if (anyObjects != null && anyObjects > 0) {\n@@ -156,5 +144,4 @@ protected AnyTypeTO resolveReference(final Method method, final Object... args)\n \n         throw new UnresolvedReferenceException();\n     }\n-\n }"},{"sha":"deaa087b76a88f67d7120347d65423b8295ed906","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyType.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyType.java?ref=4ee601c0f691fba354961fe806c88fa0bf413cb5","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n public interface AnyType extends ProvidedKeyEntity {\n@@ -29,5 +29,5 @@ public interface AnyType extends ProvidedKeyEntity {\n \n     boolean add(AnyTypeClass anyTypeClass);\n \n-    List<? extends AnyTypeClass> getClasses();\n+    Set<? extends AnyTypeClass> getClasses();\n }"},{"sha":"47b204804036ce086b0ed351f0ae35ede8bcbcf2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyType.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java?ref=4ee601c0f691fba354961fe806c88fa0bf413cb5","patch":"@@ -22,15 +22,13 @@\n import jakarta.persistence.Entity;\n import jakarta.persistence.EnumType;\n import jakarta.persistence.Enumerated;\n-import jakarta.persistence.FetchType;\n import jakarta.persistence.JoinColumn;\n import jakarta.persistence.JoinTable;\n import jakarta.persistence.ManyToMany;\n import jakarta.persistence.Table;\n-import jakarta.persistence.UniqueConstraint;\n import jakarta.validation.constraints.NotNull;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -50,14 +48,12 @@ public class JPAAnyType extends AbstractProvidedKeyEntity implements AnyType {\n     @Enumerated(EnumType.STRING)\n     private AnyTypeKind kind;\n \n-    @ManyToMany(fetch = FetchType.EAGER)\n+    @ManyToMany\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"anyType_id\", referencedColumnName = \"id\"),\n             inverseJoinColumns =\n-            @JoinColumn(name = \"anyTypeClass_id\", referencedColumnName = \"id\"),\n-            uniqueConstraints =\n-            @UniqueConstraint(columnNames = { \"anyType_id\", \"anyTypeClass_id\" }))\n-    private List<JPAAnyTypeClass> classes = new ArrayList<>();\n+            @JoinColumn(name = \"anyTypeClass_id\", referencedColumnName = \"id\"))\n+    private Set<JPAAnyTypeClass> classes = new HashSet<>();\n \n     @Override\n     public AnyTypeKind getKind() {\n@@ -72,11 +68,11 @@ public void setKind(final AnyTypeKind kind) {\n     @Override\n     public boolean add(final AnyTypeClass anyTypeClass) {\n         checkType(anyTypeClass, JPAAnyTypeClass.class);\n-        return classes.contains((JPAAnyTypeClass) anyTypeClass) || this.classes.add((JPAAnyTypeClass) anyTypeClass);\n+        return classes.add((JPAAnyTypeClass) anyTypeClass);\n     }\n \n     @Override\n-    public List<? extends AnyTypeClass> getClasses() {\n+    public Set<? extends AnyTypeClass> getClasses() {\n         return classes;\n     }\n }"},{"sha":"4e20bb2536f2cfca3cc6112a21b29e1574524c45","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java?ref=4ee601c0f691fba354961fe806c88fa0bf413cb5","patch":"@@ -21,7 +21,6 @@\n import jakarta.persistence.Cacheable;\n import jakarta.persistence.Entity;\n import jakarta.persistence.FetchType;\n-import jakarta.persistence.ManyToMany;\n import jakarta.persistence.OneToMany;\n import jakarta.persistence.Table;\n import java.util.ArrayList;\n@@ -40,9 +39,6 @@ public class JPAAnyTypeClass extends AbstractProvidedKeyEntity implements AnyTyp\n \n     public static final String TABLE = \"AnyTypeClass\";\n \n-    @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"classes\")\n-    private List<JPAAnyType> types = new ArrayList<>();\n-\n     @OneToMany(fetch = FetchType.EAGER, mappedBy = \"anyTypeClass\")\n     private List<JPAPlainSchema> plainSchemas = new ArrayList<>();\n \n@@ -84,5 +80,4 @@ public boolean add(final VirSchema schema) {\n     public List<? extends VirSchema> getVirSchemas() {\n         return virSchemas;\n     }\n-\n }"},{"sha":"54db91e11e0980c911f29e58076cb01e33c28998","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4ee601c0f691fba354961fe806c88fa0bf413cb5/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=4ee601c0f691fba354961fe806c88fa0bf413cb5","patch":"@@ -90,8 +90,7 @@ public AnyType create(final AnyTypeTO anyTypeTO) {\n                         new TypeReference<Set<SyncopeGrantedAuthority>>() {\n                 }));\n \n-                added.forEach(entitlement -> authorities.add(\n-                        new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)));\n+                added.forEach(e -> authorities.add(new SyncopeGrantedAuthority(e, SyncopeConstants.ROOT_REALM)));\n \n                 accessToken.setAuthorities(ENCRYPTOR.encode(\n                         POJOHelper.serialize(authorities), CipherAlgorithm.AES).\n@@ -120,15 +119,15 @@ public void update(final AnyType anyType, final AnyTypeTO anyTypeTO) {\n             throw sce;\n         }\n \n-        anyType.getClasses().clear();\n         anyTypeTO.getClasses().forEach(anyTypeClassName -> {\n             AnyTypeClass anyTypeClass = anyTypeClassDAO.find(anyTypeClassName);\n             if (anyTypeClass == null) {\n-                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", anyTypeClassName);\n+                LOG.debug(\"Invalid {} {}, ignoring...\", AnyTypeClass.class.getSimpleName(), anyTypeClassName);\n             } else {\n                 anyType.add(anyTypeClass);\n             }\n         });\n+        anyType.getClasses().removeIf(c -> c == null || !anyTypeTO.getClasses().contains(c.getKey()));\n     }\n \n     @Override\n@@ -137,7 +136,7 @@ public AnyTypeTO delete(final AnyType anyType) {\n \n         anyTypeDAO.delete(anyType.getKey());\n \n-        final Set<String> removed = EntitlementsHolder.getInstance().removeFor(deleted.getKey());\n+        Set<String> removed = EntitlementsHolder.getInstance().removeFor(deleted.getKey());\n \n         if (!securityProperties.getAdminUser().equals(AuthContextUtils.getUsername())) {\n             AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());"}]}