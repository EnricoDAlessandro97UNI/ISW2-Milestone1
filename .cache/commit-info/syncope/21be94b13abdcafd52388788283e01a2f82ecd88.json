{"sha":"21be94b13abdcafd52388788283e01a2f82ecd88","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIxYmU5NGIxM2FiZGNhZmQ1MjM4ODc4ODI4M2UwMWEyZjgyZWNkODg=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-03T16:47:02Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-03T16:47:02Z"},"message":"[SYNCOPE-259]\nIntroduces LoggerService\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1428465 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"895630c881a25041cd50347201f31e476d0f4a34","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/895630c881a25041cd50347201f31e476d0f4a34"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/21be94b13abdcafd52388788283e01a2f82ecd88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21be94b13abdcafd52388788283e01a2f82ecd88","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/21be94b13abdcafd52388788283e01a2f82ecd88","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/21be94b13abdcafd52388788283e01a2f82ecd88/comments","author":null,"committer":null,"parents":[{"sha":"629f58e6c78e2cecef4ed798f4552960cf83a759","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/629f58e6c78e2cecef4ed798f4552960cf83a759","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/629f58e6c78e2cecef4ed798f4552960cf83a759"}],"stats":{"total":191,"additions":171,"deletions":20},"files":[{"sha":"473803c0bb77c22b406e31ac9640a3a87abaa412","filename":"client/src/main/java/org/apache/syncope/services/LoggerService.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21be94b13abdcafd52388788283e01a2f82ecd88/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21be94b13abdcafd52388788283e01a2f82ecd88/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java?ref=21be94b13abdcafd52388788283e01a2f82ecd88","patch":"@@ -0,0 +1,72 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.client.to.LoggerTO;\r\n+import org.apache.syncope.types.AuditLoggerName;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+import org.springframework.web.bind.annotation.RequestMethod;\r\n+\r\n+import ch.qos.logback.classic.Level;\r\n+\r\n+@Path(\"logger\")\r\n+public interface LoggerService {\r\n+\r\n+    @GET\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/log/list\")\r\n+    List<LoggerTO> listLogs();\r\n+\r\n+    @GET\r\n+    @Path(\"audit\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/audit/list\")\r\n+    List<AuditLoggerName> listAudits();\r\n+\r\n+    @PUT\r\n+    @Path(\"{name}/level\")\r\n+    @RequestMapping(method = RequestMethod.POST, value = \"/log/{name}/{level}\")\r\n+    LoggerTO setLogLevel(@PathParam(\"name\") final String name, final Level level);\r\n+\r\n+    @DELETE\r\n+    @Path(\"{name}\")\r\n+    @RequestMapping(method = RequestMethod.GET, value = \"/log/delete/{name}\")\r\n+    LoggerTO deleteLog(@PathParam(\"name\") final String name);\r\n+\r\n+    /**\r\n+     * @deprecated Refactoring needed here. Use {@link #setLogLevel(String, Level)} after refactoring is done.\r\n+     */\r\n+    @Deprecated\r\n+    @RequestMapping(method = RequestMethod.PUT, value = \"/audit/enable\")\r\n+    void enableAudit(final AuditLoggerName auditLoggerName);\r\n+\r\n+    /**\r\n+     * @deprecated Refactoring needed here. Use {@link #deleteLog(String)} after refactoring is done.\r\n+     */\r\n+    @Deprecated\r\n+    @RequestMapping(method = RequestMethod.PUT, value = \"/audit/disable\")\r\n+    void disableAudit(final AuditLoggerName auditLoggerName);\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"c20783f513d55068cb044f1a9ecff5b5923ad3dc","filename":"client/src/main/java/org/apache/syncope/services/LoggerServiceProxy.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21be94b13abdcafd52388788283e01a2f82ecd88/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21be94b13abdcafd52388788283e01a2f82ecd88/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerServiceProxy.java?ref=21be94b13abdcafd52388788283e01a2f82ecd88","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.to.LoggerTO;\r\n+import org.apache.syncope.types.AuditLoggerName;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+import ch.qos.logback.classic.Level;\r\n+\r\n+public class LoggerServiceProxy extends SpringServiceProxy implements LoggerService {\r\n+\r\n+    public LoggerServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+        super(baseUrl, restTemplate);\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<LoggerTO> listLogs() {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/log/list\", LoggerTO[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<AuditLoggerName> listAudits() {\r\n+        return Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/audit/list\",\r\n+                AuditLoggerName[].class));\r\n+    }\r\n+\r\n+    @Override\r\n+    public LoggerTO setLogLevel(String name, Level level) {\r\n+        return restTemplate.postForObject(BASE_URL + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n+                level);\r\n+    }\r\n+\r\n+    @Override\r\n+    public LoggerTO deleteLog(String name) {\r\n+        return restTemplate.getForObject(BASE_URL + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void enableAudit(AuditLoggerName auditLoggerName) {\r\n+        restTemplate.put(BASE_URL + \"logger/audit/enable\", auditLoggerName);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void disableAudit(AuditLoggerName auditLoggerName) {\r\n+        restTemplate.put(BASE_URL + \"logger/audit/disable\", auditLoggerName);\r\n+    }\r\n+\r\n+}\r"},{"sha":"529fc71f5cd21cecf0932a94c93e8a8c33765103","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21be94b13abdcafd52388788283e01a2f82ecd88/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21be94b13abdcafd52388788283e01a2f82ecd88/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=21be94b13abdcafd52388788283e01a2f82ecd88","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.services.ConfigurationServiceProxy;\n import org.apache.syncope.services.ConnectorServiceProxy;\n import org.apache.syncope.services.EntitlementServiceProxy;\n+import org.apache.syncope.services.LoggerServiceProxy;\n import org.apache.syncope.services.RoleServiceProxy;\n import org.apache.syncope.services.UserServiceProxy;\n import org.junit.Before;\n@@ -80,11 +81,13 @@ protected static AttributeMod attributeMod(final String schema,\n \tprotected RoleServiceProxy roleService;\n \n \tprotected EntitlementServiceProxy entitlementService;\n-\t\n+\n \tprotected ConfigurationServiceProxy configurationService;\n-\t\n+\n \tprotected ConnectorServiceProxy connectorService;\n \n+\tprotected LoggerServiceProxy loggerService;\n+\n \t@Autowired\n \tprotected DataSource testDataSource;\n \n@@ -110,5 +113,6 @@ public void resetRestTemplate() {\n \t\tentitlementService = new EntitlementServiceProxy(BASE_URL, restTemplate);\n \t\tconfigurationService = new ConfigurationServiceProxy(BASE_URL, restTemplate);\n \t\tconnectorService = new ConnectorServiceProxy(BASE_URL, restTemplate);\n+\t\tloggerService = new LoggerServiceProxy(BASE_URL, restTemplate);\n \t}\n }"},{"sha":"00e8d068f31ec3018d6cdb34c8eef6582e24cfbe","filename":"core/src/test/java/org/apache/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":25,"deletions":18,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/21be94b13abdcafd52388788283e01a2f82ecd88/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/21be94b13abdcafd52388788283e01a2f82ecd88/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=21be94b13abdcafd52388788283e01a2f82ecd88","patch":"@@ -18,25 +18,29 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n-import java.util.Arrays;\n import java.util.List;\n-import org.junit.Test;\n+\n import org.apache.syncope.client.to.LoggerTO;\n import org.apache.syncope.types.AuditElements;\n import org.apache.syncope.types.AuditLoggerName;\n import org.apache.syncope.types.SyncopeLoggerLevel;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n \n+import ch.qos.logback.classic.Level;\n+\n @FixMethodOrder(MethodSorters.JVM)\n public class LoggerTestITCase extends AbstractTest {\n \n     @Test\n     public void listLogs() {\n-        List<LoggerTO> loggers =\n-                Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/log/list\", LoggerTO[].class));\n+        List<LoggerTO> loggers = loggerService.listLogs();\n         assertNotNull(loggers);\n         assertFalse(loggers.isEmpty());\n         for (LoggerTO logger : loggers) {\n@@ -46,8 +50,8 @@ public void listLogs() {\n \n     @Test\n     public void listAudits() {\n-        List<AuditLoggerName> audits =\n-                Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/audit/list\", AuditLoggerName[].class));\n+        List<AuditLoggerName> audits = loggerService.listAudits();\n+\n         assertNotNull(audits);\n         assertFalse(audits.isEmpty());\n         for (AuditLoggerName audit : audits) {\n@@ -57,40 +61,43 @@ public void listAudits() {\n \n     @Test\n     public void setLevel() {\n-        List<LoggerTO> loggers =\n-                Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/log/list\", LoggerTO[].class));\n+        List<LoggerTO> loggers = loggerService.listLogs();\n         assertNotNull(loggers);\n         int startSize = loggers.size();\n \n-        LoggerTO logger = restTemplate.postForObject(BASE_URL + \"logger/log/{name}/{level}\", null, LoggerTO.class,\n-                \"TEST\", \"INFO\");\n+        LoggerTO logger = loggerService.setLogLevel(\"TEST\", Level.INFO);\n         assertNotNull(logger);\n         assertEquals(SyncopeLoggerLevel.INFO, logger.getLevel());\n \n-        loggers = Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/log/list\", LoggerTO[].class));\n+        loggers = loggerService.listLogs();\n         assertNotNull(loggers);\n         assertEquals(startSize + 1, loggers.size());\n+\n+        // TEST Delete\n+        loggerService.deleteLog(\"TEST\");\n+        loggers = loggerService.listLogs();\n+        assertNotNull(loggers);\n+        assertEquals(startSize, loggers.size());\n     }\n \n     @Test\n     public void enableDisableAudit() {\n         AuditLoggerName auditLoggerName = new AuditLoggerName(AuditElements.Category.report,\n                 AuditElements.ReportSubCategory.listExecutions, AuditElements.Result.failure);\n \n-        List<AuditLoggerName> audits =\n-                Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/audit/list\", AuditLoggerName[].class));\n+        List<AuditLoggerName> audits = loggerService.listAudits();\n         assertNotNull(audits);\n         assertFalse(audits.contains(auditLoggerName));\n \n-        restTemplate.put(BASE_URL + \"logger/audit/enable\", auditLoggerName);\n+        loggerService.enableAudit(auditLoggerName);\n \n-        audits = Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/audit/list\", AuditLoggerName[].class));\n+        audits = loggerService.listAudits();\n         assertNotNull(audits);\n         assertTrue(audits.contains(auditLoggerName));\n \n-        restTemplate.put(BASE_URL + \"logger/audit/disable\", auditLoggerName);\n+        loggerService.disableAudit(auditLoggerName);\n \n-        audits = Arrays.asList(restTemplate.getForObject(BASE_URL + \"logger/audit/list\", AuditLoggerName[].class));\n+        audits = loggerService.listAudits();\n         assertNotNull(audits);\n         assertFalse(audits.contains(auditLoggerName));\n     }"}]}