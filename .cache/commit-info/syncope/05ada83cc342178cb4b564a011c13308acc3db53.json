{"sha":"05ada83cc342178cb4b564a011c13308acc3db53","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA1YWRhODNjYzM0MjE3OGNiNGI1NjRhMDExYzEzMzA4YWNjM2RiNTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-17T06:53:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-17T06:54:05Z"},"message":"[SYNCOPE-1143] Some fixes and refinements","tree":{"sha":"d161f3c180c1a1609d0c2f6fa849aec253e1f14c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d161f3c180c1a1609d0c2f6fa849aec253e1f14c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/05ada83cc342178cb4b564a011c13308acc3db53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/05ada83cc342178cb4b564a011c13308acc3db53","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/05ada83cc342178cb4b564a011c13308acc3db53","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/05ada83cc342178cb4b564a011c13308acc3db53/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1afd1a7053a2fb5d56b9f9ec4a858909e1957c6c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1afd1a7053a2fb5d56b9f9ec4a858909e1957c6c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1afd1a7053a2fb5d56b9f9ec4a858909e1957c6c"}],"stats":{"total":391,"additions":257,"deletions":134},"files":[{"sha":"8098e20dcc790dc6e0a5f38543a84f73d0495837","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.client.cli.commands;\n \n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.syncope.client.cli.Command;\n import org.apache.syncope.client.cli.view.Messages;\n import org.apache.syncope.client.cli.view.Table;\n@@ -73,7 +73,7 @@ public String commandHelpMessage(final Class<?> name) {\n         return Messages.commandHelpMessage(name.getAnnotation(Command.class).name());\n     }\n \n-    protected void printConfiguration(final Set<ConnConfProperty> configurationPropertys) {\n+    protected void printConfiguration(final Collection<ConnConfProperty> configurationPropertys) {\n         for (final ConnConfProperty configuration : configurationPropertys) {\n             System.out.println(\"       name: \" + configuration.getSchema().getName());\n             System.out.println(\"       values: \" + configuration.getValues());"},{"sha":"69d2c58785f946e0ecd52c16a30df5c677c89cf3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/connector/ConnectorResultManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.cli.commands.connector;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -91,7 +92,7 @@ private void printConfPropSchema(final List<ConnConfPropSchema> connConfPropSche\n         }\n     }\n \n-    public void printConfigurationProperties(final Set<ConnConfProperty> connConfPropertys) {\n+    public void printConfigurationProperties(final Collection<ConnConfProperty> connConfPropertys) {\n         printConfiguration(connConfPropertys);\n \n     }"},{"sha":"836c12b4aa11a5658741ac46ae2dd272567717b6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnInstanceHistoryConfDirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnInstanceHistoryConfDirectoryPanel.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -65,18 +65,19 @@ public abstract class ConnInstanceHistoryConfDirectoryPanel extends DirectoryPan\n \n     private final String entityKey;\n \n-    protected ConnInstanceHistoryConfDirectoryPanel(\n+    public ConnInstanceHistoryConfDirectoryPanel(\n             final BaseModal<?> baseModal,\n             final MultilevelPanel multiLevelPanelRef,\n             final String entityKey,\n             final PageReference pageRef) {\n \n-        super(MultilevelPanel.FIRST_LEVEL_ID, pageRef, false);\n+        super(MultilevelPanel.FIRST_LEVEL_ID, pageRef, false, false);\n \n         this.baseModal = baseModal;\n         this.multiLevelPanelRef = multiLevelPanelRef;\n         restClient = new ConnectorHistoryRestClient();\n         setShowResultPage(false);\n+        disableCheckBoxes();\n \n         this.entityKey = entityKey;\n         initResultTable();"},{"sha":"9bc33d650e2c9a4437c5ef651bc9d92f2d7a8033","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -109,7 +109,7 @@\n \n     /**\n      * Create simple unfiltered search result panel.\n-     * Use the available builder for powerfull configuration options.\n+     * Use the available builder for powerful configuration options.\n      *\n      * @param id panel id.\n      * @param pageRef page reference.\n@@ -119,6 +119,12 @@ public DirectoryPanel(final String id, final PageReference pageRef) {\n     }\n \n     public DirectoryPanel(final String id, final PageReference pageRef, final boolean wizardInModal) {\n+        this(id, pageRef, true, wizardInModal);\n+    }\n+\n+    public DirectoryPanel(\n+            final String id, final PageReference pageRef, final boolean showPaginator, final boolean wizardInModal) {\n+\n         this(id, new Builder<T, W, E>(null, pageRef) {\n \n             private static final long serialVersionUID = -8424727765826509309L;\n@@ -129,6 +135,7 @@ protected WizardMgtPanel<W> newInstance(final String id, final boolean wizardInM\n             }\n         }.setFiltered(false), wizardInModal);\n         setPageRef(pageRef);\n+        this.showPaginator = showPaginator;\n     }\n \n     protected DirectoryPanel(final String id, final Builder<T, W, E> builder) {\n@@ -202,14 +209,13 @@ protected void initResultTable() {\n         // ---------------------------\n         // Rows-per-page selector\n         // ---------------------------\n-        final Form<?> paginatorForm = new Form<>(\"paginator\");\n+        Form<?> paginatorForm = new Form<>(\"paginator\");\n         paginatorForm.setOutputMarkupPlaceholderTag(true);\n         paginatorForm.setVisible(showPaginator);\n         container.add(paginatorForm);\n \n-        final DropDownChoice<Integer> rowsChooser = new DropDownChoice<>(\n+        DropDownChoice<Integer> rowsChooser = new DropDownChoice<>(\n                 \"rowsChooser\", new PropertyModel<Integer>(this, \"rows\"), prefMan.getPaginatorChoices());\n-\n         rowsChooser.add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n \n             private static final long serialVersionUID = -1107858522700306810L;\n@@ -218,7 +224,7 @@ protected void initResultTable() {\n             protected void onUpdate(final AjaxRequestTarget target) {\n                 prefMan.set(getRequest(), getResponse(), paginatorRowsKey(), String.valueOf(rows));\n \n-                final EventDataWrapper data = new EventDataWrapper();\n+                EventDataWrapper data = new EventDataWrapper();\n                 data.setTarget(target);\n                 data.setRows(rows);\n "},{"sha":"00d95b3e11625843dc711fb50b7fd7837ff6b5dc","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/HistoryConfDetails.java","status":"modified","additions":18,"deletions":20,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -21,7 +21,7 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -150,25 +150,23 @@ private Pair<String, String> getJSONInfo(final T historyConfTO) {\n         return Pair.of(key, json);\n     }\n \n-    private Map<String, String> getDropdownNamesMap(final List<T> historyConfTOs) {\n-        Map<String, String> historyConfMap = new HashMap<>();\n-        if (selectedHistoryConfTO instanceof ConnInstanceHistoryConfTO) {\n-            for (T historyConfValue : historyConfTOs) {\n-                ConnInstanceHistoryConfTO historyConf = ConnInstanceHistoryConfTO.class.cast(historyConfValue);\n-                historyConfMap.put(historyConf.getKey(),\n-                        historyConf.getCreation() != null ? historyConf.getCreator() + \" - \" + SyncopeConsoleSession.\n-                        get().getDateFormat().format(\n-                                historyConf.getCreation()) + \" - \" + historyConf.getKey() : getString(\"current\"));\n-            }\n-        } else if (selectedHistoryConfTO instanceof ResourceHistoryConfTO) {\n-            for (T historyConfValue : historyConfTOs) {\n-                ResourceHistoryConfTO historyConf = ResourceHistoryConfTO.class.cast(historyConfValue);\n-                historyConfMap.put(historyConf.getKey(),\n-                        historyConf.getCreation() != null ? historyConf.getCreator() + \" - \" + SyncopeConsoleSession.\n-                        get().getDateFormat().format(\n-                                historyConf.getCreation()) + \" - \" + historyConf.getKey() : getString(\"current\"));\n+    private <T extends AbstractHistoryConf> Map<String, String> getDropdownNamesMap(final List<T> historyConfTOs) {\n+        Map<String, String> historyConfMap = new LinkedHashMap<>();\n+\n+        String current = null;\n+        for (T historyConf : historyConfTOs) {\n+            if (historyConf.getCreation() == null) {\n+                current = historyConf.getKey();\n+            } else {\n+                historyConfMap.put(historyConf.getKey(), historyConf.getCreator() + \" - \"\n+                        + SyncopeConsoleSession.get().getDateFormat().format(\n+                                historyConf.getCreation()) + \" - \" + historyConf.getKey());\n             }\n         }\n+        if (current != null) {\n+            historyConfMap.put(current, getString(\"current\"));\n+        }\n+\n         return historyConfMap;\n     }\n \n@@ -250,10 +248,10 @@ private void addCurrentInstanceConf() {\n             conf = (T) new ConnInstanceHistoryConfTO();\n             ((ConnInstanceHistoryConfTO) conf).setConnInstanceTO(current);\n         } else if (selectedHistoryConfTO instanceof ResourceHistoryConfTO) {\n-            ResourceTO currentRes = new ResourceRestClient().read(\n+            ResourceTO current = new ResourceRestClient().read(\n                     ResourceHistoryConfTO.class.cast(selectedHistoryConfTO).getResourceTO().getKey());\n             conf = (T) new ResourceHistoryConfTO();\n-            ((ResourceHistoryConfTO) conf).setResourceTO(currentRes);\n+            ((ResourceHistoryConfTO) conf).setResourceTO(current);\n         }\n \n         if (conf != null) {"},{"sha":"d212d9dd5e54189d38dac1ddc6be58f6dcdaddd1","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceHistoryConfDirectoryPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceHistoryConfDirectoryPanel.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -68,18 +68,19 @@ public abstract class ResourceHistoryConfDirectoryPanel extends DirectoryPanel<\n \n     private final String entityKey;\n \n-    protected ResourceHistoryConfDirectoryPanel(\n+    public ResourceHistoryConfDirectoryPanel(\n             final BaseModal<?> baseModal,\n             final MultilevelPanel multiLevelPanelRef,\n             final String entityKey,\n             final PageReference pageRef) {\n \n-        super(MultilevelPanel.FIRST_LEVEL_ID, pageRef, false);\n+        super(MultilevelPanel.FIRST_LEVEL_ID, pageRef, false, false);\n \n         this.baseModal = baseModal;\n         this.multiLevelPanelRef = multiLevelPanelRef;\n         restClient = new ResourceHistoryRestClient();\n         setShowResultPage(false);\n+        disableCheckBoxes();\n \n         this.entityKey = entityKey;\n         initResultTable();"},{"sha":"ceb51be4fdafa5d0474f7216cb375f8e498b0ff3","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":27,"deletions":7,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -127,20 +127,40 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                if (selectedResource != null && SyncopeConsoleSession.get().owns(StandardEntitlement.CONNECTOR_READ)) {\n-                    extAttrName.setChoices(getExtAttrNames());\n-                    target.add(extAttrName);\n+                if (selectedResource != null) {\n+                    String adminRealm = getAdminRealm(selectedResource.getKey());\n+\n+                    if (SyncopeConsoleSession.get().owns(StandardEntitlement.CONNECTOR_READ, adminRealm)) {\n+                        extAttrName.setChoices(getExtAttrNames());\n+                        target.add(extAttrName);\n+                    }\n                 }\n             }\n         });\n     }\n \n+    private String getAdminRealm(final String connectorKey) {\n+        String adminRealm = null;\n+        try {\n+            adminRealm = new ConnectorRestClient().read(connectorKey).getAdminRealm();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not read Admin Realm for External Resource {}\", selectedResource.getKey());\n+        }\n+\n+        return adminRealm;\n+    }\n+\n     private void populateAnyTypes(final String resourceKey) {\n         anyTypes.clear();\n-        if (resourceKey != null && SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_READ)) {\n-            selectedResource = resourceRestClient.read(resourceKey);\n-            for (ProvisionTO provisionTO : selectedResource.getProvisions()) {\n-                anyTypes.put(provisionTO.getAnyType(), provisionTO.getObjectClass());\n+        if (resourceKey != null) {\n+            ResourceTO resource = resourceRestClient.read(resourceKey);\n+            String adminRealm = getAdminRealm(resource.getConnector());\n+\n+            if (SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_READ, adminRealm)) {\n+                selectedResource = resource;\n+                for (ProvisionTO provisionTO : selectedResource.getProvisions()) {\n+                    anyTypes.put(provisionTO.getAnyType(), provisionTO.getObjectClass());\n+                }\n             }\n         }\n     }"},{"sha":"5f1d41bc2301f146a0e521abee79de57e559d1aa","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -19,10 +19,9 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n@@ -56,7 +55,7 @@ public List<ConnInstanceTO> getAllConnectors() {\n     }\n \n     public ConnInstanceTO create(final ConnInstanceTO connectorTO) {\n-        Set<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConf());\n+        List<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConf());\n         connectorTO.getConf().clear();\n         connectorTO.getConf().addAll(filteredConf);\n \n@@ -86,7 +85,7 @@ public String transform(final ConnIdObjectClassTO input) {\n     }\n \n     public List<String> getExtAttrNames(\n-            final String objectClass, final String connectorKey, final Set<ConnConfProperty> conf) {\n+            final String objectClass, final String connectorKey, final Collection<ConnConfProperty> conf) {\n \n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setKey(connectorKey);\n@@ -125,7 +124,7 @@ public ConnInstanceTO read(final String key) {\n     }\n \n     public void update(final ConnInstanceTO connectorTO) {\n-        Set<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConf());\n+        List<ConnConfProperty> filteredConf = filterProperties(connectorTO.getConf());\n         connectorTO.getConf().clear();\n         connectorTO.getConf().addAll(filteredConf);\n         getService(ConnectorService.class).update(connectorTO);\n@@ -150,8 +149,8 @@ public List<ConnBundleTO> getAllBundles() {\n         return bundles;\n     }\n \n-    private Set<ConnConfProperty> filterProperties(final Set<ConnConfProperty> properties) {\n-        Set<ConnConfProperty> newProperties = new HashSet<>();\n+    private List<ConnConfProperty> filterProperties(final Collection<ConnConfProperty> properties) {\n+        List<ConnConfProperty> newProperties = new ArrayList<>();\n \n         for (ConnConfProperty property : properties) {\n             ConnConfProperty prop = new ConnConfProperty();"},{"sha":"d3b6903fa5731db03deb52f81663a5c041621172","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -92,14 +92,20 @@ public ResourceTO read(final String name) {\n     }\n \n     public List<ResourceTO> list() {\n-        List<ResourceTO> resources = getService(ResourceService.class).list();\n-        Collections.sort(resources, new Comparator<ResourceTO>() {\n-\n-            @Override\n-            public int compare(final ResourceTO o1, final ResourceTO o2) {\n-                return ComparatorUtils.<String>naturalComparator().compare(o1.getKey(), o2.getKey());\n-            }\n-        });\n+        List<ResourceTO> resources = Collections.emptyList();\n+        try {\n+            resources = getService(ResourceService.class).list();\n+            Collections.sort(resources, new Comparator<ResourceTO>() {\n+\n+                @Override\n+                public int compare(final ResourceTO o1, final ResourceTO o2) {\n+                    return ComparatorUtils.<String>naturalComparator().compare(o1.getKey(), o2.getKey());\n+                }\n+            });\n+        } catch (Exception e) {\n+            LOG.error(\"Could not fetch the Resource list\", e);\n+        }\n+\n         return resources;\n     }\n "},{"sha":"071da87f0ce5f9cb28ee692802ccb78e399477c8","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -409,7 +409,7 @@ protected void populateItem(final ListItem<String> item) {\n                 final ListView<TopologyNode> innerListView = new ListView<TopologyNode>(\"resources\",\n                         new ArrayList<>(connections.get(connectorKey).values())) {\n \n-                    private static final long serialVersionUID = 1L;\n+                    private static final long serialVersionUID = -3447760771863754342L;\n \n                     private final int size = getModelObject().size() + 1;\n \n@@ -505,7 +505,7 @@ protected void onTimer(final AjaxRequestTarget target) {\n \n         newlyCreated = new ListView<TopologyNode>(\"newlyCreated\", new ArrayList<TopologyNode>()) {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 4949588177564901031L;\n \n             @Override\n             protected void populateItem(final ListItem<TopologyNode> item) {\n@@ -542,7 +542,7 @@ private TopologyNodePanel topologyNodePanel(final String id, final TopologyNode\n \n         behaviors.add(new Behavior() {\n \n-            private static final long serialVersionUID = 1L;\n+            private static final long serialVersionUID = 2661717818979056044L;\n \n             @Override\n             public void renderHead(final Component component, final IHeaderResponse response) {"},{"sha":"8ffa39ac541228c6c25f5c5651ada3e7fa70b9e9","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":27,"deletions":15,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -106,9 +106,7 @@ protected void onConfigure() {\n \n         provisionModal = new BaseModal<>(\"outer\");\n         provisionModal.size(Modal.Size.Large);\n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_UPDATE)) {\n-            provisionModal.addSubmitButton();\n-        }\n+        provisionModal.addSubmitButton();\n         addOuterObject(provisionModal);\n \n         historyModal = new BaseModal<>(\"outer\");\n@@ -304,19 +302,20 @@ public String getAjaxIndicatorMarkupId() {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                final ConnInstanceTO modelObject = connectorRestClient.read(String.class.cast(node.getKey()));\n+                ConnInstanceTO connInstance = connectorRestClient.read(String.class.cast(node.getKey()));\n \n-                final IModel<ConnInstanceTO> model = new CompoundPropertyModel<>(modelObject);\n+                final IModel<ConnInstanceTO> model = new CompoundPropertyModel<>(connInstance);\n                 modal.setFormModel(model);\n \n-                target.add(modal.setContent(new ConnectorWizardBuilder(modelObject, pageRef).\n+                target.add(modal.setContent(new ConnectorWizardBuilder(connInstance, pageRef).\n                         build(BaseModal.CONTENT_ID,\n-                                SyncopeConsoleSession.get().owns(StandardEntitlement.CONNECTOR_UPDATE)\n+                                SyncopeConsoleSession.get().\n+                                        owns(StandardEntitlement.CONNECTOR_UPDATE, connInstance.getAdminRealm())\n                                 ? AjaxWizard.Mode.EDIT\n                                 : AjaxWizard.Mode.READONLY)));\n \n                 modal.header(\n-                        new Model<>(MessageFormat.format(getString(\"connector.edit\"), modelObject.getDisplayName())));\n+                        new Model<>(MessageFormat.format(getString(\"connector.edit\"), connInstance.getDisplayName())));\n                 modal.show(true);\n             }\n \n@@ -336,9 +335,10 @@ public String getAjaxIndicatorMarkupId() {\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 String connKey = String.class.cast(node.getKey());\n-                final ConnInstanceTO modelObject = connectorRestClient.read(String.class.cast(node.getKey()));\n+                ConnInstanceTO connInstance = connectorRestClient.read(connKey);\n \n-                target.add(historyModal.setContent(new HistoryConfList<>(historyModal, connKey, pageRef, modelObject)));\n+                target.add(historyModal.setContent(\n+                        new HistoryConfList<>(historyModal, connKey, pageRef, connInstance)));\n \n                 historyModal.header(\n                         new Model<>(MessageFormat.format(getString(\"connector.menu.history\"), node.getDisplayName())));\n@@ -389,14 +389,16 @@ public void onClick(final AjaxRequestTarget target) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n-                ResourceTO modelObject = resourceRestClient.read(node.getKey());\n+                ResourceTO resource = resourceRestClient.read(node.getKey());\n+                ConnInstanceTO connInstance = connectorRestClient.read(resource.getConnector());\n \n-                IModel<ResourceTO> model = new CompoundPropertyModel<>(modelObject);\n+                IModel<ResourceTO> model = new CompoundPropertyModel<>(resource);\n                 modal.setFormModel(model);\n \n-                target.add(modal.setContent(new ResourceWizardBuilder(modelObject, pageRef).\n+                target.add(modal.setContent(new ResourceWizardBuilder(resource, pageRef).\n                         build(BaseModal.CONTENT_ID,\n-                                SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_UPDATE)\n+                                SyncopeConsoleSession.get().\n+                                        owns(StandardEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())\n                                 ? AjaxWizard.Mode.EDIT\n                                 : AjaxWizard.Mode.READONLY)));\n \n@@ -443,11 +445,21 @@ public String getAjaxIndicatorMarkupId() {\n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 ResourceTO resource = resourceRestClient.read(node.getKey());\n+                ConnInstanceTO connInstance = connectorRestClient.read(resource.getConnector());\n+\n+                if (SyncopeConsoleSession.get().\n+                        owns(StandardEntitlement.RESOURCE_UPDATE, connInstance.getAdminRealm())) {\n+\n+                    provisionModal.addSubmitButton();\n+                } else {\n+                    provisionModal.removeSubmitButton();\n+                }\n \n                 IModel<ResourceTO> model = new CompoundPropertyModel<>(resource);\n                 provisionModal.setFormModel(model);\n \n-                target.add(provisionModal.setContent(new ResourceProvisionPanel(provisionModal, resource, pageRef)));\n+                target.add(provisionModal.setContent(\n+                        new ResourceProvisionPanel(provisionModal, resource, connInstance.getAdminRealm(), pageRef)));\n \n                 provisionModal.header(new Model<>(MessageFormat.format(getString(\"resource.edit\"), node.getKey())));\n                 provisionModal.show(true);"},{"sha":"968cb57ab53e22bc325b9508b2473e8a3dd4fab8","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/bootstrap/dialog/BaseModal.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -24,6 +24,8 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.panels.ModalPanel;\n import org.apache.syncope.client.console.panels.NotificationPanel;\n@@ -223,6 +225,22 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n         return submit;\n     }\n \n+    public void removeSubmitButton() {\n+        if (!(BaseModal.this.getContent() instanceof SubmitableModalPanel)) {\n+            throw new IllegalStateException();\n+        }\n+\n+        CollectionUtils.filterInverse(this.components, new Predicate<Component>() {\n+\n+            @Override\n+            public boolean evaluate(final Component component) {\n+                return SUBMIT.equals(component.getId());\n+            }\n+        });\n+\n+        submitButton = null;\n+    }\n+\n     @Override\n     protected void onInitialize() {\n         super.onInitialize();"},{"sha":"a5e397a29b719c22c0fb89be8082ce8ec49cb44b","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceConnConfPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -24,7 +24,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -49,7 +48,7 @@ public ResourceConnConfPanel(final ResourceTO resourceTO, final boolean createFl\n \n             @Override\n             protected List<ConnConfProperty> load() {\n-                final List<ConnConfProperty> confOverride = getConnProperties(resourceTO);\n+                List<ConnConfProperty> confOverride = getConnProperties(resourceTO);\n                 resourceTO.getConfOverride().clear();\n                 resourceTO.getConfOverride().addAll(confOverride);\n \n@@ -59,7 +58,7 @@ protected List<ConnConfProperty> load() {\n \n                     @Override\n                     public List<ConnConfProperty> getObject() {\n-                        final List<ConnConfProperty> res = new ArrayList<>((Set<ConnConfProperty>) super.getObject());\n+                        List<ConnConfProperty> res = new ArrayList<>(super.getObject());\n \n                         // re-order properties\n                         Collections.sort(res, new Comparator<ConnConfProperty>() {"},{"sha":"be206663144953d842147e71fdb713c8bf0d741f","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -79,6 +79,7 @@ public class ResourceProvisionPanel extends AbstractModalPanel<Serializable> {\n     public ResourceProvisionPanel(\n             final BaseModal<Serializable> modal,\n             final ResourceTO resourceTO,\n+            final String adminRealm,\n             final PageReference pageRef) {\n \n         super(modal, pageRef);\n@@ -125,7 +126,7 @@ protected void customActionOnCancelCallback(final AjaxRequestTarget target) {\n \n             @Override\n             protected void customActionOnFinishCallback(final AjaxRequestTarget target) {\n-                checkAddButton();\n+                checkAddButton(adminRealm);\n \n                 // keep list ordered - SYNCOPE-1154\n                 sortProvisions();\n@@ -217,15 +218,15 @@ public void onClick(final AjaxRequestTarget target, final ResourceProvision prov\n                             resourceTO.getProvisions().remove(provision.getProvisionTO());\n                         }\n                         provisions.remove(provision);\n-                        checkAddButton();\n+                        checkAddButton(adminRealm);\n                         send(ResourceProvisionPanel.this, Broadcast.DEPTH, new ListViewReload<>(target));\n                     }\n                 }, ActionLink.ActionType.DELETE, StandardEntitlement.RESOURCE_UPDATE, true);\n \n         builder.addNewItemPanelBuilder(wizard);\n \n         list = builder.build(\"provision\");\n-        list.setReadOnly(!SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_UPDATE));\n+        list.setReadOnly(!SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_UPDATE, adminRealm));\n \n         addAjaxLink = new AjaxLink<ResourceProvision>(\"add\") {\n \n@@ -261,7 +262,7 @@ protected void onSubmit(final String type, final AjaxRequestTarget target) {\n             }\n \n         };\n-        checkAddButton();\n+        checkAddButton(adminRealm);\n         add(objectTypeTogglePanel);\n     }\n \n@@ -346,9 +347,9 @@ public boolean evaluate(final String key) {\n         };\n     }\n \n-    private void checkAddButton() {\n+    private void checkAddButton(final String adminRealm) {\n         boolean enabled =\n-                SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_UPDATE)\n+                SyncopeConsoleSession.get().owns(StandardEntitlement.RESOURCE_UPDATE, adminRealm)\n                 && !getAnyTypes().getObject().isEmpty();\n         addAjaxLink.setVisible(enabled);\n         objectTypeTogglePanel.setEnabled(enabled);"},{"sha":"23fb590bc331b2c548c7d1a554f263427977c6bb","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConnInstanceTO.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FConnInstanceTO.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -20,8 +20,9 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n import java.util.EnumSet;\n-import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n@@ -52,7 +53,7 @@ public class ConnInstanceTO extends AbstractBaseBean implements EntityTO {\n \n     private String version;\n \n-    private final Set<ConnConfProperty> conf = new HashSet<>();\n+    private final List<ConnConfProperty> conf = new ArrayList<>();\n \n     private final Set<ConnectorCapability> capabilities = EnumSet.noneOf(ConnectorCapability.class);\n \n@@ -116,7 +117,7 @@ public void setVersion(final String version) {\n     @XmlElementWrapper(name = \"conf\")\n     @XmlElement(name = \"property\")\n     @JsonProperty(\"conf\")\n-    public Set<ConnConfProperty> getConf() {\n+    public List<ConnConfProperty> getConf() {\n         return this.conf;\n     }\n "},{"sha":"4bc9c0dd7ab980f004fff67cac8b7bd0ea3cff1e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ResourceTO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FResourceTO.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -22,7 +22,6 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.EnumSet;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.PathParam;\n@@ -79,7 +78,7 @@ public class ResourceTO extends AbstractBaseBean implements EntityTO {\n \n     private String pullPolicy;\n \n-    private final Set<ConnConfProperty> confOverride = new HashSet<>();\n+    private final List<ConnConfProperty> confOverride = new ArrayList<>();\n \n     private boolean overrideCapabilities = false;\n \n@@ -215,7 +214,7 @@ public void setOrgUnit(final OrgUnitTO orgUnit) {\n     @XmlElementWrapper(name = \"confOverride\")\n     @XmlElement(name = \"property\")\n     @JsonProperty(\"confOverride\")\n-    public Set<ConnConfProperty> getConfOverride() {\n+    public List<ConnConfProperty> getConfOverride() {\n         return confOverride;\n     }\n "},{"sha":"1958dc646b380c7e84270010aa912d402f40c8b4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ConnConfPropSchema.java","status":"modified","additions":42,"deletions":2,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FConnConfPropSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FConnConfPropSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FConnConfPropSchema.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n@@ -117,7 +118,46 @@ public int compareTo(final ConnConfPropSchema other) {\n         return this.getOrder() > other.getOrder()\n                 ? 1\n                 : this.getOrder() < other.getOrder()\n-                        ? -1\n-                        : 0;\n+                ? -1\n+                : 0;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 5;\n+        hash = 53 * hash + Objects.hashCode(this.name);\n+        hash = 53 * hash + Objects.hashCode(this.type);\n+        hash = 53 * hash + (this.required ? 1 : 0);\n+        hash = 53 * hash + this.order;\n+        hash = 53 * hash + (this.confidential ? 1 : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final ConnConfPropSchema other = (ConnConfPropSchema) obj;\n+        if (this.required != other.required) {\n+            return false;\n+        }\n+        if (this.order != other.order) {\n+            return false;\n+        }\n+        if (this.confidential != other.confidential) {\n+            return false;\n+        }\n+        if (!Objects.equals(this.name, other.name)) {\n+            return false;\n+        }\n+        return Objects.equals(this.type, other.type);\n+    }\n+\n }"},{"sha":"1825d083286a1818553a6ec85cda943ef16d3495","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorHistoryService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorHistoryService.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.lib.to.ConnInstanceHistoryConfTO;\n \n /**\n- * REST operations for connector instance configuration versioning.\n+ * REST operations for connector configuration versioning.\n  */\n @Path(\"connectorsHistory\")\n public interface ConnectorHistoryService extends JAXRSService {\n@@ -48,7 +48,7 @@ public interface ConnectorHistoryService extends JAXRSService {\n \n     /**\n      * Restores the connector configuration history instance matching the provided key.\n-     * \n+     *\n      * @param key connector configuration history instance key to be restored\n      */\n     @POST"},{"sha":"258ea314fe2b2392bbedd27a876202933e83cd64","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/ConnInstance.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FConnInstance.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -60,7 +61,7 @@ public interface ConnInstance extends Entity {\n \n     List<? extends ExternalResource> getResources();\n \n-    void setConf(Set<ConnConfProperty> conf);\n+    void setConf(Collection<ConnConfProperty> conf);\n \n     Set<ConnConfProperty> getConf();\n "},{"sha":"fb5b88e712e10c7d4972eae0acff2080c9af0d8f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -191,7 +192,7 @@ public Set<ConnConfProperty> getConf() {\n     }\n \n     @Override\n-    public void setConf(final Set<ConnConfProperty> conf) {\n+    public void setConf(final Collection<ConnConfProperty> conf) {\n         jsonConf = POJOHelper.serialize(new HashSet<>(conf));\n     }\n \n@@ -227,7 +228,7 @@ public Integer getConnRequestTimeout() {\n         // DEFAULT_TIMEOUT will be returned in case of null timeout:\n         // * instances created by the content loader\n         // * or with a timeout nullified explicitely\n-        return connRequestTimeout == null ? Integer.valueOf(DEFAULT_TIMEOUT) : connRequestTimeout;\n+        return connRequestTimeout == null ? DEFAULT_TIMEOUT : connRequestTimeout;\n     }\n \n     @Override"},{"sha":"0b0beb9e4d575a44c252a1086893abbf50961c44","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import java.util.Set;\n+import java.util.Collection;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -41,8 +41,8 @@ public interface ConnectorFactory {\n      */\n     ConnInstance buildConnInstanceOverride(\n             ConnInstance connInstance,\n-            Set<ConnConfProperty> confOverride,\n-            Set<ConnectorCapability> capabilitiesOverride);\n+            Collection<ConnConfProperty> confOverride,\n+            Collection<ConnectorCapability> capabilitiesOverride);\n \n     /**\n      * Create connector from given connector instance."},{"sha":"f3c6e736ed91d8182e02d377270cd3ad6383378c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Locale;\n@@ -80,8 +81,8 @@ public Connector getConnector(final ExternalResource resource) {\n     @Override\n     public ConnInstance buildConnInstanceOverride(\n             final ConnInstance connInstance,\n-            final Set<ConnConfProperty> confOverride,\n-            final Set<ConnectorCapability> capabilitiesOverride) {\n+            final Collection<ConnConfProperty> confOverride,\n+            final Collection<ConnectorCapability> capabilitiesOverride) {\n \n         synchronized (this) {\n             if (entityFactory == null) {"},{"sha":"7dfb721f3c80e7854f8598bae6bd4311961ece24","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":31,"deletions":18,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n@@ -54,7 +55,7 @@\n @Component\n public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = { \"poolConf\", \"location\", \"adminRealm\" };\n+    private static final String[] IGNORE_PROPERTIES = { \"poolConf\", \"location\", \"adminRealm\", \"conf\" };\n \n     @Autowired\n     private ConnIdBundleManager connIdBundleManager;\n@@ -110,6 +111,7 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n         if (connInstanceTO.getLocation() != null) {\n             connInstance.setLocation(connInstanceTO.getLocation());\n         }\n+        connInstance.setConf(connInstanceTO.getConf());\n         if (connInstanceTO.getPoolConf() != null) {\n             connInstance.setPoolConf(\n                     ConnPoolConfUtils.getConnPoolConf(connInstanceTO.getPoolConf(), entityFactory.newConnPoolConf()));\n@@ -130,21 +132,24 @@ public ConnInstance update(final ConnInstanceTO connInstanceTO) {\n             throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n         }\n \n-        // 1. save the current configuration, before update\n-        ConnInstanceHistoryConf connInstanceHistoryConf = entityFactory.newEntity(ConnInstanceHistoryConf.class);\n-        connInstanceHistoryConf.setCreator(AuthContextUtils.getUsername());\n-        connInstanceHistoryConf.setCreation(new Date());\n-        connInstanceHistoryConf.setEntity(connInstance);\n-        connInstanceHistoryConf.setConf(getConnInstanceTO(connInstance));\n-        connInstanceHistoryConfDAO.save(connInstanceHistoryConf);\n-\n-        // 2. ensure the maximum history size is not exceeded\n-        List<ConnInstanceHistoryConf> history = connInstanceHistoryConfDAO.findByEntity(connInstance);\n-        long maxHistorySize = confDAO.find(\"connector.conf.history.size\", 10L);\n-        if (maxHistorySize < history.size()) {\n-            // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n-            for (int i = 0; i < history.size() - maxHistorySize; i++) {\n-                connInstanceHistoryConfDAO.delete(history.get(history.size() - 1).getKey());\n+        ConnInstanceTO current = getConnInstanceTO(connInstance);\n+        if (!current.equals(connInstanceTO)) {\n+            // 1. save the current configuration, before update\n+            ConnInstanceHistoryConf connInstanceHistoryConf = entityFactory.newEntity(ConnInstanceHistoryConf.class);\n+            connInstanceHistoryConf.setCreator(AuthContextUtils.getUsername());\n+            connInstanceHistoryConf.setCreation(new Date());\n+            connInstanceHistoryConf.setEntity(connInstance);\n+            connInstanceHistoryConf.setConf(current);\n+            connInstanceHistoryConfDAO.save(connInstanceHistoryConf);\n+\n+            // 2. ensure the maximum history size is not exceeded\n+            List<ConnInstanceHistoryConf> history = connInstanceHistoryConfDAO.findByEntity(connInstance);\n+            long maxHistorySize = confDAO.find(\"connector.conf.history.size\", 10L);\n+            if (maxHistorySize < history.size()) {\n+                // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n+                for (int i = 0; i < history.size() - maxHistorySize; i++) {\n+                    connInstanceHistoryConfDAO.delete(history.get(history.size() - 1).getKey());\n+                }\n             }\n         }\n \n@@ -241,9 +246,10 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n         connInstanceTO.setAdminRealm(connInstance.getAdminRealm().getFullPath());\n         connInstanceTO.setLocation(info.getLeft().toASCIIString());\n+        connInstanceTO.getConf().addAll(connInstance.getConf());\n         // refresh stored properties in the given connInstance with direct information from underlying connector\n         ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(info.getRight());\n-        for (final String propName : properties.getPropertyNames()) {\n+        for (String propName : properties.getPropertyNames()) {\n             ConnConfPropSchema schema = build(properties.getProperty(propName));\n \n             ConnConfProperty property = connInstanceTO.getConf(propName);\n@@ -253,9 +259,16 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n             }\n             property.setSchema(schema);\n         }\n+        Collections.sort(connInstanceTO.getConf());\n \n         // pool configuration\n-        if (connInstance.getPoolConf() != null) {\n+        if (connInstance.getPoolConf() != null\n+                && (connInstance.getPoolConf().getMaxIdle() != null\n+                || connInstance.getPoolConf().getMaxObjects() != null\n+                || connInstance.getPoolConf().getMaxWait() != null\n+                || connInstance.getPoolConf().getMinEvictableIdleTimeMillis() != null\n+                || connInstance.getPoolConf().getMinIdle() != null)) {\n+\n             ConnPoolConfTO poolConf = new ConnPoolConfTO();\n             BeanUtils.copyProperties(connInstance.getPoolConf(), poolConf);\n             connInstanceTO.setPoolConf(poolConf);"},{"sha":"9f8e75d8a8b61e26dc97e33c95e8bfe7757a53db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":21,"deletions":16,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -116,22 +117,25 @@ public ExternalResource create(final ResourceTO resourceTO) {\n     @Override\n     public ExternalResource update(final ExternalResource resource, final ResourceTO resourceTO) {\n         if (resource.getKey() != null) {\n-            // 1. save the current configuration, before update\n-            ExternalResourceHistoryConf resourceHistoryConf =\n-                    entityFactory.newEntity(ExternalResourceHistoryConf.class);\n-            resourceHistoryConf.setCreator(AuthContextUtils.getUsername());\n-            resourceHistoryConf.setCreation(new Date());\n-            resourceHistoryConf.setEntity(resource);\n-            resourceHistoryConf.setConf(getResourceTO(resource));\n-            resourceHistoryConfDAO.save(resourceHistoryConf);\n-\n-            // 2. ensure the maximum history size is not exceeded\n-            List<ExternalResourceHistoryConf> history = resourceHistoryConfDAO.findByEntity(resource);\n-            long maxHistorySize = confDAO.find(\"resource.conf.history.size\", 10L);\n-            if (maxHistorySize < history.size()) {\n-                // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n-                for (int i = 0; i < history.size() - maxHistorySize; i++) {\n-                    resourceHistoryConfDAO.delete(history.get(history.size() - 1).getKey());\n+            ResourceTO current = getResourceTO(resource);\n+            if (!current.equals(resourceTO)) {\n+                // 1. save the current configuration, before update\n+                ExternalResourceHistoryConf resourceHistoryConf =\n+                        entityFactory.newEntity(ExternalResourceHistoryConf.class);\n+                resourceHistoryConf.setCreator(AuthContextUtils.getUsername());\n+                resourceHistoryConf.setCreation(new Date());\n+                resourceHistoryConf.setEntity(resource);\n+                resourceHistoryConf.setConf(current);\n+                resourceHistoryConfDAO.save(resourceHistoryConf);\n+\n+                // 2. ensure the maximum history size is not exceeded\n+                List<ExternalResourceHistoryConf> history = resourceHistoryConfDAO.findByEntity(resource);\n+                long maxHistorySize = confDAO.find(\"resource.conf.history.size\", 10L);\n+                if (maxHistorySize < history.size()) {\n+                    // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n+                    for (int i = 0; i < history.size() - maxHistorySize; i++) {\n+                        resourceHistoryConfDAO.delete(history.get(history.size() - 1).getKey());\n+                    }\n                 }\n             }\n         }\n@@ -579,6 +583,7 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n                 ? null : resource.getPullPolicy().getKey());\n \n         resourceTO.getConfOverride().addAll(resource.getConfOverride());\n+        Collections.sort(resourceTO.getConfOverride());\n \n         resourceTO.setOverrideCapabilities(resource.isOverrideCapabilities());\n         resourceTO.getCapabilitiesOverride().addAll(resource.getCapabilitiesOverride());"},{"sha":"09a2653660d86626b10871332c5388075845bde6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/05ada83cc342178cb4b564a011c13308acc3db53/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/05ada83cc342178cb4b564a011c13308acc3db53/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=05ada83cc342178cb4b564a011c13308acc3db53","patch":"@@ -319,7 +319,7 @@ public void getBundles() {\n \n     @Test\n     public void getConnectorConfiguration() {\n-        Set<ConnConfProperty> props = connectorService.read(\n+        List<ConnConfProperty> props = connectorService.read(\n                 \"6c2acf1b-b052-46f0-8c56-7a8ad6905edf\", Locale.ENGLISH.getLanguage()).getConf();\n         assertNotNull(props);\n         assertFalse(props.isEmpty());"}]}