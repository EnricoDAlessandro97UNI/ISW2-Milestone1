{"sha":"7eda1690a7a5b22caca1cf727c44a1446e863568","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdlZGExNjkwYTdhNWIyMmNhY2ExY2Y3MjdjNDRhMTQ0NmU4NjM1Njg=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-26T15:45:35Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-26T15:45:35Z"},"message":"[SYNCOPE-392, SYNCOPE-471] provided integration tests for push task with matching and unmatching rules\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1605825 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0da5c13e1cb2a332fe405b77d732d0309cda1d9b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0da5c13e1cb2a332fe405b77d732d0309cda1d9b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7eda1690a7a5b22caca1cf727c44a1446e863568","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7eda1690a7a5b22caca1cf727c44a1446e863568","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7eda1690a7a5b22caca1cf727c44a1446e863568","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7eda1690a7a5b22caca1cf727c44a1446e863568/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"89d17fe981a996b78a52191d2747a45a2973b134","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/89d17fe981a996b78a52191d2747a45a2973b134","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/89d17fe981a996b78a52191d2747a45a2973b134"}],"stats":{"total":504,"additions":355,"deletions":149},"files":[{"sha":"d508a30bca8dcf3dc1609030956e8618deb81f67","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSubjectPushResultHandler.java","status":"modified","additions":145,"deletions":117,"changes":262,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectPushResultHandler.java?ref=7eda1690a7a5b22caca1cf727c44a1446e863568","patch":"@@ -26,7 +26,9 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.common.types.MatchingRule;\n import org.apache.syncope.common.types.ResourceOperation;\n+import org.apache.syncope.common.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.beans.AbstractSubject;\n import org.apache.syncope.core.persistence.beans.PushTask;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -86,16 +88,16 @@ protected final void doHandle(final AbstractSubject subject)\n         }\n \n         final AbstractSubject toBeHandled = getSubject(subject.getId());\n-        \n+\n         final AttributableUtil attrUtil = AttributableUtil.getInstance(toBeHandled);\n \n         final SyncResult result = new SyncResult();\n         profile.getResults().add(result);\n \n         result.setId(toBeHandled.getId());\n         result.setSubjectType(attrUtil.getType());\n-\n         result.setName(getName(toBeHandled));\n+        \n         final Boolean enabled = toBeHandled instanceof SyncopeUser && profile.getSyncTask().isSyncStatus()\n                 ? ((SyncopeUser) toBeHandled).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n                 : null;\n@@ -106,130 +108,156 @@ protected final void doHandle(final AbstractSubject subject)\n         Object output = null;\n         Result resultStatus = null;\n         ConnectorObject beforeObj = null;\n-        Map.Entry<String, Set<Attribute>> values = null;\n-\n         String operation = null;\n \n-        try {\n-            values = MappingUtil.prepareAttributes(\n-                    attrUtil, // attributable util\n-                    toBeHandled, // attributable (user or role)\n-                    null, // current password if decode is possible; generate otherwise\n-                    true, // propagate password (if required)\n-                    null, // no vir attrs to be removed\n-                    null, // propagate current vir attr values\n-                    null, // no membership vir attrs to be removed\n-                    null, // propagate current membership vir attr values\n-                    enabled, // propagate status (suspended or not) if required\n-                    profile.getSyncTask().getResource()); // target external resource\n-\n-            // Try to read remote object (user / group) BEFORE any actual operation\n-            beforeObj = getRemoteObject(values.getKey());\n+        Map.Entry<String, Set<Attribute>> values = MappingUtil.prepareAttributes(\n+                attrUtil, // attributable util\n+                toBeHandled, // attributable (user or role)\n+                null, // current password if decode is possible; generate otherwise\n+                true, // propagate password (if required)\n+                null, // no vir attrs to be removed\n+                null, // propagate current vir attr values\n+                null, // no membership vir attrs to be removed\n+                null, // propagate current membership vir attr values\n+                enabled, // propagate status (suspended or not) if required\n+                profile.getSyncTask().getResource()); // target external resource\n \n+        // Try to read remote object (user / group) BEFORE any actual operation\n+        beforeObj = getRemoteObject(values.getKey());\n+        \n+        if (profile.isDryRun()) {\n             if (beforeObj == null) {\n-                operation = profile.getSyncTask().getUnmatchigRule().name().toLowerCase();\n-                switch (profile.getSyncTask().getUnmatchigRule()) {\n-                    case ASSIGN:\n-                        result.setOperation(ResourceOperation.CREATE);\n-                        for (PushActions action : profile.getActions()) {\n-                            action.beforeAssign(this.getProfile(), values, toBeHandled);\n-                        }\n-                        assign(toBeHandled, enabled, result);\n-                        break;\n-                    case PROVISION:\n-                        result.setOperation(ResourceOperation.CREATE);\n-                        for (PushActions action : profile.getActions()) {\n-                            action.beforeProvision(this.getProfile(), values, toBeHandled);\n-                        }\n-                        provision(toBeHandled, enabled, result);\n-                        break;\n-                    case UNLINK:\n-                        result.setOperation(ResourceOperation.NONE);\n-                        for (PushActions action : profile.getActions()) {\n-                            action.beforeUnlink(this.getProfile(), values, toBeHandled);\n-                        }\n-                        link(toBeHandled, false, result);\n-                        break;\n-                    default:\n-                    // do nothing\n+                result.setOperation(getResourceOperation(profile.getSyncTask().getUnmatchigRule()));\n+            } else {\n+                result.setOperation(getResourceOperation(profile.getSyncTask().getMatchigRule()));\n+            }\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+        } else {\n+            try {\n+                if (beforeObj == null) {\n+                    operation = profile.getSyncTask().getUnmatchigRule().name().toLowerCase();\n+                    result.setOperation(getResourceOperation(profile.getSyncTask().getUnmatchigRule()));\n+\n+                    switch (profile.getSyncTask().getUnmatchigRule()) {\n+                        case ASSIGN:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeAssign(this.getProfile(), values, toBeHandled);\n+                            }\n+                            assign(toBeHandled, enabled, result);\n+                            break;\n+                        case PROVISION:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeProvision(this.getProfile(), values, toBeHandled);\n+                            }\n+                            provision(toBeHandled, enabled, result);\n+                            break;\n+                        case UNLINK:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeUnlink(this.getProfile(), values, toBeHandled);\n+                            }\n+                            link(toBeHandled, true, result);\n+                            break;\n+                        default:\n+                        // do nothing\n+                    }\n+\n+                } else {\n+                    operation = profile.getSyncTask().getMatchigRule().name().toLowerCase();\n+                    result.setOperation(getResourceOperation(profile.getSyncTask().getMatchigRule()));\n+\n+                    switch (profile.getSyncTask().getMatchigRule()) {\n+                        case UPDATE:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeUpdate(this.getProfile(), values, toBeHandled);\n+                            }\n+                            update(toBeHandled, values.getKey(), values.getValue(), beforeObj, result);\n+                            break;\n+                        case DEPROVISION:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeDeprovision(this.getProfile(), values, toBeHandled);\n+                            }\n+                            deprovision(toBeHandled, result);\n+                            break;\n+                        case UNASSIGN:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeUnassign(this.getProfile(), values, toBeHandled);\n+                            }\n+                            unassign(toBeHandled, result);\n+                            break;\n+                        case LINK:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeLink(this.getProfile(), values, toBeHandled);\n+                            }\n+                            link(toBeHandled, false, result);\n+                            break;\n+                        case UNLINK:\n+                            for (PushActions action : profile.getActions()) {\n+                                action.beforeUnlink(this.getProfile(), values, toBeHandled);\n+                            }\n+                            link(toBeHandled, true, result);\n+                            break;\n+                        default:\n+                        // do nothing\n+                    }\n                 }\n \n-            } else {\n-                operation = profile.getSyncTask().getMatchigRule().name().toLowerCase();\n-                switch (profile.getSyncTask().getMatchigRule()) {\n-                    case UPDATE:\n-                        result.setOperation(ResourceOperation.UPDATE);\n-                        for (PushActions action : profile.getActions()) {\n-                            action.beforeUpdate(this.getProfile(), values, toBeHandled);\n-                        }\n-                        update(toBeHandled, values.getKey(), values.getValue(), beforeObj, result);\n-                        break;\n-                    case DEPROVISION:\n-                        result.setOperation(ResourceOperation.DELETE);\n-                        for (PushActions action : profile.getActions()) {\n-                            action.beforeDeprovision(this.getProfile(), values, toBeHandled);\n-                        }\n-                        deprovision(toBeHandled, result);\n-                        break;\n-                    case UNASSIGN:\n-                        result.setOperation(ResourceOperation.DELETE);\n-                        for (PushActions action : profile.getActions()) {\n-                            action.beforeUnassign(this.getProfile(), values, toBeHandled);\n-                        }\n-                        unassign(toBeHandled, result);\n-                        break;\n-                    case LINK:\n-                        result.setOperation(ResourceOperation.NONE);\n-                        for (PushActions action : profile.getActions()) {\n-                            action.beforeLink(this.getProfile(), values, toBeHandled);\n-                        }\n-                        link(toBeHandled, true, result);\n-                        break;\n-                    case UNLINK:\n-                        result.setOperation(ResourceOperation.NONE);\n-                        for (PushActions action : profile.getActions()) {\n-                            action.beforeUnlink(this.getProfile(), values, toBeHandled);\n-                        }\n-                        link(toBeHandled, false, result);\n-                        break;\n-                    default:\n-                    // do nothing\n+                for (PushActions action : profile.getActions()) {\n+                    action.after(this.getProfile(), values, toBeHandled, result);\n                 }\n-            }\n \n-            result.setStatus(SyncResult.Status.SUCCESS);\n-            resultStatus = AuditElements.Result.SUCCESS;\n-            output = getRemoteObject(values.getKey());\n-        } catch (Exception e) {\n-            result.setStatus(SyncResult.Status.FAILURE);\n-            result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-            resultStatus = AuditElements.Result.FAILURE;\n-            output = e;\n-\n-            LOG.warn(\"Error pushing {} towards {}\", toBeHandled, profile.getSyncTask().getResource(), e);\n-            throw new JobExecutionException(e);\n-        } finally {\n-            for (PushActions action : profile.getActions()) {\n-                action.after(this.getProfile(), values, toBeHandled, result);\n+                result.setStatus(SyncResult.Status.SUCCESS);\n+                resultStatus = AuditElements.Result.SUCCESS;\n+                output = getRemoteObject(values.getKey());\n+            } catch (Exception e) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n+                resultStatus = AuditElements.Result.FAILURE;\n+                output = e;\n+\n+                LOG.warn(\"Error pushing {} towards {}\", toBeHandled, profile.getSyncTask().getResource(), e);\n+                throw new JobExecutionException(e);\n+            } finally {\n+                notificationManager.createTasks(\n+                        AuditElements.EventCategoryType.PUSH,\n+                        AttributableType.USER.name().toLowerCase(),\n+                        profile.getSyncTask().getResource().getName(),\n+                        operation,\n+                        resultStatus,\n+                        beforeObj,\n+                        output,\n+                        toBeHandled);\n+                auditManager.audit(\n+                        AuditElements.EventCategoryType.PUSH,\n+                        AttributableType.USER.name().toLowerCase(),\n+                        profile.getSyncTask().getResource().getName(),\n+                        operation,\n+                        resultStatus,\n+                        beforeObj,\n+                        output,\n+                        toBeHandled);\n             }\n-            notificationManager.createTasks(\n-                    AuditElements.EventCategoryType.PUSH,\n-                    AttributableType.USER.name().toLowerCase(),\n-                    profile.getSyncTask().getResource().getName(),\n-                    operation,\n-                    resultStatus,\n-                    beforeObj,\n-                    output,\n-                    toBeHandled);\n-            auditManager.audit(\n-                    AuditElements.EventCategoryType.PUSH,\n-                    AttributableType.USER.name().toLowerCase(),\n-                    profile.getSyncTask().getResource().getName(),\n-                    operation,\n-                    resultStatus,\n-                    beforeObj,\n-                    output,\n-                    toBeHandled);\n+        }\n+    }\n+\n+    private ResourceOperation getResourceOperation(final UnmatchingRule rule) {\n+        switch (rule) {\n+            case ASSIGN:\n+            case PROVISION:\n+                return ResourceOperation.CREATE;\n+            default:\n+                return ResourceOperation.NONE;\n+        }\n+    }\n+\n+    private ResourceOperation getResourceOperation(final MatchingRule rule) {\n+        switch (rule) {\n+            case UPDATE:\n+                return ResourceOperation.UPDATE;\n+            case DEPROVISION:\n+            case UNASSIGN:\n+                return ResourceOperation.DELETE;\n+            default:\n+                return ResourceOperation.NONE;\n         }\n     }\n }"},{"sha":"92a4db19ca673d5a3dc70e2c6853432b3d529c55","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/RolePushResultHandler.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FRolePushResultHandler.java?ref=7eda1690a7a5b22caca1cf727c44a1446e863568","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.sync.impl;\n \n-import static org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler.LOG;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -52,7 +50,6 @@ protected AbstractSubject deprovision(final AbstractSubject sbj, final SyncResul\n \n         taskExecutor.execute(propagationManager.getRoleDeleteTaskIds(before.getId(), noPropResources));\n \n-        result.setId(before.getId());\n         return roleDataBinder.getRoleFromId(before.getId());\n     }\n \n@@ -72,7 +69,6 @@ protected AbstractSubject provision(final AbstractSubject sbj, final Boolean ena\n                 propByRes,\n                 noPropResources));\n \n-        result.setId(before.getId());\n         return roleDataBinder.getRoleFromId(before.getId());\n     }\n \n@@ -91,7 +87,6 @@ protected AbstractSubject link(\n \n         rwfAdapter.update(roleMod);\n \n-        result.setId(sbj.getId());\n         return roleDataBinder.getRoleFromId(sbj.getId());\n     }\n \n@@ -132,7 +127,6 @@ protected AbstractSubject update(\n                 new HashSet<String>(),\n                 connObjectUtil);\n \n-        result.setId(sbj.getId());\n         return userDataBinder.getUserFromId(sbj.getId());\n     }\n "},{"sha":"98a350bc871852e6b5bf60d6adfa1e571cd25668","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/UserPushResultHandler.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FUserPushResultHandler.java?ref=7eda1690a7a5b22caca1cf727c44a1446e863568","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.sync.impl;\n \n-import static org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler.LOG;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -49,9 +48,9 @@ protected AbstractSubject deprovision(final AbstractSubject sbj, final SyncResul\n         final List<String> noPropResources = new ArrayList<String>(before.getResources());\n         noPropResources.remove(profile.getSyncTask().getResource().getName());\n \n-        taskExecutor.execute(propagationManager.getUserDeleteTaskIds(before.getId(), noPropResources));\n+        taskExecutor.execute(propagationManager.getUserDeleteTaskIds(before.getId(),\n+                Collections.singleton(profile.getSyncTask().getResource().getName()), noPropResources));\n \n-        result.setId(before.getId());\n         return userDataBinder.getUserFromId(before.getId());\n     }\n \n@@ -74,7 +73,6 @@ protected AbstractSubject provision(final AbstractSubject sbj, final Boolean ena\n                 Collections.unmodifiableCollection(before.getMemberships()),\n                 noPropResources));\n \n-        result.setId(before.getId());\n         return userDataBinder.getUserFromId(before.getId());\n     }\n \n@@ -93,7 +91,6 @@ protected AbstractSubject link(\n \n         uwfAdapter.update(userMod);\n \n-        result.setId(sbj.getId());\n         return userDataBinder.getUserFromId(sbj.getId());\n     }\n \n@@ -134,7 +131,6 @@ protected AbstractSubject update(\n                 new HashSet<String>(),\n                 connObjectUtil);\n \n-        result.setId(sbj.getId());\n         return userDataBinder.getUserFromId(sbj.getId());\n     }\n \n@@ -168,10 +164,9 @@ protected ConnectorObject getRemoteObject(final String accountId) {\n         ConnectorObject obj = null;\n \n         try {\n-\n             final Uid uid = new Uid(accountId);\n \n-            profile.getConnector().getObject(\n+            obj = profile.getConnector().getObject(\n                     ObjectClass.ACCOUNT,\n                     uid,\n                     profile.getConnector().getOperationOptions(Collections.<AbstractMappingItem>emptySet()));"},{"sha":"ae1b193b666e40630835a69e032038d1d90049fa","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":206,"deletions":17,"changes":223,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=7eda1690a7a5b22caca1cf727c44a1446e863568","patch":"@@ -977,43 +977,232 @@ public void bulkAction() {\n     }\n \n     @Test\n-    public void pushUsers() {\n-        // Read sync task\n+    public void pushUnmatchingUsers() {\n+        // ------------------------------------------\n+        // Matching --> Assign --> dryRuyn\n+        // ------------------------------------------\n+        UserTO userTO = userService.read(3L);\n+        assertEquals(\"Vivaldi\", userTO.getAttrMap().get(\"surname\").getValues().get(0));\n+        assertFalse(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n         PushTaskTO task = taskService.<PushTaskTO>read(13L);\n         assertNotNull(task);\n-\n-        assertEquals(\"Vivaldi\", userService.read(3L).getAttrMap().get(\"surname\").getValues().get(0));\n-\n         task.setUserFilter(SyncopeClient.getUserSearchConditionBuilder().is(\"surname\").equalTo(\"Vivaldi\").query());\n         taskService.update(13L, task);\n+\n         assertEquals(task.getUserFilter(), taskService.<PushTaskTO>read(13L).getUserFilter());\n \n-        execSyncTask(task.getId(), 50, false);\n+        execSyncTask(task.getId(), 50, true);\n \n         final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='vivaldi'\").size());\n+\n+        assertFalse(userService.read(3L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        jdbcTemplate.execute(\"DELETE FROM test2 WHERE ID='vivaldi'\");\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Assign\n+        // ------------------------------------------\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='vivaldi'\").size());\n         assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID<>'vivaldi'\").size());\n-        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='bellini'\").size());\n-        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n-        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='puccini'\").size());\n \n+        assertTrue(userService.read(3L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertEquals(\"vivaldi\",\n                 jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"vivaldi\"));\n \n         jdbcTemplate.execute(\"DELETE FROM test2 WHERE ID='vivaldi'\");\n+        // ------------------------------------------\n \n-        task.setUserFilter(null);\n+        // ------------------------------------------\n+        // Matching --> Provision\n+        // ------------------------------------------\n+        assertEquals(\"Bellini\", userService.read(4L).getAttrMap().get(\"surname\").getValues().get(0));\n+\n+        task.setUserFilter(SyncopeClient.getUserSearchConditionBuilder().is(\"surname\").equalTo(\"Bellini\").query());\n+        task.setUnmatchigRule(UnmatchingRule.PROVISION);\n         taskService.update(13L, task);\n-        assertNull(taskService.<PushTaskTO>read(13L).getUserFilter());\n+        assertEquals(task.getUserFilter(), taskService.<PushTaskTO>read(13L).getUserFilter());\n \n         execSyncTask(task.getId(), 50, false);\n \n-        assertEquals(\"vivaldi\",\n-                jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"vivaldi\"));\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='bellini'\").size());\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID<>'bellini'\").size());\n+\n+        assertFalse(userService.read(4L).getResources().contains(RESOURCE_NAME_TESTDB2));\n         assertEquals(\"bellini\",\n                 jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"bellini\"));\n-        assertEquals(\"rossini\",\n-                jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"rossini\"));\n-        assertEquals(\"puccini\",\n-                jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"puccini\"));\n+\n+        jdbcTemplate.execute(\"DELETE FROM test2 WHERE ID='bellini'\");\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Unlink\n+        // ------------------------------------------\n+        userTO = userService.read(5L);\n+        assertEquals(\"Puccini\", userTO.getAttrMap().get(\"surname\").getValues().get(0));\n+        assertFalse(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        task.setUserFilter(SyncopeClient.getUserSearchConditionBuilder().is(\"surname\").equalTo(\"Puccini\").query());\n+        task.setUnmatchigRule(UnmatchingRule.UNLINK);\n+        taskService.update(13L, task);\n+        assertEquals(task.getUserFilter(), taskService.<PushTaskTO>read(13L).getUserFilter());\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='puccini'\").size());\n+\n+        assertFalse(userService.read(5L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Ignore\n+        // ------------------------------------------\n+        userTO = userService.read(5L);\n+        assertEquals(\"Puccini\", userTO.getAttrMap().get(\"surname\").getValues().get(0));\n+        assertFalse(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        task.setUserFilter(SyncopeClient.getUserSearchConditionBuilder().is(\"surname\").equalTo(\"Rossini\").query());\n+        task.setUnmatchigRule(UnmatchingRule.IGNORE);\n+        taskService.update(13L, task);\n+        assertEquals(task.getUserFilter(), taskService.<PushTaskTO>read(13L).getUserFilter());\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n+\n+        assertFalse(userService.read(1L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // ------------------------------------------\n+    }\n+\n+    @Test\n+    public void pushMatchingUser() {\n+        // ------------------------------------------\n+        // Assign Verdi to test2 --> dryRun\n+        // ------------------------------------------\n+        UserTO userTO = userService.read(2L);\n+        assertEquals(\"Verdi\", userTO.getAttrMap().get(\"surname\").getValues().get(0));\n+        assertFalse(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        PushTaskTO task = taskService.<PushTaskTO>read(13L);\n+        assertNotNull(task);\n+\n+        task.setUserFilter(SyncopeClient.getUserSearchConditionBuilder().is(\"surname\").equalTo(\"Verdi\").query());\n+        task.setUnmatchigRule(UnmatchingRule.ASSIGN);\n+        taskService.update(13L, task);\n+\n+        assertEquals(UnmatchingRule.ASSIGN, taskService.<PushTaskTO>read(13L).getUnmatchigRule());\n+\n+        execSyncTask(task.getId(), 50, true);\n+\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Assign Verdi to test2\n+        // ------------------------------------------\n+        userTO = userService.read(2L);\n+        assertEquals(\"Verdi\", userTO.getAttrMap().get(\"surname\").getValues().get(0));\n+        assertFalse(userTO.getResources().contains(RESOURCE_NAME_TESTDB2));\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertTrue(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertEquals(\"verdi\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"verdi\"));\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Deprovision\n+        // ------------------------------------------\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+\n+        task.setMatchigRule(MatchingRule.DEPROVISION);\n+        taskService.update(13L, task);\n+        assertEquals(MatchingRule.DEPROVISION, taskService.<PushTaskTO>read(13L).getMatchigRule());\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertTrue(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // DELETE Capability not available ....\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Unassign\n+        // ------------------------------------------\n+        task.setMatchigRule(MatchingRule.UNASSIGN);\n+        taskService.update(13L, task);\n+        assertEquals(MatchingRule.UNASSIGN, taskService.<PushTaskTO>read(13L).getMatchigRule());\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        // DELETE Capability not available ....\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Link\n+        // ------------------------------------------\n+        task.setMatchigRule(MatchingRule.LINK);\n+        taskService.update(13L, task);\n+        assertEquals(MatchingRule.LINK, taskService.<PushTaskTO>read(13L).getMatchigRule());\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertTrue(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Unlink\n+        // ------------------------------------------\n+        task.setMatchigRule(MatchingRule.UNLINK);\n+        taskService.update(13L, task);\n+        assertEquals(MatchingRule.UNLINK, taskService.<PushTaskTO>read(13L).getMatchigRule());\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertEquals(\"verdi\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"verdi\"));\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Update\n+        // ------------------------------------------\n+        task.setMatchigRule(MatchingRule.UPDATE);\n+        taskService.update(13L, task);\n+        assertEquals(MatchingRule.UPDATE, taskService.<PushTaskTO>read(13L).getMatchigRule());\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertEquals(1, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='verdi'\").size());\n+        // ------------------------------------------\n+\n+        // ------------------------------------------\n+        // Matching --> Ignore\n+        // ------------------------------------------\n+        task.setMatchigRule(MatchingRule.IGNORE);\n+        taskService.update(13L, task);\n+        assertEquals(MatchingRule.IGNORE, taskService.<PushTaskTO>read(13L).getMatchigRule());\n+\n+        execSyncTask(task.getId(), 50, false);\n+\n+        assertFalse(userService.read(2L).getResources().contains(RESOURCE_NAME_TESTDB2));\n+        assertEquals(\"verdi\", jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"verdi\"));\n+        // ------------------------------------------\n+\n+        task.setMatchigRule(MatchingRule.UPDATE);\n+        task.setUserFilter(null);\n+        taskService.update(13L, task);\n+\n+        jdbcTemplate.execute(\"DELETE FROM test2 WHERE ID='verdi'\");\n     }\n }"},{"sha":"2da9f69bdd2d6ddd505ca3b533e2fe0d47ee9836","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7eda1690a7a5b22caca1cf727c44a1446e863568/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=7eda1690a7a5b22caca1cf727c44a1446e863568","patch":"@@ -893,7 +893,7 @@ under the License.\n   <Task DTYPE=\"SyncTask\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n         performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n         jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\"/>\n-  <Task DTYPE=\"PushTask\" id=\"13\" name=\"Export on resource-testdb\" resource_name=\"resource-testdb2\"\n+  <Task DTYPE=\"PushTask\" id=\"13\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n         jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\"/>\n       "}]}