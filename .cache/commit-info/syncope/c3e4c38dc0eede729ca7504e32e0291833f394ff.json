{"sha":"c3e4c38dc0eede729ca7504e32e0291833f394ff","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMzZTRjMzhkYzBlZWRlNzI5Y2E3NTA0ZTMyZTAyOTE4MzNmMzk0ZmY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-23T11:18:26Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-23T11:18:26Z"},"message":"Internal clean-up","tree":{"sha":"84cd645145ad06e77904f736af8e153430fbed43","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/84cd645145ad06e77904f736af8e153430fbed43"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c3e4c38dc0eede729ca7504e32e0291833f394ff","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c3e4c38dc0eede729ca7504e32e0291833f394ff","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c3e4c38dc0eede729ca7504e32e0291833f394ff","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c3e4c38dc0eede729ca7504e32e0291833f394ff/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"175c5b22af3674bacb3f640a1270d04ad5fbbfda","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/175c5b22af3674bacb3f640a1270d04ad5fbbfda","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/175c5b22af3674bacb3f640a1270d04ad5fbbfda"}],"stats":{"total":392,"additions":186,"deletions":206},"files":[{"sha":"7460205be1312ecfe407ef704a00e4b60de396c8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/GroupReportlet.java","status":"modified","additions":18,"deletions":24,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FGroupReportlet.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n-import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n@@ -37,6 +36,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -60,27 +60,6 @@ public class GroupReportlet extends AbstractReportlet {\n \n     private GroupReportletConf conf;\n \n-    private List<Group> getPagedGroups(final int page) {\n-        List<Group> result;\n-\n-        if (StringUtils.isBlank(conf.getMatchingCond())) {\n-            result = groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE);\n-        } else {\n-            result = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                    SearchCondConverter.convert(conf.getMatchingCond()),\n-                    page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.GROUP);\n-        }\n-\n-        return result;\n-    }\n-\n-    private int count() {\n-        return StringUtils.isBlank(conf.getMatchingCond())\n-                ? groupDAO.count(SyncopeConstants.FULL_ADMIN_REALMS)\n-                : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(conf.getMatchingCond()), AnyTypeKind.GROUP);\n-    }\n-\n     private void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n             throws SAXException {\n \n@@ -299,6 +278,13 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n         handler.endElement(\"\", \"\", \"configurations\");\n     }\n \n+    private int count() {\n+        return StringUtils.isBlank(conf.getMatchingCond())\n+                ? groupDAO.count(SyncopeConstants.FULL_ADMIN_REALMS)\n+                : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n+                        SearchCondConverter.convert(conf.getMatchingCond()), AnyTypeKind.GROUP);\n+    }\n+\n     @Override\n     protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n         if (conf instanceof GroupReportletConf) {\n@@ -308,8 +294,16 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n         }\n \n         doExtractConf(handler);\n-        for (int i = 1; i <= (count() / PAGE_SIZE) + 1; i++) {\n-            doExtract(handler, getPagedGroups(i));\n+\n+        if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n+            doExtract(handler, groupDAO.findAll());\n+        } else {\n+            for (int page = 1; page <= (count() / PAGE_SIZE) + 1; page++) {\n+                List<Group> groups = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                        SearchCondConverter.convert(this.conf.getMatchingCond()),\n+                        page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.GROUP);\n+                doExtract(handler, groups);\n+            }\n         }\n     }\n }"},{"sha":"9dbe8b8382e635a4471a0f37201057918a89a15e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":19,"deletions":24,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.logic.report;\n \n-import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n@@ -40,6 +39,7 @@\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.misc.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n@@ -72,27 +72,6 @@ public class UserReportlet extends AbstractReportlet {\n \n     private UserReportletConf conf;\n \n-    private List<User> getPagedUsers(final int page) {\n-        List<User> result;\n-\n-        if (StringUtils.isBlank(conf.getMatchingCond())) {\n-            result = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE);\n-        } else {\n-            result = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                    SearchCondConverter.convert(conf.getMatchingCond()),\n-                    page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.USER);\n-        }\n-\n-        return result;\n-    }\n-\n-    private int count() {\n-        return StringUtils.isBlank(conf.getMatchingCond())\n-                ? userDAO.count(SyncopeConstants.FULL_ADMIN_REALMS)\n-                : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                        SearchCondConverter.convert(conf.getMatchingCond()), AnyTypeKind.USER);\n-    }\n-\n     private void doExtractResources(final ContentHandler handler, final AnyTO anyTO)\n             throws SAXException {\n \n@@ -369,6 +348,13 @@ private void doExtractConf(final ContentHandler handler) throws SAXException {\n         handler.endElement(\"\", \"\", \"configurations\");\n     }\n \n+    private int count() {\n+        return StringUtils.isBlank(conf.getMatchingCond())\n+                ? userDAO.count(SyncopeConstants.FULL_ADMIN_REALMS)\n+                : searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n+                        SearchCondConverter.convert(conf.getMatchingCond()), AnyTypeKind.USER);\n+    }\n+\n     @Override\n     protected void doExtract(final ReportletConf conf, final ContentHandler handler) throws SAXException {\n         if (conf instanceof UserReportletConf) {\n@@ -378,8 +364,17 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n         }\n \n         doExtractConf(handler);\n-        for (int i = 1; i <= (count() / PAGE_SIZE) + 1; i++) {\n-            doExtract(handler, getPagedUsers(i));\n+\n+        if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n+            doExtract(handler, userDAO.findAll());\n+        } else {\n+            for (int page = 1; page <= (count() / PAGE_SIZE) + 1; page++) {\n+                List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                        SearchCondConverter.convert(this.conf.getMatchingCond()),\n+                        page, PAGE_SIZE, Collections.<OrderByClause>emptyList(), AnyTypeKind.USER);\n+                doExtract(handler, users);\n+            }\n+\n         }\n     }\n }"},{"sha":"e957588ce48d76a8f1551f62a970ab5aa17dd57a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -53,8 +53,23 @@\n \n     List<A> findByResource(ExternalResource resource);\n \n-    List<A> findAll(Set<String> adminRealms, int page, int itemsPerPage);\n+    /**\n+     * Find any objects without any limitation.\n+     *\n+     * @return all any objects of type {@link A} available.\n+     */\n+    List<A> findAll();\n \n+    /**\n+     * Find any objects visible from the given admin realms, according to given page and items per page, sorted as\n+     * required.\n+     *\n+     * @param adminRealms admin realms\n+     * @param page search result page\n+     * @param itemsPerPage items per search result page\n+     * @param orderBy ordering clauses\n+     * @return any objects of type {@link A} matching the provided conditions\n+     */\n     List<A> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n \n     <S extends Schema> Collection<S> findAllowedSchemas(A any, Class<S> reference);"},{"sha":"401d957747a19c1c0cc2fb9ac68a6a94446f3220","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnySearchDAO.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -36,25 +36,21 @@ public interface AnySearchDAO extends DAO<Any<?>, Long> {\n     int count(Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n \n     /**\n-     * @param adminRealms realms for which the caller owns the proper entitlement(s)\n      * @param searchCondition the search condition\n      * @param kind any object\n      * @param <T> any\n      * @return the list of any objects matching the given search condition\n      */\n-    <T extends Any<?>> List<T> search(\n-            Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n+    <T extends Any<?>> List<T> search(SearchCond searchCondition, AnyTypeKind kind);\n \n     /**\n-     * @param adminRealms the set of admin groups owned by the caller\n      * @param searchCondition the search condition\n      * @param orderBy list of ordering clauses\n      * @param kind any object\n      * @param <T> any\n      * @return the list of any objects matching the given search condition\n      */\n-    <T extends Any<?>> List<T> search(\n-            Set<String> adminRealms, SearchCond searchCondition, List<OrderByClause> orderBy, AnyTypeKind kind);\n+    <T extends Any<?>> List<T> search(SearchCond searchCondition, List<OrderByClause> orderBy, AnyTypeKind kind);\n \n     /**\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)"},{"sha":"3db3f61f0f3ef7c5753602e97561231261721b4f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -34,6 +34,7 @@\n import org.apache.commons.jexl2.parser.ParserConstants;\n import org.apache.commons.jexl2.parser.Token;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -396,10 +397,8 @@ public List<A> findByResource(final ExternalResource resource) {\n     }\n \n     @Override\n-    public final List<A> findAll(final Set<String> adminRealms,\n-            final int page, final int itemsPerPage) {\n-\n-        return findAll(adminRealms, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n+    public final List<A> findAll() {\n+        return findAll(SyncopeConstants.FULL_ADMIN_REALMS, -1, -1, Collections.<OrderByClause>emptyList());\n     }\n \n     private SearchCond getAllMatchingCond() {"},{"sha":"64c850bda914dfd00ea317d7249e28814626a821","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -37,6 +37,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.misc.utils.RealmUtils;\n@@ -150,18 +151,15 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n     }\n \n     @Override\n-    public <T extends Any<?>> List<T> search(\n-            final Set<String> adminRealms, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n-\n-        return search(adminRealms, searchCondition, Collections.<OrderByClause>emptyList(), typeKind);\n+    public <T extends Any<?>> List<T> search(final SearchCond searchCondition, final AnyTypeKind typeKind) {\n+        return search(searchCondition, Collections.<OrderByClause>emptyList(), typeKind);\n     }\n \n     @Override\n     public <T extends Any<?>> List<T> search(\n-            final Set<String> adminRealms, final SearchCond searchCondition, final List<OrderByClause> orderBy,\n-            final AnyTypeKind typeKind) {\n+            final SearchCond searchCondition, final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n \n-        return search(adminRealms, searchCondition, -1, -1, orderBy, typeKind);\n+        return search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, -1, -1, orderBy, typeKind);\n     }\n \n     @Override"},{"sha":"7e5667c45d7bb32ecc1c6446bd17918c6e1240e3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -27,7 +27,6 @@\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -133,10 +132,8 @@ public List<Group> findOwnedByGroup(final Long groupId) {\n             return Collections.<Group>emptyList();\n         }\n \n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAGroup.class.getSimpleName()).\n-                append(\" e WHERE e.groupOwner=:owner \");\n-\n-        TypedQuery<Group> query = entityManager().createQuery(queryString.toString(), Group.class);\n+        TypedQuery<Group> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAGroup.class.getSimpleName() + \" e WHERE e.groupOwner=:owner\", Group.class);\n         query.setParameter(\"owner\", owner);\n \n         return query.getResultList();\n@@ -166,7 +163,7 @@ public List<UMembership> findUMemberships(final Group group) {\n     public Group save(final Group group) {\n         // refresh dynaminc memberships\n         if (group.getADynMembership() != null) {\n-            List<AnyObject> matching = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+            List<AnyObject> matching = searchDAO.search(\n                     SearchCondConverter.convert(group.getADynMembership().getFIQLCond()), AnyTypeKind.ANY_OBJECT);\n \n             group.getADynMembership().getMembers().clear();\n@@ -175,7 +172,7 @@ public Group save(final Group group) {\n             }\n         }\n         if (group.getUDynMembership() != null) {\n-            List<User> matching = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+            List<User> matching = searchDAO.search(\n                     SearchCondConverter.convert(group.getUDynMembership().getFIQLCond()), AnyTypeKind.USER);\n \n             group.getUDynMembership().getMembers().clear();\n@@ -261,7 +258,7 @@ public List<TypeExtension> findTypeExtensionByAnyTypeClass(final AnyTypeClass an\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public void refreshDynMemberships(final AnyObject anyObject) {\n-        for (Group role : findAll(SyncopeConstants.FULL_ADMIN_REALMS, -1, -1)) {\n+        for (Group role : findAll()) {\n             if (role.getADynMembership() != null && !searchDAO.matches(anyObject,\n                     SearchCondConverter.convert(role.getADynMembership().getFIQLCond()), AnyTypeKind.ANY_OBJECT)) {\n \n@@ -273,7 +270,7 @@ public void refreshDynMemberships(final AnyObject anyObject) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public void refreshDynMemberships(final User user) {\n-        for (Group role : findAll(SyncopeConstants.FULL_ADMIN_REALMS, -1, -1)) {\n+        for (Group role : findAll()) {\n             if (role.getUDynMembership() != null && !searchDAO.matches(user,\n                     SearchCondConverter.convert(role.getUDynMembership().getFIQLCond()), AnyTypeKind.USER)) {\n "},{"sha":"6ecf4449dd4716dfc122d3c6bb428cd7d2924f9a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n@@ -65,7 +64,7 @@ public List<Role> findAll() {\n     public Role save(final Role role) {\n         // refresh dynaminc memberships\n         if (role.getDynMembership() != null) {\n-            List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+            List<User> matchingUsers = searchDAO.search(\n                     SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), AnyTypeKind.USER);\n \n             role.getDynMembership().getMembers().clear();"},{"sha":"6ab3e0141ee0409b726c37e0f95fa63af35c47f6","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -47,7 +47,7 @@ public class AnyObjectTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<AnyObject> list = anyObjectDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n+        List<AnyObject> list = anyObjectDAO.findAll();\n         assertFalse(list.isEmpty());\n     }\n "},{"sha":"48c09d64e0bbd5578ed23d7c2ed8d619dea9a057","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":22,"deletions":35,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -129,7 +129,7 @@ public void searchWithLikeCondition() {\n \n         assertTrue(cond.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -143,7 +143,7 @@ public void searchWithNotCondition() {\n         SearchCond cond = SearchCond.getNotLeafCond(fullnameLeafCond);\n         assertTrue(cond.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n@@ -164,7 +164,7 @@ public void searchByBoolean() {\n         SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n@@ -211,16 +211,14 @@ public void searchByGroup() {\n         MembershipCond groupCond = new MembershipCond();\n         groupCond.setGroupKey(1L);\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getLeafCond(groupCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeafCond(groupCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n         groupCond = new MembershipCond();\n         groupCond.setGroupKey(5L);\n \n-        users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getNotLeafCond(groupCond), AnyTypeKind.USER);\n+        users = searchDAO.search(SearchCond.getNotLeafCond(groupCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(5, users.size());\n     }\n@@ -230,8 +228,7 @@ public void searchByRole() {\n         RoleCond roleCond = new RoleCond();\n         roleCond.setRoleKey(\"Other\");\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -241,16 +238,14 @@ public void searchByIsNull() {\n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.ISNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        List<User> users = searchDAO.search(\n-                SyncopeConstants.FULL_ADMIN_REALMS, SearchCond.getLeafCond(coolLeafCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeafCond(coolLeafCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n         coolLeafCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getLeafCond(coolLeafCond), AnyTypeKind.USER);\n+        users = searchDAO.search(SearchCond.getLeafCond(coolLeafCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -266,7 +261,7 @@ public void searchByResource() {\n         SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getLeafCond(ws1));\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -277,8 +272,7 @@ public void searchByBooleanAnyCond() {\n         booleanCond.setSchema(\"show\");\n         booleanCond.setExpression(\"true\");\n \n-        List<Group> matchingGroups = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getLeafCond(booleanCond), AnyTypeKind.GROUP);\n+        List<Group> matchingGroups = searchDAO.search(SearchCond.getLeafCond(booleanCond), AnyTypeKind.GROUP);\n         assertNotNull(matchingGroups);\n         assertFalse(matchingGroups.isEmpty());\n     }\n@@ -297,9 +291,7 @@ public void searchByUsernameAndKey() {\n                 SearchCond.getLeafCond(usernameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n-        List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                searchCondition, AnyTypeKind.USER);\n-\n+        List<User> matchingUsers = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.size());\n         assertEquals(\"rossini\", matchingUsers.iterator().next().getUsername());\n@@ -322,9 +314,7 @@ public void searchByGroupNameAndKey() {\n \n         assertTrue(searchCondition.isValid());\n \n-        List<Group> matchingGroups = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                searchCondition, AnyTypeKind.GROUP);\n-\n+        List<Group> matchingGroups = searchDAO.search(searchCondition, AnyTypeKind.GROUP);\n         assertNotNull(matchingGroups);\n         assertEquals(1, matchingGroups.size());\n         assertEquals(\"root\", matchingGroups.iterator().next().getName());\n@@ -345,7 +335,7 @@ public void searchByUsernameAndFullname() {\n                 SearchCond.getLeafCond(usernameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n-        List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+        List<User> matchingUsers = searchDAO.search(\n                 searchCondition, AnyTypeKind.USER);\n         assertNotNull(matchingUsers);\n         assertEquals(2, matchingUsers.size());\n@@ -360,7 +350,7 @@ public void searchById() {\n         SearchCond searchCondition = SearchCond.getLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n         assertEquals(1L, users.iterator().next().getKey(), 0);\n@@ -372,7 +362,7 @@ public void searchById() {\n         searchCondition = SearchCond.getNotLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n-        users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER);\n+        users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n         assertTrue(CollectionUtils.exists(users, new Predicate<User>() {\n@@ -392,14 +382,12 @@ public void searchByType() {\n         SearchCond searchCondition = SearchCond.getLeafCond(tcond);\n         assertTrue(searchCondition.isValid());\n \n-        List<AnyObject> printers = searchDAO.search(\n-                SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.ANY_OBJECT);\n+        List<AnyObject> printers = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertNotNull(printers);\n         assertEquals(2, printers.size());\n \n         tcond.setAnyTypeName(\"UNEXISTING\");\n-        printers = searchDAO.search(\n-                SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.ANY_OBJECT);\n+        printers = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertNotNull(printers);\n         assertTrue(printers.isEmpty());\n     }\n@@ -425,8 +413,7 @@ public void userOrderBy() {\n         orderByClause.setDirection(OrderByClause.Direction.ASC);\n         orderByClauses.add(orderByClause);\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                searchCondition, orderByClauses, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(searchCondition, orderByClauses, AnyTypeKind.USER);\n         assertEquals(searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER),\n                 users.size());\n     }\n@@ -442,7 +429,7 @@ public void groupOrderBy() {\n         OrderByClause orderByClause = new OrderByClause();\n         orderByClause.setField(\"name\");\n \n-        List<Group> groups = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+        List<Group> groups = searchDAO.search(\n                 searchCondition, Collections.singletonList(orderByClause), AnyTypeKind.GROUP);\n         assertEquals(searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n                 searchCondition, AnyTypeKind.GROUP),\n@@ -461,7 +448,7 @@ public void issue202() {\n                 SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getNotLeafCond(ws1));\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n         assertTrue(CollectionUtils.exists(users, new Predicate<User>() {\n@@ -482,7 +469,7 @@ public void issue242() {\n         SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n@@ -496,7 +483,7 @@ public void issueSYNCOPE46() {\n         SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(searchCondition, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }"},{"sha":"9d449be325fbc5ab351330d3933bea45be6bba81","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GroupTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -47,7 +47,7 @@ public class GroupTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<Group> list = groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n+        List<Group> list = groupDAO.findAll();\n         assertEquals(\"did not get expected number of groups \", 15, list.size());\n     }\n "},{"sha":"9366705d1ab1d4d95be9dbe113f377fc70c973e5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -95,7 +95,7 @@ public void readRealm() {\n     @Test\n     public void createUser() {\n         assertNull(realmDAO.getRoot().getPasswordPolicy());\n-        assertTrue(userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 1000).isEmpty());\n+        assertTrue(userDAO.findAll().isEmpty());\n \n         User user = entityFactory.newEntity(User.class);\n         user.setRealm(realmDAO.getRoot());"},{"sha":"44b888bead18544f4341ce41da9321c95e561eb0","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -23,6 +23,7 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.fail;\n \n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -35,6 +36,7 @@\n import org.apache.syncope.core.misc.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -53,7 +55,7 @@ public class UserTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<User> list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n+        List<User> list = userDAO.findAll();\n         assertEquals(\"did not get expected number of users\", 5, list.size());\n     }\n \n@@ -67,19 +69,20 @@ public void count() {\n     @Test\n     public void findAllByPageAndSize() {\n         // get first page\n-        List<User> list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 2);\n+        List<User> list = userDAO.findAll(\n+                SyncopeConstants.FULL_ADMIN_REALMS, 1, 2, Collections.<OrderByClause>emptyList());\n         assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get second page\n-        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 2);\n+        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 2, Collections.<OrderByClause>emptyList());\n         assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get second page with uncomplete set\n-        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 3);\n+        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 3, Collections.<OrderByClause>emptyList());\n         assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get unexistent page\n-        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 3, 2);\n+        list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 3, 2, Collections.<OrderByClause>emptyList());\n         assertEquals(\"did not get expected number of users\", 1, list.size());\n     }\n "},{"sha":"d000884fba4f906362a3c9ea062fc27ae6609692","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -25,7 +25,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n@@ -61,7 +60,7 @@ public class AnySearchTest extends AbstractTest {\n \n     @Test\n     public void issueSYNCOPE95() {\n-        Set<Group> groups = new HashSet<>(groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100));\n+        Set<Group> groups = new HashSet<>(groupDAO.findAll());\n         for (Group group : groups) {\n             groupDAO.delete(group.getKey());\n         }\n@@ -74,7 +73,7 @@ public void issueSYNCOPE95() {\n         SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.isValid());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(cond, AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n@@ -106,8 +105,7 @@ public void searchByDynMembership() {\n         RoleCond roleCond = new RoleCond();\n         roleCond.setRoleKey(role.getKey());\n \n-        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);\n+        List<User> users = searchDAO.search(SearchCond.getLeafCond(roleCond), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n         assertEquals(4L, users.get(0).getKey(), 0);"},{"sha":"9aa507a6322ec30988ed666d3dbc8907e52dea57","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -189,7 +189,7 @@ private NotificationTask getNotificationTask(\n         List<User> recipients = new ArrayList<>();\n \n         if (notification.getRecipients() != null) {\n-            recipients.addAll(searchDAO.<User>search(SyncopeConstants.FULL_ADMIN_REALMS,\n+            recipients.addAll(searchDAO.<User>search(\n                     SearchCondConverter.convert(notification.getRecipients()),\n                     Collections.<OrderByClause>emptyList(), AnyTypeKind.USER));\n         }"},{"sha":"b045a63505590d70e644901d74a8ac5a61474bd9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PushJobDelegate.java","status":"modified","additions":46,"deletions":32,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -90,6 +91,22 @@ private AnyDAO<?> getAnyDAO(final AnyTypeKind anyTypeKind) {\n         return result;\n     }\n \n+    protected void handle(\n+            final List<? extends Any<?>> anys,\n+            final SyncopePushResultHandler handler,\n+            final ExternalResource resource)\n+            throws JobExecutionException {\n+\n+        for (Any<?> any : anys) {\n+            try {\n+                handler.handle(any.getKey());\n+            } catch (Exception e) {\n+                LOG.warn(\"Failure pushing '{}' on '{}'\", any, resource, e);\n+                throw new JobExecutionException(\"While pushing \" + any + \" on \" + resource, e);\n+            }\n+        }\n+    }\n+\n     @Override\n     protected String doExecuteProvisioning(\n             final PushTask pushTask,\n@@ -139,41 +156,38 @@ protected String doExecuteProvisioning(\n         for (Provision provision : pushTask.getResource().getProvisions()) {\n             if (provision.getMapping() != null) {\n                 AnyDAO<?> anyDAO = getAnyDAO(provision.getAnyType().getKind());\n+\n+                SyncopePushResultHandler handler;\n+                switch (provision.getAnyType().getKind()) {\n+                    case USER:\n+                        handler = uhandler;\n+                        break;\n+\n+                    case GROUP:\n+                        handler = ghandler;\n+                        break;\n+\n+                    case ANY_OBJECT:\n+                    default:\n+                        handler = ahandler;\n+                }\n+\n                 String filter = pushTask.getFilter(provision.getAnyType()) == null\n                         ? null\n                         : pushTask.getFilter(provision.getAnyType()).get();\n-\n-                int count = anyDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n-                for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n-                    List<? extends Any<?>> localAnys = StringUtils.isBlank(filter)\n-                            ? anyDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE)\n-                            : searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                                    SearchCondConverter.convert(filter),\n-                                    Collections.<OrderByClause>emptyList(), provision.getAnyType().getKind());\n-\n-                    for (Any<?> any : localAnys) {\n-                        SyncopePushResultHandler handler;\n-                        switch (provision.getAnyType().getKind()) {\n-                            case USER:\n-                                handler = uhandler;\n-                                break;\n-\n-                            case GROUP:\n-                                handler = ghandler;\n-                                break;\n-\n-                            case ANY_OBJECT:\n-                            default:\n-                                handler = ahandler;\n-                        }\n-\n-                        try {\n-                            handler.handle(any.getKey());\n-                        } catch (Exception e) {\n-                            LOG.warn(\"Failure pushing '{}' on '{}'\", any, pushTask.getResource(), e);\n-                            throw new JobExecutionException(\n-                                    \"While pushing \" + any + \" on \" + pushTask.getResource(), e);\n-                        }\n+                if (StringUtils.isBlank(filter)) {\n+                    handle(anyDAO.findAll(), handler, pushTask.getResource());\n+                } else {\n+                    int count = anyDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n+                    for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n+                        List<? extends Any<?>> anys = searchDAO.search(\n+                                SyncopeConstants.FULL_ADMIN_REALMS,\n+                                SearchCondConverter.convert(filter),\n+                                page,\n+                                PAGE_SIZE,\n+                                Collections.<OrderByClause>emptyList(),\n+                                provision.getAnyType().getKind());\n+                        handle(anys, handler, pushTask.getResource());\n                     }\n                 }\n             }"},{"sha":"17749d12ed62be1bf18d42e57121fe6afd65131a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -22,7 +22,6 @@\n import java.util.Collections;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.utils.MappingUtils;\n@@ -34,7 +33,6 @@\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -123,11 +121,11 @@ public Long findMatchingAnyKey(\n                 new EqualsFilter(new Name(name)),\n                 new ResultsHandler() {\n \n-                    @Override\n-                    public boolean handle(final ConnectorObject obj) {\n-                        return found.add(obj);\n-                    }\n-                },\n+            @Override\n+            public boolean handle(final ConnectorObject obj) {\n+                return found.add(obj);\n+            }\n+        },\n                 MappingUtils.buildOperationOptions(MappingUtils.getSyncMappingItems(provision).iterator()));\n \n         if (found.isEmpty()) {\n@@ -249,12 +247,7 @@ private List<Long> findByCorrelationRule(\n             final ConnectorObject connObj, final SyncCorrelationRule rule, final AnyTypeKind type) {\n \n         List<Long> result = new ArrayList<>();\n-        for (Any<?> any : searchDAO.search(\n-                SyncopeConstants.FULL_ADMIN_REALMS,\n-                rule.getSearchCond(connObj),\n-                Collections.<OrderByClause>emptyList(),\n-                type)) {\n-\n+        for (Any<?> any : searchDAO.search(rule.getSearchCond(connObj), type)) {\n             result.add(any.getKey());\n         }\n "},{"sha":"4336cf63927b41b8a1c4858aa18272417bfe7c20","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeGroupQueryImpl.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -28,12 +28,11 @@\n import org.activiti.engine.impl.persistence.entity.GroupEntity;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n \n public class SyncopeGroupQueryImpl implements GroupQuery {\n \n-    private GroupDAO groupDAO;\n+    private final GroupDAO groupDAO;\n \n     private Long groupId;\n \n@@ -103,7 +102,7 @@ private Group fromSyncopeGroup(final org.apache.syncope.core.persistence.api.ent\n         return new GroupEntity(group.getKey().toString());\n     }\n \n-    private void execute(final int page, final int itemsPerPage) {\n+    private void execute() {\n         if (groupId != null) {\n             org.apache.syncope.core.persistence.api.entity.group.Group syncopeGroup = groupDAO.find(groupId);\n             if (syncopeGroup == null) {\n@@ -113,32 +112,30 @@ private void execute(final int page, final int itemsPerPage) {\n             }\n         }\n         if (result == null) {\n-            result = CollectionUtils.collect(\n-                    groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, itemsPerPage),\n+            result = CollectionUtils.collect(groupDAO.findAll(),\n                     new Transformer<org.apache.syncope.core.persistence.api.entity.group.Group, Group>() {\n \n-                        @Override\n-                        public Group transform(final org.apache.syncope.core.persistence.api.entity.group.Group user) {\n-                            return fromSyncopeGroup(user);\n-                        }\n+                @Override\n+                public Group transform(final org.apache.syncope.core.persistence.api.entity.group.Group user) {\n+                    return fromSyncopeGroup(user);\n+                }\n \n-                    },\n-                    new ArrayList<Group>());\n+            }, new ArrayList<Group>());\n         }\n     }\n \n     @Override\n     public long count() {\n         if (result == null) {\n-            execute(-1, -1);\n+            execute();\n         }\n         return result.size();\n     }\n \n     @Override\n     public Group singleResult() {\n         if (result == null) {\n-            execute(-1, -1);\n+            execute();\n         }\n         if (result.isEmpty()) {\n             throw new ActivitiException(\"Empty result\");\n@@ -150,7 +147,7 @@ public Group singleResult() {\n     @Override\n     public List<Group> list() {\n         if (result == null) {\n-            execute(-1, -1);\n+            execute();\n         }\n         return result;\n     }"},{"sha":"e213c6e824b7f29ef8631fb6846d4b47e6b93fd4","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeUserQueryImpl.java","status":"modified","additions":16,"deletions":21,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c3e4c38dc0eede729ca7504e32e0291833f394ff/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java?ref=c3e4c38dc0eede729ca7504e32e0291833f394ff","patch":"@@ -27,17 +27,16 @@\n import org.activiti.engine.impl.persistence.entity.UserEntity;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n \n public class SyncopeUserQueryImpl implements UserQuery {\n \n-    private UserDAO userDAO;\n+    private final UserDAO userDAO;\n \n-    private GroupDAO groupDAO;\n+    private final GroupDAO groupDAO;\n \n     private String username;\n \n@@ -135,15 +134,13 @@ private User fromSyncopeUser(final org.apache.syncope.core.persistence.api.entit\n         return new UserEntity(user.getUsername());\n     }\n \n-    private void execute(final int page, final int itemsPerPage) {\n+    private void execute() {\n         if (username != null) {\n             org.apache.syncope.core.persistence.api.entity.user.User user = userDAO.find(username);\n             if (user == null) {\n                 result = Collections.<User>emptyList();\n-            } else {\n-                if (memberOf == null || userDAO.findAllGroupKeys(user).contains(memberOf)) {\n-                    result = Collections.singletonList(fromSyncopeUser(user));\n-                }\n+            } else if (memberOf == null || userDAO.findAllGroupKeys(user).contains(memberOf)) {\n+                result = Collections.singletonList(fromSyncopeUser(user));\n             }\n         }\n         if (memberOf != null) {\n@@ -163,32 +160,30 @@ private void execute(final int page, final int itemsPerPage) {\n         }\n         // THIS CAN BE *VERY* DANGEROUS\n         if (result == null) {\n-            result = CollectionUtils.collect(\n-                    userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, itemsPerPage),\n+            result = CollectionUtils.collect(userDAO.findAll(),\n                     new Transformer<org.apache.syncope.core.persistence.api.entity.user.User, User>() {\n \n-                        @Override\n-                        public User transform(final org.apache.syncope.core.persistence.api.entity.user.User user) {\n-                            return fromSyncopeUser(user);\n-                        }\n+                @Override\n+                public User transform(final org.apache.syncope.core.persistence.api.entity.user.User user) {\n+                    return fromSyncopeUser(user);\n+                }\n \n-                    },\n-                    new ArrayList<User>());\n+            }, new ArrayList<User>());\n         }\n     }\n \n     @Override\n     public long count() {\n         if (result == null) {\n-            execute(-1, -1);\n+            execute();\n         }\n         return result.size();\n     }\n \n     @Override\n     public User singleResult() {\n         if (result == null) {\n-            execute(-1, -1);\n+            execute();\n         }\n         if (result.isEmpty()) {\n             throw new ActivitiException(\"Empty result\");\n@@ -200,17 +195,17 @@ public User singleResult() {\n     @Override\n     public List<User> list() {\n         if (result == null) {\n-            execute(-1, -1);\n+            execute();\n         }\n         return result;\n     }\n \n     @Override\n     public List<User> listPage(final int firstResult, final int maxResults) {\n         if (result == null) {\n-            execute((firstResult / maxResults) + 1, maxResults);\n+            execute();\n         }\n-        return result;\n+        return result.subList(firstResult, firstResult + maxResults - 1);\n     }\n \n     @Override"}]}