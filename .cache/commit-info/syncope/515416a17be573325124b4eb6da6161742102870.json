{"sha":"515416a17be573325124b4eb6da6161742102870","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUxNTQxNmExN2JlNTczMzI1MTI0YjRlYjZkYTYxNjE3NDIxMDI4NzA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-26T13:41:12Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-26T13:41:12Z"},"message":"Implementing Activiti's task assignment\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247168 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8dfe5dd476665af1a5180a7f8f28bbdfe3278a1a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8dfe5dd476665af1a5180a7f8f28bbdfe3278a1a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/515416a17be573325124b4eb6da6161742102870","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/515416a17be573325124b4eb6da6161742102870","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/515416a17be573325124b4eb6da6161742102870","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/515416a17be573325124b4eb6da6161742102870/comments","author":null,"committer":null,"parents":[{"sha":"322f6daca8549486956bd188fed37694e0d777f2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/322f6daca8549486956bd188fed37694e0d777f2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/322f6daca8549486956bd188fed37694e0d777f2"}],"stats":{"total":843,"additions":774,"deletions":69},"files":[{"sha":"a613b0d4ab611eb900044194952d62c78b7e6f34","filename":"core/src/main/java/org/syncope/core/persistence/dao/RoleDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -31,7 +31,7 @@ public interface RoleDAO extends DAO {\n \n     List<SyncopeRole> findAll();\n \n-    List<Membership> getMemberships(SyncopeRole role);\n+    List<Membership> findMemberships(SyncopeRole role);\n \n     SyncopeRole save(SyncopeRole syncopeRole)\n             throws InvalidEntityException;"},{"sha":"47c6f433be99d1ce2ef66a172c72b24efee10315","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -95,7 +95,7 @@ public List<SyncopeRole> findAll() {\n     }\n \n     @Override\n-    public List<Membership> getMemberships(final SyncopeRole role) {\n+    public List<Membership> findMemberships(final SyncopeRole role) {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + Membership.class.getSimpleName() + \" e\"\n                 + \" WHERE e.syncopeRole=:role\");\n@@ -138,7 +138,7 @@ public void delete(final Long id) {\n             delete(child.getId());\n         }\n \n-        for (Membership membership : getMemberships(role)) {\n+        for (Membership membership : findMemberships(role)) {\n             membership.setSyncopeRole(null);\n             membership.getSyncopeUser().removeMembership(membership);\n             membership.setSyncopeUser(null);"},{"sha":"c41b7e2c2af9d02de5f158536fc973d966c2ed22","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Properties;\n import java.util.Set;\n+import javassist.NotFoundException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.sql.DataSource;\n@@ -48,11 +49,14 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.client.to.WorkflowDefinitionTO;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.validation.attrvalue.Validator;\n import org.syncope.core.rest.data.ConfigurationDataBinder;\n+import org.syncope.core.workflow.UserWorkflowAdapter;\n+import org.syncope.core.workflow.WorkflowException;\n \n @Controller\n @RequestMapping(\"/configuration\")\n@@ -64,6 +68,9 @@ public class ConfigurationController extends AbstractController {\n     @Autowired\n     private ConfigurationDataBinder configurationDataBinder;\n \n+    @Autowired\n+    private UserWorkflowAdapter wfAdapter;\n+\n     @Autowired\n     private DataSource dataSource;\n \n@@ -176,6 +183,27 @@ public ModelAndView getValidators() {\n         return result;\n     }\n \n+    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/workflow/definition\")\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    public WorkflowDefinitionTO getDefinition()\n+            throws WorkflowException {\n+\n+        return wfAdapter.getDefinition();\n+    }\n+\n+    @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/workflow/definition\")\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public void updateDefinition(\n+            @RequestBody final WorkflowDefinitionTO definition)\n+            throws NotFoundException, WorkflowException {\n+\n+        wfAdapter.updateDefinition(definition);\n+    }\n+\n     @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/dbexport\")"},{"sha":"f7fc649c72f35cb3edef47e1e2d88949d11c2569","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -42,7 +42,6 @@\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n-import org.syncope.client.to.WorkflowDefinitionTO;\n import org.syncope.client.to.WorkflowFormTO;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n@@ -400,27 +399,6 @@ public UserTO executeWorkflow(@RequestBody final UserTO userTO,\n         return savedTO;\n     }\n \n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_READ')\")\n-    @RequestMapping(method = RequestMethod.GET,\n-    value = \"/workflow/definition\")\n-    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n-    public WorkflowDefinitionTO getDefinition()\n-            throws WorkflowException {\n-\n-        return wfAdapter.getDefinition();\n-    }\n-\n-    @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/workflow/definition\")\n-    @Transactional(rollbackFor = {Throwable.class})\n-    public void updateDefinition(\n-            @RequestBody final WorkflowDefinitionTO definition)\n-            throws NotFoundException, WorkflowException {\n-\n-        wfAdapter.updateDefinition(definition);\n-    }\n-\n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/workflow/form/list\")"},{"sha":"457c536bda8a085909b8d10fcfa71480916b5ba4","filename":"core/src/main/java/org/syncope/core/workflow/ActivitiUserWorkflowAdapter.java","status":"modified","additions":35,"deletions":36,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -30,14 +30,12 @@\n import javax.annotation.Resource;\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.FormService;\n-import org.activiti.engine.IdentityService;\n import org.activiti.engine.RepositoryService;\n import org.activiti.engine.RuntimeService;\n import org.activiti.engine.TaskService;\n import org.activiti.engine.form.FormProperty;\n import org.activiti.engine.form.FormType;\n import org.activiti.engine.form.TaskFormData;\n-import org.activiti.engine.identity.User;\n import org.activiti.engine.repository.ProcessDefinition;\n import org.activiti.engine.runtime.ProcessInstance;\n import org.activiti.engine.task.Task;\n@@ -99,9 +97,6 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     @Autowired\n     private TaskService taskService;\n \n-    @Autowired\n-    private IdentityService identityService;\n-\n     @Autowired\n     private FormService formService;\n \n@@ -139,10 +134,6 @@ public Map.Entry<Long, Boolean> create(final UserTO userTO)\n         updateStatus(user);\n         user = userDAO.save(user);\n \n-        // create and save Activiti user\n-        User activitiUser = identityService.newUser(user.getUsername());\n-        identityService.saveUser(activitiUser);\n-\n         Boolean enable = (Boolean) runtimeService.getVariable(\n                 processInstance.getProcessInstanceId(), PROPAGATE_ENABLE);\n \n@@ -235,8 +226,6 @@ protected void doDelete(final SyncopeUser user)\n \n         doExecuteAction(user, \"delete\", null);\n         userDAO.delete(user);\n-\n-        identityService.deleteUser(user.getUsername());\n     }\n \n     @Override\n@@ -390,60 +379,60 @@ public List<WorkflowFormTO> getForms() {\n         return forms;\n     }\n \n-    private Map.Entry<Task, TaskFormData> checkTask(final String taskId,\n-            final String userName)\n-            throws NotFoundException {\n+    @Override\n+    public WorkflowFormTO getForm(final String workflowId)\n+            throws NotFoundException, WorkflowException {\n \n         Task task;\n         try {\n-            task = taskService.createTaskQuery().taskId(taskId).singleResult();\n+            task = taskService.createTaskQuery().processInstanceId(workflowId).\n+                    singleResult();\n         } catch (ActivitiException e) {\n-            throw new NotFoundException(\"Activiti Task \" + taskId, e);\n+            throw new WorkflowException(e);\n         }\n \n         TaskFormData formData;\n         try {\n             formData = formService.getTaskFormData(task.getId());\n         } catch (ActivitiException e) {\n-            throw new NotFoundException(\"Form for Activiti Task \" + taskId, e);\n+            LOG.debug(\"No form found for task {}\", task.getId(), e);\n+            formData = null;\n         }\n \n-        if (!adminUser.equals(userName)) {\n-            SyncopeUser user = userDAO.find(userName);\n-            if (user == null) {\n-                throw new NotFoundException(\"Syncope User \" + userName);\n-            }\n+        WorkflowFormTO result = null;\n+        if (formData != null && !formData.getFormProperties().isEmpty()) {\n+            result = getFormTO(task, formData);\n         }\n \n-        return new DefaultMapEntry(task, formData);\n+        return result;\n     }\n \n-    @Override\n-    public WorkflowFormTO getForm(final String workflowId)\n-            throws NotFoundException, WorkflowException {\n+    private Map.Entry<Task, TaskFormData> checkTask(final String taskId,\n+            final String userName)\n+            throws NotFoundException {\n \n         Task task;\n         try {\n-            task = taskService.createTaskQuery().processInstanceId(workflowId).\n-                    singleResult();\n+            task = taskService.createTaskQuery().taskId(taskId).singleResult();\n         } catch (ActivitiException e) {\n-            throw new WorkflowException(e);\n+            throw new NotFoundException(\"Activiti Task \" + taskId, e);\n         }\n \n         TaskFormData formData;\n         try {\n             formData = formService.getTaskFormData(task.getId());\n         } catch (ActivitiException e) {\n-            LOG.debug(\"No form found for task {}\", task.getId(), e);\n-            formData = null;\n+            throw new NotFoundException(\"Form for Activiti Task \" + taskId, e);\n         }\n \n-        WorkflowFormTO result = null;\n-        if (formData != null && !formData.getFormProperties().isEmpty()) {\n-            result = getFormTO(task, formData);\n+        if (!adminUser.equals(userName)) {\n+            SyncopeUser user = userDAO.find(userName);\n+            if (user == null) {\n+                throw new NotFoundException(\"Syncope User \" + userName);\n+            }\n         }\n \n-        return result;\n+        return new DefaultMapEntry(task, formData);\n     }\n \n     @Override\n@@ -452,6 +441,16 @@ public WorkflowFormTO claimForm(final String taskId,\n             throws NotFoundException, WorkflowException {\n \n         Map.Entry<Task, TaskFormData> checked = checkTask(taskId, userName);\n+\n+        if (!adminUser.equals(userName)) {\n+            List<Task> tasksForUser = taskService.createTaskQuery().taskId(\n+                    taskId).taskCandidateUser(userName).list();\n+            if (tasksForUser.isEmpty()) {\n+                throw new WorkflowException(new RuntimeException(\n+                        userName + \" is not candidate for task \" + taskId));\n+            }\n+        }\n+\n         Task task;\n         try {\n             taskService.setOwner(taskId, userName);\n@@ -473,7 +472,7 @@ public Long submitForm(final WorkflowFormTO form, final String userName)\n         if (!checked.getKey().getOwner().equals(userName)) {\n             throw new WorkflowException(new RuntimeException(\n                     \"Task \" + form.getTaskId() + \" assigned to \"\n-                    + checked.getKey().getOwner() + \" but summited by \"\n+                    + checked.getKey().getOwner() + \" but submited by \"\n                     + userName));\n         }\n "},{"sha":"3251b2111d3ebe68536ccdc2b6b570836517c329","filename":"core/src/main/java/org/syncope/core/workflow/activiti/SyncopeGroupManager.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow.activiti;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.activiti.engine.identity.Group;\n+import org.activiti.engine.identity.GroupQuery;\n+import org.activiti.engine.impl.Page;\n+import org.activiti.engine.impl.interceptor.Session;\n+import org.activiti.engine.impl.persistence.entity.GroupEntity;\n+import org.activiti.engine.impl.persistence.entity.GroupManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n+\n+public class SyncopeGroupManager extends GroupManager\n+        implements SyncopeSession {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Override\n+    public Class<? extends Session> getType() {\n+        return GroupManager.class;\n+    }\n+\n+    @Override\n+    public Group createNewGroup(final String groupId) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public GroupQuery createNewGroupQuery() {\n+        return new SyncopeGroupQueryImpl(roleDAO);\n+    }\n+\n+    @Override\n+    public void deleteGroup(final String groupId) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public GroupEntity findGroupById(final String groupId) {\n+        GroupEntity result = null;\n+\n+        SyncopeRole role = null;\n+        try {\n+            role = roleDAO.find(Long.valueOf(groupId));\n+        } catch (NumberFormatException e) {\n+        }\n+        if (role != null) {\n+            result = new GroupEntity(groupId);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Group> findGroupByQueryCriteria(final Object query,\n+            final Page page) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public long findGroupCountByQueryCriteria(final Object query) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<Group> findGroupsByUser(final String userId) {\n+        List<Group> result = Collections.EMPTY_LIST;\n+        SyncopeUser user = userDAO.find(userId);\n+        if (user != null) {\n+            result = new ArrayList<Group>();\n+            for (Long roleId : user.getRoleIds()) {\n+                result.add(new GroupEntity(roleId.toString()));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public void insertGroup(final Group group) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void updateGroup(final Group updatedGroup) {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"9b67c3ac7521ce33f0fc00999165330c974612d8","filename":"core/src/main/java/org/syncope/core/workflow/activiti/SyncopeGroupQueryImpl.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupQueryImpl.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow.activiti;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.identity.Group;\n+import org.activiti.engine.identity.GroupQuery;\n+import org.activiti.engine.impl.persistence.entity.GroupEntity;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+\n+public class SyncopeGroupQueryImpl implements GroupQuery {\n+\n+    private RoleDAO roleDAO;\n+\n+    private Long roleId;\n+\n+    private List<Group> result;\n+\n+    public SyncopeGroupQueryImpl(final RoleDAO roleDAO) {\n+        this.roleDAO = roleDAO;\n+    }\n+\n+    @Override\n+    public GroupQuery groupId(final String groupId) {\n+        try {\n+            roleId = Long.valueOf(groupId);\n+        } catch (NumberFormatException e) {\n+        }\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery groupName(final String groupName) {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery groupNameLike(final String groupNameLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery groupType(final String groupType) {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery groupMember(final String groupMemberUserId) {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery orderByGroupId() {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery orderByGroupName() {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery orderByGroupType() {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery asc() {\n+        return this;\n+    }\n+\n+    @Override\n+    public GroupQuery desc() {\n+        return this;\n+    }\n+\n+    private Group fromSyncopeRole(SyncopeRole role) {\n+        return new GroupEntity(role.getId().toString());\n+    }\n+\n+    private void execute() {\n+        if (roleId != null) {\n+            SyncopeRole role = roleDAO.find(roleId);\n+            if (role != null) {\n+                result = Collections.singletonList(fromSyncopeRole(role));\n+            } else {\n+                result = Collections.EMPTY_LIST;\n+            }\n+        }\n+        if (result == null) {\n+            result = new ArrayList<Group>();\n+            for (SyncopeRole role : roleDAO.findAll()) {\n+                result.add(fromSyncopeRole(role));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public long count() {\n+        if (result == null) {\n+            execute();\n+        }\n+        return result.size();\n+    }\n+\n+    @Override\n+    public Group singleResult() {\n+        if (result == null) {\n+            execute();\n+        }\n+        if (result.isEmpty()) {\n+            throw new ActivitiException(\"Empty result\");\n+        }\n+\n+        return result.get(0);\n+    }\n+\n+    @Override\n+    public List<Group> list() {\n+        if (result == null) {\n+            execute();\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<Group> listPage(final int firstResult, final int maxResults) {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"623575cbaeb337f340059ff525f4050b8bf838a8","filename":"core/src/main/java/org/syncope/core/workflow/activiti/SyncopeSession.java","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeSession.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -0,0 +1,21 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow.activiti;\n+\n+import org.activiti.engine.impl.interceptor.Session;\n+\n+public interface SyncopeSession extends Session {\n+\n+    Class<? extends Session> getType();\n+}"},{"sha":"6eeb45bac550ed7f8f1bba99d1c32a00459dad8f","filename":"core/src/main/java/org/syncope/core/workflow/activiti/SyncopeSessionFactory.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeSessionFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeSessionFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeSessionFactory.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow.activiti;\n+\n+import org.activiti.engine.impl.interceptor.Session;\n+import org.activiti.engine.impl.interceptor.SessionFactory;\n+\n+public class SyncopeSessionFactory implements SessionFactory {\n+\n+    private SyncopeSession syncopeSession;\n+\n+    @Override\n+    public Class<?> getSessionType() {\n+        return syncopeSession.getType();\n+    }\n+\n+    @Override\n+    public Session openSession() {\n+        return syncopeSession;\n+    }\n+\n+    public SyncopeSession getSyncopeSession() {\n+        return syncopeSession;\n+    }\n+\n+    public void setSyncopeSession(final SyncopeSession syncopeSession) {\n+        this.syncopeSession = syncopeSession;\n+    }\n+}"},{"sha":"71a747ba9ef67767445c3a8ad10392514ed700ab","filename":"core/src/main/java/org/syncope/core/workflow/activiti/SyncopeUserManager.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow.activiti;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.activiti.engine.identity.Group;\n+import org.activiti.engine.identity.User;\n+import org.activiti.engine.identity.UserQuery;\n+import org.activiti.engine.impl.Page;\n+import org.activiti.engine.impl.interceptor.Session;\n+import org.activiti.engine.impl.persistence.entity.GroupEntity;\n+import org.activiti.engine.impl.persistence.entity.IdentityInfoEntity;\n+import org.activiti.engine.impl.persistence.entity.UserEntity;\n+import org.activiti.engine.impl.persistence.entity.UserManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n+\n+public class SyncopeUserManager extends UserManager\n+        implements SyncopeSession {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    @Override\n+    public Class<? extends Session> getType() {\n+        return UserManager.class;\n+    }\n+\n+    @Override\n+    public Boolean checkPassword(final String userId, final String password) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public User createNewUser(final String userId) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public UserQuery createNewUserQuery() {\n+        return new SyncopeUserQueryImpl(userDAO, roleDAO, entitlementDAO);\n+    }\n+\n+    @Override\n+    public void deleteUser(final String userId) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<Group> findGroupsByUser(final String userId) {\n+        List<Group> result = Collections.EMPTY_LIST;\n+        SyncopeUser user = userDAO.find(userId);\n+        if (user != null) {\n+            result = new ArrayList<Group>();\n+            for (Long roleId : user.getRoleIds()) {\n+                result.add(new GroupEntity(roleId.toString()));\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public UserEntity findUserById(final String userId) {\n+        UserEntity result = null;\n+        SyncopeUser user = userDAO.find(userId);\n+        if (user != null) {\n+            result = new UserEntity(userId);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<User> findUserByQueryCriteria(final Object query,\n+            final Page page) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public long findUserCountByQueryCriteria(final Object query) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public IdentityInfoEntity findUserInfoByUserIdAndKey(final String userId,\n+            final String key) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<String> findUserInfoKeysByUserIdAndType(final String userId,\n+            final String type) {\n+\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void insertUser(final User user) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void updateUser(final User updatedUser) {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"046c05191862354811735f61f2b7909017903325","filename":"core/src/main/java/org/syncope/core/workflow/activiti/SyncopeUserQueryImpl.java","status":"added","additions":203,"deletions":0,"changes":203,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -0,0 +1,203 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.workflow.activiti;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.identity.User;\n+import org.activiti.engine.identity.UserQuery;\n+import org.activiti.engine.impl.persistence.entity.UserEntity;\n+import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n+import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.UserDAO;\n+import org.syncope.core.util.EntitlementUtil;\n+\n+public class SyncopeUserQueryImpl implements UserQuery {\n+\n+    private UserDAO userDAO;\n+\n+    private RoleDAO roleDAO;\n+\n+    private EntitlementDAO entitlementDAO;\n+\n+    private String username;\n+\n+    private Long memberOf;\n+\n+    private List<User> result;\n+\n+    public SyncopeUserQueryImpl(final UserDAO userDAO,\n+            final RoleDAO roleDAO, final EntitlementDAO entitlementDAO) {\n+\n+        this.userDAO = userDAO;\n+        this.roleDAO = roleDAO;\n+        this.entitlementDAO = entitlementDAO;\n+    }\n+\n+    @Override\n+    public UserQuery userId(final String id) {\n+        this.username = id;\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userFirstName(final String firstName) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userFirstNameLike(final String firstNameLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userLastName(final String lastName) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userLastNameLike(final String lastNameLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userEmail(final String email) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery userEmailLike(final String emailLike) {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery memberOfGroup(final String groupId) {\n+        try {\n+            memberOf = Long.valueOf(groupId);\n+        } catch (NumberFormatException e) {\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery orderByUserId() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery orderByUserFirstName() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery orderByUserLastName() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery orderByUserEmail() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery asc() {\n+        return this;\n+    }\n+\n+    @Override\n+    public UserQuery desc() {\n+        return this;\n+    }\n+\n+    private User fromSyncopeUser(final SyncopeUser syncopeUser) {\n+        return new UserEntity(syncopeUser.getUsername());\n+    }\n+\n+    private void execute() {\n+        if (username != null) {\n+            SyncopeUser user = userDAO.find(username);\n+            if (user != null) {\n+                if (memberOf == null || user.getRoleIds().contains(memberOf)) {\n+                    result = Collections.singletonList(fromSyncopeUser(user));\n+                }\n+            } else {\n+                result = Collections.EMPTY_LIST;\n+            }\n+        }\n+        if (memberOf != null) {\n+            SyncopeRole role = roleDAO.find(memberOf);\n+            if (role != null) {\n+                result = new ArrayList<User>();\n+                List<Membership> memberships = roleDAO.findMemberships(role);\n+                User user;\n+                for (Membership membership : memberships) {\n+                    user = fromSyncopeUser(membership.getSyncopeUser());\n+                    if (!result.contains(user)) {\n+                        result.add(user);\n+                    }\n+                }\n+            } else {\n+                result = Collections.EMPTY_LIST;\n+            }\n+        }\n+        // THIS CAN BE *VERY* DANGEROUS\n+        if (result == null) {\n+            result = new ArrayList<User>();\n+            for (SyncopeUser user : userDAO.findAll(\n+                    EntitlementUtil.getRoleIds(entitlementDAO.findAll()))) {\n+\n+                result.add(fromSyncopeUser(user));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public long count() {\n+        if (result == null) {\n+            execute();\n+        }\n+        return result.size();\n+    }\n+\n+    @Override\n+    public User singleResult() {\n+        if (result == null) {\n+            execute();\n+        }\n+        if (result.isEmpty()) {\n+            throw new ActivitiException(\"Empty result\");\n+        }\n+\n+        return result.get(0);\n+    }\n+\n+    @Override\n+    public List<User> list() {\n+        if (result == null) {\n+            execute();\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public List<User> listPage(final int firstResult,\n+            final int maxResults) {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"077ac87ebceb195fb2454269774ab7bd47722ded","filename":"core/src/main/resources/userWorkflow.bpmn20.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -42,7 +42,7 @@\n             <conditionExpression xsi:type=\"tFormalExpression\">${syncopeUser.getRoleIds().contains(9)}</conditionExpression>\n         </sequenceFlow>\n         \n-        <userTask id=\"createApproval\" activiti:formKey=\"createApproval\" name=\"Create approval\">\n+        <userTask id=\"createApproval\" activiti:formKey=\"createApproval\" name=\"Create approval\" activiti:candidateGroups=\"7\">\n             <extensionElements>\n                 <activiti:formProperty id=\"username\" name=\"Username\" type=\"string\" writable=\"false\" expression=\"${syncopeUser.username}\"/>\n                 <activiti:formProperty id=\"approve\" variable=\"approve\" name=\"Approve?\" type=\"boolean\" required=\"true\"/>"},{"sha":"ca82953938f94d3b3d87d7157f437bf32f728bb4","filename":"core/src/main/resources/workflowContext.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -23,6 +23,9 @@\n     \n     <bean id=\"wfAdapter\" class=\"${wfAdapter}\"/>\n \n+    <bean id=\"syncopeActivitiUserManager\" class=\"org.syncope.core.workflow.activiti.SyncopeUserManager\"/>\n+    <bean id=\"syncopeActivitiGroupManager\" class=\"org.syncope.core.workflow.activiti.SyncopeGroupManager\"/>\n+                \n     <bean id=\"processEngineConfiguration\" class=\"org.activiti.spring.SpringProcessEngineConfiguration\">\n         <property name=\"dataSource\" ref=\"dataSource\" />\n         <property name=\"transactionManager\" ref=\"transactionManager\" />\n@@ -34,6 +37,16 @@\n         \n         <property name=\"jobExecutorActivate\" value=\"${jobExecutorActivate}\" />\n         \n+        <property name=\"customSessionFactories\">\n+            <list>          \n+                <bean class=\"org.syncope.core.workflow.activiti.SyncopeSessionFactory\">\n+                    <property name=\"syncopeSession\" ref=\"syncopeActivitiUserManager\"/>\n+                </bean>\n+                <bean class=\"org.syncope.core.workflow.activiti.SyncopeSessionFactory\">\n+                    <property name=\"syncopeSession\" ref=\"syncopeActivitiGroupManager\"/>\n+                </bean>\n+            </list>\n+        </property>\n         <property name=\"customPreVariableTypes\">\n             <list>\n                 <bean class=\"org.syncope.core.workflow.activiti.SyncopeEntitiesVariableType\"/>"},{"sha":"98aced79d92fc9ae550172a0334863e4709dd034","filename":"core/src/main/webapp/syncopeClientError.jsp","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FsyncopeClientError.jsp?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -62,7 +62,10 @@\n \n         statusCode = HttpServletResponse.SC_NOT_FOUND;\n     } else if (ex instanceof WorkflowException) {\n-        if (ex.getCause().getCause().getCause() instanceof ConstraintViolationException) {\n+        if (ex.getCause().getCause() != null\n+                && ex.getCause().getCause().getCause() != null\n+                && ex.getCause().getCause().getCause() instanceof ConstraintViolationException) {\n+\n             response.setHeader(\n                     SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\n                     SyncopeClientExceptionType.DuplicateUniqueValue."},{"sha":"58c4d2f132bcff763eae4664d5f5dfc392e6381c","filename":"core/src/test/java/org/syncope/core/persistence/relationships/MembershipTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FMembershipTest.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -48,7 +48,7 @@ public final void delete() {\n         for (Membership m : user.getMemberships()) {\n             assertTrue(m.getId() != 4L);\n         }\n-        for (Membership m : syncopeRoleDAO.getMemberships(role)) {\n+        for (Membership m : syncopeRoleDAO.findMemberships(role)) {\n             assertTrue(m.getId() != 4L);\n         }\n     }"},{"sha":"c4b60b1f8646f7140d5375a69dd83a94a57f9183","filename":"core/src/test/java/org/syncope/core/persistence/relationships/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -61,7 +61,7 @@ public final void test() {\n         assertNotNull(schemaDAO.find(\"loginDate\", USchema.class));\n \n         List<Membership> memberships =\n-                roleDAO.getMemberships(roleDAO.find(7L));\n+                roleDAO.findMemberships(roleDAO.find(7L));\n         assertTrue(memberships.isEmpty());\n     }\n }"},{"sha":"0cf645ec3282111016ef9a9b9ebf6e1fa60128ad","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -65,6 +65,7 @@ public void testEntitlements() {\n         dbEnts.add(\"USER_READ\");\n         dbEnts.add(\"USER_LIST\");\n         dbEnts.add(\"ROLE_LIST\");\n+        dbEnts.add(\"WORKFLOW_FORM_CLAIM\");\n         for (RoleTO roleTO : roleTOs) {\n             dbEnts.add(EntitlementUtil.getEntitlementName(roleTO.getId()));\n         }"},{"sha":"89b724b147568319367e14ff986e8e51cce3e232","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":30,"deletions":2,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -25,8 +25,11 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.httpclient.UsernamePasswordCredentials;\n+import org.apache.commons.httpclient.auth.AuthScope;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.CommonsClientHttpRequestFactory;\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n import org.syncope.client.mod.AttributeMod;\n@@ -642,15 +645,37 @@ public final void createWithApproval() {\n         assertNotNull(form.getTaskId());\n         assertNull(form.getOwner());\n \n-        // 3. claim task for currently authenticated user (admin)\n+        // 3. claim task from user1, not in role 7 (designated for \n+        // approval in workflow definition): fail\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                \"user1\", \"password\"));\n+\n+        SyncopeClientException sce = null;\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/workflow/form/claim/{taskId}\",\n+                    WorkflowFormTO.class, form.getTaskId());\n+        } catch (SyncopeClientCompositeErrorException scce) {\n+            sce = scce.getException(SyncopeClientExceptionType.Workflow);\n+        }\n+        assertNotNull(sce);\n+\n+        // 4. claim task from user4, in to role 7\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                \"user4\", \"password\"));\n+\n         form = restTemplate.getForObject(\n                 BASE_URL + \"user/workflow/form/claim/{taskId}\",\n                 WorkflowFormTO.class, form.getTaskId());\n         assertNotNull(form);\n         assertNotNull(form.getTaskId());\n         assertNotNull(form.getOwner());\n \n-        // 4. reject user\n+        // 5. reject user\n         Map<String, WorkflowFormPropertyTO> props = form.getPropertiesAsMap();\n         props.get(\"approve\").setValue(Boolean.FALSE.toString());\n         props.get(\"rejectReason\").setValue(\"I don't like him.\");\n@@ -659,6 +684,9 @@ public final void createWithApproval() {\n                 form, UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"rejected\", userTO.getStatus());\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n     }\n \n     @Test"},{"sha":"f4fec38d6aec87b30fe01f017b1e4d51314e9a9b","filename":"core/src/test/resources/content.xml","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/515416a17be573325124b4eb6da6161742102870/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=515416a17be573325124b4eb6da6161742102870","patch":"@@ -480,13 +480,16 @@\n     <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"1\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"advanced\" roles_id=\"1\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"base\" roles_id=\"2\"/>\n-    <SyncopeRole_Entitlement entitlements_name=\"SCHEMA_READ\" roles_id=\"8\"/>\n-    <SyncopeRole_Entitlement entitlements_name=\"ROLE_LIST\" roles_id=\"8\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"USER_READ\" roles_id=\"2\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"USER_LIST\" roles_id=\"2\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"USER_READ\" roles_id=\"7\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"USER_LIST\" roles_id=\"7\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"ROLE_8\" roles_id=\"7\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"ROLE_7\" roles_id=\"7\"/>\n     <SyncopeRole_Entitlement entitlements_name=\"ROLE_1\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"WORKFLOW_FORM_CLAIM\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"WORKFLOW_FORM_SUBMIT\" roles_id=\"7\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"SCHEMA_READ\" roles_id=\"8\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"ROLE_LIST\" roles_id=\"8\"/>\n+    <SyncopeRole_Entitlement entitlements_name=\"WORKFLOW_FORM_CLAIM\" roles_id=\"8\"/>\n </dataset>"}]}