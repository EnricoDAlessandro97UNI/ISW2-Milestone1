{"sha":"5cf6aae8274d8e10b884ec9faeca54f623234836","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVjZjZhYWU4Mjc0ZDhlMTBiODg0ZWM5ZmFlY2E1NGY2MjMyMzQ4MzY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-11T06:18:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-13T15:16:51Z"},"message":"[SYNCOPE-652] Now account lockout is working properly again","tree":{"sha":"dfd04e6b9b227cb6328cf7fbc273da171cccc52c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/dfd04e6b9b227cb6328cf7fbc273da171cccc52c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5cf6aae8274d8e10b884ec9faeca54f623234836","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cf6aae8274d8e10b884ec9faeca54f623234836","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5cf6aae8274d8e10b884ec9faeca54f623234836","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5cf6aae8274d8e10b884ec9faeca54f623234836/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6dfedd8f334c8d9b50aca076b0c53eab004081e7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6dfedd8f334c8d9b50aca076b0c53eab004081e7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6dfedd8f334c8d9b50aca076b0c53eab004081e7"}],"stats":{"total":946,"additions":504,"deletions":442},"files":[{"sha":"d161658056b77417aa7059125f430340498a30dc","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -124,20 +124,22 @@ public ConnObjectTO readConnObject(final String resourceName, final Long id) {\n \n     public void suspend(final String etag, final long userKey, final List<StatusBean> statuses) {\n         StatusMod statusMod = StatusUtils.buildStatusMod(statuses, false);\n+        statusMod.setKey(userKey);\n         statusMod.setType(StatusMod.ModType.SUSPEND);\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n-            service.status(userKey, statusMod);\n+            service.status(statusMod);\n             resetClient(UserService.class);\n         }\n     }\n \n     public void reactivate(final String etag, final long userKey, final List<StatusBean> statuses) {\n         StatusMod statusMod = StatusUtils.buildStatusMod(statuses, true);\n+        statusMod.setKey(userKey);\n         statusMod.setType(StatusMod.ModType.REACTIVATE);\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n-            service.status(userKey, statusMod);\n+            service.status(statusMod);\n             resetClient(UserService.class);\n         }\n     }"},{"sha":"f989ecf90ff5806f5f8b114404a184c759671a46","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/StatusMod.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FStatusMod.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n+import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlEnum;\n@@ -66,6 +67,7 @@ public enum ModType {\n      */\n     private final List<String> resourceNames = new ArrayList<>();\n \n+    @PathParam(\"key\")\n     public long getKey() {\n         return key;\n     }"},{"sha":"6dbb56cfc496413b8f45be6154e6ac64555effc7","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -107,5 +107,5 @@ Response create(\n     @Path(\"{key}/status\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response status(@NotNull @PathParam(\"key\") Long key, @NotNull StatusMod statusMod);\n+    Response status(@NotNull StatusMod statusMod);\n }"},{"sha":"7643f9d412e3bd0a499226e60a282ab3e72f56f6","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -0,0 +1,282 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import javax.annotation.Resource;\n+import org.apache.commons.collections4.Closure;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n+import org.apache.commons.collections4.PredicateUtils;\n+import org.apache.commons.collections4.SetUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.misc.AuditManager;\n+import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.misc.RealmUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.DisabledException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class AuthDataAccessor {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AuthDataAccessor.class);\n+\n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n+    @Resource(name = \"anonymousUser\")\n+    protected String anonymousUser;\n+\n+    @Autowired\n+    protected DomainDAO domainDAO;\n+\n+    @Autowired\n+    protected ConfDAO confDAO;\n+\n+    @Autowired\n+    protected RealmDAO realmDAO;\n+\n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n+    @Autowired\n+    protected AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    protected ConnectorFactory connFactory;\n+\n+    @Autowired\n+    protected AuditManager auditManager;\n+\n+    protected final Encryptor encryptor = Encryptor.getInstance();\n+\n+    @Transactional(readOnly = true)\n+    public Domain findDomain(final String key) {\n+        Domain domain = domainDAO.find(key);\n+        if (domain == null) {\n+            throw new NotFoundException(\"Could not find domain \" + key);\n+        }\n+        return domain;\n+    }\n+\n+    @Transactional(noRollbackFor = DisabledException.class)\n+    public Pair<Long, Boolean> authenticate(final Authentication authentication) {\n+        Long key = null;\n+        Boolean authenticated = false;\n+\n+        User user = userDAO.find(authentication.getName());\n+        if (user != null) {\n+            key = user.getKey();\n+\n+            if (user.isSuspended() != null && user.isSuspended()) {\n+                throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n+            }\n+\n+            CPlainAttr authStatuses = confDAO.find(\"authentication.statuses\");\n+            if (authStatuses != null && !authStatuses.getValuesAsStrings().contains(user.getStatus())) {\n+                throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n+            }\n+\n+            boolean userModified = false;\n+            authenticated = authenticate(user, authentication.getCredentials().toString());\n+            if (authenticated) {\n+                if (confDAO.find(\"log.lastlogindate\", Boolean.toString(true)).getValues().get(0).getBooleanValue()) {\n+                    user.setLastLoginDate(new Date());\n+                    userModified = true;\n+                }\n+\n+                if (user.getFailedLogins() != 0) {\n+                    user.setFailedLogins(0);\n+                    userModified = true;\n+                }\n+\n+            } else {\n+                user.setFailedLogins(user.getFailedLogins() + 1);\n+                userModified = true;\n+            }\n+\n+            if (userModified) {\n+                userDAO.save(user);\n+            }\n+        }\n+\n+        return ImmutablePair.of(key, authenticated);\n+    }\n+\n+    protected boolean authenticate(final User user, final String password) {\n+        boolean authenticated = encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n+        LOG.debug(\"{} authenticated on internal storage: {}\", user.getUsername(), authenticated);\n+\n+        for (Iterator<? extends ExternalResource> itor = getPassthroughResources(user).iterator();\n+                itor.hasNext() && !authenticated;) {\n+\n+            ExternalResource resource = itor.next();\n+            String connObjectKey = null;\n+            try {\n+                connObjectKey = MappingUtils.getConnObjectKeyValue(user, resource.getProvision(anyTypeDAO.findUser()));\n+                Uid uid = connFactory.getConnector(resource).authenticate(connObjectKey, password, null);\n+                if (uid != null) {\n+                    authenticated = true;\n+                }\n+            } catch (Exception e) {\n+                LOG.debug(\"Could not authenticate {} on {}\", user.getUsername(), resource.getKey(), e);\n+            }\n+            LOG.debug(\"{} authenticated on {} as {}: {}\",\n+                    user.getUsername(), resource.getKey(), connObjectKey, authenticated);\n+        }\n+\n+        return authenticated;\n+    }\n+\n+    protected Set<? extends ExternalResource> getPassthroughResources(final User user) {\n+        Set<? extends ExternalResource> result = null;\n+\n+        // 1. look for assigned resources, pick the ones whose account policy has authentication resources\n+        for (ExternalResource resource : userDAO.findAllResources(user)) {\n+            if (resource.getAccountPolicy() != null && !resource.getAccountPolicy().getResources().isEmpty()) {\n+                if (result == null) {\n+                    result = resource.getAccountPolicy().getResources();\n+                } else {\n+                    result.retainAll(resource.getAccountPolicy().getResources());\n+                }\n+            }\n+        }\n+\n+        // 2. look for realms, pick the ones whose account policy has authentication resources\n+        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n+            if (realm.getAccountPolicy() != null && !realm.getAccountPolicy().getResources().isEmpty()) {\n+                if (result == null) {\n+                    result = realm.getAccountPolicy().getResources();\n+                } else {\n+                    result.retainAll(realm.getAccountPolicy().getResources());\n+                }\n+            }\n+        }\n+\n+        return SetUtils.emptyIfNull(result);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public void audit(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event,\n+            final AuditElements.Result result,\n+            final Object before,\n+            final Object output,\n+            final Object... input) {\n+\n+        auditManager.audit(type, category, subcategory, event, result, before, output, input);\n+    }\n+\n+    @Transactional\n+    public Set<SyncopeGrantedAuthority> load(final String username) {\n+        final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n+        if (anonymousUser.equals(username)) {\n+            authorities.add(new SyncopeGrantedAuthority(Entitlement.ANONYMOUS));\n+        } else if (adminUser.equals(username)) {\n+            CollectionUtils.collect(IteratorUtils.filteredIterator(Entitlement.values().iterator(),\n+                    PredicateUtils.notPredicate(PredicateUtils.equalPredicate(Entitlement.ANONYMOUS))),\n+                    new Transformer<String, SyncopeGrantedAuthority>() {\n+\n+                        @Override\n+                        public SyncopeGrantedAuthority transform(final String entitlement) {\n+                            return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                        }\n+                    },\n+                    authorities);\n+        } else {\n+            User user = userDAO.find(username);\n+            if (user == null) {\n+                throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n+            }\n+\n+            // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n+            // statically and dynamically\n+            for (final Role role : userDAO.findAllRoles(user)) {\n+                CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n+\n+                    @Override\n+                    public void execute(final String entitlement) {\n+                        SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n+                        authorities.add(authority);\n+\n+                        List<String> realmFullPahs = new ArrayList<>();\n+                        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+\n+                            @Override\n+                            public String transform(final Realm realm) {\n+                                return realm.getFullPath();\n+                            }\n+                        }, realmFullPahs);\n+                        authority.addRealms(realmFullPahs);\n+                    }\n+                });\n+            }\n+\n+            // Give group entitlements for owned groups\n+            for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n+                for (String entitlement : Arrays.asList(\n+                        Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n+\n+                    SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n+                    authority.addRealm(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+                    authorities.add(authority);\n+                }\n+            }\n+        }\n+\n+        return authorities;\n+    }\n+}"},{"sha":"c8fa53dc85b1691bbfd051afa9d6ddd41aa20afe","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":98,"deletions":178,"changes":276,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -18,76 +18,37 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import java.util.Date;\n-import java.util.Iterator;\n-import java.util.Set;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n-import org.apache.syncope.core.misc.AuditManager;\n-import org.apache.syncope.core.misc.MappingUtils;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.identityconnectors.framework.common.objects.Uid;\n+import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.security.authentication.AuthenticationProvider;\n import org.springframework.security.authentication.BadCredentialsException;\n-import org.springframework.security.authentication.DisabledException;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.UserDetailsService;\n-import org.springframework.transaction.annotation.Transactional;\n \n @Configurable\n public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(SyncopeAuthenticationProvider.class);\n \n     @Autowired\n-    protected AuditManager auditManager;\n+    protected AuthDataAccessor dataAccessor;\n \n     @Autowired\n-    protected DomainDAO domainDAO;\n-\n-    @Autowired\n-    protected ConfDAO confDAO;\n-\n-    @Autowired\n-    protected RealmDAO realmDAO;\n-\n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected PolicyDAO policyDAO;\n-\n-    @Autowired\n-    protected AnyTypeDAO anyTypeDAO;\n-\n-    @Autowired\n-    protected ConnectorFactory connFactory;\n-\n-    @Autowired\n-    protected AnyUtilsFactory attrUtilsFactory;\n+    protected UserProvisioningManager provisioningManager;\n \n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n@@ -130,19 +91,26 @@ public void setUserDetailsService(final UserDetailsService syncopeUserDetailsSer\n         this.userDetailsService = syncopeUserDetailsService;\n     }\n \n+    protected <T> T execWithAuthContext(final String domainKey, final Executable<T> executable) {\n+        SecurityContext ctx = SecurityContextHolder.getContext();\n+        AuthContextUtils.setFakeAuth(domainKey);\n+        try {\n+            return executable.exec();\n+        } finally {\n+            AuthContextUtils.clearFakeAuth();\n+            SecurityContextHolder.setContext(ctx);\n+        }\n+    }\n+\n     @Override\n-    @Transactional(noRollbackFor = { BadCredentialsException.class, DisabledException.class })\n     public Authentication authenticate(final Authentication authentication) {\n-        boolean authenticated = false;\n-\n-        String domainKey = authentication.getDetails() instanceof SyncopeAuthenticationDetails\n-                ? SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain()\n-                : null;\n+        String domainKey = SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain();\n         if (StringUtils.isBlank(domainKey)) {\n             domainKey = SyncopeConstants.MASTER_DOMAIN;\n         }\n         SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).setDomain(domainKey);\n \n+        boolean authenticated;\n         if (anonymousUser.equals(authentication.getName())) {\n             authenticated = authentication.getCredentials().toString().equals(anonymousKey);\n         } else if (adminUser.equals(authentication.getName())) {\n@@ -152,67 +120,90 @@ public Authentication authenticate(final Authentication authentication) {\n                         CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n                         adminPassword);\n             } else {\n-                Domain domain = domainDAO.find(domainKey);\n-                if (domain == null) {\n-                    throw new NotFoundException(\"Could not find domain \" + domainKey);\n-                }\n-\n-                authenticated = encryptor.verify(\n-                        authentication.getCredentials().toString(),\n-                        domain.getAdminCipherAlgorithm(),\n-                        domain.getAdminPwd());\n+                final String domainToFind = domainKey;\n+                authenticated = execWithAuthContext(SyncopeConstants.MASTER_DOMAIN, new Executable<Boolean>() {\n+\n+                    @Override\n+                    public Boolean exec() {\n+                        Domain domain = dataAccessor.findDomain(domainToFind);\n+\n+                        return encryptor.verify(\n+                                authentication.getCredentials().toString(),\n+                                domain.getAdminCipherAlgorithm(),\n+                                domain.getAdminPwd());\n+                    }\n+                });\n             }\n         } else {\n-            User user = userDAO.find(authentication.getName());\n-\n-            if (user != null) {\n-                if (user.isSuspended() != null && user.isSuspended()) {\n-                    throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n-                }\n-\n-                CPlainAttr authStatuses = confDAO.find(\"authentication.statuses\");\n-                if (authStatuses != null && !authStatuses.getValuesAsStrings().contains(user.getStatus())) {\n-                    throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n-                }\n-\n-                authenticated = authenticate(user, authentication.getCredentials().toString());\n-\n-                updateLoginAttributes(user, authenticated);\n+            final Pair<Long, Boolean> authResult =\n+                    execWithAuthContext(domainKey, new Executable<Pair<Long, Boolean>>() {\n+\n+                        @Override\n+                        public Pair<Long, Boolean> exec() {\n+                            return dataAccessor.authenticate(authentication);\n+                        }\n+                    });\n+            authenticated = authResult.getValue();\n+            if (!authenticated) {\n+                execWithAuthContext(domainKey, new Executable<Void>() {\n+\n+                    @Override\n+                    public Void exec() {\n+                        provisioningManager.internalSuspend(authResult.getKey());\n+                        return null;\n+                    }\n+                });\n             }\n         }\n \n+        final boolean isAuthenticated = authenticated;\n         UsernamePasswordAuthenticationToken token;\n-        if (authenticated) {\n-            token = new UsernamePasswordAuthenticationToken(\n-                    authentication.getPrincipal(),\n-                    null,\n-                    userDetailsService.loadUserByUsername(authentication.getPrincipal().toString()).getAuthorities());\n-            token.setDetails(authentication.getDetails());\n-\n-            auditManager.audit(\n-                    AuditElements.EventCategoryType.REST,\n-                    AuditElements.AUTHENTICATION_CATEGORY,\n-                    null,\n-                    AuditElements.LOGIN_EVENT,\n-                    Result.SUCCESS,\n-                    null,\n-                    authenticated,\n-                    authentication,\n-                    \"Successfully authenticated, with entitlements: \" + token.getAuthorities());\n+        if (isAuthenticated) {\n+            token = execWithAuthContext(domainKey, new Executable<UsernamePasswordAuthenticationToken>() {\n+\n+                @Override\n+                public UsernamePasswordAuthenticationToken exec() {\n+                    UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\n+                            authentication.getPrincipal(),\n+                            null,\n+                            userDetailsService.loadUserByUsername(authentication.getPrincipal().toString()).\n+                            getAuthorities());\n+                    token.setDetails(authentication.getDetails());\n+\n+                    dataAccessor.audit(\n+                            AuditElements.EventCategoryType.REST,\n+                            AuditElements.AUTHENTICATION_CATEGORY,\n+                            null,\n+                            AuditElements.LOGIN_EVENT,\n+                            Result.SUCCESS,\n+                            null,\n+                            isAuthenticated,\n+                            authentication,\n+                            \"Successfully authenticated, with entitlements: \" + token.getAuthorities());\n+                    return token;\n+                }\n+            });\n \n             LOG.debug(\"User {} successfully authenticated, with groups {}\",\n                     authentication.getPrincipal(), token.getAuthorities());\n         } else {\n-            auditManager.audit(\n-                    AuditElements.EventCategoryType.REST,\n-                    AuditElements.AUTHENTICATION_CATEGORY,\n-                    null,\n-                    AuditElements.LOGIN_EVENT,\n-                    Result.FAILURE,\n-                    null,\n-                    authenticated,\n-                    authentication,\n-                    \"User \" + authentication.getPrincipal() + \" not authenticated\");\n+            execWithAuthContext(domainKey, new Executable<Void>() {\n+\n+                @Override\n+                public Void exec() {\n+                    dataAccessor.audit(\n+                            AuditElements.EventCategoryType.REST,\n+                            AuditElements.AUTHENTICATION_CATEGORY,\n+                            null,\n+                            AuditElements.LOGIN_EVENT,\n+                            Result.FAILURE,\n+                            null,\n+                            isAuthenticated,\n+                            authentication,\n+                            \"User \" + authentication.getPrincipal() + \" not authenticated\");\n+                    return null;\n+                }\n+            });\n \n             LOG.debug(\"User {} not authenticated\", authentication.getPrincipal());\n \n@@ -222,84 +213,13 @@ public Authentication authenticate(final Authentication authentication) {\n         return token;\n     }\n \n-    protected void updateLoginAttributes(final User user, final boolean authenticated) {\n-        boolean userModified = false;\n-\n-        if (authenticated) {\n-            if (confDAO.find(\"log.lastlogindate\", Boolean.toString(true)).getValues().get(0).getBooleanValue()) {\n-                user.setLastLoginDate(new Date());\n-                userModified = true;\n-            }\n-\n-            if (user.getFailedLogins() != 0) {\n-                user.setFailedLogins(0);\n-                userModified = true;\n-            }\n-        } else {\n-            user.setFailedLogins(user.getFailedLogins() + 1);\n-            userModified = true;\n-        }\n-\n-        if (userModified) {\n-            userDAO.save(user);\n-        }\n-    }\n-\n-    protected Set<? extends ExternalResource> getPassthroughResources(final User user) {\n-        Set<? extends ExternalResource> result = null;\n-\n-        // 1. look for assigned resources, pick the ones whose account policy has authentication resources\n-        for (ExternalResource resource : userDAO.findAllResources(user)) {\n-            if (resource.getAccountPolicy() != null && !resource.getAccountPolicy().getResources().isEmpty()) {\n-                if (result == null) {\n-                    result = resource.getAccountPolicy().getResources();\n-                } else {\n-                    result.retainAll(resource.getAccountPolicy().getResources());\n-                }\n-            }\n-        }\n-\n-        // 2. look for realms, pick the ones whose account policy has authentication resources\n-        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n-            if (realm.getAccountPolicy() != null && !realm.getAccountPolicy().getResources().isEmpty()) {\n-                if (result == null) {\n-                    result = realm.getAccountPolicy().getResources();\n-                } else {\n-                    result.retainAll(realm.getAccountPolicy().getResources());\n-                }\n-            }\n-        }\n-\n-        return SetUtils.emptyIfNull(result);\n-    }\n-\n-    protected boolean authenticate(final User user, final String password) {\n-        boolean authenticated = encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n-        LOG.debug(\"{} authenticated on internal storage: {}\", user.getUsername(), authenticated);\n-\n-        for (Iterator<? extends ExternalResource> itor = getPassthroughResources(user).iterator();\n-                itor.hasNext() && !authenticated;) {\n-\n-            ExternalResource resource = itor.next();\n-            String connObjectKey = null;\n-            try {\n-                connObjectKey = MappingUtils.getConnObjectKeyValue(user, resource.getProvision(anyTypeDAO.findUser()));\n-                Uid uid = connFactory.getConnector(resource).authenticate(connObjectKey, password, null);\n-                if (uid != null) {\n-                    authenticated = true;\n-                }\n-            } catch (Exception e) {\n-                LOG.debug(\"Could not authenticate {} on {}\", user.getUsername(), resource.getKey(), e);\n-            }\n-            LOG.debug(\"{} authenticated on {} as {}: {}\",\n-                    user.getUsername(), resource.getKey(), connObjectKey, authenticated);\n-        }\n-\n-        return authenticated;\n-    }\n-\n     @Override\n     public boolean supports(final Class<? extends Object> type) {\n         return type.equals(UsernamePasswordAuthenticationToken.class);\n     }\n+\n+    protected interface Executable<T> {\n+\n+        T exec();\n+    }\n }"},{"sha":"70ec6ac6fe75baf91d481d3b1b82e746693ddcb4","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeUserDetailsService.java","status":"modified","additions":2,"deletions":86,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -18,104 +18,20 @@\n  */\n package org.apache.syncope.core.misc.security;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import javax.annotation.Resource;\n-import org.apache.commons.collections4.Closure;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.PredicateUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.Entitlement;\n-import org.apache.syncope.core.misc.RealmUtils;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.Role;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.core.userdetails.UserDetailsService;\n-import org.springframework.security.core.userdetails.UsernameNotFoundException;\n \n @Configurable\n public class SyncopeUserDetailsService implements UserDetailsService {\n \n     @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n-    @Resource(name = \"adminUser\")\n-    protected String adminUser;\n-\n-    @Resource(name = \"anonymousUser\")\n-    protected String anonymousUser;\n+    protected AuthDataAccessor dataAccessor;\n \n     @Override\n     public UserDetails loadUserByUsername(final String username) {\n-        final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n-        if (anonymousUser.equals(username)) {\n-            authorities.add(new SyncopeGrantedAuthority(Entitlement.ANONYMOUS));\n-        } else if (adminUser.equals(username)) {\n-            CollectionUtils.collect(IteratorUtils.filteredIterator(Entitlement.values().iterator(),\n-                    PredicateUtils.notPredicate(PredicateUtils.equalPredicate(Entitlement.ANONYMOUS))),\n-                    new Transformer<String, SyncopeGrantedAuthority>() {\n-\n-                        @Override\n-                        public SyncopeGrantedAuthority transform(final String entitlement) {\n-                            return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                        }\n-                    },\n-                    authorities);\n-        } else {\n-            org.apache.syncope.core.persistence.api.entity.user.User user = userDAO.find(username);\n-            if (user == null) {\n-                throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n-            }\n-\n-            // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n-            // statically and dynamically\n-            for (final Role role : userDAO.findAllRoles(user)) {\n-                CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n-\n-                    @Override\n-                    public void execute(final String entitlement) {\n-                        SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n-                        authorities.add(authority);\n-\n-                        List<String> realmFullPahs = new ArrayList<>();\n-                        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n-\n-                            @Override\n-                            public String transform(final Realm realm) {\n-                                return realm.getFullPath();\n-                            }\n-                        }, realmFullPahs);\n-                        authority.addRealms(realmFullPahs);\n-                    }\n-                });\n-            }\n-\n-            // Give group entitlements for owned groups\n-            for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n-                for (String entitlement : Arrays.asList(\n-                        Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n-\n-                    SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n-                    authority.addRealm(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n-                    authorities.add(authority);\n-                }\n-            }\n-        }\n-\n-        return new User(username, \"<PASSWORD_PLACEHOLDER>\", authorities);\n+        return new User(username, \"<PASSWORD_PLACEHOLDER>\", dataAccessor.load(username));\n     }\n }"},{"sha":"1022815a2a5e96f89bde2f260d58e9a96e842d38","filename":"core/misc/src/main/resources/securityContext.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -62,6 +62,8 @@ under the License.\n     <security:csrf disabled=\"true\"/>\n   </security:http>\n \n+  <bean class=\"org.apache.syncope.core.misc.security.AuthDataAccessor\"/>\n+\n   <bean id=\"syncopeUserDetailsService\" class=\"org.apache.syncope.core.misc.security.SyncopeUserDetailsService\"/>\n \n   <bean id=\"syncopeAuthenticationProvider\" class=\"org.apache.syncope.core.misc.security.SyncopeAuthenticationProvider\">"},{"sha":"3fc9b99abd6021c028ad0cce4f75778ec16bc4e9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collection;\n import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -49,4 +50,6 @@ public interface UserDAO extends AnyDAO<User> {\n     Collection<ExternalResource> findAllResources(User user);\n \n     Collection<String> findAllResourceNames(User user);\n+\n+    Pair<Boolean, Boolean> enforcePolicies(User user);\n }"},{"sha":"eeee97cf42b0851c0e54bcf476703078bb8d6d32","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADomainDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -24,10 +24,12 @@\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.jpa.entity.JPADomain;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPADomainDAO extends AbstractDAO<Domain, String> implements DomainDAO {\n \n+    @Transactional(readOnly = true)\n     @Override\n     public Domain find(final String key) {\n         return entityManager().find(JPADomain.class, key);"},{"sha":"4e9afe181e75089c440ce4efd6f58e65621f925f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -63,7 +63,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n-import org.apache.syncope.core.provisioning.api.UserSuspender;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n@@ -96,9 +95,6 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     @Autowired\n     private AccountPolicyEnforcer apEnforcer;\n \n-    @Autowired(required = false)\n-    private UserSuspender suspender;\n-\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n@@ -210,19 +206,17 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n     private List<AccountPolicy> getAccountPolicies(final User user) {\n         List<AccountPolicy> policies = new ArrayList<>();\n \n-        AccountPolicy policy;\n-\n         // add resource policies        \n         for (ExternalResource resource : findAllResources(user)) {\n-            policy = resource.getAccountPolicy();\n+            AccountPolicy policy = resource.getAccountPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n             }\n         }\n \n         // add realm policies\n         for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n-            policy = realm.getAccountPolicy();\n+            AccountPolicy policy = realm.getAccountPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n             }\n@@ -231,7 +225,9 @@ private List<AccountPolicy> getAccountPolicies(final User user) {\n         return policies;\n     }\n \n-    private Pair<Boolean, Boolean> enforcePolicies(final User user) {\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n         // ------------------------------\n         // Verify password policies\n         // ------------------------------\n@@ -310,18 +306,13 @@ public User save(final User user) {\n         JPAUser.class.cast(merged).setClearPassword(clearPwd);\n \n         // 4. enforce password and account policies\n-        Pair<Boolean, Boolean> enforceSuspend = null;\n         try {\n-            enforceSuspend = enforcePolicies(merged);\n+            enforcePolicies(merged);\n         } catch (InvalidEntityException e) {\n             entityManager().remove(merged);\n             throw e;\n         }\n \n-        if (suspender != null && enforceSuspend.getKey()) {\n-            suspender.suspend(user, enforceSuspend.getValue());\n-        }\n-\n         roleDAO.refreshDynMemberships(merged);\n         groupDAO.refreshDynMemberships(merged);\n "},{"sha":"21acad2af5fb0d9671d811ce6bcdc52735167dd5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n \n public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserMod> {\n@@ -37,7 +36,7 @@ public interface UserProvisioningManager extends ProvisioningManager<UserTO, Use\n \n     Pair<Long, List<PropagationStatus>> suspend(StatusMod statusMod);\n \n-    void innerSuspend(User user, boolean propagate);\n+    void internalSuspend(Long key);\n \n     Pair<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword);\n "},{"sha":"610513c5284302fb843f65aa9ca08cc2abe32a4f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserSuspender.java","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserSuspender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserSuspender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserSuspender.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -1,26 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.api;\n-\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-\n-public interface UserSuspender {\n-\n-    void suspend(User user, boolean propagateSuspension);\n-}"},{"sha":"38264de9672a337864533577c39a89b29b24a924","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -288,19 +288,18 @@ protected List<PropagationStatus> propagateStatus(final StatusMod statusMod) {\n     }\n \n     @Override\n-    public void innerSuspend(final User user, final boolean propagate) {\n-        final WorkflowResult<Long> updated = uwfAdapter.suspend(user);\n+    public void internalSuspend(final Long key) {\n+        Pair<WorkflowResult<Long>, Boolean> updated = uwfAdapter.internalSuspend(key);\n \n         // propagate suspension if and only if it is required by policy\n-        if (propagate) {\n+        if (updated != null && updated.getValue()) {\n             UserMod userMod = new UserMod();\n-            userMod.setKey(updated.getResult());\n+            userMod.setKey(updated.getKey().getResult());\n \n-            final List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+            List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                     new WorkflowResult<Pair<UserMod, Boolean>>(\n                             new ImmutablePair<>(userMod, Boolean.FALSE),\n-                            updated.getPropByRes(), updated.getPerformedTasks()));\n-\n+                            updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n             taskExecutor.execute(tasks);\n         }\n     }"},{"sha":"7ff9e84fe96e02ca0c2da29637ed5b27b7165a5d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/UserSuspenderImpl.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6dfedd8f334c8d9b50aca076b0c53eab004081e7/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FUserSuspenderImpl.java?ref=6dfedd8f334c8d9b50aca076b0c53eab004081e7","patch":"@@ -1,51 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java;\n-\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.UserSuspender;\n-import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-public class UserSuspenderImpl implements UserSuspender {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(UserSuspenderImpl.class);\n-\n-    @Autowired\n-    private UserProvisioningManager provisioningManager;\n-\n-    @Override\n-    public void suspend(final User user, final boolean suspend) {\n-        try {\n-            LOG.debug(\"User {}:{} is over to max failed logins\", user.getKey(), user.getUsername());\n-\n-            // reduce failed logins number to avoid multiple request\n-            user.setFailedLogins(user.getFailedLogins() - 1);\n-\n-            // disable user and propagate suspension if and only if it is required by policy          \n-            provisioningManager.innerSuspend(user, suspend);\n-        } catch (Exception e) {\n-            LOG.error(\"Error during user suspension\", e);\n-        }\n-    }\n-}"},{"sha":"459c0525a79c1b7d5a94482a8c37b5182efb5075","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -88,7 +88,7 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     public UserTO getAuthenticatedUserTO() {\n         final UserTO authUserTO;\n \n-        final String authUsername = AuthContextUtils.getUsername();\n+        String authUsername = AuthContextUtils.getUsername();\n         if (anonymousUser.equals(authUsername)) {\n             authUserTO = new UserTO();\n             authUserTO.setKey(-2);"},{"sha":"244769790cd0b36092e923f876f19b35a754e1a9","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -62,12 +62,11 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n     }\n \n     @Override\n-    public Response status(final Long key, final StatusMod statusMod) {\n-        UserTO user = logic.read(key);\n+    public Response status(final StatusMod statusMod) {\n+        UserTO user = logic.read(statusMod.getKey());\n \n         checkETag(user.getETagValue());\n \n-        statusMod.setKey(key);\n         UserTO updated = logic.status(statusMod);\n         return modificationResponse(updated);\n     }"},{"sha":"7a4ba38a200ce3b2c140e839d39337398939cc9a","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -74,8 +74,6 @@\n import org.apache.syncope.core.workflow.api.WorkflowDefinitionFormat;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.apache.syncope.core.workflow.java.AbstractUserWorkflowAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -84,8 +82,6 @@\n  */\n public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(ActivitiUserWorkflowAdapter.class);\n-\n     protected static final String[] PROPERTY_IGNORE_PROPS = { \"type\" };\n \n     public static final String WF_PROCESS_ID = \"userWorkflow\";\n@@ -279,7 +275,7 @@ public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boo\n     protected Set<String> doExecuteTask(final User user, final String task, final Map<String, Object> moreVariables) {\n         Set<String> preTasks = getPerformedTasks(user);\n \n-        final Map<String, Object> variables = new HashMap<>();\n+        Map<String, Object> variables = new HashMap<>();\n         variables.put(WF_EXECUTOR, AuthContextUtils.getUsername());\n         variables.put(TASK, task);\n \n@@ -345,7 +341,6 @@ protected WorkflowResult<Pair<UserMod, Boolean>> doUpdate(final User user, final\n     }\n \n     @Override\n-    @Transactional(rollbackFor = { Throwable.class })\n     protected WorkflowResult<Long> doSuspend(final User user) {\n         Set<String> performedTasks = doExecuteTask(user, \"suspend\", null);\n         updateStatus(user);\n@@ -661,7 +656,7 @@ protected WorkflowFormTO getFormTO(\n     public List<WorkflowFormTO> getForms() {\n         List<WorkflowFormTO> forms = new ArrayList<>();\n \n-        final String authUser = AuthContextUtils.getUsername();\n+        String authUser = AuthContextUtils.getUsername();\n         if (adminUser.equals(authUser)) {\n             forms.addAll(getForms(engine.getTaskService().createTaskQuery().\n                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n@@ -772,10 +767,9 @@ protected Pair<Task, TaskFormData> checkTask(final String taskId, final String a\n         return new ImmutablePair<>(task, formData);\n     }\n \n-    @Transactional\n     @Override\n     public WorkflowFormTO claimForm(final String taskId) {\n-        final String authUser = AuthContextUtils.getUsername();\n+        String authUser = AuthContextUtils.getUsername();\n         Pair<Task, TaskFormData> checked = checkTask(taskId, authUser);\n \n         if (!adminUser.equals(authUser)) {\n@@ -798,10 +792,9 @@ public WorkflowFormTO claimForm(final String taskId) {\n         return getFormTO(task, checked.getValue());\n     }\n \n-    @Transactional\n     @Override\n     public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form) {\n-        final String authUser = AuthContextUtils.getUsername();\n+        String authUser = AuthContextUtils.getUsername();\n         Pair<Task, TaskFormData> checked = checkTask(form.getTaskId(), authUser);\n \n         if (!checked.getKey().getOwner().equals(authUser)) {"},{"sha":"7122b84d0fbf30372246e7656e0bdca39e1861bb","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/UserWorkflowAdapter.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n \n /**\n  * Interface for calling underlying workflow implementations.\n@@ -96,12 +95,12 @@ WorkflowResult<Pair<Long, Boolean>> create(\n     WorkflowResult<Long> suspend(Long key);\n \n     /**\n-     * Suspend an user.\n+     * Suspend an user (used by internal authentication process)\n      *\n-     * @param user user to be suspended\n-     * @return user just suspended\n+     * @param key to be suspended\n+     * @return user just suspended and information whether to propagate suspension\n      */\n-    WorkflowResult<Long> suspend(User user);\n+    Pair<WorkflowResult<Long>, Boolean> internalSuspend(Long key);\n \n     /**\n      * Reactivate an user."},{"sha":"b829137da9741ead684f8c607a2599d4eb32e943","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":39,"deletions":15,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -28,13 +29,17 @@\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.EncryptorFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = { Throwable.class })\n public abstract class AbstractUserWorkflowAdapter implements UserWorkflowAdapter {\n \n+    protected static final Logger LOG = LoggerFactory.getLogger(UserWorkflowAdapter.class);\n+\n     @Autowired\n     protected UserDataBinder dataBinder;\n \n@@ -62,8 +67,8 @@ public String getPrefix() {\n     protected abstract WorkflowResult<Long> doActivate(User user, String token);\n \n     @Override\n-    public WorkflowResult<Long> activate(final Long userKey, final String token) {\n-        return doActivate(userDAO.authFind(userKey), token);\n+    public WorkflowResult<Long> activate(final Long key, final String token) {\n+        return doActivate(userDAO.authFind(key), token);\n     }\n \n     protected abstract WorkflowResult<Pair<UserMod, Boolean>> doUpdate(User user, UserMod userMod);\n@@ -76,23 +81,42 @@ public WorkflowResult<Pair<UserMod, Boolean>> update(final UserMod userMod) {\n     protected abstract WorkflowResult<Long> doSuspend(User user);\n \n     @Override\n-    public WorkflowResult<Long> suspend(final Long userKey) {\n-        return suspend(userDAO.authFind(userKey));\n-    }\n+    public WorkflowResult<Long> suspend(final Long key) {\n+        User user = userDAO.authFind(key);\n \n-    @Override\n-    public WorkflowResult<Long> suspend(final User user) {\n         // set suspended flag\n         user.setSuspended(Boolean.TRUE);\n \n         return doSuspend(user);\n     }\n \n+    @Override\n+    public Pair<WorkflowResult<Long>, Boolean> internalSuspend(final Long key) {\n+        User user = userDAO.authFind(key);\n+\n+        Pair<WorkflowResult<Long>, Boolean> result = null;\n+\n+        Pair<Boolean, Boolean> enforce = userDAO.enforcePolicies(user);\n+        if (enforce.getKey()) {\n+            LOG.debug(\"User {} {} is over the max failed logins\", user.getKey(), user.getUsername());\n+\n+            // reduce failed logins number to avoid multiple request       \n+            user.setFailedLogins(user.getFailedLogins() - 1);\n+\n+            // set suspended flag\n+            user.setSuspended(Boolean.TRUE);\n+\n+            result = ImmutablePair.of(doSuspend(user), enforce.getValue());\n+        }\n+\n+        return result;\n+    }\n+\n     protected abstract WorkflowResult<Long> doReactivate(User user);\n \n     @Override\n-    public WorkflowResult<Long> reactivate(final Long userKey) {\n-        final User user = userDAO.authFind(userKey);\n+    public WorkflowResult<Long> reactivate(final Long key) {\n+        User user = userDAO.authFind(key);\n \n         // reset failed logins\n         user.setFailedLogins(0);\n@@ -106,21 +130,21 @@ public WorkflowResult<Long> reactivate(final Long userKey) {\n     protected abstract void doRequestPasswordReset(User user);\n \n     @Override\n-    public void requestPasswordReset(final Long userKey) {\n-        doRequestPasswordReset(userDAO.authFind(userKey));\n+    public void requestPasswordReset(final Long key) {\n+        doRequestPasswordReset(userDAO.authFind(key));\n     }\n \n     protected abstract void doConfirmPasswordReset(User user, String token, String password);\n \n     @Override\n-    public void confirmPasswordReset(final Long userKey, final String token, final String password) {\n-        doConfirmPasswordReset(userDAO.authFind(userKey), token, password);\n+    public void confirmPasswordReset(final Long key, final String token, final String password) {\n+        doConfirmPasswordReset(userDAO.authFind(key), token, password);\n     }\n \n     protected abstract void doDelete(User user);\n \n     @Override\n-    public void delete(final Long userKey) {\n-        doDelete(userDAO.authFind(userKey));\n+    public void delete(final Long key) {\n+        doDelete(userDAO.authFind(key));\n     }\n }"},{"sha":"1a6d7dfddca5779ebf4e6ac4f91c0739e8cef76d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/AbstractCamelProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -68,7 +68,7 @@ protected void sendMessage(final String uri, final Object obj) {\n         template.send(uri, exchange);\n     }\n \n-    protected void sendMessage(final String uri, final Object obj, final Map<String, Object> properties) {\n+    protected void sendMessage(final String uri, final Object body, final Map<String, Object> properties) {\n         Exchange exchange = new DefaultExchange(getContext());\n \n         for (Map.Entry<String, Object> property : properties.entrySet()) {\n@@ -77,7 +77,7 @@ protected void sendMessage(final String uri, final Object obj, final Map<String,\n         }\n \n         DefaultMessage message = new DefaultMessage();\n-        message.setBody(obj);\n+        message.setBody(body);\n         exchange.setIn(message);\n         ProducerTemplate template = getContext().createProducerTemplate();\n         template.send(uri, exchange);"},{"sha":"fa0b84b12d2c753cdf179cf4212502f5d6e67501","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n@@ -319,13 +318,10 @@ public Pair<Long, List<PropagationStatus>> update(\n     }\n \n     @Override\n-    public void innerSuspend(final User user, final boolean propagate) {\n-        PollingConsumer pollingConsumer = getConsumer(\"direct:innerSuspendUserPort\");\n+    public void internalSuspend(final Long key) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:internalSuspendUserPort\");\n \n-        Map<String, Object> props = new HashMap<>();\n-        props.put(\"propagate\", propagate);\n-\n-        sendMessage(\"direct:innerSuspendUser\", user.getKey(), props);\n+        sendMessage(\"direct:internalSuspendUser\", key);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"73e63adff098d0bb299ff6704f408b04c78f663c","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserInternalSuspendProcessor.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -32,7 +32,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class UserInnerSuspendProcessor implements Processor {\n+public class UserInternalSuspendProcessor implements Processor {\n \n     @Autowired\n     protected PropagationManager propagationManager;\n@@ -43,17 +43,17 @@ public class UserInnerSuspendProcessor implements Processor {\n     @Override\n     public void process(final Exchange exchange) {\n         @SuppressWarnings(\"unchecked\")\n-        WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n-        Boolean propagate = exchange.getProperty(\"propagate\", Boolean.class);\n+        Pair<WorkflowResult<Long>, Boolean> updated = (Pair) exchange.getIn().getBody();\n \n-        if (propagate) {\n+        // propagate suspension if and only if it is required by policy\n+        if (updated != null && updated.getValue()) {\n             UserMod userMod = new UserMod();\n-            userMod.setKey(updated.getResult());\n+            userMod.setKey(updated.getKey().getResult());\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                     new WorkflowResult<Pair<UserMod, Boolean>>(\n                             new ImmutablePair<>(userMod, Boolean.FALSE),\n-                            updated.getPropByRes(), updated.getPerformedTasks()));\n+                            updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n             taskExecutor.execute(tasks);\n         }\n     }","previous_filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserInnerSuspendProcessor.java"},{"sha":"38e48f317b90f4ef0c64d923197910eb5eecab74","filename":"ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -198,18 +198,18 @@ under the License.\n     <to uri=\"direct:deprovisionPort\"/>              \n   </route>\n     \n-  <route id=\"innerSuspendUser\">\n-    <from uri=\"direct:innerSuspendUser\"/>\n+  <route id=\"internalSuspendUser\">\n+    <from uri=\"direct:internalSuspendUser\"/>\n     <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n-      <process ref=\"userInnerSuspendProcessor\"/>\n-      <to uri=\"direct:innerSuspendUserPort\"/>\n+      <bean ref=\"uwfAdapter\" method=\"internalSuspend(${body})\"/>\n+      <process ref=\"userInternalSuspendProcessor\"/>\n+      <to uri=\"direct:internalSuspendUserPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n         <handled>\n           <constant>false</constant>\n         </handled>\n-        <to uri=\"direct:innerSuspendUserPort\"/>\n+        <to uri=\"direct:internalSuspendUserPort\"/>\n       </doCatch>\n     </doTry>  \n   </route>"},{"sha":"637863112525d3b4acb642740255d2221d2587f9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -258,7 +258,7 @@ public void checkFailedLogins() {\n         assertEquals(0, getFailedLogins(userService4, userId));\n     }\n \n-    //@Test\n+    @Test\n     public void checkUserSuspension() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"checkSuspension@syncope.apache.org\");\n         userTO.setRealm(\"/odd\");\n@@ -292,8 +292,9 @@ public void checkUserSuspension() {\n         assertReadFails(goodPwdClient);\n \n         StatusMod reactivate = new StatusMod();\n+        reactivate.setKey(userTO.getKey());\n         reactivate.setType(StatusMod.ModType.REACTIVATE);\n-        userTO = userService.status(userTO.getKey(), reactivate).readEntity(UserTO.class);\n+        userTO = userService.status(reactivate).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n "},{"sha":"048259d09b11b3ba54ce7d84b7ecf857c9b1a0e6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":20,"deletions":13,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -818,9 +818,10 @@ public void createActivate() {\n         assertEquals(\"created\", userTO.getStatus());\n \n         StatusMod statusMod = new StatusMod();\n+        statusMod.setKey(userTO.getKey());\n         statusMod.setType(StatusMod.ModType.ACTIVATE);\n         statusMod.setToken(userTO.getToken());\n-        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusMod).readEntity(UserTO.class);\n \n         assertNotNull(userTO);\n         assertNull(userTO.getToken());\n@@ -844,14 +845,16 @@ public void suspendReactivate() {\n                 : \"created\", userTO.getStatus());\n \n         StatusMod statusMod = new StatusMod();\n+        statusMod.setKey(userTO.getKey());\n         statusMod.setType(StatusMod.ModType.SUSPEND);\n-        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         statusMod = new StatusMod();\n+        statusMod.setKey(userTO.getKey());\n         statusMod.setType(StatusMod.ModType.REACTIVATE);\n-        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n     }\n@@ -875,50 +878,53 @@ public void suspendReactivateOnResource() {\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n-        long userId = userTO.getKey();\n+        long userKey = userTO.getKey();\n \n         // Suspend with effect on syncope, ldap and db => user should be suspended in syncope and all resources\n         StatusMod statusMod = new StatusMod();\n+        statusMod.setKey(userKey);\n         statusMod.setType(StatusMod.ModType.SUSPEND);\n         statusMod.setOnSyncope(true);\n         statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n         statusMod.getResourceNames().add(RESOURCE_NAME_LDAP);\n-        userTO = userService.status(userId, statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         ConnObjectTO connObjectTO =\n-                resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userId);\n+                resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userKey);\n         assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userId);\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), userKey);\n         assertNotNull(connObjectTO);\n \n         // Suspend and reactivate only on ldap => db and syncope should still show suspended\n         statusMod = new StatusMod();\n+        statusMod.setKey(userKey);\n         statusMod.setType(StatusMod.ModType.SUSPEND);\n         statusMod.setOnSyncope(false);\n         statusMod.getResourceNames().add(RESOURCE_NAME_LDAP);\n-        userService.status(userId, statusMod);\n+        userService.status(statusMod);\n         statusMod.setType(StatusMod.ModType.REACTIVATE);\n-        userTO = userService.status(userId, statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userId);\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userKey);\n         assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n         // Reactivate on syncope and db => syncope and db should show the user as active\n         statusMod = new StatusMod();\n+        statusMod.setKey(userKey);\n         statusMod.setType(StatusMod.ModType.REACTIVATE);\n         statusMod.setOnSyncope(true);\n         statusMod.getResourceNames().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = userService.status(userId, statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userId);\n+        connObjectTO = resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userKey);\n         assertTrue(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n     }\n \n@@ -1795,7 +1801,8 @@ public void link() {\n         final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n         associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class));\n \n-        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.LINK, associationMod).readEntity(BulkActionResult.class));\n+        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.LINK, associationMod).readEntity(\n+                BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);"},{"sha":"92bca4600cccd75d41e2559c65580c2a925a6482","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -134,8 +134,9 @@ public void issueSYNCOPE260() {\n         // suspend/reactivate user and check virtual attribute value (unchanged)\n         // ----------------------------------\n         StatusMod statusMod = new StatusMod();\n+        statusMod.setKey(userTO.getKey());\n         statusMod.setType(StatusMod.ModType.SUSPEND);\n-        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -144,8 +145,9 @@ public void issueSYNCOPE260() {\n         assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n \n         statusMod = new StatusMod();\n+        statusMod.setKey(userTO.getKey());\n         statusMod.setType(StatusMod.ModType.REACTIVATE);\n-        userTO = userService.status(userTO.getKey(), statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusMod).readEntity(UserTO.class);\n         assertEquals(\"active\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());"},{"sha":"e5d21f40d3a56edae0b680f32d71f867ffa08a5d","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5cf6aae8274d8e10b884ec9faeca54f623234836/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5cf6aae8274d8e10b884ec9faeca54f623234836/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=5cf6aae8274d8e10b884ec9faeca54f623234836","patch":"@@ -336,7 +336,7 @@ under the License.\n     <spring-security.version>4.0.2.RELEASE</spring-security.version>\n \n     <openjpa.version>2.4.0</openjpa.version>\n-    <commons-dbcp.version>2.1</commons-dbcp.version>\n+    <commons-dbcp.version>2.1.1</commons-dbcp.version>\n     <hibernate-validator.version>5.2.1.Final</hibernate-validator.version>\n \n     <jasypt.version>1.9.2</jasypt.version>"}]}