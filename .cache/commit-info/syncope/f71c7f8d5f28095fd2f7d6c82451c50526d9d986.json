{"sha":"f71c7f8d5f28095fd2f7d6c82451c50526d9d986","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY3MWM3ZjhkNWYyODA5NWZkMmY3ZDZjODI0NTFjNTA1MjZkOWQ5ODY=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-06-05T10:25:35Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-06-05T10:25:35Z"},"message":"SYNCOPE-1566: Manage GAuth Credentials/Accounts (#193)","tree":{"sha":"90a245d051ad2a4ddfd805827c9b7a552412d9da","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/90a245d051ad2a4ddfd805827c9b7a552412d9da"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f71c7f8d5f28095fd2f7d6c82451c50526d9d986","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe2h2fCRBK7hj4Ov3rIwAAdHIIABE87MrEiLjIZbbgVuJAG4sg\nEl8oAN3r5ZU7VLuUiZuTpw7SS8+ZyjxHqxB9WZxEAFNYd1NwhjQo3IvusjPm+XjH\ncKbOryTn7it0s98jVnjo8Gv+Ed42l9IWjsb2K0gcmcOvF3Zmn4YiOBUcaH1VRkZo\nmiAaZ0aFcU705bhxIyVPqO1xjUmsx3ZPr46HGCUivZyjqUXu1tV2GoJ/lF8nI9ZG\n5z6fl5IbVHZPRIAMMSsFFt2F1kgpdOyC2VcSm39acVIKk72qy67rFIIi+BnBd47l\n+CK7BWBpXEHhzNib1gfdgKJheyFMS0Ki9dPm+pxRI/20hw5G7q9+0xiebdLjUiU=\n=S5wV\n-----END PGP SIGNATURE-----\n","payload":"tree 90a245d051ad2a4ddfd805827c9b7a552412d9da\nparent cdf05f7abd83d6f36c1eb2d75f77b194fc84ddb9\nauthor Misagh Moayyed <mm1844@gmail.com> 1591352735 +0430\ncommitter GitHub <noreply@github.com> 1591352735 +0430\n\nSYNCOPE-1566: Manage GAuth Credentials/Accounts (#193)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f71c7f8d5f28095fd2f7d6c82451c50526d9d986","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f71c7f8d5f28095fd2f7d6c82451c50526d9d986","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"cdf05f7abd83d6f36c1eb2d75f77b194fc84ddb9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cdf05f7abd83d6f36c1eb2d75f77b194fc84ddb9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cdf05f7abd83d6f36c1eb2d75f77b194fc84ddb9"}],"stats":{"total":955,"additions":929,"deletions":26},"files":[{"sha":"6577bd9cf8d5450a802357b5bf1917fb7aa72522","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -86,6 +86,16 @@ public final class AMEntitlement {\n \n     public static final String AUTH_PROFILE_LIST = \"AUTH_PROFILE_LIST\";\n \n+    public static final String GOOGLE_MFA_DELETE_ACCOUNT = \"GOOGLE_MFA_DELETE_ACCOUNT\";\n+\n+    public static final String GOOGLE_MFA_SAVE_ACCOUNT = \"GOOGLE_MFA_SAVE_ACCOUNT\";\n+\n+    public static final String GOOGLE_MFA_UPDATE_ACCOUNT = \"GOOGLE_MFA_UPDATE_ACCOUNT\";\n+\n+    public static final String GOOGLE_MFA_READ_ACCOUNT = \"GOOGLE_MFA_READ_ACCOUNT\";\n+\n+    public static final String GOOGLE_MFA_COUNT_ACCOUNTS = \"GOOGLE_MFA_COUNT_ACCOUNTS\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"d5c9c89fa627c20b59397e7478273e7faad5ab49","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GoogleMfaAuthAccount.java","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthAccount.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -0,0 +1,183 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.lib.types;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class GoogleMfaAuthAccount implements BaseBean {\n+    private static final long serialVersionUID = 1274073386484048953L;\n+\n+    private String key;\n+\n+    private String secretKey;\n+\n+    private int validationCode;\n+\n+    private List<Integer> scratchCodes = new ArrayList<>(0);\n+\n+    private String owner;\n+\n+    private Date registrationDate;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    public String getSecretKey() {\n+        return secretKey;\n+    }\n+\n+    public void setSecretKey(final String secretKey) {\n+        this.secretKey = secretKey;\n+    }\n+\n+    public int getValidationCode() {\n+        return validationCode;\n+    }\n+\n+    public void setValidationCode(final int validationCode) {\n+        this.validationCode = validationCode;\n+    }\n+\n+    public List<Integer> getScratchCodes() {\n+        return scratchCodes;\n+    }\n+\n+    public void setScratchCodes(final List<Integer> scratchCodes) {\n+        this.scratchCodes = scratchCodes;\n+    }\n+\n+    public Date getRegistrationDate() {\n+        return Optional.ofNullable(this.registrationDate).\n+            map(date -> new Date(date.getTime())).orElse(null);\n+    }\n+\n+    public void setRegistrationDate(final Date registrationDate) {\n+        this.registrationDate = Optional.ofNullable(registrationDate).\n+            map(date -> new Date(date.getTime())).orElse(null);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+            .appendSuper(super.hashCode())\n+            .append(key)\n+            .append(secretKey)\n+            .append(owner)\n+            .append(scratchCodes)\n+            .append(validationCode)\n+            .append(registrationDate)\n+            .toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        GoogleMfaAuthAccount rhs = (GoogleMfaAuthAccount) obj;\n+        return new EqualsBuilder()\n+            .appendSuper(super.equals(obj))\n+            .append(this.key, rhs.key)\n+            .append(this.secretKey, rhs.secretKey)\n+            .append(this.owner, rhs.owner)\n+            .append(this.scratchCodes, rhs.scratchCodes)\n+            .append(this.registrationDate, rhs.registrationDate)\n+            .append(this.validationCode, rhs.validationCode)\n+            .isEquals();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .append(\"key\", key)\n+            .append(\"secretKey\", secretKey)\n+            .append(\"owner\", owner)\n+            .append(\"scratchCodes\", scratchCodes)\n+            .append(\"registrationDate\", registrationDate)\n+            .append(\"validationCode\", validationCode)\n+            .toString();\n+    }\n+\n+    public static class Builder {\n+\n+        private final GoogleMfaAuthAccount instance = new GoogleMfaAuthAccount();\n+\n+        public GoogleMfaAuthAccount.Builder registrationDate(final Date date) {\n+            instance.setRegistrationDate(date);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder scratchCodes(final List<Integer> codes) {\n+            instance.setScratchCodes(codes);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder secretKey(final String key) {\n+            instance.setSecretKey(key);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder validationCode(final Integer code) {\n+            instance.setValidationCode(code);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public GoogleMfaAuthAccount build() {\n+            return instance;\n+        }\n+    }\n+}"},{"sha":"e7f9ade019a179bb12846004bc7ac97e996303f6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GoogleMfaAuthToken.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FGoogleMfaAuthToken.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"27338b18f312eec97c59dce0d1a3709abfffae08","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthAccountService.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Tag(name = \"Google MFA Accounts\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"wa/gauth\")\n+public interface GoogleMfaAuthAccountService extends JAXRSService {\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"accts/owners/${owner}\")\n+    Response deleteAccountFor(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"accts/${key}\")\n+    Response deleteAccountBy(@NotNull @PathParam(\"key\") String key);\n+\n+    @DELETE\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"accts\")\n+    Response deleteAll();\n+\n+    @ApiResponses({\n+        @ApiResponse(responseCode = \"201\",\n+            description = \"GoogleMfaAuthAccount successfully created\", headers = {\n+            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+            @Schema(type = \"string\"),\n+                description = \"UUID generated for the entity created\")})})\n+    @POST\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"accts\")\n+    Response save(@NotNull GoogleMfaAuthAccount acct);\n+\n+    @PUT\n+    @Path(\"accts\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    void update(@NotNull GoogleMfaAuthAccount acct);\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"accts/owners/${owner}\")\n+    GoogleMfaAuthAccount findAccountFor(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @GET\n+    @Path(\"accts/{key}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    GoogleMfaAuthAccount findAccountBy(@NotNull @PathParam(\"key\") String key);\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"accts/count\")\n+    PagedResult<GoogleMfaAuthAccount> countAll();\n+\n+    @GET\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Path(\"accts\")\n+    PagedResult<GoogleMfaAuthAccount> list();\n+}"},{"sha":"305ae83d76a2f2163e6658e3738305b9d9254d65","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthTokenService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthTokenService.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"06227b4bd42d929ff2823f173685c48976bd3d06","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthProfileLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthProfileLogic.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"a534a02444a90e8d6867716692d02d6f1cb66f93","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthAccountLogic.java","status":"added","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthAccountLogic.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.to.AuthProfileTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.apache.syncope.core.provisioning.api.data.AuthProfileDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+@Component\n+public class GoogleMfaAuthAccountLogic extends AbstractTransactionalLogic<AuthProfileTO> {\n+    @Autowired\n+    private AuthProfileDAO authProfileDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AuthProfileDataBinder authProfileDataBinder;\n+\n+    @Override\n+    protected AuthProfileTO resolveReference(final Method method, final Object... args)\n+        throws UnresolvedReferenceException {\n+        String key = null;\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AuthProfileTO) {\n+                    key = ((AuthProfileTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return authProfileDAO.findByKey(key).\n+                    map(authProfileDataBinder::getAuthProfileTO).\n+                    orElseThrow();\n+            } catch (final Throwable e) {\n+                LOG.debug(\"Unresolved reference\", e);\n+                throw new UnresolvedReferenceException(e);\n+            }\n+        }\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void deleteAccountFor(final String owner) {\n+        authProfileDAO.findByOwner(owner).ifPresent(profile -> {\n+            profile.setGoogleMfaAuthAccount(null);\n+            authProfileDAO.save(profile);\n+        });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void deleteAll() {\n+        authProfileDAO.findAll().\n+            forEach(profile -> {\n+                profile.setGoogleMfaAuthAccount(null);\n+                authProfileDAO.save(profile);\n+            });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_SAVE_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public GoogleMfaAuthAccount save(final GoogleMfaAuthAccount acct) {\n+        AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n+            orElseGet(() -> {\n+                final AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+                authProfile.setOwner(acct.getOwner());\n+                return authProfile;\n+            });\n+\n+        if (acct.getKey() == null) {\n+            acct.setKey(UUID.randomUUID().toString());\n+        }\n+        profile.setGoogleMfaAuthAccount(acct);\n+        return authProfileDAO.save(profile).getGoogleMfaAuthAccount();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_UPDATE_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void update(final GoogleMfaAuthAccount acct) {\n+        AuthProfile profile = authProfileDAO.findByOwner(acct.getOwner()).\n+            orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + acct.getOwner()));\n+        profile.setGoogleMfaAuthAccount(acct);\n+        authProfileDAO.save(profile).getGoogleMfaAuthAccount();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public GoogleMfaAuthAccount findAccountFor(final String owner) {\n+        return authProfileDAO.findByOwner(owner).\n+            stream().\n+            map(AuthProfile::getGoogleMfaAuthAccount).\n+            filter(Objects::nonNull).\n+            findFirst().\n+            orElseThrow(() -> new NotFoundException(\"Could not find account for Owner \" + owner));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_READ_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public GoogleMfaAuthAccount findAccountBy(final String key) {\n+        return authProfileDAO.findAll().\n+            stream().\n+            map(AuthProfile::getGoogleMfaAuthAccount).\n+            filter(Objects::nonNull).\n+            filter(acct -> acct.getKey().equals(key)).\n+            findFirst().\n+            orElse(null);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_COUNT_ACCOUNTS + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public long countAll() {\n+        return authProfileDAO.findAll().\n+            stream().\n+            filter(profile -> profile.getGoogleMfaAuthAccount() != null).\n+            count();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.GOOGLE_MFA_DELETE_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void deleteAccountBy(final String key) {\n+        authProfileDAO.findAll().\n+            stream().\n+            filter(profile -> profile.getGoogleMfaAuthAccount() != null\n+                && profile.getGoogleMfaAuthAccount().getKey().equals(key)).\n+            findFirst().\n+            ifPresent(profile -> {\n+                profile.setGoogleMfaAuthAccount(null);\n+                authProfileDAO.save(profile);\n+            });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<GoogleMfaAuthAccount> list() {\n+        return authProfileDAO.findAll().\n+            stream().\n+            map(AuthProfile::getGoogleMfaAuthAccount).\n+            filter(Objects::nonNull).\n+            collect(Collectors.toList());\n+    }\n+}"},{"sha":"9b43f6c11cf139aeefae47576425da6271f43c72","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GoogleMfaAuthTokenLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGoogleMfaAuthTokenLogic.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"38a43d22f7c684b37d69a094d9ce39c888ae128a","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthAccountServiceImpl.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthAccountServiceImpl.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n+import org.apache.syncope.core.logic.GoogleMfaAuthAccountLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+\n+@Service\n+public class GoogleMfaAuthAccountServiceImpl extends AbstractServiceImpl implements GoogleMfaAuthAccountService {\n+    @Autowired\n+    private GoogleMfaAuthAccountLogic logic;\n+\n+    @Override\n+    public Response deleteAccountFor(final String owner) {\n+        logic.deleteAccountFor(owner);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response deleteAccountBy(final String key) {\n+        logic.deleteAccountBy(key);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response deleteAll() {\n+        logic.deleteAll();\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public Response save(final GoogleMfaAuthAccount acct) {\n+        final GoogleMfaAuthAccount token = logic.save(acct);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(token.getKey()).build();\n+        return Response.created(location).\n+            header(RESTHeaders.RESOURCE_KEY, token.getKey()).\n+            build();\n+    }\n+\n+    @Override\n+    public void update(final GoogleMfaAuthAccount acct) {\n+        logic.update(acct);\n+    }\n+\n+    @Override\n+    public GoogleMfaAuthAccount findAccountFor(final String owner) {\n+        return logic.findAccountFor(owner);\n+    }\n+\n+    @Override\n+    public GoogleMfaAuthAccount findAccountBy(final String key) {\n+        return logic.findAccountBy(key);\n+    }\n+\n+    @Override\n+    public PagedResult<GoogleMfaAuthAccount> countAll() {\n+        PagedResult<GoogleMfaAuthAccount> result = new PagedResult<>();\n+        result.setSize(Long.valueOf(logic.countAll()).intValue());\n+        result.setPage(1);\n+        result.setTotalCount(result.getSize());\n+        return result;\n+    }\n+\n+    @Override\n+    public PagedResult<GoogleMfaAuthAccount> list() {\n+        PagedResult<GoogleMfaAuthAccount> result = new PagedResult<>();\n+        result.setSize(Long.valueOf(logic.countAll()).intValue());\n+        result.setPage(1);\n+        result.setTotalCount(result.getSize());\n+        result.getResult().addAll(logic.list());\n+        return result;\n+    }\n+}"},{"sha":"4f7b7963f6bf2dc4765c8e0c2d576e4cebc361d2","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/GoogleMfaAuthTokenServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FGoogleMfaAuthTokenServiceImpl.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"5e4070b560f1a200a74cf2ebc7a6523ea638ff8d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/AuthProfileDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FAuthProfileDAO.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"73105cb7c6b810d270eb54af9db00e2d2cd484e1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthProfile.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n@@ -19,6 +19,7 @@\n \n package org.apache.syncope.core.persistence.api.entity.auth;\n \n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n \n@@ -34,5 +35,9 @@ public interface AuthProfile extends Entity {\n \n     void setGoogleMfaAuthTokens(List<GoogleMfaAuthToken> tokens);\n \n+    GoogleMfaAuthAccount getGoogleMfaAuthAccount();\n+\n+    void setGoogleMfaAuthAccount(GoogleMfaAuthAccount account);\n+\n     void add(GoogleMfaAuthToken token);\n }"},{"sha":"d2b6e4201a7a21180a934b696f401505424d54bd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n@@ -34,14 +35,16 @@\n import java.util.List;\n \n @Entity\n-@Table(name = JPAAuthProfile.TABLE, uniqueConstraints =\n-    @UniqueConstraint(columnNames = { \"owner\" }))\n+@Table(name = JPAAuthProfile.TABLE, uniqueConstraints = @UniqueConstraint(columnNames = {\"owner\"}))\n public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthProfile {\n \n     public static final String TABLE = \"AuthProfile\";\n \n     private static final long serialVersionUID = 57352617217394093L;\n \n+    @Lob\n+    private String googleMfaAuthAccount;\n+\n     @Lob\n     private String googleMfaAuthTokens;\n \n@@ -71,6 +74,19 @@ public void setGoogleMfaAuthTokens(final List<GoogleMfaAuthToken> tokens) {\n         this.googleMfaAuthTokens = POJOHelper.serialize(tokens);\n     }\n \n+    @Override\n+    public GoogleMfaAuthAccount getGoogleMfaAuthAccount() {\n+        return googleMfaAuthAccount == null\n+            ? null\n+            : POJOHelper.deserialize(googleMfaAuthAccount, new TypeReference<GoogleMfaAuthAccount>() {\n+        });\n+    }\n+\n+    @Override\n+    public void setGoogleMfaAuthAccount(final GoogleMfaAuthAccount account) {\n+        this.googleMfaAuthAccount = POJOHelper.serialize(account);\n+    }\n+\n     @Override\n     public void add(final GoogleMfaAuthToken token) {\n         checkType(token, GoogleMfaAuthToken.class);"},{"sha":"6341e3c74733f896638c66a48538333981129d7d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n import org.apache.syncope.core.persistence.api.dao.auth.AuthProfileDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -28,9 +29,11 @@\n import org.springframework.transaction.annotation.Transactional;\n \n import java.util.Date;\n+import java.util.List;\n import java.util.Optional;\n import java.util.UUID;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n@@ -65,6 +68,30 @@ public void googleMfaToken() {\n         assertFalse(authProfileDAO.findByOwner(id).isPresent());\n     }\n \n+    @Test\n+    public void googleMfaAccount() {\n+        String id = UUID.randomUUID().toString();\n+\n+        createAuthProfileWithAccount(id);\n+\n+        Optional<AuthProfile> result = authProfileDAO.findByOwner(id);\n+        assertTrue(result.isPresent());\n+\n+        assertFalse(authProfileDAO.findAll().isEmpty());\n+\n+        AuthProfile authProfile = result.get();\n+        result = authProfileDAO.findByKey(authProfile.getKey());\n+        assertTrue(result.isPresent());\n+\n+        String secret = UUID.randomUUID().toString();\n+        GoogleMfaAuthAccount googleMfaAuthAccount = authProfile.getGoogleMfaAuthAccount();\n+        googleMfaAuthAccount.setSecretKey(secret);\n+        authProfile.setGoogleMfaAuthAccount(googleMfaAuthAccount);\n+        authProfileDAO.save(authProfile);\n+\n+        assertEquals(secret, authProfileDAO.findByOwner(id).get().getGoogleMfaAuthAccount().getSecretKey());\n+    }\n+\n     private AuthProfile createAuthProfileWithToken(final String owner, final Integer otp) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);\n@@ -76,4 +103,18 @@ private AuthProfile createAuthProfileWithToken(final String owner, final Integer\n         profile.add(token);\n         return authProfileDAO.save(profile);\n     }\n+\n+    private AuthProfile createAuthProfileWithAccount(final String owner) {\n+        AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n+        profile.setOwner(owner);\n+        GoogleMfaAuthAccount token = new GoogleMfaAuthAccount.Builder()\n+            .registrationDate(new Date())\n+            .scratchCodes(List.of(1, 2, 3, 4, 5))\n+            .secretKey(UUID.randomUUID().toString())\n+            .validationCode(123456)\n+            .owner(owner)\n+            .build();\n+        profile.setGoogleMfaAuthAccount(token);\n+        return authProfileDAO.save(profile);\n+    }\n }"},{"sha":"d404c0e5763f9e5441e8ab3a5a067983966b0b54","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthProfileDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthProfileDataBinderImpl.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"29d6104b480f19cdef06229c0c496a5cf1e149e4","filename":"fit/build-tools/src/main/java/org/apache/directory/server/core/normalization/NormalizationInterceptor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdirectory%2Fserver%2Fcore%2Fnormalization%2FNormalizationInterceptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdirectory%2Fserver%2Fcore%2Fnormalization%2FNormalizationInterceptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fdirectory%2Fserver%2Fcore%2Fnormalization%2FNormalizationInterceptor.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  *  \"License\"); you may not use this file except in compliance\n  *  with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  *  Unless required by applicable law or agreed to in writing,\n  *  software distributed under the License is distributed on an"},{"sha":"3f0764dcd91b1231a76d7c0a2488e3f83725ce4c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -114,6 +114,7 @@\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreConfService;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n import org.apache.syncope.common.rest.api.service.SAML2SPMetadataConfService;\n@@ -338,6 +339,8 @@ public abstract class AbstractITCase {\n \n     protected static GoogleMfaAuthTokenService googleMfaAuthTokenService;\n \n+    protected static GoogleMfaAuthAccountService googleMfaAuthAccountService;\n+\n     protected static AuthProfileService authProfileService;\n \n     @BeforeAll\n@@ -418,6 +421,7 @@ public static void restSetup() {\n         saml2SPKeystoreService = adminClient.getService(SAML2SPKeystoreService.class);\n         saml2SPKeystoreConfService = adminClient.getService(SAML2SPKeystoreConfService.class);\n         googleMfaAuthTokenService = adminClient.getService(GoogleMfaAuthTokenService.class);\n+        googleMfaAuthAccountService = adminClient.getService(GoogleMfaAuthAccountService.class);\n         authProfileService = adminClient.getService(AuthProfileService.class);\n     }\n "},{"sha":"b8993077304ab615015bcdf94792369bae27e763","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GoogleMfaAuthAccountITCase.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthAccountITCase.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class GoogleMfaAuthAccountITCase extends AbstractITCase {\n+\n+    private static GoogleMfaAuthAccount createGoogleMfaAuthAccount() {\n+        String id = UUID.randomUUID().toString();\n+        return new GoogleMfaAuthAccount.Builder()\n+            .registrationDate(new Date())\n+            .scratchCodes(List.of(1, 2, 3, 4, 5))\n+            .secretKey(UUID.randomUUID().toString())\n+            .validationCode(123456)\n+            .owner(id)\n+            .build();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        googleMfaAuthAccountService.deleteAll();\n+    }\n+\n+    @Test\n+    public void create() {\n+        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n+        assertDoesNotThrow(() -> {\n+            Response response = googleMfaAuthAccountService.save(acct);\n+            if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+                if (ex != null) {\n+                    throw ex;\n+                }\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void count() {\n+        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n+        googleMfaAuthAccountService.save(acct);\n+        assertEquals(1, googleMfaAuthAccountService.countAll().getTotalCount());\n+        assertNotNull(googleMfaAuthAccountService.findAccountFor(acct.getOwner()));\n+    }\n+\n+    @Test\n+    public void deleteByOwner() {\n+        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n+        Response response = googleMfaAuthAccountService.save(acct);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(key);\n+        response = googleMfaAuthAccountService.deleteAccountFor(acct.getOwner());\n+        assertEquals(response.getStatusInfo().getStatusCode(), Response.Status.NO_CONTENT.getStatusCode());\n+        assertThrows(SyncopeClientException.class, () -> googleMfaAuthAccountService.findAccountFor(acct.getOwner()));\n+    }\n+\n+    @Test\n+    public void update() {\n+        GoogleMfaAuthAccount acct = createGoogleMfaAuthAccount();\n+        Response response = googleMfaAuthAccountService.save(acct);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        acct = googleMfaAuthAccountService.findAccountBy(key);\n+        acct.setSecretKey(\"NewSecret\");\n+        acct.setScratchCodes(List.of(9, 8, 7, 6, 5));\n+        googleMfaAuthAccountService.update(acct);\n+        assertEquals(1, googleMfaAuthAccountService.countAll().getTotalCount());\n+        acct = googleMfaAuthAccountService.findAccountFor(acct.getOwner());\n+        assertEquals(acct.getSecretKey(), acct.getSecretKey());\n+        googleMfaAuthAccountService.deleteAccountBy(acct.getKey());\n+    }\n+}"},{"sha":"1a40ee57d162f0efd7338bc277e2c88508fed21e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GoogleMfaAuthTokenITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGoogleMfaAuthTokenITCase.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"f5bad0e8b824612328680ced545e8910744cda1d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAApplication.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAApplication.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -21,6 +21,7 @@\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.CasConfigurationPropertiesValidator;\n \n+import org.apache.syncope.wa.starter.config.SyncopeWARefreshContextJob;\n import org.quartz.JobBuilder;\n import org.quartz.JobDetail;\n import org.quartz.JobKey;"},{"sha":"90567a4dc38a4e804631fdcd141663434d6e6f9d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManager.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa.starter;\n+package org.apache.syncope.wa.starter.audit;\n \n import java.time.LocalDate;\n import java.util.Map;\n@@ -43,7 +43,7 @@ public class SyncopeWAAuditTrailManager extends AbstractAuditTrailManager {\n \n     private final WARestClient waRestClient;\n \n-    SyncopeWAAuditTrailManager(final WARestClient restClient) {\n+    public SyncopeWAAuditTrailManager(final WARestClient restClient) {\n         super(true);\n         this.waRestClient = restClient;\n     }","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAAuditTrailManager.java"},{"sha":"be141960f6957d6cd273ccf037034089e69af321","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"renamed","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -16,10 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa.starter;\n+package org.apache.syncope.wa.starter.config;\n \n import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.otp.repository.credentials.OneTimeTokenCredentialRepository;\n import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n import org.apereo.cas.services.ServiceRegistryListener;\n@@ -30,10 +31,13 @@\n import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n import org.apereo.cas.util.crypto.CipherExecutor;\n \n+import com.warrenstrange.googleauth.IGoogleAuthenticator;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.audit.SyncopeWAAuditTrailManager;\n+import org.apache.syncope.wa.starter.gauth.credential.SyncopeWAGoogleMfaAuthCredentialRepository;\n import org.apache.syncope.wa.starter.gauth.token.SyncopeWAGoogleMfaAuthTokenRepository;\n import org.apache.syncope.wa.starter.mapping.AccessMapFor;\n import org.apache.syncope.wa.starter.mapping.AccessMapper;\n@@ -47,6 +51,7 @@\n import org.apache.syncope.wa.starter.pac4j.saml.SyncopeWASAML2ClientCustomizer;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n+import org.apache.syncope.wa.starter.services.SyncopeWAServiceRegistry;\n import org.pac4j.core.client.Client;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -132,7 +137,7 @@ public RegisteredServiceMapper registeredServiceMapper() {\n     public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n         final WARestClient restClient, final RegisteredServiceMapper registeredServiceMapper) {\n \n-        SyncopeServiceRegistry registry = new SyncopeServiceRegistry(\n+        SyncopeWAServiceRegistry registry = new SyncopeWAServiceRegistry(\n             restClient, registeredServiceMapper, applicationContext, serviceRegistryListeners);\n         return plan -> plan.registerServiceRegistry(registry);\n     }\n@@ -176,6 +181,13 @@ public OneTimeTokenRepository oneTimeTokenAuthenticatorTokenRepository(final WAR\n             casProperties.getAuthn().getMfa().getGauth().getTimeStepSize());\n     }\n \n+    @Bean\n+    @Autowired\n+    public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n+        final IGoogleAuthenticator googleAuthenticatorInstance, final WARestClient restClient) {\n+        return new SyncopeWAGoogleMfaAuthCredentialRepository(restClient, googleAuthenticatorInstance);\n+    }\n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java"},{"sha":"b4c72c09c25f340089aef2e7ccf5b0b4bea618b7","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWARefreshContextJob.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWARefreshContextJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWARefreshContextJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWARefreshContextJob.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa.starter;\n+package org.apache.syncope.wa.starter.config;\n \n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.commons.lang.StringUtils;","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWARefreshContextJob.java"},{"sha":"584ee7f907459138d7b3f62895442249f2dba98e","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/credential/SyncopeWAGoogleMfaAuthCredentialRepository.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Fcredential%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Fcredential%2FSyncopeWAGoogleMfaAuthCredentialRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Fcredential%2FSyncopeWAGoogleMfaAuthCredentialRepository.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.gauth.credential;\n+\n+import org.apereo.cas.authentication.OneTimeTokenAccount;\n+import org.apereo.cas.gauth.credential.BaseGoogleAuthenticatorTokenCredentialRepository;\n+import org.apereo.cas.gauth.credential.GoogleAuthenticatorAccount;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n+\n+import com.warrenstrange.googleauth.IGoogleAuthenticator;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.gauth.token.SyncopeWAGoogleMfaAuthTokenRepository;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class SyncopeWAGoogleMfaAuthCredentialRepository extends BaseGoogleAuthenticatorTokenCredentialRepository {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAGoogleMfaAuthTokenRepository.class);\n+\n+    private final WARestClient waRestClient;\n+\n+    public SyncopeWAGoogleMfaAuthCredentialRepository(final WARestClient waRestClient,\n+                                                         final IGoogleAuthenticator googleAuthenticator) {\n+        super(CipherExecutor.noOpOfStringToString(), googleAuthenticator);\n+        this.waRestClient = waRestClient;\n+    }\n+\n+    @Override\n+    public OneTimeTokenAccount get(final String username) {\n+        try {\n+            GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+                getService(GoogleMfaAuthAccountService.class);\n+            GoogleMfaAuthAccount account = googleService.findAccountFor(username);\n+            return new GoogleAuthenticatorAccount(account.getOwner(),\n+                account.getSecretKey(), account.getValidationCode(), account.getScratchCodes());\n+        } catch (final SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                LOG.info(\"Could not locate account for owner {}\", username);\n+            } else {\n+                LOG.error(e.getMessage(), e);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Collection<? extends OneTimeTokenAccount> load() {\n+        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthAccountService.class);\n+        return googleService.list().\n+            getResult().\n+            stream().\n+            map(account -> new GoogleAuthenticatorAccount(account.getOwner(),\n+                account.getSecretKey(), account.getValidationCode(), account.getScratchCodes())).\n+            collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void save(final String userName, final String secretKey,\n+                     final int validationCode, final List<Integer> scratchCodes) {\n+        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthAccountService.class);\n+        GoogleMfaAuthAccount account = new GoogleMfaAuthAccount.Builder()\n+            .owner(userName)\n+            .registrationDate(new Date())\n+            .scratchCodes(scratchCodes)\n+            .validationCode(validationCode)\n+            .secretKey(secretKey)\n+            .build();\n+        googleService.save(account);\n+    }\n+\n+    @Override\n+    public OneTimeTokenAccount update(final OneTimeTokenAccount account) {\n+        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthAccountService.class);\n+        GoogleMfaAuthAccount acct = new GoogleMfaAuthAccount.Builder()\n+            .owner(account.getUsername())\n+            .registrationDate(new Date())\n+            .scratchCodes(account.getScratchCodes())\n+            .validationCode(account.getValidationCode())\n+            .secretKey(account.getSecretKey())\n+            .build();\n+        googleService.update(acct);\n+        return account;\n+    }\n+\n+    @Override\n+    public void deleteAll() {\n+        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthAccountService.class);\n+        googleService.deleteAll();\n+    }\n+\n+    @Override\n+    public void delete(final String username) {\n+        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthAccountService.class);\n+        googleService.deleteAccountFor(username);\n+    }\n+\n+    @Override\n+    public long count() {\n+        GoogleMfaAuthAccountService googleService = waRestClient.getSyncopeClient().\n+            getService(GoogleMfaAuthAccountService.class);\n+        return googleService.countAll().getTotalCount();\n+    }\n+}"},{"sha":"3124ef190aac739e98c754ed21b6dd8c992439c4","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/gauth/token/SyncopeWAGoogleMfaAuthTokenRepository.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepository.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"},{"sha":"4c32a0977ddb4655284c5d79b76d1b119bda42bc","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/services/SyncopeWAServiceRegistry.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fservices%2FSyncopeWAServiceRegistry.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.wa.starter;\n+package org.apache.syncope.wa.starter.services;\n \n import org.apache.syncope.wa.starter.mapping.RegisteredServiceMapper;\n import java.util.Collection;\n@@ -35,15 +35,15 @@\n import org.springframework.context.ConfigurableApplicationContext;\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n \n-public class SyncopeServiceRegistry extends AbstractServiceRegistry {\n+public class SyncopeWAServiceRegistry extends AbstractServiceRegistry {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeServiceRegistry.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAServiceRegistry.class);\n \n     private final WARestClient waRestClient;\n \n     private final RegisteredServiceMapper registeredServiceMapper;\n \n-    public SyncopeServiceRegistry(\n+    public SyncopeWAServiceRegistry(\n             final WARestClient restClient,\n             final RegisteredServiceMapper registeredServiceMapper,\n             final ConfigurableApplicationContext applicationContext,","previous_filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeServiceRegistry.java"},{"sha":"0db2a5d72c0124d64d525b8e34b2d374eab93169","filename":"wa/starter/src/main/resources/META-INF/spring.factories","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring.factories?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -14,4 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-org.springframework.boot.autoconfigure.EnableAutoConfiguration=org.apache.syncope.wa.starter.SyncopeWAConfiguration\n+org.springframework.boot.autoconfigure.EnableAutoConfiguration=org.apache.syncope.wa.starter.config.SyncopeWAConfiguration"},{"sha":"1884cd0ca8fa74f058817ecd4a858a4b3d39fdce","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -53,7 +53,7 @@\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public class SyncopeServiceRegistryTest extends AbstractTest {\n+public class SyncopeWAServiceRegistryTest extends AbstractTest {\n \n     @Autowired\n     private WARestClient wARestClient;","previous_filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeServiceRegistryTest.java"},{"sha":"4d8c0c2453e374dbc7b40c1b15ed371b2a479221","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/gauth/token/SyncopeWAGoogleMfaAuthTokenRepositoryTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f71c7f8d5f28095fd2f7d6c82451c50526d9d986/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fgauth%2Ftoken%2FSyncopeWAGoogleMfaAuthTokenRepositoryTest.java?ref=f71c7f8d5f28095fd2f7d6c82451c50526d9d986","patch":"@@ -7,7 +7,7 @@\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an"}]}