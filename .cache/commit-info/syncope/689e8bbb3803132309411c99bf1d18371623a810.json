{"sha":"689e8bbb3803132309411c99bf1d18371623a810","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY4OWU4YmJiMzgwMzEzMjMwOTQxMWM5OWJmMWQxODM3MTYyM2E4MTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-12T17:31:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-12T17:31:56Z"},"message":"[SYNCOPE-620] cli","tree":{"sha":"45678bbaae5c0399ba6b29dda6192ad7f0926851","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/45678bbaae5c0399ba6b29dda6192ad7f0926851"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/689e8bbb3803132309411c99bf1d18371623a810","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/689e8bbb3803132309411c99bf1d18371623a810","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/689e8bbb3803132309411c99bf1d18371623a810","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/689e8bbb3803132309411c99bf1d18371623a810/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9cbd0d0e805d18a95be095d582ead1295ea1c934","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9cbd0d0e805d18a95be095d582ead1295ea1c934","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9cbd0d0e805d18a95be095d582ead1295ea1c934"}],"stats":{"total":1407,"additions":1407,"deletions":0},"files":[{"sha":"fa70a01b7c59678c3458896b4fc9f7b103dab4e1","filename":"syncope620/client/cli/pom.xml","status":"added","additions":178,"deletions":0,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fpom.xml?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,178 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-client</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Client CLI</name>\n+  <description>Apache Syncope Client CLI</description>\n+\n+  <groupId>org.apache.syncope</groupId>\n+  <artifactId>syncope-client-cli</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <log.directory>/tmp</log.directory>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.beust</groupId>\n+      <artifactId>jcommander</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.client</groupId>\n+      <artifactId>syncope-client-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.logging.log4j</groupId>\n+      <artifactId>log4j-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.lmax</groupId>\n+      <artifactId>disruptor</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.logging.log4j</groupId>\n+      <artifactId>log4j-slf4j-impl</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-logging</groupId>\n+      <artifactId>commons-logging</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>jcl-over-slf4j</artifactId>\n+    </dependency>\n+\n+  </dependencies>\n+\n+  <build>\n+  \n+    <defaultGoal>package</defaultGoal>\n+  \n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>2.3</version>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <createDependencyReducedPom>false</createDependencyReducedPom>\n+              <transformers>\n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n+                  <manifestEntries>\n+                    <Main-Class>org.apache.syncope.cli.SyncopeAdm</Main-Class>\n+                  </manifestEntries>\n+                </transformer>\n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n+                  <resource>messages.properties</resource>\n+                  <file>src/main/resources/messages.properties</file>\n+                </transformer>\n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">\n+                  <resource>messages_it_IT.properties</resource>\n+                  <file>src/main/resources/messages_it_IT.properties</file>\n+                </transformer>\n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">                                     \n+                  <resource>META-INF/spring.handlers</resource>                                 \n+                </transformer>                                 \n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">                                     \n+                  <resource>META-INF/spring.schemas</resource>                                 \n+                </transformer>                                 \n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">                                     \n+                  <resource>META-INF/cxf/bus-extensions.txt</resource>                                 \n+                </transformer>                                 \n+                <transformer implementation=\"org.apache.maven.plugins.shade.resource.XmlAppendingTransformer\">                                     \n+                  <resource>META-INF/wsdl.plugin.xml</resource>\n+                </transformer>\n+              </transformers>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+     \n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+        <targetPath>${project.build.directory}/classes</targetPath>\n+        <includes>\n+          <include>log4j2.xml</include>\n+        </includes>\n+      </resource>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+        <targetPath>${project.build.directory}/classes</targetPath>\n+        <includes>\n+          <include>syncope.properties</include>\n+        </includes>\n+      </resource>\n+      <resource>\n+        <directory>..</directory>\n+        <targetPath>META-INF</targetPath>\n+        <includes>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+    \n+  </build>\n+  \n+  <profiles>\n+    <profile>\n+      <id>apache-release</id>\n+      \n+      <build>\n+        <plugins>      \n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-deploy-plugin</artifactId>\n+            <configuration>\n+              <skip>true</skip>\n+            </configuration>\n+          </plugin>           \n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n+    \n+</project>"},{"sha":"2bb802fdcc1752d8c1e945c61d7f05a588c8dad1","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeAdm.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli;\n+\n+import com.beust.jcommander.JCommander;\n+import com.beust.jcommander.ParameterException;\n+import org.apache.syncope.client.cli.commands.ConfigurationCommand;\n+import org.apache.syncope.client.cli.commands.EntitlementCommand;\n+import org.apache.syncope.client.cli.commands.LoggerCommand;\n+import org.apache.syncope.client.cli.commands.NotificationCommand;\n+import org.apache.syncope.client.cli.commands.PolicyCommand;\n+import org.apache.syncope.client.cli.commands.ReportCommand;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SyncopeAdm {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeAdm.class);\n+\n+    private static final String helpMessage = \"Usage: Main [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    logger --help \\n\"\n+            + \"    config --help \\n\"\n+            + \"    notification --help \\n\"\n+            + \"    report --help \\n\"\n+            + \"    policy --help \\n\"\n+            + \"    entitlement --help \\n\";\n+\n+    private static final JCommander jcommander = new JCommander();\n+\n+    private static LoggerCommand loggerCommand;\n+\n+    private static ConfigurationCommand configurationCommand;\n+\n+    private static NotificationCommand notificationCommand;\n+\n+    private static ReportCommand reportCommand;\n+\n+    private static PolicyCommand policyCommand;\n+\n+    private static EntitlementCommand entitlementCommand;\n+\n+    public static void main(final String[] args) {\n+        LOG.debug(\"Starting with args \\n\");\n+\n+        for (final String arg : args) {\n+            LOG.debug(\"Arg: {}\", arg);\n+        }\n+\n+        instantiateCommands();\n+\n+        if (args.length == 0) {\n+            System.out.println(helpMessage);\n+        } else {\n+            try {\n+                jcommander.parse(args);\n+            } catch (final ParameterException ioe) {\n+                System.out.println(helpMessage);\n+                LOG.error(\"Parameter exception\", ioe);\n+            }\n+            executeCommand();\n+        }\n+\n+    }\n+\n+    private static void instantiateCommands() {\n+        LOG.debug(\"Init JCommander\");\n+        loggerCommand = new LoggerCommand();\n+        jcommander.addCommand(loggerCommand);\n+        LOG.debug(\"Added LoggerCommand\");\n+        configurationCommand = new ConfigurationCommand();\n+        jcommander.addCommand(configurationCommand);\n+        LOG.debug(\"Added ConfigurationCommand\");\n+        notificationCommand = new NotificationCommand();\n+        jcommander.addCommand(notificationCommand);\n+        LOG.debug(\"Added NotificationCommand\");\n+        reportCommand = new ReportCommand();\n+        jcommander.addCommand(reportCommand);\n+        LOG.debug(\"Added ReportCommand\");\n+        policyCommand = new PolicyCommand();\n+        jcommander.addCommand(policyCommand);\n+        LOG.debug(\"Added PolicyCommand\");\n+        entitlementCommand = new EntitlementCommand();\n+        jcommander.addCommand(entitlementCommand);\n+        LOG.debug(\"Added EntitlementCommand\");\n+    }\n+\n+    private static void executeCommand() {\n+        final String command = jcommander.getParsedCommand();\n+\n+        LOG.debug(\"Called command {}\", command);\n+\n+        if (\"logger\".equalsIgnoreCase(command)) {\n+            loggerCommand.execute();\n+        } else if (\"config\".equalsIgnoreCase(command)) {\n+            configurationCommand.execute();\n+        } else if (\"notification\".equalsIgnoreCase(command)) {\n+            notificationCommand.execute();\n+        } else if (\"report\".equalsIgnoreCase(command)) {\n+            reportCommand.execute();\n+        } else if (\"policy\".equalsIgnoreCase(command)) {\n+            policyCommand.execute();\n+        } else if (\"entitlement\".equalsIgnoreCase(command)) {\n+            entitlementCommand.execute();\n+        }\n+    }\n+}"},{"sha":"26ce27656e5d5b61255c356dc569d8a635eca1b5","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeServices.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli;\n+\n+import java.util.ResourceBundle;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class SyncopeServices {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeServices.class);\n+\n+    private final static ResourceBundle SYNCOPE_PROPS = ResourceBundle.getBundle(\"syncope\");\n+\n+    private static final SyncopeClient CLIENT = new SyncopeClientFactoryBean()\n+            .setAddress(SYNCOPE_PROPS.getString(\"syncope.rest.services\"))\n+            .create(SYNCOPE_PROPS.getString(\"syncope.user\"), SYNCOPE_PROPS.getString(\"syncope.password\"));\n+\n+    public static <T> T get(final Class<T> claz) {\n+        LOG.debug(\"Creting service for {}\", claz.getName());\n+        return CLIENT.getService(claz);\n+    }\n+\n+    private SyncopeServices() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"a6753bfd9d98b8a8d377904f88e63e3d6d7f1808","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/commands/AbstractCommand.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+\n+public abstract class AbstractCommand {\n+\n+    @Parameter(names = {\"-h\", \"--help\"})\n+    protected boolean help = false;\n+\n+    @Parameter(names = {\"-l\", \"--list\"})\n+    protected boolean list = false;\n+\n+    protected abstract void execute();\n+}"},{"sha":"4ca94d05ca274402c5e58670a26f92618fb6d936","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/commands/ConfigurationCommand.java","status":"added","additions":209,"deletions":0,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import com.beust.jcommander.DynamicParameter;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.util.XmlUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConfTO;\n+import org.apache.syncope.common.rest.api.service.ConfigurationService;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xml.sax.SAXException;\n+\n+@Parameters(\n+        commandNames = \"config\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope configuration service\")\n+public class ConfigurationCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ConfigurationCommand.class);\n+\n+    private static final String EXPORT_FILE_NAME = \"/content.xml\";\n+\n+    private final String helpMessage = \"Usage: config [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={CONF-NAME} \\n\"\n+            + \"    -u, --update \\n\"\n+            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n+            + \"    -c, --create \\n\"\n+            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={CONF-NAME}\"\n+            + \"    -v, --validators \\n\"\n+            + \"    -mt, --mail-templates \\n\"\n+            + \"    -e, --export \\n\"\n+            + \"       Syntax: -e={WHERE-DIR} \\n\";\n+\n+    @Parameter(names = { \"-r\", \"--read\" })\n+    public String confNameToRead;\n+\n+    @DynamicParameter(names = { \"-u\", \"--update\" })\n+    private final Map<String, String> updateConf = new HashMap<String, String>();\n+\n+    @DynamicParameter(names = { \"-c\", \"--create\" })\n+    private final Map<String, String> createConf = new HashMap<String, String>();\n+\n+    @Parameter(names = { \"-d\", \"--delete\" })\n+    public String confNameToDelete;\n+\n+    @Parameter(names = { \"-v\", \"--validators\" })\n+    public boolean validators = false;\n+\n+    @Parameter(names = { \"-mt\", \"--mail-templates\" })\n+    public boolean mailTemplates = false;\n+\n+    @Parameter(names = { \"-e\", \"--export\" })\n+    public String export;\n+\n+    @Override\n+    public void execute() {\n+        final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n+        final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n+\n+        LOG.debug(\"Logger service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- configuration help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            LOG.debug(\"- configuration list command\");\n+            try {\n+                final ConfTO confTO = configurationService.list();\n+                for (final AttrTO attrTO : confTO.getPlainAttrMap().values()) {\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(confNameToRead)) {\n+            LOG.debug(\"- configuration read {} command\", confNameToRead);\n+            try {\n+                final AttrTO attrTO = configurationService.read(confNameToRead);\n+                System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                        + \" - readonly: \" + attrTO.isReadonly());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!updateConf.isEmpty()) {\n+            LOG.debug(\"- configuration update command with params {}\", updateConf);\n+            try {\n+                for (final Map.Entry<String, String> entrySet : updateConf.entrySet()) {\n+                    final AttrTO attrTO = configurationService.read(entrySet.getKey());\n+                    attrTO.getValues().clear();\n+                    attrTO.getValues().add(entrySet.getValue());\n+                    configurationService.set(entrySet.getKey(), attrTO);\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!createConf.isEmpty()) {\n+            LOG.debug(\"- configuration create command with params {}\", createConf);\n+            try {\n+                for (final Map.Entry<String, String> entrySet : createConf.entrySet()) {\n+                    final AttrTO attrTO = new AttrTO();\n+                    attrTO.setSchema(entrySet.getKey());\n+                    attrTO.getValues().add(entrySet.getValue());\n+                    configurationService.set(entrySet.getKey(), attrTO);\n+                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" created with value(s) \" + attrTO.getValues()\n+                            + \" - readonly: \" + attrTO.isReadonly());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(confNameToDelete)) {\n+            try {\n+                LOG.debug(\"- configuration delete {} command\", confNameToDelete);\n+                configurationService.delete(confNameToDelete);\n+                System.out.println(\" - Conf \" + confNameToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (validators) {\n+            LOG.debug(\"- configuration validators command\");\n+            try {\n+                System.out.println(\"Conf validator class: \");\n+                for (final String validator : syncopeService.info().getValidators()) {\n+                    System.out.println(\"  *** \" + validator);\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (mailTemplates) {\n+            LOG.debug(\"- configuration mailTemplates command\");\n+            try {\n+                System.out.println(\"Conf mail template for:\");\n+                for (final String mailTemplate : syncopeService.info().getMailTemplates()) {\n+                    System.out.println(\"  *** \" + mailTemplate);\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(export)) {\n+            LOG.debug(\"- configuration export command, directory where xml will be export: {}\", export);\n+\n+            try {\n+                XmlUtils.createXMLFile((SequenceInputStream) configurationService.export().getEntity(), export\n+                        + EXPORT_FILE_NAME);\n+                System.out.println(\" - \" + export + EXPORT_FILE_NAME + \" successfully created\");\n+            } catch (final IOException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final ParserConfigurationException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final SAXException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final TransformerConfigurationException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final TransformerException ex) {\n+                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n+                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final SyncopeClientException ex) {\n+                LOG.error(\"Error calling configuration service\", ex);\n+                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"e0058abd48cae6b4af33e17e751872bb971a5fc4","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/commands/EntitlementCommand.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FEntitlementCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FEntitlementCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FEntitlementCommand.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.lib.wrap.EntitlementTO;\n+import org.apache.syncope.common.rest.api.service.EntitlementService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Parameters(\n+        commandNames = \"entitlement\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope entitlement service\")\n+public class EntitlementCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(EntitlementCommand.class);\n+\n+    private final String helpMessage = \"Usage: entitlement [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -lo, --list-own \\n\";\n+\n+    @Parameter(names = { \"-lo\", \"--list-own\" })\n+    public boolean listOwn = false;\n+\n+    @Override\n+    public void execute() {\n+        final EntitlementService entitlementService = SyncopeServices.get(EntitlementService.class);\n+        LOG.debug(\"Entitlement service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- entitlement help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            System.out.println(\"All entitlement:\");\n+            for (final EntitlementTO entitlementTO : entitlementService.getAllEntitlements()) {\n+                System.out.println(\"  *** \" + entitlementTO.getElement());\n+            }\n+        } else if (listOwn) {\n+            System.out.println(\"All own entitlement:\");\n+            for (final EntitlementTO entitlementTO : entitlementService.getOwnEntitlements()) {\n+                System.out.println(\"  *** \" + entitlementTO.getElement());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"e5115d9720fc199bcab31b0670fe339c000d97b7","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/commands/LoggerCommand.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import com.beust.jcommander.DynamicParameter;\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Parameters(\n+        commandNames = \"logger\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope logger service\")\n+public class LoggerCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n+\n+    private final String helpMessage = \"Usage: logger [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={LOG-NAME} \\n\"\n+            + \"    -u, --update \\n\"\n+            + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n+            + \"    -ua, --update-all \\n\"\n+            + \"       Syntax: -ua={LOG-LEVEL} \\n\"\n+            + \"    -c, --create \\n\"\n+            + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={LOG-NAME}\";\n+\n+    @Parameter(names = { \"-r\", \"--read\" })\n+    public String logNameToRead;\n+\n+    @DynamicParameter(names = { \"-u\", \"--update\" })\n+    private final Map<String, String> updateLogs = new HashMap<String, String>();\n+\n+    @Parameter(names = { \"-ua\", \"--update-all\" })\n+    public String logLevel;\n+\n+    @DynamicParameter(names = { \"-c\", \"--create\" })\n+    private final Map<String, String> createLogs = new HashMap<String, String>();\n+\n+    @Parameter(names = { \"-d\", \"--delete\" })\n+    public String logNameToDelete;\n+\n+    @Override\n+    public void execute() {\n+        final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n+\n+        LOG.debug(\"Logger service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- logger help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            LOG.debug(\"- logger list command\");\n+            try {\n+                for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                    System.out.println(\" - \" + loggerTO.getKey() + \" -> \" + loggerTO.getLevel());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (StringUtils.isNotBlank(logNameToRead)) {\n+            LOG.debug(\"- logger read {} command\", logNameToRead);\n+            try {\n+                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, logNameToRead);\n+                System.out.println(\" - Logger \" + loggerTO.getKey() + \" with level -> \" + loggerTO.getLevel());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (!updateLogs.isEmpty()) {\n+            LOG.debug(\"- logger update command with params {}\", updateLogs);\n+\n+            for (final Map.Entry<String, String> log : updateLogs.entrySet()) {\n+                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, log.getKey());\n+                try {\n+                    loggerTO.setLevel(LoggerLevel.valueOf(log.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getKey(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" new level -> \" + loggerTO.getLevel());\n+                } catch (final SyncopeClientException ex) {\n+                    System.out.println(\" - Error: \" + ex.getMessage());\n+                } catch (final IllegalArgumentException ex) {\n+                    System.out.println(\" - Error: \" + log.getValue() + \" isn't a valid logger level, try with:\");\n+                    for (final LoggerLevel level : LoggerLevel.values()) {\n+                        System.out.println(\"  *** \" + level.name());\n+                    }\n+                }\n+            }\n+        } else if (StringUtils.isNotBlank(logLevel)) {\n+            LOG.debug(\"- logger update all command with level {}\", logLevel);\n+            for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                try {\n+                    loggerTO.setLevel(LoggerLevel.valueOf(logLevel));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getKey(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" new level -> \" + loggerTO.getLevel());\n+                } catch (final SyncopeClientException ex) {\n+                    System.out.println(\" - Error: \" + ex.getMessage());\n+                } catch (final IllegalArgumentException ex) {\n+                    System.out.println(\" - Error: \" + loggerTO.getLevel() + \" isn't a valid logger level, try with:\");\n+                    for (final LoggerLevel level : LoggerLevel.values()) {\n+                        System.out.println(\"  *** \" + level.name());\n+                    }\n+                }\n+            }\n+        } else if (!createLogs.isEmpty()) {\n+            LOG.debug(\"- logger create command with params {}\", createLogs);\n+\n+            for (final Map.Entry<String, String> entrySet : createLogs.entrySet()) {\n+                final LoggerTO loggerTO = new LoggerTO();\n+                try {\n+                    loggerTO.setKey(entrySet.getKey());\n+                    loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO.getKey(), loggerTO);\n+                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" created with level -> \" + loggerTO.\n+                            getLevel());\n+                } catch (final SyncopeClientException ex) {\n+                    System.out.println(\" - Error: \" + ex.getMessage());\n+                } catch (final IllegalArgumentException ex) {\n+                    System.out.println(\" - Error: \" + loggerTO.getLevel() + \" isn't a valid logger level, try with:\");\n+                    for (final LoggerLevel level : LoggerLevel.values()) {\n+                        System.out.println(\"  *** \" + level.name());\n+                    }\n+                }\n+            }\n+        } else if (StringUtils.isNotBlank(logNameToDelete)) {\n+            try {\n+                LOG.debug(\"- logger delete {} command\", logNameToDelete);\n+                loggerService.delete(LoggerType.LOG, logNameToDelete);\n+                System.out.println(\" - Logger \" + logNameToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"4e189965f9e0b00e41e3eece2a5a35538ab49dba","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/commands/NotificationCommand.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Parameters(\n+        commandNames = \"notification\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope notification service\")\n+public class NotificationCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(NotificationCommand.class);\n+\n+    private final String helpMessage = \"Usage: notification [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={NOTIFICATION-ID} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={NOTIFICATION-ID}\";\n+\n+    @Parameter(names = { \"-r\", \"--read\" })\n+    public Long notificationIdToRead = -1L;\n+\n+    @Parameter(names = { \"-d\", \"--delete\" })\n+    public Long notificationIdToDelete = -1L;\n+\n+    @Override\n+    public void execute() {\n+        final NotificationService notificationService = SyncopeServices.get(NotificationService.class);\n+\n+        LOG.debug(\"Notification service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- notification help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            LOG.debug(\"- notification list command\");\n+            try {\n+                for (final NotificationTO notificationTO : notificationService.list()) {\n+                    System.out.println(notificationTO);\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (notificationIdToRead > -1L) {\n+            LOG.debug(\"- notification read {} command\", notificationIdToRead);\n+            try {\n+                System.out.println(notificationService.read(notificationIdToRead));\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (notificationIdToDelete > -1L) {\n+            try {\n+                LOG.debug(\"- notification delete {} command\", notificationIdToDelete);\n+                notificationService.delete(notificationIdToDelete);\n+                System.out.println(\" - Notification \" + notificationIdToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"c2bcb5fc946cf490573e24694126d7fb2584123e","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.rest.api.service.PolicyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Parameters(\n+        commandNames = \"policy\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope policy service\")\n+public class PolicyCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PolicyCommand.class);\n+\n+    private final String helpMessage = \"Usage: policy [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -ll, --list-policy \\n\"\n+            + \"       Syntax: -ll={POLICY-TYPE} \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={POLICY-ID} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={POLICY-ID}\";\n+\n+    @Parameter(names = { \"-ll\", \"--list-policy\" })\n+    public String policyType;\n+\n+    @Parameter(names = { \"-r\", \"--read\" })\n+    public Long policyIdToRead = -1L;\n+\n+    @Parameter(names = { \"-d\", \"--delete\" })\n+    public Long policyIdToDelete = -1L;\n+\n+    @Override\n+    public void execute() {\n+        final PolicyService policyService = SyncopeServices.get(PolicyService.class);\n+        LOG.debug(\"Policy service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- policy help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+\n+        } else if (StringUtils.isNotBlank(policyType)) {\n+            LOG.debug(\"- policy list command for type {}\", policyType);\n+            try {\n+                for (final AbstractPolicyTO policyTO : policyService.list(PolicyType.valueOf(policyType))) {\n+                    System.out.println(policyTO);\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            } catch (final IllegalArgumentException ex) {\n+                System.out.println(\" - Error: \" + policyType + \" isn't a valid policy type, try with:\");\n+                for (final PolicyType type : PolicyType.values()) {\n+                    System.out.println(\"  *** \" + type.name() + \": \" + type.getDescription());\n+                }\n+            }\n+        } else if (policyIdToRead > -1L) {\n+            LOG.debug(\"- policy read {} command\", policyIdToRead);\n+            try {\n+                System.out.println(policyService.read(policyIdToRead));\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (policyIdToDelete > -1L) {\n+            try {\n+                LOG.debug(\"- policy delete {} command\", policyIdToDelete);\n+                policyService.delete(policyIdToDelete);\n+                System.out.println(\" - Report \" + policyIdToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"17f0e14d4c51bb2c83464a96737dc4c2aa11de84","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"added","additions":193,"deletions":0,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.util.List;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.util.XmlUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n+import org.apache.syncope.common.rest.api.service.ReportService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xml.sax.SAXException;\n+\n+@Parameters(\n+        commandNames = \"report\",\n+        optionPrefixes = \"-\",\n+        separators = \"=\",\n+        commandDescription = \"Apache Syncope report service\")\n+public class ReportCommand extends AbstractCommand {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ReportCommand.class);\n+\n+    private final String helpMessage = \"Usage: report [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    -h, --help \\n\"\n+            + \"    -l, --list \\n\"\n+            + \"    -r, --read \\n\"\n+            + \"       Syntax: -r={POLICY-ID} \\n\"\n+            + \"    -d, --delete \\n\"\n+            + \"       Syntax: -d={POLICY-ID} \\n\"\n+            + \"    -e, --execute \\n\"\n+            + \"       Syntax: -e={POLICY-ID} \\n\"\n+            + \"    -re, --read-executecution \\n\"\n+            + \"       Syntax: -re={EXECUTION-ID} \\n\"\n+            + \"    -de, --delete-executecution \\n\"\n+            + \"       Syntax: -de={EXECUTION-ID} \\n\"\n+            + \"    -eer, --export-executecution-result \\n\"\n+            + \"       Syntax: -eer={EXECUTION-ID} \\n\"\n+            + \"    -rc, --reportlet-class\";\n+\n+    @Parameter(names = { \"-r\", \"--read\" })\n+    public Long reportIdToRead = -1L;\n+\n+    @Parameter(names = { \"-d\", \"--delete\" })\n+    public Long reportIdToDelete = -1L;\n+\n+    @Parameter(names = { \"-e\", \"--execute\" })\n+    public Long reportIdToExecute = -1L;\n+\n+    @Parameter(names = { \"-re\", \"--read-execution\" })\n+    public Long executionIdToRead = -1L;\n+\n+    @Parameter(names = { \"-de\", \"--delete-execution\" })\n+    public Long executionIdToDelete = -1L;\n+\n+    @Parameter(names = { \"-eer\", \"--export-execution-result\" })\n+    public Long exportId = -1L;\n+\n+    @Parameter(names = { \"-rc\", \"--reportlet-class\" })\n+    public boolean reportletClass = false;\n+\n+    @Override\n+    public void execute() {\n+        final ReportService reportService = SyncopeServices.get(ReportService.class);\n+        LOG.debug(\"Report service successfully created\");\n+\n+        if (help) {\n+            LOG.debug(\"- report help command\");\n+            System.out.println(helpMessage);\n+        } else if (list) {\n+            LOG.debug(\"- report list command\");\n+            try {\n+                for (final ReportTO reportTO : reportService.list().getResult()) {\n+                    System.out.println(reportTO);\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (reportIdToRead > -1L) {\n+            LOG.debug(\"- report read {} command\", reportIdToRead);\n+            try {\n+                System.out.println(reportService.read(reportIdToRead));\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (reportIdToDelete > -1L) {\n+            try {\n+                LOG.debug(\"- report delete {} command\", reportIdToDelete);\n+                reportService.delete(reportIdToDelete);\n+                System.out.println(\" - Report \" + reportIdToDelete + \" deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (reportIdToExecute > -1L) {\n+            try {\n+                LOG.debug(\"- report execute {} command\", reportIdToExecute);\n+                reportService.execute(reportIdToExecute);\n+                final List<ReportExecTO> executionList = reportService.read(reportIdToExecute).getExecutions();\n+                final ReportExecTO lastExecution = executionList.get(executionList.size() - 1);\n+                System.out.println(\" - Report execution id: \" + lastExecution.getKey());\n+                System.out.println(\" - Report execution status: \" + lastExecution.getStatus());\n+                System.out.println(\" - Report execution start date: \" + lastExecution.getStartDate());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (executionIdToRead > -1L) {\n+            try {\n+                LOG.debug(\"- report execution read {} command\", executionIdToRead);\n+                ReportExecTO reportExecTO = reportService.readExecution(executionIdToRead);\n+                System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n+                System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n+                System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n+                System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (executionIdToDelete > -1L) {\n+            try {\n+                LOG.debug(\"- report execution delete {} command\", executionIdToDelete);\n+                reportService.deleteExecution(executionIdToDelete);\n+                System.out.println(\" - Report execution \" + executionIdToDelete + \"successfyllt deleted!\");\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else if (exportId > -1L) {\n+            LOG.debug(\"- report export command for report: {}\", exportId);\n+\n+            try {\n+                XmlUtils.createXMLFile((SequenceInputStream) reportService.exportExecutionResult(exportId,\n+                        ReportExecExportFormat.XML).getEntity(), \"export_\" + exportId + \".xml\");\n+                System.out.println(\" - \" + \"export_\" + exportId + \" successfully created\");\n+            } catch (final IOException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final ParserConfigurationException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final SAXException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final TransformerConfigurationException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final TransformerException ex) {\n+                LOG.error(\"Error creating xml file\", ex);\n+                System.out.println(\" - Error creating export_\" + exportId + \" \" + ex.getMessage());\n+            } catch (final SyncopeClientException ex) {\n+                LOG.error(\"Error calling configuration service\", ex);\n+                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n+            }\n+        } else if (reportletClass) {\n+            try {\n+                LOG.debug(\"- reportlet configuration class list command\");\n+                System.out.println(\"Reportlet conf classes\");\n+                for (final ReportletConfClass reportletConfClass : reportService.getReportletConfClasses()) {\n+                    System.out.println(\"  *** \" + reportletConfClass.getElement());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                System.out.println(\" - Error: \" + ex.getMessage());\n+            }\n+        } else {\n+            System.out.println(helpMessage);\n+        }\n+    }\n+\n+}"},{"sha":"fa228d55d7c8a490c113456cf40dde771ac3d1bb","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/util/XmlUtils.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXmlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXmlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FXmlUtils.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.io.StringReader;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class XmlUtils {\n+\n+    public static void createXMLFile(final SequenceInputStream sis, final String filePath)\n+            throws TransformerConfigurationException, TransformerException, SAXException, IOException,\n+            ParserConfigurationException {\n+\n+        TransformerFactory.newInstance().newTransformer()\n+                .transform(new DOMSource(DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(\n+                                        new InputSource(new StringReader(IOUtils.toString(sis))))),\n+                        new StreamResult(new File(filePath)));\n+    }\n+}"},{"sha":"58c12f3536df645f4d0c04d862628db9f8748d13","filename":"syncope620/client/cli/src/main/java/org/apache/syncope/client/cli/validators/DebugLevelValidator.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fvalidators%2FDebugLevelValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fvalidators%2FDebugLevelValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fvalidators%2FDebugLevelValidator.java?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.validators;\n+\n+import com.beust.jcommander.IParameterValidator;\n+import com.beust.jcommander.ParameterException;\n+\n+public class DebugLevelValidator implements IParameterValidator {\n+\n+    @Override\n+    public void validate(final String name, final String value) throws ParameterException {\n+        if (!Levels.contains(value)) {\n+            final StringBuilder exceptionMessage = new StringBuilder();\n+            exceptionMessage.append(\"Parameter \")\n+                    .append(name)\n+                    .append(\" should be :\\n\");\n+            for (final Levels l : Levels.values()) {\n+                exceptionMessage.append(l).append(\"\\n\");\n+            }\n+            System.out.println(\">>>> \" + exceptionMessage.toString());\n+        }\n+    }\n+\n+    private enum Levels {\n+\n+        OFF,\n+        FATAL,\n+        ERROR,\n+        WARN,\n+        INFO,\n+        DEBUG,\n+        TRACE,\n+        ALL;\n+\n+        public static boolean contains(final String name) {\n+            for (final Levels c : Levels.values()) {\n+                if (c.name().equals(name)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+\n+}"},{"sha":"0688f6bfdbb1e7e08718203365ea26299f532e5e","filename":"syncope620/client/cli/src/main/resources/log4j2.xml","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<configuration status=\"WARN\">\n+\n+  <appenders>\n+\n+    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/cli.log\"\n+                             filePattern=\"${log.directory}/cli-%d{yyyy-MM-dd}.log.gz\"\n+                             immediateFlush=\"false\" append=\"true\">\n+      <PatternLayout>\n+        <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n+      </PatternLayout>\n+      <Policies>\n+        <TimeBasedTriggeringPolicy/>\n+        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n+      </Policies>\n+    </RollingRandomAccessFile>\n+    \n+  </appenders>\n+\n+  <loggers>\n+\n+    <asyncLogger name=\"com.beust\" additivity=\"false\" level=\"DEBUG\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    \n+    <asyncLogger name=\"org.apache.syncope.cli\" additivity=\"false\" level=\"DEBUG\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    \n+    <asyncLogger name=\"org.apache.syncope.client\" additivity=\"false\" level=\"OFF\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <root level=\"DEBUG\">\n+      <appender-ref ref=\"main\"/>\n+    </root>\n+  \n+  </loggers>\n+  \n+</configuration>\n\\ No newline at end of file"},{"sha":"9f84a720cb5e18846a62b69b3cb3a759ad339340","filename":"syncope620/client/cli/src/main/resources/syncope.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fresources%2Fsyncope.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fresources%2Fsyncope.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fcli%2Fsrc%2Fmain%2Fresources%2Fsyncope.properties?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+syncope.rest.services=http://localhost:9080/syncope/rest/\n+syncope.user=admin\n+syncope.password=password"},{"sha":"78bfcbdde2710f960b3e167f1863b478377c473e","filename":"syncope620/client/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fclient%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fpom.xml?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -36,6 +36,7 @@ under the License.\n   <modules>\n     <module>lib</module>\n     <module>console</module>\n+    <module>cli</module>\n   </modules>\n \n </project>"},{"sha":"37c783beea55fc7d4410be1ab0864de076cb568c","filename":"syncope620/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/689e8bbb3803132309411c99bf1d18371623a810/syncope620%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fpom.xml?ref=689e8bbb3803132309411c99bf1d18371623a810","patch":"@@ -907,6 +907,12 @@ under the License.\n         <version>${codemirror.version}</version>\n       </dependency>\n       \n+      <dependency>\n+        <groupId>com.beust</groupId>\n+        <artifactId>jcommander</artifactId>\n+        <version>1.47</version>\n+      </dependency>\n+      \n       <!-- TEST -->\n       <dependency>\n         <groupId>net.tirasa.connid.bundles.soap</groupId>"}]}