{"sha":"907be4ae4efedf3821a5d8779dce4ee3da7b4acd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkwN2JlNGFlNGVmZWRmMzgyMWE1ZDg3NzlkY2U0ZWUzZGE3YjRhY2Q=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-18T15:25:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-18T15:25:56Z"},"message":"[SYNCOPE-679] Cleanup and fixing date handling in XML","tree":{"sha":"ab6cc66770b3458f3d46a6ed4d7fea915cb0166d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ab6cc66770b3458f3d46a6ed4d7fea915cb0166d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/907be4ae4efedf3821a5d8779dce4ee3da7b4acd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/907be4ae4efedf3821a5d8779dce4ee3da7b4acd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/907be4ae4efedf3821a5d8779dce4ee3da7b4acd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1b5839b40f7671f1350645e3b4e3aac4b6b212ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1b5839b40f7671f1350645e3b4e3aac4b6b212ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1b5839b40f7671f1350645e3b4e3aac4b6b212ad"}],"stats":{"total":308,"additions":155,"deletions":153},"files":[{"sha":"f10e5b83d0264af845e166a778f2a002d70d119c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -59,7 +59,7 @@ public void delete(final Long reportKey) {\n \n     @Override\n     public void startExecution(final long reportKey, final Date start) {\n-        getService(ReportService.class).execute(new ExecuteQuery.Builder().key(reportKey).start(start).build());\n+        getService(ReportService.class).execute(new ExecuteQuery.Builder().key(reportKey).startAt(start).build());\n     }\n \n     /**"},{"sha":"7de2253cb23a1932deac5bb69fb90f9fecc62c2c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -118,7 +118,7 @@ public void startExecution(final long taskKey, final Date start) {\n \n     public void startExecution(final long taskKey, final Date start, final boolean dryRun) {\n         getService(TaskService.class).execute(\n-                new ExecuteQuery.Builder().key(taskKey).start(start).dryRun(dryRun).build());\n+                new ExecuteQuery.Builder().key(taskKey).startAt(start).dryRun(dryRun).build());\n     }\n \n     @Override"},{"sha":"c4b5fe5f4fd9a1bd2204abfe489edc472d753328","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractExecTO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractExecTO.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -25,11 +25,11 @@ public class AbstractExecTO extends AbstractStartEndBean {\n \n     private static final long serialVersionUID = -4621191979198357081L;\n \n-    protected long key;\n+    private long key;\n \n-    protected String status;\n+    private String status;\n \n-    protected String message;\n+    private String message;\n \n     public long getKey() {\n         return key;"},{"sha":"88962c5f04ed86a8080dd10ca8d8b0779cbfd2a3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractStartEndBean.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractStartEndBean.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -27,20 +27,20 @@ public class AbstractStartEndBean extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 2399577415544539917L;\n \n-    protected Date start;\n+    private Date start;\n \n-    protected Date end;\n+    private Date end;\n \n     public Date getStart() {\n         return start == null\n                 ? null\n                 : new Date(start.getTime());\n     }\n \n-    public void setStartDate(final Date start) {\n-        if (start != null) {\n-            this.start = new Date(start.getTime());\n-        }\n+    public void setStart(final Date start) {\n+        this.start = start == null\n+                ? null\n+                : new Date(start.getTime());\n     }\n \n     public Date getEnd() {\n@@ -49,9 +49,9 @@ public Date getEnd() {\n                 : new Date(end.getTime());\n     }\n \n-    public void setEndDate(final Date end) {\n-        if (end != null) {\n-            this.end = new Date(end.getTime());\n-        }\n+    public void setEnd(final Date end) {\n+        this.end = end == null\n+                ? null\n+                : new Date(end.getTime());\n     }\n }"},{"sha":"3fab9616566c8dec6bb93be9f4890956db45f956","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SchedTaskTO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSchedTaskTO.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -31,7 +31,7 @@ public class SchedTaskTO extends AbstractTaskTO {\n \n     private static final long serialVersionUID = -5722284116974636425L;\n \n-    private Date start;\n+    private Date startAt;\n \n     private String cronExpression;\n \n@@ -47,12 +47,12 @@ public class SchedTaskTO extends AbstractTaskTO {\n \n     private boolean active;\n \n-    public Date getStart() {\n-        return start == null ? null : new Date(start.getTime());\n+    public Date getStartAt() {\n+        return startAt == null ? null : new Date(startAt.getTime());\n     }\n \n-    public void setStart(final Date start) {\n-        this.start = start == null ? null : new Date(start.getTime());\n+    public void setStartAt(final Date start) {\n+        this.startAt = start == null ? null : new Date(start.getTime());\n     }\n \n     public String getCronExpression() {"},{"sha":"c550e789e7299964b4aad1eabc24f27d7edea27e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/ExecuteQuery.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FExecuteQuery.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -38,8 +38,8 @@ public Builder key(final long key) {\n             return this;\n         }\n \n-        public Builder start(final Date date) {\n-            instance.setStart(date);\n+        public Builder startAt(final Date date) {\n+            instance.setStartAt(date);\n             return this;\n         }\n \n@@ -55,7 +55,7 @@ public ExecuteQuery build() {\n \n     private Long key;\n \n-    private Date start;\n+    private Date startAt;\n \n     private Boolean dryRun;\n \n@@ -69,13 +69,13 @@ public void setKey(final Long key) {\n         this.key = key;\n     }\n \n-    public Date getStart() {\n-        return start;\n+    public Date getStartAt() {\n+        return startAt;\n     }\n \n-    @QueryParam(\"start\")\n-    public void setStart(final Date start) {\n-        this.start = start;\n+    @QueryParam(\"startAt\")\n+    public void setStartAt(final Date startAt) {\n+        this.startAt = startAt;\n     }\n \n     public Boolean getDryRun() {"},{"sha":"9dc4478d63ab2a56ac1a7afc07591a6742cc86ad","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -75,7 +75,7 @@ public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, fin\n                                         jobExecTO.setKey(key);\n                                         jobExecTO.\n                                                 setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n-                                        jobExecTO.setStartDate(t.getStartTime());\n+                                        jobExecTO.setStart(t.getStartTime());\n \n                                         jobExecTOs.add(jobExecTO);\n                                     }\n@@ -101,7 +101,7 @@ public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, fin\n                             setTaskOrReportKey(jobExecTO, key);\n                             jobExecTO.setStatus(\n                                     scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).name());\n-                            jobExecTO.setStartDate(jec.getFireTime());\n+                            jobExecTO.setStart(jec.getFireTime());\n \n                             jobExecTOs.add(jobExecTO);\n                         }\n@@ -128,7 +128,7 @@ public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, fin\n                                     E jobExecTO = reference.newInstance();\n                                     setTaskOrReportKey(jobExecTO, key);\n                                     jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n-                                    jobExecTO.setStartDate(t.getStartTime());\n+                                    jobExecTO.setStart(t.getStartTime());\n \n                                     jobExecTOs.add(jobExecTO);\n                                 }"},{"sha":"17323eda4dc798957a53ed846d7aa8e10cc5b18d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -164,8 +164,8 @@ public void exportExecutionResult(final OutputStream os, final ReportExec report\n             Map<String, Object> parameters = new HashMap<>();\n             parameters.put(\"status\", reportExec.getStatus());\n             parameters.put(\"message\", reportExec.getMessage());\n-            parameters.put(\"startDate\", reportExec.getStartDate());\n-            parameters.put(\"endDate\", reportExec.getEndDate());\n+            parameters.put(\"start\", reportExec.getStart());\n+            parameters.put(\"end\", reportExec.getEnd());\n \n             switch (format) {\n                 case HTML:\n@@ -230,7 +230,7 @@ public ReportExec getAndCheckReportExec(final Long executionKey) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n-    public ReportExecTO execute(final Long key, final Date start) {\n+    public ReportExecTO execute(final Long key, final Date startAt) {\n         Report report = reportDAO.find(key);\n         if (report == null) {\n             throw new NotFoundException(\"Report \" + key);\n@@ -243,7 +243,7 @@ public ReportExecTO execute(final Long key, final Date start) {\n         }\n \n         try {\n-            jobInstanceLoader.registerJob(report, start);\n+            jobInstanceLoader.registerJob(report, startAt);\n \n             scheduler.getScheduler().triggerJob(new JobKey(JobNamer.getJobName(report), Scheduler.DEFAULT_GROUP));\n         } catch (Exception e) {\n@@ -256,7 +256,7 @@ public ReportExecTO execute(final Long key, final Date start) {\n \n         ReportExecTO result = new ReportExecTO();\n         result.setReport(key);\n-        result.setStartDate(new Date());\n+        result.setStart(new Date());\n         result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n "},{"sha":"28206db6d90760ec8523c1cb4ce20d55657ecd66","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -105,7 +105,7 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         try {\n             jobInstanceLoader.registerJob(\n                     task,\n-                    task.getStart(),\n+                    task.getStartAt(),\n                     confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n@@ -138,7 +138,7 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n         try {\n             jobInstanceLoader.registerJob(\n                     task,\n-                    task.getStart(),\n+                    task.getStartAt(),\n                     confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n@@ -187,7 +187,7 @@ public <T extends AbstractTaskTO> T read(final Long taskKey, final boolean detai\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n-    public TaskExecTO execute(final Long taskKey, final Date start, final boolean dryRun) {\n+    public TaskExecTO execute(final Long taskKey, final Date startAt, final boolean dryRun) {\n         Task task = taskDAO.find(taskKey);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskKey);\n@@ -218,12 +218,12 @@ public TaskExecTO execute(final Long taskKey, final Date start, final boolean dr\n                 try {\n                     Map<String, Object> jobDataMap = jobInstanceLoader.registerJob(\n                             (SchedTask) task,\n-                            start,\n+                            startAt,\n                             confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n \n                     jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n \n-                    if (start == null) {\n+                    if (startAt == null) {\n                         scheduler.getScheduler().triggerJob(\n                                 new JobKey(JobNamer.getJobName(task), Scheduler.DEFAULT_GROUP),\n                                 new JobDataMap(jobDataMap));\n@@ -238,7 +238,7 @@ public TaskExecTO execute(final Long taskKey, final Date start, final boolean dr\n \n                 result = new TaskExecTO();\n                 result.setTask(taskKey);\n-                result.setStartDate(new Date());\n+                result.setStart(new Date());\n                 result.setStatus(\"JOB_FIRED\");\n                 result.setMessage(\"Job fired; waiting for results...\");\n                 break;\n@@ -279,7 +279,12 @@ public int countExecutions(final Long taskId) {\n     public List<TaskExecTO> listExecutions(\n             final Long taskKey, final int page, final int size, final List<OrderByClause> orderByClauses) {\n \n-        return CollectionUtils.collect(taskExecDAO.findAll(taskKey, page, size, orderByClauses),\n+        Task task = taskDAO.find(taskKey);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskKey);\n+        }\n+\n+        return CollectionUtils.collect(taskExecDAO.findAll(task, page, size, orderByClauses),\n                 new Transformer<TaskExec, TaskExecTO>() {\n \n             @Override"},{"sha":"dbcdd3f7f61268391c8d47c400962d2fcade74f9","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/JobInstanceLoaderImpl.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FJobInstanceLoaderImpl.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -92,7 +92,7 @@ public class JobInstanceLoaderImpl implements JobInstanceLoader, SyncopeLoader {\n \n     private void registerJob(\n             final String jobName, final Job jobInstance,\n-            final String cronExpression, final Date start,\n+            final String cronExpression, final Date startAt,\n             final Map<String, Object> jobMap)\n             throws SchedulerException, ParseException {\n \n@@ -125,7 +125,7 @@ private void registerJob(\n                 usingJobData(new JobDataMap(jobMap));\n \n         // 3. Trigger\n-        if (cronExpression == null && start == null) {\n+        if (cronExpression == null && startAt == null) {\n             // Jobs added with no trigger must be durable\n             scheduler.getScheduler().addJob(jobDetailBuilder.storeDurably().build(), true);\n         } else {\n@@ -134,16 +134,16 @@ private void registerJob(\n             if (cronExpression == null) {\n                 triggerBuilder = TriggerBuilder.newTrigger().\n                         withIdentity(JobNamer.getTriggerName(jobName)).\n-                        startAt(start);\n+                        startAt(startAt);\n             } else {\n                 triggerBuilder = TriggerBuilder.newTrigger().\n                         withIdentity(JobNamer.getTriggerName(jobName)).\n                         withSchedule(CronScheduleBuilder.cronSchedule(cronExpression));\n \n-                if (start == null) {\n+                if (startAt == null) {\n                     triggerBuilder = triggerBuilder.startNow();\n                 } else {\n-                    triggerBuilder = triggerBuilder.startAt(start);\n+                    triggerBuilder = triggerBuilder.startAt(startAt);\n                 }\n             }\n \n@@ -177,7 +177,7 @@ private <T> T createSpringBean(final Class<T> jobClass) {\n     }\n \n     @Override\n-    public Map<String, Object> registerJob(final SchedTask task, final Date start, final long interruptMaxRetries)\n+    public Map<String, Object> registerJob(final SchedTask task, final Date startAt, final long interruptMaxRetries)\n             throws SchedulerException, ParseException {\n \n         TaskJob job = createSpringBean(TaskJob.class);\n@@ -198,20 +198,20 @@ public Map<String, Object> registerJob(final SchedTask task, final Date start, f\n                 JobNamer.getJobName(task),\n                 job,\n                 task.getCronExpression(),\n-                start,\n+                startAt,\n                 jobMap);\n         return jobMap;\n     }\n \n     @Override\n-    public void registerJob(final Report report, final Date start) throws SchedulerException, ParseException {\n+    public void registerJob(final Report report, final Date startAt) throws SchedulerException, ParseException {\n         ReportJob job = createSpringBean(ReportJob.class);\n         job.setReportKey(report.getKey());\n \n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobInstanceLoader.DOMAIN, AuthContextUtils.getDomain());\n \n-        registerJob(JobNamer.getJobName(report), job, report.getCronExpression(), start, jobMap);\n+        registerJob(JobNamer.getJobName(report), job, report.getCronExpression(), startAt, jobMap);\n     }\n \n     private void registerNotificationJob(final String cronExpression) throws SchedulerException, ParseException {\n@@ -282,7 +282,7 @@ public Void exec() {\n                     tasks.addAll(taskDAO.<PushTask>findAll(TaskType.PUSH));\n                     for (SchedTask task : tasks) {\n                         try {\n-                            registerJob(task, task.getStart(), notificationConf.getRight());\n+                            registerJob(task, task.getStartAt(), notificationConf.getRight());\n                         } catch (Exception e) {\n                             LOG.error(\"While loading job instance for task \" + task.getKey(), e);\n                         }"},{"sha":"c09cca6f32015f0bc7f914657b47af2ddde1a3e8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/notification/NotificationJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fnotification%2FNotificationJobDelegate.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -85,7 +85,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n-        execution.setStartDate(new Date());\n+        execution.setStart(new Date());\n \n         boolean retryPossible = true;\n \n@@ -181,7 +181,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                             \"Could not send notification to \" + to, e);\n                 }\n \n-                execution.setEndDate(new Date());\n+                execution.setEnd(new Date());\n             }\n         }\n "},{"sha":"198085864bbe92b06fb1306e3a598c252012cecb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/ReportJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FReportJobDelegate.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -89,7 +89,7 @@ public void execute(final Long reportKey) throws JobExecutionException {\n         // 1. create execution\n         ReportExec execution = entityFactory.newEntity(ReportExec.class);\n         execution.setStatus(ReportExecStatus.STARTED);\n-        execution.setStartDate(new Date());\n+        execution.setStart(new Date());\n         execution.setReport(report);\n         execution = reportExecDAO.save(execution);\n \n@@ -188,7 +188,7 @@ public void execute(final Long reportKey) throws JobExecutionException {\n \n             execution.setExecResult(baos.toByteArray());\n             execution.setMessage(reportExecutionMessage.toString());\n-            execution.setEndDate(new Date());\n+            execution.setEnd(new Date());\n             reportExecDAO.save(execution);\n         }\n     }"},{"sha":"2036c689b158c6459f872f0d42b36c3ea1a6bd70","filename":"core/logic/src/main/resources/report/report2csv.xsl","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2csv.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2csv.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2csv.xsl?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -26,8 +26,8 @@ under the License.\n  \n   <xsl:param name=\"status\"/>\n   <xsl:param name=\"message\"/>\n-  <xsl:param name=\"startDate\"/>\n-  <xsl:param name=\"endDate\"/>\n+  <xsl:param name=\"start\"/>\n+  <xsl:param name=\"end\"/>\n     \n   <xsl:template match=\"/\">\n     <xsl:apply-templates/>"},{"sha":"2ad86cc1dca0beda56ad9fd2edfef0995e1c4ba1","filename":"core/logic/src/main/resources/report/report2fo.xsl","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2fo.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2fo.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2fo.xsl?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -27,8 +27,8 @@ under the License.\n  \n   <xsl:param name=\"status\"/>\n   <xsl:param name=\"message\"/>\n-  <xsl:param name=\"startDate\"/>\n-  <xsl:param name=\"endDate\"/>\n+  <xsl:param name=\"start\"/>\n+  <xsl:param name=\"end\"/>\n   \n   <xsl:template match=\"/\">\n     <fo:root xmlns:fo=\"http://www.w3.org/1999/XSL/Format\" font-family=\"Helvetica\" font-size=\"10pt\">\n@@ -71,7 +71,7 @@ under the License.\n                 </fo:table-cell>\n                 <fo:table-cell>\n                   <fo:block font-size=\"18pt\" font-weight=\"bold\">\n-                    <xsl:value-of select=\"$startDate\"/>\n+                    <xsl:value-of select=\"$start\"/>\n                   </fo:block>\n                 </fo:table-cell>\n               </fo:table-row>\n@@ -81,7 +81,7 @@ under the License.\n                 </fo:table-cell>\n                 <fo:table-cell>\n                   <fo:block font-size=\"18pt\" font-weight=\"bold\">\n-                    <xsl:value-of select=\"$endDate\"/>\n+                    <xsl:value-of select=\"$end\"/>\n                   </fo:block>\n                 </fo:table-cell>\n               </fo:table-row>"},{"sha":"920a4f9f963bfd5246fd07bf75543f153aa44d01","filename":"core/logic/src/main/resources/report/report2html.xsl","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2html.xsl","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2html.xsl","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Freport%2Freport2html.xsl?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -26,8 +26,8 @@ under the License.\n  \n   <xsl:param name=\"status\"/>\n   <xsl:param name=\"message\"/>\n-  <xsl:param name=\"startDate\"/>\n-  <xsl:param name=\"endDate\"/>\n+  <xsl:param name=\"start\"/>\n+  <xsl:param name=\"end\"/>\n   \n   <xsl:template match=\"/\">\n     <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n@@ -53,7 +53,7 @@ under the License.\n             </td>\n             <td>\n               <h2>\n-                <xsl:value-of select=\"$startDate\"/>\n+                <xsl:value-of select=\"$start\"/>\n               </h2>\n             </td>\n           </tr>\n@@ -63,7 +63,7 @@ under the License.\n             </td>\n             <td>\n               <h2>\n-                <xsl:value-of select=\"$endDate\"/>\n+                <xsl:value-of select=\"$end\"/>\n               </h2>\n             </td>\n           </tr>"},{"sha":"faa8a144c3a7b5cb85264e6a9c0c3b37902b3acc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskExecDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -37,7 +37,7 @@ <T extends Task> List<TaskExec> findAll(\n \n     int count(Long taskKey);\n \n-    List<TaskExec> findAll(Long taskKey, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n+    <T extends Task> List<TaskExec> findAll(T task, int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n \n     TaskExec save(TaskExec execution);\n "},{"sha":"8654b1d68afaf1382dbff76550f6790efa48d28f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Exec.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FExec.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -22,24 +22,25 @@\n \n public interface Exec extends Entity<Long> {\n \n-    Date getEndDate();\n-\n-    String getMessage();\n-\n-    Date getStartDate();\n-\n-    String getStatus();\n-\n-    void setEndDate(Date endDate);\n-\n     /**\n      * Set a message for this execution, taking care of replacing every null character with newline.\n      *\n      * @param message the message to set for this execution\n      */\n     void setMessage(String message);\n \n-    void setStartDate(Date startDate);\n+    String getMessage();\n \n     void setStatus(String status);\n+\n+    String getStatus();\n+\n+    void setStart(Date start);\n+\n+    Date getStart();\n+\n+    void setEnd(Date end);\n+\n+    Date getEnd();\n+\n }"},{"sha":"c88c23d431b26f3fe35a03c6ffdf2091b13816f5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SchedTask.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSchedTask.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -34,9 +34,9 @@ public interface SchedTask extends Task {\n \n     String getJobDelegateClassName();\n \n-    Date getStart();\n+    Date getStartAt();\n \n-    void setStart(Date start);\n+    void setStartAt(Date startAt);\n \n     void setCronExpression(String cronExpression);\n "},{"sha":"dc72759e0cc55d22d4eed7e873edff81b362cb4d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -51,12 +51,12 @@ private ReportExec findLatest(final Report report, final String field) {\n \n     @Override\n     public ReportExec findLatestStarted(final Report report) {\n-        return findLatest(report, \"startDate\");\n+        return findLatest(report, \"start\");\n     }\n \n     @Override\n     public ReportExec findLatestEnded(final Report report) {\n-        return findLatest(report, \"endDate\");\n+        return findLatest(report, \"end\");\n     }\n \n     @Override\n@@ -68,16 +68,16 @@ public List<ReportExec> findAll(\n                 append(\" e WHERE e.report=:report \");\n \n         if (startedBefore != null) {\n-            queryString.append(\" AND e.startDate < :startedBefore\");\n+            queryString.append(\" AND e.start < :startedBefore\");\n         }\n         if (startedAfter != null) {\n-            queryString.append(\" AND e.startDate > :startedAfter\");\n+            queryString.append(\" AND e.start > :startedAfter\");\n         }\n         if (endedBefore != null) {\n-            queryString.append(\" AND e.endDate < :endedBefore\");\n+            queryString.append(\" AND e.end < :endedBefore\");\n         }\n         if (endedAfter != null) {\n-            queryString.append(\" AND e.endDate > :endedAfter\");\n+            queryString.append(\" AND e.end > :endedAfter\");\n         }\n \n         TypedQuery<ReportExec> query = entityManager().createQuery(queryString.toString(), ReportExec.class);"},{"sha":"d88a2cb880363e0372c11ee9ce7312d194759bac","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -60,12 +60,12 @@ private <T extends Task> TaskExec findLatest(final T task, final String field) {\n \n     @Override\n     public <T extends Task> TaskExec findLatestStarted(final T task) {\n-        return findLatest(task, \"startDate\");\n+        return findLatest(task, \"start\");\n     }\n \n     @Override\n     public <T extends Task> TaskExec findLatestEnded(final T task) {\n-        return findLatest(task, \"endDate\");\n+        return findLatest(task, \"end\");\n     }\n \n     @Override\n@@ -77,16 +77,16 @@ public <T extends Task> List<TaskExec> findAll(\n                 append(\" e WHERE e.task=:task \");\n \n         if (startedBefore != null) {\n-            queryString.append(\" AND e.startDate < :startedBefore\");\n+            queryString.append(\" AND e.start < :startedBefore\");\n         }\n         if (startedAfter != null) {\n-            queryString.append(\" AND e.startDate > :startedAfter\");\n+            queryString.append(\" AND e.start > :startedAfter\");\n         }\n         if (endedBefore != null) {\n-            queryString.append(\" AND e.endDate < :endedBefore\");\n+            queryString.append(\" AND e.end < :endedBefore\");\n         }\n         if (endedAfter != null) {\n-            queryString.append(\" AND e.endDate > :endedAfter\");\n+            queryString.append(\" AND e.end > :endedAfter\");\n         }\n \n         TypedQuery<TaskExec> query = entityManager().createQuery(queryString.toString(), TaskExec.class);\n@@ -135,15 +135,15 @@ private String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n     }\n \n     @Override\n-    public List<TaskExec> findAll(\n-            final Long taskKey, final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n+    public <T extends Task> List<TaskExec> findAll(\n+            final T task, final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n \n         String queryString =\n-                \"SELECT e FROM \" + JPATaskExec.class.getSimpleName() + \" e WHERE e.task.id=:taskKey \"\n+                \"SELECT e FROM \" + JPATaskExec.class.getSimpleName() + \" e WHERE e.task=:task \"\n                 + toOrderByStatement(orderByClauses);\n \n         TypedQuery<TaskExec> query = entityManager().createQuery(queryString, TaskExec.class);\n-        query.setParameter(\"taskKey\", taskKey);\n+        query.setParameter(\"task\", task);\n \n         // page starts from 1, while setFirtResult() starts from 0\n         query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));"},{"sha":"039d1f731c5485a28d2d38f80c6ec80cdc321223","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractExec.java","status":"modified","additions":14,"deletions":17,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -46,13 +46,13 @@ public abstract class AbstractExec extends AbstractEntity<Long> implements Exec\n      */\n     @NotNull\n     @Temporal(TemporalType.TIMESTAMP)\n-    protected Date startDate;\n+    protected Date start;\n \n     /**\n      * End instant of this execution.\n      */\n     @Temporal(TemporalType.TIMESTAMP)\n-    protected Date endDate;\n+    protected Date end;\n \n     @Override\n     public String getStatus() {\n@@ -75,33 +75,30 @@ public void setMessage(final String message) {\n     }\n \n     @Override\n-    public Date getEndDate() {\n-        return endDate == null\n+    public Date getStart() {\n+        return start == null\n                 ? null\n-                : new Date(endDate.getTime());\n+                : new Date(start.getTime());\n     }\n \n     @Override\n-\n-    public void setEndDate(final Date endDate) {\n-        this.endDate = endDate == null\n+    public void setStart(final Date start) {\n+        this.start = start == null\n                 ? null\n-                : new Date(endDate.getTime());\n+                : new Date(start.getTime());\n     }\n \n     @Override\n-\n-    public Date getStartDate() {\n-        return startDate == null\n+    public Date getEnd() {\n+        return end == null\n                 ? null\n-                : new Date(startDate.getTime());\n+                : new Date(end.getTime());\n     }\n \n     @Override\n-\n-    public void setStartDate(final Date startDate) {\n-        this.startDate = startDate == null\n+    public void setEnd(final Date end) {\n+        this.end = end == null\n                 ? null\n-                : new Date(startDate.getTime());\n+                : new Date(end.getTime());\n     }\n }"},{"sha":"c487560fa3496d5682531dd5f5b86482ab415e89","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASchedTask.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASchedTask.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -39,7 +39,7 @@ public class JPASchedTask extends AbstractTask implements SchedTask {\n     private static final long serialVersionUID = 7596236684832602180L;\n \n     @Temporal(TemporalType.TIMESTAMP)\n-    private Date start;\n+    private Date startAt;\n \n     private String cronExpression;\n \n@@ -62,13 +62,13 @@ public JPASchedTask() {\n     }\n \n     @Override\n-    public Date getStart() {\n-        return start;\n+    public Date getStartAt() {\n+        return startAt;\n     }\n \n     @Override\n-    public void setStart(final Date start) {\n-        this.start = start;\n+    public void setStartAt(final Date start) {\n+        this.startAt = start;\n     }\n \n     @Override"},{"sha":"a1712bb998228494bbbc38bab1fc866e957f2d73","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPATaskExec.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPATaskExec.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -68,8 +68,8 @@ public void setTask(final Task task) {\n     public String toString() {\n         return new StringBuilder(getClass().getSimpleName()).append('{').\n                 append(\"id=\").append(id).append(\", \").\n-                append(\"startDate=\").append(startDate).append(\", \").\n-                append(\"endDate=\").append(endDate).append(\", \").\n+                append(\"start=\").append(start).append(\", \").\n+                append(\"end=\").append(end).append(\", \").\n                 append(\"task=\").append(task).append(\", \").\n                 append(\"status=\").append(status).append(\", \").\n                 append(\"message=\").append(message)."},{"sha":"cdf44781d486b683a24cffc4040ddaeda7ca1701","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -76,8 +76,8 @@ public void issueSYNCOPE214() {\n         faultyMessage = faultyMessage.replace('a', '\\0');\n \n         TaskExec exec = entityFactory.newEntity(TaskExec.class);\n-        exec.setStartDate(new Date());\n-        exec.setEndDate(new Date());\n+        exec.setStart(new Date());\n+        exec.setEnd(new Date());\n         exec.setStatus(PropagationTaskExecStatus.SUCCESS.name());\n         exec.setMessage(faultyMessage);\n "},{"sha":"c627acfffd747657842415244e6fd1251c136e2b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ReportTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FReportTest.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -77,8 +77,8 @@ public void save() {\n \n         ReportExec reportExec = entityFactory.newEntity(ReportExec.class);\n         reportExec.setReport(report);\n-        reportExec.setStartDate(new Date());\n-        reportExec.setEndDate(new Date());\n+        reportExec.setStart(new Date());\n+        reportExec.setEnd(new Date());\n         reportExec.setStatus(ReportExecStatus.SUCCESS);\n \n         report.add(reportExec);"},{"sha":"4a62a6a926147d73117a6a4c9369abd33b4b33c3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -126,7 +126,7 @@ public void addPropagationTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n         execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n-        execution.setStartDate(new Date());\n+        execution.setStart(new Date());\n         task.addExec(execution);\n \n         taskDAO.save(task);\n@@ -148,7 +148,7 @@ public void addSyncTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n-        execution.setStartDate(new Date());\n+        execution.setStart(new Date());\n         execution.setMessage(\"A message\");\n         task.addExec(execution);\n \n@@ -171,7 +171,7 @@ public void addPushTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n-        execution.setStartDate(new Date());\n+        execution.setStart(new Date());\n         execution.setMessage(\"A message\");\n         task.addExec(execution);\n "},{"sha":"10c8819af0a2a59f6ef3f4b438fafa4a6d81e650","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -973,7 +973,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"1\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"1\" task_id=\"1\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"1\" task_id=\"1\" start=\"2015-12-17 09:40:00.506\" end=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"2\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n@@ -992,7 +992,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" anyKey=\"1\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"6\" task_id=\"6\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"6\" task_id=\"6\" start=\"2015-12-17 09:40:00.506\" end=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" syncMode=\"FULL_RECONCILIATION\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\" active=\"1\"/>\n@@ -1118,7 +1118,7 @@ under the License.\n   <Report id=\"1\" name=\"test\" active=\"1\"/>\n   <ReportletConfInstance id=\"1\" Report_id=\"1\" \n                          serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"plainAttrs\":[\"fullname\",\"gender\"],\"derAttrs\":[\"cn\"],\"virAttrs\":[\"virtualdata\"],\"features\":[\"key\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n-  <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n+  <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" start=\"2012-02-26 15:40:04\" end=\"2012-02-26 15:41:04\"/>\n   \n   <SyncopeLogger logName=\"syncope.audit.[REST]:[EntitlementLogic]:[]:[getOwn]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>\n   "},{"sha":"434d7358d62e70373e2617bdecf3337901fd9aec","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobInstanceLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobInstanceLoader.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -30,10 +30,10 @@ public interface JobInstanceLoader {\n \n     String DOMAIN = \"domain\";\n \n-    Map<String, Object> registerJob(final SchedTask task, final Date start, final long interruptMaxRetries)\n+    Map<String, Object> registerJob(final SchedTask task, final Date startAt, final long interruptMaxRetries)\n             throws SchedulerException, ParseException;\n \n-    void registerJob(final Report report, final Date start)\n+    void registerJob(final Report report, final Date startAt)\n             throws SchedulerException, ParseException;\n \n     void unregisterJob(Task task);"},{"sha":"7b2ce803dc4c2ab8ca553f215a9d52fb786347b8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -80,13 +80,13 @@ public ReportTO getReportTO(final Report report) {\n                 ? StringUtils.EMPTY\n                 : latestExec.getStatus());\n \n-        reportTO.setStartDate(latestExec == null\n+        reportTO.setStart(latestExec == null\n                 ? null\n-                : latestExec.getStartDate());\n+                : latestExec.getStart());\n \n-        reportTO.setEndDate(latestExec == null\n+        reportTO.setEnd(latestExec == null\n                 ? null\n-                : latestExec.getEndDate());\n+                : latestExec.getEnd());\n \n         for (ReportExec reportExec : report.getExecs()) {\n             reportTO.getExecutions().add(getReportExecTO(reportExec));"},{"sha":"5686a5a99ebe4612a9678fa99c68afa87133afbe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -198,7 +198,7 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtils taskU\n         }\n \n         SchedTask task = taskUtils.newTask();\n-        task.setStart(taskTO.getStart());\n+        task.setStartAt(taskTO.getStartAt());\n         task.setCronExpression(taskTO.getCronExpression());\n         task.setName(taskTO.getName());\n         task.setDescription(taskTO.getDescription());\n@@ -288,8 +288,8 @@ public <T extends AbstractTaskTO> T getTaskTO(final Task task, final TaskUtils t\n \n         TaskExec latestExec = taskExecDAO.findLatestStarted(task);\n         taskTO.setLatestExecStatus(latestExec == null ? StringUtils.EMPTY : latestExec.getStatus());\n-        taskTO.setStartDate(latestExec == null ? null : latestExec.getStartDate());\n-        taskTO.setEndDate(latestExec == null ? null : latestExec.getEndDate());\n+        taskTO.setStart(latestExec == null ? null : latestExec.getStart());\n+        taskTO.setEnd(latestExec == null ? null : latestExec.getEnd());\n \n         if (details) {\n             for (TaskExec execution : task.getExecs()) {"},{"sha":"ea6a52587178947d637b9d310836231f68e9359b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -84,7 +84,7 @@ public void execute(final Long taskKey, final boolean dryRun) throws JobExecutio\n         }\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n-        execution.setStartDate(new Date());\n+        execution.setStart(new Date());\n         execution.setTask(task);\n \n         AuditElements.Result result;\n@@ -100,7 +100,7 @@ public void execute(final Long taskKey, final boolean dryRun) throws JobExecutio\n             execution.setMessage(ExceptionUtils2.getFullStackTrace(e));\n             execution.setStatus(TaskJob.Status.FAILURE.name());\n         }\n-        execution.setEndDate(new Date());\n+        execution.setEnd(new Date());\n \n         if (hasToBeRegistered(execution)) {\n             taskExecDAO.saveAndAdd(taskKey, execution);"},{"sha":"00affa6fb162d699b21b7ec9c20fd09d6b8f0ea1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -347,7 +347,7 @@ protected void delete(\n     public TaskExec execute(final PropagationTask task, final PropagationReporter reporter) {\n         List<PropagationActions> actions = getPropagationActions(task.getResource());\n \n-        Date startDate = new Date();\n+        Date start = new Date();\n \n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n@@ -440,9 +440,9 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 }\n             }\n \n-            execution.setStartDate(startDate);\n+            execution.setStart(start);\n             execution.setMessage(taskExecutionMessage);\n-            execution.setEndDate(new Date());\n+            execution.setEnd(new Date());\n \n             LOG.debug(\"Execution finished: {}\", execution);\n "},{"sha":"82c25db58854b16eec8c9dec1f2d9fa4e9e5bc4b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -90,7 +90,7 @@ public void write(final OutputStream os) throws IOException {\n \n     @Override\n     public ReportExecTO execute(final ExecuteQuery query) {\n-        return logic.execute(query.getKey(), query.getStart());\n+        return logic.execute(query.getKey(), query.getStartAt());\n     }\n \n     @Override"},{"sha":"5b331036494116bae9782cc110cbc05d819f313c","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -70,7 +70,7 @@ public void delete(final Long key) {\n \n     @Override\n     public TaskExecTO execute(final ExecuteQuery query) {\n-        return logic.execute(query.getKey(), query.getStart(), query.getDryRun());\n+        return logic.execute(query.getKey(), query.getStartAt(), query.getDryRun());\n     }\n \n     @SuppressWarnings(\"unchecked\")"},{"sha":"108c1926ec4429376078775484191234883b0097","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/907be4ae4efedf3821a5d8779dce4ee3da7b4acd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=907be4ae4efedf3821a5d8779dce4ee3da7b4acd","patch":"@@ -25,7 +25,6 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n@@ -98,9 +97,9 @@ public void deferred() {\n         assertNotNull(task);\n \n         Date initial = new Date();\n-        Date fiveSecsLater = DateUtils.addSeconds(initial, 2);\n+        Date later = DateUtils.addSeconds(initial, 2);\n \n-        taskService.execute(new ExecuteQuery.Builder().key(task.getKey()).start(fiveSecsLater).build());\n+        taskService.execute(new ExecuteQuery.Builder().key(task.getKey()).startAt(later).build());\n \n         int i = 0;\n         int maxit = 50;\n@@ -124,9 +123,9 @@ public void deferred() {\n                 taskService.listExecutions(new TaskExecQuery.Builder().key(task.getKey()).build());\n         assertEquals(1, execs.getTotalCount());\n         assertTrue(execs.getResult().get(0).getStart().after(initial));\n-        assertEquals(\n-                DateUtils.round(fiveSecsLater, Calendar.SECOND),\n-                DateUtils.round(execs.getResult().get(0).getStart(), Calendar.SECOND));\n+        // round 1 sec for safety\n+        assertTrue(DateUtils.addSeconds(execs.getResult().get(0).getStart(), 1).after(later));\n+\n     }\n \n     @Test"}]}