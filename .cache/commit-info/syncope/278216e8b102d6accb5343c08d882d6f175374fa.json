{"sha":"278216e8b102d6accb5343c08d882d6f175374fa","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI3ODIxNmU4YjEwMmQ2YWNjYjUzNDNjMDhkODgyZDZmMTc1Mzc0ZmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-07-16T08:47:58Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-07-16T08:47:58Z"},"message":"[SYNCOPE-1578] Adding auth support to SRA, with OIDC / OAUTH2 implementations, reviewing several details on WA and Core to make all functional (#206)","tree":{"sha":"d4e4f828a79b4877ffa9b76455770fb5c94f6883","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d4e4f828a79b4877ffa9b76455770fb5c94f6883"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/278216e8b102d6accb5343c08d882d6f175374fa","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEBQ+CRBK7hj4Ov3rIwAAdHIIACQE+lP62T89GSpi97sXRkZT\npP0zM5nn+IRnE34rWOs9LWdTwupwRb8QBKPEZNVkX7KaTlkskU5khqM7eTsdpO3S\n7Ia2TtWnhU8Dqcj3Of6/DjHh14krGwF8wzdOteW235eiQWRm5fJZI3k323rz/I1x\nu9v51/AKouAMNnjVxA7cyAJRkVNBO/9RK7b/zMA+q2wudT2Pu+Gx2WvihUd3IXnL\nIr9f4T4WZjk7hjY5mE4Q+EWy+UCtdn2OlnEC0yZ1nJGfiK3Z5ZCVBfT1gFxEpwcz\ngcSa61e9NGKCJGmuQdCpeagAHvS/B/v5DdkYozwU0MoIeZTSngKNkXTCuQa0ELo=\n=GK58\n-----END PGP SIGNATURE-----\n","payload":"tree d4e4f828a79b4877ffa9b76455770fb5c94f6883\nparent 72c8cfdcb42d4698670f92e1b8cb7b65191820c3\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1594889278 +0200\ncommitter GitHub <noreply@github.com> 1594889278 +0200\n\n[SYNCOPE-1578] Adding auth support to SRA, with OIDC / OAUTH2 implementations, reviewing several details on WA and Core to make all functional (#206)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/278216e8b102d6accb5343c08d882d6f175374fa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/278216e8b102d6accb5343c08d882d6f175374fa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/278216e8b102d6accb5343c08d882d6f175374fa/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"72c8cfdcb42d4698670f92e1b8cb7b65191820c3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/72c8cfdcb42d4698670f92e1b8cb7b65191820c3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/72c8cfdcb42d4698670f92e1b8cb7b65191820c3"}],"stats":{"total":4172,"additions":2487,"deletions":1685},"files":[{"sha":"f44f586e1d801eddcb9476da7354901e767c9aae","filename":".travis.yml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -116,6 +116,9 @@ jobs:\n     - stage: fit\n       name: \"Integration Tests: Tomcat / H2 / JSON Content-Type + Zookeeper\"\n       script: mvn -f fit/core-reference/pom.xml -P zookeeper-it -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n+    - stage: fit\n+      name: \"Integration Tests: SRA and WA\"\n+      script: mvn -f fit/wa-reference/pom.xml verify -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n       after_failure:\n        - cat fit/core-reference/target/log/*\n        - cat fit/core-reference/target/failsafe-reports/org.apache.syncope.fit.*-output.txt"},{"sha":"3c210bf4548ac9cfdd908ed45443c6713315aa2c","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARouteDirectoryPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -126,7 +126,7 @@ public void onClick(final AjaxRequestTarget target, final SRARouteTO ignore) {\n                         new AjaxWizard.EditItemActionEvent<>(\n                                 SRARouteRestClient.read(model.getObject().getKey()), target));\n             }\n-        }, ActionLink.ActionType.EDIT, AMEntitlement.GATEWAY_ROUTE_UPDATE);\n+        }, ActionLink.ActionType.EDIT, AMEntitlement.SRA_ROUTE_UPDATE);\n \n         panel.add(new ActionLink<SRARouteTO>() {\n \n@@ -139,7 +139,7 @@ public void onClick(final AjaxRequestTarget target, final SRARouteTO ignore) {\n                 send(SRARouteDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(clone, target));\n             }\n-        }, ActionLink.ActionType.CLONE, AMEntitlement.GATEWAY_ROUTE_CREATE);\n+        }, ActionLink.ActionType.CLONE, AMEntitlement.SRA_ROUTE_CREATE);\n \n         panel.add(new ActionLink<SRARouteTO>() {\n \n@@ -158,7 +158,7 @@ public void onClick(final AjaxRequestTarget target, final SRARouteTO ignore) {\n                 }\n                 ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n             }\n-        }, ActionLink.ActionType.DELETE, AMEntitlement.GATEWAY_ROUTE_DELETE, true);\n+        }, ActionLink.ActionType.DELETE, AMEntitlement.SRA_ROUTE_DELETE, true);\n \n         return panel;\n     }"},{"sha":"acde277b6ae92a17b196dcc88648fbe9ae1be009","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/wizards/WizardMgtPanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.html?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -41,7 +41,7 @@ <h3 class=\"card-title\">\n \n       <wicket:enclosure child=\"add\">\n         <div class=\"modal-footer\" style=\"text-align: right\">\n-          <a href=\"#\" class=\"btn btn-default btn-circle btn-lg pull-left\" wicket:id=\"utility\">\n+          <a href=\"#\" class=\"btn btn-success btn-circle btn-lg pull-left\" wicket:id=\"utility\">\n             <i wicket:id=\"utilityIcon\" class=\"fas fa-sign-out-alt\"></i>\n           </a>\n           <a href=\"#\" class=\"btn btn-success btn-circle btn-lg\" wicket:id=\"add\">"},{"sha":"6192fd4843d0cdcadf2d4b3bc27d839c8fd90a73","filename":"client/idrepo/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -135,6 +135,15 @@ protected void cleanup() {\n         restClientFactory.setPassword(null);\n     }\n \n+    /**\n+     * Gives the base address for REST calls.\n+     *\n+     * @return the base address for REST calls\n+     */\n+    public String getAddress() {\n+        return restClientFactory.getAddress();\n+    }\n+\n     /**\n      * Attempts to extend the lifespan of the JWT currently in use.\n      */"},{"sha":"9a28b37cdd6f128c96d4f487da3ff99890c8afaa","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AbstractAuthModuleConf.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAbstractAuthModuleConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -24,18 +24,4 @@ public abstract class AbstractAuthModuleConf implements BaseBean, AuthModuleConf\n \n     private static final long serialVersionUID = 4153200197344709778L;\n \n-    private String name;\n-\n-    public AbstractAuthModuleConf() {\n-        setName(getClass().getName());\n-    }\n-\n-    @Override\n-    public final String getName() {\n-        return name;\n-    }\n-\n-    public final void setName(final String name) {\n-        this.name = name;\n-    }\n }"},{"sha":"9fbac72ffe8b03381eda405668e25406db6ff00d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/AuthModuleConf.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FAuthModuleConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -23,11 +23,4 @@\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AuthModuleConf extends BaseBean {\n-\n-    /**\n-     * Given name of related authentication module instance.\n-     *\n-     * @return name of this authentication module instance\n-     */\n-    String getName();\n }"},{"sha":"0d0ecc4cf5f9730862bbad1a18f380b9b04a6c63","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/auth/SyncopeAuthModuleConf.java","status":"modified","additions":3,"deletions":18,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fauth%2FSyncopeAuthModuleConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,19 +18,13 @@\n  */\n package org.apache.syncope.common.lib.auth;\n \n+import org.apache.syncope.common.lib.SyncopeConstants;\n+\n public class SyncopeAuthModuleConf extends AbstractAuthModuleConf {\n \n     private static final long serialVersionUID = -3334329948161152222L;\n \n-    /**\n-     * Syncope domain used for authentication, etc.\n-     */\n-    private String domain = \"Master\";\n-\n-    /**\n-     * Syncope instance URL primary used for REST.\n-     */\n-    private String url;\n+    private String domain = SyncopeConstants.MASTER_DOMAIN;\n \n     public String getDomain() {\n         return domain;\n@@ -39,13 +33,4 @@ public String getDomain() {\n     public void setDomain(final String domain) {\n         this.domain = domain;\n     }\n-\n-    public String getUrl() {\n-        return url;\n-    }\n-\n-    public void setUrl(final String url) {\n-        this.url = url;\n-    }\n-\n }"},{"sha":"84b88cb5c976879f415e077a1ea6bfefafd6028b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAccessPolicyConf.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAccessPolicyConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -35,8 +35,6 @@ public abstract class AbstractAccessPolicyConf implements BaseBean, AccessPolicy\n \n     private static final long serialVersionUID = 1153200197344709778L;\n \n-    private String name;\n-\n     private boolean enabled = true;\n \n     private boolean ssoEnabled = true;\n@@ -46,19 +44,6 @@ public abstract class AbstractAccessPolicyConf implements BaseBean, AccessPolicy\n     @JsonProperty(\"requiredAttrs\")\n     private final List<Attr> requiredAttrList = new ArrayList<>();\n \n-    public AbstractAccessPolicyConf() {\n-        setName(getClass().getName());\n-    }\n-\n-    @Override\n-    public final String getName() {\n-        return name;\n-    }\n-\n-    public final void setName(final String name) {\n-        this.name = name;\n-    }\n-\n     @Override\n     public boolean isEnabled() {\n         return enabled;"},{"sha":"3e51994e3404eacc1316c3d757f0dbe2e8be4c43","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAuthPolicyConf.java","status":"modified","additions":1,"deletions":22,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,24 +18,12 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n-import org.apache.syncope.common.lib.BaseBean;\n-\n-public abstract class AbstractAuthPolicyConf implements BaseBean, AuthPolicyConf {\n+public abstract class AbstractAuthPolicyConf implements AuthPolicyConf {\n \n     private static final long serialVersionUID = 9185127128182430142L;\n \n-    private String name;\n-\n     private AuthPolicyCriteriaConf criteria;\n \n-    public AbstractAuthPolicyConf() {\n-        setName(getClass().getName());\n-    }\n-\n-    public AbstractAuthPolicyConf(final String name) {\n-        setName(name);\n-    }\n-\n     @Override\n     public AuthPolicyCriteriaConf getCriteria() {\n         return criteria;\n@@ -44,13 +32,4 @@ public AuthPolicyCriteriaConf getCriteria() {\n     public void setCriteria(final AuthPolicyCriteriaConf criteria) {\n         this.criteria = criteria;\n     }\n-\n-    @Override\n-    public final String getName() {\n-        return name;\n-    }\n-\n-    public final void setName(final String name) {\n-        this.name = name;\n-    }\n }"},{"sha":"8f9bd14294af838af3c09bb32235c1a206c6db97","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAuthPolicyCriteriaConf.java","status":"removed","additions":0,"deletions":43,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAbstractAuthPolicyCriteriaConf.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -1,43 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.policy;\n-\n-public abstract class AbstractAuthPolicyCriteriaConf implements AuthPolicyCriteriaConf {\n-\n-    private static final long serialVersionUID = -6882164291962510245L;\n-\n-    private String name;\n-\n-    public AbstractAuthPolicyCriteriaConf() {\n-        setName(getClass().getName());\n-    }\n-\n-    public AbstractAuthPolicyCriteriaConf(final String name) {\n-        setName(name);\n-    }\n-\n-    @Override\n-    public final String getName() {\n-        return name;\n-    }\n-\n-    public final void setName(final String name) {\n-        this.name = name;\n-    }\n-}"},{"sha":"2462ee8bd6e7a050fcd92a0e74af7795d8fc9152","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AccessPolicyConf.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccessPolicyConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -26,13 +26,6 @@\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AccessPolicyConf extends BaseBean {\n \n-    /**\n-     * Give name of related access policy.\n-     *\n-     * @return name of this access policy\n-     */\n-    String getName();\n-\n     boolean isEnabled();\n \n     boolean isSsoEnabled();"},{"sha":"d72149f075bdbd7483f7a5ecfa0dd5195f628946","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AllowedAttrReleasePolicyConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAllowedAttrReleasePolicyConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class AllowedAttrReleasePolicyConf extends AbstractAttrReleasePolicyConf implements AttrReleasePolicyConf {\n+public class AllowedAttrReleasePolicyConf implements AttrReleasePolicyConf {\n \n     private static final long serialVersionUID = -1969836661359025380L;\n "},{"sha":"f16479c74cb96b8d1e21cab39f8003adf434c02e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AttrReleasePolicyConf.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAttrReleasePolicyConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -23,11 +23,4 @@\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AttrReleasePolicyConf extends BaseBean {\n-\n-    /**\n-     * Give name of related attr release policy.\n-     *\n-     * @return name of this attr release policy\n-     */\n-    String getName();\n }"},{"sha":"f1dcb1362f2fae6ffd55e94383a58a96928a7f93","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyConf.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -24,13 +24,6 @@\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AuthPolicyConf extends BaseBean {\n \n-    /**\n-     * Give name of related authentication policy instance.\n-     *\n-     * @return name of this authentication policy instance\n-     */\n-    String getName();\n-\n     /**\n      * Gets the policy criteria linked to this policy\n      * to establish criteria for success."},{"sha":"f228b5c08ea502991257a0705288bb6b12faaa7d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AuthPolicyCriteriaConf.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAuthPolicyCriteriaConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -31,11 +31,4 @@\n  */\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"_class\")\n public interface AuthPolicyCriteriaConf extends BaseBean {\n-\n-    /**\n-     * Describe the name of the authentication policy criteria.\n-     *\n-     * @return name of this authentication policy instance\n-     */\n-    String getName();\n }"},{"sha":"d4ed27a82eefc7d5a09a7814ec58afb8b9445a0c","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultAuthPolicyCriteriaConf.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultAuthPolicyCriteriaConf.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n-public class DefaultAuthPolicyCriteriaConf extends AbstractAuthPolicyCriteriaConf {\n+public class DefaultAuthPolicyCriteriaConf implements AuthPolicyCriteriaConf {\n \n     private static final long serialVersionUID = 3928807032588105869L;\n "},{"sha":"0fc1533adcffeea05f614ad7da27fccc8f7f0db1","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/AuthModuleTO.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuthModuleTO.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -32,8 +32,6 @@ public class AuthModuleTO implements EntityTO {\n \n     private String key;\n \n-    private String name;\n-\n     private String description;\n \n     private AuthModuleConf conf;\n@@ -51,14 +49,6 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-\n     public String getDescription() {\n         return description;\n     }\n@@ -101,7 +91,6 @@ public boolean equals(final Object obj) {\n         AuthModuleTO other = (AuthModuleTO) obj;\n         return new EqualsBuilder().\n                 append(key, other.key).\n-                append(name, other.name).\n                 append(description, other.description).\n                 append(items, other.items).\n                 append(conf, other.conf).\n@@ -112,7 +101,6 @@ public boolean equals(final Object obj) {\n     public int hashCode() {\n         return new HashCodeBuilder().\n                 append(key).\n-                append(name).\n                 append(description).\n                 append(items).\n                 append(conf)."},{"sha":"b5794df4fed94e334404ef1d151a64f6a91f8b1e","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCJWKSTO.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCJWKSTO.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -38,21 +38,23 @@ public void setJson(final String json) {\n         this.json = json;\n     }\n \n+    @Override\n     public String getKey() {\n         return key;\n     }\n \n+    @Override\n     public void setKey(final String key) {\n         this.key = key;\n     }\n \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()\n-            .appendSuper(super.hashCode())\n-            .append(key)\n-            .append(json)\n-            .toHashCode();\n+                .appendSuper(super.hashCode())\n+                .append(key)\n+                .append(json)\n+                .toHashCode();\n     }\n \n     @Override\n@@ -68,18 +70,18 @@ public boolean equals(final Object obj) {\n         }\n         OIDCJWKSTO rhs = (OIDCJWKSTO) obj;\n         return new EqualsBuilder()\n-            .appendSuper(super.equals(obj))\n-            .append(this.key, rhs.key)\n-            .append(this.json, rhs.json)\n-            .isEquals();\n+                .appendSuper(super.equals(obj))\n+                .append(this.key, rhs.key)\n+                .append(this.json, rhs.json)\n+                .isEquals();\n     }\n \n     @Override\n     public String toString() {\n         return new ToStringBuilder(this)\n-            .append(\"key\", key)\n-            .append(\"json\", json)\n-            .toString();\n+                .append(\"key\", key)\n+                .append(\"json\", json)\n+                .toString();\n     }\n \n     public static class Builder {"},{"sha":"2e2c3d5d461a03ac5dc5f363fc8f12d988807bb6","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/OIDCRPTO.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -40,8 +40,6 @@ public class OIDCRPTO extends ClientAppTO {\n \n     private boolean signIdToken;\n \n-    private String jwks;\n-\n     private OIDCSubjectType subjectType;\n \n     private final List<String> redirectUris = new ArrayList<>();\n@@ -50,6 +48,8 @@ public class OIDCRPTO extends ClientAppTO {\n \n     private final Set<String> supportedResponseTypes = new HashSet<>();\n \n+    private String logoutUri;\n+\n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n     @Schema(name = \"_class\", required = true, example = \"org.apache.syncope.common.lib.to.client.OIDCRPTO\")\n@@ -94,14 +94,6 @@ public void setSignIdToken(final boolean signIdToken) {\n         this.signIdToken = signIdToken;\n     }\n \n-    public String getJwks() {\n-        return jwks;\n-    }\n-\n-    public void setJwks(final String jwks) {\n-        this.jwks = jwks;\n-    }\n-\n     public OIDCSubjectType getSubjectType() {\n         return subjectType;\n     }\n@@ -110,6 +102,14 @@ public void setSubjectType(final OIDCSubjectType subjectType) {\n         this.subjectType = subjectType;\n     }\n \n+    public String getLogoutUri() {\n+        return logoutUri;\n+    }\n+\n+    public void setLogoutUri(final String logoutUri) {\n+        this.logoutUri = logoutUri;\n+    }\n+\n     @Override\n     public boolean equals(final Object obj) {\n         if (obj == null) {\n@@ -126,12 +126,12 @@ public boolean equals(final Object obj) {\n                 .appendSuper(super.equals(obj))\n                 .append(this.clientId, rhs.clientId)\n                 .append(this.clientSecret, rhs.clientSecret)\n+                .append(this.signIdToken, rhs.signIdToken)\n+                .append(this.subjectType, rhs.subjectType)\n                 .append(this.redirectUris, rhs.redirectUris)\n                 .append(this.supportedGrantTypes, rhs.supportedGrantTypes)\n                 .append(this.supportedResponseTypes, rhs.supportedResponseTypes)\n-                .append(this.signIdToken, rhs.signIdToken)\n-                .append(this.jwks, rhs.jwks)\n-                .append(this.subjectType, rhs.subjectType)\n+                .append(this.logoutUri, rhs.logoutUri)\n                 .isEquals();\n     }\n \n@@ -141,12 +141,12 @@ public int hashCode() {\n                 .appendSuper(super.hashCode())\n                 .append(clientId)\n                 .append(clientSecret)\n+                .append(signIdToken)\n+                .append(subjectType)\n                 .append(redirectUris)\n                 .append(supportedGrantTypes)\n                 .append(supportedResponseTypes)\n-                .append(signIdToken)\n-                .append(jwks)\n-                .append(subjectType)\n+                .append(logoutUri)\n                 .toHashCode();\n     }\n }"},{"sha":"d32468b2f9a5de641566277c8829357e98841726","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -26,13 +26,13 @@\n \n public final class AMEntitlement {\n \n-    public static final String GATEWAY_ROUTE_CREATE = \"GATEWAY_ROUTE_CREATE\";\n+    public static final String SRA_ROUTE_CREATE = \"SRA_ROUTE_CREATE\";\n \n-    public static final String GATEWAY_ROUTE_UPDATE = \"GATEWAY_ROUTE_UPDATE\";\n+    public static final String SRA_ROUTE_UPDATE = \"SRA_ROUTE_UPDATE\";\n \n-    public static final String GATEWAY_ROUTE_DELETE = \"GATEWAY_ROUTE_DELETE\";\n+    public static final String SRA_ROUTE_DELETE = \"SRA_ROUTE_DELETE\";\n \n-    public static final String GATEWAY_ROUTE_PUSH = \"GATEWAY_ROUTE_PUSH\";\n+    public static final String SRA_ROUTE_PUSH = \"SRA_ROUTE_PUSH\";\n \n     public static final String CLIENTAPP_READ = \"CLIENTAPP_READ\";\n \n@@ -83,7 +83,7 @@ public final class AMEntitlement {\n     public static final String GOOGLE_MFA_COUNT_TOKEN = \"GOOGLE_MFA_COUNT_TOKEN\";\n \n     public static final String AUTH_PROFILE_DELETE = \"AUTH_PROFILE_DELETE\";\n-    \n+\n     public static final String AUTH_PROFILE_READ = \"AUTH_PROFILE_READ\";\n \n     public static final String AUTH_PROFILE_LIST = \"AUTH_PROFILE_LIST\";"},{"sha":"015a9d2ec7c257deac293414fe20a5cca9192e37","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/JWSAlgorithm.java","status":"renamed","additions":16,"deletions":20,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJWSAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJWSAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJWSAlgorithm.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -16,26 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.policy;\n+package org.apache.syncope.common.lib.types;\n \n-import org.apache.syncope.common.lib.BaseBean;\n+public enum JWSAlgorithm {\n+    HS256,\n+    HS384,\n+    HS512,\n+    RS256,\n+    RS384,\n+    RS512,\n+    ES256,\n+    ES384,\n+    ES512,\n+    PS256,\n+    PS384,\n+    PS512,\n+    EdDSA,\n+    ES256K;\n \n-public abstract class AbstractAttrReleasePolicyConf implements BaseBean, AttrReleasePolicyConf {\n-\n-    private static final long serialVersionUID = 1153200197344709778L;\n-\n-    private String name;\n-\n-    public AbstractAttrReleasePolicyConf() {\n-        setName(getClass().getName());\n-    }\n-\n-    @Override\n-    public final String getName() {\n-        return name;\n-    }\n-\n-    public final void setName(final String name) {\n-        this.name = name;\n-    }\n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/policy/AbstractAttrReleasePolicyConf.java"},{"sha":"da3614ed6403435b8b1bfe0c44cfc9d4ba8e44d4","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARouteFilterFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,15 +22,18 @@ public enum SRARouteFilterFactory {\n     ADD_REQUEST_HEADER,\n     ADD_REQUEST_PARAMETER,\n     ADD_RESPONSE_HEADER,\n+    DEDUPE_RESPONSE_HEADER,\n     HYSTRIX,\n     FALLBACK_HEADERS,\n+    MAP_REQUEST_HEADER,\n     PREFIX_PATH,\n     PRESERVE_HOST_HEADER,\n-    REDIRECT,\n+    REDIRECT_TO,\n     REMOVE_REQUEST_HEADER,\n     REMOVE_RESPONSE_HEADER,\n     REQUEST_RATE_LIMITER,\n     REWRITE_PATH,\n+    REWRITE_LOCATION,\n     RETRY,\n     SECURE_HEADERS,\n     SET_PATH,\n@@ -42,6 +45,7 @@ public enum SRARouteFilterFactory {\n     STRIP_PREFIX,\n     REQUEST_HEADER_TO_REQUEST_URI,\n     SET_REQUEST_SIZE,\n+    SET_REQUEST_HOST,\n     LINK_REWRITE,\n     CLIENT_CERTS_TO_REQUEST_HEADER,\n     QUERY_PARAM_TO_REQUEST_HEADER,"},{"sha":"892fe8cb9d68a2d6362e722ee707f764c377ff30","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARoutePredicateFactory.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateFactory.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -29,6 +29,7 @@ public enum SRARoutePredicateFactory {\n     PATH,\n     QUERY,\n     REMOTE_ADDR,\n+    WEIGHT,\n     CUSTOM\n \n }"},{"sha":"cb230167405ac81c2042a99a5880744a885e50ff","filename":"common/am/lib/src/test/java/org/apache/syncope/common/lib/SerializationTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -39,7 +39,6 @@ public void accessPolicyConf() throws IOException {\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n         conf.setEnabled(true);\n-        conf.setName(\"TestAccessPolicyConf\");\n         conf.addRequiredAttr(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n         policy.setConf(conf);\n "},{"sha":"ce3cd97df146c73dd3f228a4651224f36054f8a3","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthProfileService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -35,9 +35,9 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n- * REST operations for SAML 2.0 SP metadata.\n+ * REST operations for Auth profiles.\n  */\n-@Tag(name = \"Auth Profiles\")\n+@Tag(name = \"AuthProfiles\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })"},{"sha":"e5287ff8667ac831a1d19c04c280283f8b023046","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCJWKSService.java","status":"renamed","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCJWKSService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,33 +22,31 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n-@Tag(name = \"OIDC Json Web Keystore\")\n+@Tag(name = \"OpenID Connect 1.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"oidc/jwks\")\n-public interface OIDCJWKSConfService extends JAXRSService {\n+public interface OIDCJWKSService extends JAXRSService {\n \n     @ApiResponse(responseCode = \"204\", description = \"Operation was successful\")\n     @PUT\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull OIDCJWKSTO jwksTO);\n \n     @DELETE\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response delete();\n+    void delete();\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCJWKSConfService.java"},{"sha":"5fad024527277306408eb9866c548a83b6d007b4","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPMetadataService.java","status":"renamed","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPMetadataService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -38,12 +38,12 @@\n /**\n  * REST operations for SAML 2.0 IdP metadata.\n  */\n-@Tag(name = \"SAML 2.0 IdP Metadata\")\n+@Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"saml2idp/conf/metadata\")\n-public interface SAML2IdPMetadataConfService extends JAXRSService {\n+@Path(\"saml2idp/metadata\")\n+public interface SAML2IdPMetadataService extends JAXRSService {\n \n     /**\n      * Updates SAML 2.0 IdP metadata matching the given key.\n@@ -59,5 +59,4 @@ public interface SAML2IdPMetadataConfService extends JAXRSService {\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull SAML2IdPMetadataTO saml2IdPMetadataTO);\n-\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPMetadataConfService.java"},{"sha":"47c116219ef299467c3f755ca5da51bf665542dd","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPKeystoreService.java","status":"renamed","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPKeystoreService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -26,25 +26,24 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for SAML 2.0 SP Keystore.\n  */\n-@Tag(name = \"SAML 2.0 SP Keystore\")\n+@Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"saml2sp/conf/keystore\")\n-public interface SAML2SPKeystoreConfService extends JAXRSService {\n+@Path(\"saml2sp/keystore\")\n+public interface SAML2SPKeystoreService extends JAXRSService {\n \n     /**\n      * Updates SAML 2.0 SP keystore matching the given key.\n@@ -60,5 +59,4 @@ public interface SAML2SPKeystoreConfService extends JAXRSService {\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull SAML2SPKeystoreTO keystoreTO);\n-\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPKeystoreConfService.java"},{"sha":"f90c0f4b547cbc2e9dc5b706f8caa950cb74348c","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPMetadataService.java","status":"renamed","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPMetadataService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -26,39 +26,37 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * REST operations for SAML 2.0 SP metadata.\n  */\n-@Tag(name = \"SAML 2.0 SP Metadata\")\n+@Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n-@Path(\"saml2sp/conf/metadata\")\n-public interface SAML2SPMetadataConfService extends JAXRSService {\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"saml2sp/metadata\")\n+public interface SAML2SPMetadataService extends JAXRSService {\n \n     /**\n      * Updates SAML 2.0 SP metadata matching the given key.\n      *\n      * @param metadataTO SAML2SPMetadata to replace existing SAML 2.0 SP metadata\n      */\n     @Parameter(name = \"key\", description = \"SAML2SPMetadata's key\", in = ParameterIn.PATH, schema =\n-    @Schema(type = \"string\"))\n+            @Schema(type = \"string\"))\n     @ApiResponses(\n-        @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n     @PUT\n     @Path(\"{key}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull SAML2SPMetadataTO metadataTO);\n-\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPMetadataConfService.java"},{"sha":"d10bf5a517da906eecc7b7d9edb6cc16e090e2d6","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SRARouteService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSRARouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSRARouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSRARouteService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -46,11 +46,11 @@\n /**\n  * REST operations for SRA routes.\n  */\n-@Tag(name = \"SRARoutes\")\n+@Tag(name = \"SRA Routes\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"gatewayRoutes\")\n+@Path(\"sraRoutes\")\n public interface SRARouteService extends JAXRSService {\n \n     /**"},{"sha":"bec543390b57e5f3e65fdf4af434a56ac159913f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/GoogleMfaAuthAccountService.java","status":"modified","additions":32,"deletions":35,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FGoogleMfaAuthAccountService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -16,7 +16,6 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.common.rest.api.service.wa;\n \n import io.swagger.v3.oas.annotations.headers.Header;\n@@ -26,11 +25,7 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -42,85 +37,87 @@\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n-import java.util.List;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n @Tag(name = \"Google MFA Accounts\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/gauth\")\n public interface GoogleMfaAuthAccountService extends JAXRSService {\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts/owners/${owner}\")\n     Response deleteAccountsFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts/${key}\")\n     Response deleteAccountBy(@NotNull @PathParam(\"key\") String key);\n \n     @DELETE\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts\")\n     Response deleteAll();\n \n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\",\n-            description = \"GoogleMfaAuthAccount successfully created\", headers = {\n-            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-            @Schema(type = \"string\"),\n-                description = \"UUID generated for the entity created\")})})\n+                description = \"GoogleMfaAuthAccount successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\") }) })\n     @POST\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts\")\n     Response save(@NotNull GoogleMfaAuthAccount acct);\n \n     @PUT\n     @Path(\"accts\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     void update(@NotNull GoogleMfaAuthAccount acct);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts/owners/${owner}\")\n     List<GoogleMfaAuthAccount> findAccountsFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n     @Path(\"accts/{key}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     GoogleMfaAuthAccount findAccountBy(@NotNull @PathParam(\"key\") String key);\n \n     @GET\n     @Path(\"accts/id/{id}\")\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     GoogleMfaAuthAccount findAccountBy(@NotNull @PathParam(\"id\") long id);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts/count\")\n     PagedResult<GoogleMfaAuthAccount> countAll();\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts/count/{owner}\")\n     PagedResult<GoogleMfaAuthAccount> countFor(@NotNull @PathParam(\"owner\") String owner);\n \n     @GET\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Path(\"accts\")\n     List<GoogleMfaAuthAccount> list();\n }"},{"sha":"b3d511da01e73c14f2dc6b5cb09bf6c96db1a12d","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WAOIDCJWKSService.java","status":"renamed","additions":21,"deletions":16,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAOIDCJWKSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAOIDCJWKSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWAOIDCJWKSService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -16,7 +16,6 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.common.rest.api.service.wa;\n \n import io.swagger.v3.oas.annotations.headers.Header;\n@@ -26,43 +25,49 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n import javax.ws.rs.Consumes;\n+import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n \n-@Tag(name = \"OIDC Json Web Keystore\")\n+@Tag(name = \"OpenID Connect 1.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n-    @SecurityRequirement(name = \"Bearer\")})\n+    @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/oidc/jwks\")\n-public interface OIDCJWKSService extends JAXRSService {\n+public interface WAOIDCJWKSService extends JAXRSService {\n \n     @GET\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     OIDCJWKSTO get();\n \n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\",\n-            description = \"JWKS successfully created\", headers = {\n-            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-            @Schema(type = \"string\"),\n-                description = \"UUID generated for the entity created\"),\n-            @Header(name = HttpHeaders.LOCATION, schema =\n-            @Schema(type = \"string\"),\n-                description = \"URL of the entity created\")}),\n+                description = \"JWKS successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\"),\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL of the entity created\") }),\n         @ApiResponse(responseCode = \"409\",\n-            description = \"JWKS already exists\")})\n+                description = \"JWKS already exists\") })\n     @POST\n-    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n-    Response set();\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response set(\n+            @NotNull @QueryParam(\"size\") @DefaultValue(\"2048\") int size,\n+            @NotNull @QueryParam(\"algorithm\") @DefaultValue(\"RS256\") JWSAlgorithm algorithm);\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/OIDCJWKSService.java"},{"sha":"219abb0136b5f75e996cecec8fa5ccb2aec17c47","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WASAML2IdPMetadataService.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2IdPMetadataService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -44,12 +44,12 @@\n /**\n  * REST operations for SAML 2.0 IdP metadata.\n  */\n-@Tag(name = \"SAML 2.0 IdP Metadata\")\n+@Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/saml2idp/metadata\")\n-public interface SAML2IdPMetadataService extends JAXRSService {\n+public interface WASAML2IdPMetadataService extends JAXRSService {\n \n     /**\n      * Returns a document outlining keys and metadata of Syncope as SAML 2.0 IdP.","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/SAML2IdPMetadataService.java"},{"sha":"05e2021014d047a938807e72d09b494a7b4afa51","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WASAML2SPKeystoreService.java","status":"renamed","additions":13,"deletions":15,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPKeystoreService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPKeystoreService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPKeystoreService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -25,10 +25,6 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n@@ -40,16 +36,19 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n /**\n  * REST operations for SAML 2.0 IdP keystore.\n  */\n-@Tag(name = \"SAML 2.0 SP Metadata Keystore\")\n+@Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/saml2sp/keystore\")\n-public interface SAML2SPKeystoreService extends JAXRSService {\n+public interface WASAML2SPKeystoreService extends JAXRSService {\n \n     /**\n      * Returns a document outlining keystore for Syncope as SAML 2.0 SP.\n@@ -80,18 +79,17 @@ public interface SAML2SPKeystoreService extends JAXRSService {\n      */\n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\",\n-            description = \"SAML2SPKeystoreTO successfully created\", headers = {\n-            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-            @Schema(type = \"string\"),\n-                description = \"UUID generated for the entity created\"),\n-            @Header(name = HttpHeaders.LOCATION, schema =\n-            @Schema(type = \"string\"),\n-                description = \"URL of the entity created\") }),\n+                description = \"SAML2SPKeystoreTO successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\"),\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL of the entity created\") }),\n         @ApiResponse(responseCode = \"409\",\n-            description = \"Metadata already existing\") })\n+                description = \"Metadata already existing\") })\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response set(@NotNull SAML2SPKeystoreTO keystoreTO);\n-\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/SAML2SPKeystoreService.java"},{"sha":"f3c84b22216c78c10ddc5b5605ff5b172a770e0f","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/WASAML2SPMetadataService.java","status":"renamed","additions":13,"deletions":15,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPMetadataService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPMetadataService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FWASAML2SPMetadataService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -25,10 +25,6 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.JAXRSService;\n-\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n@@ -40,16 +36,19 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n \n /**\n  * REST operations for SAML 2.0 SP metadata.\n  */\n-@Tag(name = \"SAML 2.0 SP Metadata\")\n+@Tag(name = \"SAML 2.0\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n @Path(\"wa/saml2sp/metadata\")\n-public interface SAML2SPMetadataService extends JAXRSService {\n+public interface WASAML2SPMetadataService extends JAXRSService {\n \n     /**\n      * Returns a document outlining metadata for Syncope as SAML 2.0 SP.\n@@ -80,18 +79,17 @@ public interface SAML2SPMetadataService extends JAXRSService {\n      */\n     @ApiResponses({\n         @ApiResponse(responseCode = \"201\",\n-            description = \"SAML2SPMetadata successfully created\", headers = {\n-            @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n-            @Schema(type = \"string\"),\n-                description = \"UUID generated for the entity created\"),\n-            @Header(name = HttpHeaders.LOCATION, schema =\n-            @Schema(type = \"string\"),\n-                description = \"URL of the entity created\") }),\n+                description = \"SAML2SPMetadata successfully created\", headers = {\n+                    @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"UUID generated for the entity created\"),\n+                    @Header(name = HttpHeaders.LOCATION, schema =\n+                            @Schema(type = \"string\"),\n+                            description = \"URL of the entity created\") }),\n         @ApiResponse(responseCode = \"409\",\n-            description = \"Metadata already existing\") })\n+                description = \"Metadata already existing\") })\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     Response set(@NotNull SAML2SPMetadataTO metadataTO);\n-\n }","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/SAML2SPMetadataService.java"},{"sha":"9cb29e8371fc844af81b00e67b7bdf709c9b3f7a","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/AuthModuleLogic.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuthModuleLogic.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -20,7 +20,6 @@\n \n import java.lang.reflect.Method;\n import java.util.List;\n-import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n@@ -62,18 +61,7 @@ public AuthModuleTO update(final AuthModuleTO authModuleTO) {\n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_LIST + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public List<AuthModuleTO> list() {\n-        return authModuleDAO.findAll().stream().\n-                filter(Objects::nonNull).\n-                map(authModule -> {\n-                    AuthModuleTO result = null;\n-                    try {\n-                        result = binder.getAuthModuleTO(authModule);\n-                    } catch (NotFoundException e) {\n-                        LOG.error(\"Authentication module '{}' not found\", authModule.getName());\n-                    }\n-\n-                    return result;\n-                }).collect(Collectors.toList());\n+        return authModuleDAO.findAll().stream().map(binder::getAuthModuleTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.AUTH_MODULE_READ + \"')\")"},{"sha":"67a276789feeefc26b3bb3ae4c32463547e83b93","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/OIDCJWKSLogic.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCJWKSLogic.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.logic;\n \n-import org.apache.syncope.common.lib.SyncopeClientException;\n+import java.lang.reflect.Method;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCJWKSDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n@@ -33,8 +33,6 @@\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.lang.reflect.Method;\n-\n @Component\n public class OIDCJWKSLogic extends AbstractTransactionalLogic<OIDCJWKSTO> {\n \n@@ -44,8 +42,7 @@ public class OIDCJWKSLogic extends AbstractTransactionalLogic<OIDCJWKSTO> {\n     @Autowired\n     private OIDCJWKSDAO dao;\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_READ + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_READ + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n     @Transactional(readOnly = true)\n     public OIDCJWKSTO get() {\n         OIDCJWKS jwks = dao.get();\n@@ -55,37 +52,36 @@ public OIDCJWKSTO get() {\n         throw new NotFoundException(\"OIDC JWKS not found\");\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_CREATE + \"') \"\n-        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n-    public OIDCJWKSTO set() {\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_CREATE + \"') or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public OIDCJWKSTO set(final int size, final JWSAlgorithm algorithm) {\n         OIDCJWKS jwks = dao.get();\n         if (jwks == null) {\n-            return binder.get(dao.save(binder.create()));\n+            return binder.get(dao.save(binder.create(size, algorithm)));\n         }\n-        throw SyncopeClientException.build(ClientExceptionType.EntityExists);\n+        throw new DuplicateException(\"OIDC JWKS already set\");\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_UPDATE + \"')\")\n     public OIDCJWKSTO update(final OIDCJWKSTO jwksTO) {\n         OIDCJWKS jwks = dao.get();\n         if (jwks == null) {\n-            throw SyncopeClientException.build(ClientExceptionType.NotFound);\n+            throw new NotFoundException(\"OIDC JWKS not found\");\n         }\n         return binder.get(dao.save(binder.update(jwks, jwksTO)));\n     }\n \n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_DELETE + \"')\")\n+    public void delete() {\n+        dao.delete();\n+    }\n+\n     @Override\n     protected OIDCJWKSTO resolveReference(final Method method, final Object... args)\n-        throws UnresolvedReferenceException {\n+            throws UnresolvedReferenceException {\n         OIDCJWKS jwks = dao.get();\n         if (jwks == null) {\n             throw new UnresolvedReferenceException();\n         }\n         return binder.get(jwks);\n     }\n-\n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.OIDC_JWKS_DELETE + \"')\")\n-    public void delete() {\n-         dao.delete();\n-    }\n }"},{"sha":"e43b7c6acb80f8791164559c2571f561c23a3b9f","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SRARouteLogic.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -72,7 +72,7 @@ public List<SRARouteTO> list() {\n         return routeDAO.findAll().stream().map(binder::getSRARouteTO).collect(Collectors.toList());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_CREATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SRA_ROUTE_CREATE + \"')\")\n     public SRARouteTO create(final SRARouteTO routeTO) {\n         SRARoute route = entityFactory.newEntity(SRARoute.class);\n         binder.getSRARoute(route, routeTO);\n@@ -89,7 +89,7 @@ public SRARouteTO read(final String key) {\n         return binder.getSRARouteTO(route);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_UPDATE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SRA_ROUTE_UPDATE + \"')\")\n     public SRARouteTO update(final SRARouteTO routeTO) {\n         SRARoute route = routeDAO.find(routeTO.getKey());\n         if (route == null) {\n@@ -101,7 +101,7 @@ public SRARouteTO update(final SRARouteTO routeTO) {\n         return binder.getSRARouteTO(routeDAO.save(route));\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_DELETE + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SRA_ROUTE_DELETE + \"')\")\n     public SRARouteTO delete(final String key) {\n         SRARoute route = routeDAO.find(key);\n         if (route == null) {\n@@ -113,13 +113,13 @@ public SRARouteTO delete(final String key) {\n         return deleted;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_PUSH + \"')\")\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.SRA_ROUTE_PUSH + \"')\")\n     public void pushToSRA() {\n         try {\n             NetworkService sra = serviceOps.get(NetworkService.Type.SRA);\n             HttpClient.newBuilder().build().send(\n                     HttpRequest.newBuilder(URI.create(\n-                            StringUtils.appendIfMissing(sra.getAddress(), \"/\") + \"management/routes/refresh\")).\n+                            StringUtils.appendIfMissing(sra.getAddress(), \"/\") + \"actuator/gateway/refresh\")).\n                             header(HttpHeaders.AUTHORIZATION,\n                                     DefaultBasicAuthSupplier.getBasicAuthHeader(anonymousUser, anonymousKey)).\n                             POST(HttpRequest.BodyPublishers.noBody()).build(),"},{"sha":"a1e6765ed80a3baaa125c1988280ed7fceb13bdf","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/WAClientAppLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FWAClientAppLogic.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -37,13 +37,13 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n-import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppBinder;\n+import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n \n @Component\n public class WAClientAppLogic {\n \n     @Autowired\n-    private WAClientAppBinder binder;\n+    private WAClientAppDataBinder binder;\n \n     @Autowired\n     private SAML2SPDAO saml2spDAO;"},{"sha":"39820ea1d3c5df28147c52f6d87964658e14c714","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCJWKSServiceImpl.java","status":"renamed","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCJWKSServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,15 +19,13 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n-import org.apache.syncope.common.rest.api.service.OIDCJWKSConfService;\n import org.apache.syncope.core.logic.OIDCJWKSLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-\n-import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n \n @Service\n-public class OIDCJWKSConfServiceImpl extends AbstractServiceImpl implements OIDCJWKSConfService {\n+public class OIDCJWKSServiceImpl extends AbstractServiceImpl implements OIDCJWKSService {\n \n     @Autowired\n     private OIDCJWKSLogic logic;\n@@ -38,8 +36,7 @@ public void update(final OIDCJWKSTO jwksTO) {\n     }\n \n     @Override\n-    public Response delete() {\n+    public void delete() {\n         logic.delete();\n-        return Response.noContent().build();\n     }\n }","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCJWKSConfServiceImpl.java"},{"sha":"6db81ae1451c6e9e5a82ff84c92400865512cd28","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPMetadataServiceImpl.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPMetadataServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataConfService;\n import org.apache.syncope.core.logic.SAML2IdPMetadataLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n \n @Service\n-public class SAML2IdPMetadataConfServiceImpl extends AbstractServiceImpl implements SAML2IdPMetadataConfService {\n+public class SAML2IdPMetadataServiceImpl extends AbstractServiceImpl implements SAML2IdPMetadataService {\n \n     @Autowired\n     private SAML2IdPMetadataLogic logic;","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPMetadataConfServiceImpl.java"},{"sha":"0a670c3090e38b43d29f81ba8abe31ec21965875","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPKeystoreServiceImpl.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPKeystoreServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreConfService;\n import org.apache.syncope.core.logic.SAML2SPKeystoreLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n+import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n \n @Service\n-public class SAML2SPKeystoreConfServiceImpl extends AbstractServiceImpl implements SAML2SPKeystoreConfService {\n+public class SAML2SPKeystoreServiceImpl extends AbstractServiceImpl implements SAML2SPKeystoreService {\n \n     @Autowired\n     private SAML2SPKeystoreLogic logic;","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPKeystoreConfServiceImpl.java"},{"sha":"93a87dca1a8d6cd30dc39b8ca10d477a211e0873","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPMetadataServiceImpl.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPMetadataServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataConfService;\n import org.apache.syncope.core.logic.SAML2SPMetadataLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n \n @Service\n-public class SAML2SPMetadataConfServiceImpl extends AbstractServiceImpl implements SAML2SPMetadataConfService {\n+public class SAML2SPMetadataServiceImpl extends AbstractServiceImpl implements SAML2SPMetadataService {\n \n     @Autowired\n     private SAML2SPMetadataLogic logic;","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPMetadataConfServiceImpl.java"},{"sha":"fa3fb69574126a84f8269d4083808afb4ce72c1c","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WAOIDCJWKSServiceImpl.java","status":"renamed","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAOIDCJWKSServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAOIDCJWKSServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWAOIDCJWKSServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -16,23 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.wa.OIDCJWKSService;\n import org.apache.syncope.core.logic.OIDCJWKSLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-\n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n+import org.apache.syncope.common.rest.api.service.wa.WAOIDCJWKSService;\n \n @Service\n-public class OIDCJWKSServiceImpl extends AbstractServiceImpl implements OIDCJWKSService {\n+public class WAOIDCJWKSServiceImpl extends AbstractServiceImpl implements WAOIDCJWKSService {\n+\n     @Autowired\n     private OIDCJWKSLogic logic;\n \n@@ -42,12 +41,12 @@ public OIDCJWKSTO get() {\n     }\n \n     @Override\n-    public Response set() {\n-        OIDCJWKSTO jwks = logic.set();\n+    public Response set(final int size, final JWSAlgorithm algorithm) {\n+        OIDCJWKSTO jwks = logic.set(size, algorithm);\n         URI location = uriInfo.getAbsolutePathBuilder().path(jwks.getKey()).build();\n         return Response.created(location).\n-            header(RESTHeaders.RESOURCE_KEY, jwks.getKey()).\n-            entity(jwks).\n-            build();\n+                header(RESTHeaders.RESOURCE_KEY, jwks.getKey()).\n+                entity(jwks).\n+                build();\n     }\n }","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/OIDCJWKSServiceImpl.java"},{"sha":"cef4562be4ab4439db0e24d6684f94ee762e32ba","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WASAML2IdPMetadataServiceImpl.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2IdPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2IdPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2IdPMetadataServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,14 +22,14 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.core.logic.SAML2IdPMetadataLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n \n @Service\n-public class SAML2IdPMetadataServiceImpl extends AbstractServiceImpl implements SAML2IdPMetadataService {\n+public class WASAML2IdPMetadataServiceImpl extends AbstractServiceImpl implements WASAML2IdPMetadataService {\n \n     @Autowired\n     private SAML2IdPMetadataLogic logic;","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/SAML2IdPMetadataServiceImpl.java"},{"sha":"64a69187c4706a7261b21c7609f241c399c58dc3","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WASAML2SPKeystoreServiceImpl.java","status":"renamed","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPKeystoreServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPKeystoreServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPKeystoreServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,20 +18,18 @@\n  */\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n import org.apache.syncope.core.logic.SAML2SPKeystoreLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-\n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n \n @Service\n-public class SAML2SPKeystoreServiceImpl extends AbstractServiceImpl implements SAML2SPKeystoreService {\n+public class WASAML2SPKeystoreServiceImpl extends AbstractServiceImpl implements WASAML2SPKeystoreService {\n \n     @Autowired\n     private SAML2SPKeystoreLogic logic;\n@@ -48,10 +46,10 @@ public SAML2SPKeystoreTO read(final String key) {\n \n     @Override\n     public Response set(final SAML2SPKeystoreTO keystoreTO) {\n-        final SAML2SPKeystoreTO keystore = logic.set(keystoreTO);\n+        SAML2SPKeystoreTO keystore = logic.set(keystoreTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(keystore.getKey()).build();\n         return Response.created(location).\n-            header(RESTHeaders.RESOURCE_KEY, keystore.getKey()).\n-            build();\n+                header(RESTHeaders.RESOURCE_KEY, keystore.getKey()).\n+                build();\n     }\n }","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/SAML2SPKeystoreServiceImpl.java"},{"sha":"67fa859b8132da73b70dd4ddde0b74638c7f6870","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/WASAML2SPMetadataServiceImpl.java","status":"renamed","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPMetadataServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPMetadataServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FWASAML2SPMetadataServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,20 +18,18 @@\n  */\n package org.apache.syncope.core.rest.cxf.service.wa;\n \n+import java.net.URI;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.core.logic.SAML2SPMetadataLogic;\n import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-\n-import javax.ws.rs.core.Response;\n-\n-import java.net.URI;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n \n @Service\n-public class SAML2SPMetadataServiceImpl extends AbstractServiceImpl implements SAML2SPMetadataService {\n+public class WASAML2SPMetadataServiceImpl extends AbstractServiceImpl implements WASAML2SPMetadataService {\n \n     @Autowired\n     private SAML2SPMetadataLogic logic;\n@@ -51,7 +49,7 @@ public Response set(final SAML2SPMetadataTO metadataTO) {\n         SAML2SPMetadataTO spMetadata = logic.set(metadataTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(spMetadata.getKey()).build();\n         return Response.created(location).\n-            header(RESTHeaders.RESOURCE_KEY, spMetadata.getKey()).\n-            build();\n+                header(RESTHeaders.RESOURCE_KEY, spMetadata.getKey()).\n+                build();\n     }\n }","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/SAML2SPMetadataServiceImpl.java"},{"sha":"f2c7bf93d5d5c94526ef091e0e6710d0da167e83","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthModule.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthModule.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -20,13 +20,9 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.ProvidedKeyEntity;\n \n-public interface AuthModule extends Entity {\n-\n-    String getName();\n-\n-    void setName(String name);\n+public interface AuthModule extends ProvidedKeyEntity {\n \n     String getDescription();\n "},{"sha":"6ce0f827aec227e0331e118d11bc3085ed6f905e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/OIDCRP.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -42,11 +42,11 @@ public interface OIDCRP extends ClientApp {\n \n     void setSignIdToken(boolean signIdToken);\n \n-    String getJwks();\n-\n-    void setJwks(String jwks);\n-\n     OIDCSubjectType getSubjectType();\n \n     void setSubjectType(OIDCSubjectType subjectType);\n+\n+    String getLogoutUri();\n+\n+    void setLogoutUri(String logoutUri);\n }"},{"sha":"ac39f7a5d5adc6b012e7da913245e3ce40b57acf","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":31,"deletions":21,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -61,27 +61,37 @@ under the License.\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n   \n   <!-- Authentication modules -->\n-  <AuthModule id=\"be456831-593d-4003-b273-4c3fb61700df\" name=\"DefaultLDAPAuthModule\" \n-              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"name\":\"MyLDAPAuthModuleConf\",\"userIdAttribute\":\"uid\",\"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"dc=example,dc=org\",\"subtreeSearch\":true}'/>\n-  <AuthModule id=\"4c3ed7e8-7008-11ea-bc55-0242ac130003\" name=\"DefaultJDBCAuthModule\"\n-              description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"name\":\"MyJDBCAuthModuleConf\", \"sql\":\"SELECT * FROM table WHERE name=?\"}'/>\n-  <AuthModule id=\"4c3ed4e6-7008-11ea-bc55-0242ac130003\" name=\"DefaultGoogleMfaAuthModule\"\n-              description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"name\":\"MyGoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n-  <AuthModule id=\"4c3ed8f6-7008-11ea-bc55-0242ac130003\" name=\"DefaultOIDCAuthModule\"\n-              description=\"OIDC auth module\"\n-              jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n-  <AuthModule id=\"4c3ed9d2-7008-11ea-bc55-0242ac130003\" name=\"DefaultSAML2IdPAuthModule\"\n-              description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"classpath:/idp-metadata.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n-  <AuthModule id=\"4c3edbbc-7008-11ea-bc55-0242ac130003\" name=\"DefaultJaasAuthModule\"\n-              description=\"Jaas auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"name\":\"MyJaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\"}'/>\n-  <AuthModule id=\"4c3edc98-7008-11ea-bc55-0242ac130003\" name=\"DefaultStaticAuthModule\"\n-              description=\"Static auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"name\":\"MyStaticAuthModuleConf\",\"users\":{\"user1\": \"testUserPassword123\"}}'/>\n-  <AuthModule id=\"4c3edd60-7008-11ea-bc55-0242ac130003\" name=\"DefaultSyncopeAuthModule\"\n-              description=\"Syncope auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"name\":\"MySyncopeAuthModuleConf\",\"domain\":\"Master\",\"url\":\"http://mydomain.com/syncope/rest\"}'/>\n-  <AuthModule id=\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\" name=\"DefaultRadiusAuthModule\"\n-              description=\"Radius auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.RadiusAuthModuleConf\",\"name\":\"MyRadiusAuthModuleConf\",\"protocol\":\"MSCHAPv2\",\"inetAddress\":\"1.2.3.4\", \"sharedSecret\":\"thesecret\"}'/>\n-  <AuthModule id=\"f6e1288d-50d9-45fe-82ee-597c42242205\" name=\"DefaultU2FAuthModule\"\n-              description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"name\":\"MyU2FAuthModuleConf\",\"expireDevices\":40}'/>\n+  <AuthModule id=\"DefaultLDAPAuthModule\"\n+              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"cn=Directory Manager,dc=example,dc=org\", \"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=people,dc=example,dc=org\",\"subtreeSearch\":true}'/>\n+  <AuthModule id=\"DefaultJDBCAuthModule\"\n+              description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n+  <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n+              description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n+  <AuthModule id=\"DefaultOIDCAuthModule\"\n+              description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n+  <AuthModule id=\"DefaultSAML2IdPAuthModule\"\n+              description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"classpath:/idp-metadata.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n+  <AuthModule id=\"DefaultJaasAuthModule\"\n+              description=\"Jaas auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\", \"loginConfigType\": \"JavaLoginConfig\", \"loginConfigurationFile\": \"file:/etc/jaas/login.conf\"}'/>\n+  <AuthModule id=\"DefaultStaticAuthModule\"\n+              description=\"Static auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"users\":{\"syncope1\": \"$cynop3\"}}'/>\n+  <AuthModule id=\"DefaultSyncopeAuthModule\"\n+              description=\"Syncope auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"domain\":\"Master\"}'/>\n+  <AuthModule id=\"DefaultRadiusAuthModule\"\n+              description=\"Radius auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.RadiusAuthModuleConf\",\"protocol\":\"PAP\",\"inetAddress\":\"localhost\", \"sharedSecret\":\"testing123\"}'/>\n+  <AuthModule id=\"DefaultU2FAuthModule\"\n+              description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"expireDevices\":40}'/>\n+\n+  <AuthModuleItem id=\"26678936-af09-48b8-a789-36af0918b87d\" extAttrName=\"family_name\" intAttrName=\"syncopeUserAttr_surname\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n+  <AuthModuleItem id=\"a66ed3b1-07be-4a6e-aed3-b107be8a6e75\" extAttrName=\"name\" intAttrName=\"syncopeUserAttr_fullname\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n+  <AuthModuleItem id=\"edc26674-fac5-4a60-8266-74fac5ca6020\" extAttrName=\"given_name\" intAttrName=\"syncopeUserAttr_firstname\" \n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n+  <AuthModuleItem id=\"520eeba7-e00a-4221-8eeb-a7e00aa22159\" extAttrName=\"email\" intAttrName=\"syncopeUserAttr_email\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n+  <AuthModuleItem id=\"8360509b-7d8e-4796-aa79-3c5ccc8671e6\" extAttrName=\"groups\" intAttrName=\"syncopeUserMemberships\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n \n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>"},{"sha":"e5902e9e4ee345caac6b40cf60aecfdbafe5d308","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/AbstractClientApp.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -59,10 +59,12 @@ public class AbstractClientApp extends AbstractGeneratedKeyEntity implements Cli\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAttrReleasePolicy attrReleasePolicy;\n \n+    @Override\n     public Long getClientAppId() {\n         return clientAppId;\n     }\n \n+    @Override\n     public void setClientAppId(final Long clientAppId) {\n         this.clientAppId = clientAppId;\n     }"},{"sha":"f51072189917a44a43e70adbc5327ba03abad173","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthModule.java","status":"modified","additions":2,"deletions":17,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthModule.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.CascadeType;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Lob;\n@@ -31,21 +30,17 @@\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModule;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthModuleItem;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractProvidedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n @Entity\n @Table(name = JPAAuthModule.TABLE)\n-public class JPAAuthModule extends AbstractGeneratedKeyEntity implements AuthModule {\n+public class JPAAuthModule extends AbstractProvidedKeyEntity implements AuthModule {\n \n     public static final String TABLE = \"AuthModule\";\n \n     private static final long serialVersionUID = 5681033638234853077L;\n \n-    @Column(unique = true, nullable = false)\n-    private String name;\n-\n-    @Column(nullable = false)\n     private String description;\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"authModule\")\n@@ -64,16 +59,6 @@ public void setDescription(final String description) {\n         this.description = description;\n     }\n \n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n-\n-    @Override\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-\n     @Override\n     public List<? extends AuthModuleItem> getItems() {\n         return items;"},{"sha":"ab0b5d2071f9f98ab6bb358989fb2484594e7cc1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"modified","additions":21,"deletions":22,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,24 +19,23 @@\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.types.GoogleMfaAuthToken;\n import org.apache.syncope.common.lib.types.U2FRegisteredDevice;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.Lob;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n @Entity\n-@Table(name = JPAAuthProfile.TABLE, uniqueConstraints = @UniqueConstraint(columnNames = {\"owner\"}))\n+@Table(name = JPAAuthProfile.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"owner\" }))\n public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthProfile {\n \n     public static final String TABLE = \"AuthProfile\";\n@@ -68,9 +67,9 @@ public void setOwner(final String owner) {\n     @Override\n     public List<GoogleMfaAuthToken> getGoogleMfaAuthTokens() {\n         return googleMfaAuthTokens == null\n-            ? new ArrayList<>(0)\n-            : POJOHelper.deserialize(googleMfaAuthTokens, new TypeReference<List<GoogleMfaAuthToken>>() {\n-        });\n+                ? new ArrayList<>(0)\n+                : POJOHelper.deserialize(googleMfaAuthTokens, new TypeReference<List<GoogleMfaAuthToken>>() {\n+                });\n     }\n \n     @Override\n@@ -81,9 +80,9 @@ public void setGoogleMfaAuthTokens(final List<GoogleMfaAuthToken> tokens) {\n     @Override\n     public List<GoogleMfaAuthAccount> getGoogleMfaAuthAccounts() {\n         return googleMfaAuthAccounts == null\n-            ? new ArrayList<>(0)\n-            : POJOHelper.deserialize(googleMfaAuthAccounts, new TypeReference<List<GoogleMfaAuthAccount>>() {\n-        });\n+                ? new ArrayList<>(0)\n+                : POJOHelper.deserialize(googleMfaAuthAccounts, new TypeReference<List<GoogleMfaAuthAccount>>() {\n+                });\n     }\n \n     @Override\n@@ -94,17 +93,17 @@ public void setGoogleMfaAuthAccounts(final List<GoogleMfaAuthAccount> accounts)\n     @Override\n     public void add(final GoogleMfaAuthToken token) {\n         checkType(token, GoogleMfaAuthToken.class);\n-        final List<GoogleMfaAuthToken> tokens = getGoogleMfaAuthTokens();\n+        List<GoogleMfaAuthToken> tokens = getGoogleMfaAuthTokens();\n         tokens.add(token);\n         setGoogleMfaAuthTokens(tokens);\n     }\n \n     @Override\n     public List<U2FRegisteredDevice> getU2FRegisteredDevices() {\n         return u2fRegisteredDevices == null\n-            ? new ArrayList<>(0)\n-            : POJOHelper.deserialize(u2fRegisteredDevices, new TypeReference<List<U2FRegisteredDevice>>() {\n-        });\n+                ? new ArrayList<>(0)\n+                : POJOHelper.deserialize(u2fRegisteredDevices, new TypeReference<List<U2FRegisteredDevice>>() {\n+                });\n     }\n \n     @Override\n@@ -115,15 +114,15 @@ public void setU2FRegisteredDevices(final List<U2FRegisteredDevice> records) {\n     @Override\n     public void add(final GoogleMfaAuthAccount account) {\n         checkType(account, GoogleMfaAuthAccount.class);\n-        final List<GoogleMfaAuthAccount> accounts = getGoogleMfaAuthAccounts();\n+        List<GoogleMfaAuthAccount> accounts = getGoogleMfaAuthAccounts();\n         accounts.add(account);\n         setGoogleMfaAuthAccounts(accounts);\n     }\n \n     @Override\n     public void add(final U2FRegisteredDevice registration) {\n         checkType(registration, U2FRegisteredDevice.class);\n-        final List<U2FRegisteredDevice> records = getU2FRegisteredDevices();\n+        List<U2FRegisteredDevice> records = getU2FRegisteredDevices();\n         records.add(registration);\n         setU2FRegisteredDevices(records);\n     }"},{"sha":"0e1262806923b5d974923f6c6f2348c443ffa994","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCJWKS.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCJWKS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCJWKS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCJWKS.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,13 +18,11 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n-import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n \n @Entity\n @Table(name = JPAOIDCJWKS.TABLE)\n@@ -34,7 +32,6 @@ public class JPAOIDCJWKS extends AbstractGeneratedKeyEntity implements OIDCJWKS\n \n     private static final long serialVersionUID = 47352617217394093L;\n \n-    @Column\n     @Lob\n     private String json;\n "},{"sha":"dee84f441c86fea1d24840d09a303a8977b84534","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCRP.java","status":"modified","additions":15,"deletions":16,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -29,6 +29,8 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n \n@@ -43,16 +45,11 @@ public class JPAOIDCRP extends AbstractClientApp implements OIDCRP {\n     @Column(unique = true, nullable = false)\n     private String clientId;\n \n-    @Column\n     private String clientSecret;\n \n-    @Column\n     private boolean signIdToken;\n \n-    @Column\n-    private String jwks;\n-\n-    @Column\n+    @Enumerated(EnumType.STRING)\n     private OIDCSubjectType subjectType;\n \n     @ElementCollection(fetch = FetchType.EAGER)\n@@ -76,6 +73,8 @@ public class JPAOIDCRP extends AbstractClientApp implements OIDCRP {\n             @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n     private Set<String> supportedResponseTypes = new HashSet<>();\n \n+    private String logoutUri;\n+\n     @Override\n     public List<String> getRedirectUris() {\n         return redirectUris;\n@@ -111,16 +110,6 @@ public void setSignIdToken(final boolean signIdToken) {\n         this.signIdToken = signIdToken;\n     }\n \n-    @Override\n-    public String getJwks() {\n-        return jwks;\n-    }\n-\n-    @Override\n-    public void setJwks(final String jwks) {\n-        this.jwks = jwks;\n-    }\n-\n     @Override\n     public OIDCSubjectType getSubjectType() {\n         return subjectType;\n@@ -140,4 +129,14 @@ public Set<String> getSupportedGrantTypes() {\n     public Set<String> getSupportedResponseTypes() {\n         return supportedResponseTypes;\n     }\n+\n+    @Override\n+    public String getLogoutUri() {\n+        return logoutUri;\n+    }\n+\n+    @Override\n+    public void setLogoutUri(final String logoutUri) {\n+        this.logoutUri = logoutUri;\n+    }\n }"},{"sha":"6017f9ab4c0743fbab9e4c09d87c4ae7f4998d3e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2IdPMetadata.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2IdPMetadata.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -37,23 +37,18 @@ public class JPASAML2IdPMetadata extends AbstractGeneratedKeyEntity implements S\n     private String appliesTo;\n \n     @Lob\n-    @Column\n     private String metadata;\n \n     @Lob\n-    @Column\n     private String signingCertificate;\n \n     @Lob\n-    @Column\n     private String signingKey;\n \n     @Lob\n-    @Column\n     private String encryptionCertificate;\n \n     @Lob\n-    @Column\n     private String encryptionKey;\n \n     @Override"},{"sha":"864df5766865923515d94b20b54162798c356348","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SP.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -38,34 +38,25 @@ public class JPASAML2SP extends AbstractClientApp implements SAML2SP {\n     @Column(nullable = false)\n     private String metadataLocation;\n \n-    @Column\n     private String metadataSignatureLocation;\n \n-    @Column\n     private boolean signAssertions;\n \n-    @Column\n     private boolean signResponses;\n \n-    @Column\n     private boolean encryptionOptional;\n \n-    @Column\n     private boolean encryptAssertions;\n \n     @Column(name = \"reqAuthnContextClass\")\n     private String requiredAuthenticationContextClass;\n \n-    @Column\n     private SAML2SPNameId requiredNameIdFormat;\n \n-    @Column\n     private Integer skewAllowance;\n \n-    @Column\n     private String nameIdQualifier;\n \n-    @Column\n     private String assertionAudiences;\n \n     @Column(name = \"spNameIdQualifier\")"},{"sha":"5cefe7e591eee1d8dbdbef155751a081aef0e89f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPKeystore.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPKeystore.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,13 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPKeystore;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n \n @Entity\n @Table(name = JPASAML2SPKeystore.TABLE)\n@@ -38,7 +37,6 @@ public class JPASAML2SPKeystore extends AbstractGeneratedKeyEntity implements SA\n     private String owner;\n \n     @Lob\n-    @Column\n     private String keystore;\n \n     @Override\n@@ -60,5 +58,4 @@ public String getOwner() {\n     public void setOwner(final String name) {\n         this.owner = name;\n     }\n-\n }"},{"sha":"fa96b5628d8e8aa496ad0b77f7aacb7a1eb1803b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SPMetadata.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SPMetadata.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,13 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n-import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n-\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPMetadata;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n \n @Entity\n @Table(name = JPASAML2SPMetadata.TABLE)\n@@ -38,7 +37,6 @@ public class JPASAML2SPMetadata extends AbstractGeneratedKeyEntity implements SA\n     private String owner;\n \n     @Lob\n-    @Column\n     private String metadata;\n \n     @Override\n@@ -60,5 +58,4 @@ public String getOwner() {\n     public void setOwner(final String name) {\n         this.owner = name;\n     }\n-\n }"},{"sha":"e31a53710bff057cd32fec5709ddf191f904c052","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AbstractClientAppTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -40,7 +40,6 @@ protected AttrReleasePolicy buildAndSaveAttrRelPolicy() {\n         attrRelPolicy.setDescription(\"AttrRelPolicyTest\");\n \n         AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n-        conf.setName(\"Example Attr Rel Policy for an application\");\n         conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n         attrRelPolicy.setConf(conf);\n \n@@ -54,7 +53,6 @@ protected AccessPolicy buildAndSaveAccessPolicy() {\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n         conf.setEnabled(true);\n-        conf.setName(\"Example Access Policy for an application\");\n         conf.addRequiredAttr(\"attribute1\", Set.of(\"value1\", \"value2\"));\n         conf.setSsoEnabled(false);\n         accessPolicy.setConf(conf);"},{"sha":"876a0e0051726f38b7eae418dc9e474a62e9a981","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthModuleTest.java","status":"modified","additions":53,"deletions":101,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthModuleTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -52,137 +52,90 @@ public class AuthModuleTest extends AbstractTest {\n     @Autowired\n     private AuthModuleDAO authModuleDAO;\n \n+    @Test\n+    public void findAll() {\n+        List<AuthModule> modules = authModuleDAO.findAll();\n+        assertNotNull(modules);\n+        assertFalse(modules.isEmpty());\n+        assertTrue(modules.size() >= 10);\n+    }\n+\n     @Test\n     public void find() {\n-        AuthModule authModule = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        AuthModule authModule = authModuleDAO.find(\"DefaultLDAPAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof LDAPAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        authModule = authModuleDAO.find(\"DefaultJDBCAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof JDBCAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        authModule = authModuleDAO.find(\"DefaultGoogleMfaAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof GoogleMfaAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        authModule = authModuleDAO.find(\"DefaultOIDCAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof OIDCAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        authModule = authModuleDAO.find(\"DefaultSAML2IdPAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof SAML2IdPAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        authModule = authModuleDAO.find(\"DefaultJaasAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof JaasAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        authModule = authModuleDAO.find(\"DefaultStaticAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof StaticAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        authModule = authModuleDAO.find(\"DefaultSyncopeAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof SyncopeAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        authModule = authModuleDAO.find(\"DefaultU2FAuthModule\");\n         assertNotNull(authModule);\n+        assertTrue(authModule.getConf() instanceof U2FAuthModuleConf);\n \n-        authModule = authModuleDAO.find(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        authModule = authModuleDAO.find(\"DefaultRadiusAuthModule\");\n         assertNotNull(authModule);\n-\n-        authModule = authModuleDAO.find(UUID.randomUUID().toString());\n-        assertNull(authModule);\n-    }\n-\n-    @Test\n-    public void findAll() {\n-        List<AuthModule> modules = authModuleDAO.findAll();\n-        assertNotNull(modules);\n-        assertFalse(modules.isEmpty());\n-        assertTrue(modules.size() >= 10);\n-    }\n-\n-    @Test\n-    public void findByAuthModuleImpl() {\n-        AuthModule ldapAuthModule = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n-        assertNotNull(ldapAuthModule);\n-        AuthModule jdbcAuthModule = authModuleDAO.find(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n-        assertNotNull(jdbcAuthModule);\n-        AuthModule googleMfaAuthModule = authModuleDAO.find(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n-        assertNotNull(googleMfaAuthModule);\n-        AuthModule oidcAuthModule = authModuleDAO.find(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n-        assertNotNull(oidcAuthModule);\n-        AuthModule saml2IdPAuthModule = authModuleDAO.find(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n-        assertNotNull(saml2IdPAuthModule);\n-        AuthModule jaasAuthModule = authModuleDAO.find(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n-        assertNotNull(jaasAuthModule);\n-        AuthModule staticAuthModule = authModuleDAO.find(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n-        assertNotNull(staticAuthModule);\n-        AuthModule syncopeAuthModule = authModuleDAO.find(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n-        assertNotNull(syncopeAuthModule);\n-        AuthModule radiusAuthModule = authModuleDAO.find(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n-        assertNotNull(radiusAuthModule);\n-        AuthModule u2fAuthModule = authModuleDAO.find(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n-        assertNotNull(u2fAuthModule);\n-\n-        assertTrue(isSpecificConf(ldapAuthModule.getConf(), LDAPAuthModuleConf.class));\n-        assertFalse(isSpecificConf(ldapAuthModule.getConf(), JDBCAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(jdbcAuthModule.getConf(), JDBCAuthModuleConf.class));\n-        assertFalse(isSpecificConf(jdbcAuthModule.getConf(), GoogleMfaAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(googleMfaAuthModule.getConf(), GoogleMfaAuthModuleConf.class));\n-        assertFalse(isSpecificConf(googleMfaAuthModule.getConf(), OIDCAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(oidcAuthModule.getConf(), OIDCAuthModuleConf.class));\n-        assertFalse(isSpecificConf(oidcAuthModule.getConf(), SAML2IdPAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(saml2IdPAuthModule.getConf(), SAML2IdPAuthModuleConf.class));\n-        assertFalse(isSpecificConf(saml2IdPAuthModule.getConf(), JaasAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(jaasAuthModule.getConf(), JaasAuthModuleConf.class));\n-        assertFalse(isSpecificConf(jaasAuthModule.getConf(), StaticAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(staticAuthModule.getConf(), StaticAuthModuleConf.class));\n-        assertFalse(isSpecificConf(staticAuthModule.getConf(), SyncopeAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(syncopeAuthModule.getConf(), SyncopeAuthModuleConf.class));\n-        assertFalse(isSpecificConf(syncopeAuthModule.getConf(), RadiusAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(radiusAuthModule.getConf(), RadiusAuthModuleConf.class));\n-        assertFalse(isSpecificConf(radiusAuthModule.getConf(), U2FAuthModuleConf.class));\n-\n-        assertTrue(isSpecificConf(u2fAuthModule.getConf(), U2FAuthModuleConf.class));\n-        assertFalse(isSpecificConf(u2fAuthModule.getConf(), LDAPAuthModuleConf.class));\n+        assertTrue(authModule.getConf() instanceof RadiusAuthModuleConf);\n     }\n \n     @Test\n     public void findByType() {\n         List<AuthModule> authModules = authModuleDAO.findAll();\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), LDAPAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultLDAPAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultLDAPAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), JDBCAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultJDBCAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultJDBCAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), GoogleMfaAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultGoogleMfaAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultGoogleMfaAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), OIDCAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultOIDCAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultOIDCAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), SAML2IdPAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultSAML2IdPAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultSAML2IdPAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), JaasAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultJaasAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultJaasAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), StaticAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultStaticAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultStaticAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), SyncopeAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultSyncopeAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultSyncopeAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), RadiusAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultRadiusAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultRadiusAuthModule\")));\n         assertTrue(authModules.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), U2FAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultU2FAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultU2FAuthModule\")));\n     }\n \n     @Test\n@@ -257,7 +210,6 @@ public void saveWithJDBCModule() {\n     public void saveWithSyncopeModule() {\n         SyncopeAuthModuleConf conf = new SyncopeAuthModuleConf();\n         conf.setDomain(\"Master\");\n-        conf.setUrl(\"http://mydomain.com/syncope/rest\");\n \n         saveAuthModule(\"SyncopeAuthModuleTest\", conf);\n     }\n@@ -291,7 +243,7 @@ public void saveWithU2FModule() {\n \n     @Test\n     public void updateWithLDAPModule() {\n-        AuthModule module = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        AuthModule module = authModuleDAO.find(\"DefaultLDAPAuthModule\");\n         assertNotNull(module);\n         AuthModuleConf conf = module.getConf();\n         LDAPAuthModuleConf.class.cast(conf).setBaseDn(\"dc=example2,dc=org\");\n@@ -310,7 +262,7 @@ public void updateWithLDAPModule() {\n \n     @Test\n     public void updateWithJDBCModule() {\n-        AuthModule module = authModuleDAO.find(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        AuthModule module = authModuleDAO.find(\"DefaultJDBCAuthModule\");\n         assertNotNull(module);\n         AuthModuleConf conf = module.getConf();\n         JDBCAuthModuleConf.class.cast(conf).setSql(\"SELECT * FROM otherTable WHERE name=?\");\n@@ -326,7 +278,7 @@ public void updateWithJDBCModule() {\n \n     @Test\n     public void updateWithGoogleMfaModule() {\n-        AuthModule module = authModuleDAO.find(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        AuthModule module = authModuleDAO.find(\"DefaultGoogleMfaAuthModule\");\n         assertNotNull(module);\n         AuthModuleConf conf = module.getConf();\n         GoogleMfaAuthModuleConf.class.cast(conf).setLabel(\"newLabel\");\n@@ -342,7 +294,7 @@ public void updateWithGoogleMfaModule() {\n \n     @Test\n     public void updateWithSAML2IdPModule() {\n-        AuthModule module = authModuleDAO.find(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        AuthModule module = authModuleDAO.find(\"DefaultSAML2IdPAuthModule\");\n         assertNotNull(module);\n         AuthModuleConf conf = module.getConf();\n         SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderEntityId(\"newEntityId\");\n@@ -358,7 +310,7 @@ public void updateWithSAML2IdPModule() {\n \n     @Test\n     public void updateWithOIDCModule() {\n-        AuthModule module = authModuleDAO.find(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        AuthModule module = authModuleDAO.find(\"DefaultOIDCAuthModule\");\n         assertNotNull(module);\n         AuthModuleConf conf = module.getConf();\n         OIDCAuthModuleConf.class.cast(conf).setResponseType(\"newCode\");\n@@ -374,7 +326,7 @@ public void updateWithOIDCModule() {\n \n     @Test\n     public void updateWithJaasModule() {\n-        AuthModule module = authModuleDAO.find(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        AuthModule module = authModuleDAO.find(\"DefaultJaasAuthModule\");\n         assertNotNull(module);\n         AuthModuleConf conf = module.getConf();\n         JaasAuthModuleConf.class.cast(conf).setRealm(\"SYNCOPE_NEW\");\n@@ -390,7 +342,7 @@ public void updateWithJaasModule() {\n \n     @Test\n     public void updateWithStaticModule() {\n-        AuthModule module = authModuleDAO.find(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        AuthModule module = authModuleDAO.find(\"DefaultStaticAuthModule\");\n         assertNotNull(module);\n         assertEquals(1, StaticAuthModuleConf.class.cast(module.getConf()).getUsers().size());\n         AuthModuleConf conf = module.getConf();\n@@ -407,7 +359,7 @@ public void updateWithStaticModule() {\n \n     @Test\n     public void updateWithRadiusModule() {\n-        AuthModule module = authModuleDAO.find(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        AuthModule module = authModuleDAO.find(\"DefaultRadiusAuthModule\");\n         assertNotNull(module);\n         AuthModuleConf conf = module.getConf();\n         RadiusAuthModuleConf.class.cast(conf).setSocketTimeout(45);\n@@ -423,7 +375,7 @@ public void updateWithRadiusModule() {\n \n     @Test\n     public void updateWithU2fModule() {\n-        AuthModule module = authModuleDAO.find(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        AuthModule module = authModuleDAO.find(\"DefaultU2FAuthModule\");\n         assertNotNull(module);\n         AuthModuleConf conf = module.getConf();\n         U2FAuthModuleConf.class.cast(conf).setExpireDevices(24);\n@@ -439,7 +391,7 @@ public void updateWithU2fModule() {\n \n     @Test\n     public void updateWithSyncopeModule() {\n-        AuthModule module = authModuleDAO.find(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        AuthModule module = authModuleDAO.find(\"DefaultSyncopeAuthModule\");\n         assertNotNull(module);\n \n         AuthModuleConf conf = module.getConf();\n@@ -456,18 +408,18 @@ public void updateWithSyncopeModule() {\n \n     @Test\n     public void delete() {\n-        AuthModule authModule = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        AuthModule authModule = authModuleDAO.find(\"DefaultSyncopeAuthModule\");\n         assertNotNull(authModule);\n \n-        authModuleDAO.delete(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        authModuleDAO.delete(\"DefaultSyncopeAuthModule\");\n \n-        authModule = authModuleDAO.find(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        authModule = authModuleDAO.find(\"DefaultSyncopeAuthModule\");\n         assertNull(authModule);\n     }\n \n-    private void saveAuthModule(final String name, final AuthModuleConf conf) {\n+    private void saveAuthModule(final String key, final AuthModuleConf conf) {\n         AuthModule module = entityFactory.newEntity(AuthModule.class);\n-        module.setName(name);\n+        module.setKey(key);\n         module.setDescription(\"An authentication module\");\n         module.setConf(conf);\n "},{"sha":"7a14685a3a51eb7087583f5d781ec37d7cc7382a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -192,7 +192,6 @@ public void create() {\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n         conf.addRequiredAttr(\"cn\", Set.of(\"syncope\"));\n-        conf.setName(\"AttrReleasePolicyAllowEverything\");\n         accessPolicy.setConf(conf);\n \n         accessPolicy = policyDAO.save(accessPolicy);\n@@ -210,7 +209,6 @@ public void create() {\n         DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n         authPolicyConf.getAuthModules().addAll(List.of(\"LdapAuthentication1\", \"DatabaseAuthentication2\"));\n         DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n-        criteria.setName(\"DefaultConf\");\n         criteria.setAll(true);\n         authPolicyConf.setCriteria(criteria);\n         authPolicy.setConf(authPolicyConf);\n@@ -229,7 +227,6 @@ public void create() {\n \n         AllowedAttrReleasePolicyConf attrReleasePolicyConf = new AllowedAttrReleasePolicyConf();\n         attrReleasePolicyConf.getAllowedAttrs().addAll(List.of(\"*\"));\n-        attrReleasePolicyConf.setName(\"AttrReleasePolicyAllowEverything\");\n         attrReleasePolicy.setConf(attrReleasePolicyConf);\n \n         attrReleasePolicy = policyDAO.save(attrReleasePolicy);"},{"sha":"324c3be9d0bd7235769022f80defa51b9a602dbc","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":32,"deletions":22,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -61,27 +61,37 @@ under the License.\n                      jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf\",\"name\":\"DenyAttrReleasePolicyConf\"}'/>\n \n   <!-- Authentication modules -->\n-  <AuthModule id=\"be456831-593d-4003-b273-4c3fb61700df\" name=\"DefaultLDAPAuthModule\"\n-              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"name\":\"MyLDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"cn=Directory Manager,dc=example,dc=org\", \"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=people,dc=example,dc=org\",\"subtreeSearch\":true}'/>\n-  <AuthModule id=\"4c3ed7e8-7008-11ea-bc55-0242ac130003\" name=\"DefaultJDBCAuthModule\"\n-              description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"name\":\"MyJDBCAuthModuleConf\", \"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n-  <AuthModule id=\"4c3ed4e6-7008-11ea-bc55-0242ac130003\" name=\"DefaultGoogleMfaAuthModule\"\n-              description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"name\":\"MyGoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n-  <AuthModule id=\"4c3ed8f6-7008-11ea-bc55-0242ac130003\" name=\"DefaultOIDCAuthModule\"\n-              description=\"OIDC auth module\"\n-              jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"name\":\"MyOIDCAuthModuleConf\", \"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n-  <AuthModule id=\"4c3ed9d2-7008-11ea-bc55-0242ac130003\" name=\"DefaultSAML2IdPAuthModule\"\n-              description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"name\":\"MySAML2IdPAuthModuleConf\", \"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"classpath:/idp-metadata.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n-  <AuthModule id=\"4c3edbbc-7008-11ea-bc55-0242ac130003\" name=\"DefaultJaasAuthModule\"\n-              description=\"Jaas auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"name\":\"MyJaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\", \"loginConfigType\": \"JavaLoginConfig\", \"loginConfigurationFile\": \"file:/etc/jaas/login.conf\"}'/>\n-  <AuthModule id=\"4c3edc98-7008-11ea-bc55-0242ac130003\" name=\"DefaultStaticAuthModule\"\n-              description=\"Static auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"name\":\"MyStaticAuthModuleConf\",\"users\":{\"syncope1\": \"$cynop3\"}}'/>\n-  <AuthModule id=\"4c3edd60-7008-11ea-bc55-0242ac130003\" name=\"DefaultSyncopeAuthModule\"\n-              description=\"Syncope auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"name\":\"MySyncopeAuthModuleConf\",\"domain\":\"Master\",\"url\":\"http://localhost:9080/syncope/rest\"}'/>\n-  <AuthModule id=\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\" name=\"DefaultRadiusAuthModule\"\n-              description=\"Radius auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.RadiusAuthModuleConf\",\"name\":\"MyRadiusAuthModuleConf\",\"protocol\":\"PAP\",\"inetAddress\":\"localhost\", \"sharedSecret\":\"testing123\"}'/>\n-  <AuthModule id=\"f6e1288d-50d9-45fe-82ee-597c42242205\" name=\"DefaultU2FAuthModule\"\n-              description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"name\":\"MyU2FAuthModuleConf\",\"expireDevices\":40}'/>\n+  <AuthModule id=\"DefaultLDAPAuthModule\"\n+              description=\"LDAP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.LDAPAuthModuleConf\",\"userIdAttribute\":\"cn\",\"bindDn\": \"cn=Directory Manager,dc=example,dc=org\", \"bindCredential\":\"Password\",\"ldapUrl\":\"ldap://localhost:1389\",\"searchFilter\":\"cn={user}\",\"baseDn\":\"ou=people,dc=example,dc=org\",\"subtreeSearch\":true}'/>\n+  <AuthModule id=\"DefaultJDBCAuthModule\"\n+              description=\"JDBC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JDBCAuthModuleConf\",\"sql\":\"SELECT * FROM users_table WHERE name=?\", \"fieldPassword\": \"password\"}'/>\n+  <AuthModule id=\"DefaultGoogleMfaAuthModule\"\n+              description=\"Google Mfa auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf\",\"codeDigits\":6,\"issuer\":\"SyncopeTest\", \"label\":\"SyncopeTest\", \"timeStepSize\":30, \"windowSize\":3}'/>\n+  <AuthModule id=\"DefaultOIDCAuthModule\"\n+              description=\"OIDC auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.OIDCAuthModuleConf\",\"discoveryUri\":\"https://accounts.google.com/.well-known/openid-configuration\", \"id\":\"client-id\", \"secret\": \"client-secret\" }'/>\n+  <AuthModule id=\"DefaultSAML2IdPAuthModule\"\n+              description=\"SAML2 IdP auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SAML2IdPAuthModuleConf\",\"keystorePassword\":\"p@$$word\",\"privateKeyPassword\":\"p@$$word\",\"identityProviderMetadataPath\":\"classpath:/idp-metadata.xml\", \"serviceProviderEntityId\":\"syncope:apache:org\"}'/>\n+  <AuthModule id=\"DefaultJaasAuthModule\"\n+              description=\"Jaas auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.JaasAuthModuleConf\",\"realm\":\"SYNCOPE\",\"kerberosRealmSystemProperty\":\"sample-value\", \"loginConfigType\": \"JavaLoginConfig\", \"loginConfigurationFile\": \"file:/etc/jaas/login.conf\"}'/>\n+  <AuthModule id=\"DefaultStaticAuthModule\"\n+              description=\"Static auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.StaticAuthModuleConf\",\"users\":{\"syncope1\": \"$cynop3\"}}'/>\n+  <AuthModule id=\"DefaultSyncopeAuthModule\"\n+              description=\"Syncope auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf\",\"domain\":\"Master\"}'/>\n+  <AuthModule id=\"DefaultRadiusAuthModule\"\n+              description=\"Radius auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.RadiusAuthModuleConf\",\"protocol\":\"PAP\",\"inetAddress\":\"localhost\", \"sharedSecret\":\"testing123\"}'/>\n+  <AuthModule id=\"DefaultU2FAuthModule\"\n+              description=\"U2F auth module\" jsonConf='{\"_class\":\"org.apache.syncope.common.lib.auth.U2FAuthModuleConf\",\"expireDevices\":40}'/>\n+\n+  <AuthModuleItem id=\"26678936-af09-48b8-a789-36af0918b87d\" extAttrName=\"family_name\" intAttrName=\"syncopeUserAttr_surname\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n+  <AuthModuleItem id=\"a66ed3b1-07be-4a6e-aed3-b107be8a6e75\" extAttrName=\"name\" intAttrName=\"syncopeUserAttr_fullname\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n+  <AuthModuleItem id=\"edc26674-fac5-4a60-8266-74fac5ca6020\" extAttrName=\"given_name\" intAttrName=\"syncopeUserAttr_firstname\" \n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n+  <AuthModuleItem id=\"520eeba7-e00a-4221-8eeb-a7e00aa22159\" extAttrName=\"email\" intAttrName=\"syncopeUserAttr_email\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n+  <AuthModuleItem id=\"8360509b-7d8e-4796-aa79-3c5ccc8671e6\" extAttrName=\"groups\" intAttrName=\"syncopeUserMemberships\"\n+                  password=\"0\" purpose=\"NONE\" mandatoryCondition=\"false\" connObjectKey=\"0\" authModule_id=\"DefaultSyncopeAuthModule\"/>\n \n   <RelationshipType id=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType id=\"neighborhood\" description=\"Models the act that an object is near another\"/>\n@@ -2466,7 +2476,7 @@ $$ }&#10;\n   <SecurityQuestion id=\"887028ea-66fc-41e7-b397-620d7ea6dfbb\" content=\"What's your mother's maiden name?\"/>\n \n   <SRARoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\"\n-            logout=\"0\" csrf=\"1\"\n+            logout=\"0\" csrf=\"1\" routeType=\"PROTECTED\"\n             predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>"},{"sha":"6a68e6535ef711bcef42ac53c94ed1cc75868a3a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/OIDCJWKSDataBinder.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FOIDCJWKSDataBinder.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,13 +19,14 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n \n public interface OIDCJWKSDataBinder {\n-    \n+\n     OIDCJWKSTO get(OIDCJWKS jwks);\n \n-    OIDCJWKS create();\n+    OIDCJWKS create(int size, JWSAlgorithm algorithm);\n \n-    OIDCJWKS update(OIDCJWKS oidcjwks, OIDCJWKSTO jwksTO);\n+    OIDCJWKS update(OIDCJWKS jwks, OIDCJWKSTO jwksTO);\n }"},{"sha":"5cb03ad876578ce2d4e4b22f42041de701b139c7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/wa/WAClientAppDataBinder.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2Fwa%2FWAClientAppDataBinder.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n \n-public interface WAClientAppBinder {\n+public interface WAClientAppDataBinder {\n \n     WAClientApp getWAClientApp(ClientApp clientApp);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/wa/WAClientAppBinder.java"},{"sha":"23eaeaed48daac4e7674ff6891390d887c66ee7b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuthModuleDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuthModuleDataBinderImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -90,12 +90,13 @@ private void populateItems(final AuthModuleTO authModuleTO, final AuthModule aut\n \n     @Override\n     public AuthModule create(final AuthModuleTO authModuleTO) {\n-        return update(entityFactory.newEntity(AuthModule.class), authModuleTO);\n+        AuthModule authModule = entityFactory.newEntity(AuthModule.class);\n+        authModule.setKey(authModuleTO.getKey());\n+        return update(authModule, authModuleTO);\n     }\n \n     @Override\n     public AuthModule update(final AuthModule authModule, final AuthModuleTO authModuleTO) {\n-        authModule.setName(authModuleTO.getName());\n         authModule.setDescription(authModuleTO.getDescription());\n         authModule.setConf(authModuleTO.getConf());\n \n@@ -126,7 +127,6 @@ private static void populateItems(final AuthModule authModule, final AuthModuleT\n     public AuthModuleTO getAuthModuleTO(final AuthModule authModule) {\n         AuthModuleTO authModuleTO = new AuthModuleTO();\n \n-        authModuleTO.setName(authModule.getName());\n         authModuleTO.setKey(authModule.getKey());\n         authModuleTO.setDescription(authModule.getDescription());\n         authModuleTO.setConf(authModule.getConf());"},{"sha":"9fb5c4448223e2e2a74c8518b1995a0a51d79bbe","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -205,7 +205,6 @@ private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n         clientApp.setClientSecret(clientAppTO.getClientSecret());\n         clientApp.setClientId(clientAppTO.getClientId());\n         clientApp.setSignIdToken(clientAppTO.isSignIdToken());\n-        clientApp.setJwks(clientAppTO.getJwks());\n         clientApp.setSubjectType(clientAppTO.getSubjectType());\n         clientApp.getRedirectUris().addAll(clientAppTO.getRedirectUris());\n         clientApp.getSupportedGrantTypes().addAll(clientAppTO.getSupportedGrantTypes());\n@@ -219,8 +218,12 @@ private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n                 clientApp.setAuthPolicy((AuthPolicy) policy);\n             } else {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n-                sce.getElements().add(\"Expected \" + AuthPolicy.class.getSimpleName()\n-                        + \", found \" + policy.getClass().getSimpleName());\n+                if (policy == null) {\n+                    sce.getElements().add(\"Policy \" + clientAppTO.getAuthPolicy() + \" not found\");\n+                } else {\n+                    sce.getElements().add(\"Expected \" + AuthPolicy.class.getSimpleName()\n+                            + \", found \" + policy.getClass().getSimpleName());\n+                }\n                 throw sce;\n             }\n         }\n@@ -233,8 +236,12 @@ private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n                 clientApp.setAccessPolicy((AccessPolicy) policy);\n             } else {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n-                sce.getElements().add(\"Expected \" + AccessPolicy.class.getSimpleName()\n-                        + \", found \" + policy.getClass().getSimpleName());\n+                if (policy == null) {\n+                    sce.getElements().add(\"Policy \" + clientAppTO.getAccessPolicy() + \" not found\");\n+                } else {\n+                    sce.getElements().add(\"Expected \" + AccessPolicy.class.getSimpleName()\n+                            + \", found \" + policy.getClass().getSimpleName());\n+                }\n                 throw sce;\n             }\n         }\n@@ -247,11 +254,17 @@ private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n                 clientApp.setAttrReleasePolicy((AttrReleasePolicy) policy);\n             } else {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n-                sce.getElements().add(\"Expected \" + AttrReleasePolicy.class.getSimpleName()\n-                        + \", found \" + policy.getClass().getSimpleName());\n+                if (policy == null) {\n+                    sce.getElements().add(\"Policy \" + clientAppTO.getAttrReleasePolicy() + \" not found\");\n+                } else {\n+                    sce.getElements().add(\"Expected \" + AttrReleasePolicy.class.getSimpleName()\n+                            + \", found \" + policy.getClass().getSimpleName());\n+                }\n                 throw sce;\n             }\n         }\n+\n+        clientApp.setLogoutUri(clientAppTO.getLogoutUri());\n     }\n \n     private static OIDCRPTO getClientAppTO(final OIDCRP clientApp) {\n@@ -264,7 +277,6 @@ private static OIDCRPTO getClientAppTO(final OIDCRP clientApp) {\n         clientAppTO.setClientId(clientApp.getClientId());\n         clientAppTO.setClientSecret(clientApp.getClientSecret());\n         clientAppTO.setSignIdToken(clientApp.isSignIdToken());\n-        clientAppTO.setJwks(clientApp.getJwks());\n         clientAppTO.setSubjectType(clientApp.getSubjectType());\n         clientAppTO.getRedirectUris().addAll(clientApp.getRedirectUris());\n         clientAppTO.getSupportedGrantTypes().addAll(clientApp.getSupportedGrantTypes());\n@@ -277,6 +289,8 @@ private static OIDCRPTO getClientAppTO(final OIDCRP clientApp) {\n         clientAppTO.setAttrReleasePolicy(clientApp.getAttrReleasePolicy() == null\n                 ? null : clientApp.getAttrReleasePolicy().getKey());\n \n+        clientAppTO.setLogoutUri(clientApp.getLogoutUri());\n+\n         return clientAppTO;\n     }\n "},{"sha":"9b1aaeeb1a4b0afbfb726a06d1a7b1f94e15adfb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCJWKSDataBinderImpl.java","status":"modified","additions":25,"deletions":17,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCJWKSDataBinderImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -16,54 +16,62 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.core.provisioning.java.data;\n \n-import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JOSEException;\n import com.nimbusds.jose.jwk.JWKSet;\n import com.nimbusds.jose.jwk.KeyUse;\n import com.nimbusds.jose.jwk.RSAKey;\n import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCJWKS;\n import org.apache.syncope.core.provisioning.api.data.OIDCJWKSDataBinder;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class OIDCJWKSDataBinderImpl implements OIDCJWKSDataBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCJWKSDataBinder.class);\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n     @Override\n     public OIDCJWKSTO get(final OIDCJWKS jwks) {\n-        return new OIDCJWKSTO.Builder().\n-            json(jwks.getJson()).\n-            key(jwks.getKey()).\n-            build();\n+        return new OIDCJWKSTO.Builder().json(jwks.getJson()).key(jwks.getKey()).build();\n     }\n \n     @Override\n-    public OIDCJWKS create() {\n+    public OIDCJWKS create(final int size, final JWSAlgorithm algorithm) {\n         try {\n             OIDCJWKS jwks = entityFactory.newEntity(OIDCJWKS.class);\n-            RSAKey jwk = new RSAKeyGenerator(2048)\n-                .keyUse(KeyUse.SIGNATURE)\n-                .keyID(SecureRandomUtils.generateRandomUUID().toString())\n-                .algorithm(JWSAlgorithm.RS256)\n-                .generate();\n+            RSAKey jwk = new RSAKeyGenerator(size).\n+                    keyUse(KeyUse.SIGNATURE).\n+                    keyID(SecureRandomUtils.generateRandomUUID().toString()).\n+                    algorithm(new com.nimbusds.jose.JWSAlgorithm(algorithm.name())).\n+                    generate();\n             jwks.setJson(new JWKSet(jwk).toJSONObject(false).toString());\n             return jwks;\n-        } catch (final Exception e) {\n-            throw new RuntimeException(\"Unable to create OIDC JWKS\", e);\n+        } catch (JOSEException e) {\n+            LOG.error(\"Could not create OIDC JWKS\", e);\n+\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n         }\n     }\n \n     @Override\n-    public OIDCJWKS update(final OIDCJWKS oidcjwks, final OIDCJWKSTO jwksTO) {\n-        oidcjwks.setJson(jwksTO.getJson());\n-        return oidcjwks;\n+    public OIDCJWKS update(final OIDCJWKS jwks, final OIDCJWKSTO jwksTO) {\n+        jwks.setJson(jwksTO.getJson());\n+        return jwks;\n     }\n }"},{"sha":"d08d9536139f9135f3bec0bf94c0d8689136ff5a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppDataBinderImpl.java","status":"renamed","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2Fwa%2FWAClientAppDataBinderImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -29,12 +29,12 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppBinder;\n+import org.apache.syncope.core.provisioning.api.data.wa.WAClientAppDataBinder;\n \n @Component\n-public class WAClientAppBinderImpl implements WAClientAppBinder {\n+public class WAClientAppDataBinderImpl implements WAClientAppDataBinder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(WAClientAppBinder.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(WAClientAppDataBinder.class);\n \n     @Autowired\n     private ClientAppDataBinder clientAppDataBinder;\n@@ -52,39 +52,39 @@ public WAClientApp getWAClientApp(final ClientApp clientApp) {\n             if (clientApp.getAuthPolicy() != null) {\n                 authPolicyConf = clientApp.getAuthPolicy().getConf();\n                 waClientApp.setAuthPolicyConf(clientApp.getAuthPolicy().getConf());\n-            } else if (clientApp.getRealm().getAuthPolicy() != null) {\n+            } else if (clientApp.getRealm() != null && clientApp.getRealm().getAuthPolicy() != null) {\n                 authPolicyConf = clientApp.getRealm().getAuthPolicy().getConf();\n                 waClientApp.setAuthPolicyConf(clientApp.getRealm().getAuthPolicy().getConf());\n             }\n \n             if (clientApp.getAccessPolicy() != null) {\n                 waClientApp.setAccessPolicyConf(clientApp.getAccessPolicy().getConf());\n-            } else if (clientApp.getRealm().getAccessPolicy() != null) {\n+            } else if (clientApp.getRealm() != null && clientApp.getRealm().getAccessPolicy() != null) {\n                 waClientApp.setAccessPolicyConf(clientApp.getRealm().getAccessPolicy().getConf());\n             }\n \n             if (clientApp.getAttrReleasePolicy() != null) {\n                 waClientApp.setAttrReleasePolicyConf(clientApp.getAttrReleasePolicy().getConf());\n-            } else if (clientApp.getRealm().getAttrReleasePolicy() != null) {\n+            } else if (clientApp.getRealm() != null && clientApp.getRealm().getAttrReleasePolicy() != null) {\n                 waClientApp.setAttrReleasePolicyConf(clientApp.getRealm().getAttrReleasePolicy().getConf());\n             }\n \n-            if (authPolicyConf instanceof DefaultAuthPolicyConf\n-                    && !((DefaultAuthPolicyConf) authPolicyConf).getAuthModules().isEmpty()) {\n-                ((DefaultAuthPolicyConf) authPolicyConf).getAuthModules().forEach(authModuleKey -> {\n-                    AuthModule authModule = authModuleDAO.find(authModuleKey);\n+            if (authPolicyConf instanceof DefaultAuthPolicyConf) {\n+                ((DefaultAuthPolicyConf) authPolicyConf).getAuthModules().forEach(key -> {\n+                    AuthModule authModule = authModuleDAO.find(key);\n                     if (authModule == null) {\n-                        LOG.warn(\"AuthModule \" + authModuleKey + \" not found\");\n+                        LOG.warn(\"AuthModule \" + authModule + \" not found\");\n                     } else {\n-                        authModule.getItems().forEach(item -> waClientApp.getReleaseAttrs().put(\n-                                item.getExtAttrName(), item.getIntAttrName()));\n+                        authModule.getItems().\n+                                forEach(item -> waClientApp.getReleaseAttrs().put(\n+                                item.getIntAttrName(), item.getExtAttrName()));\n                     }\n                 });\n             }\n             if (waClientApp.getReleaseAttrs().isEmpty()) {\n                 if (clientApp.getAttrReleasePolicy() != null) {\n                     waClientApp.setAttrReleasePolicyConf(clientApp.getAttrReleasePolicy().getConf());\n-                } else if (clientApp.getRealm().getAttrReleasePolicy() != null) {\n+                } else if (clientApp.getRealm() != null && clientApp.getRealm().getAttrReleasePolicy() != null) {\n                     waClientApp.setAttrReleasePolicyConf(clientApp.getRealm().getAttrReleasePolicy().getConf());\n                 }\n             }","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/wa/WAClientAppBinderImpl.java"},{"sha":"b41c71f38f9abc9daf5f4c6c8937f04ef23f0bbd","filename":"docker/sra/pom.xml","status":"modified","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/docker%2Fsra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/docker%2Fsra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fsra%2Fpom.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -58,25 +58,6 @@ under the License.\n \n   <build>\n     <plugins>\n-      <plugin>\n-        <groupId>org.springframework.boot</groupId>\n-        <artifactId>spring-boot-maven-plugin</artifactId>\n-        <configuration>\n-          <mainClass>org.apache.syncope.sra.SyncopeSRAApplication</mainClass>\n-          <layout>ZIP</layout>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <goals>\n-              <goal>repackage</goal>\n-            </goals>\n-            <configuration>\n-              <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n       <plugin>\n         <groupId>io.fabric8</groupId>\n         <artifactId>docker-maven-plugin</artifactId>"},{"sha":"eb69a870b46255687c99e18bf92d77411b7e2a6e","filename":"docker/wa/src/main/resources/wa.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fwa%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,12 +22,13 @@ useGZIPCompression=true\n # Conf directories\n conf.directory=${conf.directory}\n cas.standalone.configurationDirectory=${conf.directory}\n-cas.authn.oidc.jwks.jwks-file=file:${conf.directory}/oidc.keystore\n \n cas.server.name=http://localhost:8080\n cas.server.prefix=${cas.server.name}/syncope-wa\n cas.server.scope=syncope.org\n \n+cas.logout.follow-service-redirects=true\n+\n cas.authn.saml-idp.entity-id=https://syncope.apache.org/saml\n \n # Disable access to the login endpoint"},{"sha":"bd387419b993427bc74dd0d17a07d3b1d94050ba","filename":"ext/self-keymaster/logic/src/main/java/org/apache/syncope/core/logic/NetworkServiceLogic.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNetworkServiceLogic.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -72,6 +72,7 @@ public NetworkService get(final NetworkService.Type serviceType) {\n                 : list.get(RandomUtils.nextInt(0, list.size()));\n     }\n \n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     public void register(final NetworkService networkService) {\n         unregister(networkService);\n \n@@ -81,6 +82,7 @@ public void register(final NetworkService networkService) {\n         serviceDAO.save(service);\n     }\n \n+    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     public void unregister(final NetworkService networkService) {\n         serviceDAO.findAll(networkService.getType()).stream().\n                 filter(service -> service.getAddress().equals(networkService.getAddress()))."},{"sha":"d5fcd8883b3ac22e4a7e70bf246156d4d75d8a44","filename":"ext/self-keymaster/rest-api/src/main/java/org/apache/syncope/ext/self/keymaster/api/service/NetworkServiceService.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -20,7 +20,6 @@\n \n import java.io.Serializable;\n import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n@@ -58,7 +57,7 @@ enum Action {\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_JSON })\n-    CompletableFuture<Response> action(\n+    Response action(\n             @NotNull NetworkService networkService,\n             @QueryParam(\"action\") Action action);\n }"},{"sha":"a026acca12a5e4c02947af003920ecc97501ec28","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/service/NetworkServiceServiceImpl.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,13 +19,11 @@\n package org.apache.syncope.ext.self.keymaster.cxf.service;\n \n import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.core.logic.NetworkServiceLogic;\n import org.apache.syncope.ext.self.keymaster.api.service.NetworkServiceService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Service;\n \n @Service\n@@ -46,16 +44,13 @@ public NetworkService get(final NetworkService.Type serviceType) {\n         return logic.get(serviceType);\n     }\n \n-    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     @Override\n-    public CompletableFuture<Response> action(final NetworkService networkService, final Action action) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            if (action == Action.unregister) {\n-                logic.unregister(networkService);\n-            } else {\n-                logic.register(networkService);\n-            }\n-            return Response.noContent().build();\n-        });\n+    public Response action(final NetworkService networkService, final Action action) {\n+        if (action == Action.unregister) {\n+            logic.unregister(networkService);\n+        } else {\n+            logic.register(networkService);\n+        }\n+        return Response.noContent().build();\n     }\n }"},{"sha":"251133f16f3c4c569b64ea32af2990aacaaeb0ff","filename":"fit/core-reference/pom.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -236,6 +236,24 @@ under the License.\n \n   <build>\n     <plugins>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>buildnumber-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <configuration>\n+          <doCheck>false</doCheck>\n+          <doUpdate>false</doUpdate>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>validate</phase>\n+            <goals>\n+              <goal>create</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-dependency-plugin</artifactId>"},{"sha":"6c607c0c38ab6012ad4e3becb4dd553c2c4c2cad","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":22,"deletions":77,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -67,8 +67,6 @@\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.UserCR;\n-import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n-import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.Attr;\n@@ -88,7 +86,6 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.AuthModuleTO;\n import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n-import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n@@ -115,14 +112,8 @@\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n-import org.apache.syncope.common.rest.api.service.OIDCJWKSConfService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreConfService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n-import org.apache.syncope.common.rest.api.service.wa.OIDCJWKSService;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.SAML2SPMetadataConfService;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.common.rest.api.service.SAML2SPService;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.apache.syncope.common.rest.api.service.ReportService;\n@@ -148,20 +139,21 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n-import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataConfService;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.OIDCJWKSService;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n import org.apache.syncope.fit.core.CoreITContext;\n import org.apache.syncope.fit.core.UserITCase;\n-import org.identityconnectors.common.security.Encryptor;\n import org.junit.jupiter.api.BeforeAll;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n-import org.apache.syncope.common.rest.api.service.SRARouteService;\n \n @SpringJUnitConfig({ CoreITContext.class, SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })\n public abstract class AbstractITCase {\n@@ -238,6 +230,8 @@ public abstract class AbstractITCase {\n \n     protected static final String PRINTER = \"PRINTER\";\n \n+    protected static final String OWNER = \"Syncope\";\n+\n     protected static final int MAX_WAIT_SECONDS = 50;\n \n     protected static String ANONYMOUS_UNAME;\n@@ -308,25 +302,13 @@ public abstract class AbstractITCase {\n \n     protected static AuthModuleService authModuleService;\n \n-    protected static SAML2SPMetadataService saml2SPMetadataService;\n-\n-    protected static SAML2SPMetadataConfService saml2SPMetadataConfService;\n-\n-    protected static SAML2SPKeystoreService saml2SPKeystoreService;\n-\n-    protected static SAML2SPKeystoreConfService saml2SPKeystoreConfService;\n-\n-    protected static SAML2IdPMetadataService saml2IdPMetadataService;\n-\n-    protected static SAML2IdPMetadataConfService saml2IdPMetadataConfService;\n-\n     protected static SecurityQuestionService securityQuestionService;\n \n     protected static ImplementationService implementationService;\n \n     protected static RemediationService remediationService;\n \n-    protected static SRARouteService gatewayRouteService;\n+    protected static SRARouteService sraRouteService;\n \n     protected static CamelRouteService camelRouteService;\n \n@@ -348,15 +330,19 @@ public abstract class AbstractITCase {\n \n     protected static AuthProfileService authProfileService;\n \n-    protected static OIDCJWKSService oidcJwksService;\n+    protected static SAML2SPMetadataService saml2SPMetadataService;\n+\n+    protected static SAML2SPKeystoreService saml2SPKeystoreService;\n+\n+    protected static SAML2IdPMetadataService saml2IdPMetadataService;\n \n-    protected static OIDCJWKSConfService oidcJwksConfService;\n+    protected static OIDCJWKSService oidcJWKSService;\n \n     protected static U2FRegistrationService u2FRegistrationService;\n \n     @BeforeAll\n     public static void securitySetup() {\n-        try (InputStream propStream = Encryptor.class.getResourceAsStream(\"/security.properties\")) {\n+        try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/security.properties\")) {\n             Properties props = new Properties();\n             props.load(propStream);\n \n@@ -366,7 +352,7 @@ public static void securitySetup() {\n             JWS_ALGORITHM = SignatureAlgorithm.valueOf(props.getProperty(\"jwsAlgorithm\"));\n             JWS_KEY = props.getProperty(\"jwsKey\");\n         } catch (Exception e) {\n-            LOG.error(\"Could not read secretKey\", e);\n+            LOG.error(\"Could not read security.properties\", e);\n         }\n \n         assertNotNull(ANONYMOUS_UNAME);\n@@ -416,7 +402,7 @@ public static void restSetup() {\n         securityQuestionService = adminClient.getService(SecurityQuestionService.class);\n         implementationService = adminClient.getService(ImplementationService.class);\n         remediationService = adminClient.getService(RemediationService.class);\n-        gatewayRouteService = adminClient.getService(SRARouteService.class);\n+        sraRouteService = adminClient.getService(SRARouteService.class);\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n         saml2SpService = adminClient.getService(SAML2SPService.class);\n         saml2IdPService = adminClient.getService(SAML2IdPService.class);\n@@ -426,16 +412,12 @@ public static void restSetup() {\n         clientAppService = adminClient.getService(ClientAppService.class);\n         authModuleService = adminClient.getService(AuthModuleService.class);\n         saml2SPMetadataService = adminClient.getService(SAML2SPMetadataService.class);\n-        saml2SPMetadataConfService = adminClient.getService(SAML2SPMetadataConfService.class);\n         saml2IdPMetadataService = adminClient.getService(SAML2IdPMetadataService.class);\n-        saml2IdPMetadataConfService = adminClient.getService(SAML2IdPMetadataConfService.class);\n         saml2SPKeystoreService = adminClient.getService(SAML2SPKeystoreService.class);\n-        saml2SPKeystoreConfService = adminClient.getService(SAML2SPKeystoreConfService.class);\n         googleMfaAuthTokenService = adminClient.getService(GoogleMfaAuthTokenService.class);\n         googleMfaAuthAccountService = adminClient.getService(GoogleMfaAuthAccountService.class);\n         authProfileService = adminClient.getService(AuthProfileService.class);\n-        oidcJwksService = adminClient.getService(OIDCJWKSService.class);\n-        oidcJwksConfService = adminClient.getService(OIDCJWKSConfService.class);\n+        oidcJWKSService = adminClient.getService(OIDCJWKSService.class);\n         u2FRegistrationService = adminClient.getService(U2FRegistrationService.class);\n     }\n \n@@ -628,7 +610,7 @@ protected ProvisioningResult<GroupTO> deleteGroup(final String key) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends PolicyTO> T createPolicy(final PolicyType type, final T policy) {\n+    protected static <T extends PolicyTO> T createPolicy(final PolicyType type, final T policy) {\n         Response response = policyService.create(type, policy);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n             Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n@@ -651,40 +633,6 @@ protected AuthModuleTO createAuthModule(final AuthModuleTO authModule) {\n         return getObject(response.getLocation(), AuthModuleService.class, authModule.getClass());\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    protected SAML2IdPMetadataTO createSAML2IdPMetadata(final SAML2IdPMetadataTO saml2IdPMetadata) {\n-        Response response = saml2IdPMetadataService.set(saml2IdPMetadata);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return getObject(response.getLocation(), SAML2IdPMetadataService.class, saml2IdPMetadata.getClass());\n-    }\n-\n-    protected SAML2SPMetadataTO createSAML2SPMetadata(final SAML2SPMetadataTO metadata) {\n-        Response response = saml2SPMetadataService.set(metadata);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return getObject(response.getLocation(), SAML2SPMetadataService.class, metadata.getClass());\n-    }\n-\n-    protected SAML2SPKeystoreTO createSAML2SPKeystore(final SAML2SPKeystoreTO keystoreTO) {\n-        Response response = saml2SPKeystoreService.set(keystoreTO);\n-        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n-            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n-            if (ex != null) {\n-                throw (RuntimeException) ex;\n-            }\n-        }\n-        return getObject(response.getLocation(), SAML2SPKeystoreService.class, keystoreTO.getClass());\n-    }\n-\n     protected ResourceTO createResource(final ResourceTO resourceTO) {\n         Response response = resourceService.create(resourceTO);\n         if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n@@ -809,7 +757,7 @@ protected <T> T queryForObject(\n         return object.get();\n     }\n \n-    protected OIDCRPTO buildOIDCRP() {\n+    protected static OIDCRPTO buildOIDCRP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setDescription(\"Authentication Policy\");\n@@ -838,7 +786,7 @@ protected OIDCRPTO buildOIDCRP() {\n         return oidcrpTO;\n     }\n \n-    protected SAML2SPTO buildSAML2SP() {\n+    protected static SAML2SPTO buildSAML2SP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setDescription(\"Authentication Policy\");\n@@ -884,19 +832,17 @@ protected static AuthPolicyTO buildAuthPolicyTO(final String authModuleKey) {\n         policy.setDescription(\"Test Authentication policy\");\n \n         DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n-        conf.setName(\"TestAuthConf\");\n         conf.getAuthModules().add(authModuleKey);\n         policy.setConf(conf);\n \n         return policy;\n     }\n \n-    protected static AttrReleasePolicyTO buildAttributeReleasePolicyTO(final String policyName) {\n+    protected static AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n         AttrReleasePolicyTO policy = new AttrReleasePolicyTO();\n         policy.setDescription(\"Test Attribute Release policy\");\n \n         AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n-        conf.setName(\"MyDefaultAttrReleasePolicyConf\");\n         conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n         policy.setConf(conf);\n \n@@ -909,7 +855,6 @@ protected static AccessPolicyTO buildAccessPolicyTO() {\n \n         DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n         conf.setEnabled(true);\n-        conf.setName(\"TestAccessPolicyConf\");\n         conf.addRequiredAttr(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n         policy.setConf(conf);\n "},{"sha":"8615b3be5cd6ba5dfb8c2f5e211ff0604d8349c4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -38,8 +38,6 @@\n import org.apache.syncope.common.keymaster.client.zookeper.ZookeeperKeymasterClientContext;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.fit.ui.AbstractUITCase;\n-import org.apache.wicket.IPageManagerProvider;\n-import org.apache.wicket.mock.MockPageManager;\n import org.apache.wicket.util.tester.FormTester;\n import org.apache.wicket.util.tester.WicketTester;\n import org.junit.jupiter.api.BeforeAll;\n@@ -114,20 +112,7 @@ public static void setUp() {\n         ctx.register(SyncopeIdMConsoleContext.class);\n         ctx.refresh();\n \n-        TESTER = new WicketTester(ctx.getBean(SyncopeWebApplication.class)) {\n-\n-            // Remove this method when upgrading to Wicket 9.0.0-M6 - see WICKET-6766\n-            @Override\n-            protected IPageManagerProvider newTestPageManagerProvider() {\n-                return () -> new MockPageManager() {\n-\n-                    @Override\n-                    public boolean supportsVersioning() {\n-                        return true;\n-                    }\n-                };\n-            }\n-        };\n+        TESTER = new WicketTester(ctx.getBean(SyncopeWebApplication.class));\n \n         SYNCOPE_SERVICE = new SyncopeClientFactoryBean().\n                 setAddress(ADDRESS).create(ADMIN_UNAME, ADMIN_PWD)."},{"sha":"d900cffa27dc44e4dccb19cff3ef218160ad9e49","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AbstractNotificationTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAbstractNotificationTaskITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -41,7 +41,7 @@ public abstract class AbstractNotificationTaskITCase extends AbstractTaskITCase\n     @BeforeAll\n     public static void conf() {\n         Properties props = new Properties();\n-        try (InputStream propStream = ExceptionMapperITCase.class.getResourceAsStream(\"/test.properties\")) {\n+        try (InputStream propStream = AbstractNotificationTaskITCase.class.getResourceAsStream(\"/test.properties\")) {\n             props.load(propStream);\n         } catch (Exception e) {\n             LOG.error(\"Could not load /test.properties\", e);"},{"sha":"20823393591b926246c56c88454b8b7fdf4c4539","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthModuleITCase.java","status":"modified","additions":56,"deletions":81,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthModuleITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -33,6 +33,7 @@\n import java.util.UUID;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.auth.AuthModuleConf;\n import org.apache.syncope.common.lib.auth.GoogleMfaAuthModuleConf;\n import org.apache.syncope.common.lib.auth.JDBCAuthModuleConf;\n@@ -65,14 +66,13 @@ private enum AuthModuleSupportedType {\n \n     private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type) {\n         AuthModuleTO authModuleTO = new AuthModuleTO();\n-        authModuleTO.setName(\"Test\" + type + \"AuthenticationModule\" + getUUIDString());\n+        authModuleTO.setKey(\"Test\" + type + \"AuthenticationModule\" + getUUIDString());\n         authModuleTO.setDescription(\"A test \" + type + \" Authentication Module\");\n \n         AuthModuleConf conf;\n         switch (type) {\n             case LDAP:\n                 conf = new LDAPAuthModuleConf();\n-                LDAPAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 LDAPAuthModuleConf.class.cast(conf).setBaseDn(\"dc=example,dc=org\");\n                 LDAPAuthModuleConf.class.cast(conf).setSearchFilter(\"cn={user}\");\n                 LDAPAuthModuleConf.class.cast(conf).setSubtreeSearch(true);\n@@ -84,7 +84,6 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n \n             case GOOGLE_MFA:\n                 conf = new GoogleMfaAuthModuleConf();\n-                GoogleMfaAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 GoogleMfaAuthModuleConf.class.cast(conf).setCodeDigits(6);\n                 GoogleMfaAuthModuleConf.class.cast(conf).setIssuer(\"SyncopeTest\");\n                 GoogleMfaAuthModuleConf.class.cast(conf).setLabel(\"Syncope\");\n@@ -94,7 +93,6 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n \n             case JAAS:\n                 conf = new JaasAuthModuleConf();\n-                JaasAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 JaasAuthModuleConf.class.cast(conf).setKerberosKdcSystemProperty(\"sample-value\");\n                 JaasAuthModuleConf.class.cast(conf).setKerberosRealmSystemProperty(\"sample-value\");\n                 JaasAuthModuleConf.class.cast(conf).setLoginConfigType(\"JavaLoginConfig\");\n@@ -104,7 +102,6 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n \n             case JDBC:\n                 conf = new JDBCAuthModuleConf();\n-                JDBCAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 JDBCAuthModuleConf.class.cast(conf).setSql(\"SELECT * FROM table WHERE name=?\");\n                 JDBCAuthModuleConf.class.cast(conf).setFieldPassword(\"password\");\n                 JDBCAuthModuleConf.class.cast(conf).getPrincipalAttributeList().addAll(\n@@ -113,7 +110,6 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n \n             case OIDC:\n                 conf = new OIDCAuthModuleConf();\n-                OIDCAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 OIDCAuthModuleConf.class.cast(conf).setId(\"OIDCTestId\");\n                 OIDCAuthModuleConf.class.cast(conf).setDiscoveryUri(\"www.testurl.com\");\n                 OIDCAuthModuleConf.class.cast(conf).setUserIdAttribute(\"username\");\n@@ -123,27 +119,22 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n \n             case SAML2_IDP:\n                 conf = new SAML2IdPAuthModuleConf();\n-                SAML2IdPAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 SAML2IdPAuthModuleConf.class.cast(conf).setServiceProviderEntityId(\"testEntityId\");\n                 SAML2IdPAuthModuleConf.class.cast(conf).setProviderName(\"testProviderName\");\n                 break;\n \n             case SYNCOPE:\n                 conf = new SyncopeAuthModuleConf();\n-                SyncopeAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n-                SyncopeAuthModuleConf.class.cast(conf).setDomain(\"Master\");\n-                SyncopeAuthModuleConf.class.cast(conf).setUrl(\"http://mydomain.com/syncope/rest\");\n+                SyncopeAuthModuleConf.class.cast(conf).setDomain(SyncopeConstants.MASTER_DOMAIN);\n                 break;\n \n             case U2F:\n                 conf = new U2FAuthModuleConf();\n-                U2FAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 U2FAuthModuleConf.class.cast(conf).setExpireDevices(50);\n                 break;\n \n             case RADIUS:\n                 conf = new RadiusAuthModuleConf();\n-                RadiusAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 RadiusAuthModuleConf.class.cast(conf).setProtocol(\"MSCHAPv2\");\n                 RadiusAuthModuleConf.class.cast(conf).setInetAddress(\"1.2.3.4\");\n                 RadiusAuthModuleConf.class.cast(conf).setSharedSecret(\"xyz\");\n@@ -153,7 +144,6 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n             case STATIC:\n             default:\n                 conf = new StaticAuthModuleConf();\n-                StaticAuthModuleConf.class.cast(conf).setName(\"TestConf\" + getUUIDString());\n                 StaticAuthModuleConf.class.cast(conf).getUsers().put(\"user1\", UUID.randomUUID().toString());\n                 StaticAuthModuleConf.class.cast(conf).getUsers().put(\"user2\", \"user2Password123\");\n                 break;\n@@ -173,6 +163,10 @@ private static AuthModuleTO buildAuthModuleTO(final AuthModuleSupportedType type\n         return authModuleTO;\n     }\n \n+    private static boolean isSpecificConf(final AuthModuleConf conf, final Class<? extends AuthModuleConf> clazz) {\n+        return ClassUtils.isAssignable(clazz, conf.getClass());\n+    }\n+\n     @Test\n     public void list() {\n         List<AuthModuleTO> authModuleTOs = authModuleService.list();\n@@ -181,154 +175,149 @@ public void list() {\n \n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), LDAPAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultLDAPAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultLDAPAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), JDBCAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultJDBCAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultJDBCAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), GoogleMfaAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultGoogleMfaAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultGoogleMfaAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), OIDCAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultOIDCAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultOIDCAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), SAML2IdPAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultSAML2IdPAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultSAML2IdPAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), JaasAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultJaasAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultJaasAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), StaticAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultStaticAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultStaticAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), SyncopeAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultSyncopeAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultSyncopeAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), U2FAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultU2FAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultU2FAuthModule\")));\n         assertTrue(authModuleTOs.stream().anyMatch(\n                 authModule -> isSpecificConf(authModule.getConf(), RadiusAuthModuleConf.class)\n-                && authModule.getName().equals(\"DefaultRadiusAuthModule\")));\n+                && authModule.getKey().equals(\"DefaultRadiusAuthModule\")));\n     }\n \n     @Test\n     public void getLDAPAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), LDAPAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), JDBCAuthModuleConf.class));\n     }\n \n     @Test\n     public void getJDBCAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultJDBCAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), JDBCAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), GoogleMfaAuthModuleConf.class));\n     }\n \n     @Test\n     public void getGoogleMfaAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultGoogleMfaAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), GoogleMfaAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), OIDCAuthModuleConf.class));\n     }\n \n     @Test\n     public void getOIDCAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultOIDCAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), OIDCAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), SAML2IdPAuthModuleConf.class));\n     }\n \n     @Test\n     public void getSAML2IdPAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultSAML2IdPAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), SAML2IdPAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), JaasAuthModuleConf.class));\n     }\n \n     @Test\n     public void getJaasAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultJaasAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), JaasAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), StaticAuthModuleConf.class));\n     }\n \n     @Test\n     public void getStaticAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultStaticAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), StaticAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), SyncopeAuthModuleConf.class));\n     }\n \n     @Test\n     public void getSyncopeAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultSyncopeAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), SyncopeAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), RadiusAuthModuleConf.class));\n     }\n \n     @Test\n     public void getRadiusAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultRadiusAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), RadiusAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), U2FAuthModuleConf.class));\n     }\n \n     @Test\n     public void getU2FAuthModule() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultU2FAuthModule\");\n \n         assertNotNull(authModuleTO);\n-        assertTrue(StringUtils.isNotBlank(authModuleTO.getName()));\n         assertTrue(StringUtils.isNotBlank(authModuleTO.getDescription()));\n         assertTrue(isSpecificConf(authModuleTO.getConf(), U2FAuthModuleConf.class));\n         assertFalse(isSpecificConf(authModuleTO.getConf(), LDAPAuthModuleConf.class));\n     }\n \n     @Test\n     public void create() throws IOException {\n-        EnumSet.allOf(AuthModuleSupportedType.class).forEach(type -> testCreate(type));\n+        EnumSet.allOf(AuthModuleSupportedType.class).forEach(type -> {\n+            AuthModuleTO authModuleTO = createAuthModule(buildAuthModuleTO(type));\n+            assertNotNull(authModuleTO);\n+            assertTrue(authModuleTO.getDescription().contains(\"A test \" + type + \" Authentication Module\"));\n+            assertEquals(2, authModuleTO.getItems().size());\n+        });\n     }\n \n     @Test\n     public void updateGoogleMfaAuthModule() {\n-        AuthModuleTO googleMfaAuthModuleTO = authModuleService.read(\"4c3ed4e6-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO googleMfaAuthModuleTO = authModuleService.read(\"DefaultGoogleMfaAuthModule\");\n         assertNotNull(googleMfaAuthModuleTO);\n \n         AuthModuleTO newGoogleMfaAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.GOOGLE_MFA);\n@@ -351,7 +340,7 @@ public void updateGoogleMfaAuthModule() {\n \n     @Test\n     public void updateLDAPAuthModule() {\n-        AuthModuleTO ldapAuthModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        AuthModuleTO ldapAuthModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n         assertNotNull(ldapAuthModuleTO);\n \n         AuthModuleTO newLdapAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.LDAP);\n@@ -374,7 +363,7 @@ public void updateLDAPAuthModule() {\n \n     @Test\n     public void updateSAML2IdPAuthModule() {\n-        AuthModuleTO saml2IdpAuthModuleTO = authModuleService.read(\"4c3ed9d2-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO saml2IdpAuthModuleTO = authModuleService.read(\"DefaultSAML2IdPAuthModule\");\n         assertNotNull(saml2IdpAuthModuleTO);\n \n         AuthModuleTO newsaml2IdpAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.SAML2_IDP);\n@@ -397,7 +386,7 @@ public void updateSAML2IdPAuthModule() {\n \n     @Test\n     public void updateOIDCAuthModule() {\n-        AuthModuleTO oidcAuthModuleTO = authModuleService.read(\"4c3ed8f6-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO oidcAuthModuleTO = authModuleService.read(\"DefaultOIDCAuthModule\");\n         assertNotNull(oidcAuthModuleTO);\n \n         AuthModuleTO newOIDCAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.OIDC);\n@@ -420,7 +409,7 @@ public void updateOIDCAuthModule() {\n \n     @Test\n     public void updateJDBCAuthModule() {\n-        AuthModuleTO jdbcAuthModuleTO = authModuleService.read(\"4c3ed7e8-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO jdbcAuthModuleTO = authModuleService.read(\"DefaultJDBCAuthModule\");\n         assertNotNull(jdbcAuthModuleTO);\n \n         AuthModuleTO newJDBCAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.JDBC);\n@@ -443,7 +432,7 @@ public void updateJDBCAuthModule() {\n \n     @Test\n     public void updateJaasAuthModule() {\n-        AuthModuleTO jaasAuthModuleTO = authModuleService.read(\"4c3edbbc-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO jaasAuthModuleTO = authModuleService.read(\"DefaultJaasAuthModule\");\n         assertNotNull(jaasAuthModuleTO);\n \n         AuthModuleTO newJaasAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.JAAS);\n@@ -466,7 +455,7 @@ public void updateJaasAuthModule() {\n \n     @Test\n     public void updateStaticAuthModule() {\n-        AuthModuleTO staticAuthModuleTO = authModuleService.read(\"4c3edc98-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO staticAuthModuleTO = authModuleService.read(\"DefaultStaticAuthModule\");\n         assertNotNull(staticAuthModuleTO);\n \n         AuthModuleTO newStaticAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.STATIC);\n@@ -490,7 +479,7 @@ public void updateStaticAuthModule() {\n \n     @Test\n     public void updateRadiusAuthModule() {\n-        AuthModuleTO radiusAuthModuleTO = authModuleService.read(\"07c528f3-63b4-4dc1-a4da-87f35b8bdec8\");\n+        AuthModuleTO radiusAuthModuleTO = authModuleService.read(\"DefaultRadiusAuthModule\");\n         assertNotNull(radiusAuthModuleTO);\n \n         AuthModuleTO newRadiusAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.RADIUS);\n@@ -513,7 +502,7 @@ public void updateRadiusAuthModule() {\n \n     @Test\n     public void updateU2fAuthModule() {\n-        AuthModuleTO u2fAuthModuleTO = authModuleService.read(\"f6e1288d-50d9-45fe-82ee-597c42242205\");\n+        AuthModuleTO u2fAuthModuleTO = authModuleService.read(\"DefaultU2FAuthModule\");\n         assertNotNull(u2fAuthModuleTO);\n \n         AuthModuleTO newU2fAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.U2F);\n@@ -536,7 +525,7 @@ public void updateU2fAuthModule() {\n \n     @Test\n     public void updateSyncopeAuthModule() {\n-        AuthModuleTO syncopeAuthModuleTO = authModuleService.read(\"4c3edd60-7008-11ea-bc55-0242ac130003\");\n+        AuthModuleTO syncopeAuthModuleTO = authModuleService.read(\"DefaultSyncopeAuthModule\");\n         assertNotNull(syncopeAuthModuleTO);\n \n         AuthModuleTO newSyncopeAuthModuleTO = buildAuthModuleTO(AuthModuleSupportedType.SYNCOPE);\n@@ -559,32 +548,18 @@ public void updateSyncopeAuthModule() {\n \n     @Test\n     public void delete() throws IOException {\n-        EnumSet.allOf(AuthModuleSupportedType.class).forEach(type -> testDelete(type));\n-    }\n-\n-    private void testCreate(final AuthModuleSupportedType type) {\n-        AuthModuleTO authModuleTO = createAuthModule(buildAuthModuleTO(type));\n-        assertNotNull(authModuleTO);\n-        assertTrue(authModuleTO.getName().contains(\"Test\" + type + \"AuthenticationModule\"));\n-        assertTrue(authModuleTO.getDescription().contains(\"A test \" + type + \" Authentication Module\"));\n-        assertEquals(2, authModuleTO.getItems().size());\n-    }\n-\n-    private void testDelete(final AuthModuleSupportedType type) {\n-        AuthModuleTO read = createAuthModule(buildAuthModuleTO(type));\n-        assertNotNull(read);\n-\n-        authModuleService.delete(read.getKey());\n-\n-        try {\n-            authModuleService.read(read.getKey());\n-            fail(\"This should not happen\");\n-        } catch (SyncopeClientException e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n-    private boolean isSpecificConf(final AuthModuleConf conf, final Class<? extends AuthModuleConf> clazz) {\n-        return ClassUtils.isAssignable(clazz, conf.getClass());\n+        EnumSet.allOf(AuthModuleSupportedType.class).forEach(type -> {\n+            AuthModuleTO read = createAuthModule(buildAuthModuleTO(type));\n+            assertNotNull(read);\n+\n+            authModuleService.delete(read.getKey());\n+\n+            try {\n+                authModuleService.read(read.getKey());\n+                fail(\"This should not happen\");\n+            } catch (SyncopeClientException e) {\n+                assertNotNull(e);\n+            }\n+        });\n     }\n }"},{"sha":"5de0634f68647b428a45721103a552dead1efdda","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -24,6 +24,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n+import java.util.UUID;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AccessPolicyTO;\n@@ -36,8 +37,6 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n \n-import java.util.UUID;\n-\n public class ClientAppITCase extends AbstractITCase {\n \n     @Test\n@@ -187,7 +186,7 @@ public void deleteCASSP() {\n         }\n     }\n \n-    private CASSPTO buildCASSP() {\n+    private static CASSPTO buildCASSP() {\n         AuthPolicyTO authPolicyTO = new AuthPolicyTO();\n         authPolicyTO.setKey(\"AuthPolicyTest_\" + getUUIDString());\n         authPolicyTO.setDescription(\"Authentication Policy\");\n@@ -210,6 +209,4 @@ private CASSPTO buildCASSP() {\n         casspTO.setAccessPolicy(accessPolicyTO.getKey());\n         return casspTO;\n     }\n-\n-\n }"},{"sha":"8c1a70da5fd8024225817e1b782acb46bcc94f6f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCJWKSConfITCase.java","status":"removed","additions":0,"deletions":79,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSConfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/72c8cfdcb42d4698670f92e1b8cb7b65191820c3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSConfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSConfITCase.java?ref=72c8cfdcb42d4698670f92e1b8cb7b65191820c3","patch":"@@ -1,79 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import com.nimbusds.jose.jwk.JWKSet;\n-import com.nimbusds.jose.jwk.KeyUse;\n-import com.nimbusds.jose.jwk.RSAKey;\n-import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.function.Executable;\n-import org.springframework.http.HttpStatus;\n-\n-import javax.ws.rs.core.GenericType;\n-import javax.ws.rs.core.Response;\n-\n-import java.util.UUID;\n-\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class OIDCJWKSConfITCase extends AbstractITCase {\n-\n-    private static OIDCJWKSTO getCurrentJwksTO() {\n-        try {\n-            return oidcJwksService.get();\n-        } catch (final SyncopeClientException e) {\n-            if (e.getType() == ClientExceptionType.NotFound) {\n-                Response response = oidcJwksService.set();\n-                assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n-                return response.readEntity(new GenericType<OIDCJWKSTO>() {\n-                });\n-            }\n-        }\n-        throw new RuntimeException(\"Unable to locate current OIDC JWKS\");\n-    }\n-\n-    @Test\n-    public void verifyJwks() throws Exception {\n-        oidcJwksConfService.delete();\n-\n-        RSAKey jwk = new RSAKeyGenerator(2048)\n-            .keyUse(KeyUse.SIGNATURE)\n-            .keyID(UUID.randomUUID().toString())\n-            .generate();\n-        String json = new JWKSet(jwk).toString();\n-\n-        assertDoesNotThrow(new Executable() {\n-            @Override\n-            public void execute() {\n-                OIDCJWKSTO currentTO = getCurrentJwksTO();\n-                currentTO.setJson(json);\n-                oidcJwksConfService.update(currentTO);\n-            }\n-        });\n-        OIDCJWKSTO currentTO = getCurrentJwksTO();\n-        assertEquals(json, currentTO.getJson());\n-    }\n-\n-}"},{"sha":"d30d449a3e67a3b2196274ed58d4489905a6af82","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCJWKSITCase.java","status":"modified","additions":68,"deletions":11,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCJWKSITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,37 +18,94 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import com.nimbusds.jose.jwk.JWKSet;\n+import com.nimbusds.jose.jwk.KeyUse;\n+import com.nimbusds.jose.jwk.RSAKey;\n+import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;\n+import java.util.UUID;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n+import org.apache.syncope.common.rest.api.service.wa.WAOIDCJWKSService;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.springframework.http.HttpStatus;\n \n-import javax.ws.rs.core.Response;\n+public class OIDCJWKSITCase extends AbstractITCase {\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.fail;\n+    private static WAOIDCJWKSService waOIDCJWKSService;\n \n-public class OIDCJWKSITCase extends AbstractITCase {\n+    @BeforeAll\n+    public static void setup() {\n+        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n+\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        waOIDCJWKSService = anonymous.getService(WAOIDCJWKSService.class);\n+    }\n \n     @Test\n-    public void verifyJwks() {\n+    public void deleteGetSet() {\n         try {\n-            oidcJwksConfService.delete();\n+            oidcJWKSService.delete();\n \n-            oidcJwksService.get();\n+            waOIDCJWKSService.get();\n             fail(\"Should not locate an OIDC JWKS\");\n-        } catch (final SyncopeClientException e) {\n+        } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n-        Response response = oidcJwksService.set();\n+\n+        Response response = waOIDCJWKSService.set(2048, JWSAlgorithm.RS256);\n         assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n         try {\n-            oidcJwksService.set();\n+            waOIDCJWKSService.set(2048, JWSAlgorithm.RS512);\n             fail(\"Should not recreate an OIDC JWKS\");\n-        } catch (final SyncopeClientException e) {\n+        } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n     }\n \n+    private static OIDCJWKSTO getCurrentJwksTO() {\n+        try {\n+            return waOIDCJWKSService.get();\n+        } catch (final SyncopeClientException e) {\n+            if (e.getType() == ClientExceptionType.NotFound) {\n+                Response response = waOIDCJWKSService.set(2048, JWSAlgorithm.RS256);\n+                assertEquals(HttpStatus.CREATED.value(), response.getStatus());\n+                return waOIDCJWKSService.get();\n+            }\n+        }\n+        throw new NotFoundException(\"Unable to locate current OIDC JWKS\");\n+    }\n+\n+    @Test\n+    public void update() throws Exception {\n+        oidcJWKSService.delete();\n+\n+        RSAKey jwk = new RSAKeyGenerator(2048)\n+                .keyUse(KeyUse.SIGNATURE)\n+                .keyID(UUID.randomUUID().toString())\n+                .generate();\n+        String json = new JWKSet(jwk).toString();\n+\n+        assertDoesNotThrow(() -> {\n+            OIDCJWKSTO currentTO = getCurrentJwksTO();\n+            currentTO.setJson(json);\n+            oidcJWKSService.update(currentTO);\n+        });\n+        OIDCJWKSTO currentTO = getCurrentJwksTO();\n+        assertEquals(json, currentTO.getJson());\n+    }\n }"},{"sha":"6721fd25c645c62d12b9d4a0f8d7607d2d42b640","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PolicyITCase.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPolicyITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -267,9 +267,7 @@ public void updateAccessPolicy() {\n \n     @Test\n     public void updateAttrReleasePolicy() {\n-        String policyName = \"TestAttrReleasePolicy\" + getUUIDString();\n-        AttrReleasePolicyTO newPolicyTO = buildAttributeReleasePolicyTO(policyName);\n-        newPolicyTO = createPolicy(PolicyType.ATTR_RELEASE, newPolicyTO);\n+        AttrReleasePolicyTO newPolicyTO = createPolicy(PolicyType.ATTR_RELEASE, buildAttrReleasePolicyTO());\n         assertNotNull(newPolicyTO);\n \n         AllowedAttrReleasePolicyConf policyConf = (AllowedAttrReleasePolicyConf) newPolicyTO.getConf();\n@@ -285,7 +283,6 @@ public void updateAttrReleasePolicy() {\n         assertTrue(policyConf.getAllowedAttrs().contains(\"cn\"));\n         assertTrue(policyConf.getAllowedAttrs().contains(\"postalCode\"));\n         assertTrue(policyConf.getAllowedAttrs().contains(\"givenName\"));\n-\n     }\n \n     @Test"},{"sha":"efdb83ad2966391b3bc6fcdff674ffe64a22e4c1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -256,7 +256,6 @@ public void deletingAccessPolicy() {\n         // 1. create access policy\n         DefaultAccessPolicyConf ruleConf = new DefaultAccessPolicyConf();\n         ruleConf.setEnabled(true);\n-        ruleConf.setName(\"TestAccessPolicyConf\" + getUUIDString());\n         ruleConf.addRequiredAttr(\"cn\", Set.of(\"admin\", \"Admin\", \"TheAdmin\"));\n \n         AccessPolicyTO policy = new AccessPolicyTO();\n@@ -298,7 +297,6 @@ public void deletingAccessPolicy() {\n     public void deletingAttributeReleasePolicy() {\n         // 1. create attribute release policy\n         AllowedAttrReleasePolicyConf ruleConf = new AllowedAttrReleasePolicyConf();\n-        ruleConf.setName(\"MyDefaultAttrReleasePolicyConf\" + getUUIDString());\n         ruleConf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n \n         AttrReleasePolicyTO policy = new AttrReleasePolicyTO();"},{"sha":"a330df4f616e2b669c2d6a7a673f099aae29cfb9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2IdPMetadataITCase.java","status":"modified","additions":49,"deletions":22,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2IdPMetadataITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,26 +18,63 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.apache.syncope.fit.AbstractITCase.getObject;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n \n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.platform.commons.util.StringUtils;\n \n public class SAML2IdPMetadataITCase extends AbstractITCase {\n-    \n-    private static final String APPLIES_TO = \"Syncope\";\n+\n+    private static WASAML2IdPMetadataService waSAML2IdPMetadataService;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n+\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        waSAML2IdPMetadataService = anonymous.getService(WASAML2IdPMetadataService.class);\n+    }\n+\n+    private static void testIsValid(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getAppliesTo()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getMetadata()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getEncryptionKey()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getEncryptionCertificate()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getSigningCertificate()));\n+        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getSigningKey()));\n+    }\n+\n+    private SAML2IdPMetadataTO createSAML2IdPMetadata(final SAML2IdPMetadataTO saml2IdPMetadata) {\n+        Response response = waSAML2IdPMetadataService.set(saml2IdPMetadata);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), WASAML2IdPMetadataService.class, saml2IdPMetadata.getClass());\n+    }\n \n     private SAML2IdPMetadataTO createSAML2IdPMetadata() {\n         SAML2IdPMetadataTO result = createSAML2IdPMetadata(new SAML2IdPMetadataTO.Builder().\n-                appliesTo(APPLIES_TO).\n+                appliesTo(OWNER).\n                 metadata(\"testMetadata\").\n                 encryptionCertificate(\"testEncryptionCert\").\n                 encryptionKey(\"testEncryptionKey\").\n@@ -50,40 +87,31 @@ private SAML2IdPMetadataTO createSAML2IdPMetadata() {\n         return result;\n     }\n \n-    private void testIsValid(final SAML2IdPMetadataTO saml2IdPMetadataTO) {\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getAppliesTo()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getMetadata()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getEncryptionKey()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getEncryptionCertificate()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getSigningCertificate()));\n-        assertFalse(StringUtils.isBlank(saml2IdPMetadataTO.getSigningKey()));\n-    }\n-\n     @Test\n     public void read() {\n-        SAML2IdPMetadataTO saml2IdPMetadataTO = null;\n+        SAML2IdPMetadataTO saml2IdPMetadataTO;\n         try {\n-            saml2IdPMetadataTO = saml2IdPMetadataService.getByOwner(APPLIES_TO);\n+            saml2IdPMetadataTO = waSAML2IdPMetadataService.getByOwner(OWNER);\n         } catch (SyncopeClientException e) {\n             saml2IdPMetadataTO = createSAML2IdPMetadata();\n         }\n \n         assertNotNull(saml2IdPMetadataTO);\n-        assertEquals(APPLIES_TO, saml2IdPMetadataTO.getAppliesTo());\n+        assertEquals(OWNER, saml2IdPMetadataTO.getAppliesTo());\n         testIsValid(saml2IdPMetadataTO);\n     }\n \n     @Test\n     public void create() {\n         try {\n-            saml2IdPMetadataService.getByOwner(APPLIES_TO);\n+            waSAML2IdPMetadataService.getByOwner(OWNER);\n         } catch (SyncopeClientException e) {\n             createSAML2IdPMetadata();\n         }\n \n         try {\n             createSAML2IdPMetadata(new SAML2IdPMetadataTO.Builder().\n-                    appliesTo(APPLIES_TO).\n+                    appliesTo(OWNER).\n                     metadata(\"testMetadata\").\n                     build());\n             fail(\"This should not happen\");\n@@ -94,20 +122,19 @@ public void create() {\n \n     @Test\n     public void update() {\n-        SAML2IdPMetadataTO saml2IdPMetadataTO = null;\n+        SAML2IdPMetadataTO saml2IdPMetadataTO;\n         try {\n-            saml2IdPMetadataTO = saml2IdPMetadataService.getByOwner(APPLIES_TO);\n+            saml2IdPMetadataTO = waSAML2IdPMetadataService.getByOwner(OWNER);\n         } catch (NotFoundException e) {\n             saml2IdPMetadataTO = createSAML2IdPMetadata();\n         }\n \n         assertNotNull(saml2IdPMetadataTO);\n         saml2IdPMetadataTO.setEncryptionKey(\"newKey\");\n-        saml2IdPMetadataConfService.update(saml2IdPMetadataTO);\n-        saml2IdPMetadataTO = saml2IdPMetadataService.getByOwner(saml2IdPMetadataTO.getAppliesTo());\n+        saml2IdPMetadataService.update(saml2IdPMetadataTO);\n+        saml2IdPMetadataTO = waSAML2IdPMetadataService.getByOwner(saml2IdPMetadataTO.getAppliesTo());\n         assertNotNull(saml2IdPMetadataTO);\n \n         assertEquals(\"newKey\", saml2IdPMetadataTO.getEncryptionKey());\n     }\n-\n }"},{"sha":"45abac36351685f18df549af0b1bdfc43bda683d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPKeystoreITCase.java","status":"modified","additions":50,"deletions":19,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPKeystoreITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,33 +18,65 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.apache.syncope.fit.AbstractITCase.getObject;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.platform.commons.util.StringUtils;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n \n public class SAML2SPKeystoreITCase extends AbstractITCase {\n \n-    private static final String OWNER = \"Syncope\";\n+    private static WASAML2SPKeystoreService waSAML2SPKeystoreService;\n+\n+    private static WASAML2SPMetadataService waSAML2SPMetadataService;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n+\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        waSAML2SPKeystoreService = anonymous.getService(WASAML2SPKeystoreService.class);\n+        waSAML2SPMetadataService = anonymous.getService(WASAML2SPMetadataService.class);\n+    }\n \n     private static void testIsValid(final SAML2SPKeystoreTO keystoreTO) {\n         assertFalse(StringUtils.isBlank(keystoreTO.getOwner()));\n         assertFalse(StringUtils.isBlank(keystoreTO.getKeystore()));\n     }\n \n+    private SAML2SPKeystoreTO createSAML2SPKeystore(final SAML2SPKeystoreTO keystoreTO) {\n+        Response response = waSAML2SPKeystoreService.set(keystoreTO);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), WASAML2SPKeystoreService.class, keystoreTO.getClass());\n+    }\n+\n     private SAML2SPKeystoreTO createSAML2SPKeystore() {\n         SAML2SPKeystoreTO result = createSAML2SPKeystore(new SAML2SPKeystoreTO.Builder().\n-            owner(OWNER).\n-            keystore(\"testkyStore\").\n-            build());\n+                owner(OWNER).\n+                keystore(\"testkyStore\").\n+                build());\n         assertNotNull(result);\n         testIsValid(result);\n         return result;\n@@ -54,7 +86,7 @@ private SAML2SPKeystoreTO createSAML2SPKeystore() {\n     public void read() {\n         SAML2SPKeystoreTO keystoreTO;\n         try {\n-            keystoreTO = saml2SPKeystoreService.getByOwner(OWNER);\n+            keystoreTO = waSAML2SPKeystoreService.getByOwner(OWNER);\n         } catch (SyncopeClientException e) {\n             keystoreTO = createSAML2SPKeystore();\n         }\n@@ -66,16 +98,16 @@ public void read() {\n     @Test\n     public void create() {\n         try {\n-            saml2SPMetadataService.getByOwner(OWNER);\n+            waSAML2SPMetadataService.getByOwner(OWNER);\n         } catch (SyncopeClientException e) {\n             createSAML2SPKeystore();\n         }\n \n         try {\n             createSAML2SPKeystore(new SAML2SPKeystoreTO.Builder().\n-                owner(OWNER).\n-                keystore(\"testMetadata\").\n-                build());\n+                    owner(OWNER).\n+                    keystore(\"testMetadata\").\n+                    build());\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n@@ -86,19 +118,18 @@ public void create() {\n     public void update() {\n         SAML2SPKeystoreTO keystoreTO;\n         try {\n-            keystoreTO = saml2SPKeystoreService.getByOwner(OWNER);\n+            keystoreTO = waSAML2SPKeystoreService.getByOwner(OWNER);\n         } catch (NotFoundException e) {\n             keystoreTO = createSAML2SPKeystore();\n         }\n         assertNotNull(keystoreTO);\n         keystoreTO.setKeystore(\"new-keystore\");\n         keystoreTO.setOwner(\"Syncope4\");\n \n-        saml2SPKeystoreConfService.update(keystoreTO);\n-        keystoreTO = saml2SPKeystoreService.read(keystoreTO.getKey());\n+        saml2SPKeystoreService.update(keystoreTO);\n+        keystoreTO = waSAML2SPKeystoreService.read(keystoreTO.getKey());\n         assertNotNull(keystoreTO);\n         assertEquals(\"new-keystore\", keystoreTO.getKeystore());\n         assertEquals(\"Syncope4\", keystoreTO.getOwner());\n     }\n-\n }"},{"sha":"d697c2dedc48e317c9ff5e552faae1091f5d9a95","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2SPMetadataITCase.java","status":"modified","additions":46,"deletions":19,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2SPMetadataITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,22 +18,50 @@\n  */\n package org.apache.syncope.fit.core;\n \n+import static org.apache.syncope.fit.AbstractITCase.getObject;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import org.junit.platform.commons.util.StringUtils;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n \n public class SAML2SPMetadataITCase extends AbstractITCase {\n \n-    private static final String OWNER = \"Syncope\";\n+    private static WASAML2SPMetadataService waSAML2SPMetadataService;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        assumeTrue(clientFactory.getContentType() == SyncopeClientFactoryBean.ContentType.JSON);\n+\n+        SyncopeClient anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n+        waSAML2SPMetadataService = anonymous.getService(WASAML2SPMetadataService.class);\n+    }\n+\n+    private SAML2SPMetadataTO createSAML2SPMetadata(final SAML2SPMetadataTO metadata) {\n+        Response response = waSAML2SPMetadataService.set(metadata);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n+            if (ex != null) {\n+                throw (RuntimeException) ex;\n+            }\n+        }\n+        return getObject(response.getLocation(), WASAML2SPMetadataService.class, metadata.getClass());\n+    }\n \n     private static void testIsValid(final SAML2SPMetadataTO metadataTO) {\n         assertFalse(StringUtils.isBlank(metadataTO.getOwner()));\n@@ -42,9 +70,9 @@ private static void testIsValid(final SAML2SPMetadataTO metadataTO) {\n \n     private SAML2SPMetadataTO createSAML2SPMetadata() {\n         SAML2SPMetadataTO result = createSAML2SPMetadata(new SAML2SPMetadataTO.Builder().\n-            owner(OWNER).\n-            metadata(\"testMetadata\").\n-            build());\n+                owner(OWNER).\n+                metadata(\"testMetadata\").\n+                build());\n         assertNotNull(result);\n         testIsValid(result);\n         return result;\n@@ -54,7 +82,7 @@ private SAML2SPMetadataTO createSAML2SPMetadata() {\n     public void read() {\n         SAML2SPMetadataTO metadataTO;\n         try {\n-            metadataTO = saml2SPMetadataService.getByOwner(OWNER);\n+            metadataTO = waSAML2SPMetadataService.getByOwner(OWNER);\n         } catch (SyncopeClientException e) {\n             metadataTO = createSAML2SPMetadata();\n         }\n@@ -66,16 +94,16 @@ public void read() {\n     @Test\n     public void create() {\n         try {\n-            saml2SPMetadataService.getByOwner(OWNER);\n+            waSAML2SPMetadataService.getByOwner(OWNER);\n         } catch (SyncopeClientException e) {\n             createSAML2SPMetadata();\n         }\n \n         try {\n             createSAML2SPMetadata(new SAML2SPMetadataTO.Builder().\n-                owner(OWNER).\n-                metadata(\"testMetadata\").\n-                build());\n+                    owner(OWNER).\n+                    metadata(\"testMetadata\").\n+                    build());\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n@@ -86,19 +114,18 @@ public void create() {\n     public void update() {\n         SAML2SPMetadataTO metadataTO;\n         try {\n-            metadataTO = saml2SPMetadataService.getByOwner(OWNER);\n+            metadataTO = waSAML2SPMetadataService.getByOwner(OWNER);\n         } catch (NotFoundException e) {\n             metadataTO = createSAML2SPMetadata();\n         }\n         assertNotNull(metadataTO);\n         metadataTO.setMetadata(\"new-metadata\");\n         metadataTO.setOwner(\"Syncope4\");\n \n-        saml2SPMetadataConfService.update(metadataTO);\n-        metadataTO = saml2SPMetadataService.read(metadataTO.getKey());\n+        saml2SPMetadataService.update(metadataTO);\n+        metadataTO = waSAML2SPMetadataService.read(metadataTO.getKey());\n         assertNotNull(metadataTO);\n         assertEquals(\"new-metadata\", metadataTO.getMetadata());\n         assertEquals(\"Syncope4\", metadataTO.getOwner());\n     }\n-\n }"},{"sha":"33a561a84a36d15b6211cff35eb12fb37b7f11b0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SRARouteITCase.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSRARouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSRARouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSRARouteITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -43,12 +43,12 @@ public class SRARouteITCase extends AbstractITCase {\n \n     @Test\n     public void read() {\n-        SRARouteTO route = gatewayRouteService.read(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+        SRARouteTO route = sraRouteService.read(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n         assertNotNull(route);\n         assertEquals(1, route.getPredicates().size());\n \n         try {\n-            gatewayRouteService.read(UUID.randomUUID().toString());\n+            sraRouteService.read(UUID.randomUUID().toString());\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n@@ -57,7 +57,7 @@ public void read() {\n \n     @Test\n     public void findAll() {\n-        List<SRARouteTO> routes = gatewayRouteService.list();\n+        List<SRARouteTO> routes = sraRouteService.list();\n         assertNotNull(routes);\n         assertFalse(routes.isEmpty());\n     }\n@@ -72,68 +72,68 @@ public void createUpdateDelete() {\n         route.getFilters().add(new SRARouteFilter.Builder().\n                 factory(SRARouteFilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build());\n \n-        int beforeCount = gatewayRouteService.list().size();\n+        int beforeCount = sraRouteService.list().size();\n \n-        Response response = gatewayRouteService.create(route);\n+        Response response = sraRouteService.create(route);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n         route = getObject(response.getLocation(), SRARouteService.class, SRARouteTO.class);\n         assertNotNull(route);\n         assertNotNull(route.getKey());\n \n-        int afterCount = gatewayRouteService.list().size();\n+        int afterCount = sraRouteService.list().size();\n         assertEquals(afterCount, beforeCount + 1);\n \n-        gatewayRouteService.delete(route.getKey());\n+        sraRouteService.delete(route.getKey());\n \n         try {\n-            gatewayRouteService.read(route.getKey());\n+            sraRouteService.read(route.getKey());\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n \n-        int endCount = gatewayRouteService.list().size();\n+        int endCount = sraRouteService.list().size();\n         assertEquals(endCount, beforeCount);\n     }\n \n     @Test\n     public void exceptions() {\n         SRARouteTO route = new SRARouteTO();\n         try {\n-            gatewayRouteService.create(route);\n+            sraRouteService.create(route);\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n         route.setName(\"createException\");\n         try {\n-            gatewayRouteService.create(route);\n+            sraRouteService.create(route);\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n         route.setTarget(URI.create(\"http://httpbin.org:80\"));\n-        Response response = gatewayRouteService.create(route);\n+        Response response = sraRouteService.create(route);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n \n         try {\n-            gatewayRouteService.create(route);\n+            sraRouteService.create(route);\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.EntityExists, e.getType());\n         }\n \n         route.setKey(UUID.randomUUID().toString());\n         try {\n-            gatewayRouteService.update(route);\n+            sraRouteService.update(route);\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n         try {\n-            gatewayRouteService.delete(route.getKey());\n+            sraRouteService.delete(route.getKey());\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.NotFound, e.getType());"},{"sha":"81f99a73cb852f76003173d307abb4da69dfd1dd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WAClientAppITCase.java","status":"modified","additions":9,"deletions":16,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWAClientAppITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -97,15 +97,11 @@ public void read() {\n     public void readWithPolicies() {\n         OIDCRPTO oidcrpto = buildOIDCRP();\n \n-        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH,\n-                buildAuthPolicyTO(\"be456831-593d-4003-b273-4c3fb61700df\"));\n+        AuthPolicyTO authPolicyTO = createPolicy(PolicyType.AUTH, buildAuthPolicyTO(\"DefaultLDAPAuthModule\"));\n \n-        AccessPolicyTO accessPolicyTO = createPolicy(PolicyType.ACCESS,\n-                buildAccessPolicyTO());\n+        AccessPolicyTO accessPolicyTO = createPolicy(PolicyType.ACCESS, buildAccessPolicyTO());\n \n-        String policyName = \"TestAttrReleasePolicy\" + getUUIDString();\n-        AttrReleasePolicyTO attrReleasePolicyTO = createPolicy(PolicyType.ATTR_RELEASE,\n-                buildAttributeReleasePolicyTO(policyName));\n+        AttrReleasePolicyTO attrReleasePolicyTO = createPolicy(PolicyType.ATTR_RELEASE, buildAttrReleasePolicyTO());\n \n         oidcrpto.setAuthPolicy(authPolicyTO.getKey());\n         oidcrpto.setAccessPolicy(accessPolicyTO.getKey());\n@@ -115,23 +111,20 @@ public void readWithPolicies() {\n \n         WAClientApp waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), null);\n         assertNotNull(waClientApp);\n-        assertEquals(\"TestAuthConf\", waClientApp.getAuthPolicyConf().getName());\n-        assertEquals(\"TestAccessPolicyConf\", waClientApp.getAccessPolicyConf().getName());\n-        assertEquals(\"MyDefaultAttrReleasePolicyConf\", waClientApp.getAttrReleasePolicyConf().getName());\n         assertTrue(waClientApp.getReleaseAttrs().isEmpty());\n \n         // add items to the authentication module\n         addItems();\n         waClientApp = waClientAppService.read(oidcrpto.getClientAppId(), null);\n         assertNotNull(waClientApp);\n         assertFalse(waClientApp.getReleaseAttrs().isEmpty());\n-        assertEquals(\"uid\", waClientApp.getReleaseAttrs().get(\"username\"));\n-        assertEquals(\"cn\", waClientApp.getReleaseAttrs().get(\"fullname\"));\n+        assertEquals(\"username\", waClientApp.getReleaseAttrs().get(\"uid\"));\n+        assertEquals(\"fullname\", waClientApp.getReleaseAttrs().get(\"cn\"));\n         removeItems();\n     }\n \n     private void addItems() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n \n         ItemTO keyMapping = new ItemTO();\n         keyMapping.setIntAttrName(\"uid\");\n@@ -145,17 +138,17 @@ private void addItems() {\n \n         authModuleService.update(authModuleTO);\n \n-        authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n         assertFalse(authModuleTO.getItems().isEmpty());\n     }\n \n     private void removeItems() {\n-        AuthModuleTO authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        AuthModuleTO authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n         authModuleTO.getItems().clear();\n \n         authModuleService.update(authModuleTO);\n \n-        authModuleTO = authModuleService.read(\"be456831-593d-4003-b273-4c3fb61700df\");\n+        authModuleTO = authModuleService.read(\"DefaultLDAPAuthModule\");\n         assertTrue(authModuleTO.getItems().isEmpty());\n     }\n }"},{"sha":"abab00d364f2935555a231078ac614fd2bb4bcd1","filename":"fit/core-reference/src/test/resources/logic.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flogic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flogic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flogic.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","previous_filename":"fit/core-reference/src/main/resources/logic.properties"},{"sha":"b609cbd0bf51090e4dfa70950148af69d0fb607d","filename":"fit/wa-reference/pom.xml","status":"modified","additions":72,"deletions":14,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fpom.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -55,6 +55,12 @@ under the License.\n     </dependency>\n \n     <!-- TEST -->\n+    <dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-sra</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>com.h2database</groupId>\n       <artifactId>h2</artifactId>\n@@ -88,6 +94,11 @@ under the License.\n       <type>war</type>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.awaitility</groupId>\n+      <artifactId>awaitility</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.junit.jupiter</groupId>\n       <artifactId>junit-jupiter</artifactId>\n@@ -122,7 +133,7 @@ under the License.\n           <configuration>\n             <properties>\n               <cargo.jvmargs>\n-                -Dspring.profiles.active=embedded\n+                -Dspring.profiles.active=embedded \n                 -XX:+CMSClassUnloadingEnabled -Xmx1024m -Xms512m</cargo.jvmargs>\n             </properties>\n           </configuration>\n@@ -136,25 +147,31 @@ under the License.\n               </properties>\n             </deployable>\n             <deployable>\n-              <location>${basedir}/../core-reference/target/syncope-fit-core-reference-${project.version}</location>\n+              <groupId>org.apache.syncope.fit</groupId>\n+              <artifactId>syncope-fit-core-reference</artifactId>\n+              <type>war</type>\n               <pingURL>http://localhost:${cargo.servlet.port}/syncope/index.html</pingURL>\n               <pingTimeout>${cargo.deployable.ping.timeout}</pingTimeout>\n               <properties>\n                 <context>syncope</context>\n               </properties>\n             </deployable>\n-<!--            <deployable>-->\n-<!--              <location>${basedir}/../console-reference/target/syncope-fit-console-reference-${project.version}</location>-->\n-<!--              <properties>-->\n-<!--                <context>syncope-console</context>-->\n-<!--              </properties>-->\n-<!--            </deployable>-->\n-<!--            <deployable>-->\n-<!--              <location>${basedir}/../enduser-reference/target/syncope-fit-enduser-reference-${project.version}</location>-->\n-<!--              <properties>-->\n-<!--                <context>syncope-enduser</context>-->\n-<!--              </properties>-->\n-<!--            </deployable>-->\n+            <deployable>\n+              <groupId>org.apache.syncope.fit</groupId>\n+              <artifactId>syncope-fit-console-reference</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>syncope-console</context>\n+              </properties>\n+            </deployable>\n+            <deployable>\n+              <groupId>org.apache.syncope.fit</groupId>\n+              <artifactId>syncope-fit-enduser-reference</artifactId>\n+              <type>war</type>\n+              <properties>\n+                <context>syncope-enduser</context>\n+              </properties>\n+            </deployable>\n             <deployable>\n               <location>${project.build.directory}/${project.build.finalName}</location>\n               <properties>\n@@ -163,8 +180,49 @@ under the License.\n             </deployable>\n           </deployables>\n         </configuration>\n+        <executions>\n+          <execution>\n+            <id>start-container</id>\n+            <phase>pre-integration-test</phase>\n+            <goals>\n+              <goal>start</goal>\n+            </goals>\n+            <configuration>\n+              <skip>${skipTests}</skip>\n+            </configuration>\n+          </execution>\n+          <execution>\n+            <id>stop-container</id>\n+            <phase>post-integration-test</phase>\n+            <goals>\n+              <goal>stop</goal>\n+            </goals>\n+            <configuration>\n+              <skip>${skipTests}</skip>\n+            </configuration>\n+          </execution>\n+        </executions>\n       </plugin>\n       \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <inherited>true</inherited>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-failsafe-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>verify</id>\n+            <goals>\n+              <goal>verify</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>"},{"sha":"45979c0b6d7642cc9ecce669bf6ea0d6e3909e98","filename":"fit/wa-reference/src/main/resources/log4j2.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -44,6 +44,10 @@ under the License.\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n \n+    <asyncLogger name=\"org.pac4j\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n     <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>"},{"sha":"fc6e2ca95c13052b40a219a7d2a5949fb7db5b1a","filename":"fit/wa-reference/src/main/resources/wa.properties","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,18 +22,20 @@ useGZIPCompression=true\n # Conf directories\n conf.directory=${conf.directory}\n cas.standalone.configurationDirectory=${conf.directory}\n-cas.authn.oidc.jwks.jwks-file=file:${conf.directory}/oidc.keystore\n \n cas.server.name=http://localhost:9080\n cas.server.prefix=${cas.server.name}/syncope-wa\n cas.server.scope=syncope.org\n+cas.authn.syncope.url=http://localhost:9080/syncope/rest/\n+\n+cas.tgc.secure=false\n+cas.logout.follow-service-redirects=true\n \n cas.authn.saml-idp.entity-id=https://syncope.apache.org/saml\n \n cas.authn.oidc.issuer=http://localhost:9080/syncope-wa/oidc/\n-\n-cas.authn.syncope.url=http://localhost:9080/syncope\n-cas.tgc.secure=false\n+cas.authn.oidc.id-token-signing-alg-values-supported=RS256,RS384,RS512,PS256,PS384,PS512,ES256,ES384,ES512,HS256,HS384,HS512\n+cas.authn.oidc.user-info-signing-alg-values-supported=RS256,RS384,RS512,PS256,PS384,PS512,ES256,ES384,ES512,HS256,HS384,HS512\n \n # Disable access to the login endpoint\n # if no target application is specified."},{"sha":"3a76feeac869e2e0337f869dbf626ace3f37a3e5","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/AbstractITCase.java","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FAbstractITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,319 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.sra;\n+\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.ConnectException;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.auth.SyncopeAuthModuleConf;\n+import org.apache.syncope.common.lib.policy.AuthPolicyTO;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.to.AuthModuleTO;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARouteFilterFactory;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateFactory;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AuthModuleService;\n+import org.apache.syncope.common.rest.api.service.ClientAppService;\n+import org.apache.syncope.common.rest.api.service.PolicyService;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractITCase {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractITCase.class);\n+\n+    protected static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    protected static final String EN_LANGUAGE = \"en-US,en;q=0.5\";\n+\n+    protected static final int PORT = 8080;\n+\n+    protected static final String ADMIN_UNAME = \"admin\";\n+\n+    protected static final String ADMIN_PWD = \"password\";\n+\n+    protected static final String CORE_ADDRESS = \"http://localhost:9080/syncope/rest\";\n+\n+    protected static final String WA_ADDRESS = \"http://localhost:9080/syncope-wa\";\n+\n+    protected static final String SRA_ADDRESS = \"http://localhost:\" + PORT;\n+\n+    protected static final String LOGGED_OUT_HEADER = \"X-LOGGED-OUT\";\n+\n+    protected static SyncopeClientFactoryBean clientFactory;\n+\n+    protected static SyncopeClient adminClient;\n+\n+    protected static AuthModuleService authModuleService;\n+\n+    protected static PolicyService policyService;\n+\n+    protected static ClientAppService clientAppService;\n+\n+    protected static SRARouteService sraRouteService;\n+\n+    private static Process SRA;\n+\n+    @BeforeAll\n+    public static void restSetup() {\n+        clientFactory = new SyncopeClientFactoryBean().setAddress(CORE_ADDRESS);\n+        adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+\n+        authModuleService = adminClient.getService(AuthModuleService.class);\n+        policyService = adminClient.getService(PolicyService.class);\n+        clientAppService = adminClient.getService(ClientAppService.class);\n+        sraRouteService = adminClient.getService(SRARouteService.class);\n+\n+    }\n+\n+    @BeforeAll\n+    public static void waitForWARefresh() {\n+        WASAML2IdPMetadataService samlIdPMetadataService = adminClient.getService(WASAML2IdPMetadataService.class);\n+\n+        await().atMost(50, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n+            boolean refreshed = false;\n+            try {\n+                samlIdPMetadataService.getByOwner(\"Syncope\");\n+                refreshed = true;\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+            return refreshed;\n+        });\n+    }\n+\n+    @BeforeAll\n+    public static void sraRouteSetup() {\n+        sraRouteService.list().forEach(route -> sraRouteService.delete(route.getKey()));\n+\n+        SRARouteTO publicRoute = new SRARouteTO();\n+        publicRoute.setName(\"public\");\n+        publicRoute.setTarget(URI.create(\"http://httpbin.org:80\"));\n+        publicRoute.setType(SRARouteType.PUBLIC);\n+        publicRoute.setCsrf(false);\n+        publicRoute.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/public/{segment}\").build());\n+        publicRoute.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SET_PATH).args(\"/{segment}\").build());\n+\n+        Response response = sraRouteService.create(publicRoute);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            fail(\"Could not create public SRA Route\");\n+        }\n+\n+        SRARouteTO protectedRoute = new SRARouteTO();\n+        protectedRoute.setName(\"protected\");\n+        protectedRoute.setTarget(URI.create(\"http://httpbin.org:80\"));\n+        protectedRoute.setType(SRARouteType.PROTECTED);\n+        protectedRoute.setCsrf(false);\n+        protectedRoute.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/protected/{segment}\").build());\n+        protectedRoute.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SET_PATH).args(\"/{segment}\").build());\n+\n+        response = sraRouteService.create(protectedRoute);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            fail(\"Could not create protected SRA Route\");\n+        }\n+\n+        SRARouteTO logoutRoute = new SRARouteTO();\n+        logoutRoute.setName(\"logout\");\n+        logoutRoute.setTarget(URI.create(\"http://httpbin.org:80\"));\n+        logoutRoute.setType(SRARouteType.PROTECTED);\n+        logoutRoute.setLogout(true);\n+        logoutRoute.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/protected/logout\").build());\n+        logoutRoute.setOrder(-1);\n+\n+        response = sraRouteService.create(logoutRoute);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            fail(\"Could not create logout SRA Route\");\n+        }\n+\n+        SRARouteTO postLogout = new SRARouteTO();\n+        postLogout.setName(\"postLogout\");\n+        postLogout.setTarget(URI.create(\"http://httpbin.org:80\"));\n+        postLogout.setType(SRARouteType.PUBLIC);\n+        postLogout.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/logout\").build());\n+        postLogout.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SET_STATUS).args(\"204\").build());\n+        postLogout.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SET_RESPONSE_HEADER).args(LOGGED_OUT_HEADER + \", true\").build());\n+        postLogout.setOrder(-10);\n+\n+        response = sraRouteService.create(postLogout);\n+        if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+            fail(\"Could not create logout SRA Route\");\n+        }\n+    }\n+\n+    protected static void oidcClientAppSetup(\n+            final String appName,\n+            final String sraRegistrationId,\n+            final Long clientAppId,\n+            final String clientId,\n+            final String clientSecret) {\n+\n+        AuthModuleTO syncopeAuthModule = authModuleService.list().stream().\n+                filter(module -> module.getConf() instanceof SyncopeAuthModuleConf).\n+                findFirst().orElseThrow(() -> new IllegalArgumentException(\"Could not find Syncope Auth Module\"));\n+\n+        AuthPolicyTO syncopeAuthPolicy = policyService.list(PolicyType.AUTH).stream().\n+                map(AuthPolicyTO.class::cast).\n+                filter(policy -> policy.getConf() instanceof DefaultAuthPolicyConf\n+                && ((DefaultAuthPolicyConf) policy.getConf()).getAuthModules().contains(syncopeAuthModule.getKey())).\n+                findFirst().\n+                orElseGet(() -> {\n+                    DefaultAuthPolicyConf policyConf = new DefaultAuthPolicyConf();\n+                    policyConf.getAuthModules().add(syncopeAuthModule.getKey());\n+\n+                    AuthPolicyTO policy = new AuthPolicyTO();\n+                    policy.setDescription(\"Syncope authentication\");\n+                    policy.setConf(policyConf);\n+\n+                    Response response = policyService.create(PolicyType.AUTH, policy);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create Syncope Auth Policy\");\n+                    }\n+\n+                    return policyService.read(PolicyType.AUTH, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+\n+        OIDCRPTO clientApp = clientAppService.list(ClientAppType.OIDCRP).stream().\n+                filter(app -> appName.equals(app.getName())).\n+                map(OIDCRPTO.class::cast).\n+                findFirst().\n+                orElseGet(() -> {\n+                    OIDCRPTO app = new OIDCRPTO();\n+                    app.setName(appName);\n+                    app.setClientAppId(clientAppId);\n+                    app.setClientId(clientId);\n+                    app.setClientSecret(clientSecret);\n+\n+                    Response response = clientAppService.create(ClientAppType.OIDCRP, app);\n+                    if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n+                        fail(\"Could not create OIDC Client App\");\n+                    }\n+\n+                    return clientAppService.read(\n+                            ClientAppType.OIDCRP, response.getHeaderString(RESTHeaders.RESOURCE_KEY));\n+                });\n+\n+        clientApp.setClientId(clientId);\n+        clientApp.setClientSecret(clientSecret);\n+        clientApp.setSubjectType(OIDCSubjectType.PUBLIC);\n+        clientApp.getRedirectUris().add(SRA_ADDRESS + \"/login/oauth2/code/\" + sraRegistrationId);\n+        clientApp.setAuthPolicy(syncopeAuthPolicy.getKey());\n+        clientApp.setSignIdToken(true);\n+        clientApp.setLogoutUri(SRA_ADDRESS + \"/logout\");\n+\n+        clientAppService.update(ClientAppType.OIDCRP, clientApp);\n+        clientAppService.pushToWA();\n+    }\n+\n+    protected static void doStartSRA(final String activeProfile)\n+            throws IOException, InterruptedException, TimeoutException {\n+\n+        Properties props = new Properties();\n+        try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/test.properties\")) {\n+            props.load(propStream);\n+        } catch (Exception e) {\n+            fail(\"Could not load /test.properties\", e);\n+        }\n+\n+        String javaHome = props.getProperty(\"java.home\");\n+        assertNotNull(javaHome);\n+\n+        String sraJar = props.getProperty(\"sra.jar\");\n+        assertNotNull(sraJar);\n+\n+        String keymasterApiJar = props.getProperty(\"keymaster-api.jar\");\n+        assertNotNull(keymasterApiJar);\n+\n+        String keymasterClientJar = props.getProperty(\"keymaster-client.jar\");\n+        assertNotNull(keymasterClientJar);\n+\n+        String targetTestClasses = props.getProperty(\"targetTestClasses\");\n+        assertNotNull(targetTestClasses);\n+\n+        ProcessBuilder processBuilder = new ProcessBuilder(\n+                javaHome + \"/bin/java\",\n+                \"-Dreactor.netty.http.server.accessLogEnabled=true\",\n+                \"-jar\", sraJar);\n+        processBuilder.inheritIO();\n+\n+        Map<String, String> environment = processBuilder.environment();\n+        environment.put(\"LOADER_PATH\", targetTestClasses + \",\" + keymasterApiJar + \",\" + keymasterClientJar);\n+        environment.put(\"SPRING_PROFILES_ACTIVE\", activeProfile);\n+\n+        SRA = processBuilder.start();\n+\n+        await().atMost(30, TimeUnit.SECONDS).pollInterval(3, TimeUnit.SECONDS).until(() -> {\n+            boolean connected = false;\n+            try (Socket socket = new Socket()) {\n+                socket.connect(new InetSocketAddress(\"0.0.0.0\", PORT));\n+                connected = socket.isConnected();\n+            } catch (ConnectException e) {\n+                // ignore\n+            }\n+            return connected;\n+        });\n+        assertTrue(WebClient.create(SRA_ADDRESS).get().getStatus() < 400);\n+\n+        sraRouteService.pushToSRA();\n+    }\n+\n+    @AfterAll\n+    public static void stopSRA() throws InterruptedException {\n+        if (SRA != null) {\n+            SRA.destroy();\n+            SRA.waitFor();\n+        }\n+    }\n+}"},{"sha":"a1288a47a5fd396c44b35fa0fef6ea20479abcc3","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OAUTH2SRAITCase.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOAUTH2SRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOAUTH2SRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOAUTH2SRAITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.sra;\n+\n+import static org.apache.syncope.fit.sra.AbstractITCase.doStartSRA;\n+import static org.apache.syncope.fit.sra.AbstractITCase.oidcClientAppSetup;\n+import static org.apache.syncope.fit.sra.OIDCSRAITCase.CLIENT_ID;\n+import static org.apache.syncope.fit.sra.OIDCSRAITCase.CLIENT_SECRET;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.invoke.MethodHandles;\n+import java.text.ParseException;\n+import java.util.Properties;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+public class OAUTH2SRAITCase extends OIDCSRAITCase {\n+\n+    @BeforeAll\n+    public static void startSRA() throws IOException, InterruptedException, TimeoutException {\n+        assumeTrue(OAUTH2SRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n+\n+        doStartSRA(\"oauth2\");\n+    }\n+\n+    @BeforeAll\n+    public static void clientAppSetup() {\n+        assumeTrue(OAUTH2SRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n+\n+        Properties props = new Properties();\n+        try (InputStream propStream = OAUTH2SRAITCase.class.getResourceAsStream(\"/application-oauth2.properties\")) {\n+            props.load(propStream);\n+        } catch (Exception e) {\n+            fail(\"Could not load /application-oauth2.properties\", e);\n+        }\n+        CLIENT_ID = props.getProperty(\"am.oauth2.client.id\");\n+        assertNotNull(CLIENT_ID);\n+        CLIENT_SECRET = props.getProperty(\"am.oauth2.client.secret\");\n+        assertNotNull(CLIENT_SECRET);\n+        TOKEN_URI = props.getProperty(\"am.oauth2.tokenUri\");\n+        assertNotNull(TOKEN_URI);\n+\n+        oidcClientAppSetup(OAUTH2SRAITCase.class.getName(), \"OAUTH2\", 2L, CLIENT_ID, CLIENT_SECRET);\n+    }\n+\n+    @Override\n+    protected void checkLogout(final CloseableHttpResponse response) {\n+        assertEquals(HttpStatus.SC_NOT_FOUND, response.getStatusLine().getStatusCode());\n+    }\n+\n+    @Override\n+    protected void checkIdToken(final JsonNode json) throws ParseException {\n+        assertFalse(json.has(\"id_token\"));\n+    }\n+}"},{"sha":"079a13bf71b95449fc18d992a635c4c9c8fd0bad","filename":"fit/wa-reference/src/test/java/org/apache/syncope/fit/sra/OIDCSRAITCase.java","status":"added","additions":294,"deletions":0,"changes":294,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fsra%2FOIDCSRAITCase.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,294 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.sra;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.SignedJWT;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.invoke.MethodHandles;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.TimeoutException;\n+import javax.ws.rs.core.Form;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.http.Consts;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.client.BasicCookieStore;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+public class OIDCSRAITCase extends AbstractITCase {\n+\n+    protected static String CLIENT_ID;\n+\n+    protected static String CLIENT_SECRET;\n+\n+    protected static String TOKEN_URI;\n+\n+    @BeforeAll\n+    public static void startSRA() throws IOException, InterruptedException, TimeoutException {\n+        assumeTrue(OIDCSRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n+\n+        doStartSRA(\"oidc\");\n+    }\n+\n+    @BeforeAll\n+    public static void clientAppSetup() {\n+        assumeTrue(OIDCSRAITCase.class.equals(MethodHandles.lookup().lookupClass()));\n+\n+        Properties props = new Properties();\n+        try (InputStream propStream = OIDCSRAITCase.class.getResourceAsStream(\"/application-oidc.properties\")) {\n+            props.load(propStream);\n+        } catch (Exception e) {\n+            fail(\"Could not load /application-oidc.properties\", e);\n+        }\n+        CLIENT_ID = props.getProperty(\"am.oidc.client.id\");\n+        assertNotNull(CLIENT_ID);\n+        CLIENT_SECRET = props.getProperty(\"am.oidc.client.secret\");\n+        assertNotNull(CLIENT_SECRET);\n+        TOKEN_URI = WA_ADDRESS + \"/oidc/accessToken\";\n+\n+        oidcClientAppSetup(OIDCSRAITCase.class.getName(), \"OIDC\", 1L, CLIENT_ID, CLIENT_SECRET);\n+    }\n+\n+    private ObjectNode checkResponse(final CloseableHttpResponse response, final String originalRequestURI)\n+            throws IOException {\n+\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        assertEquals(MediaType.APPLICATION_JSON, response.getFirstHeader(HttpHeaders.CONTENT_TYPE).getValue());\n+\n+        JsonNode json = OBJECT_MAPPER.readTree(EntityUtils.toString(response.getEntity()));\n+\n+        ObjectNode args = (ObjectNode) json.get(\"args\");\n+        assertEquals(\"value1\", args.get(\"key1\").asText());\n+\n+        ArrayNode key2 = (ArrayNode) args.get(\"key2\");\n+        assertEquals(\"value2\", key2.get(0).asText());\n+        assertEquals(\"value3\", key2.get(1).asText());\n+\n+        ObjectNode headers = (ObjectNode) json.get(\"headers\");\n+        assertEquals(MediaType.TEXT_HTML, headers.get(HttpHeaders.ACCEPT).asText());\n+        assertEquals(EN_LANGUAGE, headers.get(HttpHeaders.ACCEPT_LANGUAGE).asText());\n+        assertEquals(\"localhost:\" + PORT, headers.get(\"X-Forwarded-Host\").asText());\n+\n+        assertEquals(originalRequestURI, json.get(\"url\").asText());\n+\n+        return headers;\n+    }\n+\n+    protected void checkLogout(final CloseableHttpResponse response) {\n+        assertEquals(HttpStatus.SC_NO_CONTENT, response.getStatusLine().getStatusCode());\n+        assertEquals(\"true\", response.getFirstHeader(LOGGED_OUT_HEADER).getValue());\n+    }\n+\n+    @Test\n+    public void web() throws IOException {\n+        CloseableHttpClient httpclient = HttpClients.createDefault();\n+        HttpClientContext context = HttpClientContext.create();\n+        context.setCookieStore(new BasicCookieStore());\n+\n+        // 1. public\n+        HttpGet get = new HttpGet(SRA_ADDRESS + \"/public/get?key1=value1&key2=value2&key2=value3\");\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        CloseableHttpResponse response = httpclient.execute(get, context);\n+\n+        ObjectNode headers = checkResponse(response, get.getURI().toASCIIString().replace(\"/public\", \"\"));\n+        assertFalse(headers.has(HttpHeaders.COOKIE));\n+\n+        // 2. protected\n+        get = new HttpGet(SRA_ADDRESS + \"/protected/get?key1=value1&key2=value2&key2=value3\");\n+        String originalRequestURI = get.getURI().toASCIIString();\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        // 2a. redirected to WA login screen\n+        String responseBody = EntityUtils.toString(response.getEntity());\n+        int begin = responseBody.indexOf(\"name=\\\"execution\\\" value=\\\"\");\n+        assertNotEquals(-1, begin);\n+        int end = responseBody.indexOf(\"\\\"/><input type=\\\"hidden\\\" name=\\\"_eventId\\\"\");\n+        assertNotEquals(-1, end);\n+\n+        String execution = responseBody.substring(begin + 24, end);\n+        assertNotNull(execution);\n+\n+        List<NameValuePair> form = new ArrayList<>();\n+        form.add(new BasicNameValuePair(\"_eventId\", \"submit\"));\n+        form.add(new BasicNameValuePair(\"execution\", execution));\n+        form.add(new BasicNameValuePair(\"username\", \"bellini\"));\n+        form.add(new BasicNameValuePair(\"password\", \"password\"));\n+        form.add(new BasicNameValuePair(\"geolocation\", \"\"));\n+\n+        HttpPost post = new HttpPost(WA_ADDRESS + \"/login\");\n+        post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n+        response = httpclient.execute(post, context);\n+\n+        // 2b. WA attribute consent screen\n+        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n+            responseBody = EntityUtils.toString(response.getEntity());\n+            begin = responseBody.indexOf(\"name=\\\"execution\\\" value=\\\"\");\n+            assertNotEquals(-1, begin);\n+            end = responseBody.indexOf(\"\\\"/><input type=\\\"hidden\\\" name=\\\"_eventId\\\"\");\n+            assertNotEquals(-1, end);\n+\n+            execution = responseBody.substring(begin + 24, end);\n+            assertNotNull(execution);\n+\n+            form = new ArrayList<>();\n+            form.add(new BasicNameValuePair(\"_eventId\", \"confirm\"));\n+            form.add(new BasicNameValuePair(\"execution\", execution));\n+            form.add(new BasicNameValuePair(\"option\", \"1\"));\n+            form.add(new BasicNameValuePair(\"reminder\", \"30\"));\n+            form.add(new BasicNameValuePair(\"reminderTimeUnit\", \"days\"));\n+\n+            post = new HttpPost(WA_ADDRESS + \"/login\");\n+            post.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+            post.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+            post.setEntity(new UrlEncodedFormEntity(form, Consts.UTF_8));\n+            response = httpclient.execute(post, context);\n+        }\n+        assertEquals(HttpStatus.SC_MOVED_TEMPORARILY, response.getStatusLine().getStatusCode());\n+\n+        // 2c. WA scope consent screen\n+        get = new HttpGet(response.getLastHeader(HttpHeaders.LOCATION).getValue());\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n+\n+        responseBody = EntityUtils.toString(response.getEntity());\n+\n+        begin = responseBody.indexOf(\"name=\\\"allow\\\"\");\n+        assertNotEquals(-1, begin);\n+        begin = responseBody.indexOf(\"href=\\\"\", begin);\n+        assertNotEquals(-1, begin);\n+        end = responseBody.indexOf(\"\\\">\", begin);\n+        assertNotEquals(-1, end);\n+\n+        String allow = responseBody.substring(begin + 6, end).replace(\"&amp;\", \"&\");\n+        assertNotNull(allow);\n+\n+        // 2d. finally get requested content\n+        get = new HttpGet(allow);\n+        get.addHeader(HttpHeaders.ACCEPT, MediaType.TEXT_HTML);\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+\n+        headers = checkResponse(response, originalRequestURI.replace(\"/protected\", \"\"));\n+        assertTrue(headers.get(HttpHeaders.COOKIE).asText().contains(\"pac4jCsrfToken\"));\n+\n+        // 3. logout\n+        get = new HttpGet(SRA_ADDRESS + \"/protected/logout\");\n+        get.addHeader(HttpHeaders.ACCEPT_LANGUAGE, EN_LANGUAGE);\n+        response = httpclient.execute(get, context);\n+        checkLogout(response);\n+    }\n+\n+    protected void checkIdToken(final JsonNode json) throws ParseException {\n+        SignedJWT idToken = SignedJWT.parse(json.get(\"id_token\").asText());\n+        assertNotNull(idToken);\n+        JWTClaimsSet idTokenClaimsSet = idToken.getJWTClaimsSet();\n+        assertEquals(\"verdi\", idTokenClaimsSet.getStringClaim(\"preferred_username\"));\n+        assertEquals(\"verdi@syncope.org\", idTokenClaimsSet.getStringClaim(\"email\"));\n+        assertEquals(\"Verdi\", idTokenClaimsSet.getStringClaim(\"family_name\"));\n+        assertEquals(\"Giuseppe\", idTokenClaimsSet.getStringClaim(\"given_name\"));\n+        assertEquals(\"Giuseppe Verdi\", idTokenClaimsSet.getStringClaim(\"name\"));\n+        assertEquals(Set.of(\"root\", \"child\", \"citizen\"), Set.of(idTokenClaimsSet.getStringArrayClaim(\"groups\")));\n+    }\n+\n+    @Test\n+    public void rest() throws IOException, ParseException {\n+        // 0. access public route\n+        WebClient client = WebClient.create(SRA_ADDRESS + \"/public/post\").\n+                accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON);\n+        Response response = client.post(null);\n+        assertEquals(HttpStatus.SC_OK, response.getStatus());\n+\n+        // 1. obtain id and access tokens\n+        Form form = new Form().\n+                param(\"grant_type\", \"password\").\n+                param(\"client_id\", CLIENT_ID).\n+                param(\"client_secret\", CLIENT_SECRET).\n+                param(\"username\", \"verdi\").\n+                param(\"password\", \"password\").\n+                param(\"scope\", \"openid profile email address phone offline_access syncope\");\n+        response = WebClient.create(TOKEN_URI).post(form);\n+        assertEquals(HttpStatus.SC_OK, response.getStatus());\n+        assertTrue(response.getHeaderString(HttpHeaders.CONTENT_TYPE).startsWith(MediaType.APPLICATION_JSON));\n+\n+        JsonNode json = OBJECT_MAPPER.readTree(response.readEntity(String.class));\n+\n+        // 1a. verify id_token\n+        checkIdToken(json);\n+\n+        // 1b. take access_token\n+        String accessToken = json.get(\"access_token\").asText();\n+        assertNotNull(accessToken);\n+\n+        // 2. access protected route\n+        client = WebClient.create(SRA_ADDRESS + \"/protected/post\").\n+                authorization(\"Bearer \" + accessToken).\n+                accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON);\n+        response = client.post(null);\n+\n+        assertEquals(HttpStatus.SC_OK, response.getStatus());\n+\n+        json = OBJECT_MAPPER.readTree(response.readEntity(String.class));\n+\n+        ObjectNode headers = (ObjectNode) json.get(\"headers\");\n+        assertEquals(MediaType.APPLICATION_JSON, headers.get(HttpHeaders.ACCEPT).asText());\n+        assertEquals(MediaType.APPLICATION_JSON, headers.get(HttpHeaders.CONTENT_TYPE).asText());\n+        assertEquals(\"localhost:\" + PORT, headers.get(\"X-Forwarded-Host\").asText());\n+\n+        assertEquals(client.getBaseURI().toASCIIString().replace(\"/protected\", \"\"), json.get(\"url\").asText());\n+    }\n+}"},{"sha":"eb8df4771daa4bb4af0b55f27ce9b6a6b5d6163d","filename":"fit/wa-reference/src/test/resources/application-oauth2.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-oauth2.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-oauth2.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-oauth2.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+am.type=OAUTH2\n+am.oauth2.tokenUri=http://localhost:9080/syncope-wa/oauth2.0/accessToken\n+am.oauth2.authorizationUri=http://localhost:9080/syncope-wa/oauth2.0/authorize\n+am.oauth2.userInfoUri=http://localhost:9080/syncope-wa/oauth2.0/profile\n+am.oauth2.userNameAttributeName=id\n+am.oauth2.scopes=\n+am.oauth2.jwkSetUri=\n+am.oauth2.issuer=http://localhost:9080/syncope-wa\n+am.oauth2.client.id=oauth2TestClientId\n+am.oauth2.client.secret=oauth2TestClientSecret\n+\n+global.postLogout=http://localhost:8080/logout"},{"sha":"44bac5ccb8f0b8aa045b09f199a76279a158823d","filename":"fit/wa-reference/src/test/resources/application-oidc.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-oidc.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-oidc.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fapplication-oidc.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+am.type=OIDC\n+am.oidc.configuration=http://localhost:9080/syncope-wa/oidc/\n+am.oidc.client.id=oidcTestClientId\n+am.oidc.client.secret=oidcTestClientSecret\n+\n+global.postLogout=http://localhost:8080/logout"},{"sha":"033fe3b8cdc122c28c9d2c96c62b4aaeab664fc4","filename":"fit/wa-reference/src/test/resources/keymaster.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Fkeymaster.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","previous_filename":"wa/starter/src/test/resources/dev/keymaster.properties"},{"sha":"0d20b7e3ae8549f38730dfcb7729187b04c90448","filename":"fit/wa-reference/src/test/resources/log4j2.xml","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<configuration status=\"WARN\" shutdownHook=\"disable\">\n+  <appenders>\n+    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/wa-fit.log\"\n+                             filePattern=\"${log.directory}/wa-fit-%d{yyyy-MM-dd}.log.gz\"\n+                             immediateFlush=\"false\" append=\"true\">\n+      <PatternLayout>\n+        <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n+      </PatternLayout>\n+      <Policies>\n+        <TimeBasedTriggeringPolicy/>\n+        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n+      </Policies>\n+    </RollingRandomAccessFile>\n+  </appenders>\n+\n+  <loggers>\n+    <asyncLogger name=\"org.apache.syncope.fit\" additivity=\"false\" level=\"DEBUG\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    \n+    <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.apache.http\" additivity=\"false\" level=\"DEBUG\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"io.netty\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"reactor.netty\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"reactor.netty.http.server.AccessLog\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.hibernate.validator\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <root level=\"DEBUG\">\n+      <appenderRef ref=\"main\"/>\n+    </root>\n+  </loggers>\n+</configuration>"},{"sha":"44f0b1a0a25d40359deb7a225a0c80451ad0781f","filename":"fit/wa-reference/src/test/resources/test.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Ftest.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Ftest.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fwa-reference%2Fsrc%2Ftest%2Fresources%2Ftest.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+java.home=${java.home}\n+sra.jar=${settings.localRepository}/org/apache/syncope/syncope-sra/${project.version}/syncope-sra-${project.version}.jar\n+keymaster-api.jar=${settings.localRepository}/org/apache/syncope/ext/self-keymaster/syncope-ext-self-keymaster-rest-api/${project.version}/syncope-ext-self-keymaster-rest-api-${project.version}.jar\n+keymaster-client.jar=${settings.localRepository}/org/apache/syncope/ext/self-keymaster/syncope-ext-self-keymaster-client/${project.version}/syncope-ext-self-keymaster-client-${project.version}.jar\n+targetTestClasses=${project.build.testOutputDirectory}"},{"sha":"dff2679554fae8ef8a118939e1b3b38068b6d3d3","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -479,7 +479,7 @@ under the License.\n \n     <antlr4.version>4.8-1</antlr4.version>\n \n-    <curator.version>5.0.0</curator.version>\n+    <curator.version>5.1.0</curator.version>\n     <zookeeper.version>3.6.1</zookeeper.version>\n \n     <testds.port>1389</testds.port>"},{"sha":"ec6e970d710cec7b74295f5ea250b8e6a2064504","filename":"sra/pom.xml","status":"modified","additions":32,"deletions":84,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -72,6 +72,10 @@ under the License.\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-oauth2-client</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\n+    </dependency>\n \n     <dependency> \n       <groupId>org.springframework.session</groupId> \n@@ -176,8 +180,26 @@ under the License.\n           </systemPropertyVariables>\n         </configuration>\n       </plugin>\n+\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <configuration>\n+          <layout>ZIP</layout>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>repackage</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.build.outputDirectory}</outputDirectory>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n     </plugins>\n-    \n+\n     <resources>\n       <resource>\n         <directory>src/main/resources</directory>\n@@ -218,118 +240,44 @@ under the License.\n       <id>debug</id>\n \n       <properties>\n-        <skipTests>true</skipTests>\n+        <maven.test.skip>true</maven.test.skip>\n       </properties>\n \n       <dependencies>\n         <dependency>\n-          <groupId>org.apache.syncope.common.keymaster</groupId>\n-          <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n+          <groupId>org.apache.syncope.ext.self-keymaster</groupId>\n+          <artifactId>syncope-ext-self-keymaster-client</artifactId>\n           <version>${project.version}</version>\n-          <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-          <groupId>org.apache.curator</groupId>\n-          <artifactId>curator-test</artifactId>\n-          <scope>compile</scope>\n-        </dependency>\n-        <dependency>\n-          <groupId>org.apache.cxf</groupId>\n-          <artifactId>cxf-rt-transports-http-netty-server</artifactId>\n-          <scope>compile</scope>\n-        </dependency>\n-\n-        <dependency>\n-          <groupId>org.springframework.boot</groupId>\n-          <artifactId>spring-boot-devtools</artifactId>\n         </dependency>\n       </dependencies>\n \n       <build>\n-        <defaultGoal>clean package io.fabric8:docker-maven-plugin:start spring-boot:run</defaultGoal>\n+        <defaultGoal>clean spring-boot:run</defaultGoal>\n \n         <plugins>\n-          <plugin>\n-            <groupId>io.fabric8</groupId>\n-            <artifactId>docker-maven-plugin</artifactId>\n-            <configuration>\n-              <images>\n-                <image>\n-                  <name>zookeeper:${zookeeper.version}</name>\n-                  <run>\n-                    <ports>\n-                      <port>2181:2181</port>\n-                    </ports>\n-                    <volumes>\n-                      <bind>\n-                        <volume>${project.build.testOutputDirectory}/zoo.cfg:/conf/zoo.cfg</volume>\n-                        <volume>${project.build.testOutputDirectory}/java.env:/conf/java.env</volume>\n-                        <volume>${project.build.testOutputDirectory}/server-jaas.conf:/conf/server-jaas.conf</volume>\n-                        <volume>${project.build.testOutputDirectory}/client-jaas.conf:/conf/client-jaas.conf</volume>\n-                      </bind>\n-                    </volumes>\n-                  </run>\n-                </image>\n-              </images>\n-            </configuration>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.codehaus.mojo</groupId>\n-            <artifactId>build-helper-maven-plugin</artifactId>\n-            <executions>\n-              <execution>\n-                <goals>\n-                  <goal>add-source</goal>\n-                </goals>\n-                <configuration>\n-                  <sources>\n-                    <source>${basedir}/src/test/java</source>\n-                  </sources>\n-                </configuration>\n-              </execution>\n-            </executions>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-compiler-plugin</artifactId>\n-            <configuration>\n-              <excludes>\n-                <exclude>**/org/apache/syncope/sra/**Test.java</exclude>\n-                <exclude>**/org/apache/syncope/sra/**Zookeeper*.java</exclude>\n-              </excludes>\n-            </configuration>\n-          </plugin>\n-\n           <plugin>\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-maven-plugin</artifactId>\n             <configuration>\n-              <mainClass>org.apache.syncope.sra.SyncopeSRAApplication</mainClass>\n               <systemPropertyVariables>\n                 <reactor.netty.http.server.accessLogEnabled>true</reactor.netty.http.server.accessLogEnabled>\n               </systemPropertyVariables>\n               <jvmArguments>\n-                -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n+                -Xdebug -Xrunjdwp:transport=dt_socket,address=8002,server=y,suspend=n\n               </jvmArguments>\n+              <profiles>\n+                <profile>debug</profile>\n+              </profiles>\n             </configuration>\n           </plugin>\n         </plugins>\n         \n         <resources>\n           <resource>\n-            <directory>${basedir}/src/test/resources</directory>\n+            <directory>${basedir}/src/test/resources/debug</directory>\n             <filtering>true</filtering>\n           </resource>\n         </resources>\n-\n-        <testResources>\n-          <testResource>\n-            <directory>${basedir}/../common/keymaster/client-zookeeper/src/main/resources</directory>\n-            <filtering>true</filtering>\n-          </testResource>\n-        </testResources>\n       </build>\n     </profile>\n "},{"sha":"e9048be5e13854d0bb61af732c43bf38b66c11a9","filename":"sra/src/main/java/org/apache/syncope/sra/RouteProvider.java","status":"modified","additions":68,"deletions":14,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -92,6 +92,11 @@\n import org.springframework.util.unit.DataSize;\n import org.springframework.web.server.ServerWebExchange;\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n+import org.springframework.cloud.gateway.filter.factory.DedupeResponseHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.MapRequestHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.RewriteLocationResponseHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.SetRequestHostHeaderGatewayFilterFactory;\n+import org.springframework.cloud.gateway.handler.predicate.WeightRoutePredicateFactory;\n \n @Component\n public class RouteProvider {\n@@ -145,6 +150,18 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                         setValue(addResponseHeaderArgs[1].trim()));\n                 break;\n \n+            case DEDUPE_RESPONSE_HEADER:\n+                String[] dedupeResponseHeaderArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(DedupeResponseHeaderGatewayFilterFactory.class).\n+                        apply(c -> {\n+                            c.setName(dedupeResponseHeaderArgs[0].trim());\n+                            if (dedupeResponseHeaderArgs.length > 1) {\n+                                c.setStrategy(DedupeResponseHeaderGatewayFilterFactory.Strategy.\n+                                        valueOf(dedupeResponseHeaderArgs[1].trim()));\n+                            }\n+                        });\n+                break;\n+\n             case HYSTRIX:\n                 String[] hystrixArgs = gwfilter.getArgs().split(\",\");\n                 filter = ctx.getBean(HystrixGatewayFilterFactory.class).\n@@ -177,6 +194,13 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                         });\n                 break;\n \n+            case MAP_REQUEST_HEADER:\n+                String[] mapRequestHeaderArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(MapRequestHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setFromHeader(mapRequestHeaderArgs[0].trim()).\n+                        setToHeader(mapRequestHeaderArgs[1].trim()));\n+                break;\n+\n             case PREFIX_PATH:\n                 filter = ctx.getBean(PrefixPathGatewayFilterFactory.class).\n                         apply(c -> c.setPrefix(gwfilter.getArgs().trim()));\n@@ -186,7 +210,7 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                 filter = ctx.getBean(PreserveHostHeaderGatewayFilterFactory.class).apply();\n                 break;\n \n-            case REDIRECT:\n+            case REDIRECT_TO:\n                 String[] redirectArgs = gwfilter.getArgs().split(\",\");\n                 filter = ctx.getBean(RedirectToGatewayFilterFactory.class).\n                         apply(redirectArgs[0].trim(), redirectArgs[1].trim());\n@@ -231,11 +255,42 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                         setReplacement(rewritePathArgs[1].trim()));\n                 break;\n \n+            case REWRITE_LOCATION:\n+                String[] rewriteLocationArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(RewriteLocationResponseHeaderGatewayFilterFactory.class).\n+                        apply(c -> {\n+                            c.setStripVersion(RewriteLocationResponseHeaderGatewayFilterFactory.StripVersion.\n+                                    valueOf(rewriteLocationArgs[0].trim()));\n+                            if (rewriteLocationArgs.length > 1) {\n+                                c.setLocationHeaderName(rewriteLocationArgs[1].trim());\n+                            }\n+                            if (rewriteLocationArgs.length > 2) {\n+                                c.setHostValue(rewriteLocationArgs[2].trim());\n+                            }\n+                            if (rewriteLocationArgs.length > 3) {\n+                                c.setProtocols(rewriteLocationArgs[3].trim());\n+                            }\n+                        });\n+                break;\n+\n+            case REWRITE_RESPONSE_HEADER:\n+                String[] rewriteResponseHeaderArgs = gwfilter.getArgs().split(\",\");\n+                filter = ctx.getBean(RewriteResponseHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setReplacement(rewriteResponseHeaderArgs[2].trim()).\n+                        setRegexp(rewriteResponseHeaderArgs[1].trim()).\n+                        setName(rewriteResponseHeaderArgs[0].trim()));\n+                break;\n+\n             case RETRY:\n                 filter = ctx.getBean(RetryGatewayFilterFactory.class).\n                         apply(c -> c.setRetries(Integer.valueOf(gwfilter.getArgs().trim())));\n                 break;\n \n+            case SAVE_SESSION:\n+                filter = ctx.getBean(SaveSessionGatewayFilterFactory.class).apply(c -> {\n+                });\n+                break;\n+\n             case SECURE_HEADERS:\n                 filter = ctx.getBean(SecureHeadersGatewayFilterFactory.class).apply(c -> {\n                 });\n@@ -260,24 +315,11 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                         setValue(setResponseHeaderArgs[1].trim()));\n                 break;\n \n-            case REWRITE_RESPONSE_HEADER:\n-                String[] rewriteResponseHeaderArgs = gwfilter.getArgs().split(\",\");\n-                filter = ctx.getBean(RewriteResponseHeaderGatewayFilterFactory.class).\n-                        apply(c -> c.setReplacement(rewriteResponseHeaderArgs[2].trim()).\n-                        setRegexp(rewriteResponseHeaderArgs[1].trim()).\n-                        setName(rewriteResponseHeaderArgs[0].trim()));\n-                break;\n-\n             case SET_STATUS:\n                 filter = ctx.getBean(SetStatusGatewayFilterFactory.class).\n                         apply(c -> c.setStatus(gwfilter.getArgs().trim()));\n                 break;\n \n-            case SAVE_SESSION:\n-                filter = ctx.getBean(SaveSessionGatewayFilterFactory.class).apply(c -> {\n-                });\n-                break;\n-\n             case STRIP_PREFIX:\n                 filter = ctx.getBean(StripPrefixGatewayFilterFactory.class).\n                         apply(c -> c.setParts(Integer.valueOf(gwfilter.getArgs().trim())));\n@@ -293,6 +335,11 @@ private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfi\n                         apply(c -> c.setMaxSize(DataSize.ofBytes(Long.valueOf(gwfilter.getArgs().trim()))));\n                 break;\n \n+            case SET_REQUEST_HOST:\n+                filter = ctx.getBean(SetRequestHostHeaderGatewayFilterFactory.class).\n+                        apply(c -> c.setHost(gwfilter.getArgs().trim()));\n+                break;\n+\n             case LINK_REWRITE:\n                 filter = ApplicationContextUtils.getOrCreateBean(\n                         ctx,\n@@ -422,6 +469,13 @@ private AsyncPredicate<ServerWebExchange> toPredicate(final SRARoutePredicate gw\n                         applyAsync(c -> c.setSources(List.of(remoteAddrArgs)));\n                 break;\n \n+            case WEIGHT:\n+                String[] weigthArgs = gwpredicate.getArgs().split(\",\");\n+                predicate = ctx.getBean(WeightRoutePredicateFactory.class).\n+                        applyAsync(c -> c.setGroup(weigthArgs[0].trim()).\n+                        setWeight(Integer.valueOf(weigthArgs[1].trim())));\n+                break;\n+\n             case CUSTOM:\n                 String[] customArgs = gwpredicate.getArgs().split(\";\");\n                 predicate = ApplicationContextUtils.getOrCreateBean("},{"sha":"6347edc8df9ecd0f2c753e27f9413d397da2b73b","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":74,"deletions":4,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,20 +18,26 @@\n  */\n package org.apache.syncope.sra;\n \n+import java.text.ParseException;\n+import java.util.Collections;\n+import java.util.Map;\n import java.util.Objects;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.sra.security.CsrfRouteMatcher;\n import org.apache.syncope.sra.security.LogoutRouteMatcher;\n import org.apache.syncope.sra.security.OAuth2SecurityConfigUtils;\n import org.apache.syncope.sra.security.PublicRouteMatcher;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.cache.CacheManager;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.annotation.Order;\n+import org.springframework.core.convert.converter.Converter;\n import org.springframework.core.env.Environment;\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n@@ -41,11 +47,17 @@\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.ClientRegistrations;\n import org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;\n-import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\n import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtValidators;\n+import org.springframework.security.oauth2.jwt.MappedJwtClaimSetConverter;\n+import org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder;\n+import org.springframework.security.oauth2.jwt.ReactiveJwtDecoder;\n import org.springframework.security.web.server.SecurityWebFilterChain;\n import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import reactor.core.publisher.Mono;\n \n @EnableWebFluxSecurity\n @Configuration\n@@ -87,7 +99,7 @@ public MapReactiveUserDetailsService userDetailsService() {\n \n     @Bean\n     @ConditionalOnProperty(name = AM_TYPE, havingValue = \"OIDC\")\n-    public ReactiveClientRegistrationRepository oidcClientRegistrationRepository() {\n+    public InMemoryReactiveClientRegistrationRepository oidcClientRegistrationRepository() {\n         return new InMemoryReactiveClientRegistrationRepository(\n                 ClientRegistrations.fromOidcIssuerLocation(env.getProperty(\"am.oidc.configuration\")).\n                         registrationId(\"OIDC\").\n@@ -96,9 +108,33 @@ public ReactiveClientRegistrationRepository oidcClientRegistrationRepository() {\n                         build());\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = AM_TYPE, havingValue = \"OIDC\")\n+    public OAuth2TokenValidator<Jwt> oidcJWTValidator() {\n+        return JwtValidators.createDefaultWithIssuer(env.getProperty(\"am.oidc.configuration\"));\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public Converter<Map<String, Object>, Map<String, Object>> jwtClaimSetConverter() {\n+        return MappedJwtClaimSetConverter.withDefaults(Collections.emptyMap());\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = AM_TYPE, havingValue = \"OIDC\")\n+    public ReactiveJwtDecoder oidcJWTDecoder() {\n+        NimbusReactiveJwtDecoder jwtDecoder = NimbusReactiveJwtDecoder.withJwkSetUri(\n+                oidcClientRegistrationRepository().iterator().next().getProviderDetails().getJwkSetUri()).build();\n+        jwtDecoder.setJwtValidator(oidcJWTValidator());\n+        jwtDecoder.setClaimSetConverter(jwtClaimSetConverter());\n+        return jwtDecoder;\n+    }\n+\n     @Bean\n     @ConditionalOnProperty(name = AM_TYPE, havingValue = \"OAUTH2\")\n-    public ReactiveClientRegistrationRepository oauth2ClientRegistrationRepository() {\n+    public InMemoryReactiveClientRegistrationRepository oauth2ClientRegistrationRepository() {\n         return new InMemoryReactiveClientRegistrationRepository(\n                 ClientRegistration.withRegistrationId(\"OAUTH2\").\n                         redirectUriTemplate(\"{baseUrl}/{action}/oauth2/code/{registrationId}\").\n@@ -109,10 +145,43 @@ public ReactiveClientRegistrationRepository oauth2ClientRegistrationRepository()\n                         clientId(env.getProperty(\"am.oauth2.client.id\")).\n                         clientSecret(env.getProperty(\"am.oauth2.client.secret\")).\n                         scope(env.getProperty(\"am.oauth2.scopes\", String[].class)).\n-                        authorizationGrantType(new AuthorizationGrantType(env.getProperty(\"am.oauth2.grantType\"))).\n+                        authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE).\n+                        jwkSetUri(env.getProperty(\"am.oauth2.jwkSetUri\")).\n                         build());\n     }\n \n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = AM_TYPE, havingValue = \"OAUTH2\")\n+    public OAuth2TokenValidator<Jwt> oauth2JWTValidator() {\n+        String issuer = env.getProperty(\"am.oauth2.issuer\");\n+        return issuer == null\n+                ? JwtValidators.createDefault()\n+                : JwtValidators.createDefaultWithIssuer(env.getProperty(\"am.oauth2.issuer\"));\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = AM_TYPE, havingValue = \"OAUTH2\")\n+    public ReactiveJwtDecoder oauth2JWTDecoder() {\n+        String jwkSetUri = oauth2ClientRegistrationRepository().iterator().next().getProviderDetails().getJwkSetUri();\n+        NimbusReactiveJwtDecoder jwtDecoder;\n+        if (StringUtils.isBlank(jwkSetUri)) {\n+            jwtDecoder = new NimbusReactiveJwtDecoder(jwt -> {\n+                try {\n+                    return Mono.just(jwt.getJWTClaimsSet());\n+                } catch (ParseException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+        } else {\n+            jwtDecoder = NimbusReactiveJwtDecoder.withJwkSetUri(jwkSetUri).build();\n+        }\n+        jwtDecoder.setJwtValidator(oauth2JWTValidator());\n+        jwtDecoder.setClaimSetConverter(jwtClaimSetConverter());\n+        return jwtDecoder;\n+    }\n+\n     @Bean\n     @Order(1)\n     @ConditionalOnProperty(name = AM_TYPE)\n@@ -135,6 +204,7 @@ public SecurityWebFilterChain routesSecurityFilterChain(\n             case OAUTH2:\n                 OAuth2SecurityConfigUtils.forLogin(http, amType, ctx);\n                 OAuth2SecurityConfigUtils.forLogout(builder, amType, cacheManager, logoutRouteMatcher, ctx);\n+                http.oauth2ResourceServer().jwt().jwtDecoder(ctx.getBean(ReactiveJwtDecoder.class));\n                 break;\n \n             case SAML2:"},{"sha":"5ea8498e1511d2040b7ceae67b07959d4fc3358e","filename":"sra/src/main/java/org/apache/syncope/sra/security/OidcClientInitiatedServerLogoutSuccessHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOidcClientInitiatedServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOidcClientInitiatedServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOidcClientInitiatedServerLogoutSuccessHandler.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -117,7 +117,8 @@ private URI endpointUri(\n                     uri = route.get().getPostLogout();\n                 }\n \n-                return CACHE.put(routeId, Optional.ofNullable(uri));\n+                CACHE.put(routeId, Optional.ofNullable(uri));\n+                return CACHE.get(routeId);\n             });\n             if (routePostLogout.isPresent()) {\n                 postLogout = routePostLogout.get();"},{"sha":"2cdc822df9c219e65a628f3ea0b73f691da962d3","filename":"sra/src/test/java/org/apache/syncope/sra/RouteProviderTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -376,7 +376,7 @@ public void redirect() {\n         route.setKey(\"redirect\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n         route.getFilters().add(new SRARouteFilter.Builder().\n-                factory(SRARouteFilterFactory.REDIRECT).args(\"307,http://127.0.0.1:\" + wiremockPort).build());\n+                factory(SRARouteFilterFactory.REDIRECT_TO).args(\"307,http://127.0.0.1:\" + wiremockPort).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();"},{"sha":"5958ee87196dc1d1647e260ba54ad649061ae800","filename":"sra/src/test/resources/debug/application-debug.properties","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,33 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#am.type=OIDC\n+#am.oidc.configuration=http://localhost:9080/syncope-wa/oidc/\n+#am.oidc.client.id=oidcTestClientId\n+#am.oidc.client.secret=oidcTestClientSecret\n+\n+am.type=OAUTH2\n+am.oauth2.tokenUri=http://localhost:9080/syncope-wa/oauth2.0/accessToken\n+am.oauth2.authorizationUri=http://localhost:9080/syncope-wa/oauth2.0/authorize\n+am.oauth2.userInfoUri=http://localhost:9080/syncope-wa/oauth2.0/profile\n+am.oauth2.userNameAttributeName=id\n+am.oauth2.scopes=\n+am.oauth2.jwkSetUri=\n+am.oauth2.issuer=http://localhost:9080/syncope-wa\n+am.oauth2.client.id=oauth2TestClientId\n+am.oauth2.client.secret=oauth2TestClientSecret\n+\n+global.postLogout=http://localhost:8080/logout"},{"sha":"033fe3b8cdc122c28c9d2c96c62b4aaeab664fc4","filename":"sra/src/test/resources/debug/keymaster.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fkeymaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fkeymaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fkeymaster.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+keymaster.address=http://localhost:9080/syncope/rest/keymaster\n+keymaster.username=${anonymousUser}\n+keymaster.password=${anonymousKey}"},{"sha":"f7ac25daf008dd838b8ed057249e06b2f4e4537b","filename":"sra/src/test/resources/debug/log4j2.xml","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fresources%2Fdebug%2Flog4j2.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,66 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<configuration status=\"WARN\">\n+\n+  <Properties>\n+    <Property name=\"LOG_EXCEPTION_CONVERSION_WORD\">%xwEx</Property>\n+    <Property name=\"LOG_LEVEL_PATTERN\">%5p</Property>\n+    <Property name=\"LOG_DATEFORMAT_PATTERN\">yyyy-MM-dd HH:mm:ss.SSS</Property>\n+    <Property name=\"CONSOLE_LOG_PATTERN\">%clr{%d{${LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}} %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>\n+    <Property name=\"FILE_LOG_PATTERN\">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.} : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>\n+  </Properties>\n+  <Appenders>\n+    <Console name=\"main\" target=\"SYSTEM_OUT\" follow=\"true\">\n+      <PatternLayout pattern=\"${sys:CONSOLE_LOG_PATTERN}\" />\n+    </Console>\n+    <Console name=\"access\" target=\"SYSTEM_OUT\" follow=\"true\">\n+      <PatternLayout pattern=\"${sys:CONSOLE_LOG_PATTERN}\" />\n+    </Console>\n+  </Appenders>\n+    \n+  <loggers>\n+\n+    <asyncLogger name=\"org.apache.syncope.client.lib\" additivity=\"false\" level=\"OFF\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"org.apache.syncope.sra\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <asyncLogger name=\"org.springframework.cloud.gateway\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+\n+    <!-- Requires -Dreactor.netty.http.server.accessLogEnabled=true to work-->\n+    <asyncLogger name=\"reactor.netty.http.server.AccessLog\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"access\"/>\n+    </asyncLogger>\n+\n+    <root level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </root>\n+  \n+  </loggers>\n+  \n+</configuration>"},{"sha":"a005c5a0e7f963fa7f08783401cd87197520531b","filename":"wa/bootstrap/src/main/java/org/apache/syncope/wa/bootstrap/SyncopeWAPropertySourceLocator.java","status":"modified","additions":90,"deletions":98,"changes":188,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fbootstrap%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fbootstrap%2FSyncopeWAPropertySourceLocator.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.wa.bootstrap;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n@@ -53,7 +56,6 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n import org.springframework.core.annotation.Order;\n-import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.Environment;\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.PropertySource;\n@@ -69,46 +71,44 @@ public SyncopeWAPropertySourceLocator(final WARestClient waRestClient) {\n         this.waRestClient = waRestClient;\n     }\n \n-    private static void mapSyncopeAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        SyncopeAuthModuleConf conf = SyncopeAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final SyncopeAuthModuleConf conf,\n+            final String address) {\n \n         SyncopeAuthenticationProperties syncopeProps = new SyncopeAuthenticationProperties();\n-        syncopeProps.setName(conf.getName());\n+        syncopeProps.setName(authModule);\n         syncopeProps.setDomain(conf.getDomain());\n-        syncopeProps.setUrl(conf.getUrl());\n+        syncopeProps.setUrl(StringUtils.substringBefore(address, \"/rest\"));\n \n         casProperties.getAuthn().setSyncope(syncopeProps);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.syncope.\";\n     }\n \n-    private static void mapStaticAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        StaticAuthModuleConf conf = StaticAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final StaticAuthModuleConf conf) {\n \n         AcceptAuthenticationProperties staticProps = new AcceptAuthenticationProperties();\n-        staticProps.setName(conf.getName());\n+        staticProps.setName(authModule);\n         String users = conf.getUsers().entrySet().stream().\n                 map(entry -> entry.getKey() + \"::\" + entry.getValue()).\n                 collect(Collectors.joining(\",\"));\n         staticProps.setUsers(users);\n \n         casProperties.getAuthn().setAccept(staticProps);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.accept.\";\n     }\n \n-    private static void mapLdapAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        LDAPAuthModuleConf conf = LDAPAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final LDAPAuthModuleConf conf) {\n \n         LdapAuthenticationProperties ldapProps = new LdapAuthenticationProperties();\n-        ldapProps.setName(conf.getName());\n+        ldapProps.setName(authModule);\n         ldapProps.setBaseDn(conf.getBaseDn());\n         ldapProps.setBindCredential(conf.getBindCredential());\n         ldapProps.setSearchFilter(conf.getSearchFilter());\n@@ -118,70 +118,66 @@ private static void mapLdapAuthModuleConf(\n         ldapProps.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n \n         casProperties.getAuthn().getLdap().add(ldapProps);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.ldap.\";\n     }\n \n-    private static void mapGoogleMfaAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        GoogleMfaAuthModuleConf conf = GoogleMfaAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final GoogleMfaAuthModuleConf conf) {\n \n         GoogleAuthenticatorMultifactorProperties props = new GoogleAuthenticatorMultifactorProperties();\n-        props.setName(conf.getName());\n+        props.setName(authModule);\n         props.setIssuer(conf.getIssuer());\n         props.setCodeDigits(conf.getCodeDigits());\n         props.setLabel(conf.getLabel());\n         props.setTimeStepSize(conf.getTimeStepSize());\n         props.setWindowSize(conf.getWindowSize());\n \n         casProperties.getAuthn().getMfa().setGauth(props);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.mfa.gauth.\";\n     }\n \n-    private static void mapU2fAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        U2FAuthModuleConf conf = U2FAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final U2FAuthModuleConf conf) {\n \n         U2FMultifactorProperties props = new U2FMultifactorProperties();\n-        props.setName(conf.getName());\n+        props.setName(authModule);\n         props.setExpireDevices(conf.getExpireDevices());\n         props.setExpireDevicesTimeUnit(TimeUnit.valueOf(conf.getExpireDevicesTimeUnit()));\n         props.setExpireRegistrations(conf.getExpireRegistrations());\n         props.setExpireRegistrationsTimeUnit(TimeUnit.valueOf(conf.getExpireRegistrationsTimeUnit()));\n \n         casProperties.getAuthn().getMfa().setU2f(props);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.mfa.u2f.\";\n     }\n \n-    private static void mapJaasAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        JaasAuthModuleConf conf = JaasAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final JaasAuthModuleConf conf) {\n \n         JaasAuthenticationProperties props = new JaasAuthenticationProperties();\n-        props.setName(conf.getName());\n+        props.setName(authModule);\n         props.setLoginConfigType(conf.getLoginConfigType());\n         props.setKerberosKdcSystemProperty(conf.getKerberosKdcSystemProperty());\n         props.setKerberosRealmSystemProperty(conf.getKerberosRealmSystemProperty());\n         props.setLoginConfigType(conf.getLoginConfigurationFile());\n         props.setRealm(conf.getRealm());\n \n         casProperties.getAuthn().getJaas().add(props);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.jaas.\";\n     }\n \n-    private static void mapJdbcAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        JDBCAuthModuleConf conf = JDBCAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final JDBCAuthModuleConf conf) {\n \n         QueryJdbcAuthenticationProperties props = new QueryJdbcAuthenticationProperties();\n-        props.setName(conf.getName());\n+        props.setName(authModule);\n         props.setSql(conf.getSql());\n         props.setFieldDisabled(conf.getFieldDisabled());\n         props.setFieldExpired(conf.getFieldExpired());\n@@ -194,21 +190,20 @@ private static void mapJdbcAuthModuleConf(\n         props.setPrincipalAttributeList(conf.getPrincipalAttributeList());\n \n         casProperties.getAuthn().getJdbc().getQuery().add(props);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.jdbc.query.\";\n     }\n \n-    private static void mapOidcAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        OIDCAuthModuleConf conf = OIDCAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final OIDCAuthModuleConf conf) {\n \n         Pac4jGenericOidcClientProperties props = new Pac4jGenericOidcClientProperties();\n         props.setId(conf.getId());\n         props.setCustomParams(conf.getCustomParams());\n         props.setDiscoveryUri(conf.getDiscoveryUri());\n         props.setMaxClockSkew(conf.getMaxClockSkew());\n-        props.setClientName(conf.getName());\n+        props.setClientName(authModule);\n         props.setPreferredJwsAlgorithm(conf.getPreferredJwsAlgorithm());\n         props.setResponseMode(conf.getResponseMode());\n         props.setResponseType(conf.getResponseType());\n@@ -219,17 +214,16 @@ private static void mapOidcAuthModuleConf(\n         client.setGeneric(props);\n \n         casProperties.getAuthn().getPac4j().getOidc().add(client);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.pac4j.oidc.\";\n     }\n \n-    private static void mapRadiusAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        RadiusAuthModuleConf conf = RadiusAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final RadiusAuthModuleConf conf) {\n \n         RadiusProperties props = new RadiusProperties();\n-        props.setName(conf.getName());\n+        props.setName(authModule);\n \n         props.getClient().setAccountingPort(conf.getAccountingPort());\n         props.getClient().setAuthenticationPort(conf.getAuthenticationPort());\n@@ -248,16 +242,16 @@ private static void mapRadiusAuthModuleConf(\n         props.getServer().setRetries(conf.getRetries());\n \n         casProperties.getAuthn().setRadius(props);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.radius.\";\n     }\n \n-    private static void mapSaml2IdPAuthModuleConf(\n+    private static String mapAuthModule(\n             final CasConfigurationProperties casProperties,\n-            final AuthModuleConf authConf) {\n-\n-        SAML2IdPAuthModuleConf conf = SAML2IdPAuthModuleConf.class.cast(authConf);\n+            final String authModule,\n+            final SAML2IdPAuthModuleConf conf) {\n \n         Pac4jSamlClientProperties props = new Pac4jSamlClientProperties();\n+        props.setClientName(authModule);\n         props.setAcceptedSkew(conf.getAcceptedSkew());\n         props.setAssertionConsumerServiceIndex(conf.getAssertionConsumerServiceIndex());\n         props.setAttributeConsumingServiceIndex(conf.getAttributeConsumingServiceIndex());\n@@ -282,7 +276,7 @@ private static void mapSaml2IdPAuthModuleConf(\n                 : TriStateBoolean.valueOf(conf.getNameIdPolicyAllowCreate().toUpperCase()));\n \n         casProperties.getAuthn().getPac4j().getSaml().add(props);\n-        LOG.debug(\"Added {} to WA configuration\", conf.getName());\n+        return \"cas.authn.pac4j.saml.\";\n     }\n \n     @Override\n@@ -294,50 +288,48 @@ public PropertySource<?> locate(final Environment environment) {\n         }\n \n         LOG.info(\"Bootstrapping WA configuration\");\n-        AuthModuleService authService = syncopeClient.getService(AuthModuleService.class);\n+\n         CasConfigurationProperties casProperties = new CasConfigurationProperties();\n-        authService.list().forEach(authModuleTO -> {\n+        List<String> filters = new ArrayList<>();\n+\n+        syncopeClient.getService(AuthModuleService.class).list().forEach(authModuleTO -> {\n             AuthModuleConf authConf = authModuleTO.getConf();\n-            LOG.debug(\"Mapping auth module {}:{} as conf {}\",\n-                    authModuleTO.getKey(), authModuleTO.getName(), authConf.getName());\n+            LOG.debug(\"Mapping auth module {} \", authModuleTO.getKey());\n+\n             if (authConf instanceof LDAPAuthModuleConf) {\n-                mapLdapAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof StaticAuthModuleConf) {\n-                mapStaticAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof SyncopeAuthModuleConf) {\n-                mapSyncopeAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof GoogleMfaAuthModuleConf) {\n-                mapGoogleMfaAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof JaasAuthModuleConf) {\n-                mapJaasAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof JDBCAuthModuleConf) {\n-                mapJdbcAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof OIDCAuthModuleConf) {\n-                mapOidcAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof RadiusAuthModuleConf) {\n-                mapRadiusAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof SAML2IdPAuthModuleConf) {\n-                mapSaml2IdPAuthModuleConf(casProperties, authConf);\n-            }\n-            if (authConf instanceof U2FAuthModuleConf) {\n-                mapU2fAuthModuleConf(casProperties, authConf);\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (LDAPAuthModuleConf) authConf));\n+            } else if (authConf instanceof StaticAuthModuleConf) {\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (StaticAuthModuleConf) authConf));\n+            } else if (authConf instanceof SyncopeAuthModuleConf) {\n+                filters.add(mapAuthModule(\n+                        casProperties,\n+                        authModuleTO.getKey(),\n+                        (SyncopeAuthModuleConf) authConf,\n+                        waRestClient.getSyncopeClient().getAddress()));\n+            } else if (authConf instanceof GoogleMfaAuthModuleConf) {\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (GoogleMfaAuthModuleConf) authConf));\n+            } else if (authConf instanceof JaasAuthModuleConf) {\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (JaasAuthModuleConf) authConf));\n+            } else if (authConf instanceof JDBCAuthModuleConf) {\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (JDBCAuthModuleConf) authConf));\n+            } else if (authConf instanceof OIDCAuthModuleConf) {\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (OIDCAuthModuleConf) authConf));\n+            } else if (authConf instanceof RadiusAuthModuleConf) {\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (RadiusAuthModuleConf) authConf));\n+            } else if (authConf instanceof SAML2IdPAuthModuleConf) {\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (SAML2IdPAuthModuleConf) authConf));\n+            } else if (authConf instanceof U2FAuthModuleConf) {\n+                filters.add(mapAuthModule(casProperties, authModuleTO.getKey(), (U2FAuthModuleConf) authConf));\n             }\n         });\n \n-        Map<String, Object> properties = CasCoreConfigurationUtils.asMap(casProperties.withHolder());\n+        Map<String, Object> properties = CasCoreConfigurationUtils.asMap(casProperties.withHolder()).\n+                entrySet().stream().\n+                filter(entry -> filters.stream().filter(Objects::nonNull).\n+                anyMatch(prefix -> entry.getKey().startsWith(prefix))).\n+                collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n         LOG.debug(\"Collected WA properties: {}\", properties);\n \n-        ConfigurableEnvironment.class.cast(environment).getPropertySources().\n-                addLast(new MapPropertySource(getClass().getName(), properties));\n-\n-        return null;\n+        return new MapPropertySource(getClass().getName(), properties);\n     }\n }"},{"sha":"f62cf311610a466071fc556aa9faaf661762b358","filename":"wa/starter/pom.xml","status":"modified","additions":2,"deletions":124,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -352,127 +352,6 @@ under the License.\n     <profile>\n       <id>debug</id>\n \n-      <properties>\n-        <skipTests>true</skipTests>\n-      </properties>\n-\n-      <dependencies>\n-        <dependency>\n-          <groupId>org.springframework.boot</groupId>\n-          <artifactId>spring-boot-starter-undertow</artifactId>\n-        </dependency>\n-\n-        <dependency>\n-          <groupId>org.apache.syncope.common.keymaster</groupId>\n-          <artifactId>syncope-common-keymaster-client-zookeeper</artifactId>\n-          <version>${project.version}</version>\n-        </dependency>\n-        <dependency>\n-          <groupId>org.apache.curator</groupId>\n-          <artifactId>curator-test</artifactId>\n-          <scope>compile</scope>\n-        </dependency>\n-\n-        <dependency>\n-          <groupId>org.springframework.boot</groupId>\n-          <artifactId>spring-boot-devtools</artifactId>\n-        </dependency>\n-      </dependencies>\n-\n-      <build>\n-        <defaultGoal>clean package io.fabric8:docker-maven-plugin:start spring-boot:run</defaultGoal>\n-\n-        <plugins>\n-          <plugin>\n-            <groupId>io.fabric8</groupId>\n-            <artifactId>docker-maven-plugin</artifactId>\n-            <configuration>\n-              <images>\n-                <image>\n-                  <name>zookeeper:${zookeeper.version}</name>\n-                  <run>\n-                    <ports>\n-                      <port>2181:2181</port>\n-                    </ports>\n-                    <volumes>\n-                      <bind>\n-                        <volume>${project.build.testOutputDirectory}/zoo.cfg:/conf/zoo.cfg</volume>\n-                        <volume>${project.build.testOutputDirectory}/java.env:/conf/java.env</volume>\n-                        <volume>${project.build.testOutputDirectory}/server-jaas.conf:/conf/server-jaas.conf</volume>\n-                        <volume>${project.build.testOutputDirectory}/client-jaas.conf:/conf/client-jaas.conf</volume>\n-                      </bind>\n-                    </volumes>\n-                  </run>\n-                </image>\n-              </images>\n-            </configuration>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.codehaus.mojo</groupId>\n-            <artifactId>build-helper-maven-plugin</artifactId>\n-            <executions>\n-              <execution>\n-                <goals>\n-                  <goal>add-source</goal>\n-                </goals>\n-                <configuration>\n-                  <sources>\n-                    <source>${basedir}/src/test/java</source>\n-                  </sources>\n-                </configuration>\n-              </execution>\n-            </executions>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-compiler-plugin</artifactId>\n-            <configuration>\n-              <excludes>\n-                <exclude>**/org/apache/syncope/wa/starter/**Test.java</exclude>\n-                <exclude>**/org/apache/syncope/wa/starter/**Zookeeper*.java</exclude>\n-              </excludes>\n-            </configuration>\n-          </plugin>\n-\n-          <plugin>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-maven-plugin</artifactId>\n-            <configuration>\n-              <mainClass>org.apache.syncope.wa.starter.SyncopeWAApplication</mainClass>\n-              <jvmArguments>\n-                -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n\n-              </jvmArguments>\n-              <profiles>\n-                <profile>debug</profile>\n-              </profiles>\n-            </configuration>\n-          </plugin>\n-        </plugins>\n-\n-        <resources>\n-          <resource>\n-            <directory>${basedir}/src/test/resources</directory>\n-            <filtering>true</filtering>\n-            <excludes>\n-              <exclude>dev/**</exclude>\n-            </excludes>\n-          </resource>\n-        </resources>\n-\n-        <testResources>\n-          <testResource>\n-            <directory>${basedir}/../../common/keymaster/client-zookeeper/src/main/resources</directory>\n-            <filtering>true</filtering>\n-          </testResource>\n-        </testResources>\n-      </build>\n-    </profile>\n-\n-    <profile>\n-      <id>dev</id>\n-\n       <properties>\n         <maven.test.skip>true</maven.test.skip>\n       </properties>\n@@ -498,20 +377,19 @@ under the License.\n             <groupId>org.springframework.boot</groupId>\n             <artifactId>spring-boot-maven-plugin</artifactId>\n             <configuration>\n-              <mainClass>org.apache.syncope.wa.starter.SyncopeWAApplication</mainClass>\n               <jvmArguments>\n                 -Xdebug -Xrunjdwp:transport=dt_socket,address=8001,server=y,suspend=n\n               </jvmArguments>\n               <profiles>\n-                <profile>dev</profile>\n+                <profile>debug</profile>\n               </profiles>\n             </configuration>\n           </plugin>\n         </plugins>\n \n         <resources>\n           <resource>\n-            <directory>${basedir}/src/test/resources/dev</directory>\n+            <directory>${basedir}/src/test/resources/debug</directory>\n             <filtering>true</filtering>\n           </resource>\n         </resources>"},{"sha":"c53c8fad17fd1de8dbd5d6aafad4150d6e1aac6f","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":87,"deletions":80,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,33 +18,23 @@\n  */\n package org.apache.syncope.wa.starter.config;\n \n-import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRepository;\n-import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n-import org.apereo.cas.configuration.CasConfigurationProperties;\n-import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n-import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n-import org.apereo.cas.otp.repository.credentials.OneTimeTokenCredentialRepository;\n-import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n-import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n-import org.apereo.cas.services.ServiceRegistryListener;\n-import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n-import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n-import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n-import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n-import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n-import org.apereo.cas.util.DateTimeUtils;\n-import org.apereo.cas.util.crypto.CipherExecutor;\n-\n import com.github.benmanes.caffeine.cache.Caffeine;\n import com.github.benmanes.caffeine.cache.LoadingCache;\n-import com.warrenstrange.googleauth.IGoogleAuthenticator;\n import io.swagger.v3.oas.models.OpenAPI;\n import io.swagger.v3.oas.models.info.Contact;\n import io.swagger.v3.oas.models.info.Info;\n import org.apache.commons.lang3.StringUtils;\n+import com.warrenstrange.googleauth.IGoogleAuthenticator;\n+import io.swagger.v3.oas.models.security.SecurityScheme;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.syncope.wa.starter.audit.SyncopeWAAuditTrailManager;\n import org.apache.syncope.wa.starter.gauth.credential.SyncopeWAGoogleMfaAuthCredentialRepository;\n@@ -64,6 +54,22 @@\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n import org.apache.syncope.wa.starter.services.SyncopeWAServiceRegistry;\n import org.apache.syncope.wa.starter.u2f.SyncopeWAU2FDeviceRepository;\n+import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRepository;\n+import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorProperties;\n+import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n+import org.apereo.cas.otp.repository.credentials.OneTimeTokenCredentialRepository;\n+import org.apereo.cas.otp.repository.token.OneTimeTokenRepository;\n+import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n+import org.apereo.cas.services.ServiceRegistryListener;\n+import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGenerator;\n+import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n+import org.apereo.cas.support.saml.idp.metadata.locator.SamlIdPMetadataLocator;\n+import org.apereo.cas.support.saml.idp.metadata.writer.SamlIdPCertificateAndKeyWriter;\n+import org.apereo.cas.util.DateTimeUtils;\n+import org.apereo.cas.util.crypto.CipherExecutor;\n import org.pac4j.core.client.Client;\n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -72,15 +78,7 @@\n import org.springframework.cloud.context.config.annotation.RefreshScope;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n-\n-import java.time.LocalDate;\n-import java.time.ZoneId;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Map;\n \n-@Configuration\n public class SyncopeWAConfiguration {\n \n     @Autowired\n@@ -91,76 +89,98 @@ public class SyncopeWAConfiguration {\n     private ObjectProvider<SamlIdPCertificateAndKeyWriter> samlSelfSignedCertificateWriter;\n \n     @Autowired\n-    private ConfigurableApplicationContext applicationContext;\n+    private ConfigurableApplicationContext ctx;\n \n     @Autowired\n     @Qualifier(\"serviceRegistryListeners\")\n     private Collection<ServiceRegistryListener> serviceRegistryListeners;\n \n+    @Bean\n+    public String version() {\n+        return ctx.getEnvironment().getProperty(\"version\");\n+    }\n+\n+    @Bean\n+    public OpenAPI casSwaggerOpenApi() {\n+        return new OpenAPI().\n+                info(new Info().\n+                        title(\"Apache Syncope\").\n+                        description(\"Apache Syncope \" + version()).\n+                        contact(new Contact().\n+                                name(\"The Apache Syncope community\").\n+                                email(\"dev@syncope.apache.org\").\n+                                url(\"http://syncope.apache.org\")).\n+                        version(version())).\n+                schemaRequirement(\"BasicAuthentication\",\n+                        new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"basic\")).\n+                schemaRequirement(\"Bearer\",\n+                        new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\"));\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public RegisteredServiceMapper registeredServiceMapper() {\n         Map<String, AuthMapper> authPolicyConfMappers = new HashMap<>();\n-        applicationContext.getBeansOfType(AuthMapper.class).forEach((name, bean) -> {\n-            AuthMapFor authMapFor = applicationContext.findAnnotationOnBean(name, AuthMapFor.class);\n+        ctx.getBeansOfType(AuthMapper.class).forEach((name, bean) -> {\n+            AuthMapFor authMapFor = ctx.findAnnotationOnBean(name, AuthMapFor.class);\n             if (authMapFor != null) {\n                 authPolicyConfMappers.put(authMapFor.authPolicyConfClass().getName(), bean);\n             }\n         });\n \n         Map<String, AccessMapper> accessPolicyConfMappers = new HashMap<>();\n-        applicationContext.getBeansOfType(AccessMapper.class).forEach((name, bean) -> {\n-            AccessMapFor accessMapFor = applicationContext.findAnnotationOnBean(name, AccessMapFor.class);\n+        ctx.getBeansOfType(AccessMapper.class).forEach((name, bean) -> {\n+            AccessMapFor accessMapFor = ctx.findAnnotationOnBean(name, AccessMapFor.class);\n             if (accessMapFor != null) {\n                 accessPolicyConfMappers.put(accessMapFor.accessPolicyConfClass().getName(), bean);\n             }\n         });\n \n         Map<String, AttrReleaseMapper> attrReleasePolicyConfMappers = new HashMap<>();\n-        applicationContext.getBeansOfType(AttrReleaseMapper.class).forEach((name, bean) -> {\n+        ctx.getBeansOfType(AttrReleaseMapper.class).forEach((name, bean) -> {\n             AttrReleaseMapFor attrReleaseMapFor =\n-                applicationContext.findAnnotationOnBean(name, AttrReleaseMapFor.class);\n+                    ctx.findAnnotationOnBean(name, AttrReleaseMapFor.class);\n             if (attrReleaseMapFor != null) {\n                 attrReleasePolicyConfMappers.put(attrReleaseMapFor.attrReleasePolicyConfClass().getName(), bean);\n             }\n         });\n \n         Map<String, ClientAppMapper> clientAppTOMappers = new HashMap<>();\n-        applicationContext.getBeansOfType(ClientAppMapper.class).forEach((name, bean) -> {\n-            ClientAppMapFor clientAppMapFor = applicationContext.findAnnotationOnBean(name, ClientAppMapFor.class);\n+        ctx.getBeansOfType(ClientAppMapper.class).forEach((name, bean) -> {\n+            ClientAppMapFor clientAppMapFor = ctx.findAnnotationOnBean(name, ClientAppMapFor.class);\n             if (clientAppMapFor != null) {\n                 clientAppTOMappers.put(clientAppMapFor.clientAppClass().getName(), bean);\n             }\n         });\n \n         return new RegisteredServiceMapper(\n-            authPolicyConfMappers,\n-            accessPolicyConfMappers,\n-            attrReleasePolicyConfMappers,\n-            clientAppTOMappers);\n+                authPolicyConfMappers,\n+                accessPolicyConfMappers,\n+                attrReleasePolicyConfMappers,\n+                clientAppTOMappers);\n     }\n \n     @Autowired\n     @Bean\n     public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(\n-        final WARestClient restClient, final RegisteredServiceMapper registeredServiceMapper) {\n+            final WARestClient restClient, final RegisteredServiceMapper registeredServiceMapper) {\n \n         SyncopeWAServiceRegistry registry = new SyncopeWAServiceRegistry(\n-            restClient, registeredServiceMapper, applicationContext, serviceRegistryListeners);\n+                restClient, registeredServiceMapper, ctx, serviceRegistryListeners);\n         return plan -> plan.registerServiceRegistry(registry);\n     }\n \n     @Autowired\n     @Bean\n     public SamlIdPMetadataGenerator samlIdPMetadataGenerator(final WARestClient restClient) {\n         SamlIdPMetadataGeneratorConfigurationContext context =\n-            SamlIdPMetadataGeneratorConfigurationContext.builder().\n-                samlIdPMetadataLocator(samlIdPMetadataLocator(restClient)).\n-                samlIdPCertificateAndKeyWriter(samlSelfSignedCertificateWriter.getObject()).\n-                applicationContext(applicationContext).\n-                casProperties(casProperties).\n-                metadataCipherExecutor(CipherExecutor.noOpOfStringToString()).\n-                build();\n+                SamlIdPMetadataGeneratorConfigurationContext.builder().\n+                        samlIdPMetadataLocator(samlIdPMetadataLocator(restClient)).\n+                        samlIdPCertificateAndKeyWriter(samlSelfSignedCertificateWriter.getObject()).\n+                        applicationContext(ctx).\n+                        casProperties(casProperties).\n+                        metadataCipherExecutor(CipherExecutor.noOpOfStringToString()).\n+                        build();\n         return new RestfulSamlIdPMetadataGenerator(context, restClient);\n     }\n \n@@ -170,61 +190,53 @@ public SamlIdPMetadataLocator samlIdPMetadataLocator(final WARestClient restClie\n         return new RestfulSamlIdPMetadataLocator(CipherExecutor.noOpOfStringToString(), restClient);\n     }\n \n-    @Bean\n     @Autowired\n+    @Bean\n     public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient restClient) {\n         return plan -> plan.registerAuditTrailManager(new SyncopeWAAuditTrailManager(restClient));\n     }\n \n     @Autowired\n     @Bean\n-    public DelegatedClientFactoryCustomizer<Client> delegatedClientCustomizer(final WARestClient restClient) {\n+    public DelegatedClientFactoryCustomizer<Client<?>> delegatedClientCustomizer(final WARestClient restClient) {\n         return new SyncopeWASAML2ClientCustomizer(restClient);\n     }\n \n-    @Bean\n     @Autowired\n+    @Bean\n     public OneTimeTokenRepository oneTimeTokenAuthenticatorTokenRepository(final WARestClient restClient) {\n-        return new SyncopeWAGoogleMfaAuthTokenRepository(restClient,\n-            casProperties.getAuthn().getMfa().getGauth().getTimeStepSize());\n+        return new SyncopeWAGoogleMfaAuthTokenRepository(\n+                restClient, casProperties.getAuthn().getMfa().getGauth().getTimeStepSize());\n     }\n \n-    @Bean\n     @Autowired\n+    @Bean\n     public OneTimeTokenCredentialRepository googleAuthenticatorAccountRegistry(\n-        final IGoogleAuthenticator googleAuthenticatorInstance, final WARestClient restClient) {\n+            final IGoogleAuthenticator googleAuthenticatorInstance, final WARestClient restClient) {\n+\n         return new SyncopeWAGoogleMfaAuthCredentialRepository(restClient, googleAuthenticatorInstance);\n     }\n \n-    @Bean\n     @Autowired\n-    public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(final WARestClient restClient) {\n-        return new SyncopeWAOIDCJWKSGeneratorService(restClient);\n-    }\n-\n     @Bean\n-    public OpenAPI casSwaggerOpenApi() {\n-        return new OpenAPI()\n-            .info(new Info()\n-                .title(\"Apache Syncope\")\n-                .description(\"Apache Syncope \" + version())\n-                .contact(new Contact()\n-                    .name(\"The Apache Syncope community\")\n-                    .email(\"dev@syncope.apache.org\")\n-                    .url(\"http://syncope.apache.org\"))\n-                .version(version()));\n+    public OidcJsonWebKeystoreGeneratorService oidcJsonWebKeystoreGeneratorService(final WARestClient restClient) {\n+        int size = ctx.getEnvironment().\n+                getProperty(\"cas.authn.oidc.jwks.size\", int.class, 2048);\n+        JWSAlgorithm algorithm = ctx.getEnvironment().\n+                getProperty(\"cas.authn.oidc.jwks.algorithm\", JWSAlgorithm.class, JWSAlgorithm.RS256);\n+        return new SyncopeWAOIDCJWKSGeneratorService(restClient, size, algorithm);\n     }\n \n     @Bean\n     @Autowired\n     @RefreshScope\n     public U2FDeviceRepository u2fDeviceRepository(final WARestClient restClient) {\n         U2FMultifactorProperties u2f = casProperties.getAuthn().getMfa().getU2f();\n-        final LocalDate expirationDate = LocalDate.now(ZoneId.systemDefault())\n-            .minus(u2f.getExpireDevices(), DateTimeUtils.toChronoUnit(u2f.getExpireDevicesTimeUnit()));\n-        final LoadingCache<String, String> requestStorage = Caffeine.newBuilder()\n-            .expireAfterWrite(u2f.getExpireRegistrations(), u2f.getExpireRegistrationsTimeUnit())\n-            .build(key -> StringUtils.EMPTY);\n+        LocalDate expirationDate = LocalDate.now(ZoneId.systemDefault()).\n+                minus(u2f.getExpireDevices(), DateTimeUtils.toChronoUnit(u2f.getExpireDevicesTimeUnit()));\n+        LoadingCache<String, String> requestStorage = Caffeine.newBuilder().\n+                expireAfterWrite(u2f.getExpireRegistrations(), u2f.getExpireRegistrationsTimeUnit()).\n+                build(key -> StringUtils.EMPTY);\n         return new SyncopeWAU2FDeviceRepository(requestStorage, restClient, expirationDate);\n     }\n \n@@ -237,9 +249,4 @@ public KeymasterStart keymasterStart() {\n     public KeymasterStop keymasterStop() {\n         return new KeymasterStop(NetworkService.Type.WA);\n     }\n-\n-    @Bean\n-    public String version() {\n-        return applicationContext.getEnvironment().getProperty(\"version\");\n-    }\n }"},{"sha":"b243ba641140bb3dfb861aab3ba1a75d61ff51de","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/AllowedAttrReleaseMapper.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FAllowedAttrReleaseMapper.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -31,16 +31,17 @@ public class AllowedAttrReleaseMapper implements AttrReleaseMapper {\n \n     @Override\n     public RegisteredServiceAttributeReleasePolicy build(final AttrReleasePolicyConf conf) {\n+        AllowedAttrReleasePolicyConf aarpc = (AllowedAttrReleasePolicyConf) conf;\n+\n         RegisteredServiceAttributeReleasePolicy attributeReleasePolicy;\n-        if (!((AllowedAttrReleasePolicyConf) conf).getAllowedAttrs().isEmpty()) {\n-            attributeReleasePolicy = new ReturnAllowedAttributeReleasePolicy();\n-            ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).getAllowedAttributes().addAll(\n-                    ((AllowedAttrReleasePolicyConf) conf).getAllowedAttrs());\n-        } else {\n+        if (aarpc.getAllowedAttrs().isEmpty()) {\n             attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n+        } else {\n+            attributeReleasePolicy = new ReturnAllowedAttributeReleasePolicy();\n+            ((ReturnAllowedAttributeReleasePolicy) attributeReleasePolicy).\n+                    setAllowedAttributes((aarpc.getAllowedAttrs()));\n         }\n \n         return attributeReleasePolicy;\n     }\n-\n }"},{"sha":"d8870cc5006427ae29cc0a0df1f1290847909c0a","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/CASSPTOMapper.java","status":"modified","additions":21,"deletions":16,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FCASSPTOMapper.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,14 +18,13 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import org.apache.syncope.common.lib.to.client.CASSPTO;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegexRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n-\n-import org.apache.syncope.common.lib.to.client.CASSPTO;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.springframework.stereotype.Component;\n \n @ClientAppMapFor(clientAppClass = CASSPTO.class)\n@@ -34,24 +33,30 @@ public class CASSPTOMapper implements ClientAppMapper {\n \n     @Override\n     public RegisteredService build(\n-        final ClientAppTO clientAppTO,\n-        final RegisteredServiceAuthenticationPolicy authPolicy,\n-        final RegisteredServiceAccessStrategy accessStrategy,\n-        final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n+            final WAClientApp clientApp,\n+            final RegisteredServiceAuthenticationPolicy authenticationPolicy,\n+            final RegisteredServiceAccessStrategy accessStrategy,\n+            final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n-        CASSPTO rp = CASSPTO.class.cast(clientAppTO);\n+        CASSPTO cas = CASSPTO.class.cast(clientApp.getClientAppTO());\n \n         RegexRegisteredService service = new RegexRegisteredService();\n \n-        service.setServiceId(rp.getServiceId());\n-        service.setId(rp.getClientAppId());\n-        service.setName(rp.getName());\n-        service.setDescription(rp.getDescription());\n-        service.setAccessStrategy(accessStrategy);\n-        service.setAuthenticationPolicy(authPolicy);\n-        service.setAttributeReleasePolicy(attributeReleasePolicy);\n+        service.setServiceId(cas.getServiceId());\n+        service.setId(cas.getClientAppId());\n+        service.setName(cas.getName());\n+        service.setDescription(cas.getDescription());\n+\n+        if (authenticationPolicy != null) {\n+            service.setAuthenticationPolicy(authenticationPolicy);\n+        }\n+        if (accessStrategy != null) {\n+            service.setAccessStrategy(accessStrategy);\n+        }\n+        if (attributeReleasePolicy != null) {\n+            service.setAttributeReleasePolicy(attributeReleasePolicy);\n+        }\n \n         return service;\n     }\n-\n }"},{"sha":"a7945ac64664be612e8ad30cbdf27de80365c9a8","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/ClientAppMapper.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FClientAppMapper.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n@@ -27,7 +27,7 @@\n public interface ClientAppMapper {\n \n     RegisteredService build(\n-            ClientAppTO clientAppTO,\n+            WAClientApp clientApp,\n             RegisteredServiceAuthenticationPolicy authPolicy,\n             RegisteredServiceAccessStrategy accessStrategy,\n             RegisteredServiceAttributeReleasePolicy attributeReleasePolicy);"},{"sha":"26832dcf16bff84a14b4bd5793ecad990d66be23","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAccessMapper.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAccessMapper.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -35,5 +35,4 @@ public RegisteredServiceAccessStrategy build(final AccessPolicyConf conf) {\n         accessStrategy.getRequiredAttributes().putAll(conf.getRequiredAttrs());\n         return accessStrategy;\n     }\n-\n }"},{"sha":"c79acd85c2dbc841add19c0b48776c081650762d","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/DefaultAuthMapper.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FDefaultAuthMapper.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -34,16 +34,23 @@ public class DefaultAuthMapper implements AuthMapper {\n     @Override\n     public RegisteredServiceAuthenticationPolicy build(final AuthPolicyConf conf) {\n         DefaultRegisteredServiceAuthenticationPolicy authPolicy = new DefaultRegisteredServiceAuthenticationPolicy();\n-        AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n-                new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n-        criteria.setTryAll(((DefaultAuthPolicyCriteriaConf) conf.getCriteria()).isAll());\n-        authPolicy.setCriteria(criteria);\n \n-        if (conf instanceof DefaultAuthPolicyConf && !((DefaultAuthPolicyConf) conf).getAuthModules().isEmpty()) {\n-            authPolicy.setRequiredAuthenticationHandlers(\n-                    new HashSet<>(((DefaultAuthPolicyConf) conf).getAuthModules()));\n+        if (conf.getCriteria() instanceof DefaultAuthPolicyCriteriaConf) {\n+            DefaultAuthPolicyCriteriaConf policyCriteriaConf = (DefaultAuthPolicyCriteriaConf) conf.getCriteria();\n+\n+            AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria criteria =\n+                    new AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria();\n+            criteria.setTryAll(policyCriteriaConf.isAll());\n+            authPolicy.setCriteria(criteria);\n+        }\n+\n+        if (conf instanceof DefaultAuthPolicyConf) {\n+            DefaultAuthPolicyConf policyConf = (DefaultAuthPolicyConf) conf;\n+            if (!policyConf.getAuthModules().isEmpty()) {\n+                authPolicy.setRequiredAuthenticationHandlers(new HashSet<>(policyConf.getAuthModules()));\n+            }\n         }\n+\n         return authPolicy;\n     }\n-\n }"},{"sha":"63b8e2fca970e2af68323be03cd35d6eef6fd224","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPTOMapper.java","status":"modified","additions":86,"deletions":17,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,49 +19,118 @@\n package org.apache.syncope.wa.starter.mapping;\n \n import java.util.HashSet;\n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apereo.cas.configuration.CasConfigurationProperties;\n+import org.apereo.cas.oidc.claims.OidcAddressScopeAttributeReleasePolicy;\n+import org.apereo.cas.oidc.claims.OidcCustomScopeAttributeReleasePolicy;\n+import org.apereo.cas.oidc.claims.OidcEmailScopeAttributeReleasePolicy;\n+import org.apereo.cas.oidc.claims.OidcPhoneScopeAttributeReleasePolicy;\n+import org.apereo.cas.oidc.claims.OidcProfileScopeAttributeReleasePolicy;\n+import org.apereo.cas.services.ChainingAttributeReleasePolicy;\n import org.apereo.cas.services.OidcRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredServiceAuthenticationPolicy;\n+import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n+import org.apereo.cas.util.spring.ApplicationContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.stereotype.Component;\n \n @ClientAppMapFor(clientAppClass = OIDCRPTO.class)\n @Component\n public class OIDCRPTOMapper implements ClientAppMapper {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(OIDCRPTOMapper.class);\n+\n+    public static final String CUSTOM_SCOPE = \"syncope\";\n+\n     @Override\n     public RegisteredService build(\n-            final ClientAppTO clientAppTO,\n-            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final WAClientApp clientApp,\n+            final RegisteredServiceAuthenticationPolicy authenticationPolicy,\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n-        OIDCRPTO rp = OIDCRPTO.class.cast(clientAppTO);\n+        OIDCRPTO rp = OIDCRPTO.class.cast(clientApp.getClientAppTO());\n \n         OidcRegisteredService service = new OidcRegisteredService();\n-\n-        String redirectURIs = String.join(\"|\", rp.getRedirectUris());\n-        service.setServiceId(redirectURIs);\n+        service.setServiceId(Stream.concat(rp.getRedirectUris().stream(), Stream.of(rp.getLogoutUri())).\n+                filter(Objects::nonNull).\n+                collect(Collectors.joining(\"|\")));\n         service.setId(rp.getClientAppId());\n         service.setName(rp.getName());\n         service.setDescription(rp.getDescription());\n-        service.setAccessStrategy(accessStrategy);\n-        service.setAuthenticationPolicy(authPolicy);\n-        service.setAttributeReleasePolicy(attributeReleasePolicy);\n-\n+        service.setRedirectUrl(service.getServiceId());\n         service.setClientId(rp.getClientId());\n         service.setClientSecret(rp.getClientSecret());\n         service.setSignIdToken(rp.isSignIdToken());\n-        service.setJwks(rp.getJwks());\n-        service.setSubjectType(rp.getSubjectType().name());\n-        service.setRedirectUrl(redirectURIs);\n-        service.setSupportedGrantTypes((HashSet<String>) rp.getSupportedGrantTypes());\n-        service.setSupportedResponseTypes((HashSet<String>) rp.getSupportedResponseTypes());\n+        if (!service.isSignIdToken()) {\n+            service.setIdTokenSigningAlg(\"none\");\n+        }\n+        service.setJwtAccessToken(true);\n+        service.setSupportedGrantTypes(new HashSet<>(rp.getSupportedGrantTypes()));\n+        service.setSupportedResponseTypes(new HashSet<>(rp.getSupportedResponseTypes()));\n+        if (rp.getSubjectType() != null) {\n+            service.setSubjectType(rp.getSubjectType().name());\n+        }\n+        service.setLogoutUrl(rp.getLogoutUri());\n+\n+        if (authenticationPolicy != null) {\n+            service.setAuthenticationPolicy(authenticationPolicy);\n+        }\n+        if (accessStrategy != null) {\n+            service.setAccessStrategy(accessStrategy);\n+        }\n+        if (attributeReleasePolicy != null) {\n+            ChainingAttributeReleasePolicy chain = new ChainingAttributeReleasePolicy();\n+            if (attributeReleasePolicy instanceof ReturnMappedAttributeReleasePolicy) {\n+                chain.addPolicy(attributeReleasePolicy);\n+            } else {\n+                chain.addPolicy(new ReturnMappedAttributeReleasePolicy(clientApp.getReleaseAttrs()));\n+                chain.addPolicy(attributeReleasePolicy);\n+            }\n+\n+            chain.addPolicy(new OidcProfileScopeAttributeReleasePolicy());\n+            chain.addPolicy(new OidcEmailScopeAttributeReleasePolicy());\n+            chain.addPolicy(new OidcAddressScopeAttributeReleasePolicy());\n+            chain.addPolicy(new OidcPhoneScopeAttributeReleasePolicy());\n+\n+            Set<String> customClaims = clientApp.getReleaseAttrs().values().stream().\n+                    map(Objects::toString).collect(Collectors.toCollection(HashSet::new));\n+            customClaims.removeAll(OidcProfileScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n+            customClaims.removeAll(OidcEmailScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n+            customClaims.removeAll(OidcAddressScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n+            customClaims.removeAll(OidcPhoneScopeAttributeReleasePolicy.ALLOWED_CLAIMS);\n+            if (!customClaims.isEmpty()) {\n+                ApplicationContext ctx = ApplicationContextProvider.getApplicationContext();\n+                if (ctx == null) {\n+                    LOG.warn(\"Could not locate the application context to add custom claims {}\", customClaims);\n+                } else {\n+                    CasConfigurationProperties properties = ctx.getBean(CasConfigurationProperties.class);\n+                    List<String> supportedClaims = properties.getAuthn().getOidc().getClaims();\n+                    if (!supportedClaims.containsAll(customClaims)) {\n+                        properties.getAuthn().getOidc().setClaims(\n+                                Stream.concat(supportedClaims.stream(), customClaims.stream()).\n+                                        distinct().collect(Collectors.toList()));\n+                    }\n+\n+                    chain.addPolicy(new OidcCustomScopeAttributeReleasePolicy(\n+                            CUSTOM_SCOPE, customClaims.stream().collect(Collectors.toList())));\n+                }\n+            }\n+\n+            service.setAttributeReleasePolicy(chain);\n+        }\n \n         return service;\n     }\n-\n }"},{"sha":"af7c9e4343f4602cca269327cf0ee6fad2b9bd75","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/RegisteredServiceMapper.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FRegisteredServiceMapper.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -21,7 +21,6 @@\n import java.util.Map;\n import java.util.Optional;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n-import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n@@ -69,20 +68,20 @@ public RegisteredService toRegisteredService(final WAClientApp clientApp) {\n \n         RegisteredServiceAttributeReleasePolicy attributeReleasePolicy = null;\n         if (!clientApp.getReleaseAttrs().isEmpty()) {\n-            attributeReleasePolicy = new ReturnMappedAttributeReleasePolicy(clientApp.getReleaseAttrs());\n-        } else if (clientApp.getAttrReleasePolicyConf() != null) {\n-            AttrReleaseMapper attrReleasePolicyConfMapper =\n-                    attrReleasePolicyConfMappers.get(clientApp.getAttrReleasePolicyConf().getClass().getName());\n-            attributeReleasePolicy = Optional.ofNullable(attrReleasePolicyConfMapper).\n-                    map(mapper -> mapper.build(clientApp.getAttrReleasePolicyConf())).orElse(null);\n-        } else {\n-            attributeReleasePolicy = new DenyAllAttributeReleasePolicy();\n+            if (clientApp.getAttrReleasePolicyConf() == null) {\n+                attributeReleasePolicy = new ReturnMappedAttributeReleasePolicy(clientApp.getReleaseAttrs());\n+            } else {\n+                AttrReleaseMapper attrReleasePolicyConfMapper =\n+                        attrReleasePolicyConfMappers.get(clientApp.getAttrReleasePolicyConf().getClass().getName());\n+                attributeReleasePolicy = Optional.ofNullable(attrReleasePolicyConfMapper).\n+                        map(mapper -> mapper.build(clientApp.getAttrReleasePolicyConf())).orElse(null);\n+            }\n         }\n \n         ClientAppMapper clientAppMapper = clientAppTOMappers.get(clientApp.getClientAppTO().getClass().getName());\n         if (clientAppMapper == null) {\n             return null;\n         }\n-        return clientAppMapper.build(clientApp.getClientAppTO(), authPolicy, accessStrategy, attributeReleasePolicy);\n+        return clientAppMapper.build(clientApp, authPolicy, accessStrategy, attributeReleasePolicy);\n     }\n }"},{"sha":"f266dd22b2552a71e628102a780f805ce690fa35","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPTOMapper.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n-import org.apache.syncope.common.lib.to.client.ClientAppTO;\n import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.RegisteredServiceAccessStrategy;\n import org.apereo.cas.services.RegisteredServiceAttributeReleasePolicy;\n@@ -33,22 +33,19 @@ public class SAML2SPTOMapper implements ClientAppMapper {\n \n     @Override\n     public RegisteredService build(\n-            final ClientAppTO clientAppTO,\n-            final RegisteredServiceAuthenticationPolicy authPolicy,\n+            final WAClientApp clientApp,\n+            final RegisteredServiceAuthenticationPolicy authenticationPolicy,\n             final RegisteredServiceAccessStrategy accessStrategy,\n             final RegisteredServiceAttributeReleasePolicy attributeReleasePolicy) {\n \n-        SAML2SPTO sp = SAML2SPTO.class.cast(clientAppTO);\n+        SAML2SPTO sp = SAML2SPTO.class.cast(clientApp.getClientAppTO());\n \n         SamlRegisteredService service = new SamlRegisteredService();\n \n         service.setServiceId(sp.getEntityId());\n         service.setId(sp.getClientAppId());\n         service.setName(sp.getName());\n         service.setDescription(sp.getDescription());\n-        service.setAccessStrategy(accessStrategy);\n-        service.setAuthenticationPolicy(authPolicy);\n-        service.setAttributeReleasePolicy(attributeReleasePolicy);\n \n         service.setMetadataLocation(sp.getMetadataLocation());\n         service.setMetadataSignatureLocation(sp.getMetadataSignatureLocation());\n@@ -63,6 +60,16 @@ public RegisteredService build(\n         service.setAssertionAudiences(sp.getAssertionAudiences());\n         service.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n \n+        if (authenticationPolicy != null) {\n+            service.setAuthenticationPolicy(authenticationPolicy);\n+        }\n+        if (accessStrategy != null) {\n+            service.setAccessStrategy(accessStrategy);\n+        }\n+        if (attributeReleasePolicy != null) {\n+            service.setAttributeReleasePolicy(attributeReleasePolicy);\n+        }\n+\n         return service;\n     }\n }"},{"sha":"3dbea1a8e10813fba6385aeb8bc47713c20e6030","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/oidc/SyncopeWAOIDCJWKSGeneratorService.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Foidc%2FSyncopeWAOIDCJWKSGeneratorService.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -16,29 +16,35 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.oidc;\n \n-import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n-\n+import java.nio.charset.StandardCharsets;\n+import javax.ws.rs.core.GenericType;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.OIDCJWKSTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.wa.OIDCJWKSService;\n+import org.apache.syncope.common.lib.types.JWSAlgorithm;\n+import org.apache.syncope.common.rest.api.service.wa.WAOIDCJWKSService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n import org.springframework.core.io.ByteArrayResource;\n import org.springframework.core.io.Resource;\n \n-import javax.ws.rs.core.GenericType;\n-import javax.ws.rs.core.Response;\n-\n-import java.nio.charset.StandardCharsets;\n-\n public class SyncopeWAOIDCJWKSGeneratorService implements OidcJsonWebKeystoreGeneratorService {\n+\n     private final WARestClient waRestClient;\n \n-    public SyncopeWAOIDCJWKSGeneratorService(final WARestClient restClient) {\n+    private final int size;\n+\n+    private final JWSAlgorithm algorithm;\n+\n+    public SyncopeWAOIDCJWKSGeneratorService(\n+            final WARestClient restClient, final int size, final JWSAlgorithm algorithm) {\n+\n         this.waRestClient = restClient;\n+        this.size = size;\n+        this.algorithm = algorithm;\n     }\n \n     @Override\n@@ -47,19 +53,19 @@ public Resource generate() {\n             throw new RuntimeException(\"Syncope core is not yet ready\");\n         }\n \n-        OIDCJWKSService service = waRestClient.getSyncopeClient().\n-            getService(OIDCJWKSService.class);\n+        WAOIDCJWKSService service = waRestClient.getSyncopeClient().getService(WAOIDCJWKSService.class);\n         try {\n-            Response response = service.set();\n+            Response response = service.set(size, algorithm);\n             OIDCJWKSTO jwksTO = response.readEntity(new GenericType<OIDCJWKSTO>() {\n             });\n             return new ByteArrayResource(jwksTO.getJson().getBytes(StandardCharsets.UTF_8), \"OIDC JWKS\");\n-        } catch (final SyncopeClientException e) {\n+        } catch (SyncopeClientException e) {\n             if (e.getType() == ClientExceptionType.EntityExists) {\n                 OIDCJWKSTO jwksTO = service.get();\n                 return new ByteArrayResource(jwksTO.getJson().getBytes(StandardCharsets.UTF_8), \"OIDC JWKS\");\n             }\n+\n+            throw new RuntimeException(\"Unable to determine OIDC JWKS resource\", e);\n         }\n-        throw new RuntimeException(\"Unable to determine OIDC JWKS resource\");\n     }\n }"},{"sha":"704cdb115d64b74c88fb9e071c58ccd5661247a5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizer.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -16,7 +16,6 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.wa.starter.pac4j.saml;\n \n import org.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryCustomizer;\n@@ -28,7 +27,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class SyncopeWASAML2ClientCustomizer implements DelegatedClientFactoryCustomizer<Client> {\n+public class SyncopeWASAML2ClientCustomizer implements DelegatedClientFactoryCustomizer<Client<?>> {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientCustomizer.class);\n \n     private final WARestClient restClient;\n@@ -38,7 +38,7 @@ public SyncopeWASAML2ClientCustomizer(final WARestClient restClient) {\n     }\n \n     @Override\n-    public void customize(final Client client) {\n+    public void customize(final Client<?> client) {\n         if (client instanceof SAML2Client) {\n             LOG.debug(\"Customizing SAML2 client {}\", client.getName());\n             final SAML2Client saml2Client = (SAML2Client) client;"},{"sha":"bb7dfada1c77a21bcd971517b97b7a9fa4de38fe","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGenerator.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGenerator.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.metadata.keystore.BaseSAML2KeystoreGenerator;\n@@ -38,6 +37,7 @@\n import java.security.PrivateKey;\n import java.security.cert.X509Certificate;\n import java.util.Base64;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n \n public class SyncopeWASAML2ClientKeystoreGenerator extends BaseSAML2KeystoreGenerator {\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientKeystoreGenerator.class);\n@@ -67,8 +67,8 @@ protected void store(final KeyStore ks, final X509Certificate certificate,\n             String encodedKeystore = Base64.getEncoder().encodeToString(out.toByteArray());\n             LOG.debug(\"Encoded keystore {}\", encodedKeystore);\n \n-            SAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n-                getService(SAML2SPKeystoreService.class);\n+            WASAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n+                getService(WASAML2SPKeystoreService.class);\n \n             SAML2SPKeystoreTO keystoreTO = new SAML2SPKeystoreTO.Builder().\n                 keystore(encodedKeystore).\n@@ -94,8 +94,8 @@ protected void store(final KeyStore ks, final X509Certificate certificate,\n     @Override\n     public InputStream retrieve() throws Exception {\n         try {\n-            SAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n-                getService(SAML2SPKeystoreService.class);\n+            WASAML2SPKeystoreService keystoreService = restClient.getSyncopeClient().\n+                getService(WASAML2SPKeystoreService.class);\n             SAML2SPKeystoreTO keystoreTO = keystoreService.getByOwner(saml2Client.getName());\n             LOG.debug(\"Retrieved keystore {}\", keystoreTO);\n             byte[] decode = Base64.getDecoder().decode(keystoreTO.getKeystore());"},{"sha":"a05d77fc5385c5025da1ae8b11552bd066457a04","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGenerator.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGenerator.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.opensaml.saml.metadata.resolver.impl.AbstractBatchMetadataResolver;\n import org.pac4j.saml.client.SAML2Client;\n@@ -32,6 +31,7 @@\n import org.springframework.core.io.Resource;\n \n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n \n public class SyncopeWASAML2ClientMetadataGenerator extends BaseSAML2MetadataGenerator {\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2ClientMetadataGenerator.class);\n@@ -52,8 +52,8 @@ protected AbstractBatchMetadataResolver createMetadataResolver(final Resource me\n \n     @Override\n     public boolean storeMetadata(final String metadata, final Resource resource, final boolean force) throws Exception {\n-        SAML2SPMetadataService metadataService = restClient.getSyncopeClient().\n-            getService(SAML2SPMetadataService.class);\n+        WASAML2SPMetadataService metadataService = restClient.getSyncopeClient().\n+            getService(WASAML2SPMetadataService.class);\n         SAML2SPMetadataTO metadataTO = new SAML2SPMetadataTO.Builder().\n             metadata(metadata).\n             owner(saml2Client.getName())."},{"sha":"f2932916d689df41e63bd0a91b3364e3ba32a5a7","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolver.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolver.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -21,14 +21,14 @@\n \n import net.shibboleth.utilities.java.support.resolver.ResolverException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.opensaml.saml.metadata.resolver.impl.AbstractReloadingMetadataResolver;\n import org.pac4j.saml.client.SAML2Client;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.nio.charset.StandardCharsets;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n \n public class SyncopeWASAML2MetadataResolver extends AbstractReloadingMetadataResolver {\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASAML2MetadataResolver.class);\n@@ -50,8 +50,8 @@ protected String getMetadataIdentifier() {\n     @Override\n     protected byte[] fetchMetadata() throws ResolverException {\n         try {\n-            SAML2SPMetadataService metadataService = restClient.getSyncopeClient().\n-                getService(SAML2SPMetadataService.class);\n+            WASAML2SPMetadataService metadataService = restClient.getSyncopeClient().\n+                getService(WASAML2SPMetadataService.class);\n             SAML2SPMetadataTO metadataTO = metadataService.getByOwner(saml2Client.getName());\n             return metadataTO.getMetadata().getBytes(StandardCharsets.UTF_8);\n         } catch (final Exception e) {"},{"sha":"971967691be425f634d60271235702959950f133","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataGenerator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataGenerator.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -21,7 +21,6 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.generator.BaseSamlIdPMetadataGenerator;\n import org.apereo.cas.support.saml.idp.metadata.generator.SamlIdPMetadataGeneratorConfigurationContext;\n@@ -32,6 +31,7 @@\n import org.springframework.http.HttpStatus;\n import javax.ws.rs.core.Response;\n import java.util.Optional;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n \n public class RestfulSamlIdPMetadataGenerator extends BaseSamlIdPMetadataGenerator {\n \n@@ -68,7 +68,7 @@ protected SamlIdPMetadataDocument finalizeMetadataDocument(\n         SyncopeClient client = getSyncopeClient();\n         Response response = null;\n         try {\n-            response = client.getService(SAML2IdPMetadataService.class).set(metadataTO);\n+            response = client.getService(WASAML2IdPMetadataService.class).set(metadataTO);\n         } catch (Exception ex) {\n             LOG.warn(\"While generating SAML2 IdP metadata document\", ex);\n         }"},{"sha":"f00bba552cf067652dc7a50830a1bafce0e9efb5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/saml/idp/metadata/RestfulSamlIdPMetadataLocator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsaml%2Fidp%2Fmetadata%2FRestfulSamlIdPMetadataLocator.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2IdPMetadataTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.saml.idp.metadata.locator.AbstractSamlIdPMetadataLocator;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n@@ -31,6 +30,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import java.util.Optional;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2IdPMetadataService;\n \n public class RestfulSamlIdPMetadataLocator extends AbstractSamlIdPMetadataLocator {\n \n@@ -58,7 +58,7 @@ private static String getAppliesToFor(final Optional<SamlRegisteredService> resu\n     public SamlIdPMetadataDocument fetchInternal(final Optional<SamlRegisteredService> registeredService) {\n         try {\n             LOG.info(\"Locating SAML2 IdP metadata document\");\n-            SAML2IdPMetadataTO saml2IdPMetadataTO = getSyncopeClient().getService(SAML2IdPMetadataService.class).\n+            SAML2IdPMetadataTO saml2IdPMetadataTO = getSyncopeClient().getService(WASAML2IdPMetadataService.class).\n                 getByOwner(getAppliesToFor(registeredService));\n \n             if (saml2IdPMetadataTO == null) {"},{"sha":"eb69a870b46255687c99e18bf92d77411b7e2a6e","filename":"wa/starter/src/main/resources/wa.properties","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fresources%2Fwa.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -21,13 +21,14 @@ useGZIPCompression=true\n \n # Conf directories\n conf.directory=${conf.directory}\n-cas.standalone.configuration-directory=${conf.directory}\n-cas.authn.oidc.jwks.jwks-file=file:${conf.directory}/oidc.keystore\n+cas.standalone.configurationDirectory=${conf.directory}\n \n cas.server.name=http://localhost:8080\n cas.server.prefix=${cas.server.name}/syncope-wa\n cas.server.scope=syncope.org\n \n+cas.logout.follow-service-redirects=true\n+\n cas.authn.saml-idp.entity-id=https://syncope.apache.org/saml\n \n # Disable access to the login endpoint\n@@ -49,3 +50,8 @@ cas.monitor.endpoints.endpoint.defaults.access=AUTHENTICATED\n \n spring.security.user.name=${anonymousUser}\n spring.security.user.password=${anonymousKey}\n+\n+springdoc.show-actuator=true\n+springdoc.model-and-view-allowed=true\n+springdoc.writer-with-default-pretty-printer=true\n+springdoc.swagger-ui.displayRequestDuration=true"},{"sha":"ec8b238b8173f809a237cec13e612055841aafd0","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/BasicTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FBasicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FBasicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FBasicTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -88,7 +88,7 @@ public void loginLogout() throws IOException {\n         // 3. check authentication results\n         assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());\n \n-        Header[] cookie = response.getHeaders(\"Set-Cookie\");\n+        Header[] cookie = response.getHeaders(HttpHeaders.SET_COOKIE);\n         assertNotNull(cookie);\n         assertTrue(cookie.length > 0);\n         assertEquals(1, Stream.of(cookie).filter(item -> item.getValue().startsWith(\"TGC\")).count());"},{"sha":"d86d588d332fb7e7b9bceb3af140e63f023dad2d","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java","status":"modified","additions":18,"deletions":27,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.wa.starter;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n@@ -41,11 +40,10 @@\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.services.AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria;\n-import org.apereo.cas.services.DenyAllAttributeReleasePolicy;\n+import org.apereo.cas.services.ChainingAttributeReleasePolicy;\n import org.apereo.cas.services.OidcRegisteredService;\n import org.apereo.cas.services.RegisteredService;\n import org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy;\n-import org.apereo.cas.services.ReturnMappedAttributeReleasePolicy;\n import org.apereo.cas.services.ServicesManager;\n import org.apereo.cas.support.saml.services.SamlRegisteredService;\n import org.apereo.cas.util.RandomUtils;\n@@ -89,9 +87,11 @@ protected SAML2SPTO buildSAML2SP() {\n         return saml2spto;\n     }\n \n-    private static void addAttributes(final boolean withReleaseAttributes,\n+    private static void addAttributes(\n+            final boolean withReleaseAttributes,\n             final boolean withAttrReleasePolicy,\n             final WAClientApp waClientApp) {\n+\n         DefaultAuthPolicyConf authPolicyConf = new DefaultAuthPolicyConf();\n         DefaultAuthPolicyCriteriaConf criteria = new DefaultAuthPolicyCriteriaConf();\n         criteria.setAll(true);\n@@ -136,7 +136,7 @@ public void addClientApp() {\n         waClientApp.setClientAppTO(buildOIDCRP());\n         Long clientAppId = waClientApp.getClientAppTO().getClientAppId();\n         addAttributes(true, true, waClientApp);\n-        \n+\n         SyncopeCoreTestingServer.APPS.add(waClientApp);\n         List<WAClientApp> apps = service.list();\n         assertEquals(1, apps.size());\n@@ -151,18 +151,15 @@ public void addClientApp() {\n         RegisteredService found = servicesManager.findServiceBy(clientAppId);\n         assertNotNull(found);\n         assertTrue(found instanceof OidcRegisteredService);\n-        OidcRegisteredService oidcRegisteredService = OidcRegisteredService.class.cast(found);\n+        OidcRegisteredService oidc = OidcRegisteredService.class.cast(found);\n         OIDCRPTO oidcrpto = OIDCRPTO.class.cast(waClientApp.getClientAppTO());\n-        assertEquals(\"uri1|uri2\", oidcRegisteredService.getServiceId());\n-        assertEquals(oidcrpto.getClientId(), oidcRegisteredService.getClientId());\n-        assertEquals(oidcrpto.getClientSecret(), oidcRegisteredService.getClientSecret());\n-        assertTrue(oidcRegisteredService.getAuthenticationPolicy().getRequiredAuthenticationHandlers().\n-                contains(\"TestAuthModule\"));\n-        assertTrue(((AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria) oidcRegisteredService.\n+        assertEquals(\"uri1|uri2\", oidc.getServiceId());\n+        assertEquals(oidcrpto.getClientId(), oidc.getClientId());\n+        assertEquals(oidcrpto.getClientSecret(), oidc.getClientSecret());\n+        assertTrue(oidc.getAuthenticationPolicy().getRequiredAuthenticationHandlers().contains(\"TestAuthModule\"));\n+        assertTrue(((AnyAuthenticationHandlerRegisteredServiceAuthenticationPolicyCriteria) oidc.\n                 getAuthenticationPolicy().getCriteria()).isTryAll());\n-        assertTrue(oidcRegisteredService.getAttributeReleasePolicy() instanceof ReturnMappedAttributeReleasePolicy);\n-        assertFalse(oidcRegisteredService.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n-        assertFalse(oidcRegisteredService.getAttributeReleasePolicy() instanceof DenyAllAttributeReleasePolicy);\n+        assertTrue(oidc.getAttributeReleasePolicy() instanceof ChainingAttributeReleasePolicy);\n \n         // 5. more client with different attributes \n         waClientApp = new WAClientApp();\n@@ -179,16 +176,13 @@ public void addClientApp() {\n \n         found = servicesManager.findServiceBy(clientAppId);\n         assertTrue(found instanceof SamlRegisteredService);\n-        SamlRegisteredService samlRegisteredService = SamlRegisteredService.class.cast(found);\n+        SamlRegisteredService saml = SamlRegisteredService.class.cast(found);\n         SAML2SPTO samlspto = SAML2SPTO.class.cast(waClientApp.getClientAppTO());\n-        assertEquals(samlspto.getMetadataLocation(), samlRegisteredService.getMetadataLocation());\n-        assertEquals(samlspto.getEntityId(), samlRegisteredService.getServiceId());\n-        assertTrue(samlRegisteredService.getAuthenticationPolicy().getRequiredAuthenticationHandlers().\n-                contains(\"TestAuthModule\"));\n+        assertEquals(samlspto.getMetadataLocation(), saml.getMetadataLocation());\n+        assertEquals(samlspto.getEntityId(), saml.getServiceId());\n+        assertTrue(saml.getAuthenticationPolicy().getRequiredAuthenticationHandlers().contains(\"TestAuthModule\"));\n         assertNotNull(found.getAccessStrategy());\n-        assertFalse(samlRegisteredService.getAttributeReleasePolicy() instanceof ReturnMappedAttributeReleasePolicy);\n-        assertTrue(samlRegisteredService.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n-        assertFalse(samlRegisteredService.getAttributeReleasePolicy() instanceof DenyAllAttributeReleasePolicy);\n+        assertTrue(saml.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n \n         waClientApp = new WAClientApp();\n         waClientApp.setClientAppTO(buildSAML2SP());\n@@ -203,9 +197,6 @@ public void addClientApp() {\n         assertEquals(5, load.size());\n \n         found = servicesManager.findServiceBy(clientAppId);\n-        assertFalse(found.getAttributeReleasePolicy() instanceof ReturnMappedAttributeReleasePolicy);\n-        assertFalse(found.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n-        assertTrue(found.getAttributeReleasePolicy() instanceof DenyAllAttributeReleasePolicy);\n-\n+        assertTrue(found.getAttributeReleasePolicy() instanceof ReturnAllowedAttributeReleasePolicy);\n     }\n }"},{"sha":"339f6ec55900793ae7a1e1163c221a1bac545df6","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientCustomizerTest.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientCustomizerTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -23,8 +23,6 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.pac4j.saml.client.SAML2Client;\n@@ -41,6 +39,9 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n+\n public class SyncopeWASAML2ClientCustomizerTest extends BaseSyncopeWASAML2ClientTest {\n \n     @Test\n@@ -50,7 +51,7 @@ public void customize() throws Exception {\n             .keystore(getKeystoreAsString())\n             .owner(\"CAS\")\n             .build();\n-        SAML2SPKeystoreService saml2SPKeystoreService = mock(SAML2SPKeystoreService.class);\n+        WASAML2SPKeystoreService saml2SPKeystoreService = mock(WASAML2SPKeystoreService.class);\n         when(saml2SPKeystoreService.getByOwner(anyString())).thenReturn(keystoreTO);\n         when(saml2SPKeystoreService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build());\n \n@@ -59,15 +60,15 @@ public void customize() throws Exception {\n             .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n             .build();\n \n-        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        WASAML2SPMetadataService saml2SPMetadataService = mock(WASAML2SPMetadataService.class);\n         when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n         when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build());\n \n         WARestClient restClient = mock(WARestClient.class);\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(SAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n-        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(WASAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n+        when(syncopeClient.getService(WASAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n \n         SyncopeWASAML2ClientCustomizer customizer = new SyncopeWASAML2ClientCustomizer(restClient);"},{"sha":"e609994e19c2fe72ecf7bfcea59bb1194d3dac11","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientKeystoreGeneratorTest.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientKeystoreGeneratorTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -24,8 +24,6 @@\n \n import org.apache.syncope.common.lib.to.SAML2SPKeystoreTO;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPKeystoreService;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.function.Executable;\n@@ -46,6 +44,9 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPKeystoreService;\n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n+\n public class SyncopeWASAML2ClientKeystoreGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n     private static WARestClient getWaRestClient(final Response response) throws Exception {\n         WARestClient restClient = mock(WARestClient.class);\n@@ -54,7 +55,7 @@ private static WARestClient getWaRestClient(final Response response) throws Exce\n             .keystore(getKeystoreAsString())\n             .owner(\"CAS\")\n             .build();\n-        SAML2SPKeystoreService saml2SPKeystoreService = mock(SAML2SPKeystoreService.class);\n+        WASAML2SPKeystoreService saml2SPKeystoreService = mock(WASAML2SPKeystoreService.class);\n         when(saml2SPKeystoreService.getByOwner(anyString())).thenReturn(keystoreTO);\n         when(saml2SPKeystoreService.set(any())).thenReturn(response);\n \n@@ -63,14 +64,14 @@ private static WARestClient getWaRestClient(final Response response) throws Exce\n             .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n             .build();\n \n-        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        WASAML2SPMetadataService saml2SPMetadataService = mock(WASAML2SPMetadataService.class);\n         when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n         when(saml2SPMetadataService.set(any())).thenReturn(response);\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n \n-        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n-        when(syncopeClient.getService(SAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n+        when(syncopeClient.getService(WASAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(WASAML2SPKeystoreService.class)).thenReturn(saml2SPKeystoreService);\n \n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n         return restClient;"},{"sha":"2acf6fb5e2235a55c3fa93f8c9c5bf2dceddca0d","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2ClientMetadataGeneratorTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2ClientMetadataGeneratorTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -23,7 +23,6 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n@@ -45,6 +44,8 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n+\n public class SyncopeWASAML2ClientMetadataGeneratorTest extends BaseSyncopeWASAML2ClientTest {\n     private static WARestClient getWaRestClient(final Response response) throws IOException {\n         WARestClient restClient = mock(WARestClient.class);\n@@ -53,12 +54,12 @@ private static WARestClient getWaRestClient(final Response response) throws IOEx\n             .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n             .build();\n \n-        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        WASAML2SPMetadataService saml2SPMetadataService = mock(WASAML2SPMetadataService.class);\n         when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n         when(saml2SPMetadataService.set(any())).thenReturn(response);\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(WASAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n         return restClient;\n     }"},{"sha":"9a2b27ba6eaa9902b5415a4c1b855015974607b3","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/pac4j/saml/SyncopeWASAML2MetadataResolverTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fpac4j%2Fsaml%2FSyncopeWASAML2MetadataResolverTest.java?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,7 +22,6 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.to.SAML2SPMetadataTO;\n-import org.apache.syncope.common.rest.api.service.wa.SAML2SPMetadataService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.junit.jupiter.api.Test;\n import org.pac4j.saml.client.SAML2Client;\n@@ -40,6 +39,8 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import org.apache.syncope.common.rest.api.service.wa.WASAML2SPMetadataService;\n+\n public class SyncopeWASAML2MetadataResolverTest extends BaseSyncopeWASAML2ClientTest {\n     @Test\n     public void fetchMetadata() throws Exception {\n@@ -53,12 +54,12 @@ public void fetchMetadata() throws Exception {\n             .metadata(IOUtils.toString(new ClassPathResource(\"sp-metadata.xml\").getInputStream(), StandardCharsets.UTF_8))\n             .build();\n \n-        SAML2SPMetadataService saml2SPMetadataService = mock(SAML2SPMetadataService.class);\n+        WASAML2SPMetadataService saml2SPMetadataService = mock(WASAML2SPMetadataService.class);\n         when(saml2SPMetadataService.getByOwner(anyString())).thenReturn(metadataTO);\n         when(saml2SPMetadataService.set(any())).thenReturn(Response.created(new URI(\"http://localhost:9080/syncop-wa\")).build());\n \n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        when(syncopeClient.getService(SAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n+        when(syncopeClient.getService(WASAML2SPMetadataService.class)).thenReturn(saml2SPMetadataService);\n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n \n         SyncopeWASAML2MetadataResolver resolver = new SyncopeWASAML2MetadataResolver(restClient, client);"},{"sha":"13a83393a9124bf6ec36540556b4808abd47e206","filename":"wa/starter/src/test/resources/debug/application-debug.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fapplication-debug.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","previous_filename":"wa/starter/src/test/resources/dev/application-dev.properties"},{"sha":"033fe3b8cdc122c28c9d2c96c62b4aaeab664fc4","filename":"wa/starter/src/test/resources/debug/keymaster.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fkeymaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fkeymaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fkeymaster.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+keymaster.address=http://localhost:9080/syncope/rest/keymaster\n+keymaster.username=${anonymousUser}\n+keymaster.password=${anonymousKey}"},{"sha":"1e1393fd278d648bb535b61781680d23b9d49bdf","filename":"wa/starter/src/test/resources/debug/log4j2.xml","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Flog4j2.xml?ref=278216e8b102d6accb5343c08d882d6f175374fa","previous_filename":"wa/starter/src/test/resources/dev/log4j2.xml"},{"sha":"c44903d908e23e144cf4815ed27d9af6c27d898f","filename":"wa/starter/src/test/resources/debug/wa.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/278216e8b102d6accb5343c08d882d6f175374fa/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fresources%2Fdebug%2Fwa.properties?ref=278216e8b102d6accb5343c08d882d6f175374fa","patch":"@@ -22,14 +22,14 @@ useGZIPCompression=true\n # Conf directories\n conf.directory=${conf.directory}\n cas.standalone.configurationDirectory=${conf.directory}\n-cas.authn.oidc.jwks.jwks-file=file:${conf.directory}/oidc.keystore\n \n cas.server.name=http://localhost:8080\n cas.server.prefix=${cas.server.name}/syncope-wa\n cas.server.scope=syncope.org\n cas.authn.syncope.url=http://localhost:9080/syncope/rest/\n \n cas.tgc.secure=false\n+cas.logout.follow-service-redirects=true\n \n cas.authn.saml-idp.entity-id=https://syncope.apache.org/saml\n ","previous_filename":"wa/starter/src/test/resources/dev/wa.properties"}]}