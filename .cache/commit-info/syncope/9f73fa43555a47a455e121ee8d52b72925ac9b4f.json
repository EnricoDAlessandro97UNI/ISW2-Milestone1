{"sha":"9f73fa43555a47a455e121ee8d52b72925ac9b4f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlmNzNmYTQzNTU1YTQ3YTQ1NWUxMjFlZThkNTJiNzI5MjVhYzliNGY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-18T08:48:31Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-18T08:48:31Z"},"message":"[SYNCOPE-694] Implementation completed","tree":{"sha":"9c20f9a6508ff87c0d74dc331f6210b832bdc1de","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9c20f9a6508ff87c0d74dc331f6210b832bdc1de"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9f73fa43555a47a455e121ee8d52b72925ac9b4f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9f73fa43555a47a455e121ee8d52b72925ac9b4f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9f73fa43555a47a455e121ee8d52b72925ac9b4f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9f73fa43555a47a455e121ee8d52b72925ac9b4f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea"}],"stats":{"total":7183,"additions":3921,"deletions":3262},"files":[{"sha":"73da6a7e9e592bfa85265ef5979ed2cad66fb28c","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.ImagePanel;\n import org.apache.syncope.client.console.rest.AbstractAnyRestClient;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -139,28 +139,28 @@ private String getConnObjectLink(final ConnObjectTO objectTO) {\n                 : null;\n     }\n \n-    public static StatusMod buildStatusMod(final Collection<StatusBean> statuses) {\n-        return buildStatusMod(statuses, null);\n+    public static StatusPatch buildStatusPatch(final Collection<StatusBean> statuses) {\n+        return buildStatusPatch(statuses, null);\n     }\n \n-    public static StatusMod buildStatusMod(final Collection<StatusBean> statuses, final Boolean enable) {\n-        StatusMod statusMod = new StatusMod();\n-        statusMod.setOnSyncope(false);\n+    public static StatusPatch buildStatusPatch(final Collection<StatusBean> statuses, final Boolean enable) {\n+        StatusPatch statusPatch = new StatusPatch();\n+        statusPatch.setOnSyncope(false);\n \n         for (StatusBean status : statuses) {\n             if (enable == null\n                     || (enable && !status.getStatus().isActive()) || (!enable && status.getStatus().isActive())) {\n \n                 if (\"syncope\".equalsIgnoreCase(status.getResourceName())) {\n-                    statusMod.setOnSyncope(true);\n+                    statusPatch.setOnSyncope(true);\n                 } else {\n-                    statusMod.getResources().add(status.getResourceName());\n+                    statusPatch.getResources().add(status.getResourceName());\n                 }\n \n             }\n         }\n \n-        return statusMod;\n+        return statusPatch;\n     }\n \n     public ConnObjectTO getConnObjectTO("},{"sha":"9bd1484fd2f6c921bc0528bc4b26552b81a6f1f2","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/ProvisioningModalPage.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -36,7 +36,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.wrap.AbstractWrappable;\n import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.wicket.PageReference;\n@@ -137,7 +137,7 @@ public void populateItem(\n             @Override\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 try {\n-                    bulkAssociationAction(target, ResourceDeassociationActionType.UNLINK, table, columns);\n+                    bulkAssociationAction(target, ResourceDeassociationAction.UNLINK, table, columns);\n                 } catch (Exception e) {\n                     LOG.error(\"Error unlinkink resources\", e);\n                     error(getString(Constants.ERROR) + \": \" + e.getMessage());\n@@ -153,7 +153,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 try {\n-                    bulkAssociationAction(target, ResourceDeassociationActionType.DEPROVISION, table, columns);\n+                    bulkAssociationAction(target, ResourceDeassociationAction.DEPROVISION, table, columns);\n                 } catch (Exception e) {\n                     LOG.error(\"Error de-provisioning user\", e);\n                     error(getString(Constants.ERROR) + \": \" + e.getMessage());\n@@ -169,7 +169,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                 try {\n-                    bulkAssociationAction(target, ResourceDeassociationActionType.UNASSIGN, table, columns);\n+                    bulkAssociationAction(target, ResourceDeassociationAction.UNASSIGN, table, columns);\n                 } catch (Exception e) {\n                     LOG.error(\"Error unassigning resources\", e);\n                     error(getString(Constants.ERROR) + \": \" + e.getMessage());\n@@ -227,7 +227,7 @@ public List<StatusBean> getStatusBeans() {\n \n     private void bulkAssociationAction(\n             final AjaxRequestTarget target,\n-            final ResourceDeassociationActionType type,\n+            final ResourceDeassociationAction type,\n             final ActionDataTablePanel<StatusBean, String> table,\n             final List<IColumn<StatusBean, String>> columns) {\n "},{"sha":"885e44c3c824c0d62e2c454be116b96ba96f423e","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractAnyRestClient.java","status":"modified","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractAnyRestClient.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -19,10 +19,18 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.List;\n+import org.apache.syncope.client.console.commons.status.StatusBean;\n+import org.apache.syncope.client.console.commons.status.StatusUtils;\n+import org.apache.syncope.common.lib.patch.AssociationPatch;\n+import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n public abstract class AbstractAnyRestClient extends BaseRestClient {\n@@ -44,4 +52,114 @@ public abstract List<? extends AnyTO> search(\n     public abstract AnyTO delete(String etag, Long key);\n \n     public abstract BulkActionResult bulkAction(BulkAction action);\n+\n+    protected abstract Class<? extends AnyService<?, ?>> getAnyServiceClass();\n+\n+    public void unlink(final String etag, final long key, final List<StatusBean> statuses) {\n+        synchronized (this) {\n+            AnyService<?, ?> service = getService(etag, getAnyServiceClass());\n+\n+            DeassociationPatch deassociationPatch = new DeassociationPatch();\n+            deassociationPatch.setKey(key);\n+            deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n+            deassociationPatch.getResources().addAll(StatusUtils.buildStatusPatch(statuses).getResources());\n+\n+            service.deassociate(deassociationPatch);\n+\n+            resetClient(getAnyServiceClass());\n+        }\n+    }\n+\n+    public void link(final String etag, final long key, final List<StatusBean> statuses) {\n+        synchronized (this) {\n+            AnyService<?, ?> service = getService(etag, getAnyServiceClass());\n+\n+            StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses);\n+\n+            AssociationPatch associationPatch = new AssociationPatch();\n+            associationPatch.setKey(key);\n+            associationPatch.setAction(ResourceAssociationAction.LINK);\n+            associationPatch.setOnSyncope(statusPatch.isOnSyncope());\n+            associationPatch.getResources().addAll(statusPatch.getResources());\n+\n+            service.associate(associationPatch);\n+\n+            resetClient(getAnyServiceClass());\n+        }\n+    }\n+\n+    public BulkActionResult deprovision(final String etag, final long key, final List<StatusBean> statuses) {\n+        BulkActionResult result;\n+        synchronized (this) {\n+            AnyService<?, ?> service = getService(etag, getAnyServiceClass());\n+\n+            DeassociationPatch deassociationPatch = new DeassociationPatch();\n+            deassociationPatch.setKey(key);\n+            deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n+            deassociationPatch.getResources().addAll(StatusUtils.buildStatusPatch(statuses).getResources());\n+\n+            result = service.deassociate(deassociationPatch).readEntity(BulkActionResult.class);\n+\n+            resetClient(getAnyServiceClass());\n+        }\n+        return result;\n+    }\n+\n+    public BulkActionResult provision(final String etag, final long key, final List<StatusBean> statuses) {\n+        BulkActionResult result;\n+        synchronized (this) {\n+            AnyService<?, ?> service = getService(etag, getAnyServiceClass());\n+\n+            StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses);\n+\n+            AssociationPatch associationPatch = new AssociationPatch();\n+            associationPatch.setKey(key);\n+            associationPatch.setAction(ResourceAssociationAction.PROVISION);\n+            associationPatch.setOnSyncope(statusPatch.isOnSyncope());\n+            associationPatch.getResources().addAll(statusPatch.getResources());\n+\n+            result = service.associate(associationPatch).readEntity(BulkActionResult.class);\n+\n+            resetClient(getAnyServiceClass());\n+        }\n+        return result;\n+    }\n+\n+    public BulkActionResult unassign(final String etag, final long key, final List<StatusBean> statuses) {\n+        BulkActionResult result;\n+        synchronized (this) {\n+            AnyService<?, ?> service = getService(etag, getAnyServiceClass());\n+\n+            DeassociationPatch deassociationPatch = new DeassociationPatch();\n+            deassociationPatch.setKey(key);\n+            deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n+            deassociationPatch.getResources().addAll(StatusUtils.buildStatusPatch(statuses).getResources());\n+\n+            result = service.deassociate(deassociationPatch).readEntity(BulkActionResult.class);\n+\n+            resetClient(getAnyServiceClass());\n+        }\n+        return result;\n+    }\n+\n+    public BulkActionResult assign(final String etag, final long key, final List<StatusBean> statuses) {\n+        BulkActionResult result;\n+        synchronized (this) {\n+            AnyService<?, ?> service = getService(etag, getAnyServiceClass());\n+\n+            StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses);\n+\n+            AssociationPatch associationPatch = new AssociationPatch();\n+            associationPatch.setKey(key);\n+            associationPatch.setAction(ResourceAssociationAction.ASSIGN);\n+            associationPatch.setOnSyncope(statusPatch.isOnSyncope());\n+            associationPatch.getResources().addAll(statusPatch.getResources());\n+\n+            result = service.associate(associationPatch).readEntity(BulkActionResult.class);\n+\n+            resetClient(getAnyServiceClass());\n+        }\n+        return result;\n+    }\n+\n }"},{"sha":"d3d18c8c656da467d85428419b6713d2c07740c8","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -161,7 +161,8 @@ public boolean check(final ConnInstanceTO connectorTO) {\n \n         boolean check = false;\n         try {\n-            check = getService(ConnectorService.class).check(toBeChecked).getElement();\n+            getService(ConnectorService.class).check(toBeChecked);\n+            check = true;\n         } catch (Exception e) {\n             LOG.error(\"While checking {}\", toBeChecked, e);\n         }\n@@ -172,7 +173,8 @@ public boolean check(final ConnInstanceTO connectorTO) {\n     public boolean check(final ResourceTO resourceTO) {\n         boolean check = false;\n         try {\n-            check = getService(ResourceService.class).check(resourceTO).getElement();\n+            getService(ResourceService.class).check(resourceTO);\n+            check = true;\n         } catch (Exception e) {\n             LOG.error(\"Connector not found {}\", resourceTO.getConnector(), e);\n         }"},{"sha":"0d2d040ff5509263dc56af137c891f0011e36bf6","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/GroupRestClient.java","status":"modified","additions":9,"deletions":88,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FGroupRestClient.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,20 +21,14 @@\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n-import org.apache.syncope.client.console.commons.status.StatusBean;\n-import org.apache.syncope.client.console.commons.status.StatusUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n-import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -48,6 +42,11 @@ public class GroupRestClient extends AbstractAnyRestClient {\n \n     private static final long serialVersionUID = -8549081557283519638L;\n \n+    @Override\n+    protected Class<? extends AnyService<?, ?>> getAnyServiceClass() {\n+        return GroupService.class;\n+    }\n+\n     @Override\n     public int count(final String realm) {\n         return getService(GroupService.class).\n@@ -94,11 +93,11 @@ public GroupTO read(final Long key) {\n         return getService(GroupService.class).read(key);\n     }\n \n-    public GroupTO update(final String etag, final GroupMod groupMod) {\n+    public GroupTO update(final String etag, final GroupPatch groupPatch) {\n         GroupTO result;\n         synchronized (this) {\n             GroupService service = getService(etag, GroupService.class);\n-            result = service.update(groupMod).readEntity(GroupTO.class);\n+            result = service.update(groupPatch).readEntity(GroupTO.class);\n             resetClient(GroupService.class);\n         }\n         return result;\n@@ -120,82 +119,4 @@ public BulkActionResult bulkAction(final BulkAction action) {\n         return getService(GroupService.class).bulk(action);\n     }\n \n-    public void unlink(final String etag, final long groupKey, final List<StatusBean> statuses) {\n-        synchronized (this) {\n-            GroupService service = getService(etag, GroupService.class);\n-            service.deassociate(groupKey, ResourceDeassociationActionType.UNLINK,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n-            resetClient(GroupService.class);\n-        }\n-    }\n-\n-    public void link(final String etag, final long groupKey, final List<StatusBean> statuses) {\n-        synchronized (this) {\n-            GroupService service = getService(etag, GroupService.class);\n-\n-            ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-            associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n-            service.associate(groupKey, ResourceAssociationAction.LINK, associationMod);\n-\n-            resetClient(GroupService.class);\n-        }\n-    }\n-\n-    public BulkActionResult deprovision(final String etag, final long groupKey, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            GroupService service = getService(etag, GroupService.class);\n-            result = service.deassociate(groupKey, ResourceDeassociationActionType.DEPROVISION,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class)).\n-                    readEntity(BulkActionResult.class);\n-            resetClient(GroupService.class);\n-        }\n-        return result;\n-    }\n-\n-    public BulkActionResult provision(final String etag, final long groupKey, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            GroupService service = getService(etag, GroupService.class);\n-\n-            ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-            associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n-\n-            result = service.associate(groupKey, ResourceAssociationAction.PROVISION, associationMod).\n-                    readEntity(BulkActionResult.class);\n-            resetClient(GroupService.class);\n-        }\n-        return result;\n-    }\n-\n-    public BulkActionResult unassign(final String etag, final long groupKey, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            GroupService service = getService(etag, GroupService.class);\n-            result = service.deassociate(groupKey, ResourceDeassociationActionType.UNASSIGN,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class)).\n-                    readEntity(BulkActionResult.class);\n-            resetClient(GroupService.class);\n-        }\n-        return result;\n-    }\n-\n-    public BulkActionResult assign(final String etag, final long groupKey, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            GroupService service = getService(etag, GroupService.class);\n-\n-            ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-            associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n-\n-            result = service.associate(groupKey, ResourceAssociationAction.ASSIGN, associationMod).\n-                    readEntity(BulkActionResult.class);\n-\n-            resetClient(GroupService.class);\n-        }\n-        return result;\n-    }\n }"},{"sha":"5efa11949cc2c042c876512229585e9d36ef0654","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.wrap.AnyKey;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.springframework.stereotype.Component;\n@@ -82,7 +82,7 @@ public BulkActionResult bulkAction(final BulkAction action) {\n \n     public BulkActionResult bulkAssociationAction(\n             final String resourceName, final String anyTypeName,\n-            final ResourceDeassociationActionType type, final List<AnyKey> anyKeys) {\n+            final ResourceDeassociationAction type, final List<AnyKey> anyKeys) {\n \n         return getService(ResourceService.class).bulkDeassociation(resourceName, anyTypeName, type, anyKeys);\n     }"},{"sha":"83587951c670e92b657279766fe527b346072a55","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"modified","additions":19,"deletions":103,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,18 +24,15 @@\n import org.apache.syncope.client.console.commons.status.StatusUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n+import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -49,6 +46,11 @@ public class UserRestClient extends AbstractAnyRestClient {\n \n     private static final long serialVersionUID = -1575748964398293968L;\n \n+    @Override\n+    protected Class<? extends AnyService<?, ?>> getAnyServiceClass() {\n+        return UserService.class;\n+    }\n+\n     @Override\n     public int count(final String realm) {\n         return getService(UserService.class).\n@@ -69,11 +71,11 @@ public UserTO create(final UserTO userTO, final boolean storePassword) {\n         return response.readEntity(UserTO.class);\n     }\n \n-    public UserTO update(final String etag, final UserMod userMod) {\n+    public UserTO update(final String etag, final UserPatch userPatch) {\n         UserTO result;\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n-            result = service.update(userMod).readEntity(UserTO.class);\n+            result = service.update(userPatch).readEntity(UserTO.class);\n             resetClient(UserService.class);\n         }\n         return result;\n@@ -123,23 +125,23 @@ public ConnObjectTO readConnObject(final String resourceName, final Long id) {\n     }\n \n     public void suspend(final String etag, final long userKey, final List<StatusBean> statuses) {\n-        StatusMod statusMod = StatusUtils.buildStatusMod(statuses, false);\n-        statusMod.setKey(userKey);\n-        statusMod.setType(StatusMod.ModType.SUSPEND);\n+        StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses, false);\n+        statusPatch.setKey(userKey);\n+        statusPatch.setType(StatusPatchType.SUSPEND);\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n-            service.status(statusMod);\n+            service.status(statusPatch);\n             resetClient(UserService.class);\n         }\n     }\n \n     public void reactivate(final String etag, final long userKey, final List<StatusBean> statuses) {\n-        StatusMod statusMod = StatusUtils.buildStatusMod(statuses, true);\n-        statusMod.setKey(userKey);\n-        statusMod.setType(StatusMod.ModType.REACTIVATE);\n+        StatusPatch statusPatch = StatusUtils.buildStatusPatch(statuses, true);\n+        statusPatch.setKey(userKey);\n+        statusPatch.setType(StatusPatchType.REACTIVATE);\n         synchronized (this) {\n             UserService service = getService(etag, UserService.class);\n-            service.status(statusMod);\n+            service.status(statusPatch);\n             resetClient(UserService.class);\n         }\n     }\n@@ -148,90 +150,4 @@ public void reactivate(final String etag, final long userKey, final List<StatusB\n     public BulkActionResult bulkAction(final BulkAction action) {\n         return getService(UserService.class).bulk(action);\n     }\n-\n-    public void unlink(final String etag, final long userKey, final List<StatusBean> statuses) {\n-        synchronized (this) {\n-            UserService service = getService(etag, UserService.class);\n-            service.deassociate(userKey, ResourceDeassociationActionType.UNLINK,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n-            resetClient(UserService.class);\n-        }\n-    }\n-\n-    public void link(final String etag, final long userKey, final List<StatusBean> statuses) {\n-        synchronized (this) {\n-            UserService service = getService(etag, UserService.class);\n-\n-            ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-            associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n-            service.associate(userKey, ResourceAssociationAction.LINK, associationMod);\n-\n-            resetClient(UserService.class);\n-        }\n-    }\n-\n-    public BulkActionResult deprovision(final String etag, final long userKey, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            UserService service = getService(etag, UserService.class);\n-            result = service.deassociate(userKey, ResourceDeassociationActionType.DEPROVISION,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class)).\n-                    readEntity(BulkActionResult.class);\n-            resetClient(UserService.class);\n-        }\n-        return result;\n-    }\n-\n-    public BulkActionResult provision(final String etag, final long userKey,\n-            final List<StatusBean> statuses, final boolean changepwd, final String password) {\n-\n-        BulkActionResult result;\n-        synchronized (this) {\n-            UserService service = getService(etag, UserService.class);\n-\n-            ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-            associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n-            associationMod.setChangePwd(changepwd);\n-            associationMod.setPassword(password);\n-\n-            result = service.associate(userKey, ResourceAssociationAction.PROVISION, associationMod).\n-                    readEntity(BulkActionResult.class);\n-            resetClient(UserService.class);\n-        }\n-        return result;\n-    }\n-\n-    public BulkActionResult unassign(final String etag, final long userKey, final List<StatusBean> statuses) {\n-        BulkActionResult result;\n-        synchronized (this) {\n-            UserService service = getService(etag, UserService.class);\n-            result = service.deassociate(userKey, ResourceDeassociationActionType.UNASSIGN,\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class)).\n-                    readEntity(BulkActionResult.class);\n-            resetClient(UserService.class);\n-        }\n-        return result;\n-    }\n-\n-    public BulkActionResult assign(final String etag, final long userKey,\n-            final List<StatusBean> statuses, final boolean changepwd, final String password) {\n-\n-        BulkActionResult result;\n-        synchronized (this) {\n-            UserService service = getService(etag, UserService.class);\n-\n-            ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-            associationMod.getTargetResources().addAll(\n-                    CollectionWrapper.wrap(StatusUtils.buildStatusMod(statuses).getResources(), ResourceKey.class));\n-            associationMod.setChangePwd(changepwd);\n-            associationMod.setPassword(password);\n-\n-            result = service.associate(userKey, ResourceAssociationAction.ASSIGN, associationMod).\n-                    readEntity(BulkActionResult.class);\n-            resetClient(UserService.class);\n-        }\n-        return result;\n-    }\n }"},{"sha":"6a09b7c805e4ccdebdf7d7ec6a707e852172bc38","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserSelfRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.springframework.stereotype.Component;\n@@ -51,8 +51,8 @@ public void create(final UserTO userTO, final boolean storePassword) {\n         getService(UserSelfService.class).create(userTO, storePassword);\n     }\n \n-    public void update(final UserMod userMod) {\n-        getService(UserSelfService.class).update(userMod);\n+    public void update(final UserPatch userPatch) {\n+        getService(UserSelfService.class).update(userPatch);\n     }\n \n     public void delete() {"},{"sha":"208ec2fc44effb091495531fa5211aa142b069fc","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -80,7 +80,7 @@ public Exception fromResponse(final Response response) {\n             ex = new WebServiceException(String.format(\"Remote exception with status code: %s\",\n                     Response.Status.fromStatusCode(statusCode).name()));\n         }\n-        LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\n+        LOG.error(\"Exception thrown\", ex);\n         return ex;\n     }\n "},{"sha":"ba6530facbe194ab6084b0bc9e0f0130ec2f24ad","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -30,6 +30,7 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n import org.apache.syncope.client.lib.builders.ListQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnyListQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnySearchQueryBuilder;\n@@ -157,18 +158,21 @@ public static ConnObjectTOListQueryBuilder getConnObjectTOListQueryBuilder() {\n      */\n     public <T> T getService(final Class<T> serviceClass) {\n         synchronized (restClientFactory) {\n-            return restClientFactory.createServiceInstance(serviceClass, mediaType, username, password);\n+            T service = restClientFactory.createServiceInstance(serviceClass, mediaType, username, password);\n+            WebClient.getConfig(WebClient.client(service)).getRequestContext().\n+                    put(URLConnectionHTTPConduit.HTTPURL_CONNECTION_METHOD_REFLECTION, true);\n+            return service;\n         }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public Pair<Map<String, Set<String>>, UserTO> self() {\n         // Explicitly disable header value split because it interferes with JSON deserialization below\n-        UserSelfService serviceInstance = getService(UserSelfService.class);\n-        WebClient.getConfig(WebClient.client(serviceInstance)).\n+        UserSelfService service = getService(UserSelfService.class);\n+        WebClient.getConfig(WebClient.client(service)).\n                 getRequestContext().put(RestClientFactoryBean.HEADER_SPLIT_PROPERTY, false);\n \n-        Response response = serviceInstance.read();\n+        Response response = service.read();\n         if (response.getStatusInfo().getStatusCode() != Response.Status.OK.getStatusCode()) {\n             Exception ex = exceptionMapper.fromResponse(response);\n             if (ex != null) {"},{"sha":"e1f9f88a29476788fde3ec6cb24b5ba0901ecc0d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":355,"deletions":245,"changes":600,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,191 +18,177 @@\n  */\n package org.apache.syncope.common.lib;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n+import java.util.Collection;\n import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n-import org.apache.syncope.common.lib.mod.ReferenceMod;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.RelationshipPatch;\n+import org.apache.syncope.common.lib.patch.AbstractReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.LongPatchItem;\n+import org.apache.syncope.common.lib.patch.LongReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n- * Utility class for comparing manipulating {@link AnyTO} and {@link AnyMod}.\n+ * Utility class for comparing {@link AnyTO} instances in order to generate {@link AnyPatch} instances.\n  */\n public final class AnyOperations {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(AnyOperations.class);\n+\n     private AnyOperations() {\n         // empty constructor for static utility classes\n     }\n \n-    private static void populate(final Map<String, AttrTO> updatedAttrs,\n-            final Map<String, AttrTO> originalAttrs, final AnyMod result) {\n-\n-        populate(updatedAttrs, originalAttrs, result, false);\n-    }\n+    private static <T, K extends AbstractReplacePatchItem<T>> K replacePatchItem(\n+            final T updated, final T original, final K proto) {\n \n-    private static void populate(final Map<String, AttrTO> updatedAttrs,\n-            final Map<String, AttrTO> originalAttrs, final AnyMod result,\n-            final boolean virtuals) {\n-\n-        for (Map.Entry<String, AttrTO> entry : updatedAttrs.entrySet()) {\n-            AttrMod mod = new AttrMod();\n-            mod.setSchema(entry.getKey());\n+        if ((original == null && updated == null) || (original != null && original.equals(updated))) {\n+            return null;\n+        }\n \n-            Set<String> updatedValues = new HashSet<>(entry.getValue().getValues());\n+        proto.setValue(updated);\n+        return proto;\n+    }\n \n-            Set<String> originalValues = originalAttrs.containsKey(entry.getKey())\n-                    ? new HashSet<>(originalAttrs.get(entry.getKey()).getValues())\n-                    : Collections.<String>emptySet();\n+    private static void diff(\n+            final AnyTO updated, final AnyTO original, final AnyPatch result, final boolean incremental) {\n \n-            if (!originalAttrs.containsKey(entry.getKey())) {\n-                // SYNCOPE-459: take care of user virtual attributes without any value\n-                updatedValues.remove(\"\");\n-                mod.getValuesToBeAdded().addAll(new ArrayList<>(updatedValues));\n+        // check same key\n+        if (updated.getKey() != original.getKey()) {\n+            throw new IllegalArgumentException(\"AnyTO's key must be the same\");\n+        }\n+        result.setKey(updated.getKey());\n \n-                if (virtuals) {\n-                    result.getVirAttrsToUpdate().add(mod);\n-                } else {\n-                    result.getPlainAttrsToUpdate().add(mod);\n-                }\n-            } else if (!updatedValues.equals(originalValues)) {\n-                // avoid unwanted inputs\n-                updatedValues.remove(\"\");\n-                if (!entry.getValue().isReadonly()) {\n-                    mod.getValuesToBeAdded().addAll(updatedValues);\n-\n-                    if (!mod.isEmpty()) {\n-                        if (virtuals) {\n-                            result.getVirAttrsToRemove().add(mod.getSchema());\n-                        } else {\n-                            result.getPlainAttrsToRemove().add(mod.getSchema());\n-                        }\n-                    }\n-                }\n+        // 1. realm\n+        result.setRealm(replacePatchItem(updated.getRealm(), original.getRealm(), new StringReplacePatchItem()));\n \n-                mod.getValuesToBeRemoved().addAll(originalValues);\n+        // 2. auxilairy classes\n+        result.getAuxClasses().clear();\n \n-                if (!mod.isEmpty()) {\n-                    if (virtuals) {\n-                        result.getVirAttrsToUpdate().add(mod);\n-                    } else {\n-                        result.getPlainAttrsToUpdate().add(mod);\n-                    }\n-                }\n+        if (!incremental) {\n+            for (String auxClass : CollectionUtils.subtract(original.getAuxClasses(), updated.getAuxClasses())) {\n+                result.getAuxClasses().add(\n+                        new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(auxClass).build());\n             }\n         }\n-    }\n-\n-    private static void diff(\n-            final AnyTO updated,\n-            final AnyTO original,\n-            final AnyMod result,\n-            final boolean incremental) {\n \n-        // 1. check same id\n-        if (updated.getKey() != original.getKey()) {\n-            throw new IllegalArgumentException(\"AnyTO's id must be the same\");\n+        for (String auxClass : CollectionUtils.subtract(updated.getAuxClasses(), original.getAuxClasses())) {\n+            result.getAuxClasses().add(\n+                    new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(auxClass).build());\n         }\n-        result.setKey(updated.getKey());\n \n-        // 2. attributes\n+        // 3. plain attributes\n         Map<String, AttrTO> updatedAttrs = new HashMap<>(updated.getPlainAttrMap());\n         Map<String, AttrTO> originalAttrs = new HashMap<>(original.getPlainAttrMap());\n \n-        Set<String> originalAttrNames = new HashSet<>(originalAttrs.keySet());\n-        originalAttrNames.removeAll(updatedAttrs.keySet());\n+        result.getPlainAttrs().clear();\n \n         if (!incremental) {\n-            result.getPlainAttrsToRemove().clear();\n-            result.getPlainAttrsToRemove().addAll(originalAttrNames);\n+            CollectionUtils.forAllDo(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n+                    new Closure<String>() {\n+\n+                        @Override\n+                        public void execute(final String schema) {\n+                            result.getPlainAttrs().add(new AttrPatch.Builder().\n+                                    operation(PatchOperation.DELETE).\n+                                    attrTO(new AttrTO.Builder().schema(schema).build()).\n+                                    build());\n+                        }\n+                    });\n         }\n \n-        Set<String> emptyUpdatedAttrs = new HashSet<>();\n-        for (Map.Entry<String, AttrTO> entry : updatedAttrs.entrySet()) {\n-            if (entry.getValue().getValues() == null || entry.getValue().getValues().isEmpty()) {\n-\n-                emptyUpdatedAttrs.add(entry.getKey());\n+        for (AttrTO attrTO : updatedAttrs.values()) {\n+            AttrPatch patch = new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO).build();\n+            if (!patch.isEmpty()) {\n+                result.getPlainAttrs().add(patch);\n             }\n         }\n-        for (String emptyUpdatedAttr : emptyUpdatedAttrs) {\n-            updatedAttrs.remove(emptyUpdatedAttr);\n-            result.getPlainAttrsToRemove().add(emptyUpdatedAttr);\n-        }\n \n-        populate(updatedAttrs, originalAttrs, result);\n-\n-        // 3. derived attributes\n+        // 4. derived attributes\n         updatedAttrs = updated.getDerAttrMap();\n         originalAttrs = original.getDerAttrMap();\n \n-        originalAttrNames = new HashSet<>(originalAttrs.keySet());\n-        originalAttrNames.removeAll(updatedAttrs.keySet());\n+        result.getDerAttrs().clear();\n \n         if (!incremental) {\n-            result.getDerAttrsToRemove().clear();\n-            result.getDerAttrsToRemove().addAll(originalAttrNames);\n+            for (String schema : CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet())) {\n+                result.getDerAttrs().add(new AttrPatch.Builder().\n+                        operation(PatchOperation.DELETE).\n+                        attrTO(new AttrTO.Builder().schema(schema).build()).\n+                        build());\n+            }\n         }\n \n-        Set<String> updatedAttrNames = new HashSet<>(updatedAttrs.keySet());\n-        updatedAttrNames.removeAll(originalAttrs.keySet());\n-        result.getDerAttrsToAdd().clear();\n-        result.getDerAttrsToAdd().addAll(updatedAttrNames);\n+        for (String schema : CollectionUtils.subtract(updatedAttrs.keySet(), originalAttrs.keySet())) {\n+            result.getDerAttrs().add(new AttrPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).\n+                    attrTO(new AttrTO.Builder().schema(schema).build()).\n+                    build());\n+        }\n \n-        // 4. virtual attributes\n+        // 5. virtual attributes\n         updatedAttrs = updated.getVirAttrMap();\n         originalAttrs = original.getVirAttrMap();\n \n-        originalAttrNames = new HashSet<>(originalAttrs.keySet());\n-        originalAttrNames.removeAll(updatedAttrs.keySet());\n+        result.getVirAttrs().clear();\n \n         if (!incremental) {\n-            result.getVirAttrsToRemove().clear();\n-            result.getVirAttrsToRemove().addAll(originalAttrNames);\n+            CollectionUtils.forAllDo(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n+                    new Closure<String>() {\n+\n+                        @Override\n+                        public void execute(final String schema) {\n+                            result.getVirAttrs().add(new AttrPatch.Builder().\n+                                    operation(PatchOperation.DELETE).\n+                                    attrTO(new AttrTO.Builder().schema(schema).build()).\n+                                    build());\n+                        }\n+                    });\n         }\n \n-        populate(updatedAttrs, originalAttrs, result, true);\n-\n-        // 5. resources\n-        Set<String> updatedRes = new HashSet<>(updated.getResources());\n-        Set<String> originalRes = new HashSet<>(original.getResources());\n-\n-        updatedRes.removeAll(originalRes);\n-        result.getResourcesToAdd().clear();\n-        result.getResourcesToAdd().addAll(updatedRes);\n+        for (AttrTO attrTO : updatedAttrs.values()) {\n+            AttrPatch patch = new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO).build();\n+            result.getVirAttrs().add(patch);\n+        }\n \n-        originalRes.removeAll(updated.getResources());\n+        // 6. resources\n+        result.getResources().clear();\n \n         if (!incremental) {\n-            result.getResourcesToRemove().clear();\n-            result.getResourcesToRemove().addAll(originalRes);\n+            for (String resource : CollectionUtils.subtract(original.getResources(), updated.getResources())) {\n+                result.getResources().add(\n+                        new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build());\n+            }\n+        }\n+\n+        for (String resource : CollectionUtils.subtract(updated.getResources(), original.getResources())) {\n+            result.getResources().add(\n+                    new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build());\n         }\n-    }\n \n-    /**\n-     * Calculate modifications needed by first in order to be equal to second.\n-     *\n-     * @param updated updated AnyObjectTO\n-     * @param original original AnyObjectTO\n-     * @return AnyObjectMod containing differences\n-     */\n-    public static AnyObjectMod diff(final AnyObjectTO updated, final AnyObjectTO original) {\n-        return diff(updated, original, false);\n     }\n \n     /**\n@@ -211,10 +197,12 @@ public static AnyObjectMod diff(final AnyObjectTO updated, final AnyObjectTO ori\n      * @param updated updated AnyObjectTO\n      * @param original original AnyObjectTO\n      * @param incremental perform incremental diff (without removing existing info)\n-     * @return AnyObjectMod containing differences\n+     * @return AnyObjectPatch containing differences\n      */\n-    public static AnyObjectMod diff(final AnyObjectTO updated, final AnyObjectTO original, final boolean incremental) {\n-        AnyObjectMod result = new AnyObjectMod();\n+    public static AnyObjectPatch diff(\n+            final AnyObjectTO updated, final AnyObjectTO original, final boolean incremental) {\n+\n+        AnyObjectPatch result = new AnyObjectPatch();\n \n         diff(updated, original, result, incremental);\n \n@@ -224,13 +212,18 @@ public static AnyObjectMod diff(final AnyObjectTO updated, final AnyObjectTO ori\n \n         for (Map.Entry<Long, RelationshipTO> entry : updatedRels.entrySet()) {\n             if (!originalRels.containsKey(entry.getKey())) {\n-                result.getRelationshipsToAdd().add(entry.getKey());\n+                result.getRelationships().add(new RelationshipPatch.Builder().\n+                        operation(PatchOperation.ADD_REPLACE).\n+                        relationshipTO(entry.getValue()).build());\n             }\n         }\n+\n         if (!incremental) {\n-            Set<Long> originalGroups = new HashSet<>(originalRels.keySet());\n-            originalGroups.removeAll(updatedRels.keySet());\n-            result.getRelationshipsToRemove().addAll(originalGroups);\n+            for (Long key : CollectionUtils.subtract(originalRels.keySet(), updatedRels.keySet())) {\n+                result.getRelationships().add(new RelationshipPatch.Builder().\n+                        operation(PatchOperation.DELETE).\n+                        relationshipTO(originalRels.get(key)).build());\n+            }\n         }\n \n         // 2. memberships\n@@ -239,60 +232,44 @@ public static AnyObjectMod diff(final AnyObjectTO updated, final AnyObjectTO ori\n \n         for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\n             if (!originalMembs.containsKey(entry.getKey())) {\n-                result.getMembershipsToAdd().add(entry.getKey());\n+                result.getMemberships().add(new MembershipPatch.Builder().\n+                        operation(PatchOperation.ADD_REPLACE).membershipTO(entry.getValue()).build());\n             }\n         }\n+\n         if (!incremental) {\n-            Set<Long> originalGroups = new HashSet<>(originalMembs.keySet());\n-            originalGroups.removeAll(updatedMembs.keySet());\n-            result.getMembershipsToRemove().addAll(originalGroups);\n+            for (Long key : CollectionUtils.subtract(originalMembs.keySet(), updatedMembs.keySet())) {\n+                result.getMemberships().add(new MembershipPatch.Builder().\n+                        operation(PatchOperation.DELETE).membershipTO(originalMembs.get(key)).build());\n+            }\n         }\n \n         return result;\n     }\n \n-    /**\n-     * Calculate modifications needed by first in order to be equal to second.\n-     *\n-     * @param updated updated UserTO\n-     * @param original original UserTO\n-     * @return UserMod containing differences\n-     */\n-    public static UserMod diff(final UserTO updated, final UserTO original) {\n-        return diff(updated, original, false);\n-    }\n-\n     /**\n      * Calculate modifications needed by first in order to be equal to second.\n      *\n      * @param updated updated UserTO\n      * @param original original UserTO\n      * @param incremental perform incremental diff (without removing existing info)\n-     * @return UserMod containing differences\n+     * @return UserPatch containing differences\n      */\n-    public static UserMod diff(final UserTO updated, final UserTO original, final boolean incremental) {\n-        UserMod result = new UserMod();\n+    public static UserPatch diff(final UserTO updated, final UserTO original, final boolean incremental) {\n+        UserPatch result = new UserPatch();\n \n         diff(updated, original, result, incremental);\n \n-        // 0. realm\n-        if (updated.getRealm() != null && (original.getRealm() == null\n-                || !original.getRealm().equals(updated.getRealm()))) {\n-\n-            result.setRealm(updated.getRealm());\n-        }\n-\n         // 1. password\n-        if (updated.getPassword() != null && (original.getPassword() == null\n-                || !original.getPassword().equals(updated.getPassword()))) {\n+        if (updated.getPassword() != null\n+                && (original.getPassword() == null || !original.getPassword().equals(updated.getPassword()))) {\n \n-            result.setPassword(updated.getPassword());\n+            result.setPassword(new PasswordPatch.Builder().value(updated.getPassword()).build());\n         }\n \n         // 2. username\n-        if (original.getUsername() != null && !original.getUsername().equals(updated.getUsername())) {\n-            result.setUsername(updated.getUsername());\n-        }\n+        result.setUsername(\n+                replacePatchItem(updated.getUsername(), original.getUsername(), new StringReplacePatchItem()));\n \n         // 3. security question / answer\n         if (updated.getSecurityQuestion() == null) {\n@@ -301,29 +278,46 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n         } else if (!updated.getSecurityQuestion().equals(original.getSecurityQuestion())\n                 || StringUtils.isNotBlank(updated.getSecurityAnswer())) {\n \n-            result.setSecurityQuestion(updated.getSecurityQuestion());\n-            result.setSecurityAnswer(updated.getSecurityAnswer());\n+            result.setSecurityQuestion(\n+                    new LongReplacePatchItem.Builder().value(updated.getSecurityQuestion()).build());\n+            result.setSecurityAnswer(\n+                    new StringReplacePatchItem.Builder().value(updated.getSecurityAnswer()).build());\n         }\n \n-        result.setMustChangePassword(updated.isMustChangePassword());\n+        result.setMustChangePassword(replacePatchItem(\n+                updated.isMustChangePassword(), original.isMustChangePassword(), new BooleanReplacePatchItem()));\n \n         // 4. roles\n-        result.getRolesToRemove().addAll(CollectionUtils.subtract(original.getRoles(), updated.getRoles()));\n-        result.getRolesToAdd().addAll(CollectionUtils.subtract(updated.getRoles(), original.getRoles()));\n+        if (!incremental) {\n+            for (Long toRemove : CollectionUtils.subtract(original.getRoles(), updated.getRoles())) {\n+                result.getRoles().add(\n+                        new LongPatchItem.Builder().operation(PatchOperation.DELETE).value(toRemove).build());\n+            }\n+        }\n+\n+        for (Long toAdd : CollectionUtils.subtract(updated.getRoles(), original.getRoles())) {\n+            result.getRoles().add(\n+                    new LongPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(toAdd).build());\n+        }\n \n         // 5. relationships\n         Map<Long, RelationshipTO> updatedRels = updated.getRelationshipMap();\n         Map<Long, RelationshipTO> originalRels = original.getRelationshipMap();\n \n         for (Map.Entry<Long, RelationshipTO> entry : updatedRels.entrySet()) {\n             if (!originalRels.containsKey(entry.getKey())) {\n-                result.getRelationshipsToAdd().add(entry.getKey());\n+                result.getRelationships().add(new RelationshipPatch.Builder().\n+                        operation(PatchOperation.ADD_REPLACE).\n+                        relationshipTO(entry.getValue()).build());\n             }\n         }\n+\n         if (!incremental) {\n-            Set<Long> originalGroups = new HashSet<>(originalRels.keySet());\n-            originalGroups.removeAll(updatedRels.keySet());\n-            result.getRelationshipsToRemove().addAll(originalGroups);\n+            for (Long key : CollectionUtils.subtract(originalRels.keySet(), updatedRels.keySet())) {\n+                result.getRelationships().add(new RelationshipPatch.Builder().\n+                        operation(PatchOperation.DELETE).\n+                        relationshipTO(originalRels.get(key)).build());\n+            }\n         }\n \n         // 6. memberships\n@@ -332,136 +326,252 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n \n         for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\n             if (!originalMembs.containsKey(entry.getKey())) {\n-                result.getMembershipsToAdd().add(entry.getKey());\n+                result.getMemberships().add(new MembershipPatch.Builder().\n+                        operation(PatchOperation.ADD_REPLACE).membershipTO(entry.getValue()).build());\n             }\n         }\n+\n         if (!incremental) {\n-            Set<Long> originalGroups = new HashSet<>(originalMembs.keySet());\n-            originalGroups.removeAll(updatedMembs.keySet());\n-            result.getMembershipsToRemove().addAll(originalGroups);\n+            for (Long key : CollectionUtils.subtract(originalMembs.keySet(), updatedMembs.keySet())) {\n+                result.getMemberships().add(new MembershipPatch.Builder().\n+                        operation(PatchOperation.DELETE).membershipTO(originalMembs.get(key)).build());\n+            }\n         }\n \n         return result;\n     }\n \n-    /**\n-     * Calculate modifications needed by first in order to be equal to second.\n-     *\n-     * @param updated updated GroupTO\n-     * @param original original GroupTO\n-     * @return GroupMod containing differences\n-     */\n-    public static GroupMod diff(final GroupTO updated, final GroupTO original) {\n-        return diff(updated, original, false);\n-    }\n-\n     /**\n      * Calculate modifications needed by first in order to be equal to second.\n      *\n      * @param updated updated GroupTO\n      * @param original original GroupTO\n      * @param incremental perform incremental diff (without removing existing info)\n-     * @return GroupMod containing differences\n+     * @return GroupPatch containing differences\n      */\n-    public static GroupMod diff(final GroupTO updated, final GroupTO original, final boolean incremental) {\n-        GroupMod result = new GroupMod();\n+    public static GroupPatch diff(final GroupTO updated, final GroupTO original, final boolean incremental) {\n+        GroupPatch result = new GroupPatch();\n \n         diff(updated, original, result, incremental);\n \n         // 1. name\n-        if (!original.getName().equals(updated.getName())) {\n-            result.setName(updated.getName());\n-        }\n+        result.setName(replacePatchItem(updated.getName(), original.getName(), new StringReplacePatchItem()));\n \n-        // 2. owner\n-        result.setUserOwner(new ReferenceMod(updated.getUserOwner()));\n-        result.setGroupOwner(new ReferenceMod(updated.getGroupOwner()));\n+        // 2. ownership\n+        result.setUserOwner(replacePatchItem(\n+                original.getUserOwner(), updated.getUserOwner(), new LongReplacePatchItem()));\n+        result.setGroupOwner(replacePatchItem(\n+                original.getGroupOwner(), updated.getGroupOwner(), new LongReplacePatchItem()));\n \n         // 3. dynMembershipCond\n-        result.setADynMembershipCond(updated.getADynMembershipCond());\n-        result.setUDynMembershipCond(updated.getUDynMembershipCond());\n+        result.setADynMembershipCond(replacePatchItem(\n+                updated.getADynMembershipCond(), original.getADynMembershipCond(), new StringReplacePatchItem()));\n+        result.setUDynMembershipCond(replacePatchItem(\n+                updated.getUDynMembershipCond(), original.getUDynMembershipCond(), new StringReplacePatchItem()));\n \n         return result;\n     }\n \n-    private static List<AttrTO> getUpdateValues(final Map<String, AttrTO> attrs,\n-            final Set<String> attrsToBeRemoved, final Set<AttrMod> attrsToBeUpdated) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <TO extends AnyTO, P extends AnyPatch> P diff(\n+            final TO updated, final TO original, final boolean incremental) {\n \n+        if (updated instanceof UserTO && original instanceof UserTO) {\n+            return (P) diff((UserTO) updated, (UserTO) original, incremental);\n+        } else if (updated instanceof GroupTO && original instanceof GroupTO) {\n+            return (P) diff((GroupTO) updated, (GroupTO) original, incremental);\n+        } else if (updated instanceof AnyObjectTO && original instanceof AnyObjectTO) {\n+            return (P) diff((AnyObjectTO) updated, (AnyObjectTO) original, incremental);\n+        }\n+\n+        throw new IllegalArgumentException(\"Unsupported: \" + updated.getClass().getName());\n+    }\n+\n+    private static Collection<AttrTO> patch(final Map<String, AttrTO> attrs, final Set<AttrPatch> attrPatches) {\n         Map<String, AttrTO> rwattrs = new HashMap<>(attrs);\n-        for (String attrName : attrsToBeRemoved) {\n-            rwattrs.remove(attrName);\n-        }\n-        for (AttrMod attrMod : attrsToBeUpdated) {\n-            if (rwattrs.containsKey(attrMod.getSchema())) {\n-                AttrTO attrTO = rwattrs.get(attrMod.getSchema());\n-                attrTO.getValues().removeAll(attrMod.getValuesToBeRemoved());\n-                attrTO.getValues().addAll(attrMod.getValuesToBeAdded());\n+        for (AttrPatch patch : attrPatches) {\n+            if (patch.getAttrTO() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", AttrPatch.class.getName(), patch);\n             } else {\n-                AttrTO attrTO = new AttrTO();\n-                attrTO.setSchema(attrMod.getSchema());\n-                attrTO.getValues().addAll(attrMod.getValuesToBeAdded());\n+                rwattrs.remove(patch.getAttrTO().getSchema());\n+                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    rwattrs.put(patch.getAttrTO().getSchema(), patch.getAttrTO());\n+                }\n+                switch (patch.getOperation()) {\n+                    case ADD_REPLACE:\n+                        if (rwattrs.containsKey(patch.getAttrTO().getSchema())) {\n+                            rwattrs.remove(patch.getAttrTO().getSchema());\n+                        }\n+                        break;\n \n-                rwattrs.put(attrMod.getSchema(), attrTO);\n+                    case DELETE:\n+                    default:\n+                        rwattrs.remove(patch.getAttrTO().getSchema());\n+                }\n             }\n         }\n \n-        return new ArrayList<>(rwattrs.values());\n+        return rwattrs.values();\n     }\n \n-    private static <T extends AnyTO, K extends AnyMod> void apply(final T to,\n-            final K mod, final T result) {\n-\n-        // 1. attributes\n-        result.getPlainAttrs().addAll(getUpdateValues(to.getPlainAttrMap(),\n-                mod.getPlainAttrsToRemove(), mod.getPlainAttrsToUpdate()));\n+    private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, final K patch, final T result) {\n+        // check same key\n+        if (to.getKey() != patch.getKey()) {\n+            throw new IllegalArgumentException(\n+                    to.getClass().getSimpleName() + \" and \" + patch.getClass().getSimpleName()\n+                    + \" keys must be the same\");\n+        }\n \n-        // 2. derived attributes\n-        Map<String, AttrTO> attrs = to.getDerAttrMap();\n-        for (String attrName : mod.getDerAttrsToRemove()) {\n-            attrs.remove(attrName);\n+        // 0. realm\n+        if (patch.getRealm() != null) {\n+            result.setRealm(patch.getRealm().getValue());\n         }\n-        for (String attrName : mod.getDerAttrsToAdd()) {\n-            AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(attrName);\n \n-            attrs.put(attrName, attrTO);\n+        // 1. auxiliary classes\n+        for (StringPatchItem auxClassPatch : patch.getAuxClasses()) {\n+            switch (auxClassPatch.getOperation()) {\n+                case ADD_REPLACE:\n+                    to.getAuxClasses().add(auxClassPatch.getValue());\n+                    break;\n+\n+                case DELETE:\n+                default:\n+                    to.getAuxClasses().remove(auxClassPatch.getValue());\n+            }\n         }\n-        result.getDerAttrs().addAll(attrs.values());\n \n-        // 3. virtual attributes\n-        result.getVirAttrs().addAll(getUpdateValues(to.getVirAttrMap(),\n-                mod.getVirAttrsToRemove(), mod.getVirAttrsToUpdate()));\n+        // 2. plain attributes\n+        result.getPlainAttrs().clear();\n+        result.getPlainAttrs().addAll(AnyOperations.patch(to.getPlainAttrMap(), patch.getPlainAttrs()));\n+\n+        // 3. derived attributes\n+        result.getDerAttrs().clear();\n+        result.getDerAttrs().addAll(AnyOperations.patch(to.getDerAttrMap(), patch.getDerAttrs()));\n \n-        // 4. resources\n-        result.getResources().removeAll(mod.getResourcesToRemove());\n-        result.getResources().addAll(mod.getResourcesToAdd());\n+        // 4. virtual attributes\n+        result.getVirAttrs().clear();\n+        result.getVirAttrs().addAll(AnyOperations.patch(to.getVirAttrMap(), patch.getVirAttrs()));\n+\n+        // 5. resources\n+        for (StringPatchItem resourcePatch : patch.getResources()) {\n+            switch (resourcePatch.getOperation()) {\n+                case ADD_REPLACE:\n+                    result.getResources().add(resourcePatch.getValue());\n+                    break;\n+\n+                case DELETE:\n+                default:\n+                    result.getResources().remove(resourcePatch.getValue());\n+            }\n+        }\n     }\n \n-    public static UserTO apply(final UserTO userTO, final UserMod userMod) {\n-        // 1. check same id\n-        if (userTO.getKey() != userMod.getKey()) {\n-            throw new IllegalArgumentException(\"UserTO and UserMod ids must be the same\");\n+    public static GroupTO patch(final GroupTO groupTO, final GroupPatch groupPatch) {\n+        GroupTO result = SerializationUtils.clone(groupTO);\n+        AnyOperations.patch(groupTO, groupPatch, result);\n+\n+        if (groupPatch.getName() != null) {\n+            result.setName(groupPatch.getName().getValue());\n         }\n \n-        UserTO result = SerializationUtils.clone(userTO);\n-        apply(userTO, userMod, result);\n+        if (groupPatch.getUserOwner() != null) {\n+            result.setGroupOwner(groupPatch.getUserOwner().getValue());\n+        }\n+        if (groupPatch.getGroupOwner() != null) {\n+            result.setGroupOwner(groupPatch.getGroupOwner().getValue());\n+        }\n \n-        // 0. realm\n-        if (userMod.getRealm() != null) {\n-            result.setRealm(userMod.getRealm());\n+        if (groupPatch.getADynMembershipCond() != null) {\n+            result.setADynMembershipCond(groupPatch.getADynMembershipCond().getValue());\n+        }\n+        if (groupPatch.getUDynMembershipCond() != null) {\n+            result.setADynMembershipCond(groupPatch.getUDynMembershipCond().getValue());\n         }\n \n+        return result;\n+    }\n+\n+    public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPatch anyObjectPatch) {\n+        AnyObjectTO result = SerializationUtils.clone(anyObjectTO);\n+        AnyOperations.patch(anyObjectTO, anyObjectPatch, result);\n+\n+        // 1. relationships\n+        for (final RelationshipPatch relPatch : anyObjectPatch.getRelationships()) {\n+            if (relPatch.getRelationshipTO() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n+            } else {\n+                result.getRelationships().remove(relPatch.getRelationshipTO());\n+                if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    result.getRelationships().add(relPatch.getRelationshipTO());\n+                }\n+            }\n+        }\n+\n+        // 2. memberships\n+        for (final MembershipPatch membPatch : anyObjectPatch.getMemberships()) {\n+            if (membPatch.getMembershipTO() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n+            } else {\n+                result.getMemberships().remove(membPatch.getMembershipTO());\n+                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    result.getMemberships().add(membPatch.getMembershipTO());\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n+        UserTO result = SerializationUtils.clone(userTO);\n+        AnyOperations.patch(userTO, userPatch, result);\n+\n         // 1. password\n-        result.setPassword(userMod.getPassword());\n+        if (userPatch.getPassword() != null) {\n+            result.setPassword(userPatch.getPassword().getValue());\n+        }\n \n         // 2. username\n-        if (userMod.getUsername() != null) {\n-            result.setUsername(userMod.getUsername());\n+        if (userPatch.getUsername() != null) {\n+            result.setUsername(userPatch.getUsername().getValue());\n+        }\n+\n+        // 3. relationships\n+        for (final RelationshipPatch relPatch : userPatch.getRelationships()) {\n+            if (relPatch.getRelationshipTO() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", RelationshipPatch.class.getName(), relPatch);\n+            } else {\n+                result.getRelationships().remove(relPatch.getRelationshipTO());\n+                if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    result.getRelationships().add(relPatch.getRelationshipTO());\n+                }\n+            }\n         }\n \n-        // 3. roles\n-        result.getRoles().removeAll(userMod.getRolesToRemove());\n-        result.getRoles().addAll(userMod.getRolesToAdd());\n+        // 4. memberships\n+        for (final MembershipPatch membPatch : userPatch.getMemberships()) {\n+            if (membPatch.getMembershipTO() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n+            } else {\n+                result.getMemberships().remove(membPatch.getMembershipTO());\n+                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    result.getMemberships().add(membPatch.getMembershipTO());\n+                }\n+            }\n+        }\n+\n+        // 5. roles\n+        for (LongPatchItem rolePatch : userPatch.getRoles()) {\n+            switch (rolePatch.getOperation()) {\n+                case ADD_REPLACE:\n+                    result.getRoles().add(rolePatch.getValue());\n+                    break;\n+\n+                case DELETE:\n+                default:\n+                    result.getRoles().remove(rolePatch.getValue());\n+            }\n+        }\n \n         return result;\n     }"},{"sha":"a4188378b545a4d2437215dd7d9bc4dd3b4d145e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/GenericMapEntryType.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapEntryType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapEntryType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapEntryType.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -14,9 +14,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-/*\n- * $Id: MapEntryType.java 399 2011-12-03 04:22:50Z jyeary $\n- */\n package org.apache.syncope.common.lib.jaxb;\n \n import java.util.Map;"},{"sha":"e57a401573ff9c87831544ccb687df72980e1c54","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/GenericMapType.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FGenericMapType.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -14,9 +14,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-/*\n- * $Id: MapType.java 399 2011-12-03 04:22:50Z jyeary $\n- */\n package org.apache.syncope.common.lib.jaxb;\n \n import java.util.ArrayList;"},{"sha":"1855164a5da63d5420ba000a88ecc1f48ffc772b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/XmlGenericMapAdapter.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2FXmlGenericMapAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -14,9 +14,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-/*\n- * $Id: XmlGenericMapAdapter.java 399 2011-12-03 04:22:50Z jyeary $\n- */\n package org.apache.syncope.common.lib.jaxb;\n \n import java.util.HashMap;"},{"sha":"0fbd6aa1325737caa45699a080631cb38f10832e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AnyMod.java","status":"removed","additions":0,"deletions":157,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyMod.java?ref=a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea","patch":"@@ -1,157 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.mod;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.ws.rs.PathParam;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-\n-@XmlType\n-public abstract class AnyMod extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 7366724481786360591L;\n-\n-    protected long key;\n-\n-    private String realm;\n-\n-    protected final Set<String> auxClassesToAdd = new HashSet<>();\n-\n-    protected final Set<String> auxClassesToRemove = new HashSet<>();\n-\n-    protected final Set<AttrMod> plainAttrsToUpdate = new HashSet<>();\n-\n-    protected final Set<String> plainAttrsToRemove = new HashSet<>();\n-\n-    protected final Set<String> derAttrsToAdd = new HashSet<>();\n-\n-    protected final Set<String> derAttrsToRemove = new HashSet<>();\n-\n-    protected final Set<AttrMod> virAttrsToUpdate = new HashSet<>();\n-\n-    protected final Set<String> virAttrsToRemove = new HashSet<>();\n-\n-    protected final Set<String> resourcesToAdd = new HashSet<>();\n-\n-    protected final Set<String> resourcesToRemove = new HashSet<>();\n-\n-    public long getKey() {\n-        return key;\n-    }\n-\n-    @PathParam(\"key\")\n-    public void setKey(final long key) {\n-        this.key = key;\n-    }\n-\n-    public String getRealm() {\n-        return realm;\n-    }\n-\n-    public void setRealm(final String realm) {\n-        this.realm = realm;\n-    }\n-\n-    @XmlElementWrapper(name = \"auxClassesToAdd\")\n-    @XmlElement(name = \"class\")\n-    @JsonProperty(\"auxClassesToAdd\")\n-    public Set<String> getAuxClassesToAdd() {\n-        return auxClassesToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"auxClassesToRemove\")\n-    @XmlElement(name = \"class\")\n-    @JsonProperty(\"auxClassesToRemove\")\n-    public Set<String> getAuxClassesToRemove() {\n-        return auxClassesToRemove;\n-    }\n-\n-    @XmlElementWrapper(name = \"plainAttrsToRemove\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"plainAttrsToRemove\")\n-    public Set<String> getPlainAttrsToRemove() {\n-        return plainAttrsToRemove;\n-    }\n-\n-    @XmlElementWrapper(name = \"plainAttrsToUpdate\")\n-    @XmlElement(name = \"attributeMod\")\n-    @JsonProperty(\"plainAttrsToUpdate\")\n-    public Set<AttrMod> getPlainAttrsToUpdate() {\n-        return plainAttrsToUpdate;\n-    }\n-\n-    @XmlElementWrapper(name = \"derAttrsToAdd\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"derAttrsToAdd\")\n-    public Set<String> getDerAttrsToAdd() {\n-        return derAttrsToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"derAttrsToRemove\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"derAttrsToRemove\")\n-    public Set<String> getDerAttrsToRemove() {\n-        return derAttrsToRemove;\n-    }\n-\n-    @XmlElementWrapper(name = \"virAttrsToRemove\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"virAttrsToRemove\")\n-    public Set<String> getVirAttrsToRemove() {\n-        return virAttrsToRemove;\n-    }\n-\n-    @XmlElementWrapper(name = \"virAttrsToUpdate\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"virAttrsToUpdate\")\n-    public Set<AttrMod> getVirAttrsToUpdate() {\n-        return virAttrsToUpdate;\n-    }\n-\n-    @XmlElementWrapper(name = \"resourcesToAdd\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resourcesToAdd\")\n-    public Set<String> getResourcesToAdd() {\n-        return resourcesToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"resourcesToRemove\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resourcesToRemove\")\n-    public Set<String> getResourcesToRemove() {\n-        return resourcesToRemove;\n-    }\n-\n-    /**\n-     * @return true is all backing collections are empty.\n-     */\n-    @JsonIgnore\n-    public boolean isEmpty() {\n-        return plainAttrsToUpdate.isEmpty() && plainAttrsToRemove.isEmpty()\n-                && derAttrsToAdd.isEmpty() && derAttrsToRemove.isEmpty()\n-                && virAttrsToUpdate.isEmpty() && virAttrsToRemove.isEmpty()\n-                && resourcesToAdd.isEmpty() && resourcesToRemove.isEmpty();\n-    }\n-}"},{"sha":"b51a67bb8df3f4e3c5fbee3aef999cc7fba92d94","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AnyObjectMod.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyObjectMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyObjectMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAnyObjectMod.java?ref=a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea","patch":"@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.mod;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlRootElement(name = \"anyObjectMod\")\n-@XmlType\n-public class AnyObjectMod extends AnyMod {\n-\n-    private static final long serialVersionUID = -3474517624611170097L;\n-\n-    private final List<Long> relationshipsToAdd = new ArrayList<>();\n-\n-    private final List<Long> relationshipsToRemove = new ArrayList<>();\n-\n-    private final List<Long> membershipsToAdd = new ArrayList<>();\n-\n-    private final List<Long> membershipsToRemove = new ArrayList<>();\n-\n-    @XmlElementWrapper(name = \"relationshipsToAdd\")\n-    @XmlElement(name = \"relationship\")\n-    @JsonProperty(\"relationshipsToAdd\")\n-    public List<Long> getRelationshipsToAdd() {\n-        return relationshipsToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"urelationshipsToRemove\")\n-    @XmlElement(name = \"urelationship\")\n-    @JsonProperty(\"urelationshipsToRemove\")\n-    public List<Long> getRelationshipsToRemove() {\n-        return relationshipsToRemove;\n-    }\n-\n-    @XmlElementWrapper(name = \"membershipsToAdd\")\n-    @XmlElement(name = \"membership\")\n-    @JsonProperty(\"membershipsToAdd\")\n-    public List<Long> getMembershipsToAdd() {\n-        return membershipsToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"membershipsToRemove\")\n-    @XmlElement(name = \"membership\")\n-    @JsonProperty(\"membershipsToRemove\")\n-    public List<Long> getMembershipsToRemove() {\n-        return membershipsToRemove;\n-    }\n-\n-}"},{"sha":"07fe784d1f0f315c18e2ec86e56850743c4cfe76","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/AttrMod.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAttrMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAttrMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FAttrMod.java?ref=a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea","patch":"@@ -1,69 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.mod;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-\n-@XmlRootElement\n-@XmlType\n-public class AttrMod extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -913573979137431406L;\n-\n-    private String schema;\n-\n-    private final List<String> valuesToBeAdded = new ArrayList<>();\n-\n-    private final List<String> valuesToBeRemoved = new ArrayList<>();\n-\n-    public String getSchema() {\n-        return schema;\n-    }\n-\n-    public void setSchema(final String schema) {\n-        this.schema = schema;\n-    }\n-\n-    @XmlElementWrapper(name = \"valuesToBeAdded\")\n-    @XmlElement(name = \"value\")\n-    @JsonProperty(\"valuesToBeAdded\")\n-    public List<String> getValuesToBeAdded() {\n-        return valuesToBeAdded;\n-    }\n-\n-    @XmlElementWrapper(name = \"valuesToBeRemoved\")\n-    @XmlElement(name = \"value\")\n-    @JsonProperty(\"valuesToBeRemoved\")\n-    public List<String> getValuesToBeRemoved() {\n-        return valuesToBeRemoved;\n-    }\n-\n-    @JsonIgnore\n-    public boolean isEmpty() {\n-        return valuesToBeAdded.isEmpty() && valuesToBeRemoved.isEmpty();\n-    }\n-}"},{"sha":"3c948eacf6cb06c67c0ca8ed9b3ecdb8e81448a9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/GroupMod.java","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java?ref=a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea","patch":"@@ -1,87 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.mod;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlRootElement(name = \"groupMod\")\n-@XmlType\n-public class GroupMod extends AnyMod {\n-\n-    private static final long serialVersionUID = 7455805264680210747L;\n-\n-    private String name;\n-\n-    private ReferenceMod userOwner;\n-\n-    private ReferenceMod groupOwner;\n-\n-    private String aDynMembershipCond;\n-\n-    private String uDynMembershipCond;\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-\n-    public ReferenceMod getUserOwner() {\n-        return userOwner;\n-    }\n-\n-    public void setUserOwner(final ReferenceMod userOwner) {\n-        this.userOwner = userOwner;\n-    }\n-\n-    public ReferenceMod getGroupOwner() {\n-        return groupOwner;\n-    }\n-\n-    public void setGroupOwner(final ReferenceMod groupOwner) {\n-        this.groupOwner = groupOwner;\n-    }\n-\n-    public String getADynMembershipCond() {\n-        return aDynMembershipCond;\n-    }\n-\n-    public void setADynMembershipCond(final String aDynMembershipCond) {\n-        this.aDynMembershipCond = aDynMembershipCond;\n-    }\n-\n-    public String getUDynMembershipCond() {\n-        return uDynMembershipCond;\n-    }\n-\n-    public void setUDynMembershipCond(final String uDynMembershipCond) {\n-        this.uDynMembershipCond = uDynMembershipCond;\n-    }\n-\n-    @JsonIgnore\n-    @Override\n-    public boolean isEmpty() {\n-        return super.isEmpty() && name == null && userOwner == null && groupOwner == null\n-                && aDynMembershipCond == null && uDynMembershipCond == null;\n-    }\n-}"},{"sha":"f894c26dac106b40744363b046bc59c1b01d20b4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/ResourceAssociationMod.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FResourceAssociationMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FResourceAssociationMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FResourceAssociationMod.java?ref=a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea","patch":"@@ -1,80 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.mod;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n-\n-/**\n- * This class is used to specify the willing to create associations between user and external references.\n- * Password can be provided if required by an assign or provisioning operation.\n- *\n- * @see org.apache.syncope.common.types.ResourceAssociationActionType\n- */\n-@XmlRootElement(name = \"resourceAssociationMod\")\n-@XmlType\n-public class ResourceAssociationMod extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -4188817853738067678L;\n-\n-    /**\n-     * Target external resources.\n-     */\n-    private final List<ResourceKey> targetResources = new ArrayList<ResourceKey>();\n-\n-    /**\n-     * Indicate the willing to change password on target external resources.\n-     */\n-    private boolean changePwd;\n-\n-    /**\n-     * Indicate the new password to be provisioned on target external resources.\n-     */\n-    private String password;\n-\n-    @XmlElementWrapper(name = \"resources\")\n-    @XmlElement(name = \"resource\")\n-    @JsonProperty(\"resources\")\n-    public List<ResourceKey> getTargetResources() {\n-        return targetResources;\n-    }\n-\n-    public boolean isChangePwd() {\n-        return changePwd;\n-    }\n-\n-    public void setChangePwd(final boolean changePwd) {\n-        this.changePwd = changePwd;\n-    }\n-\n-    public String getPassword() {\n-        return password;\n-    }\n-\n-    public void setPassword(final String password) {\n-        this.password = password;\n-    }\n-}"},{"sha":"95059fe0ab861d05142cddb60cc2c5efa48a139a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/UserMod.java","status":"removed","additions":0,"deletions":163,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java?ref=a5d2a92347e2ce7271066b4fa9c35e5106dfc3ea","patch":"@@ -1,163 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.mod;\n-\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-@XmlRootElement(name = \"userMod\")\n-@XmlType\n-public class UserMod extends AnyMod {\n-\n-    private static final long serialVersionUID = 3081848906558106204L;\n-\n-    private String username;\n-\n-    private String password;\n-\n-    private final List<Long> relationshipsToAdd = new ArrayList<>();\n-\n-    private final List<Long> relationshipsToRemove = new ArrayList<>();\n-\n-    private final List<Long> membershipsToAdd = new ArrayList<>();\n-\n-    private final List<Long> membershipsToRemove = new ArrayList<>();\n-\n-    private final Set<Long> rolesToAdd = new HashSet<>();\n-\n-    private final Set<Long> rolesToRemove = new HashSet<>();\n-\n-    private StatusMod pwdPropRequest;\n-\n-    private Long securityQuestion;\n-\n-    private String securityAnswer;\n-\n-    private boolean mustChangePassword;\n-\n-    public String getUsername() {\n-        return username;\n-    }\n-\n-    public void setUsername(final String username) {\n-        this.username = username;\n-    }\n-\n-    public String getPassword() {\n-        return password;\n-    }\n-\n-    public void setPassword(final String password) {\n-        this.password = password;\n-    }\n-\n-    @XmlElementWrapper(name = \"relationshipsToAdd\")\n-    @XmlElement(name = \"relationship\")\n-    @JsonProperty(\"relationshipsToAdd\")\n-    public List<Long> getRelationshipsToAdd() {\n-        return relationshipsToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"urelationshipsToRemove\")\n-    @XmlElement(name = \"urelationship\")\n-    @JsonProperty(\"urelationshipsToRemove\")\n-    public List<Long> getRelationshipsToRemove() {\n-        return relationshipsToRemove;\n-    }\n-\n-    @XmlElementWrapper(name = \"membershipsToAdd\")\n-    @XmlElement(name = \"membership\")\n-    @JsonProperty(\"membershipsToAdd\")\n-    public List<Long> getMembershipsToAdd() {\n-        return membershipsToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"membershipsToRemove\")\n-    @XmlElement(name = \"membership\")\n-    @JsonProperty(\"membershipsToRemove\")\n-    public List<Long> getMembershipsToRemove() {\n-        return membershipsToRemove;\n-    }\n-\n-    @XmlElementWrapper(name = \"rolesToAdd\")\n-    @XmlElement(name = \"role\")\n-    @JsonProperty(\"rolesToAdd\")\n-    public Set<Long> getRolesToAdd() {\n-        return rolesToAdd;\n-    }\n-\n-    @XmlElementWrapper(name = \"rolesToRemove\")\n-    @XmlElement(name = \"role\")\n-    @JsonProperty(\"rolesToRemove\")\n-    public Set<Long> getRolesToRemove() {\n-        return rolesToRemove;\n-    }\n-\n-    public StatusMod getPwdPropRequest() {\n-        return pwdPropRequest;\n-    }\n-\n-    public void setPwdPropRequest(final StatusMod pwdPropRequest) {\n-        this.pwdPropRequest = pwdPropRequest;\n-    }\n-\n-    public Long getSecurityQuestion() {\n-        return securityQuestion;\n-    }\n-\n-    public void setSecurityQuestion(final Long securityQuestion) {\n-        this.securityQuestion = securityQuestion;\n-    }\n-\n-    public String getSecurityAnswer() {\n-        return securityAnswer;\n-    }\n-\n-    public void setSecurityAnswer(final String securityAnswer) {\n-        this.securityAnswer = securityAnswer;\n-    }\n-\n-    public boolean isMustChangePassword() {\n-        return mustChangePassword;\n-    }\n-\n-    public void setMustChangePassword(final boolean mustChangePassword) {\n-        this.mustChangePassword = mustChangePassword;\n-    }\n-\n-    @JsonIgnore\n-    @Override\n-    public boolean isEmpty() {\n-        return super.isEmpty()\n-                && password == null\n-                && username == null\n-                && pwdPropRequest == null\n-                && securityQuestion == null\n-                && securityAnswer == null\n-                && !mustChangePassword;\n-    }\n-}"},{"sha":"bb881a7b9e585c3650df170dc568dafeb8ea454e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AbstractPatch.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+\n+@XmlType\n+@XmlSeeAlso({ AbstractPatchItem.class, AttrPatch.class, MembershipPatch.class, RelationshipPatch.class })\n+public abstract class AbstractPatch extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4729181508529829580L;\n+\n+    protected abstract static class Builder<P extends AbstractPatch, B extends Builder<P, B>> {\n+\n+        protected P instance;\n+\n+        protected abstract P newInstance();\n+\n+        protected P getInstance() {\n+            if (instance == null) {\n+                instance = newInstance();\n+            }\n+            return instance;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B operation(final PatchOperation operation) {\n+            getInstance().setOperation(operation);\n+            return (B) this;\n+        }\n+\n+        public P build() {\n+            if (getInstance().getOperation() == null) {\n+                instance.setOperation(PatchOperation.ADD_REPLACE);\n+            }\n+            return getInstance();\n+        }\n+    }\n+\n+    private PatchOperation operation;\n+\n+    public PatchOperation getOperation() {\n+        return operation;\n+    }\n+\n+    public void setOperation(final PatchOperation operation) {\n+        this.operation = operation;\n+    }\n+\n+}"},{"sha":"ee86a880313e5c7723276b88d7426c685a5f3320","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AbstractPatchItem.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractPatchItem.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlType\n+@XmlSeeAlso({ AbstractReplacePatchItem.class, LongPatchItem.class, StringPatchItem.class })\n+public abstract class AbstractPatchItem<T> extends AbstractPatch {\n+\n+    private static final long serialVersionUID = -8889326446009942028L;\n+\n+    protected abstract static class Builder<T, P extends AbstractPatchItem<T>, B extends Builder<T, P, B>>\n+            extends AbstractPatch.Builder<P, B> {\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public B value(final T value) {\n+            getInstance().setValue(value);\n+            return (B) this;\n+        }\n+    }\n+\n+    private T value;\n+\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final T value) {\n+        this.value = value;\n+    }\n+\n+}"},{"sha":"e8f17f4886afa1d35b1834aaf671b4d5cee7d128","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AbstractReplacePatchItem.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractReplacePatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractReplacePatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAbstractReplacePatchItem.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+\n+/**\n+ * When a field of this type from {@link AnyPatch}, {@link AnyObjectPatch}, {@link GroupPatch} or {@link UserPatch} is\n+ * {@code null}, no change will be performed; otherwise the result from {@link #getValue()} will replace the current\n+ * value of the related field.\n+ *\n+ * @param <T> {@code String}, {@code Long} or {@code Boolean}\n+ */\n+@XmlType\n+@XmlSeeAlso({ BooleanReplacePatchItem.class, LongReplacePatchItem.class, StringReplacePatchItem.class })\n+public abstract class AbstractReplacePatchItem<T> extends AbstractPatchItem<T> {\n+\n+    private static final long serialVersionUID = 2027599764019829563L;\n+\n+    public AbstractReplacePatchItem() {\n+        super();\n+        super.setOperation(PatchOperation.ADD_REPLACE);\n+    }\n+\n+    @Override\n+    public void setOperation(final PatchOperation operation) {\n+        // fixed\n+    }\n+\n+}"},{"sha":"e473e062895c80e4055c02f9014ce40049c6e3a3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyObjectPatch.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyObjectPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"anyObjectPatch\")\n+@XmlType\n+public class AnyObjectPatch extends AnyPatch {\n+\n+    private static final long serialVersionUID = -1644118942622556097L;\n+\n+    private final Set<RelationshipPatch> relationships = new HashSet<>();\n+\n+    private final Set<MembershipPatch> memberships = new HashSet<>();\n+\n+    @XmlElementWrapper(name = \"relationships\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationships\")\n+    public Set<RelationshipPatch> getRelationships() {\n+        return relationships;\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    public Set<MembershipPatch> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return super.isEmpty() && relationships.isEmpty() && memberships.isEmpty();\n+    }\n+\n+}"},{"sha":"e4b9e87cc02f3bda53b3ddfd11e16545e63947e4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyPatch.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlType\n+public abstract class AnyPatch extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -7445489774552440544L;\n+\n+    private long key;\n+\n+    private StringReplacePatchItem realm;\n+\n+    private final Set<StringPatchItem> auxClasses = new HashSet<>();\n+\n+    private final Set<AttrPatch> plainAttrs = new HashSet<>();\n+\n+    private final Set<AttrPatch> derAttrs = new HashSet<>();\n+\n+    private final Set<AttrPatch> virAttrs = new HashSet<>();\n+\n+    private final Set<StringPatchItem> resources = new HashSet<>();\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    public StringReplacePatchItem getRealm() {\n+        return realm;\n+    }\n+\n+    public void setRealm(final StringReplacePatchItem realm) {\n+        this.realm = realm;\n+    }\n+\n+    @XmlElementWrapper(name = \"auxClasses\")\n+    @XmlElement(name = \"auxClass\")\n+    @JsonProperty(\"auxClasses\")\n+    public Set<StringPatchItem> getAuxClasses() {\n+        return auxClasses;\n+    }\n+\n+    @XmlElementWrapper(name = \"plainAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"plainAttrs\")\n+    public Set<AttrPatch> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"derAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"derAttrs\")\n+    public Set<AttrPatch> getDerAttrs() {\n+        return derAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"virAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"virAttrs\")\n+    public Set<AttrPatch> getVirAttrs() {\n+        return virAttrs;\n+    }\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public Set<StringPatchItem> getResources() {\n+        return resources;\n+    }\n+\n+    /**\n+     * @return true if no actual changes are defined\n+     */\n+    @JsonIgnore\n+    public boolean isEmpty() {\n+        return realm == null && auxClasses.isEmpty() && plainAttrs.isEmpty() && derAttrs.isEmpty()\n+                && virAttrs.isEmpty() && resources.isEmpty();\n+    }\n+}"},{"sha":"009b30d7cd27934bba6fb2d239935bac2bfe5724","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AssociationPatch.java","status":"renamed","additions":18,"deletions":19,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAssociationPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAssociationPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAssociationPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -16,39 +16,38 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.mod;\n+package org.apache.syncope.common.lib.patch;\n \n+import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n \n-/**\n- * This class is used to specify the willing to modify an external reference id. Use 'null' ReferenceMod to keep the\n- * current reference id; use a ReferenceMod with a null id to try to reset the reference id; use a ReferenceMod with a\n- * not null id to specify a new reference id.\n- */\n-@XmlRootElement(name = \"referenceMod\")\n+@XmlRootElement(name = \"associationPatch\")\n @XmlType\n-public class ReferenceMod extends AbstractBaseBean {\n+public class AssociationPatch extends PasswordPatch {\n+\n+    private static final long serialVersionUID = 6295778399633883767L;\n \n-    private static final long serialVersionUID = -4188817853738067677L;\n+    private long key;\n \n-    private Long key = null;\n+    private ResourceAssociationAction action;\n \n-    public ReferenceMod() {\n-        this(null);\n+    public long getKey() {\n+        return key;\n     }\n \n-    public ReferenceMod(final Long key) {\n-        super();\n+    @PathParam(\"key\")\n+    public void setKey(final long key) {\n         this.key = key;\n     }\n \n-    public Long getKey() {\n-        return key;\n+    public ResourceAssociationAction getAction() {\n+        return action;\n     }\n \n-    public void setKey(final Long key) {\n-        this.key = key;\n+    @PathParam(\"action\")\n+    public void setAction(final ResourceAssociationAction action) {\n+        this.action = action;\n     }\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/ReferenceMod.java"},{"sha":"f41a054da879d0ba03dc922c8c32d3fe3f7e1296","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AttrPatch.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAttrPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAttrPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAttrPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+\n+@XmlRootElement(name = \"attrPatch\")\n+@XmlType\n+public class AttrPatch extends AbstractPatch {\n+\n+    private static final long serialVersionUID = 6881634224246176673L;\n+\n+    public static class Builder extends AbstractPatch.Builder<AttrPatch, Builder> {\n+\n+        @Override\n+        protected AttrPatch newInstance() {\n+            return new AttrPatch();\n+        }\n+\n+        public Builder attrTO(final AttrTO attrTO) {\n+            getInstance().setAttrTO(attrTO);\n+            return this;\n+        }\n+\n+    }\n+\n+    private AttrTO attrTO;\n+\n+    public AttrTO getAttrTO() {\n+        return attrTO;\n+    }\n+\n+    public void setAttrTO(final AttrTO attrTO) {\n+        this.attrTO = attrTO;\n+    }\n+\n+    @JsonIgnore\n+    public boolean isEmpty() {\n+        return attrTO == null || attrTO.getValues().isEmpty();\n+    }\n+}"},{"sha":"9cf109747c15f2feecac69b92650a999b755df0b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/BooleanReplacePatchItem.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FBooleanReplacePatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FBooleanReplacePatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FBooleanReplacePatchItem.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"booleanReplacePatchItem\")\n+@XmlType\n+public class BooleanReplacePatchItem extends AbstractReplacePatchItem<Boolean> {\n+\n+    private static final long serialVersionUID = 4013349284181583101L;\n+\n+    public static class Builder extends AbstractReplacePatchItem.Builder<Boolean, BooleanReplacePatchItem, Builder> {\n+\n+        @Override\n+        protected BooleanReplacePatchItem newInstance() {\n+            return new BooleanReplacePatchItem();\n+        }\n+\n+    }\n+}"},{"sha":"1067753b75a1ce84c51d5d6c0ee63e5af6e2b579","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/DeassociationPatch.java","status":"renamed","additions":12,"deletions":55,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FDeassociationPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FDeassociationPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FDeassociationPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -16,56 +16,30 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.mod;\n+package org.apache.syncope.common.lib.patch;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n import java.util.List;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlEnum;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n \n-@XmlRootElement(name = \"statusMod\")\n+@XmlRootElement(name = \"deassociationPatch\")\n @XmlType\n-public class StatusMod extends AbstractBaseBean {\n+public class DeassociationPatch extends AbstractBaseBean {\n \n-    private static final long serialVersionUID = 3230910033784302656L;\n+    private static final long serialVersionUID = 6295778399633883767L;\n \n-    @XmlEnum\n-    @XmlType(name = \"statusModType\")\n-    public enum ModType {\n-\n-        ACTIVATE,\n-        SUSPEND,\n-        REACTIVATE;\n-\n-    }\n-\n-    /**\n-     * Key of user to for which status update is requested.\n-     */\n     private long key;\n \n-    private ModType type;\n+    private ResourceDeassociationAction action;\n \n-    /**\n-     * Update token (if required).\n-     */\n-    private String token;\n-\n-    /**\n-     * Whether update should be performed on internal storage.\n-     */\n-    private boolean onSyncope = true;\n-\n-    /**\n-     * External resources for which update is needed to be propagated.\n-     */\n-    private final List<String> resourceNames = new ArrayList<>();\n+    private final List<String> resources = new ArrayList<>();\n \n     public long getKey() {\n         return key;\n@@ -76,35 +50,18 @@ public void setKey(final long key) {\n         this.key = key;\n     }\n \n-    public ModType getType() {\n-        return type;\n-    }\n-\n-    public void setType(final ModType type) {\n-        this.type = type;\n+    public ResourceDeassociationAction getAction() {\n+        return action;\n     }\n \n-    public String getToken() {\n-        return token;\n-    }\n-\n-    public void setToken(final String token) {\n-        this.token = token;\n-    }\n-\n-    public boolean isOnSyncope() {\n-        return onSyncope;\n-    }\n-\n-    public void setOnSyncope(final boolean onSyncope) {\n-        this.onSyncope = onSyncope;\n+    public void setAction(final ResourceDeassociationAction action) {\n+        this.action = action;\n     }\n \n     @XmlElementWrapper(name = \"resources\")\n     @XmlElement(name = \"resource\")\n     @JsonProperty(\"resources\")\n     public List<String> getResources() {\n-        return resourceNames;\n+        return resources;\n     }\n-\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/StatusMod.java"},{"sha":"310c3d1d719476c8cce17659aa9e22bf4970cbf3","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"groupPatch\")\n+@XmlType\n+public class GroupPatch extends AnyPatch {\n+\n+    private static final long serialVersionUID = -460284378124440077L;\n+\n+    private StringReplacePatchItem name;\n+\n+    private LongReplacePatchItem userOwner;\n+\n+    private LongReplacePatchItem groupOwner;\n+\n+    private StringReplacePatchItem adynMembershipCond;\n+\n+    private StringReplacePatchItem udynMembershipCond;\n+\n+    public StringReplacePatchItem getName() {\n+        return name;\n+    }\n+\n+    public void setName(final StringReplacePatchItem name) {\n+        this.name = name;\n+    }\n+\n+    public LongReplacePatchItem getUserOwner() {\n+        return userOwner;\n+    }\n+\n+    public void setUserOwner(final LongReplacePatchItem userOwner) {\n+        this.userOwner = userOwner;\n+    }\n+\n+    public LongReplacePatchItem getGroupOwner() {\n+        return groupOwner;\n+    }\n+\n+    public void setGroupOwner(final LongReplacePatchItem groupOwner) {\n+        this.groupOwner = groupOwner;\n+    }\n+\n+    public StringReplacePatchItem getADynMembershipCond() {\n+        return adynMembershipCond;\n+    }\n+\n+    public void setADynMembershipCond(final StringReplacePatchItem adynMembershipCond) {\n+        this.adynMembershipCond = adynMembershipCond;\n+    }\n+\n+    public StringReplacePatchItem getUDynMembershipCond() {\n+        return udynMembershipCond;\n+    }\n+\n+    public void setUDynMembershipCond(final StringReplacePatchItem udynMembershipCond) {\n+        this.udynMembershipCond = udynMembershipCond;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return super.isEmpty()\n+                && name == null && userOwner == null && groupOwner == null\n+                && adynMembershipCond == null && udynMembershipCond == null;\n+    }\n+\n+}"},{"sha":"96c60509379d2737d763984dc7127fa60f218741","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/LongPatchItem.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FLongPatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FLongPatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FLongPatchItem.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"stringPatchItem\")\n+@XmlType\n+public class LongPatchItem extends AbstractPatchItem<Long> {\n+\n+    private static final long serialVersionUID = 7308597905137875993L;\n+\n+    public static class Builder extends AbstractPatchItem.Builder<Long, LongPatchItem, Builder> {\n+\n+        @Override\n+        protected LongPatchItem newInstance() {\n+            return new LongPatchItem();\n+        }\n+\n+    }\n+}"},{"sha":"85b0878eba3342e7914a605ec27aaf7847148cbd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/LongReplacePatchItem.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FLongReplacePatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FLongReplacePatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FLongReplacePatchItem.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"longReplacePatchItem\")\n+@XmlType\n+public class LongReplacePatchItem extends AbstractReplacePatchItem<Long> {\n+\n+    private static final long serialVersionUID = -2468696387745469136L;\n+\n+    public static class Builder extends AbstractReplacePatchItem.Builder<Long, LongReplacePatchItem, Builder> {\n+\n+        @Override\n+        protected LongReplacePatchItem newInstance() {\n+            return new LongReplacePatchItem();\n+        }\n+    }\n+}"},{"sha":"b29a6de1b14301cb8e98fc96480e642f9f80c56d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/MembershipPatch.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FMembershipPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+\n+@XmlRootElement(name = \"membershipPatch\")\n+@XmlType\n+public class MembershipPatch extends AbstractPatch {\n+\n+    private static final long serialVersionUID = -6783121761221554433L;\n+\n+    public static class Builder extends AbstractPatch.Builder<MembershipPatch, Builder> {\n+\n+        @Override\n+        protected MembershipPatch newInstance() {\n+            return new MembershipPatch();\n+        }\n+\n+        public Builder membershipTO(final MembershipTO membershipTO) {\n+            getInstance().setMembershipTO(membershipTO);\n+            return this;\n+        }\n+    }\n+\n+    private MembershipTO membershipTO;\n+\n+    public MembershipTO getMembershipTO() {\n+        return membershipTO;\n+    }\n+\n+    public void setMembershipTO(final MembershipTO membershipTO) {\n+        this.membershipTO = membershipTO;\n+    }\n+\n+}"},{"sha":"1149d2d8be961bd3cb57e06fa702e0ef5a80964b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/PasswordPatch.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FPasswordPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.CollectionUtils;\n+\n+@XmlRootElement(name = \"passwordPatch\")\n+@XmlType\n+@XmlSeeAlso({ AssociationPatch.class, StatusPatch.class })\n+public class PasswordPatch extends StringReplacePatchItem {\n+\n+    private static final long serialVersionUID = 961023537479513071L;\n+\n+    public static class Builder extends AbstractReplacePatchItem.Builder<String, PasswordPatch, Builder> {\n+\n+        @Override\n+        protected PasswordPatch newInstance() {\n+            return new PasswordPatch();\n+        }\n+\n+        public Builder onSyncope(final boolean onSyncope) {\n+            getInstance().setOnSyncope(onSyncope);\n+            return this;\n+        }\n+\n+        public Builder resource(final String resource) {\n+            if (resource != null) {\n+                getInstance().getResources().add(resource);\n+            }\n+            return this;\n+        }\n+\n+        public Builder values(final String... resources) {\n+            CollectionUtils.addAll(getInstance().getResources(), resources);\n+            return this;\n+        }\n+\n+        public Builder resources(final Collection<String> resources) {\n+            if (resources != null) {\n+                getInstance().getResources().addAll(resources);\n+            }\n+            return this;\n+        }\n+\n+    }\n+\n+    /**\n+     * Whether update should be performed on internal storage.\n+     */\n+    private boolean onSyncope = true;\n+\n+    /**\n+     * External resources for which update is needed to be propagated.\n+     */\n+    private final List<String> resources = new ArrayList<>();\n+\n+    public boolean isOnSyncope() {\n+        return onSyncope;\n+    }\n+\n+    public void setOnSyncope(final boolean onSyncope) {\n+        this.onSyncope = onSyncope;\n+    }\n+\n+    @XmlElementWrapper(name = \"resources\")\n+    @XmlElement(name = \"resource\")\n+    @JsonProperty(\"resources\")\n+    public List<String> getResources() {\n+        return resources;\n+    }\n+\n+}"},{"sha":"f7925e9139f4cdbd77777ef943449c0d911d19db","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/RelationshipPatch.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FRelationshipPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FRelationshipPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FRelationshipPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n+\n+@XmlRootElement(name = \"relationshipPatch\")\n+@XmlType\n+public class RelationshipPatch extends AbstractPatch {\n+\n+    private static final long serialVersionUID = 1314175521205206511L;\n+\n+    public static class Builder extends AbstractPatch.Builder<RelationshipPatch, Builder> {\n+\n+        @Override\n+        protected RelationshipPatch newInstance() {\n+            return new RelationshipPatch();\n+        }\n+\n+        public Builder relationshipTO(final RelationshipTO relationshipTO) {\n+            getInstance().setRelationshipTO(relationshipTO);\n+            return this;\n+        }\n+    }\n+\n+    private RelationshipTO relationshipTO;\n+\n+    public RelationshipTO getRelationshipTO() {\n+        return relationshipTO;\n+    }\n+\n+    public void setRelationshipTO(final RelationshipTO relationshipTO) {\n+        this.relationshipTO = relationshipTO;\n+    }\n+\n+}"},{"sha":"be299b16845009bd23fcf714af0b85b80d38ced9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/StatusPatch.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStatusPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStatusPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStatusPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n+\n+@XmlRootElement(name = \"statusPatch\")\n+@XmlType\n+public class StatusPatch extends PasswordPatch {\n+\n+    private static final long serialVersionUID = 99309988426922612L;\n+\n+    /**\n+     * Key of user to for which status update is requested.\n+     */\n+    private long key;\n+\n+    private StatusPatchType type;\n+\n+    /**\n+     * Update token (if required).\n+     */\n+    private String token;\n+\n+    public long getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    public void setKey(final long key) {\n+        this.key = key;\n+    }\n+\n+    public StatusPatchType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final StatusPatchType type) {\n+        this.type = type;\n+    }\n+\n+    public String getToken() {\n+        return token;\n+    }\n+\n+    public void setToken(final String token) {\n+        this.token = token;\n+    }\n+\n+}"},{"sha":"d9aacf82d560b923607712a12d5af55b0ea1479d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/StringPatchItem.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStringPatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStringPatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStringPatchItem.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"stringPatchItem\")\n+@XmlType\n+public class StringPatchItem extends AbstractPatchItem<String> {\n+\n+    private static final long serialVersionUID = -4956965404796800689L;\n+\n+    public static class Builder extends AbstractPatchItem.Builder<String, StringPatchItem, Builder> {\n+\n+        @Override\n+        protected StringPatchItem newInstance() {\n+            return new StringPatchItem();\n+        }\n+\n+    }\n+}"},{"sha":"b9244840deef774e043a504bfdeaf1d2d16c4a3a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/StringReplacePatchItem.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStringReplacePatchItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStringReplacePatchItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FStringReplacePatchItem.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"stringReplacePatchItem\")\n+@XmlType\n+@XmlSeeAlso({ PasswordPatch.class })\n+public class StringReplacePatchItem extends AbstractReplacePatchItem<String> {\n+\n+    private static final long serialVersionUID = -5631052324901928363L;\n+\n+    public static class Builder extends AbstractReplacePatchItem.Builder<String, StringReplacePatchItem, Builder> {\n+\n+        @Override\n+        protected StringReplacePatchItem newInstance() {\n+            return new StringReplacePatchItem();\n+        }\n+\n+    }\n+}"},{"sha":"9131abd128f192e261cf169e503603c7c56d9f57","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/UserPatch.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FUserPatch.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.patch;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"userPatch\")\n+@XmlType\n+public class UserPatch extends AnyPatch {\n+\n+    private static final long serialVersionUID = 2872795537911821448L;\n+\n+    private StringReplacePatchItem username;\n+\n+    private PasswordPatch password;\n+\n+    private LongReplacePatchItem securityQuestion;\n+\n+    private StringReplacePatchItem securityAnswer;\n+\n+    private BooleanReplacePatchItem mustChangePassword;\n+\n+    private final Set<RelationshipPatch> relationships = new HashSet<>();\n+\n+    private final Set<MembershipPatch> memberships = new HashSet<>();\n+\n+    private final Set<LongPatchItem> roles = new HashSet<>();\n+\n+    public StringReplacePatchItem getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final StringReplacePatchItem username) {\n+        this.username = username;\n+    }\n+\n+    public PasswordPatch getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(final PasswordPatch password) {\n+        this.password = password;\n+    }\n+\n+    public LongReplacePatchItem getSecurityQuestion() {\n+        return securityQuestion;\n+    }\n+\n+    public void setSecurityQuestion(final LongReplacePatchItem securityQuestion) {\n+        this.securityQuestion = securityQuestion;\n+    }\n+\n+    public StringReplacePatchItem getSecurityAnswer() {\n+        return securityAnswer;\n+    }\n+\n+    public void setSecurityAnswer(final StringReplacePatchItem securityAnswer) {\n+        this.securityAnswer = securityAnswer;\n+    }\n+\n+    public BooleanReplacePatchItem getMustChangePassword() {\n+        return mustChangePassword;\n+    }\n+\n+    public void setMustChangePassword(final BooleanReplacePatchItem mustChangePassword) {\n+        this.mustChangePassword = mustChangePassword;\n+    }\n+\n+    @XmlElementWrapper(name = \"relationships\")\n+    @XmlElement(name = \"relationship\")\n+    @JsonProperty(\"relationships\")\n+    public Set<RelationshipPatch> getRelationships() {\n+        return relationships;\n+    }\n+\n+    @XmlElementWrapper(name = \"memberships\")\n+    @XmlElement(name = \"membership\")\n+    @JsonProperty(\"memberships\")\n+    public Set<MembershipPatch> getMemberships() {\n+        return memberships;\n+    }\n+\n+    @XmlElementWrapper(name = \"roles\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"roles\")\n+    public Set<LongPatchItem> getRoles() {\n+        return roles;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return super.isEmpty()\n+                && username == null && password == null && securityQuestion == null && securityAnswer == null\n+                && mustChangePassword == null && relationships.isEmpty() && memberships.isEmpty() && roles.isEmpty();\n+    }\n+}"},{"sha":"426ac6d5e93040841ca38ac9a2c93d81ac2a2b68","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/package-info.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2Fpackage-info.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -17,7 +17,7 @@\n  * under the License.\n  */\n @XmlSchema(namespace = SyncopeConstants.NAMESPACE)\n-package org.apache.syncope.common.lib.mod;\n+package org.apache.syncope.common.lib.patch;\n \n import javax.xml.bind.annotation.XmlSchema;\n import org.apache.syncope.common.lib.SyncopeConstants;","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/package-info.java"},{"sha":"8ff578c82c0d411618ecfea7f03308c40d32398f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AbstractSchemaTO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAbstractSchemaTO.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,12 +20,10 @@\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import javax.ws.rs.PathParam;\n-import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlSeeAlso;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n-@XmlRootElement(name = \"abstractSchema\")\n @XmlType\n @XmlSeeAlso({ PlainSchemaTO.class, DerSchemaTO.class, VirSchemaTO.class })\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")"},{"sha":"65a6b51dbbcc06a26e5b42334b04b59348ffa663","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AttrTO.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAttrTO.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,19 +21,55 @@\n import org.apache.syncope.common.lib.AbstractBaseBean;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.CollectionUtils;\n \n @XmlRootElement(name = \"attribute\")\n @XmlType\n public class AttrTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 4941691338796323623L;\n \n+    public static class Builder {\n+\n+        private final AttrTO instance = new AttrTO();\n+\n+        public Builder schema(final String schema) {\n+            instance.setSchema(schema);\n+            return this;\n+        }\n+\n+        public Builder readonly(final boolean readonly) {\n+            instance.setReadonly(readonly);\n+            return this;\n+        }\n+\n+        public Builder value(final String value) {\n+            instance.getValues().add(value);\n+            return this;\n+        }\n+\n+        public Builder values(final String... values) {\n+            CollectionUtils.addAll(instance.getValues(), values);\n+            return this;\n+        }\n+\n+        public Builder values(final Collection<String> values) {\n+            instance.getValues().addAll(values);\n+            return this;\n+        }\n+\n+        public AttrTO build() {\n+            return instance;\n+        }\n+    }\n+\n     /**\n      * Name of the schema that this attribute is referring to.\n      */"},{"sha":"aa68a23e6ec6f1f82291f7ee13691a18a064b9ec","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MembershipTO.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMembershipTO.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -28,15 +28,41 @@ public class MembershipTO extends RelationshipTO {\n \n     private static final long serialVersionUID = 5992828670273935861L;\n \n+    public static class Builder {\n+\n+        private final MembershipTO instance = new MembershipTO();\n+\n+        public Builder left(final String leftType, final long leftKey) {\n+            instance.setLeftType(leftType);\n+            instance.setLeftKey(leftKey);\n+            return this;\n+        }\n+\n+        public Builder group(final long groupKey) {\n+            instance.setRightKey(groupKey);\n+            return this;\n+        }\n+\n+        public Builder group(final long groupKey, final String groupName) {\n+            instance.setRightKey(groupKey);\n+            instance.setGroupName(groupName);\n+            return this;\n+        }\n+\n+        public MembershipTO build() {\n+            return instance;\n+        }\n+    }\n+\n     private String groupName;\n \n     @Override\n-    public String getRelationshipType() {\n+    public String getType() {\n         return \"Membership\";\n     }\n \n     @Override\n-    public void setRelationshipType(final String relationshipType) {\n+    public void setType(final String relationshipType) {\n         // ignore\n     }\n "},{"sha":"e20621b7b3ade32375a22e41e30736cab85666b2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RelationshipTO.java","status":"modified","additions":31,"deletions":5,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRelationshipTO.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -28,7 +28,33 @@ public class RelationshipTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 360672942026613929L;\n \n-    private String relationshipType;\n+    public static class Builder {\n+\n+        private final RelationshipTO instance = new RelationshipTO();\n+\n+        public Builder type(final String type) {\n+            instance.setType(type);\n+            return this;\n+        }\n+\n+        public Builder left(final String leftType, final long leftKey) {\n+            instance.setLeftType(leftType);\n+            instance.setLeftKey(leftKey);\n+            return this;\n+        }\n+\n+        public Builder right(final String rightType, final long rightKey) {\n+            instance.setRightType(rightType);\n+            instance.setRightKey(rightKey);\n+            return this;\n+        }\n+\n+        public RelationshipTO build() {\n+            return instance;\n+        }\n+    }\n+\n+    private String type;\n \n     private String leftType;\n \n@@ -38,12 +64,12 @@ public class RelationshipTO extends AbstractBaseBean {\n \n     private long rightKey;\n \n-    public String getRelationshipType() {\n-        return relationshipType;\n+    public String getType() {\n+        return type;\n     }\n \n-    public void setRelationshipType(final String relationshipType) {\n-        this.relationshipType = relationshipType;\n+    public void setType(final String type) {\n+        this.type = type;\n     }\n \n     public String getLeftType() {"},{"sha":"9872cbf6dcbfeb138824850b485810226ee29603","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PatchOperation.java","status":"renamed","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPatchOperation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPatchOperation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPatchOperation.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -16,15 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.wrap;\n+package org.apache.syncope.common.lib.types;\n \n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.XmlEnum;\n \n-@XmlRootElement(name = \"resourceKey\")\n-@XmlType\n-public class ResourceKey extends AbstractWrappable<String> {\n+@XmlEnum\n+public enum PatchOperation {\n \n-    private static final long serialVersionUID = -175720097924079573L;\n+    ADD_REPLACE,\n+    DELETE;\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/ResourceKey.java"},{"sha":"c8d78ec0d381cb4b906cd6e8dab8350bdeb19bc8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ResourceDeassociationAction.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceDeassociationAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceDeassociationAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FResourceDeassociationAction.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,7 +21,7 @@\n import javax.xml.bind.annotation.XmlEnum;\n \n @XmlEnum\n-public enum ResourceDeassociationActionType {\n+public enum ResourceDeassociationAction {\n \n     /**\n      * Remove association between user/group on Syncope and external resource(s) without any propagation.","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ResourceDeassociationActionType.java"},{"sha":"00b88c5a1a19d8a54c69efa596d8ae7b096d2f76","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StatusPatchType.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStatusPatchType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStatusPatchType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStatusPatchType.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -16,15 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.wrap;\n+package org.apache.syncope.common.lib.types;\n \n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.XmlEnum;\n \n-@XmlRootElement(name = \"booleanWrap\")\n-@XmlType\n-public class BooleanWrap extends AbstractWrappable<Boolean> {\n+@XmlEnum\n+public enum StatusPatchType {\n \n-    private static final long serialVersionUID = 3762310846902669241L;\n+    ACTIVATE,\n+    SUSPEND,\n+    REACTIVATE;\n \n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/wrap/BooleanWrap.java"},{"sha":"9434b7f2d9cf36a24769e5ff2a9e177b95191da8","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JAXBTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -23,6 +23,8 @@\n import java.io.StringWriter;\n import javax.xml.bind.JAXBContext;\n import javax.xml.bind.Marshaller;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.junit.Test;\n@@ -32,11 +34,12 @@ public class JAXBTest {\n     @Test\n     public void marshal() {\n         try {\n-            JAXBContext context = JAXBContext.newInstance(UserReportletConf.class);\n+            JAXBContext context = JAXBContext.newInstance(UserTO.class, UserPatch.class, UserReportletConf.class);\n             Marshaller marshaller = context.createMarshaller();\n             marshaller.marshal(new UserTO(), new StringWriter());\n+            marshaller.marshal(new UserPatch(), new StringWriter());\n         } catch (Exception e) {\n-            fail();\n+            fail(ExceptionUtils.getStackTrace(e));\n         }\n     }\n }"},{"sha":"711ce745aba058cdc0d2fe0d5e8d0884d583a5a1","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -19,13 +19,21 @@\n package org.apache.syncope.common.lib;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n import java.io.StringWriter;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.LongPatchItem;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.junit.Test;\n \n public class JSONTest {\n@@ -60,4 +68,31 @@ public void reportletConfImplementations() throws IOException {\n         ReportTO actual = mapper.readValue(writer.toString(), ReportTO.class);\n         assertEquals(report, actual);\n     }\n+\n+    @Test\n+    public void patch() throws IOException {\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(12L);\n+        patch.setUsername(new StringReplacePatchItem.Builder().value(\"newusername\").build());\n+        assertNotNull(patch.getUsername().getValue());\n+        patch.setPassword(new PasswordPatch.Builder().\n+                onSyncope(false).\n+                resource(\"ext1\").resource(\"ext2\").\n+                value(\"newpassword\").\n+                build());\n+        assertNotNull(patch.getPassword().getValue());\n+        patch.getRoles().add(new LongPatchItem.Builder().operation(PatchOperation.DELETE).value(7L).build());\n+        patch.getDerAttrs().add(new AttrPatch.Builder().\n+                operation(PatchOperation.ADD_REPLACE).\n+                attrTO(new AttrTO.Builder().schema(\"derived\").build()).\n+                build());\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, patch);\n+\n+        UserPatch actual = mapper.readValue(writer.toString(), UserPatch.class);\n+        assertEquals(patch, actual);\n+    }\n }"},{"sha":"904f854dd021c96042090ba30da86229eea83a4e","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyObjectService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyObjectService.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,7 +24,7 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n@@ -33,7 +33,7 @@\n  * REST operations for anyObjects.\n  */\n @Path(\"anyObjects\")\n-public interface AnyObjectService extends AnyService<AnyObjectTO, AnyObjectMod> {\n+public interface AnyObjectService extends AnyService<AnyObjectTO, AnyObjectPatch> {\n \n     /**\n      * Returns a paged list of existing any objects matching the given query, for the given type."},{"sha":"3e342a8c35234a4e7976f26cd40e5183280af116","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":28,"deletions":26,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,31 +18,30 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n+import org.apache.cxf.jaxrs.ext.PATCH;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.AssociationPatch;\n+import org.apache.syncope.common.lib.patch.DeassociationPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n \n-public interface AnyService<TO extends AnyTO, MOD extends AnyMod> extends JAXRSService {\n+public interface AnyService<TO extends AnyTO, P extends AnyPatch> extends JAXRSService {\n \n     /**\n      * Reads the any object matching the provided key.\n@@ -91,15 +90,28 @@\n     /**\n      * Updates any object matching the provided key.\n      *\n-     * @param anyMod modification to be applied to any object matching the provided key\n+     * @param anyPatch modification to be applied to any object matching the provided key\n      * @return <tt>Response</tt> object featuring the updated any object enriched with propagation status information\n      * - <tt>AnyTO</tt> as <tt>Entity</tt>\n      */\n-    @POST\n+    @PATCH\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response update(@NotNull P anyPatch);\n+\n+    /**\n+     * Updates any object matching the provided key.\n+     *\n+     * @param anyTO complete update\n+     * @return <tt>Response</tt> object featuring the updated any object enriched with propagation status information\n+     * - <tt>AnyTO</tt> as <tt>Entity</tt>\n+     */\n+    @PUT\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response update(@NotNull MOD anyMod);\n+    Response update(@NotNull TO anyTO);\n \n     /**\n      * Deletes any object matching provided key.\n@@ -117,36 +129,26 @@\n     /**\n      * Executes resource-related operations on given any object.\n      *\n-     * @param key any object id.\n-     * @param type resource association action type\n-     * @param resourceNames external resources to be used for propagation-related operations\n+     * @param patch external resources to be used for propagation-related operations\n      * @return <tt>Response</tt> object featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\n      */\n     @POST\n-    @Path(\"{key}/deassociate/{type}\")\n+    @Path(\"{key}/deassociate/{action}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response deassociate(\n-            @NotNull @PathParam(\"key\") Long key,\n-            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type,\n-            @NotNull List<ResourceKey> resourceNames);\n+    Response deassociate(@NotNull DeassociationPatch patch);\n \n     /**\n      * Executes resource-related operations on given any object.\n      *\n-     * @param key any object id.\n-     * @param type resource association action type\n-     * @param associationMod external resources to be used for propagation-related operations\n+     * @param patch external resources to be used for propagation-related operations\n      * @return <tt>Response</tt> object featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\n      */\n     @POST\n-    @Path(\"{key}/associate/{type}\")\n+    @Path(\"{key}/associate/{action}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response associate(\n-            @NotNull @PathParam(\"key\") Long key,\n-            @NotNull @PathParam(\"type\") ResourceAssociationAction type,\n-            @NotNull ResourceAssociationMod associationMod);\n+    Response associate(@NotNull AssociationPatch patch);\n \n     /**\n      * Executes the provided bulk action."},{"sha":"68f6bdd3cffc1050b9aa3ad204928255ad0fa327","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.common.lib.wrap.BooleanWrap;\n import org.apache.syncope.common.lib.wrap.ConnIdObjectClass;\n \n /**\n@@ -170,12 +169,11 @@ ConnInstanceTO readByResource(\n \n     /**\n      * @param connInstanceTO connector instance to be used for connection check\n-     * @return true if connection could be established\n      */\n     @POST\n     @Path(\"check\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    BooleanWrap check(@NotNull ConnInstanceTO connInstanceTO);\n+    void check(@NotNull ConnInstanceTO connInstanceTO);\n \n     /**\n      * Reload all connector bundles and instances."},{"sha":"934ceffbc9d2a46cfd2bf182464c0c2f3f6f6c98","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -23,14 +23,14 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n \n /**\n  * REST operations for groups.\n  */\n @Path(\"groups\")\n-public interface GroupService extends AnyService<GroupTO, GroupMod> {\n+public interface GroupService extends AnyService<GroupTO, GroupPatch> {\n \n     /**\n      * This method is similar to <tt>read()</tt>, but uses different authentication handling to ensure that a user"},{"sha":"bdf841125dbff7b8ceea7e4a960039ac21619865","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -36,9 +36,8 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.wrap.AnyKey;\n-import org.apache.syncope.common.lib.wrap.BooleanWrap;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n \n /**\n@@ -134,13 +133,12 @@ PagedConnObjectTOResult listConnObjects(\n      * Checks whether the connection to resource could be established.\n      *\n      * @param resourceTO resource to be checked\n-     * @return true if connection to resource could be established\n      */\n     @POST\n     @Path(\"check\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    BooleanWrap check(@NotNull ResourceTO resourceTO);\n+    void check(@NotNull ResourceTO resourceTO);\n \n     /**\n      * De-associate any objects from the given resource.\n@@ -152,12 +150,12 @@ PagedConnObjectTOResult listConnObjects(\n      * @return <tt>Response</tt> object featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\n      */\n     @POST\n-    @Path(\"{key}/bulkDeassociation/{anyTypeKey}/{type}\")\n+    @Path(\"{key}/bulkDeassociation/{anyTypeKey}/{action}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     BulkActionResult bulkDeassociation(@NotNull @PathParam(\"key\") String key,\n             @NotNull @PathParam(\"anyTypeKey\") String anyTypeKey,\n-            @NotNull @PathParam(\"type\") ResourceDeassociationActionType type, @NotNull List<AnyKey> keys);\n+            @NotNull @PathParam(\"action\") ResourceDeassociationAction type, @NotNull List<AnyKey> keys);\n \n     /**\n      * Executes the provided bulk action."},{"sha":"cd934be83fb386b66a411b888659d73de256b486","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":18,"deletions":4,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,12 +24,14 @@\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.cxf.jaxrs.ext.PATCH;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n \n /**\n@@ -65,14 +67,26 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-updates user.\n      *\n-     * @param userMod modification to be applied to self\n+     * @param patch modification to be applied to self\n      * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n      */\n-    @POST\n+    @PATCH\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response update(@NotNull UserPatch patch);\n+\n+    /**\n+     * Self-updates user.\n+     *\n+     * @param user complete update\n+     * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n+     */\n+    @PUT\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response update(@NotNull UserMod userMod);\n+    Response update(@NotNull UserTO user);\n \n     /**\n      * Self-deletes user."},{"sha":"0f54acec0fadecfde29ede227ef86cd4c3f29c80","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -29,15 +29,15 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n \n /**\n  * REST operations for users.\n  */\n @Path(\"users\")\n-public interface UserService extends AnyService<UserTO, UserMod> {\n+public interface UserService extends AnyService<UserTO, UserPatch> {\n \n     /**\n      * Gives the username for the provided user key.\n@@ -77,13 +77,13 @@ Response create(\n     /**\n      * Performs a status update on given.\n      *\n-     * @param statusMod status update details\n+     * @param statusPatch status update details\n      * @return <tt>Response</tt> object featuring the updated user enriched with propagation status information\n      * - <tt>UserTO</tt> as <tt>Entity</tt>\n      */\n     @POST\n     @Path(\"{key}/status\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    Response status(@NotNull StatusMod statusMod);\n+    Response status(@NotNull StatusPatch statusPatch);\n }"},{"sha":"e85058c1e8fc861304e4ec4e477f4a145b9250ba","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -25,11 +25,10 @@\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -49,7 +48,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n-public abstract class AbstractAnyLogic<TO extends AnyTO, MOD extends AnyMod>\n+public abstract class AbstractAnyLogic<TO extends AnyTO, P extends AnyPatch>\n         extends AbstractResourceAssociator<TO> {\n \n     @Autowired\n@@ -122,18 +121,15 @@ protected TO afterCreate(final TO input, final List<LogicActions> actions) {\n         return any;\n     }\n \n-    protected Pair<MOD, List<LogicActions>> beforeUpdate(final MOD input, final String realmPath) {\n-        if (StringUtils.isBlank(input.getRealm())) {\n-            input.setRealm(realmPath);\n-        }\n-        Realm realm = realmDAO.find(input.getRealm());\n+    protected Pair<P, List<LogicActions>> beforeUpdate(final P input, final String realmPath) {\n+        Realm realm = realmDAO.find(realmPath);\n         if (realm == null) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-            sce.getElements().add(input.getRealm());\n+            sce.getElements().add(realmPath);\n             throw sce;\n         }\n \n-        MOD mod = input;\n+        P mod = input;\n \n         List<LogicActions> actions = getActions(realm);\n         for (LogicActions action : actions) {\n@@ -244,7 +240,7 @@ public boolean evaluate(final String ownedRealm) {\n \n     public abstract TO create(TO anyTO);\n \n-    public abstract TO update(MOD anyMod);\n+    public abstract TO update(P anyPatch);\n \n     public abstract TO delete(Long key);\n "},{"sha":"5d1c9b83d0f8ef07504b438af68248b9215ee4a9","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":59,"deletions":36,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -34,12 +34,14 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -61,7 +63,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectMod> {\n+public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> {\n \n     @Autowired\n     protected AnyObjectDAO anyObjectDAO;\n@@ -182,24 +184,20 @@ public AnyObjectTO create(final AnyObjectTO anyObjectTO) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n-    public AnyObjectTO update(final AnyObjectMod anyObjectMod) {\n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(anyObjectMod.getKey());\n-        Pair<AnyObjectMod, List<LogicActions>> before = beforeUpdate(anyObjectMod, anyObjectTO.getRealm());\n-\n-        Set<String> requestedRealms = new HashSet<>();\n-        requestedRealms.add(before.getLeft().getRealm());\n-        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n-            requestedRealms.add(before.getLeft().getRealm());\n-        }\n-        Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n-                requestedRealms);\n-        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n-        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n-            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+    public AnyObjectTO update(final AnyObjectPatch anyObjectPatch) {\n+        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(anyObjectPatch.getKey());\n+        Pair<AnyObjectPatch, List<LogicActions>> before = beforeUpdate(anyObjectPatch, anyObjectTO.getRealm());\n+\n+        if (before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n+            Set<String> requestedRealms = new HashSet<>();\n+            requestedRealms.add(before.getLeft().getRealm().getValue());\n+            Set<String> effectiveRealms = getEffectiveRealms(\n+                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                    requestedRealms);\n+            securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(anyObjectMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(anyObjectPatch);\n \n         AnyObjectTO updatedTO = binder.getAnyObjectTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n@@ -237,11 +235,17 @@ public AnyObjectTO unlink(final Long key, final Collection<String> resources) {\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(key);\n-        anyObjectMod.getResourcesToRemove().addAll(resources);\n+        AnyObjectPatch patch = new AnyObjectPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n \n-        return binder.getAnyObjectTO(provisioningManager.unlink(anyObjectMod));\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n+            }\n+        }));\n+\n+        return binder.getAnyObjectTO(provisioningManager.unlink(patch));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n@@ -254,11 +258,17 @@ public AnyObjectTO link(final Long key, final Collection<String> resources) {\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(key);\n-        anyObjectMod.getResourcesToAdd().addAll(resources);\n+        AnyObjectPatch patch = new AnyObjectPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n \n-        return binder.getAnyObjectTO(provisioningManager.link(anyObjectMod));\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n+            }\n+        }));\n+\n+        return binder.getAnyObjectTO(provisioningManager.link(patch));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n@@ -271,10 +281,17 @@ public AnyObjectTO unassign(final Long key, final Collection<String> resources)\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(key);\n-        anyObjectMod.getResourcesToRemove().addAll(resources);\n-        return update(anyObjectMod);\n+        AnyObjectPatch patch = new AnyObjectPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n+\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n+            }\n+        }));\n+\n+        return update(patch);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n@@ -292,11 +309,17 @@ public AnyObjectTO assign(\n                 Collections.singleton(anyObject.getRealm()));\n         securityChecks(effectiveRealms, anyObject.getRealm(), anyObject.getKey());\n \n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(key);\n-        anyObjectMod.getResourcesToAdd().addAll(resources);\n+        AnyObjectPatch patch = new AnyObjectPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n+\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n+            }\n+        }));\n \n-        return update(anyObjectMod);\n+        return update(patch);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n@@ -347,8 +370,8 @@ protected AnyObjectTO resolveReference(final Method method, final Object... args\n                     key = (Long) args[i];\n                 } else if (args[i] instanceof AnyObjectTO) {\n                     key = ((AnyObjectTO) args[i]).getKey();\n-                } else if (args[i] instanceof AnyObjectMod) {\n-                    key = ((AnyObjectMod) args[i]).getKey();\n+                } else if (args[i] instanceof AnyObjectPatch) {\n+                    key = ((AnyObjectPatch) args[i]).getKey();\n                 }\n             }\n         }"},{"sha":"870a4d09ad0f1964d7bd7b578d07e5756ac4835a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -259,20 +259,10 @@ public List<ConnConfProperty> getConfigurationProperties(final Long connInstance\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public boolean check(final ConnInstanceTO connInstanceTO) {\n-        final Connector connector = connFactory.createConnector(\n+    public void check(final ConnInstanceTO connInstanceTO) {\n+        Connector connector = connFactory.createConnector(\n                 binder.getConnInstance(connInstanceTO), connInstanceTO.getConfiguration());\n-\n-        boolean result;\n-        try {\n-            connector.test();\n-            result = true;\n-        } catch (Exception ex) {\n-            LOG.error(\"Test connection failure {}\", ex);\n-            result = false;\n-        }\n-\n-        return result;\n+        connector.test();\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")"},{"sha":"0eb0d0c2d6d18368c91c99f788daf96071843a5f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":59,"deletions":36,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -35,12 +35,14 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -65,7 +67,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupMod> {\n+public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n \n     @Autowired\n     protected GroupDAO groupDAO;\n@@ -202,24 +204,20 @@ public GroupTO create(final GroupTO groupTO) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n-    public GroupTO update(final GroupMod groupMod) {\n-        GroupTO groupTO = binder.getGroupTO(groupMod.getKey());\n-        Pair<GroupMod, List<LogicActions>> before = beforeUpdate(groupMod, groupTO.getRealm());\n-\n-        Set<String> requestedRealms = new HashSet<>();\n-        requestedRealms.add(before.getLeft().getRealm());\n-        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n-            requestedRealms.add(before.getLeft().getRealm());\n-        }\n-        Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n-                requestedRealms);\n-        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n-        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n-            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+    public GroupTO update(final GroupPatch groupPatch) {\n+        GroupTO groupTO = binder.getGroupTO(groupPatch.getKey());\n+        Pair<GroupPatch, List<LogicActions>> before = beforeUpdate(groupPatch, groupTO.getRealm());\n+\n+        if (before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n+            Set<String> requestedRealms = new HashSet<>();\n+            requestedRealms.add(before.getLeft().getRealm().getValue());\n+            Set<String> effectiveRealms = getEffectiveRealms(\n+                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                    requestedRealms);\n+            securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(groupMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(groupPatch);\n \n         GroupTO updatedTO = binder.getGroupTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n@@ -270,11 +268,17 @@ public GroupTO unlink(final Long key, final Collection<String> resources) {\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(key);\n-        groupMod.getResourcesToRemove().addAll(resources);\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n \n-        return binder.getGroupTO(provisioningManager.unlink(groupMod));\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n+            }\n+        }));\n+\n+        return binder.getGroupTO(provisioningManager.unlink(patch));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n@@ -287,11 +291,17 @@ public GroupTO link(final Long key, final Collection<String> resources) {\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(key);\n-        groupMod.getResourcesToAdd().addAll(resources);\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n \n-        return binder.getGroupTO(provisioningManager.link(groupMod));\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n+            }\n+        }));\n+\n+        return binder.getGroupTO(provisioningManager.link(patch));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n@@ -304,10 +314,17 @@ public GroupTO unassign(final Long key, final Collection<String> resources) {\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(key);\n-        groupMod.getResourcesToRemove().addAll(resources);\n-        return update(groupMod);\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n+\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n+            }\n+        }));\n+\n+        return update(patch);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n@@ -325,11 +342,17 @@ public GroupTO assign(\n                 Collections.singleton(group.getRealm()));\n         securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n \n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(key);\n-        groupMod.getResourcesToAdd().addAll(resources);\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n+\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n+            }\n+        }));\n \n-        return update(groupMod);\n+        return update(patch);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n@@ -378,8 +401,8 @@ protected GroupTO resolveReference(final Method method, final Object... args) th\n                     key = (Long) args[i];\n                 } else if (args[i] instanceof GroupTO) {\n                     key = ((GroupTO) args[i]).getKey();\n-                } else if (args[i] instanceof GroupMod) {\n-                    key = ((GroupMod) args[i]).getKey();\n+                } else if (args[i] instanceof GroupPatch) {\n+                    key = ((GroupPatch) args[i]).getKey();\n                 }\n             }\n         }"},{"sha":"7defb27fc7d2a47de49b5b129729f8eb66f0ca82","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -270,20 +270,11 @@ public boolean handle(final ConnectorObject connectorObject) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONNECTOR_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public boolean check(final ResourceTO resourceTO) {\n+    public void check(final ResourceTO resourceTO) {\n         ConnInstance connInstance = binder.getConnInstance(resourceTO);\n         Connector connector = connFactory.createConnector(connInstance, connInstance.getConfiguration());\n \n-        boolean result;\n-        try {\n-            connector.test();\n-            result = true;\n-        } catch (Exception e) {\n-            LOG.error(\"Test connection failure {}\", e);\n-            result = false;\n-        }\n-\n-        return result;\n+        connector.test();\n     }\n \n     @Override"},{"sha":"116f725cfe648530971d541bbfa779aa85688b9a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":79,"deletions":55,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -33,13 +33,17 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -66,7 +70,7 @@\n  * Spring's Transactional logic at class level.\n  */\n @Component\n-public class UserLogic extends AbstractAnyLogic<UserTO, UserMod> {\n+public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n \n     @Autowired\n     protected UserDAO userDAO;\n@@ -215,35 +219,32 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword, fina\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n-    public UserTO selfUpdate(final UserMod userMod) {\n+    public UserTO selfUpdate(final UserPatch userPatch) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n-        userMod.setKey(userTO.getKey());\n-        return doUpdate(userMod, true);\n+        userPatch.setKey(userTO.getKey());\n+        return doUpdate(userPatch, true);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n-    public UserTO update(final UserMod userMod) {\n-        return doUpdate(userMod, false);\n+    public UserTO update(final UserPatch userPatch) {\n+        return doUpdate(userPatch, false);\n     }\n \n-    protected UserTO doUpdate(final UserMod userMod, final boolean self) {\n-        UserTO userTO = binder.getUserTO(userMod.getKey());\n-        Pair<UserMod, List<LogicActions>> before = beforeUpdate(userMod, userTO.getRealm());\n+    protected UserTO doUpdate(final UserPatch userPatch, final boolean self) {\n+        UserTO userTO = binder.getUserTO(userPatch.getKey());\n+        Pair<UserPatch, List<LogicActions>> before = beforeUpdate(userPatch, userTO.getRealm());\n+\n+        if (!self\n+                && before.getLeft().getRealm() != null\n+                && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n \n-        if (!self) {\n             Set<String> requestedRealms = new HashSet<>();\n-            requestedRealms.add(before.getLeft().getRealm());\n-            if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n-                requestedRealms.add(before.getLeft().getRealm());\n-            }\n+            requestedRealms.add(before.getLeft().getRealm().getValue());\n             Set<String> effectiveRealms = getEffectiveRealms(\n                     AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n                     requestedRealms);\n-            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n-            if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n-                securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n-            }\n+            securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n         }\n \n         Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(before.getLeft());\n@@ -254,21 +255,21 @@ protected UserTO doUpdate(final UserMod userMod, final boolean self) {\n         return afterUpdate(updatedTO, before.getRight());\n     }\n \n-    protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final StatusMod statusMod) {\n+    protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final StatusPatch statusPatch) {\n         Map.Entry<Long, List<PropagationStatus>> updated;\n \n-        switch (statusMod.getType()) {\n+        switch (statusPatch.getType()) {\n             case SUSPEND:\n-                updated = provisioningManager.suspend(statusMod);\n+                updated = provisioningManager.suspend(statusPatch);\n                 break;\n \n             case REACTIVATE:\n-                updated = provisioningManager.reactivate(statusMod);\n+                updated = provisioningManager.reactivate(statusPatch);\n                 break;\n \n             case ACTIVATE:\n             default:\n-                updated = provisioningManager.activate(statusMod);\n+                updated = provisioningManager.activate(statusPatch);\n                 break;\n \n         }\n@@ -277,25 +278,26 @@ protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final St\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n-    public UserTO status(final StatusMod statusMod) {\n+    public UserTO status(final StatusPatch statusPatch) {\n         // security checks\n-        UserTO toUpdate = binder.getUserTO(statusMod.getKey());\n+        UserTO toUpdate = binder.getUserTO(statusPatch.getKey());\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n                 Collections.singleton(toUpdate.getRealm()));\n         securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch);\n         UserTO savedTO = binder.getUserTO(updated.getKey());\n         savedTO.getPropagationStatusTOs().addAll(updated.getValue());\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.MUST_CHANGE_PASSWORD + \"')\")\n-    public UserTO changePassword(final String password) {\n-        UserMod userMod = new UserMod();\n-        userMod.setPassword(password);\n-        return selfUpdate(userMod);\n+    public UserTO changePassword(final String password) { \n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setPassword(new PasswordPatch.Builder().value(password).build());\n+        userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(false).build());\n+        return selfUpdate(userPatch);\n     }\n \n     @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n@@ -389,11 +391,17 @@ public UserTO unlink(final Long key, final Collection<String> resources) {\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(key);\n-        userMod.getResourcesToRemove().addAll(resources);\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n \n-        return binder.getUserTO(provisioningManager.unlink(userMod));\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n+            }\n+        }));\n+\n+        return binder.getUserTO(provisioningManager.unlink(patch));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -406,11 +414,17 @@ public UserTO link(final Long key, final Collection<String> resources) {\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(key);\n-        userMod.getResourcesToAdd().addAll(resources);\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n+\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n+            }\n+        }));\n \n-        return binder.getUserTO(provisioningManager.link(userMod));\n+        return binder.getUserTO(provisioningManager.link(patch));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -423,10 +437,17 @@ public UserTO unassign(final Long key, final Collection<String> resources) {\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(key);\n-        userMod.getResourcesToRemove().addAll(resources);\n-        return update(userMod);\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n+\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build();\n+            }\n+        }));\n+\n+        return update(patch);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -444,19 +465,22 @@ public UserTO assign(\n                 Collections.singleton(user.getRealm()));\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(key);\n-        userMod.getResourcesToAdd().addAll(resources);\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(key);\n+        patch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n+\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n+            }\n+        }));\n \n         if (changepwd) {\n-            StatusMod statusMod = new StatusMod();\n-            statusMod.setOnSyncope(false);\n-            statusMod.getResources().addAll(resources);\n-            userMod.setPwdPropRequest(statusMod);\n-            userMod.setPassword(password);\n+            patch.setPassword(new PasswordPatch.Builder().\n+                    value(password).onSyncope(false).resources(resources).build());\n         }\n \n-        return update(userMod);\n+        return update(patch);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -507,8 +531,8 @@ protected UserTO resolveReference(final Method method, final Object... args) thr\n                     key = (String) args[i];\n                 } else if (args[i] instanceof UserTO) {\n                     key = ((UserTO) args[i]).getKey();\n-                } else if (args[i] instanceof UserMod) {\n-                    key = ((UserMod) args[i]).getKey();\n+                } else if (args[i] instanceof UserPatch) {\n+                    key = ((UserPatch) args[i]).getKey();\n                 }\n             }\n         }"},{"sha":"9e0b45b6d0127f0a8c64d4c3539aa52ea5bede76","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowLogic.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowLogic.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,8 +22,8 @@\n import java.util.List;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n@@ -68,12 +68,12 @@ public WorkflowFormTO claimForm(final String taskId) {\n     public UserTO executeWorkflowTask(final UserTO userTO, final String taskId) {\n         WorkflowResult<Long> updated = uwfAdapter.execute(userTO, taskId);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                new WorkflowResult<Pair<UserMod, Boolean>>(\n-                        new ImmutablePair<UserMod, Boolean>(userMod, null),\n+                new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                        new ImmutablePair<UserPatch, Boolean>(userPatch, null),\n                         updated.getPropByRes(), updated.getPerformedTasks()));\n \n         taskExecutor.execute(tasks);\n@@ -104,16 +104,16 @@ public List<WorkflowFormTO> getForms(final Long key, final String formName) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.WORKFLOW_FORM_SUBMIT + \"')\")\n     @Transactional(rollbackFor = { Throwable.class })\n     public UserTO submitForm(final WorkflowFormTO form) {\n-        WorkflowResult<? extends AnyMod> updated = uwfAdapter.submitForm(form);\n+        WorkflowResult<? extends AnyPatch> updated = uwfAdapter.submitForm(form);\n \n         // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)\n-        if (updated.getResult() instanceof UserMod\n+        if (updated.getResult() instanceof UserPatch\n                 && updated.getPropByRes() != null && !updated.getPropByRes().isEmpty()) {\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                    new WorkflowResult<Pair<UserMod, Boolean>>(\n-                            new ImmutablePair<>((UserMod) updated.getResult(), Boolean.TRUE),\n+                    new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                            new ImmutablePair<>((UserPatch) updated.getResult(), Boolean.TRUE),\n                             updated.getPropByRes(),\n                             updated.getPerformedTasks()));\n "},{"sha":"c11ca05a199441aca139f3980621adcc4a36df57","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -285,11 +285,7 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n                     handler.startElement(\"\", \"\", \"relationship\", atts);\n \n                     if (conf.getFeatures().contains(Feature.resources)) {\n-                        URelationship actualRel = user.getRelationship(rel.getRightKey());\n-                        if (actualRel == null) {\n-                            LOG.warn(\"Unexpected: cannot find relationship for any object {} for user {}\",\n-                                    rel.getRightKey(), user);\n-                        } else {\n+                        for (URelationship actualRel : user.getRelationships(rel.getRightKey())) {\n                             doExtractResources(\n                                     handler, anyObjectDataBinder.getAnyObjectTO(actualRel.getRightEnd(), true));\n                         }"},{"sha":"7c39bb7615e5b1ec942a7d25f87597794db9e9f9","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -28,7 +28,7 @@\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -144,7 +144,7 @@ public <T extends AnyTO> T getAnyTO(\n     }\n \n     /**\n-     * Build an UserMod out of connector object attributes and schema mapping.\n+     * Build {@link AnyPatch} out of connector object attributes and schema mapping.\n      *\n      * @param key any object to be updated\n      * @param obj connector object\n@@ -157,7 +157,7 @@ public <T extends AnyTO> T getAnyTO(\n      */\n     @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n-    public <T extends AnyMod> T getAnyMod(final Long key, final ConnectorObject obj,\n+    public <T extends AnyPatch> T getAnyPatch(final Long key, final ConnectorObject obj,\n             final AnyTO original, final SyncTask syncTask, final Provision provision, final AnyUtils anyUtils) {\n \n         AnyTO updated = getAnyTOFromConnObject(obj, syncTask, provision, anyUtils);"},{"sha":"2f0a0c5ea7d9452ad6a8c9cdded02046c709cb8c","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -33,7 +33,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n@@ -122,8 +122,7 @@ public boolean evaluate(final T item) {\n      * @param any given any object\n      * @param password clear-text password\n      * @param changePwd whether password should be included for propagation attributes or not\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param vAttrs virtual attributes to be managed\n      * @param enable whether any object must be enabled or not\n      * @param provision provision information\n      * @return connObjectLink + prepared attributes\n@@ -132,8 +131,7 @@ public static Pair<String, Set<Attribute>> prepareAttrs(\n             final Any<?, ?, ?> any,\n             final String password,\n             final boolean changePwd,\n-            final Set<String> vAttrsToBeRemoved,\n-            final Map<String, AttrMod> vAttrsToBeUpdated,\n+            final Map<String, AttrPatch> vAttrs,\n             final Boolean enable,\n             final Provision provision) {\n \n@@ -160,7 +158,7 @@ public static Pair<String, Set<Attribute>> prepareAttrs(\n                 }\n \n                 Pair<String, Attribute> preparedAttr = prepareAttr(\n-                        provision, mapping, any, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated);\n+                        provision, mapping, any, password, passwordGenerator, vAttrs);\n \n                 if (preparedAttr != null && preparedAttr.getKey() != null) {\n                     connObjectKey = preparedAttr.getKey();\n@@ -214,15 +212,14 @@ public static Pair<String, Set<Attribute>> prepareAttrs(\n      * @param any any object\n      * @param password clear-text password\n      * @param passwordGenerator password generator\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param vAttrs virtual attributes to be managed\n      * @return connObjectLink + prepared attribute\n      */\n     @SuppressWarnings(\"unchecked\")\n     private static Pair<String, Attribute> prepareAttr(\n             final Provision provision, final MappingItem mapItem,\n             final Any<?, ?, ?> any, final String password, final PasswordGenerator passwordGenerator,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttrMod> vAttrsToBeUpdated) {\n+            final Map<String, AttrPatch> vAttrs) {\n \n         List<Any<?, ?, ?>> anys = new ArrayList<>();\n \n@@ -258,8 +255,7 @@ private static Pair<String, Attribute> prepareAttr(\n             default:\n         }\n \n-        List<PlainAttrValue> values = getIntValues(\n-                provision, mapItem, anys, vAttrsToBeRemoved, vAttrsToBeUpdated);\n+        List<PlainAttrValue> values = getIntValues(provision, mapItem, anys, vAttrs);\n \n         Schema schema = null;\n         boolean readOnlyVirSchema = false;\n@@ -409,7 +405,7 @@ public static Name evaluateNAME(final Any<?, ?, ?> any, final Provision provisio\n \n     private static String getGroupOwnerValue(final Provision provision, final Any<?, ?, ?> any) {\n         Pair<String, Attribute> preparedAttr = prepareAttr(provision, getConnObjectKeyItem(provision),\n-                any, null, null, Collections.<String>emptySet(), Collections.<String, AttrMod>emptyMap());\n+                any, null, null, Collections.<String, AttrPatch>emptyMap());\n         String connObjectKey = preparedAttr.getKey();\n \n         final Name groupOwnerName = evaluateNAME(any, provision, connObjectKey);\n@@ -422,13 +418,11 @@ private static String getGroupOwnerValue(final Provision provision, final Any<?,\n      * @param provision provision information\n      * @param mappingItem mapping item\n      * @param anys any objects\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param vAttrs virtual attributes to be managed\n      * @return attribute values.\n      */\n     public static List<PlainAttrValue> getIntValues(final Provision provision,\n-            final MappingItem mappingItem, final List<Any<?, ?, ?>> anys,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttrMod> vAttrsToBeUpdated) {\n+            final MappingItem mappingItem, final List<Any<?, ?, ?>> anys, final Map<String, AttrPatch> vAttrs) {\n \n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", anys, mappingItem.getIntMappingType());\n \n@@ -468,13 +462,11 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n                     AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n                     VirAttr<?> virAttr = any.getVirAttr(mappingItem.getIntAttrName());\n                     if (virAttr != null) {\n-                        if (vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n-                            if (vAttrsToBeUpdated.containsKey(mappingItem.getIntAttrName())) {\n+                        if (vAttrs != null) {\n+                            if (vAttrs.containsKey(mappingItem.getIntAttrName())) {\n                                 virAttr.getValues().clear();\n                                 virAttr.getValues().addAll(\n-                                        vAttrsToBeUpdated.get(mappingItem.getIntAttrName()).getValuesToBeAdded());\n-                            } else if (vAttrsToBeRemoved.contains(mappingItem.getIntAttrName())) {\n-                                virAttr.getValues().clear();\n+                                        vAttrs.get(mappingItem.getIntAttrName()).getAttrTO().getValues());\n                             } else {\n                                 throw new IllegalArgumentException(\"Don't need to update virtual attribute '\"\n                                         + mappingItem.getIntAttrName() + \"'\");\n@@ -595,7 +587,7 @@ public static List<PlainAttrValue> getIntValues(final Provision provision,\n      */\n     public static String getConnObjectKeyValue(final Any<?, ?, ?> any, final Provision provision) {\n         List<PlainAttrValue> values = getIntValues(provision, provision.getMapping().getConnObjectKeyItem(),\n-                Collections.<Any<?, ?, ?>>singletonList(any), null, null);\n+                Collections.<Any<?, ?, ?>>singletonList(any), null);\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();"},{"sha":"2094269683f61acf7f313bc2f4a54a7fb641a404","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AnyObject.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.anyobject;\n \n+import java.util.Collection;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n@@ -28,9 +29,11 @@ public interface AnyObject extends Any<APlainAttr, ADerAttr, AVirAttr> {\n \n     boolean remove(ARelationship relationship);\n \n-    ARelationship getRelationship(RelationshipType relationshipType);\n+    ARelationship getRelationship(RelationshipType relationshipType, Long anyObjectKey);\n \n-    ARelationship getRelationship(Long relationshipKey);\n+    Collection<? extends ARelationship> getRelationships(Long anyObjectKey);\n+\n+    Collection<? extends ARelationship> getRelationships(RelationshipType relationshipType);\n \n     List<? extends ARelationship> getRelationships();\n "},{"sha":"884e8497a764b160d8e5b57a85829b7f0b2a1f5a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n+import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -137,9 +138,11 @@ public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n \n     boolean remove(URelationship relationship);\n \n-    URelationship getRelationship(Long anyObjectKey);\n+    URelationship getRelationship(RelationshipType relationshipType, Long anyObjectKey);\n \n-    URelationship getRelationship(RelationshipType relationshipType);\n+    Collection<? extends URelationship> getRelationships(Long anyObjectKey);\n+\n+    Collection<? extends URelationship> getRelationships(RelationshipType relationshipType);\n \n     List<? extends URelationship> getRelationships();\n "},{"sha":"312d6fc7d3fae3d3637cded8cdab21dbb68b0864","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":20,"deletions":17,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -44,26 +44,29 @@\n @Repository\n public class JPAPlainAttrValueDAO extends AbstractDAO<PlainAttrValue, Long> implements PlainAttrValueDAO {\n \n+    @SuppressWarnings(\"unchecked\")\n     private <T extends PlainAttrValue> Class<? extends AbstractPlainAttrValue> getJPAEntityReference(\n             final Class<T> reference) {\n \n-        return reference.equals(CPlainAttrValue.class)\n-                ? JPACPlainAttrValue.class\n-                : reference.equals(CPlainAttrUniqueValue.class)\n-                        ? JPACPlainAttrUniqueValue.class\n-                        : reference.equals(GPlainAttrValue.class)\n-                                ? JPAGPlainAttrValue.class\n-                                : reference.equals(GPlainAttrUniqueValue.class)\n-                                        ? JPAGPlainAttrUniqueValue.class\n-                                        : reference.equals(APlainAttrValue.class)\n-                                                ? JPAAPlainAttrValue.class\n-                                                : reference.equals(APlainAttrUniqueValue.class)\n-                                                        ? JPAAPlainAttrUniqueValue.class\n-                                                        : reference.equals(UPlainAttrValue.class)\n-                                                                ? JPAUPlainAttrValue.class\n-                                                                : reference.equals(UPlainAttrUniqueValue.class)\n-                                                                        ? JPAUPlainAttrUniqueValue.class\n-                                                                        : null;\n+        return AbstractPlainAttrValue.class.isAssignableFrom(reference)\n+                ? (Class<? extends AbstractPlainAttrValue>) reference\n+                : reference.equals(CPlainAttrValue.class)\n+                        ? JPACPlainAttrValue.class\n+                        : reference.equals(CPlainAttrUniqueValue.class)\n+                                ? JPACPlainAttrUniqueValue.class\n+                                : reference.equals(GPlainAttrValue.class)\n+                                        ? JPAGPlainAttrValue.class\n+                                        : reference.equals(GPlainAttrUniqueValue.class)\n+                                                ? JPAGPlainAttrUniqueValue.class\n+                                                : reference.equals(APlainAttrValue.class)\n+                                                        ? JPAAPlainAttrValue.class\n+                                                        : reference.equals(APlainAttrUniqueValue.class)\n+                                                                ? JPAAPlainAttrUniqueValue.class\n+                                                                : reference.equals(UPlainAttrValue.class)\n+                                                                        ? JPAUPlainAttrValue.class\n+                                                                        : reference.equals(UPlainAttrUniqueValue.class)\n+                                                                                ? JPAUPlainAttrUniqueValue.class\n+                                                                                : null;\n     }\n \n     @Override"},{"sha":"3e9fedae167c1dc0baa8782b9269f9887989466c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.List;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n@@ -199,9 +200,22 @@ public boolean remove(final ARelationship relationship) {\n     }\n \n     @Override\n-    public ARelationship getRelationship(final RelationshipType relationshipType) {\n+    public ARelationship getRelationship(final RelationshipType relationshipType, final Long anyObjectKey) {\n         return CollectionUtils.find(getRelationships(), new Predicate<ARelationship>() {\n \n+            @Override\n+            public boolean evaluate(final ARelationship relationship) {\n+                return anyObjectKey != null && anyObjectKey.equals(relationship.getRightEnd().getKey())\n+                        && ((relationshipType == null && relationship.getType() == null)\n+                        || (relationshipType != null && relationshipType.equals(relationship.getType())));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Collection<? extends ARelationship> getRelationships(final RelationshipType relationshipType) {\n+        return CollectionUtils.select(getRelationships(), new Predicate<ARelationship>() {\n+\n             @Override\n             public boolean evaluate(final ARelationship relationship) {\n                 return relationshipType != null && relationshipType.equals(relationship.getType());\n@@ -210,8 +224,8 @@ public boolean evaluate(final ARelationship relationship) {\n     }\n \n     @Override\n-    public ARelationship getRelationship(final Long anyObjectKey) {\n-        return CollectionUtils.find(getRelationships(), new Predicate<ARelationship>() {\n+    public Collection<? extends ARelationship> getRelationships(final Long anyObjectKey) {\n+        return CollectionUtils.select(getRelationships(), new Predicate<ARelationship>() {\n \n             @Override\n             public boolean evaluate(final ARelationship relationship) {"},{"sha":"74335ec42b117671c95eee7f977d0ac380dfb1a2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n import javax.persistence.Basic;\n@@ -546,9 +547,22 @@ public boolean remove(final URelationship relationship) {\n     }\n \n     @Override\n-    public URelationship getRelationship(final RelationshipType relationshipType) {\n+    public URelationship getRelationship(final RelationshipType relationshipType, final Long anyObjectKey) {\n         return CollectionUtils.find(getRelationships(), new Predicate<URelationship>() {\n \n+            @Override\n+            public boolean evaluate(final URelationship relationship) {\n+                return anyObjectKey != null && anyObjectKey.equals(relationship.getRightEnd().getKey())\n+                        && ((relationshipType == null && relationship.getType() == null)\n+                        || (relationshipType != null && relationshipType.equals(relationship.getType())));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Collection<? extends URelationship> getRelationships(final RelationshipType relationshipType) {\n+        return CollectionUtils.select(getRelationships(), new Predicate<URelationship>() {\n+\n             @Override\n             public boolean evaluate(final URelationship relationship) {\n                 return relationshipType != null && relationshipType.equals(relationship.getType());\n@@ -557,8 +571,8 @@ public boolean evaluate(final URelationship relationship) {\n     }\n \n     @Override\n-    public URelationship getRelationship(final Long anyObjectKey) {\n-        return CollectionUtils.find(getRelationships(), new Predicate<URelationship>() {\n+    public Collection<? extends URelationship> getRelationships(final Long anyObjectKey) {\n+        return CollectionUtils.select(getRelationships(), new Predicate<URelationship>() {\n \n             @Override\n             public boolean evaluate(final URelationship relationship) {"},{"sha":"0a16023591341582adf721fe9a023dd58b3fcb04","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RelationshipTypeTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRelationshipTypeTest.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -91,7 +91,8 @@ public void deleteOnAnyObject() {\n \n         AnyObject anyObject = anyObjectDAO.find(1L);\n         assertNotNull(anyObject);\n-        assertNotNull(anyObject.getRelationship(neighborhood));\n+        assertNotNull(anyObject.getRelationships(neighborhood));\n+        assertFalse(anyObject.getRelationships(neighborhood).isEmpty());\n \n         relationshipTypeDAO.delete(\"neighborhood\");\n "},{"sha":"d5571ab1de92e1cd2b8183429a0a3cce73bd3334","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyObjectProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAnyObjectProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,11 +20,11 @@\n \n import java.util.Collection;\n import java.util.List;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n-public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectMod> {\n+public interface AnyObjectProvisioningManager extends ProvisioningManager<AnyObjectTO, AnyObjectPatch> {\n \n     List<PropagationStatus> provision(Long key, Collection<String> resources);\n }"},{"sha":"ea258e59f3fc7ce4dc4e6560e781c9a6c498e6b8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/GroupProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FGroupProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -23,11 +23,11 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n \n-public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupMod> {\n+public interface GroupProvisioningManager extends ProvisioningManager<GroupTO, GroupPatch> {\n \n     Pair<Long, List<PropagationStatus>> create(\n             GroupTO groupTO, Map<Long, String> groupOwnerMap, Set<String> excludedResources);"},{"sha":"f70d7f1ef2b9e8e3217c751a50b11c76897c7f6b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/LogicActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n \n /**\n@@ -30,7 +30,7 @@ public interface LogicActions {\n \n     <A extends AnyTO> A afterCreate(A input);\n \n-    <M extends AnyMod> M beforeUpdate(M input);\n+    <P extends AnyPatch> P beforeUpdate(P input);\n \n     <A extends AnyTO> A afterUpdate(A input);\n "},{"sha":"add5b03f8f41d3922834ea23519de970d5811001","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ProvisioningManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,27 +22,27 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n \n-public interface ProvisioningManager<T extends AnyTO, M extends AnyMod> {\n+public interface ProvisioningManager<T extends AnyTO, P extends AnyPatch> {\n \n     Pair<Long, List<PropagationStatus>> create(T anyTO);\n \n     Pair<Long, List<PropagationStatus>> create(T anyTO, Set<String> excludedResources);\n \n-    Pair<Long, List<PropagationStatus>> update(M anyMod);\n+    Pair<Long, List<PropagationStatus>> update(P anyMod);\n \n-    Pair<Long, List<PropagationStatus>> update(M anyMod, Set<String> excludedResources);\n+    Pair<Long, List<PropagationStatus>> update(P anyMod, Set<String> excludedResources);\n \n     List<PropagationStatus> delete(Long anyKey);\n \n     List<PropagationStatus> delete(Long anyKey, Set<String> excludedResources);\n \n-    Long unlink(M anyMod);\n+    Long unlink(P anyMod);\n \n-    Long link(M anyMod);\n+    Long link(P anyMod);\n \n     List<PropagationStatus> deprovision(Long anyKey, Collection<String> resources);\n "},{"sha":"b29eee39681246cc31615f3b50bb6f82360d2097","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserProvisioningManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,19 +22,19 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n \n-public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserMod> {\n+public interface UserProvisioningManager extends ProvisioningManager<UserTO, UserPatch> {\n \n-    Pair<Long, List<PropagationStatus>> activate(StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> activate(StatusPatch statusPatch);\n \n-    Pair<Long, List<PropagationStatus>> reactivate(StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> reactivate(StatusPatch statusPatch);\n \n-    Pair<Long, List<PropagationStatus>> suspend(StatusMod statusMod);\n+    Pair<Long, List<PropagationStatus>> suspend(StatusPatch statusPatch);\n \n     void internalSuspend(Long key);\n \n@@ -43,7 +43,7 @@ public interface UserProvisioningManager extends ProvisioningManager<UserTO, Use\n     Pair<Long, List<PropagationStatus>> create(UserTO userTO, boolean storePassword,\n             boolean disablePwdPolicyCheck, Boolean enabled, Set<String> excludedResources);\n \n-    Pair<Long, List<PropagationStatus>> update(UserMod userMod, Long key,\n+    Pair<Long, List<PropagationStatus>> update(UserPatch userPatch, Long key,\n             ProvisioningResult result, Boolean enabled, Set<String> excludedResources);\n \n     void requestPasswordReset(Long key);"},{"sha":"54d8fe059462a6be39b3631195b3f26e3ae238d2","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/VirAttrHandler.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Collection;\n import java.util.Set;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -31,7 +31,7 @@\n \n public interface VirAttrHandler {\n \n-    PropagationByResource fillVirtual(Any any, Set<String> vAttrsToBeRemoved, Set<AttrMod> vAttrsToBeUpdated);\n+    PropagationByResource fillVirtual(Any any, Set<AttrPatch> vAttrs);\n \n     /**\n      * Add virtual attributes and specify values to be propagated.\n@@ -46,12 +46,10 @@ public interface VirAttrHandler {\n      *\n      * @param key any key\n      * @param anyTypeKind type kind\n-     * @param vAttrsToBeRemoved virtual attributes to be removed.\n-     * @param vAttrsToBeUpdated virtual attributes to be updated.\n+     * @param vAttrs virtual attributes to be updated.\n      * @return operations to be performed on external resources for virtual attributes changes\n      */\n-    PropagationByResource fillVirtual(\n-            Long key, AnyTypeKind anyTypeKind, Set<String> vAttrsToBeRemoved, Set<AttrMod> vAttrsToBeUpdated);\n+    PropagationByResource fillVirtual(Long key, AnyTypeKind anyTypeKind, Set<AttrPatch> vAttrs);\n \n     VirSchema getVirSchema(String virSchemaName);\n "},{"sha":"25b381e20faf8a852f6f65b5c599cd7ed0d3a398","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AnyObjectDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -31,5 +31,5 @@ public interface AnyObjectDataBinder {\n \n     void create(AnyObject anyObject, AnyObjectTO anyObjectTO);\n \n-    PropagationByResource update(AnyObject toBeUpdated, AnyObjectMod anyObjectMod);\n+    PropagationByResource update(AnyObject toBeUpdated, AnyObjectPatch anyObjectPatch);\n }"},{"sha":"d2ab1fa37cd95f4d06d0699ddb2552fc89622035","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/GroupDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -31,6 +31,6 @@ public interface GroupDataBinder {\n \n     Group create(Group group, GroupTO groupTO);\n \n-    PropagationByResource update(Group group, GroupMod groupMod);\n+    PropagationByResource update(Group group, GroupPatch groupPatch);\n \n }"},{"sha":"ff645f4a5633c39553ebdbc2e5c3474d91b4a162","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -36,14 +36,14 @@ public interface UserDataBinder {\n     void create(User user, UserTO userTO, boolean storePassword);\n \n     /**\n-     * Update user, given UserMod.\n+     * Update user, given {@link UserPatch}.\n      *\n      * @param toBeUpdated user to be updated\n-     * @param userMod bean containing update request\n+     * @param userPatch bean containing update request\n      * @return updated user + propagation by resource\n      * @see PropagationByResource\n      */\n-    PropagationByResource update(User toBeUpdated, UserMod userMod);\n+    PropagationByResource update(User toBeUpdated, UserPatch userPatch);\n \n     boolean verifyPassword(String username, String password);\n "},{"sha":"0d0c7f436adb2ef82a2f4765e09d4d5155369ef4","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,8 +22,8 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -59,13 +59,12 @@ List<PropagationTask> getGroupCreateTasks(Long key, Collection<AttrTO> vAttrs, P\n      * Performs update on each resource associated to the group.\n      *\n      * @param wfResult group to be propagated (and info associated), as per result from workflow\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param vAttrs virtual attributes patches\n      * @param noPropResourceNames external resource names not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getGroupUpdateTasks(WorkflowResult<Long> wfResult, Set<String> vAttrsToBeRemoved,\n-            Set<AttrMod> vAttrsToBeUpdated, Set<String> noPropResourceNames);\n+    List<PropagationTask> getGroupUpdateTasks(\n+            WorkflowResult<Long> wfResult, Set<AttrPatch> vAttrs, Set<String> noPropResourceNames);\n \n     /**\n      * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n@@ -118,8 +117,8 @@ List<PropagationTask> getAnyObjectCreateTasks(\n     List<PropagationTask> getAnyObjectCreateTasks(Long anyObjectKey, Collection<AttrTO> vAttrs,\n             PropagationByResource propByRes, Collection<String> noPropResourceNames);\n \n-    List<PropagationTask> getAnyObjectUpdateTasks(WorkflowResult<Long> wfResult, Set<String> vAttrsToBeRemoved,\n-            Set<AttrMod> vAttrsToBeUpdated, Set<String> noPropResourceNames);\n+    List<PropagationTask> getAnyObjectUpdateTasks(\n+            WorkflowResult<Long> wfResult, Set<AttrPatch> vAttrs, Set<String> noPropResourceNames);\n \n     List<PropagationTask> getAnyObjectDeleteTasks(Long anyObjectKey);\n \n@@ -163,13 +162,13 @@ List<PropagationTask> getUserCreateTasks(Long key, Boolean enable,\n      * @param noPropResourceNames external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserMod, Boolean>> wfResult,\n+    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n             boolean changePwd, Collection<String> noPropResourceNames);\n \n-    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserMod, Boolean>> wfResult);\n+    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n \n     List<PropagationTask> getUpdateTasks(Any<?, ?, ?> any, String password, boolean changePwd,\n-            Boolean enable, Set<String> vAttrsToBeRemoved, Set<AttrMod> vAttrsToBeUpdated,\n+            Boolean enable, Set<AttrPatch> vAttrs,\n             PropagationByResource propByRes, Collection<String> noPropResourceNames);\n \n     /**"},{"sha":"fd36d3971401cc6fea0517b42f7ae8201065ecb4","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/SyncActions.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api.sync;\n \n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.quartz.JobExecutionException;\n@@ -139,19 +139,19 @@ <A extends AnyTO> SyncDelta beforeLink(\n      * {@link org.apache.syncope.common.types.MatchingRule#UPDATE} (default matching rule) is applied.\n      *\n      * @param <M> concrete any object\n-     * @param <A> any object modifications\n+     * @param <P> any object modifications\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n-     * @param anyMod modification\n+     * @param anyPatch modification\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    <M extends AnyTO, A extends AnyMod> SyncDelta beforeUpdate(\n+    <M extends AnyTO, P extends AnyPatch> SyncDelta beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n             M any,\n-            A anyMod)\n+            P anyPatch)\n             throws JobExecutionException;\n \n     /**"},{"sha":"ed8d260f5e82c0aeca6a6681fae3bafdc0167a95","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -27,7 +27,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -94,27 +94,26 @@ public Pair<Long, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final AnyObjectMod anyObjectMod) {\n-        return update(anyObjectMod, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final AnyObjectPatch anyObjectPatch) {\n+        return update(anyObjectPatch, Collections.<String>emptySet());\n     }\n \n     @Override\n     public Pair<Long, List<PropagationStatus>> update(\n-            final AnyObjectMod anyObjectMod, final Set<String> excludedResources) {\n+            final AnyObjectPatch anyObjectPatch, final Set<String> excludedResources) {\n \n-        WorkflowResult<Long> updated = awfAdapter.update(anyObjectMod);\n+        WorkflowResult<Long> updated = awfAdapter.update(anyObjectPatch);\n \n-        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(updated,\n-                anyObjectMod.getVirAttrsToRemove(), anyObjectMod.getVirAttrsToUpdate(), null);\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(\n+                updated, anyObjectPatch.getVirAttrs(), excludedResources);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n                     updated.getResult(),\n                     AnyTypeKind.ANY_OBJECT,\n-                    anyObjectMod.getVirAttrsToRemove(),\n-                    anyObjectMod.getVirAttrsToUpdate());\n+                    anyObjectPatch.getVirAttrs());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getAnyObjectUpdateTasks(updated, null, null, null)\n+                    ? propagationManager.getAnyObjectUpdateTasks(updated, null, null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n \n@@ -159,13 +158,13 @@ public List<PropagationStatus> delete(final Long key, final Set<String> excluded\n     }\n \n     @Override\n-    public Long unlink(final AnyObjectMod anyObjectMod) {\n-        return awfAdapter.update(anyObjectMod).getResult();\n+    public Long unlink(final AnyObjectPatch anyObjectPatch) {\n+        return awfAdapter.update(anyObjectPatch).getResult();\n     }\n \n     @Override\n-    public Long link(final AnyObjectMod anyObjectMod) {\n-        return awfAdapter.update(anyObjectMod).getResult();\n+    public Long link(final AnyObjectPatch anyObjectPatch) {\n+        return awfAdapter.update(anyObjectPatch).getResult();\n     }\n \n     @Override\n@@ -177,7 +176,7 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n \n         WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n \n-        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(wfResult, null, null, null);\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(wfResult, null, null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"6785ba028ebcd67596b3121453d276c1d789eea8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -32,7 +32,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -121,27 +121,26 @@ public Pair<Long, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final GroupMod groupMod) {\n-        return update(groupMod, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final GroupPatch groupPatch) {\n+        return update(groupPatch, Collections.<String>emptySet());\n     }\n \n     @Override\n     public Pair<Long, List<PropagationStatus>> update(\n-            final GroupMod groupMod, final Set<String> excludedResources) {\n+            final GroupPatch groupPatch, final Set<String> excludedResources) {\n \n-        WorkflowResult<Long> updated = gwfAdapter.update(groupMod);\n+        WorkflowResult<Long> updated = gwfAdapter.update(groupPatch);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(updated,\n-                groupMod.getVirAttrsToRemove(), groupMod.getVirAttrsToUpdate(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(\n+                updated, groupPatch.getVirAttrs(), excludedResources);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n                     updated.getResult(),\n                     AnyTypeKind.GROUP,\n-                    groupMod.getVirAttrsToRemove(),\n-                    groupMod.getVirAttrsToUpdate());\n+                    groupPatch.getVirAttrs());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getGroupUpdateTasks(updated, null, null, null)\n+                    ? propagationManager.getGroupUpdateTasks(updated, null, null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n \n@@ -204,8 +203,8 @@ public List<PropagationStatus> delete(final Long key, final Set<String> excluded\n     }\n \n     @Override\n-    public Long unlink(final GroupMod groupMod) {\n-        WorkflowResult<Long> updated = gwfAdapter.update(groupMod);\n+    public Long unlink(final GroupPatch groupPatch) {\n+        WorkflowResult<Long> updated = gwfAdapter.update(groupPatch);\n         return updated.getResult();\n     }\n \n@@ -216,7 +215,7 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n \n         WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n \n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(wfResult, null, null, null);\n+        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(wfResult, null, null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -248,8 +247,8 @@ public List<PropagationStatus> deprovision(final Long key, final Collection<Stri\n     }\n \n     @Override\n-    public Long link(final GroupMod groupMod) {\n-        return gwfAdapter.update(groupMod).getResult();\n+    public Long link(final GroupPatch groupPatch) {\n+        return gwfAdapter.update(groupPatch).getResult();\n     }\n \n }"},{"sha":"7052c7045d3fae946215167ecde3ce4c56e1e7b2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultLogicActions.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n \n@@ -35,7 +35,7 @@ public <A extends AnyTO> A afterCreate(final A input) {\n     }\n \n     @Override\n-    public <M extends AnyMod> M beforeUpdate(final M input) {\n+    public <P extends AnyPatch> P beforeUpdate(final P input) {\n         return input;\n     }\n "},{"sha":"2fd5005ddc23588234930fefbdb10f2efed3eb73","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":68,"deletions":57,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,20 +24,25 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -111,20 +116,19 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n-        WorkflowResult<Pair<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n+    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch) {\n+        WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n                     updated.getResult().getKey().getKey(),\n                     AnyTypeKind.USER,\n-                    userMod.getVirAttrsToRemove(),\n-                    userMod.getVirAttrsToUpdate());\n-            tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getUserUpdateTasks(updated, false, null)\n-                    : Collections.<PropagationTask>emptyList());\n+                    userPatch.getVirAttrs());\n+            if (!propByResVirAttr.isEmpty()) {\n+                tasks.addAll(propagationManager.getUserUpdateTasks(updated, false, null));\n+            }\n         }\n         PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n                 getBean(PropagationReporter.class);\n@@ -141,25 +145,25 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final Set<String> excludedResources) {\n-        return update(userMod, userMod.getKey(), new ProvisioningResult(), null, excludedResources);\n+    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch, final Set<String> excludedResources) {\n+        return update(userPatch, userPatch.getKey(), new ProvisioningResult(), null, excludedResources);\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod, final Long key,\n+    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch, final Long key,\n             final ProvisioningResult result, final Boolean enabled, final Set<String> excludedResources) {\n \n-        WorkflowResult<Pair<UserMod, Boolean>> updated;\n+        WorkflowResult<Pair<UserPatch, Boolean>> updated;\n         try {\n-            updated = uwfAdapter.update(userMod);\n+            updated = uwfAdapter.update(userPatch);\n         } catch (Exception e) {\n             LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", key, e);\n \n             result.setStatus(ProvisioningResult.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n \n-            updated = new WorkflowResult<Pair<UserMod, Boolean>>(\n-                    new ImmutablePair<>(userMod, false), new PropagationByResource(),\n+            updated = new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                    new ImmutablePair<>(userPatch, false), new PropagationByResource(),\n                     new HashSet<String>());\n         }\n \n@@ -231,49 +235,49 @@ public List<PropagationStatus> delete(final Long key, final Set<String> excluded\n     }\n \n     @Override\n-    public Long unlink(final UserMod userMod) {\n-        WorkflowResult<Pair<UserMod, Boolean>> updated = uwfAdapter.update(userMod);\n+    public Long unlink(final UserPatch userPatch) {\n+        WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n         return updated.getResult().getKey().getKey();\n     }\n \n     @Override\n-    public Long link(final UserMod userMod) {\n-        return uwfAdapter.update(userMod).getResult().getKey().getKey();\n+    public Long link(final UserPatch userPatch) {\n+        return uwfAdapter.update(userPatch).getResult().getKey().getKey();\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> activate(final StatusMod statusMod) {\n-        WorkflowResult<Long> updated = statusMod.isOnSyncope()\n-                ? uwfAdapter.activate(statusMod.getKey(), statusMod.getToken())\n-                : new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n+    public Pair<Long, List<PropagationStatus>> activate(final StatusPatch statusPatch) {\n+        WorkflowResult<Long> updated = statusPatch.isOnSyncope()\n+                ? uwfAdapter.activate(statusPatch.getKey(), statusPatch.getToken())\n+                : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusMod));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch));\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> reactivate(final StatusMod statusMod) {\n-        WorkflowResult<Long> updated = statusMod.isOnSyncope()\n-                ? uwfAdapter.reactivate(statusMod.getKey())\n-                : new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n+    public Pair<Long, List<PropagationStatus>> reactivate(final StatusPatch statusPatch) {\n+        WorkflowResult<Long> updated = statusPatch.isOnSyncope()\n+                ? uwfAdapter.reactivate(statusPatch.getKey())\n+                : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusMod));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch));\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> suspend(final StatusMod statusMod) {\n-        WorkflowResult<Long> updated = statusMod.isOnSyncope()\n-                ? uwfAdapter.suspend(statusMod.getKey())\n-                : new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n+    public Pair<Long, List<PropagationStatus>> suspend(final StatusPatch statusPatch) {\n+        WorkflowResult<Long> updated = statusPatch.isOnSyncope()\n+                ? uwfAdapter.suspend(statusPatch.getKey())\n+                : new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n \n-        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusMod));\n+        return new ImmutablePair<>(updated.getResult(), propagateStatus(statusPatch));\n     }\n \n-    protected List<PropagationStatus> propagateStatus(final StatusMod statusMod) {\n+    protected List<PropagationStatus> propagateStatus(final StatusPatch statusPatch) {\n         Collection<String> noPropResourceNames = CollectionUtils.removeAll(\n-                userDAO.findAllResourceNames(userDAO.find(statusMod.getKey())), statusMod.getResources());\n+                userDAO.findAllResourceNames(userDAO.find(statusPatch.getKey())), statusPatch.getResources());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                statusMod.getKey(), statusMod.getType() != StatusMod.ModType.SUSPEND, noPropResourceNames);\n+                statusPatch.getKey(), statusPatch.getType() != StatusPatchType.SUSPEND, noPropResourceNames);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -293,12 +297,12 @@ public void internalSuspend(final Long key) {\n \n         // propagate suspension if and only if it is required by policy\n         if (updated != null && updated.getValue()) {\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(updated.getKey().getResult());\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(updated.getKey().getResult());\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                    new WorkflowResult<Pair<UserMod, Boolean>>(\n-                            new ImmutablePair<>(userMod, Boolean.FALSE),\n+                    new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                            new ImmutablePair<>(userPatch, Boolean.FALSE),\n                             updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n             taskExecutor.execute(tasks);\n         }\n@@ -308,23 +312,30 @@ public void internalSuspend(final Long key) {\n     public List<PropagationStatus> provision(\n             final Long key, final boolean changePwd, final String password, final Collection<String> resources) {\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(key);\n-        userMod.getResourcesToAdd().addAll(resources);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(key);\n+        userPatch.getResources().addAll(CollectionUtils.collect(resources,\n+                new Transformer<String, StringPatchItem>() {\n+\n+                    @Override\n+                    public StringPatchItem transform(final String input) {\n+                        return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(input).build();\n+                    }\n+                }, new HashSet<StringPatchItem>()));\n \n         if (changePwd) {\n-            StatusMod statusMod = new StatusMod();\n-            statusMod.setOnSyncope(false);\n-            statusMod.getResources().addAll(resources);\n-            userMod.setPwdPropRequest(statusMod);\n-            userMod.setPassword(password);\n+            PasswordPatch passwordPatch = new PasswordPatch();\n+            passwordPatch.setOnSyncope(false);\n+            passwordPatch.getResources().addAll(resources);\n+            passwordPatch.setValue(password);\n+            userPatch.setPassword(passwordPatch);\n         }\n \n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        WorkflowResult<Pair<UserMod, Boolean>> wfResult = new WorkflowResult<Pair<UserMod, Boolean>>(\n-                ImmutablePair.of(userMod, (Boolean) null), propByRes, \"update\");\n+        WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n         PropagationReporter propagationReporter =\n@@ -368,13 +379,13 @@ public void requestPasswordReset(final Long key) {\n     public void confirmPasswordReset(final Long key, final String token, final String password) {\n         uwfAdapter.confirmPasswordReset(key, token, password);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(key);\n-        userMod.setPassword(password);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(key);\n+        userPatch.setPassword(new PasswordPatch.Builder().value(password).build());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                new WorkflowResult<Pair<UserMod, Boolean>>(\n-                        new ImmutablePair<UserMod, Boolean>(userMod, null), null, \"confirmPasswordReset\"),\n+                new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                        new ImmutablePair<UserPatch, Boolean>(userPatch, null), null, \"confirmPasswordReset\"),\n                 true, null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);"},{"sha":"adeb8c7de6ff52353629012729e9e4c2425e8b36","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":46,"deletions":59,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -30,7 +30,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -144,75 +144,68 @@ private Iterable<? extends ExternalResource> getAllResources(final Any<?, ?, ?>\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @Override\n-    public PropagationByResource fillVirtual(final Any any,\n-            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated) {\n-\n+    public PropagationByResource fillVirtual(final Any any, final Set<AttrPatch> vAttrs) {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n         Iterable<? extends ExternalResource> externalResources = getAllResources(any);\n \n-        // 1. virtual attributes to be removed\n-        for (String vAttrToBeRemoved : vAttrsToBeRemoved) {\n-            VirSchema virSchema = getVirSchema(vAttrToBeRemoved);\n+        for (AttrPatch patch : vAttrs) {\n+            VirSchema virSchema = getVirSchema(patch.getAttrTO().getSchema());\n             if (virSchema != null) {\n                 VirAttr virAttr = any.getVirAttr(virSchema.getKey());\n-                if (virAttr == null) {\n-                    LOG.debug(\"No virtual attribute found for schema {}\", virSchema.getKey());\n-                } else {\n-                    any.remove(virAttr);\n-                    virAttrDAO.delete(virAttr);\n-                }\n-\n-                for (ExternalResource resource : externalResources) {\n-                    for (MappingItem mapItem : MappingUtils.getMappingItems(\n-                            resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n-\n-                        if (virSchema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == anyUtils.virIntMappingType()) {\n+                switch (patch.getOperation()) {\n+                    case ADD_REPLACE:\n+                        if (virAttr == null) {\n+                            virAttr = anyUtils.newVirAttr();\n+                            virAttr.setOwner(any);\n+                            virAttr.setSchema(virSchema);\n+\n+                            any.add(virAttr);\n+                        }\n \n-                            propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                        updateOnResourcesIfMappingMatches(\n+                                any, virSchema.getKey(), externalResources, anyUtils.virIntMappingType(), propByRes);\n \n-                            // Using virtual attribute as ConnObjectKey must be avoided\n-                            if (mapItem.isConnObjectKey() && virAttr != null && !virAttr.getValues().isEmpty()) {\n-                                propByRes.addOldConnObjectKey(resource.getKey(), virAttr.getValues().get(0).toString());\n-                            }\n+                        if (!virAttr.getValues().equals(patch.getAttrTO().getValues())) {\n+                            virAttr.getValues().clear();\n+                            virAttr.getValues().addAll(patch.getAttrTO().getValues());\n+                        }\n+                        break;\n+\n+                    case DELETE:\n+                    default:\n+                        if (virAttr == null) {\n+                            LOG.debug(\"No virtual attribute found for schema {}\", virSchema.getKey());\n+                        } else {\n+                            any.remove(virAttr);\n+                            virAttrDAO.delete(virAttr);\n                         }\n-                    }\n-                }\n-            }\n-        }\n \n-        LOG.debug(\"Virtual attributes to be removed:\\n{}\", propByRes);\n+                        for (ExternalResource resource : externalResources) {\n+                            for (MappingItem mapItem : MappingUtils.getMappingItems(\n+                                    resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n \n-        // 2. virtual attributes to be updated\n-        for (AttrMod vAttrToBeUpdated : vAttrsToBeUpdated) {\n-            VirSchema virSchema = getVirSchema(vAttrToBeUpdated.getSchema());\n-            if (virSchema != null) {\n-                VirAttr virAttr = any.getVirAttr(virSchema.getKey());\n-                if (virAttr == null) {\n-                    virAttr = anyUtils.newVirAttr();\n-                    virAttr.setOwner(any);\n-                    virAttr.setSchema(virSchema);\n-\n-                    any.add(virAttr);\n-                }\n+                                if (virSchema.getKey().equals(mapItem.getIntAttrName())\n+                                        && mapItem.getIntMappingType() == anyUtils.virIntMappingType()) {\n \n-                updateOnResourcesIfMappingMatches(\n-                        any, virSchema.getKey(), externalResources, anyUtils.derIntMappingType(), propByRes);\n+                                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n-                List<String> values = new ArrayList<>(virAttr.getValues());\n-                values.removeAll(vAttrToBeUpdated.getValuesToBeRemoved());\n-                values.addAll(vAttrToBeUpdated.getValuesToBeAdded());\n+                                    // Using virtual attribute as ConnObjectKey must be avoided\n+                                    if (mapItem.isConnObjectKey()\n+                                            && virAttr != null && !virAttr.getValues().isEmpty()) {\n \n-                virAttr.getValues().clear();\n-                virAttr.getValues().addAll(values);\n+                                        propByRes.addOldConnObjectKey(\n+                                                resource.getKey(), virAttr.getValues().get(0).toString());\n+                                    }\n+                                }\n+                            }\n+                        }\n+                }\n             }\n         }\n \n-        LOG.debug(\"Virtual attributes to be added:\\n{}\", propByRes);\n-\n         return propByRes;\n     }\n \n@@ -267,13 +260,9 @@ public void fillVirtual(final Any any, final Collection<AttrTO> vAttrs) {\n     @Transactional\n     @Override\n     public PropagationByResource fillVirtual(\n-            final Long key, final AnyTypeKind anyTypeKind,\n-            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated) {\n+            final Long key, final AnyTypeKind anyTypeKind, final Set<AttrPatch> vAttrs) {\n \n-        return fillVirtual(\n-                find(key, anyTypeKind),\n-                vAttrsToBeRemoved,\n-                vAttrsToBeUpdated);\n+        return fillVirtual(find(key, anyTypeKind), vAttrs);\n     }\n \n     @Override\n@@ -320,8 +309,6 @@ private void retrieveVirAttrValue(\n \n             VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n \n-            AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-\n             for (ExternalResource resource : getTargetResources(virAttr, type, any.getType())) {\n                 Provision provision = resource.getProvision(any.getType());\n                 LOG.debug(\"Search values into {},{}\", resource, provision);"},{"sha":"30852f4392b436ff7fc34d131e32835071cc4269","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":188,"deletions":191,"changes":379,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -32,8 +32,9 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -71,6 +72,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -139,6 +141,9 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected PolicyDAO policyDAO;\n \n+    @Autowired\n+    protected RelationshipTypeDAO relationshipTypeDAO;\n+\n     @Autowired\n     protected EntityFactory entityFactory;\n \n@@ -151,11 +156,11 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n \n-    protected void setRealm(final Any<?, ?, ?> any, final AnyMod anyMod) {\n-        if (StringUtils.isNotBlank(anyMod.getRealm())) {\n-            Realm newRealm = realmDAO.find(anyMod.getRealm());\n+    protected void setRealm(final Any<?, ?, ?> any, final AnyPatch anyPatch) {\n+        if (anyPatch.getRealm() != null && StringUtils.isNotBlank(anyPatch.getRealm().getValue())) {\n+            Realm newRealm = realmDAO.find(anyPatch.getRealm().getValue());\n             if (newRealm == null) {\n-                LOG.debug(\"Invalid realm specified: {}, ignoring\", anyMod.getRealm());\n+                LOG.debug(\"Invalid realm specified: {}, ignoring\", anyPatch.getRealm().getValue());\n             } else {\n                 any.setRealm(newRealm);\n             }\n@@ -191,7 +196,7 @@ private DerSchema getDerSchema(final String derSchemaName) {\n         return schema;\n     }\n \n-    private void fillAttribute(final List<String> values, final AnyUtils anyUtils,\n+    private void fillAttr(final List<String> values, final AnyUtils anyUtils,\n             final PlainSchema schema, final PlainAttr<?> attr, final SyncopeClientException invalidValues) {\n \n         // if schema is multivalue, all values are considered for addition;\n@@ -227,7 +232,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n                         || item.getPurpose() == MappingPurpose.BOTH)) {\n \n                     List<PlainAttrValue> values = MappingUtils.getIntValues(\n-                            provision, item, Collections.<Any<?, ?, ?>>singletonList(any), null, null);\n+                            provision, item, Collections.<Any<?, ?, ?>>singletonList(any), null);\n                     if ((values == null || values.isEmpty())\n                             && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n \n@@ -293,79 +298,66 @@ private Set<ExternalResource> getAllResources(final Any<?, ?, ?> any) {\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    protected PropagationByResource fill(final Any any, final AnyMod anyMod, final AnyUtils anyUtils,\n-            final SyncopeClientCompositeException scce) {\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-\n-        // 1. anyTypeClass to be removed\n-        for (String className : anyMod.getAuxClassesToRemove()) {\n-            AnyTypeClass auxClass = anyTypeClassDAO.find(className);\n-            if (auxClass == null) {\n-                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", auxClass);\n-            } else {\n-                any.remove(auxClass);\n-            }\n-        }\n+    private void processAttrPatch(final Any any, final AttrPatch patch, final PlainSchema schema,\n+            final AnyUtils anyUtils, final Set<ExternalResource> resources, final PropagationByResource propByRes,\n+            final SyncopeClientException invalidValues) {\n \n-        // 2. anyTypeClass to be added\n-        for (String className : anyMod.getAuxClassesToAdd()) {\n-            AnyTypeClass auxClass = anyTypeClassDAO.find(className);\n-            if (auxClass == null) {\n-                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", auxClass);\n-            } else {\n-                any.add(auxClass);\n-            }\n-        }\n+        PlainAttr<?> attr = any.getPlainAttr(schema.getKey());\n+        if (attr == null) {\n+            LOG.debug(\"No plain attribute found for schema {}\", schema);\n \n-        SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+            switch (patch.getOperation()) {\n+                case ADD_REPLACE:\n+                    attr = anyUtils.newPlainAttr();\n+                    ((PlainAttr) attr).setOwner(any);\n+                    attr.setSchema(schema);\n+                    any.add(attr);\n+                    break;\n \n-        // 3. resources to be removed\n-        for (String resourceToBeRemoved : anyMod.getResourcesToRemove()) {\n-            ExternalResource resource = resourceDAO.find(resourceToBeRemoved);\n-            if (resource != null) {\n-                propByRes.add(ResourceOperation.DELETE, resource.getKey());\n-                any.remove(resource);\n+                case DELETE:\n+                default:\n+                    return;\n             }\n         }\n \n-        LOG.debug(\"Resources to be removed:\\n{}\", propByRes);\n+        switch (patch.getOperation()) {\n+            case ADD_REPLACE:\n+                virAttrHander.updateOnResourcesIfMappingMatches(\n+                        any, schema.getKey(), resources, anyUtils.plainIntMappingType(), propByRes);\n \n-        // 4. resources to be added\n-        for (String resourceToBeAdded : anyMod.getResourcesToAdd()) {\n-            ExternalResource resource = resourceDAO.find(resourceToBeAdded);\n-            if (resource != null) {\n-                propByRes.add(ResourceOperation.CREATE, resource.getKey());\n-                any.add(resource);\n-            }\n-        }\n-\n-        LOG.debug(\"Resources to be added:\\n{}\", propByRes);\n+                // 1.1 remove values\n+                Collection<Long> valuesToBeRemoved = attr.getSchema().isUniqueConstraint()\n+                        ? Collections.singleton(attr.getUniqueValue().getKey())\n+                        : CollectionUtils.collect(attr.getValues(), new Transformer<PlainAttrValue, Long>() {\n \n-        Set<ExternalResource> resources = getAllResources(any);\n+                            @Override\n+                            public Long transform(final PlainAttrValue input) {\n+                                return input.getKey();\n+                            }\n+                        });\n+                for (Long attrValueKey : valuesToBeRemoved) {\n+                    plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n+                }\n \n-        // 5. attributes to be removed\n-        for (String attrToRemove : anyMod.getPlainAttrsToRemove()) {\n-            PlainSchema schema = getPlainSchema(attrToRemove);\n-            if (schema != null) {\n-                PlainAttr<?> attr = any.getPlainAttr(schema.getKey());\n-                if (attr == null) {\n-                    LOG.debug(\"No attribute found for schema {}\", schema);\n-                } else {\n-                    String newValue = null;\n-                    for (AttrMod mod : anyMod.getPlainAttrsToUpdate()) {\n-                        if (schema.getKey().equals(mod.getSchema())) {\n-                            newValue = mod.getValuesToBeAdded().get(0);\n-                        }\n-                    }\n+                // 1.2 add values\n+                List<String> valuesToBeAdded = patch.getAttrTO().getValues();\n+                if (!valuesToBeAdded.isEmpty()\n+                        && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null\n+                        || !valuesToBeAdded.iterator().next().equals(attr.getUniqueValue().getValueAsString()))) {\n \n-                    if (!schema.isUniqueConstraint()\n-                            || (!attr.getUniqueValue().getStringValue().equals(newValue))) {\n+                    fillAttr(valuesToBeAdded, anyUtils, schema, attr, invalidValues);\n+                }\n \n-                        any.remove(attr);\n-                        plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n-                    }\n+                // if no values are in, the attribute can be safely removed\n+                if (attr.getValuesAsStrings().isEmpty()) {\n+                    plainAttrDAO.delete(attr);\n                 }\n+                break;\n+\n+            case DELETE:\n+            default:\n+                any.remove(attr);\n+                plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n \n                 for (ExternalResource resource : resources) {\n                     for (MappingItem mapItem : MappingUtils.getMappingItems(\n@@ -376,130 +368,140 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n \n                             propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n-                            if (mapItem.isConnObjectKey() && attr != null && !attr.getValuesAsStrings().isEmpty()) {\n+                            if (mapItem.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n                                 propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n                             }\n                         }\n                     }\n                 }\n-            }\n         }\n+    }\n \n-        LOG.debug(\"Attributes to be removed:\\n{}\", propByRes);\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private void processAttrPatch(final Any any, final AttrPatch patch, final DerSchema schema,\n+            final AnyUtils anyUtils, final Set<ExternalResource> resources, final PropagationByResource propByRes) {\n \n-        // 6. attributes to be updated\n-        for (AttrMod attrMod : anyMod.getPlainAttrsToUpdate()) {\n-            PlainSchema schema = getPlainSchema(attrMod.getSchema());\n-            PlainAttr attr = null;\n-            if (schema != null) {\n-                attr = any.getPlainAttr(schema.getKey());\n-                if (attr == null) {\n-                    attr = anyUtils.newPlainAttr();\n-                    attr.setOwner(any);\n+        DerAttr<?> attr = any.getDerAttr(schema.getKey());\n+        if (attr == null) {\n+            LOG.debug(\"No plain attribute found for schema {}\", schema);\n+\n+            switch (patch.getOperation()) {\n+                case ADD_REPLACE:\n+                    attr = anyUtils.newDerAttr();\n+                    ((DerAttr) attr).setOwner(any);\n                     attr.setSchema(schema);\n                     any.add(attr);\n-                }\n-            }\n-\n-            if (schema != null && attr != null && attr.getSchema() != null) {\n-                virAttrHander.updateOnResourcesIfMappingMatches(any, schema.getKey(),\n-                        resources, anyUtils.plainIntMappingType(), propByRes);\n+                    break;\n \n-                // 1.1 remove values\n-                Set<Long> valuesToBeRemoved = new HashSet<>();\n-                for (String valueToBeRemoved : attrMod.getValuesToBeRemoved()) {\n-                    if (attr.getSchema().isUniqueConstraint()) {\n-                        if (attr.getUniqueValue() != null\n-                                && valueToBeRemoved.equals(attr.getUniqueValue().getValueAsString())) {\n-\n-                            valuesToBeRemoved.add(attr.getUniqueValue().getKey());\n-                        }\n-                    } else {\n-                        for (PlainAttrValue mav : ((PlainAttr<?>) attr).getValues()) {\n-                            if (valueToBeRemoved.equals(mav.getValueAsString())) {\n-                                valuesToBeRemoved.add(mav.getKey());\n-                            }\n-                        }\n-                    }\n-                }\n-                for (Long attrValueKey : valuesToBeRemoved) {\n-                    plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n-                }\n-\n-                // 1.2 add values\n-                List<String> valuesToBeAdded = attrMod.getValuesToBeAdded();\n-                if (valuesToBeAdded != null && !valuesToBeAdded.isEmpty()\n-                        && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null\n-                        || !valuesToBeAdded.iterator().next().equals(attr.getUniqueValue().getValueAsString()))) {\n-\n-                    fillAttribute(attrMod.getValuesToBeAdded(), anyUtils, schema, attr, invalidValues);\n-                }\n-\n-                // if no values are in, the attribute can be safely removed\n-                if (attr.getValuesAsStrings().isEmpty()) {\n-                    plainAttrDAO.delete(attr);\n-                }\n+                case DELETE:\n+                default:\n+                    return;\n             }\n         }\n \n-        if (!invalidValues.isEmpty()) {\n-            scce.addException(invalidValues);\n-        }\n-\n-        LOG.debug(\"Attributes to be updated:\\n{}\", propByRes);\n+        switch (patch.getOperation()) {\n+            case ADD_REPLACE:\n+                virAttrHander.updateOnResourcesIfMappingMatches(\n+                        any, schema.getKey(), resources, anyUtils.derIntMappingType(), propByRes);\n+                break;\n \n-        // 7. derived attributes to be removed\n-        for (String derAttrToBeRemoved : anyMod.getDerAttrsToRemove()) {\n-            DerSchema derSchema = getDerSchema(derAttrToBeRemoved);\n-            if (derSchema != null) {\n-                DerAttr derAttr = any.getDerAttr(derSchema.getKey());\n-                if (derAttr == null) {\n-                    LOG.debug(\"No derived attribute found for schema {}\", derSchema.getKey());\n-                } else {\n-                    derAttrDAO.delete(derAttr);\n-                }\n+            case DELETE:\n+            default:\n+                derAttrDAO.delete(attr);\n \n                 for (ExternalResource resource : resources) {\n                     for (MappingItem mapItem : MappingUtils.getMappingItems(\n                             resource.getProvision(any.getType()), MappingPurpose.PROPAGATION)) {\n \n-                        if (derSchema.getKey().equals(mapItem.getIntAttrName())\n+                        if (schema.getKey().equals(mapItem.getIntAttrName())\n                                 && mapItem.getIntMappingType() == anyUtils.derIntMappingType()) {\n \n                             propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n-                            if (mapItem.isConnObjectKey() && derAttr != null\n-                                    && !derAttr.getValue(any.getPlainAttrs()).isEmpty()) {\n-\n-                                propByRes.addOldConnObjectKey(resource.getKey(),\n-                                        derAttr.getValue(any.getPlainAttrs()));\n+                            if (mapItem.isConnObjectKey() && !attr.getValue(any.getPlainAttrs()).isEmpty()) {\n+                                propByRes.addOldConnObjectKey(resource.getKey(), attr.getValue(any.getPlainAttrs()));\n                             }\n                         }\n                     }\n                 }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    protected PropagationByResource fill(final Any any, final AnyPatch anyPatch, final AnyUtils anyUtils,\n+            final SyncopeClientCompositeException scce) {\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+\n+        // 1. anyTypeClasses\n+        for (StringPatchItem patch : anyPatch.getAuxClasses()) {\n+            AnyTypeClass auxClass = anyTypeClassDAO.find(patch.getValue());\n+            if (auxClass == null) {\n+                LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \"{}, ignoring...\", patch.getValue());\n+            } else {\n+                switch (patch.getOperation()) {\n+                    case ADD_REPLACE:\n+                        any.add(auxClass);\n+                        break;\n+\n+                    case DELETE:\n+                    default:\n+                        any.remove(auxClass);\n+                }\n             }\n         }\n \n-        LOG.debug(\"Derived attributes to be removed:\\n{}\", propByRes);\n+        // 2. resources\n+        for (StringPatchItem patch : anyPatch.getResources()) {\n+            ExternalResource resource = resourceDAO.find(patch.getValue());\n+            if (resource == null) {\n+                LOG.debug(\"Invalid \" + ExternalResource.class.getSimpleName() + \"{}, ignoring...\", patch.getValue());\n+            } else {\n+                switch (patch.getOperation()) {\n+                    case ADD_REPLACE:\n+                        propByRes.add(ResourceOperation.CREATE, resource.getKey());\n+                        any.add(resource);\n+                        break;\n+\n+                    case DELETE:\n+                    default:\n+                        propByRes.add(ResourceOperation.DELETE, resource.getKey());\n+                        any.remove(resource);\n+                }\n+            }\n+        }\n \n-        // 8. derived attributes to be added\n-        for (String derAttrToBeAdded : anyMod.getDerAttrsToAdd()) {\n-            DerSchema derSchema = getDerSchema(derAttrToBeAdded);\n-            if (derSchema != null) {\n-                virAttrHander.updateOnResourcesIfMappingMatches(any, derSchema.getKey(),\n-                        resources, anyUtils.derIntMappingType(), propByRes);\n-\n-                DerAttr derAttr = any.getDerAttr(derSchema.getKey());\n-                if (derAttr == null) {\n-                    derAttr = anyUtils.newDerAttr();\n-                    derAttr.setOwner(any);\n-                    derAttr.setSchema(derSchema);\n-                    any.add(derAttr);\n+        Set<ExternalResource> resources = getAllResources(any);\n+        SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+\n+        // 3. plain attributes\n+        for (AttrPatch patch : anyPatch.getPlainAttrs()) {\n+            if (patch.getAttrTO() != null) {\n+                PlainSchema schema = getPlainSchema(patch.getAttrTO().getSchema());\n+                if (schema == null) {\n+                    LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n+                            + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n+                } else {\n+                    processAttrPatch(any, patch, schema, anyUtils, resources, propByRes, invalidValues);\n                 }\n             }\n         }\n+        if (!invalidValues.isEmpty()) {\n+            scce.addException(invalidValues);\n+        }\n \n-        LOG.debug(\"Derived attributes to be added:\\n{}\", propByRes);\n+        // 4. derived attributes\n+        for (AttrPatch patch : anyPatch.getDerAttrs()) {\n+            if (patch.getAttrTO() != null) {\n+                DerSchema schema = getDerSchema(patch.getAttrTO().getSchema());\n+                if (schema == null) {\n+                    LOG.debug(\"Invalid \" + DerSchema.class.getSimpleName()\n+                            + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n+                } else {\n+                    processAttrPatch(any, patch, schema, anyUtils, resources, propByRes);\n+                }\n+            }\n+        }\n \n         SyncopeClientException requiredValuesMissing = checkMandatory(any);\n         if (!requiredValuesMissing.isEmpty()) {\n@@ -519,8 +521,8 @@ protected PropagationByResource fill(final Any any, final AnyMod anyMod, final A\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    protected void fill(final Any any, final AnyTO anyTO,\n-            final AnyUtils anyUtils, final SyncopeClientCompositeException scce) {\n+    protected void fill(\n+            final Any any, final AnyTO anyTO, final AnyUtils anyUtils, final SyncopeClientCompositeException scce) {\n \n         // 0. aux classes\n         any.getAuxClasses().clear();\n@@ -537,17 +539,17 @@ protected void fill(final Any any, final AnyTO anyTO,\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // Only consider attributeTO with values\n-        for (AttrTO attributeTO : anyTO.getPlainAttrs()) {\n-            if (attributeTO.getValues() != null && !attributeTO.getValues().isEmpty()) {\n-                PlainSchema schema = getPlainSchema(attributeTO.getSchema());\n+        for (AttrTO attrTO : anyTO.getPlainAttrs()) {\n+            if (attrTO.getValues() != null && !attrTO.getValues().isEmpty()) {\n+                PlainSchema schema = getPlainSchema(attrTO.getSchema());\n                 if (schema != null) {\n                     PlainAttr attr = any.getPlainAttr(schema.getKey());\n                     if (attr == null) {\n                         attr = anyUtils.newPlainAttr();\n                         attr.setOwner(any);\n                         attr.setSchema(schema);\n                     }\n-                    fillAttribute(attributeTO.getValues(), anyUtils, schema, attr, invalidValues);\n+                    fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n \n                     if (attr.getValuesAsStrings().isEmpty()) {\n                         attr.setOwner(null);\n@@ -638,32 +640,31 @@ public String transform(final AnyTypeClass role) {\n             }\n         }, anyTO.getAuxClasses());\n \n-        AttrTO attributeTO;\n         for (PlainAttr<?> attr : attrs) {\n-            attributeTO = new AttrTO();\n-            attributeTO.setSchema(attr.getSchema().getKey());\n-            attributeTO.getValues().addAll(attr.getValuesAsStrings());\n-            attributeTO.setReadonly(attr.getSchema().isReadonly());\n+            AttrTO attrTO = new AttrTO();\n+            attrTO.setSchema(attr.getSchema().getKey());\n+            attrTO.getValues().addAll(attr.getValuesAsStrings());\n+            attrTO.setReadonly(attr.getSchema().isReadonly());\n \n-            anyTO.getPlainAttrs().add(attributeTO);\n+            anyTO.getPlainAttrs().add(attrTO);\n         }\n \n         for (DerAttr<?> derAttr : derAttrs) {\n-            attributeTO = new AttrTO();\n-            attributeTO.setSchema(derAttr.getSchema().getKey());\n-            attributeTO.getValues().add(derAttr.getValue(attrs));\n-            attributeTO.setReadonly(true);\n+            AttrTO attrTO = new AttrTO();\n+            attrTO.setSchema(derAttr.getSchema().getKey());\n+            attrTO.getValues().add(derAttr.getValue(attrs));\n+            attrTO.setReadonly(true);\n \n-            anyTO.getDerAttrs().add(attributeTO);\n+            anyTO.getDerAttrs().add(attrTO);\n         }\n \n         for (VirAttr<?> virAttr : virAttrs) {\n-            attributeTO = new AttrTO();\n-            attributeTO.setSchema(virAttr.getSchema().getKey());\n-            attributeTO.getValues().addAll(virAttr.getValues());\n-            attributeTO.setReadonly(virAttr.getSchema().isReadonly());\n+            AttrTO attrTO = new AttrTO();\n+            attrTO.setSchema(virAttr.getSchema().getKey());\n+            attrTO.getValues().addAll(virAttr.getValues());\n+            attrTO.setReadonly(virAttr.getSchema().isReadonly());\n \n-            anyTO.getVirAttrs().add(attributeTO);\n+            anyTO.getVirAttrs().add(attrTO);\n         }\n \n         for (ExternalResource resource : resources) {\n@@ -672,21 +673,17 @@ public String transform(final AnyTypeClass role) {\n     }\n \n     protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?, ?, ?>, AnyObject> relationship) {\n-        RelationshipTO relationshipTO = new RelationshipTO();\n-        relationshipTO.setLeftKey(relationship.getLeftEnd().getKey());\n-        relationshipTO.setLeftType(relationship.getLeftEnd().getType().getKey());\n-        relationshipTO.setRightKey(relationship.getRightEnd().getKey());\n-        relationshipTO.setRightType(relationship.getRightEnd().getType().getKey());\n-        return relationshipTO;\n+        return new RelationshipTO.Builder().\n+                left(relationship.getLeftEnd().getType().getKey(), relationship.getLeftEnd().getKey()).\n+                right(relationship.getRightEnd().getType().getKey(), relationship.getRightEnd().getKey()).\n+                build();\n     }\n \n     protected MembershipTO getMembershipTO(final Membership<? extends Any<?, ?, ?>> membership) {\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setLeftKey(membership.getLeftEnd().getKey());\n-        membershipTO.setLeftType(membership.getLeftEnd().getType().getKey());\n-        membershipTO.setRightKey(membership.getRightEnd().getKey());\n-        membershipTO.setGroupName(membership.getRightEnd().getName());\n-        return membershipTO;\n+        return new MembershipTO.Builder().\n+                left(membership.getLeftEnd().getType().getKey(), membership.getLeftEnd().getKey()).\n+                group(membership.getRightEnd().getKey(), membership.getRightEnd().getName()).\n+                build();\n     }\n \n     protected Map<String, String> getConnObjectKeys(final Any<?, ?, ?> any) {"},{"sha":"91edd7e7b535fb0bb347b6bd229ad9597527e4e3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":46,"deletions":56,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -26,17 +26,21 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.RelationshipPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -131,13 +135,15 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             if (otherEnd == null) {\n                 LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n             } else {\n+                RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n                 ARelationship relationship = null;\n                 if (anyObject.getKey() != null) {\n-                    relationship = anyObject.getRelationship(otherEnd.getKey());\n+                    relationship = anyObject.getRelationship(relationshipType, anyObject.getKey());\n                 }\n                 if (relationship == null) {\n                     relationship = entityFactory.newEntity(ARelationship.class);\n-                    relationship.setRightEnd(otherEnd);\n+                    relationship.setType(relationshipType);\n+                    relationship.setRightEnd(anyObject);\n                     relationship.setLeftEnd(anyObject);\n \n                     anyObject.add(relationship);\n@@ -171,7 +177,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n     }\n \n     @Override\n-    public PropagationByResource update(final AnyObject toBeUpdated, final AnyObjectMod anyObjectMod) {\n+    public PropagationByResource update(final AnyObject toBeUpdated, final AnyObjectPatch anyObjectPatch) {\n         // Re-merge any pending change from workflow tasks\n         final AnyObject anyObject = anyObjectDAO.save(toBeUpdated);\n \n@@ -185,79 +191,63 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         Map<String, String> oldConnObjectKeys = getConnObjectKeys(anyObject);\n \n         // attributes, derived attributes, virtual attributes and resources\n-        propByRes.merge(fill(anyObject, anyObjectMod, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce));\n+        propByRes.merge(fill(anyObject, anyObjectPatch, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce));\n \n         Set<String> toBeDeprovisioned = new HashSet<>();\n         Set<String> toBeProvisioned = new HashSet<>();\n \n-        // relationships to be removed\n-        for (Long anyObjectKey : anyObjectMod.getRelationshipsToRemove()) {\n-            LOG.debug(\"Relationship to be removed for any object {}\", anyObjectKey);\n-\n-            ARelationship relationship = anyObject.getRelationship(anyObjectKey);\n-            if (relationship == null) {\n-                LOG.warn(\"Invalid anyObject key specified for relationship to be removed: {}\", anyObjectKey);\n-            } else {\n-                if (!anyObjectMod.getRelationshipsToAdd().contains(anyObjectKey)) {\n+        // relationships\n+        for (RelationshipPatch patch : anyObjectPatch.getRelationships()) {\n+            if (patch.getRelationshipTO() != null) {\n+                RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n+                ARelationship relationship =\n+                        anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n+                if (relationship != null) {\n                     anyObject.remove(relationship);\n                     toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n                 }\n-            }\n-        }\n \n-        // relationships to be added\n-        for (Long anyObjectKey : anyObjectMod.getRelationshipsToAdd()) {\n-            LOG.debug(\"Relationship to be added for any object {}\", anyObjectKey);\n+                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n+                    if (otherEnd == null) {\n+                        LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n+                    } else {\n \n-            AnyObject otherEnd = anyObjectDAO.find(anyObjectKey);\n-            if (otherEnd == null) {\n-                LOG.debug(\"Ignoring invalid any object {}\", anyObjectKey);\n-            } else {\n-                ARelationship relationship = anyObject.getRelationship(otherEnd.getKey());\n-                if (relationship == null) {\n-                    relationship = entityFactory.newEntity(ARelationship.class);\n-                    relationship.setRightEnd(otherEnd);\n-                    relationship.setLeftEnd(anyObject);\n+                        relationship = entityFactory.newEntity(ARelationship.class);\n+                        relationship.setType(relationshipType);\n+                        relationship.setRightEnd(otherEnd);\n+                        relationship.setLeftEnd(anyObject);\n \n-                    anyObject.add(relationship);\n+                        anyObject.add(relationship);\n \n-                    toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                        toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                    }\n                 }\n             }\n         }\n \n-        // memberships to be removed\n-        for (Long groupKey : anyObjectMod.getMembershipsToRemove()) {\n-            LOG.debug(\"Membership to be removed for group {}\", groupKey);\n-\n-            AMembership membership = anyObject.getMembership(groupKey);\n-            if (membership == null) {\n-                LOG.warn(\"Invalid group key specified for membership to be removed: {}\", groupKey);\n-            } else {\n-                if (!anyObjectMod.getMembershipsToAdd().contains(groupKey)) {\n+        // memberships\n+        for (MembershipPatch patch : anyObjectPatch.getMemberships()) {\n+            if (patch.getMembershipTO() != null) {\n+                AMembership membership = anyObject.getMembership(patch.getMembershipTO().getRightKey());\n+                if (membership != null) {\n                     anyObject.remove(membership);\n                     toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n-            }\n-        }\n-\n-        // memberships to be added\n-        for (Long groupKey : anyObjectMod.getMembershipsToAdd()) {\n-            LOG.debug(\"Membership to be added for group {}\", groupKey);\n \n-            Group group = groupDAO.find(groupKey);\n-            if (group == null) {\n-                LOG.debug(\"Ignoring invalid group {}\", groupKey);\n-            } else {\n-                AMembership membership = anyObject.getMembership(group.getKey());\n-                if (membership == null) {\n-                    membership = entityFactory.newEntity(AMembership.class);\n-                    membership.setRightEnd(group);\n-                    membership.setLeftEnd(anyObject);\n+                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    Group group = groupDAO.find(patch.getMembershipTO().getRightKey());\n+                    if (group == null) {\n+                        LOG.debug(\"Ignoring invalid group {}\", patch.getMembershipTO().getRightKey());\n+                    } else {\n+                        membership = entityFactory.newEntity(AMembership.class);\n+                        membership.setRightEnd(group);\n+                        membership.setLeftEnd(anyObject);\n \n-                    anyObject.add(membership);\n+                        anyObject.add(membership);\n \n-                    toBeProvisioned.addAll(group.getResourceNames());\n+                        toBeProvisioned.addAll(group.getResourceNames());\n+                    }\n                 }\n             }\n         }"},{"sha":"155034c8f55074985ae6023d44262aa0bd2e4e54","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":28,"deletions":31,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -113,7 +114,7 @@ public Group create(final Group group, final GroupTO groupTO) {\n     }\n \n     @Override\n-    public PropagationByResource update(final Group toBeUpdated, final GroupMod groupMod) {\n+    public PropagationByResource update(final Group toBeUpdated, final GroupPatch groupPatch) {\n         // Re-merge any pending change from workflow tasks\n         Group group = groupDAO.save(toBeUpdated);\n \n@@ -125,28 +126,29 @@ public PropagationByResource update(final Group toBeUpdated, final GroupMod grou\n         Map<String, String> oldConnObjectKeys = getConnObjectKeys(group);\n \n         // realm\n-        setRealm(group, groupMod);\n+        setRealm(group, groupPatch);\n+\n         // name\n-        if (groupMod.getName() != null && !groupMod.getName().equals(group.getName())) {\n+        if (groupPatch.getName() != null && StringUtils.isNotBlank(groupPatch.getName().getValue())) {\n             propByRes.addAll(ResourceOperation.UPDATE, group.getResourceNames());\n \n-            group.setName(groupMod.getName());\n+            group.setName(groupPatch.getName().getValue());\n         }\n \n         // owner\n-        if (groupMod.getUserOwner() != null) {\n-            group.setUserOwner(groupMod.getUserOwner().getKey() == null\n+        if (groupPatch.getUserOwner() != null) {\n+            group.setUserOwner(groupPatch.getUserOwner().getValue() == null\n                     ? null\n-                    : userDAO.find(groupMod.getUserOwner().getKey()));\n+                    : userDAO.find(groupPatch.getUserOwner().getValue()));\n         }\n-        if (groupMod.getGroupOwner() != null) {\n-            group.setGroupOwner(groupMod.getGroupOwner().getKey() == null\n+        if (groupPatch.getGroupOwner() != null) {\n+            group.setGroupOwner(groupPatch.getGroupOwner().getValue() == null\n                     ? null\n-                    : groupDAO.find(groupMod.getGroupOwner().getKey()));\n+                    : groupDAO.find(groupPatch.getGroupOwner().getValue()));\n         }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        propByRes.merge(fill(group, groupMod, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce));\n+        propByRes.merge(fill(group, groupPatch, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce));\n \n         // check if some connObjectKey was changed by the update above\n         Map<String, String> newConnObjectKeys = getConnObjectKeys(group);\n@@ -160,31 +162,26 @@ public PropagationByResource update(final Group toBeUpdated, final GroupMod grou\n         }\n \n         // dynamic membership\n-        if (group.getADynMembership() != null && groupMod.getADynMembershipCond() == null) {\n-            group.setADynMembership(null);\n-        } else if (group.getADynMembership() == null && groupMod.getADynMembershipCond() != null) {\n-            setDynMembership(group, AnyTypeKind.ANY_OBJECT, groupMod.getADynMembershipCond());\n-        } else if (group.getADynMembership() != null && groupMod.getADynMembershipCond() != null\n-                && !group.getADynMembership().getFIQLCond().equals(groupMod.getADynMembershipCond())) {\n-\n-            group.getADynMembership().getMembers().clear();\n-            setDynMembership(group, AnyTypeKind.ANY_OBJECT, groupMod.getADynMembershipCond());\n+        if (groupPatch.getADynMembershipCond() != null) {\n+            if (groupPatch.getADynMembershipCond().getValue() == null) {\n+                group.setADynMembership(null);\n+            } else {\n+                group.getADynMembership().getMembers().clear();\n+                setDynMembership(group, AnyTypeKind.ANY_OBJECT, groupPatch.getADynMembershipCond().getValue());\n+            }\n         }\n-        if (group.getUDynMembership() != null && groupMod.getUDynMembershipCond() == null) {\n-            group.setUDynMembership(null);\n-        } else if (group.getUDynMembership() == null && groupMod.getUDynMembershipCond() != null) {\n-            setDynMembership(group, AnyTypeKind.USER, groupMod.getUDynMembershipCond());\n-        } else if (group.getUDynMembership() != null && groupMod.getUDynMembershipCond() != null\n-                && !group.getUDynMembership().getFIQLCond().equals(groupMod.getUDynMembershipCond())) {\n-\n-            group.getUDynMembership().getMembers().clear();\n-            setDynMembership(group, AnyTypeKind.USER, groupMod.getUDynMembershipCond());\n+        if (groupPatch.getUDynMembershipCond() != null) {\n+            if (groupPatch.getUDynMembershipCond().getValue() == null) {\n+                group.setUDynMembership(null);\n+            } else {\n+                group.getUDynMembership().getMembers().clear();\n+                setDynMembership(group, AnyTypeKind.USER, groupPatch.getUDynMembershipCond().getValue());\n+            }\n         }\n \n         return propByRes;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO getGroupTO(final Group group, final boolean details) {"},{"sha":"82dfbc0627b24e9c43fa4d287a8ded426dc83040","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":89,"deletions":107,"changes":196,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,21 +24,24 @@\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.LongPatchItem;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.RelationshipPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n@@ -52,6 +55,7 @@\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -159,16 +163,17 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         // relationships\n         for (RelationshipTO relationshipTO : userTO.getRelationships()) {\n             AnyObject anyObject = anyObjectDAO.find(relationshipTO.getRightKey());\n-\n             if (anyObject == null) {\n                 LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n             } else {\n+                RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n                 URelationship relationship = null;\n                 if (user.getKey() != null) {\n-                    relationship = user.getRelationship(anyObject.getKey());\n+                    relationship = user.getRelationship(relationshipType, anyObject.getKey());\n                 }\n                 if (relationship == null) {\n                     relationship = entityFactory.newEntity(URelationship.class);\n+                    relationship.setType(relationshipType);\n                     relationship.setRightEnd(anyObject);\n                     relationship.setLeftEnd(user);\n \n@@ -241,7 +246,7 @@ public boolean evaluate(final MappingItem item) {\n     }\n \n     @Override\n-    public PropagationByResource update(final User toBeUpdated, final UserMod userMod) {\n+    public PropagationByResource update(final User toBeUpdated, final UserPatch userPatch) {\n         // Re-merge any pending change from workflow tasks\n         final User user = userDAO.save(toBeUpdated);\n \n@@ -255,155 +260,132 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n         Map<String, String> oldConnObjectKeys = getConnObjectKeys(user);\n \n         // realm\n-        setRealm(user, userMod);\n+        setRealm(user, userPatch);\n \n         // password\n-        if (StringUtils.isNotBlank(userMod.getPassword())) {\n-            setPassword(user, userMod.getPassword(), scce);\n+        if (userPatch.getPassword() != null && StringUtils.isNotBlank(userPatch.getPassword().getValue())) {\n+            setPassword(user, userPatch.getPassword().getValue(), scce);\n             user.setChangePwdDate(new Date());\n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n         }\n \n         // username\n-        if (userMod.getUsername() != null && !userMod.getUsername().equals(user.getUsername())) {\n+        if (userPatch.getUsername() != null && StringUtils.isNotBlank(userPatch.getUsername().getValue())) {\n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n \n             String oldUsername = user.getUsername();\n-            user.setUsername(userMod.getUsername());\n+            user.setUsername(userPatch.getUsername().getValue());\n \n             if (oldUsername.equals(AuthContextUtils.getUsername())) {\n-                AuthContextUtils.updateUsername(userMod.getUsername());\n+                AuthContextUtils.updateUsername(userPatch.getUsername().getValue());\n             }\n         }\n \n         // security question / answer:\n-        // userMod.getSecurityQuestion() is null => remove user security question and answer\n-        // userMod.getSecurityQuestion() == 0 => don't change anything\n-        // userMod.getSecurityQuestion() > 0 => update user security question and answer\n-        if (userMod.getSecurityQuestion() == null) {\n-            user.setSecurityQuestion(null);\n-            user.setSecurityAnswer(null);\n-        } else if (userMod.getSecurityQuestion() > 0) {\n-            SecurityQuestion securityQuestion = securityQuestionDAO.find(userMod.getSecurityQuestion());\n-            if (securityQuestion != null) {\n-                user.setSecurityQuestion(securityQuestion);\n-                user.setSecurityAnswer(userMod.getSecurityAnswer());\n+        if (userPatch.getSecurityQuestion() != null) {\n+            if (userPatch.getSecurityQuestion().getValue() == null) {\n+                user.setSecurityQuestion(null);\n+                user.setSecurityAnswer(null);\n+            } else {\n+                SecurityQuestion securityQuestion =\n+                        securityQuestionDAO.find(userPatch.getSecurityQuestion().getValue());\n+                if (securityQuestion != null) {\n+                    user.setSecurityQuestion(securityQuestion);\n+                    user.setSecurityAnswer(userPatch.getSecurityAnswer().getValue());\n+                }\n             }\n         }\n \n-        user.setMustChangePassword(userMod.isMustChangePassword());\n+        if (userPatch.getMustChangePassword() != null) {\n+            user.setMustChangePassword(userPatch.getMustChangePassword().getValue());\n+        }\n \n         // roles\n-        CollectionUtils.forAllDo(userMod.getRolesToRemove(), new Closure<Long>() {\n-\n-            @Override\n-            public void execute(final Long roleKey) {\n-                Role role = roleDAO.find(roleKey);\n-                if (role == null) {\n-                    LOG.warn(\"Ignoring unknown role with id {}\", roleKey);\n-                } else {\n-                    user.remove(role);\n-                }\n-            }\n-        });\n-        CollectionUtils.forAllDo(userMod.getRolesToAdd(), new Closure<Long>() {\n-\n-            @Override\n-            public void execute(final Long roleKey) {\n-                Role role = roleDAO.find(roleKey);\n-                if (role == null) {\n-                    LOG.warn(\"Ignoring unknown role with id {}\", roleKey);\n-                } else {\n-                    user.add(role);\n+        for (LongPatchItem patch : userPatch.getRoles()) {\n+            Role role = roleDAO.find(patch.getValue());\n+            if (role == null) {\n+                LOG.warn(\"Ignoring unknown role with key {}\", patch.getValue());\n+            } else {\n+                switch (patch.getOperation()) {\n+                    case ADD_REPLACE:\n+                        user.add(role);\n+                        break;\n+\n+                    case DELETE:\n+                    default:\n+                        user.remove(role);\n                 }\n             }\n-        });\n+        }\n \n         // attributes, derived attributes, virtual attributes and resources\n-        propByRes.merge(fill(user, userMod, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce));\n+        propByRes.merge(fill(user, userPatch, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce));\n \n         Set<String> toBeDeprovisioned = new HashSet<>();\n         Set<String> toBeProvisioned = new HashSet<>();\n \n-        // relationships to be removed\n-        for (Long anyObjectKey : userMod.getRelationshipsToRemove()) {\n-            LOG.debug(\"Relationship to be removed for any object {}\", anyObjectKey);\n-\n-            URelationship relationship = user.getRelationship(anyObjectKey);\n-            if (relationship == null) {\n-                LOG.warn(\"Invalid anyObject key specified for relationship to be removed: {}\", anyObjectKey);\n-            } else {\n-                if (!userMod.getRelationshipsToAdd().contains(anyObjectKey)) {\n+        // relationships\n+        for (RelationshipPatch patch : userPatch.getRelationships()) {\n+            if (patch.getRelationshipTO() != null) {\n+                RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n+                URelationship relationship =\n+                        user.getRelationship(relationshipType, patch.getRelationshipTO().getRightKey());\n+                if (relationship != null) {\n                     user.remove(relationship);\n                     toBeDeprovisioned.addAll(relationship.getRightEnd().getResourceNames());\n                 }\n-            }\n-        }\n \n-        // relationships to be added\n-        for (Long anyObjectKey : userMod.getRelationshipsToAdd()) {\n-            LOG.debug(\"Relationship to be added for any object {}\", anyObjectKey);\n+                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n+                    if (otherEnd == null) {\n+                        LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n+                    } else {\n \n-            AnyObject otherEnd = anyObjectDAO.find(anyObjectKey);\n-            if (otherEnd == null) {\n-                LOG.debug(\"Ignoring invalid any object {}\", anyObjectKey);\n-            } else {\n-                URelationship relationship = user.getRelationship(otherEnd.getKey());\n-                if (relationship == null) {\n-                    relationship = entityFactory.newEntity(URelationship.class);\n-                    relationship.setRightEnd(otherEnd);\n-                    relationship.setLeftEnd(user);\n+                        relationship = entityFactory.newEntity(URelationship.class);\n+                        relationship.setType(relationshipType);\n+                        relationship.setRightEnd(otherEnd);\n+                        relationship.setLeftEnd(user);\n \n-                    user.add(relationship);\n+                        user.add(relationship);\n \n-                    toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                        toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                    }\n                 }\n             }\n         }\n \n-        // memberships to be removed\n-        for (Long groupKey : userMod.getMembershipsToRemove()) {\n-            LOG.debug(\"Membership to be removed for group {}\", groupKey);\n-\n-            UMembership membership = user.getMembership(groupKey);\n-            if (membership == null) {\n-                LOG.debug(\"Invalid group key specified for membership to be removed: {}\", groupKey);\n-            } else {\n-                if (!userMod.getMembershipsToAdd().contains(groupKey)) {\n+        // memberships\n+        for (MembershipPatch patch : userPatch.getMemberships()) {\n+            if (patch.getMembershipTO() != null) {\n+                UMembership membership = user.getMembership(patch.getMembershipTO().getRightKey());\n+                if (membership != null) {\n                     user.remove(membership);\n                     toBeDeprovisioned.addAll(membership.getRightEnd().getResourceNames());\n                 }\n-            }\n-        }\n-\n-        // memberships to be added\n-        for (Long groupKey : userMod.getMembershipsToAdd()) {\n-            LOG.debug(\"Membership to be added for group {}\", groupKey);\n \n-            Group group = groupDAO.find(groupKey);\n-            if (group == null) {\n-                LOG.debug(\"Ignoring invalid group {}\", groupKey);\n-            } else {\n-                UMembership membership = user.getMembership(group.getKey());\n-                if (membership == null) {\n-                    membership = entityFactory.newEntity(UMembership.class);\n-                    membership.setRightEnd(group);\n-                    membership.setLeftEnd(user);\n+                if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    Group group = groupDAO.find(patch.getMembershipTO().getRightKey());\n+                    if (group == null) {\n+                        LOG.debug(\"Ignoring invalid group {}\", patch.getMembershipTO().getRightKey());\n+                    } else {\n+                        membership = entityFactory.newEntity(UMembership.class);\n+                        membership.setRightEnd(group);\n+                        membership.setLeftEnd(user);\n \n-                    user.add(membership);\n+                        user.add(membership);\n \n-                    toBeProvisioned.addAll(group.getResourceNames());\n+                        toBeProvisioned.addAll(group.getResourceNames());\n \n-                    // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n-                    // ensure that they are counted for password propagation\n-                    if (toBeUpdated.canDecodePassword()) {\n-                        for (ExternalResource resource : group.getResources()) {\n-                            if (isPasswordMapped(resource)) {\n-                                if (userMod.getPwdPropRequest() == null) {\n-                                    userMod.setPwdPropRequest(new StatusMod());\n+                        // SYNCOPE-686: if password is invertible and we are adding resources with password mapping,\n+                        // ensure that they are counted for password propagation\n+                        if (toBeUpdated.canDecodePassword()) {\n+                            if (userPatch.getPassword() == null) {\n+                                userPatch.setPassword(new PasswordPatch());\n+                            }\n+                            for (ExternalResource resource : group.getResources()) {\n+                                if (isPasswordMapped(resource)) {\n+                                    userPatch.getPassword().getResources().add(resource.getKey());\n                                 }\n-\n-                                userMod.getPwdPropRequest().getResources().add(resource.getKey());\n                             }\n                         }\n                     }"},{"sha":"cd2db88d4468ebc974e9b0ddcf61872e3c7bf335","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -26,9 +26,12 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n@@ -180,18 +183,18 @@ protected List<PropagationTask> getCreateTaskIds(final Any<?, ?, ?> any,\n             propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceNames);\n         }\n \n-        return createTasks(any, password, true, null, null, enable, false, propByRes);\n+        return createTasks(any, password, true, null, enable, false, propByRes);\n     }\n \n     @Override\n     public List<PropagationTask> getAnyObjectUpdateTasks(\n             final WorkflowResult<Long> wfResult,\n-            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n+            final Set<AttrPatch> vAttrs,\n             final Set<String> noPropResourceNames) {\n \n         AnyObject anyObject = anyObjectDAO.authFind(wfResult.getResult());\n         return getUpdateTasks(anyObject, null, false, null,\n-                vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), noPropResourceNames);\n+                vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n     }\n \n     @Override\n@@ -203,34 +206,34 @@ public List<PropagationTask> getUserUpdateTasks(final Long key, final Boolean en\n                 null, // no password\n                 false,\n                 enable, // status to be propagated\n-                Collections.<String>emptySet(), // no virtual attributes to be managed\n-                Collections.<AttrMod>emptySet(), // no virtual attributes to be managed\n+                Collections.<AttrPatch>emptySet(), // no virtual attributes to be managed\n                 null, // no propagation by resources\n                 noPropResourceNames);\n     }\n \n     @Override\n-    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMod, Boolean>> wfResult,\n+    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n             final boolean changePwd, final Collection<String> noPropResourceNames) {\n \n         User user = userDAO.authFind(wfResult.getResult().getKey().getKey());\n         return getUpdateTasks(user,\n-                wfResult.getResult().getKey().getPassword(),\n+                wfResult.getResult().getKey().getPassword() == null\n+                        ? null\n+                        : wfResult.getResult().getKey().getPassword().getValue(),\n                 changePwd,\n                 wfResult.getResult().getValue(),\n-                wfResult.getResult().getKey().getVirAttrsToRemove(),\n-                wfResult.getResult().getKey().getVirAttrsToUpdate(),\n+                wfResult.getResult().getKey().getVirAttrs(),\n                 wfResult.getPropByRes(),\n                 noPropResourceNames);\n     }\n \n     @Override\n-    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMod, Boolean>> wfResult) {\n-        UserMod userMod = wfResult.getResult().getKey();\n+    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult) {\n+        UserPatch userPatch = wfResult.getResult().getKey();\n \n         // Propagate password update only to requested resources\n         List<PropagationTask> tasks = new ArrayList<>();\n-        if (userMod.getPwdPropRequest() == null) {\n+        if (userPatch.getPassword() == null) {\n             // a. no specific password propagation request: generate propagation tasks for any resource associated\n             tasks = getUserUpdateTasks(wfResult, false, null);\n         } else {\n@@ -239,14 +242,22 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMo\n             PropagationByResource origPropByRes = new PropagationByResource();\n             origPropByRes.merge(wfResult.getPropByRes());\n \n-            Set<String> pwdResourceNames = new HashSet<>(userMod.getPwdPropRequest().getResources());\n-            Collection<String> currentResourceNames = userDAO.findAllResourceNames(userDAO.authFind(userMod.getKey()));\n+            Set<String> pwdResourceNames = new HashSet<>(userPatch.getPassword().getResources());\n+            Collection<String> currentResourceNames =\n+                    userDAO.findAllResourceNames(userDAO.authFind(userPatch.getKey()));\n             pwdResourceNames.retainAll(currentResourceNames);\n             PropagationByResource pwdPropByRes = new PropagationByResource();\n             pwdPropByRes.addAll(ResourceOperation.UPDATE, pwdResourceNames);\n             if (!pwdPropByRes.isEmpty()) {\n                 Set<String> toBeExcluded = new HashSet<>(currentResourceNames);\n-                toBeExcluded.addAll(userMod.getResourcesToAdd());\n+                toBeExcluded.addAll(CollectionUtils.collect(userPatch.getResources(),\n+                        new Transformer<StringPatchItem, String>() {\n+\n+                            @Override\n+                            public String transform(final StringPatchItem input) {\n+                                return input.getValue();\n+                            }\n+                        }));\n                 toBeExcluded.removeAll(pwdResourceNames);\n                 tasks.addAll(getUserUpdateTasks(wfResult, true, toBeExcluded));\n             }\n@@ -265,27 +276,22 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMo\n \n     @Override\n     public List<PropagationTask> getGroupUpdateTasks(final WorkflowResult<Long> wfResult,\n-            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n-            final Set<String> noPropResourceNames) {\n+            final Set<AttrPatch> vAttrs, final Set<String> noPropResourceNames) {\n \n         Group group = groupDAO.authFind(wfResult.getResult());\n         return getUpdateTasks(group, null, false, null,\n-                vAttrsToBeRemoved, vAttrsToBeUpdated, wfResult.getPropByRes(), noPropResourceNames);\n+                vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n     }\n \n     @Override\n     public List<PropagationTask> getUpdateTasks(final Any<?, ?, ?> any,\n-            final String password, final boolean changePwd, final Boolean enable,\n-            final Set<String> vAttrsToBeRemoved, final Set<AttrMod> vAttrsToBeUpdated,\n+            final String password, final boolean changePwd, final Boolean enable, final Set<AttrPatch> vAttrs,\n             final PropagationByResource propByRes, final Collection<String> noPropResourceNames) {\n \n         PropagationByResource localPropByRes = virAttrHandler.fillVirtual(\n-                any,\n-                vAttrsToBeRemoved == null\n-                        ? Collections.<String>emptySet()\n-                        : vAttrsToBeRemoved, vAttrsToBeUpdated == null\n-                        ? Collections.<AttrMod>emptySet()\n-                        : vAttrsToBeUpdated);\n+                any, vAttrs == null\n+                        ? Collections.<AttrPatch>emptySet()\n+                        : vAttrs);\n \n         if (propByRes == null || propByRes.isEmpty()) {\n             localPropByRes.addAll(ResourceOperation.UPDATE, any.getResourceNames());\n@@ -297,16 +303,15 @@ public List<PropagationTask> getUpdateTasks(final Any<?, ?, ?> any,\n             localPropByRes.removeAll(noPropResourceNames);\n         }\n \n-        Map<String, AttrMod> vAttrsToBeUpdatedMap = null;\n-        if (vAttrsToBeUpdated != null) {\n-            vAttrsToBeUpdatedMap = new HashMap<>();\n-            for (AttrMod attrMod : vAttrsToBeUpdated) {\n-                vAttrsToBeUpdatedMap.put(attrMod.getSchema(), attrMod);\n+        Map<String, AttrPatch> vAttrsMap = null;\n+        if (vAttrs != null) {\n+            vAttrsMap = new HashMap<>();\n+            for (AttrPatch attrPatch : vAttrs) {\n+                vAttrsMap.put(attrPatch.getAttrTO().getSchema(), attrPatch);\n             }\n         }\n \n-        return createTasks(\n-                any, password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdatedMap, enable, false, localPropByRes);\n+        return createTasks(any, password, changePwd, vAttrsMap, enable, false, localPropByRes);\n     }\n \n     @Override\n@@ -385,7 +390,7 @@ protected List<PropagationTask> getDeleteTaskIds(\n         if (noPropResourceNames != null && !noPropResourceNames.isEmpty()) {\n             propByRes.get(ResourceOperation.DELETE).removeAll(noPropResourceNames);\n         }\n-        return createTasks(any, null, false, null, null, false, true, propByRes);\n+        return createTasks(any, null, false, null, false, true, propByRes);\n     }\n \n     /**\n@@ -394,34 +399,29 @@ protected List<PropagationTask> getDeleteTaskIds(\n      * @param any user / group to be provisioned\n      * @param password cleartext password to be provisioned\n      * @param changePwd whether password should be included for propagation attributes or not\n-     * @param vAttrsToBeRemoved virtual attributes to be removed\n-     * @param vAttrsToBeUpdated virtual attributes to be added\n+     * @param vAttrs virtual attributes to be maaged\n      * @param enable whether user must be enabled or not\n      * @param deleteOnResource whether user / group must be deleted anyway from external resource or not\n      * @param propByRes operation to be performed per resource\n      * @return list of propagation tasks created\n      */\n     protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n             final String password, final boolean changePwd,\n-            final Set<String> vAttrsToBeRemoved, final Map<String, AttrMod> vAttrsToBeUpdated,\n+            final Map<String, AttrPatch> vAttrs,\n             final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes) {\n \n         LOG.debug(\"Provisioning any {}:\\n{}\", any, propByRes);\n \n-        if (!propByRes.get(ResourceOperation.CREATE).isEmpty()\n-                && vAttrsToBeRemoved != null && vAttrsToBeUpdated != null) {\n-\n+        if (!propByRes.get(ResourceOperation.CREATE).isEmpty() && vAttrs != null) {\n             virAttrHandler.retrieveVirAttrValues(any);\n \n             // update vAttrsToBeUpdated as well\n             for (VirAttr<?> virAttr : any.getVirAttrs()) {\n                 String schema = virAttr.getSchema().getKey();\n \n-                AttrMod attributeMod = new AttrMod();\n-                attributeMod.setSchema(schema);\n-                attributeMod.getValuesToBeAdded().addAll(virAttr.getValues());\n-\n-                vAttrsToBeUpdated.put(schema, attributeMod);\n+                vAttrs.put(schema, new AttrPatch.Builder().\n+                        attrTO(new AttrTO.Builder().schema(schema).values(virAttr.getValues()).build()).\n+                        build());\n             }\n         }\n \n@@ -457,7 +457,7 @@ protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n                     task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n                     Pair<String, Set<Attribute>> preparedAttrs = MappingUtils.prepareAttrs(\n-                            any, password, changePwd, vAttrsToBeRemoved, vAttrsToBeUpdated, enable, provision);\n+                            any, password, changePwd, vAttrs, enable, provision);\n                     task.setConnObjectKey(preparedAttrs.getKey());\n \n                     // Check if any of mandatory attributes (in the mapping) is missing or not received any value: "},{"sha":"6c7f39eb2e41a8564842c30b69292f59cd0e776e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":18,"deletions":14,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,11 +24,13 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -96,9 +98,7 @@ public boolean handle(final long anyKey) {\n         }\n     }\n \n-    protected final void doHandle(final Any<?, ?, ?> any)\n-            throws JobExecutionException {\n-\n+    protected final void doHandle(final Any<?, ?, ?> any) throws JobExecutionException {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n         ProvisioningResult result = new ProvisioningResult();\n@@ -329,26 +329,30 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n     }\n \n     protected Any<?, ?, ?> update(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        Set<String> vattrToBeRemoved = new HashSet<>();\n-        Set<AttrMod> vattrToBeUpdated = new HashSet<>();\n+        Set<AttrPatch> vattrs = new HashSet<>();\n \n         // Search for all mapped vattrs\n         Mapping mapping = profile.getTask().getResource().getProvision(sbj.getType()).getMapping();\n         for (MappingItem mappingItem : mapping.getItems()) {\n             if (mappingItem.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n-                vattrToBeRemoved.add(mappingItem.getIntAttrName());\n+                vattrs.add(new AttrPatch.Builder().\n+                        operation(PatchOperation.DELETE).\n+                        attrTO(new AttrTO.Builder().schema(mappingItem.getIntAttrName()).build()).\n+                        build());\n             }\n         }\n \n         // Search for all user's vattrs and:\n         // 1. add mapped vattrs not owned by the user to the set of vattrs to be removed\n         // 2. add all vattrs owned by the user to the set of vattrs to be update\n         for (VirAttr<?> vattr : sbj.getVirAttrs()) {\n-            vattrToBeRemoved.remove(vattr.getSchema().getKey());\n-            AttrMod mod = new AttrMod();\n-            mod.setSchema(vattr.getSchema().getKey());\n-            mod.getValuesToBeAdded().addAll(vattr.getValues());\n-            vattrToBeUpdated.add(mod);\n+            vattrs.add(new AttrPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).\n+                    attrTO(new AttrTO.Builder().\n+                            schema(vattr.getSchema().getKey()).\n+                            values(vattr.getValues()).\n+                            build()).\n+                    build());\n         }\n \n         boolean changepwd;\n@@ -367,11 +371,11 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         List<String> noPropResources = new ArrayList<>(resourceNames);\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        final PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource propByRes = new PropagationByResource();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n         taskExecutor.execute(propagationManager.getUpdateTasks(\n-                sbj, null, changepwd, enabled, vattrToBeRemoved, vattrToBeUpdated, propByRes, noPropResources));\n+                sbj, null, changepwd, enabled, vattrs, propByRes, noPropResources));\n \n         return getAny(sbj.getKey());\n     }"},{"sha":"34ead6952b2a88367b54bb07e83b924269506d1b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,7 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n@@ -58,7 +58,7 @@ public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract AnyTO doLink(AnyTO before, ProvisioningResult result, boolean unlink);\n \n-    protected abstract AnyTO doUpdate(AnyTO before, AnyMod anyMod, SyncDelta delta, ProvisioningResult result);\n+    protected abstract AnyTO doUpdate(AnyTO before, AnyPatch anyPatch, SyncDelta delta, ProvisioningResult result);\n \n     protected abstract void doDeprovision(Long key, boolean unlink);\n \n@@ -242,7 +242,7 @@ protected List<ProvisioningResult> update(final SyncDelta delta, final List<Long\n                     output = null;\n                 } else {\n                     try {\n-                        AnyMod anyMod = connObjectUtils.getAnyMod(\n+                        AnyPatch anyPatch = connObjectUtils.getAnyPatch(\n                                 before.getKey(),\n                                 workingDelta.getObject(),\n                                 before,\n@@ -251,10 +251,10 @@ protected List<ProvisioningResult> update(final SyncDelta delta, final List<Long\n                                 getAnyUtils());\n \n                         for (SyncActions action : profile.getActions()) {\n-                            workingDelta = action.beforeUpdate(this.getProfile(), workingDelta, before, anyMod);\n+                            workingDelta = action.beforeUpdate(this.getProfile(), workingDelta, before, anyPatch);\n                         }\n \n-                        AnyTO updated = doUpdate(before, anyMod, workingDelta, result);\n+                        AnyTO updated = doUpdate(before, anyPatch, workingDelta, result);\n \n                         for (SyncActions action : profile.getActions()) {\n                             action.after(this.getProfile(), workingDelta, updated, result);"},{"sha":"0a276abb0cbdc528d9b1fb48b0ecbd181e7afeb3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectPushResultHandlerImpl.java","status":"modified","additions":25,"deletions":18,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,10 +22,12 @@\n import java.util.Collections;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -78,35 +80,40 @@ protected AnyUtils getAnyUtils() {\n \n     @Override\n     protected Any<?, ?, ?> link(final Any<?, ?, ?> sbj, final Boolean unlink) {\n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(sbj.getKey());\n+        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n+        anyObjectPatch.setKey(sbj.getKey());\n+        anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n \n-        if (unlink) {\n-            anyObjectMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        } else {\n-            anyObjectMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        }\n-\n-        awfAdapter.update(anyObjectMod);\n+        awfAdapter.update(anyObjectPatch);\n \n         return anyObjectDAO.authFind(sbj.getKey());\n     }\n \n     @Override\n     protected Any<?, ?, ?> unassign(final Any<?, ?, ?> sbj) {\n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(sbj.getKey());\n-        anyObjectMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        awfAdapter.update(anyObjectMod);\n+        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n+        anyObjectPatch.setKey(sbj.getKey());\n+        anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.DELETE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        awfAdapter.update(anyObjectPatch);\n+\n         return deprovision(sbj);\n     }\n \n     @Override\n     protected Any<?, ?, ?> assign(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(sbj.getKey());\n-        anyObjectMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        awfAdapter.update(anyObjectMod);\n+        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n+        anyObjectPatch.setKey(sbj.getKey());\n+        anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        awfAdapter.update(anyObjectPatch);\n+\n         return provision(sbj, enabled);\n     }\n "},{"sha":"0227c87f0640a46d43636e58270a625197c3a5d2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectSyncResultHandlerImpl.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,12 +22,14 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.AnyObjectSyncResultHandler;\n@@ -76,28 +78,25 @@ protected AnyTO doLink(\n             final ProvisioningResult result,\n             final boolean unlink) {\n \n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(before.getKey());\n+        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n+        anyObjectPatch.setKey(before.getKey());\n+        anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n \n-        if (unlink) {\n-            anyObjectMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        } else {\n-            anyObjectMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        }\n-\n-        return anyObjectDataBinder.getAnyObjectTO(awfAdapter.update(anyObjectMod).getResult());\n+        return anyObjectDataBinder.getAnyObjectTO(awfAdapter.update(anyObjectPatch).getResult());\n     }\n \n     @Override\n     protected AnyTO doUpdate(\n             final AnyTO before,\n-            final AnyMod anyMod,\n+            final AnyPatch anyPatch,\n             final SyncDelta delta,\n             final ProvisioningResult result) {\n \n-        AnyObjectMod anyObjectMod = AnyObjectMod.class.cast(anyMod);\n+        AnyObjectPatch anyObjectPatch = AnyObjectPatch.class.cast(anyPatch);\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = anyObjectProvisioningManager.update(anyObjectMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = anyObjectProvisioningManager.update(anyObjectPatch);\n \n         AnyObjectTO after = anyObjectDataBinder.getAnyObjectTO(updated.getKey());\n         result.setName(getName(after));\n@@ -110,9 +109,11 @@ protected void doDeprovision(final Long key, final boolean unlink) {\n                 key, profile.getTask().getResource().getKey()));\n \n         if (unlink) {\n-            AnyObjectMod anyObjectMod = new AnyObjectMod();\n-            anyObjectMod.setKey(key);\n-            anyObjectMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n+            AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n+            anyObjectPatch.setKey(key);\n+            anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.DELETE).\n+                    value(profile.getTask().getResource().getKey()).build());\n         }\n     }\n "},{"sha":"ec7fb2e4ff52d15e07fb371ee9a0ad9851bae469","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DBPasswordSyncActions.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,8 +20,9 @@\n \n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -74,15 +75,15 @@ public <A extends AnyTO> SyncDelta beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final A any,\n-            final M anyMod) throws JobExecutionException {\n+            final M anyPatch) throws JobExecutionException {\n \n-        if (anyMod instanceof UserMod) {\n-            String modPassword = ((UserMod) anyMod).getPassword();\n-            parseEncodedPassword(modPassword, profile.getConnector());\n+        if (anyPatch instanceof UserPatch) {\n+            PasswordPatch modPassword = ((UserPatch) anyPatch).getPassword();\n+            parseEncodedPassword(modPassword == null ? null : modPassword.getValue(), profile.getConnector());\n         }\n \n         return delta;"},{"sha":"455a799c375f2e7de97a547c2ae663c30729e2e1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultSyncActions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n@@ -36,11 +36,11 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, P extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final A any,\n-            final M anyMod) throws JobExecutionException {\n+            final P anyMod) throws JobExecutionException {\n \n         return delta;\n     }"},{"sha":"44a034b5b555438ae392ed3babebbf7fd14326ad","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupPushResultHandlerImpl.java","status":"modified","additions":25,"deletions":17,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,10 +21,12 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -77,35 +79,41 @@ protected AnyUtils getAnyUtils() {\n \n     @Override\n     protected Any<?, ?, ?> link(final Any<?, ?, ?> sbj, final Boolean unlink) {\n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(sbj.getKey());\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(sbj.getKey());\n \n-        if (unlink) {\n-            groupMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        } else {\n-            groupMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        }\n+        groupPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n \n-        gwfAdapter.update(groupMod);\n+        gwfAdapter.update(groupPatch);\n \n         return groupDAO.authFind(sbj.getKey());\n     }\n \n     @Override\n     protected Any<?, ?, ?> unassign(final Any<?, ?, ?> sbj) {\n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(sbj.getKey());\n-        groupMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        gwfAdapter.update(groupMod);\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(sbj.getKey());\n+        groupPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.DELETE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        gwfAdapter.update(groupPatch);\n+\n         return deprovision(sbj);\n     }\n \n     @Override\n     protected Any<?, ?, ?> assign(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(sbj.getKey());\n-        groupMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        gwfAdapter.update(groupMod);\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(sbj.getKey());\n+        groupPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        gwfAdapter.update(groupPatch);\n+\n         return provision(sbj, enabled);\n     }\n "},{"sha":"8c1118479d3973ba0d124e252fbbba48d505f8a0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupSyncResultHandlerImpl.java","status":"modified","additions":24,"deletions":21,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,13 +22,15 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.GroupSyncResultHandler;\n@@ -81,34 +83,33 @@ protected AnyTO doLink(\n             final ProvisioningResult result,\n             final boolean unlink) {\n \n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(before.getKey());\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(before.getKey());\n+        groupPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n \n-        if (unlink) {\n-            groupMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        } else {\n-            groupMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        }\n-\n-        return groupDataBinder.getGroupTO(gwfAdapter.update(groupMod).getResult());\n+        return groupDataBinder.getGroupTO(gwfAdapter.update(groupPatch).getResult());\n     }\n \n     @Override\n     protected AnyTO doUpdate(\n             final AnyTO before,\n-            final AnyMod anyMod,\n+            final AnyPatch anyPatch,\n             final SyncDelta delta,\n             final ProvisioningResult result) {\n \n-        GroupMod groupMod = GroupMod.class.cast(anyMod);\n+        GroupPatch groupPatch = GroupPatch.class.cast(anyPatch);\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = groupProvisioningManager.update(groupMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = groupProvisioningManager.update(groupPatch);\n \n         // moved after group provisioning manager\n         String groupOwner = null;\n-        for (AttrMod attrMod : groupMod.getPlainAttrsToUpdate()) {\n-            if (attrMod.getSchema().isEmpty() && !attrMod.getValuesToBeAdded().isEmpty()) {\n-                groupOwner = attrMod.getValuesToBeAdded().iterator().next();\n+        for (AttrPatch attrPatch : groupPatch.getPlainAttrs()) {\n+            if (attrPatch.getOperation() == PatchOperation.ADD_REPLACE && attrPatch.getAttrTO() != null\n+                    && attrPatch.getAttrTO().getSchema().isEmpty() && !attrPatch.getAttrTO().getValues().isEmpty()) {\n+\n+                groupOwner = attrPatch.getAttrTO().getValues().get(0);\n             }\n         }\n         if (groupOwner != null) {\n@@ -127,9 +128,11 @@ protected void doDeprovision(final Long key, final boolean unlink) {\n         taskExecutor.execute(propagationManager.getGroupDeleteTasks(key, profile.getTask().getResource().getKey()));\n \n         if (unlink) {\n-            GroupMod groupMod = new GroupMod();\n-            groupMod.setKey(key);\n-            groupMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n+            GroupPatch groupPatch = new GroupPatch();\n+            groupPatch.setKey(key);\n+            groupPatch.getResources().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.DELETE).\n+                    value(profile.getTask().getResource().getKey()).build());\n         }\n     }\n "},{"sha":"430d06d7c12c3ea22255121d4196ce476d377390","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":41,"deletions":27,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -25,13 +25,16 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -129,9 +132,9 @@ public boolean evaluate(final ConnConfProperty property) {\n      * {@inheritDoc}\n      */\n     @Override\n-    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta, final A any, final M anyMod) throws JobExecutionException {\n+            final SyncDelta delta, final A any, final M anyPatch) throws JobExecutionException {\n \n         if (any instanceof GroupTO) {\n             // search for all users assigned to given group\n@@ -146,27 +149,32 @@ public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             }\n         }\n \n-        return super.beforeUpdate(profile, delta, any, anyMod);\n+        return super.beforeUpdate(profile, delta, any, anyPatch);\n     }\n \n     /**\n-     * Build UserMod for adding membership to given user, for given group.\n+     * Build UserPatch for adding membership to given user, for given group.\n      *\n      * @param userKey user to be assigned membership to given group\n      * @param groupTO group for adding membership\n-     * @return UserMod for user update\n+     * @return UserPatch for user update\n      */\n-    protected UserMod getUserMod(final Long userKey, final GroupTO groupTO) {\n-        UserMod userMod = new UserMod();\n+    protected UserPatch getUserPatch(final Long userKey, final GroupTO groupTO) {\n+        UserPatch userPatch = new UserPatch();\n         // no actual modification takes place when user has already the group assigned\n         if (membersBeforeGroupUpdate.containsKey(userKey)) {\n             membersBeforeGroupUpdate.remove(userKey);\n         } else {\n-            userMod.setKey(userKey);\n-            userMod.getMembershipsToAdd().add(groupTO.getKey());\n+            userPatch.setKey(userKey);\n+\n+            userPatch.getMemberships().add(\n+                    new MembershipPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).\n+                    membershipTO(new MembershipTO.Builder().group(groupTO.getKey(), null).build()).\n+                    build());\n         }\n \n-        return userMod;\n+        return userPatch;\n     }\n \n     /**\n@@ -200,20 +208,20 @@ protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector\n     /**\n      * Perform actual modifications (i.e. membership add / remove) for the given group on the given resource.\n      *\n-     * @param userMod modifications to perform on the user\n+     * @param userPatch modifications to perform on the user\n      * @param resourceName resource to be propagated for changes\n      */\n-    protected void userUpdate(final UserMod userMod, final String resourceName) {\n-        if (userMod.getKey() == 0) {\n+    protected void userUpdate(final UserPatch userPatch, final String resourceName) {\n+        if (userPatch.getKey() == 0) {\n             return;\n         }\n \n         Result result;\n \n-        WorkflowResult<Pair<UserMod, Boolean>> updated = null;\n+        WorkflowResult<Pair<UserPatch, Boolean>> updated = null;\n \n         try {\n-            updated = uwfAdapter.update(userMod);\n+            updated = uwfAdapter.update(userPatch);\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                     updated, false, Collections.singleton(resourceName));\n@@ -222,10 +230,10 @@ protected void userUpdate(final UserMod userMod, final String resourceName) {\n             result = Result.SUCCESS;\n         } catch (PropagationException e) {\n             result = Result.FAILURE;\n-            LOG.error(\"Could not propagate {}\", userMod, e);\n+            LOG.error(\"Could not propagate {}\", userPatch, e);\n         } catch (Exception e) {\n             result = Result.FAILURE;\n-            LOG.error(\"Could not perform update {}\", userMod, e);\n+            LOG.error(\"Could not perform update {}\", userPatch, e);\n         }\n \n         notificationManager.createTasks(\n@@ -236,7 +244,7 @@ protected void userUpdate(final UserMod userMod, final String resourceName) {\n                 result,\n                 null, // searching for before object is too much expensive ... \n                 updated == null ? null : updated.getResult().getKey(),\n-                userMod,\n+                userPatch,\n                 resourceName);\n \n         auditManager.audit(\n@@ -247,7 +255,7 @@ protected void userUpdate(final UserMod userMod, final String resourceName) {\n                 result,\n                 null, // searching for before object is too much expensive ... \n                 updated == null ? null : updated.getResult().getKey(),\n-                userMod,\n+                userPatch,\n                 resourceName);\n     }\n \n@@ -274,17 +282,23 @@ protected void synchronizeMemberships(\n                     profile.getTask().getResource(),\n                     profile.getConnector());\n             if (userKey != null) {\n-                UserMod userMod = getUserMod(userKey, groupTO);\n-                userUpdate(userMod, resource.getKey());\n+                UserPatch userPatch = getUserPatch(userKey, groupTO);\n+                userUpdate(userPatch, resource.getKey());\n             }\n         }\n \n         // finally remove any residual membership that was present before group update but not any more\n         for (Map.Entry<Long, Long> member : membersBeforeGroupUpdate.entrySet()) {\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(member.getKey());\n-            userMod.getMembershipsToRemove().add(member.getValue());\n-            userUpdate(userMod, resource.getKey());\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(member.getKey());\n+\n+            userPatch.getMemberships().add(\n+                    new MembershipPatch.Builder().\n+                    operation(PatchOperation.DELETE).\n+                    membershipTO(new MembershipTO.Builder().group(groupTO.getKey(), null).build()).\n+                    build());\n+\n+            userUpdate(userPatch, resource.getKey());\n         }\n     }\n "},{"sha":"c58537eede07c9719b9bea9c48bce89df820e055","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPPasswordSyncActions.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -68,15 +69,15 @@ public <A extends AnyTO> SyncDelta beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final A any,\n-            final M anyMod) throws JobExecutionException {\n+            final M anyPatch) throws JobExecutionException {\n \n-        if (anyMod instanceof UserMod) {\n-            String modPassword = ((UserMod) anyMod).getPassword();\n-            parseEncodedPassword(modPassword);\n+        if (anyPatch instanceof UserPatch) {\n+            PasswordPatch modPassword = ((UserPatch) anyPatch).getPassword();\n+            parseEncodedPassword(modPassword == null ? null : modPassword.getValue());\n         }\n \n         return delta;"},{"sha":"12d1eb68eb37f9af21898cce285af540e4a3c13b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserPushResultHandlerImpl.java","status":"modified","additions":25,"deletions":19,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,10 +21,12 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -80,35 +82,39 @@ protected AnyUtils getAnyUtils() {\n \n     @Override\n     protected Any<?, ?, ?> link(final Any<?, ?, ?> sbj, final Boolean unlink) {\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(sbj.getKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(sbj.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n \n-        if (unlink) {\n-            userMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        } else {\n-            userMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        }\n-\n-        uwfAdapter.update(userMod);\n+        uwfAdapter.update(userPatch);\n \n-        return userDAO.authFind(userMod.getKey());\n+        return userDAO.authFind(userPatch.getKey());\n     }\n \n     @Override\n     protected Any<?, ?, ?> unassign(final Any<?, ?, ?> sbj) {\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(sbj.getKey());\n-        userMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        uwfAdapter.update(userMod);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(sbj.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.DELETE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        uwfAdapter.update(userPatch);\n+\n         return deprovision(sbj);\n     }\n \n     @Override\n     protected Any<?, ?, ?> assign(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(sbj.getKey());\n-        userMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        uwfAdapter.update(userMod);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(sbj.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n+        uwfAdapter.update(userPatch);\n+\n         return provision(sbj, enabled);\n     }\n "},{"sha":"5205c0d7e70583b35774462dfbff7c167bd1a9b4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,12 +21,14 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.UserSyncResultHandler;\n@@ -74,29 +76,26 @@ protected AnyTO doLink(\n             final ProvisioningResult result,\n             final boolean unlink) {\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(before.getKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(before.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n \n-        if (unlink) {\n-            userMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n-        } else {\n-            userMod.getResourcesToAdd().add(profile.getTask().getResource().getKey());\n-        }\n-\n-        return userDataBinder.getUserTO(uwfAdapter.update(userMod).getResult().getKey().getKey());\n+        return userDataBinder.getUserTO(uwfAdapter.update(userPatch).getResult().getKey().getKey());\n     }\n \n     @Override\n     protected AnyTO doUpdate(\n             final AnyTO before,\n-            final AnyMod anyMod,\n+            final AnyPatch anyPatch,\n             final SyncDelta delta,\n             final ProvisioningResult result) {\n \n-        UserMod userMod = UserMod.class.cast(anyMod);\n+        UserPatch userPatch = UserPatch.class.cast(anyPatch);\n         Boolean enabled = syncUtilities.readEnabled(delta.getObject(), profile.getTask());\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = userProvisioningManager.update(userMod, before.getKey(),\n+        Map.Entry<Long, List<PropagationStatus>> updated = userProvisioningManager.update(userPatch, before.getKey(),\n                 result, enabled, Collections.singleton(profile.getTask().getResource().getKey()));\n \n         return userDataBinder.getUserTO(updated.getKey());\n@@ -111,9 +110,11 @@ protected void doDeprovision(\n                 key, Collections.singleton(profile.getTask().getResource().getKey())));\n \n         if (unlink) {\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(key);\n-            userMod.getResourcesToRemove().add(profile.getTask().getResource().getKey());\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(key);\n+            userPatch.getResources().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.DELETE).\n+                    value(profile.getTask().getResource().getKey()).build());\n         }\n     }\n "},{"sha":"fff8469450ea89956934e8d98a9c9e176cbc3e11","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -90,7 +90,7 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, R\n \n     @Override\n     public Response toResponse(final Exception ex) {\n-        LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\n+        LOG.error(\"Exception thrown\", ex);\n \n         ResponseBuilder builder;\n "},{"sha":"9fb9252b6d1099eff7bf0b40439c7be4e2853a2c","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":62,"deletions":55,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,36 +18,36 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n-import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.AssociationPatch;\n+import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n import org.apache.syncope.common.rest.api.beans.AnySearchQuery;\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n-public abstract class AbstractAnyService<TO extends AnyTO, MOD extends AnyMod>\n+public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>\n         extends AbstractServiceImpl\n-        implements AnyService<TO, MOD> {\n+        implements AnyService<TO, P> {\n \n-    protected abstract AbstractAnyLogic<TO, MOD> getAnyLogic();\n+    protected abstract AbstractAnyLogic<TO, P> getAnyLogic();\n \n     @Override\n     public TO read(final Long key) {\n@@ -107,12 +107,23 @@ public Response create(final TO anyTO) {\n     }\n \n     @Override\n-    public Response update(final MOD anyMod) {\n-        TO any = getAnyLogic().read(anyMod.getKey());\n+    public Response update(final P anyPatch) {\n+        TO any = getAnyLogic().read(anyPatch.getKey());\n \n         checkETag(any.getETagValue());\n \n-        TO updated = getAnyLogic().update(anyMod);\n+        TO updated = getAnyLogic().update(anyPatch);\n+        return modificationResponse(updated);\n+    }\n+\n+    @Override\n+    public Response update(final TO anyTO) {\n+        TO before = getAnyLogic().read(anyTO.getKey());\n+\n+        checkETag(before.getETagValue());\n+\n+        @SuppressWarnings(\"unchecked\")\n+        TO updated = getAnyLogic().update((P) AnyOperations.diff(anyTO, before, false));\n         return modificationResponse(updated);\n     }\n \n@@ -127,37 +138,35 @@ public Response delete(final Long key) {\n     }\n \n     @Override\n-    public Response deassociate(\n-            final Long key, final ResourceDeassociationActionType type, final List<ResourceKey> resourceNames) {\n-\n-        TO any = getAnyLogic().read(key);\n+    public Response deassociate(final DeassociationPatch patch) {\n+        TO any = getAnyLogic().read(patch.getKey());\n \n         checkETag(any.getETagValue());\n \n         TO updated;\n-        switch (type) {\n+        switch (patch.getAction()) {\n             case UNLINK:\n-                updated = getAnyLogic().unlink(key, CollectionWrapper.unwrap(resourceNames));\n+                updated = getAnyLogic().unlink(patch.getKey(), patch.getResources());\n                 break;\n \n             case UNASSIGN:\n-                updated = getAnyLogic().unassign(key, CollectionWrapper.unwrap(resourceNames));\n+                updated = getAnyLogic().unassign(patch.getKey(), patch.getResources());\n                 break;\n \n             case DEPROVISION:\n-                updated = getAnyLogic().deprovision(key, CollectionWrapper.unwrap(resourceNames));\n+                updated = getAnyLogic().deprovision(patch.getKey(), patch.getResources());\n                 break;\n \n             default:\n-                updated = getAnyLogic().read(key);\n+                updated = getAnyLogic().read(patch.getKey());\n         }\n \n         BulkActionResult result = new BulkActionResult();\n \n-        if (type == ResourceDeassociationActionType.UNLINK) {\n-            for (ResourceKey resourceName : resourceNames) {\n-                result.getResults().put(resourceName.getElement(),\n-                        updated.getResources().contains(resourceName.getElement())\n+        if (patch.getAction() == ResourceDeassociationAction.UNLINK) {\n+            for (String resource : patch.getResources()) {\n+                result.getResults().put(resource,\n+                        updated.getResources().contains(resource)\n                                 ? BulkActionResult.Status.FAILURE\n                                 : BulkActionResult.Status.SUCCESS);\n             }\n@@ -172,47 +181,45 @@ public Response deassociate(\n     }\n \n     @Override\n-    public Response associate(\n-            final Long key, final ResourceAssociationAction type, final ResourceAssociationMod associationMod) {\n-\n-        TO any = getAnyLogic().read(key);\n+    public Response associate(final AssociationPatch patch) {\n+        TO any = getAnyLogic().read(patch.getKey());\n \n         checkETag(any.getETagValue());\n \n         TO updated;\n-        switch (type) {\n+        switch (patch.getAction()) {\n             case LINK:\n                 updated = getAnyLogic().link(\n-                        key,\n-                        CollectionWrapper.unwrap(associationMod.getTargetResources()));\n+                        patch.getKey(),\n+                        patch.getResources());\n                 break;\n \n             case ASSIGN:\n                 updated = getAnyLogic().assign(\n-                        key,\n-                        CollectionWrapper.unwrap(associationMod.getTargetResources()),\n-                        associationMod.isChangePwd(),\n-                        associationMod.getPassword());\n+                        patch.getKey(),\n+                        patch.getResources(),\n+                        patch.getValue() != null,\n+                        patch.getValue());\n                 break;\n \n             case PROVISION:\n                 updated = getAnyLogic().provision(\n-                        key,\n-                        CollectionWrapper.unwrap(associationMod.getTargetResources()),\n-                        associationMod.isChangePwd(),\n-                        associationMod.getPassword());\n+                        patch.getKey(),\n+                        patch.getResources(),\n+                        patch.getValue() != null,\n+                        patch.getValue());\n                 break;\n \n             default:\n-                updated = getAnyLogic().read(key);\n+                updated = getAnyLogic().read(patch.getKey());\n         }\n \n         BulkActionResult result = new BulkActionResult();\n \n-        if (type == ResourceAssociationAction.LINK) {\n-            for (ResourceKey resourceName : associationMod.getTargetResources()) {\n-                result.getResults().put(resourceName.getElement(),\n-                        updated.getResources().contains(resourceName.getElement())\n+        if (patch.getAction() == ResourceAssociationAction.LINK) {\n+            for (String resource : patch.getResources()) {\n+                result.getResults().put(resource,\n+                        updated.getResources().contains(resource)\n                                 ? BulkActionResult.Status.FAILURE\n                                 : BulkActionResult.Status.SUCCESS);\n             }\n@@ -228,7 +235,7 @@ public Response associate(\n \n     @Override\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n-        AbstractAnyLogic<TO, MOD> logic = getAnyLogic();\n+        AbstractAnyLogic<TO, P> logic = getAnyLogic();\n \n         BulkActionResult result = new BulkActionResult();\n \n@@ -249,12 +256,12 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n             case SUSPEND:\n                 if (logic instanceof UserLogic) {\n                     for (String key : bulkAction.getTargets()) {\n-                        StatusMod statusMod = new StatusMod();\n-                        statusMod.setKey(Long.valueOf(key));\n-                        statusMod.setType(StatusMod.ModType.SUSPEND);\n+                        StatusPatch statusPatch = new StatusPatch();\n+                        statusPatch.setKey(Long.valueOf(key));\n+                        statusPatch.setType(StatusPatchType.SUSPEND);\n                         try {\n                             result.getResults().put(\n-                                    String.valueOf(((UserLogic) logic).status(statusMod).getKey()),\n+                                    String.valueOf(((UserLogic) logic).status(statusPatch).getKey()),\n                                     BulkActionResult.Status.SUCCESS);\n                         } catch (Exception e) {\n                             LOG.error(\"Error performing suspend for user {}\", key, e);\n@@ -266,12 +273,12 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n \n             case REACTIVATE:\n                 for (String key : bulkAction.getTargets()) {\n-                    StatusMod statusMod = new StatusMod();\n-                    statusMod.setKey(Long.valueOf(key));\n-                    statusMod.setType(StatusMod.ModType.REACTIVATE);\n+                    StatusPatch statusPatch = new StatusPatch();\n+                    statusPatch.setKey(Long.valueOf(key));\n+                    statusPatch.setType(StatusPatchType.REACTIVATE);\n                     try {\n                         result.getResults().put(\n-                                String.valueOf(((UserLogic) logic).status(statusMod).getKey()),\n+                                String.valueOf(((UserLogic) logic).status(statusPatch).getKey()),\n                                 BulkActionResult.Status.SUCCESS);\n                     } catch (Exception e) {\n                         LOG.error(\"Error performing reactivate for user {}\", key, e);"},{"sha":"4a57cbdd7a769d5a4a0bd10250ef4a0dffd06981","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -22,7 +22,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n@@ -33,13 +33,13 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObjectMod> implements AnyObjectService {\n+public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObjectPatch> implements AnyObjectService {\n \n     @Autowired\n     private AnyObjectLogic logic;\n \n     @Override\n-    protected AbstractAnyLogic<AnyObjectTO, AnyObjectMod> getAnyLogic() {\n+    protected AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> getAnyLogic() {\n         return logic;\n     }\n "},{"sha":"a97082709aa846b3a0c399be9529e034f2ad693b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConnectorServiceImpl.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConnectorServiceImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -30,7 +30,6 @@\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n-import org.apache.syncope.common.lib.wrap.BooleanWrap;\n import org.apache.syncope.common.lib.wrap.ConnIdObjectClass;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -117,10 +116,8 @@ public void update(final ConnInstanceTO connInstanceTO) {\n     }\n \n     @Override\n-    public BooleanWrap check(final ConnInstanceTO connInstanceTO) {\n-        BooleanWrap result = new BooleanWrap();\n-        result.setElement(logic.check(connInstanceTO));\n-        return result;\n+    public void check(final ConnInstanceTO connInstanceTO) {\n+        logic.check(connInstanceTO);\n     }\n \n     @Override"},{"sha":"929b1fa70284b0387ae4c36c73880f76e10960b6","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n@@ -28,13 +28,13 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupMod> implements GroupService {\n+public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupPatch> implements GroupService {\n \n     @Autowired\n     private GroupLogic logic;\n \n     @Override\n-    protected AbstractAnyLogic<GroupTO, GroupMod> getAnyLogic() {\n+    protected AbstractAnyLogic<GroupTO, GroupPatch> getAnyLogic() {\n         return logic;\n     }\n "},{"sha":"2cc6476453dd9bcb14b588776b786e18f4f998df","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -35,9 +35,8 @@\n import org.apache.syncope.common.lib.to.PagedConnObjectTOResult;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.wrap.AnyKey;\n-import org.apache.syncope.common.lib.wrap.BooleanWrap;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -130,15 +129,13 @@ public PagedConnObjectTOResult listConnObjects(\n     }\n \n     @Override\n-    public BooleanWrap check(final ResourceTO resourceTO) {\n-        BooleanWrap result = new BooleanWrap();\n-        result.setElement(logic.check(resourceTO));\n-        return result;\n+    public void check(final ResourceTO resourceTO) {\n+        logic.check(resourceTO);\n     }\n \n     @Override\n     public BulkActionResult bulkDeassociation(\n-            final String key, final String anyTypeKey, final ResourceDeassociationActionType type,\n+            final String key, final String anyTypeKey, final ResourceDeassociationAction type,\n             final List<AnyKey> keys) {\n \n         AbstractResourceAssociator<? extends AnyTO> associator = anyTypeKey.equalsIgnoreCase(AnyTypeKind.USER.name())"},{"sha":"ea69e69fba5b3e197cf7052c7a8eab1bc38b83fd","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,8 +20,9 @@\n \n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -63,11 +64,17 @@ public Response read() {\n     }\n \n     @Override\n-    public Response update(final UserMod userMod) {\n-        UserTO updated = logic.selfUpdate(userMod);\n+    public Response update(final UserPatch patch) {\n+        UserTO updated = logic.selfUpdate(patch);\n         return modificationResponse(updated);\n     }\n \n+    @Override\n+    public Response update(final UserTO user) {\n+        Pair<String, UserTO> self = logic.readSelf();\n+        return update(AnyOperations.diff(user, self.getValue(), false));\n+    }\n+\n     @Override\n     public Response delete() {\n         UserTO deleted = logic.selfDelete();"},{"sha":"1770b411e78da576443f42217f00cca7e1c564a3","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,8 +20,8 @@\n \n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -31,13 +31,13 @@\n import org.springframework.stereotype.Service;\n \n @Service\n-public class UserServiceImpl extends AbstractAnyService<UserTO, UserMod> implements UserService {\n+public class UserServiceImpl extends AbstractAnyService<UserTO, UserPatch> implements UserService {\n \n     @Autowired\n     private UserLogic logic;\n \n     @Override\n-    protected AbstractAnyLogic<UserTO, UserMod> getAnyLogic() {\n+    protected AbstractAnyLogic<UserTO, UserPatch> getAnyLogic() {\n         return logic;\n     }\n \n@@ -62,12 +62,12 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n     }\n \n     @Override\n-    public Response status(final StatusMod statusMod) {\n-        UserTO user = logic.read(statusMod.getKey());\n+    public Response status(final StatusPatch statusPatch) {\n+        UserTO user = logic.read(statusPatch.getKey());\n \n         checkETag(user.getETagValue());\n \n-        UserTO updated = logic.status(statusMod);\n+        UserTO updated = logic.status(statusPatch);\n         return modificationResponse(updated);\n     }\n }"},{"sha":"6b4f8382f9f1b9fb00a39227bded0d4b81850d34","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":19,"deletions":23,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -56,8 +56,8 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n@@ -100,7 +100,7 @@ public class ActivitiUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n     public static final String ENABLED = \"enabled\";\n \n-    public static final String USER_MOD = \"userMod\";\n+    public static final String USER_PATCH = \"userPatch\";\n \n     public static final String EMAIL_KIND = \"emailKind\";\n \n@@ -320,24 +320,25 @@ protected WorkflowResult<Long> doActivate(final User user, final String token) {\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserMod, Boolean>> doUpdate(final User user, final UserMod userMod) {\n-        Set<String> tasks = doExecuteTask(user, \"update\", Collections.singletonMap(USER_MOD, (Object) userMod));\n+    protected WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(final User user, final UserPatch userPatch) {\n+        Set<String> tasks = doExecuteTask(user, \"update\", Collections.singletonMap(USER_PATCH, (Object) userPatch));\n \n         updateStatus(user);\n         User updated = userDAO.save(user);\n \n         PropagationByResource propByRes = engine.getRuntimeService().getVariable(\n                 user.getWorkflowId(), PROP_BY_RESOURCE, PropagationByResource.class);\n-        UserMod updatedMod = engine.getRuntimeService().getVariable(\n-                user.getWorkflowId(), USER_MOD, UserMod.class);\n+        UserPatch updatedPatch = engine.getRuntimeService().getVariable(\n+                user.getWorkflowId(), USER_PATCH, UserPatch.class);\n \n-        saveForFormSubmit(updated, updatedMod.getPassword(), propByRes);\n+        saveForFormSubmit(\n+                updated, updatedPatch.getPassword() == null ? null : updatedPatch.getPassword().getValue(), propByRes);\n \n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 user.getWorkflowId(), PROPAGATE_ENABLE, Boolean.class);\n \n-        return new WorkflowResult<Pair<UserMod, Boolean>>(\n-                new ImmutablePair<>(updatedMod, propagateEnable), propByRes, tasks);\n+        return new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                new ImmutablePair<>(updatedPatch, propagateEnable), propByRes, tasks);\n     }\n \n     @Override\n@@ -793,7 +794,7 @@ public WorkflowFormTO claimForm(final String taskId) {\n     }\n \n     @Override\n-    public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form) {\n+    public WorkflowResult<UserPatch> submitForm(final WorkflowFormTO form) {\n         String authUser = AuthContextUtils.getUsername();\n         Pair<Task, TaskFormData> checked = checkTask(form.getTaskId(), authUser);\n \n@@ -836,22 +837,17 @@ public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form) {\n         // supports approval chains\n         saveForFormSubmit(user, clearPassword, propByRes);\n \n-        UserMod userMod = engine.getRuntimeService().getVariable(user.getWorkflowId(), USER_MOD, UserMod.class);\n-        if (userMod == null) {\n-            userMod = new UserMod();\n-            userMod.setKey(updated.getKey());\n-            userMod.setPassword(clearPassword);\n+        UserPatch userPatch = engine.getRuntimeService().getVariable(user.getWorkflowId(), USER_PATCH, UserPatch.class);\n+        if (userPatch == null) {\n+            userPatch = new UserPatch();\n+            userPatch.setKey(updated.getKey());\n+            userPatch.setPassword(new PasswordPatch.Builder().onSyncope(true).value(clearPassword).build());\n \n             if (propByRes != null) {\n-                StatusMod st = new StatusMod();\n-                userMod.setPwdPropRequest(st);\n-                st.setOnSyncope(true);\n-                for (String res : propByRes.get(ResourceOperation.CREATE)) {\n-                    st.getResources().add(res);\n-                }\n+                userPatch.getPassword().getResources().addAll(propByRes.get(ResourceOperation.CREATE));\n             }\n         }\n \n-        return new WorkflowResult<>(userMod, propByRes, postTasks);\n+        return new WorkflowResult<>(userPatch, propByRes, postTasks);\n     }\n }"},{"sha":"21498ac935ba9830219a8a8862ec20eca32e9370","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/Update.java","status":"modified","additions":18,"deletions":11,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FUpdate.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.core.workflow.activiti.task;\n \n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n@@ -37,23 +38,29 @@ public class Update extends AbstractActivitiServiceTask {\n     protected void doExecute(final String executionId) {\n         User user = engine.getRuntimeService().\n                 getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n-        UserMod userMod =\n-                engine.getRuntimeService().\n-                getVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, UserMod.class);\n+        UserPatch userPatch = engine.getRuntimeService().\n+                getVariable(executionId, ActivitiUserWorkflowAdapter.USER_PATCH, UserPatch.class);\n \n         // update password internally only if required\n-        UserMod updatedMod = SerializationUtils.clone(userMod);\n-        String updatedPwd = updatedMod.getPassword();\n-        if (updatedMod.getPwdPropRequest() != null && !updatedMod.getPwdPropRequest().isOnSyncope()) {\n-            updatedMod.setPassword(null);\n+        UserPatch updatedPatch = SerializationUtils.clone(userPatch);\n+        PasswordPatch updatedPwd = updatedPatch.getPassword();\n+        if (updatedPatch.getPassword() != null && !updatedPatch.getPassword().isOnSyncope()) {\n+            updatedPatch.setPassword(null);\n         }\n         // update user\n-        PropagationByResource propByRes = dataBinder.update(user, updatedMod);\n-        updatedMod.setPassword(updatedPwd);\n+        PropagationByResource propByRes = dataBinder.update(user, updatedPatch);\n+        if (updatedPatch.getPassword() != null && !updatedPatch.getPassword().getResources().isEmpty()) {\n+            if (updatedPwd == null) {\n+                updatedPwd = updatedPatch.getPassword();\n+            } else {\n+                updatedPwd.getResources().addAll(updatedPatch.getPassword().getResources());\n+            }\n+        }\n+        updatedPatch.setPassword(updatedPwd);\n \n         // report updated user and propagation by resource as result\n         engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n-        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER_MOD, updatedMod);\n+        engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER_PATCH, updatedPatch);\n         engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.PROP_BY_RESOURCE, propByRes);\n     }\n }"},{"sha":"2a05443e7fcbe29271d6e35e4602a9bac1ea5232","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/AnyObjectWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FAnyObjectWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n \n /**\n@@ -47,10 +47,10 @@ public interface AnyObjectWorkflowAdapter extends WorkflowAdapter {\n     /**\n      * Update a anyObject.\n      *\n-     * @param anyObjectMod modification set to be performed\n+     * @param anyObjectPatch modification set to be performed\n      * @return anyObject just updated and propagations to be performed\n      */\n-    WorkflowResult<Long> update(AnyObjectMod anyObjectMod);\n+    WorkflowResult<Long> update(AnyObjectPatch anyObjectPatch);\n \n     /**\n      * Delete a anyObject."},{"sha":"04f7f17f19993fd4c8d19f406024e8814e390b9f","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/GroupWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FGroupWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n import org.apache.syncope.common.lib.to.GroupTO;\n \n /**\n@@ -47,10 +47,10 @@ public interface GroupWorkflowAdapter extends WorkflowAdapter {\n     /**\n      * Update a group.\n      *\n-     * @param groupMod modification set to be performed\n+     * @param groupPatch modification set to be performed\n      * @return group just updated and propagations to be performed\n      */\n-    WorkflowResult<Long> update(GroupMod groupMod);\n+    WorkflowResult<Long> update(GroupPatch groupPatch);\n \n     /**\n      * Delete a group."},{"sha":"51c3e775fb3b48ff1c04f42aba8ac60d6cc738b5","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/UserWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.workflow.api;\n \n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n-import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.UserTO;\n \n /**\n@@ -81,10 +81,10 @@ WorkflowResult<Pair<Long, Boolean>> create(\n     /**\n      * Update an user.\n      *\n-     * @param userMod modification set to be performed\n+     * @param userPatch modification set to be performed\n      * @return user just updated and propagations to be performed\n      */\n-    WorkflowResult<Pair<UserMod, Boolean>> update(UserMod userMod);\n+    WorkflowResult<Pair<UserPatch, Boolean>> update(UserPatch userPatch);\n \n     /**\n      * Suspend an user."},{"sha":"fa05f091720c180e031082864c4a4b63d0aa3f14","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/WorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import java.io.OutputStream;\n import java.util.List;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n \n public interface WorkflowAdapter {\n \n@@ -92,5 +92,5 @@ public interface WorkflowAdapter {\n      * @param form to be submitted\n      * @return object updated by this form submit\n      */\n-    WorkflowResult<? extends AnyMod> submitForm(WorkflowFormTO form);\n+    WorkflowResult<? extends AnyPatch> submitForm(WorkflowFormTO form);\n }"},{"sha":"d124051529cd031c98d20fd2a2c20340451515e5","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractAnyObjectWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -46,11 +46,11 @@ public String getPrefix() {\n         return null;\n     }\n \n-    protected abstract WorkflowResult<Long> doUpdate(AnyObject anyObject, AnyObjectMod anyObjectMod);\n+    protected abstract WorkflowResult<Long> doUpdate(AnyObject anyObject, AnyObjectPatch anyObjectPatch);\n \n     @Override\n-    public WorkflowResult<Long> update(final AnyObjectMod anyObjectMod) {\n-        return doUpdate(anyObjectDAO.authFind(anyObjectMod.getKey()), anyObjectMod);\n+    public WorkflowResult<Long> update(final AnyObjectPatch anyObjectPatch) {\n+        return doUpdate(anyObjectDAO.authFind(anyObjectPatch.getKey()), anyObjectPatch);\n     }\n \n     protected abstract void doDelete(AnyObject anyObject);"},{"sha":"50e96fe5c9b6e0db7cebc60d582c9be59cb5d89f","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractGroupWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractGroupWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -46,11 +46,11 @@ public String getPrefix() {\n         return null;\n     }\n \n-    protected abstract WorkflowResult<Long> doUpdate(Group group, GroupMod groupMod);\n+    protected abstract WorkflowResult<Long> doUpdate(Group group, GroupPatch groupPatch);\n \n     @Override\n-    public WorkflowResult<Long> update(final GroupMod groupMod) {\n-        return doUpdate(groupDAO.authFind(groupMod.getKey()), groupMod);\n+    public WorkflowResult<Long> update(final GroupPatch groupPatch) {\n+        return doUpdate(groupDAO.authFind(groupPatch.getKey()), groupPatch);\n     }\n \n     protected abstract void doDelete(Group group);"},{"sha":"4236cffc39db4e4921f0810907408b9fdf5fd208","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -71,11 +71,11 @@ public WorkflowResult<Long> activate(final Long key, final String token) {\n         return doActivate(userDAO.authFind(key), token);\n     }\n \n-    protected abstract WorkflowResult<Pair<UserMod, Boolean>> doUpdate(User user, UserMod userMod);\n+    protected abstract WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(User user, UserPatch userPatch);\n \n     @Override\n-    public WorkflowResult<Pair<UserMod, Boolean>> update(final UserMod userMod) {\n-        return doUpdate(userDAO.authFind(userMod.getKey()), userMod);\n+    public WorkflowResult<Pair<UserPatch, Boolean>> update(final UserPatch userPatch) {\n+        return doUpdate(userDAO.authFind(userPatch.getKey()), userPatch);\n     }\n \n     protected abstract WorkflowResult<Long> doSuspend(User user);"},{"sha":"36b2d658a323b0168ca0b709efd4424122da9c81","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,7 +21,7 @@\n import java.io.OutputStream;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n@@ -51,8 +51,8 @@ public WorkflowResult<Long> create(final AnyObjectTO anyObjectTO) {\n     }\n \n     @Override\n-    protected WorkflowResult<Long> doUpdate(final AnyObject anyObject, final AnyObjectMod anyObjectMod) {\n-        PropagationByResource propByRes = dataBinder.update(anyObject, anyObjectMod);\n+    protected WorkflowResult<Long> doUpdate(final AnyObject anyObject, final AnyObjectPatch anyObjectPatch) {\n+        PropagationByResource propByRes = dataBinder.update(anyObject, anyObjectPatch);\n \n         AnyObject updated = anyObjectDAO.save(anyObject);\n \n@@ -105,7 +105,7 @@ public WorkflowFormTO claimForm(final String taskId) {\n     }\n \n     @Override\n-    public WorkflowResult<AnyObjectMod> submitForm(final WorkflowFormTO form) {\n+    public WorkflowResult<AnyObjectPatch> submitForm(final WorkflowFormTO form) {\n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n "},{"sha":"12173c1d6f028ad9560c9a92392dc17b1ecdce72","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,7 +21,7 @@\n import java.io.OutputStream;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n@@ -51,8 +51,8 @@ public WorkflowResult<Long> create(final GroupTO groupTO) {\n     }\n \n     @Override\n-    protected WorkflowResult<Long> doUpdate(final Group group, final GroupMod groupMod) {\n-        PropagationByResource propByRes = dataBinder.update(group, groupMod);\n+    protected WorkflowResult<Long> doUpdate(final Group group, final GroupPatch groupPatch) {\n+        PropagationByResource propByRes = dataBinder.update(group, groupPatch);\n \n         Group updated = groupDAO.save(group);\n \n@@ -105,7 +105,7 @@ public WorkflowFormTO claimForm(final String taskId) {\n     }\n \n     @Override\n-    public WorkflowResult<GroupMod> submitForm(final WorkflowFormTO form) {\n+    public WorkflowResult<GroupPatch> submitForm(final WorkflowFormTO form) {\n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n "},{"sha":"1d70394ac8a116b79f1bfe395c4a22d36c928712","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":19,"deletions":11,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,7 +24,8 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n@@ -105,21 +106,28 @@ protected WorkflowResult<Long> doActivate(final User user, final String token) {\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserMod, Boolean>> doUpdate(final User user, final UserMod userMod) {\n+    protected WorkflowResult<Pair<UserPatch, Boolean>> doUpdate(final User user, final UserPatch userPatch) {\n         // update password internally only if required\n-        UserMod updatedMod = SerializationUtils.clone(userMod);\n-        String updatedPwd = updatedMod.getPassword();\n-        if (updatedMod.getPwdPropRequest() != null && !updatedMod.getPwdPropRequest().isOnSyncope()) {\n-            updatedMod.setPassword(null);\n+        UserPatch updatedPatch = SerializationUtils.clone(userPatch);\n+        PasswordPatch updatedPwd = updatedPatch.getPassword();\n+        if (updatedPatch.getPassword() != null && !updatedPatch.getPassword().isOnSyncope()) {\n+            updatedPatch.setPassword(null);\n         }\n         // update User\n-        PropagationByResource propByRes = dataBinder.update(user, updatedMod);\n-        updatedMod.setPassword(updatedPwd);\n+        PropagationByResource propByRes = dataBinder.update(user, updatedPatch);\n+        if (updatedPatch.getPassword() != null && !updatedPatch.getPassword().getResources().isEmpty()) {\n+            if (updatedPwd == null) {\n+                updatedPwd = updatedPatch.getPassword();\n+            } else {\n+                updatedPwd.getResources().addAll(updatedPatch.getPassword().getResources());\n+            }\n+        }\n+        updatedPatch.setPassword(updatedPwd);\n \n         userDAO.save(user);\n \n-        return new WorkflowResult<Pair<UserMod, Boolean>>(\n-                new ImmutablePair<>(updatedMod, !user.isSuspended()), propByRes, \"update\");\n+        return new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                new ImmutablePair<>(updatedPatch, !user.isSuspended()), propByRes, \"update\");\n     }\n \n     @Override\n@@ -203,7 +211,7 @@ public WorkflowFormTO claimForm(final String taskId) {\n     }\n \n     @Override\n-    public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form) {\n+    public WorkflowResult<UserPatch> submitForm(final WorkflowFormTO form) {\n         throw new WorkflowException(new UnsupportedOperationException(\"Not supported.\"));\n     }\n "},{"sha":"4ba890a043952aa8cff80c773451f2e8d1c086d9","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelAnyObjectProvisioningManager.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelAnyObjectProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -27,7 +27,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n@@ -62,21 +62,21 @@ public Pair<Long, List<PropagationStatus>> create(\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final AnyObjectMod anyMod) {\n-        return update(anyMod, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final AnyObjectPatch anyPatch) {\n+        return update(anyPatch, Collections.<String>emptySet());\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> update(\n-            final AnyObjectMod anyMod, final Set<String> excludedResources) {\n+            final AnyObjectPatch anyPatch, final Set<String> excludedResources) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateAnyObjectPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n \n-        sendMessage(\"direct:updateAnyObject\", anyMod, props);\n+        sendMessage(\"direct:updateAnyObject\", anyPatch, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -112,10 +112,10 @@ public List<PropagationStatus> delete(final Long anyObjectKey, final Set<String>\n     }\n \n     @Override\n-    public Long unlink(final AnyObjectMod anyObjectMod) {\n+    public Long unlink(final AnyObjectPatch anyObjectPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkAnyObjectPort\");\n \n-        sendMessage(\"direct:unlinkAnyObject\", anyObjectMod);\n+        sendMessage(\"direct:unlinkAnyObject\", anyObjectPatch);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -127,10 +127,10 @@ public Long unlink(final AnyObjectMod anyObjectMod) {\n     }\n \n     @Override\n-    public Long link(final AnyObjectMod anyObjectMod) {\n+    public Long link(final AnyObjectPatch anyObjectPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:linkAnyObjectPort\");\n \n-        sendMessage(\"direct:linkAnyObject\", anyObjectMod);\n+        sendMessage(\"direct:linkAnyObject\", anyObjectPatch);\n \n         Exchange exchange = pollingConsumer.receive();\n "},{"sha":"ea022bbeb0bf1899ef1050dc8a306994c97502f3","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelGroupProvisioningManager.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelGroupProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -27,7 +27,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n@@ -82,21 +82,21 @@ public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final M\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final GroupMod anyMod) {\n-        return update(anyMod, Collections.<String>emptySet());\n+    public Pair<Long, List<PropagationStatus>> update(final GroupPatch anyPatch) {\n+        return update(anyPatch, Collections.<String>emptySet());\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> update(\n-            final GroupMod anyMod, final Set<String> excludedResources) {\n+            final GroupPatch anyPatch, final Set<String> excludedResources) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateGroupPort\");\n \n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n \n-        sendMessage(\"direct:updateGroup\", anyMod, props);\n+        sendMessage(\"direct:updateGroup\", anyPatch, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -132,10 +132,10 @@ public List<PropagationStatus> delete(final Long groupKey, final Set<String> exc\n     }\n \n     @Override\n-    public Long unlink(final GroupMod groupMod) {\n+    public Long unlink(final GroupPatch groupPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkGroupPort\");\n \n-        sendMessage(\"direct:unlinkGroup\", groupMod);\n+        sendMessage(\"direct:unlinkGroup\", groupPatch);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -147,10 +147,10 @@ public Long unlink(final GroupMod groupMod) {\n     }\n \n     @Override\n-    public Long link(final GroupMod groupMod) {\n+    public Long link(final GroupPatch groupPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:linkGroupPort\");\n \n-        sendMessage(\"direct:linkGroup\", groupMod);\n+        sendMessage(\"direct:linkGroup\", groupPatch);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -179,7 +179,7 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n \n         return exchange.getIn().getBody(List.class);\n     }\n-    \n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {"},{"sha":"436d80dc6f67153a8556a38b6719b05cf0f12289","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -29,8 +29,8 @@\n import org.apache.camel.PollingConsumer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n@@ -85,10 +85,10 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n+    public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:updatePort\");\n \n-        sendMessage(\"direct:updateUser\", userMod);\n+        sendMessage(\"direct:updateUser\", userPatch);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -100,8 +100,8 @@ public Pair<Long, List<PropagationStatus>> update(final UserMod userMod) {\n     }\n \n     @Override\n-    public Pair<Long, List<PropagationStatus>> update(final UserMod anyMod, final Set<String> excludedResources) {\n-        return update(anyMod, anyMod.getKey(), new ProvisioningResult(), null, excludedResources);\n+    public Pair<Long, List<PropagationStatus>> update(final UserPatch anyPatch, final Set<String> excludedResources) {\n+        return update(anyPatch, anyPatch.getKey(), new ProvisioningResult(), null, excludedResources);\n     }\n \n     @Override\n@@ -129,36 +129,36 @@ public List<PropagationStatus> delete(final Long userKey, final Set<String> excl\n     }\n \n     @Override\n-    public Long unlink(final UserMod userMod) {\n+    public Long unlink(final UserPatch userPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkPort\");\n \n-        sendMessage(\"direct:unlinkUser\", userMod);\n+        sendMessage(\"direct:unlinkUser\", userPatch);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        exchange.getIn().setBody((exchange.getIn().getBody(UserMod.class).getKey()));\n+        exchange.getIn().setBody((exchange.getIn().getBody(UserPatch.class).getKey()));\n         return exchange.getIn().getBody(Long.class);\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> activate(final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> activate(final StatusPatch statusPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"token\", statusMod.getToken());\n-        props.put(\"userKey\", statusMod.getKey());\n-        props.put(\"statusMod\", statusMod);\n+        props.put(\"token\", statusPatch.getToken());\n+        props.put(\"userKey\", statusPatch.getKey());\n+        props.put(\"statusPatch\", statusPatch);\n \n-        if (statusMod.isOnSyncope()) {\n-            sendMessage(\"direct:activateUser\", statusMod.getKey(), props);\n+        if (statusPatch.isOnSyncope()) {\n+            sendMessage(\"direct:activateUser\", statusPatch.getKey(), props);\n         } else {\n             WorkflowResult<Long> updated =\n-                    new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -173,18 +173,18 @@ public Pair<Long, List<PropagationStatus>> activate(final StatusMod statusMod) {\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> reactivate(final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> reactivate(final StatusPatch statusPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"userKey\", statusMod.getKey());\n-        props.put(\"statusMod\", statusMod);\n+        props.put(\"userKey\", statusPatch.getKey());\n+        props.put(\"statusPatch\", statusPatch);\n \n-        if (statusMod.isOnSyncope()) {\n-            sendMessage(\"direct:reactivateUser\", statusMod.getKey(), props);\n+        if (statusPatch.isOnSyncope()) {\n+            sendMessage(\"direct:reactivateUser\", statusPatch.getKey(), props);\n         } else {\n             WorkflowResult<Long> updated =\n-                    new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -199,18 +199,18 @@ public Pair<Long, List<PropagationStatus>> reactivate(final StatusMod statusMod)\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n-    public Pair<Long, List<PropagationStatus>> suspend(final StatusMod statusMod) {\n+    public Pair<Long, List<PropagationStatus>> suspend(final StatusPatch statusPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n \n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"userKey\", statusMod.getKey());\n-        props.put(\"statusMod\", statusMod);\n+        props.put(\"userKey\", statusPatch.getKey());\n+        props.put(\"statusPatch\", statusPatch);\n \n-        if (statusMod.isOnSyncope()) {\n-            sendMessage(\"direct:suspendUser\", statusMod.getKey(), props);\n+        if (statusPatch.isOnSyncope()) {\n+            sendMessage(\"direct:suspendUser\", statusPatch.getKey(), props);\n         } else {\n             WorkflowResult<Long> updated =\n-                    new WorkflowResult<>(statusMod.getKey(), null, statusMod.getType().name().toLowerCase());\n+                    new WorkflowResult<>(statusPatch.getKey(), null, statusPatch.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -224,18 +224,18 @@ public Pair<Long, List<PropagationStatus>> suspend(final StatusMod statusMod) {\n     }\n \n     @Override\n-    public Long link(final UserMod anyMod) {\n+    public Long link(final UserPatch anyPatch) {\n         PollingConsumer pollingConsumer = getConsumer(\"direct:linkPort\");\n \n-        sendMessage(\"direct:linkUser\", anyMod);\n+        sendMessage(\"direct:linkUser\", anyPatch);\n \n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n             throw (RuntimeException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT);\n         }\n \n-        exchange.getIn().setBody((exchange.getIn().getBody(UserMod.class).getKey()));\n+        exchange.getIn().setBody((exchange.getIn().getBody(UserPatch.class).getKey()));\n         return exchange.getIn().getBody(Long.class);\n     }\n \n@@ -285,7 +285,7 @@ public List<PropagationStatus> deprovision(final Long user, final Collection<Str\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Pair<Long, List<PropagationStatus>> update(\n-            final UserMod userMod, final Long key, final ProvisioningResult result,\n+            final UserPatch userPatch, final Long key, final ProvisioningResult result,\n             final Boolean enabled, final Set<String> excludedResources) {\n \n         PollingConsumer pollingConsumer = getConsumer(\"direct:updateInSyncPort\");\n@@ -296,7 +296,7 @@ public Pair<Long, List<PropagationStatus>> update(\n         props.put(\"enabled\", enabled);\n         props.put(\"excludedResources\", excludedResources);\n \n-        sendMessage(\"direct:updateUserInSync\", userMod, props);\n+        sendMessage(\"direct:updateUserInSync\", userPatch, props);\n \n         Exchange exchange = pollingConsumer.receive();\n \n@@ -307,8 +307,8 @@ public Pair<Long, List<PropagationStatus>> update(\n             result.setStatus(ProvisioningResult.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + ex.getMessage());\n \n-            WorkflowResult<Pair<UserMod, Boolean>> updated = new WorkflowResult<Pair<UserMod, Boolean>>(\n-                    new ImmutablePair<>(userMod, false), new PropagationByResource(),\n+            WorkflowResult<Pair<UserPatch, Boolean>> updated = new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                    new ImmutablePair<>(userPatch, false), new PropagationByResource(),\n                     new HashSet<String>());\n             sendMessage(\"direct:userInSync\", updated, props);\n             exchange = pollingConsumer.receive();"},{"sha":"1c1f24d62016bb392559931d9fe67757526278e4","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectProvisionProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -61,7 +61,7 @@ public void process(final Exchange exchange) {\n \n         WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n \n-        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(wfResult, null, null, null);\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(wfResult, null, null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"7243f8cca5c92e65e1603d14a712be703d1beacb","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectUpdateProcessor.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,7 +24,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n@@ -58,20 +58,19 @@ public class AnyObjectUpdateProcessor implements Processor {\n     @Override\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n-        AnyObjectMod anyObjectMod = exchange.getProperty(\"anyMod\", AnyObjectMod.class);\n+        AnyObjectPatch anyObjectPatch = exchange.getProperty(\"anyPatch\", AnyObjectPatch.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(updated,\n-                anyObjectMod.getVirAttrsToRemove(), anyObjectMod.getVirAttrsToUpdate(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(\n+                updated, anyObjectPatch.getVirAttrs(), excludedResources);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n                     updated.getResult(),\n-                    AnyTypeKind.GROUP,\n-                    anyObjectMod.getVirAttrsToRemove(),\n-                    anyObjectMod.getVirAttrsToUpdate());\n+                    AnyTypeKind.ANY_OBJECT,\n+                    anyObjectPatch.getVirAttrs());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getAnyObjectUpdateTasks(updated, null, null, null)\n+                    ? propagationManager.getAnyObjectUpdateTasks(updated, null, null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n "},{"sha":"4c7af59314045334f53c4675f03c64ce807a0e47","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupProvisionProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -61,7 +61,7 @@ public void process(final Exchange exchange) {\n \n         WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n \n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(wfResult, null, null, null);\n+        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(wfResult, null, null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"22c5f3d3e1bf1cc99bdc4dac25ddf9b7e2004352","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupUpdateProcessor.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,7 +24,7 @@\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n@@ -58,20 +58,19 @@ public class GroupUpdateProcessor implements Processor {\n     @Override\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n-        GroupMod groupMod = exchange.getProperty(\"anyMod\", GroupMod.class);\n+        GroupPatch groupPatch = exchange.getProperty(\"anyPatch\", GroupPatch.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(updated,\n-                groupMod.getVirAttrsToRemove(), groupMod.getVirAttrsToUpdate(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(\n+                updated, groupPatch.getVirAttrs(), excludedResources);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n                     updated.getResult(),\n                     AnyTypeKind.GROUP,\n-                    groupMod.getVirAttrsToRemove(),\n-                    groupMod.getVirAttrsToUpdate());\n+                    groupPatch.getVirAttrs());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getGroupUpdateTasks(updated, null, null, null)\n+                    ? propagationManager.getGroupUpdateTasks(updated, null, null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n "},{"sha":"1e0218780685bf4230cc99a3ce31f35dafe91e1b","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserConfirmPwdResetProcessor.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -23,7 +23,8 @@\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -51,13 +52,14 @@ public class UserConfirmPwdResetProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         Long key = exchange.getProperty(\"userKey\", Long.class);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(key);\n-        userMod.setPassword(exchange.getProperty(\"password\", String.class));\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(key);\n+        userPatch.setPassword(new PasswordPatch.Builder().\n+                value(exchange.getProperty(\"password\", String.class)).build());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                new WorkflowResult<Pair<UserMod, Boolean>>(\n-                        new ImmutablePair<UserMod, Boolean>(userMod, null), null, \"confirmPasswordReset\"),\n+                new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                        new ImmutablePair<UserPatch, Boolean>(userPatch, null), null, \"confirmPasswordReset\"),\n                 true, null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);"},{"sha":"e56587205e172c08de44b1be63111ade3132caa4","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserInternalSuspendProcessor.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInternalSuspendProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -23,7 +23,7 @@\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -47,12 +47,12 @@ public void process(final Exchange exchange) {\n \n         // propagate suspension if and only if it is required by policy\n         if (updated != null && updated.getValue()) {\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(updated.getKey().getResult());\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(updated.getKey().getResult());\n \n             List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                    new WorkflowResult<Pair<UserMod, Boolean>>(\n-                            new ImmutablePair<>(userMod, Boolean.FALSE),\n+                    new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                            new ImmutablePair<>(userPatch, Boolean.FALSE),\n                             updated.getKey().getPropByRes(), updated.getKey().getPerformedTasks()));\n             taskExecutor.execute(tasks);\n         }"},{"sha":"04c9ac9effaf7864f84a50e565493ccea59a3066","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserProvisionProcessor.java","status":"modified","additions":19,"deletions":12,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserProvisionProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,10 +21,14 @@\n import java.util.List;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n@@ -62,25 +66,28 @@ public void process(final Exchange exchange) {\n         @SuppressWarnings(\"unchecked\")\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(key);\n-        userMod.getResourcesToAdd().addAll(resources);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(key);\n+        userPatch.getResources().addAll(CollectionUtils.collect(resources, new Transformer<String, StringPatchItem>() {\n+\n+            @Override\n+            public StringPatchItem transform(final String resource) {\n+                return new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build();\n+            }\n+        }));\n \n         if (changePwd) {\n-            StatusMod statusMod = new StatusMod();\n-            statusMod.setOnSyncope(false);\n-            statusMod.getResources().addAll(resources);\n-            userMod.setPwdPropRequest(statusMod);\n-            userMod.setPassword(password);\n+            userPatch.setPassword(\n+                    new PasswordPatch.Builder().onSyncope(true).value(password).resources(resources).build());\n         }\n \n         PropagationByResource propByRes = new PropagationByResource();\n         for (String resource : resources) {\n             propByRes.add(ResourceOperation.UPDATE, resource);\n         }\n \n-        WorkflowResult<Pair<UserMod, Boolean>> wfResult = new WorkflowResult<Pair<UserMod, Boolean>>(\n-                ImmutablePair.of(userMod, (Boolean) null), propByRes, \"update\");\n+        WorkflowResult<Pair<UserPatch, Boolean>> wfResult = new WorkflowResult<Pair<UserPatch, Boolean>>(\n+                ImmutablePair.of(userPatch, (Boolean) null), propByRes, \"update\");\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n         PropagationReporter propagationReporter ="},{"sha":"fbe4c20a37daca47b1fd84e697c17f7d97c082c1","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserSetStatusInSyncProcessor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -21,7 +21,7 @@\n import java.util.Map;\n import org.apache.camel.Processor;\n import org.apache.camel.Exchange;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -41,7 +41,7 @@ public class UserSetStatusInSyncProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n-        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+        WorkflowResult<Map.Entry<UserPatch, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n \n         Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n         Long key = exchange.getProperty(\"userKey\", Long.class);"},{"sha":"f05a95addd036937e70e9b1fb6178d20d30c02e1","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,7 +24,8 @@\n import org.apache.camel.Processor;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -58,13 +59,13 @@ public void process(final Exchange exchange) {\n         WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n \n         Long key = exchange.getProperty(\"userKey\", Long.class);\n-        StatusMod statusMod = exchange.getProperty(\"statusMod\", StatusMod.class);\n+        StatusPatch statusPatch = exchange.getProperty(\"statusPatch\", StatusPatch.class);\n \n         Collection<String> resourcesToBeExcluded = CollectionUtils.removeAll(\n-                userDAO.findAllResourceNames(userDAO.find(key)), statusMod.getResources());\n+                userDAO.findAllResourceNames(userDAO.find(key)), statusPatch.getResources());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                key, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n+                key, statusPatch.getType() != StatusPatchType.SUSPEND, resourcesToBeExcluded);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"ffdd5d2a837de173ea3fabed69e3147bab23b989","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateInSyncProcessor.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -24,7 +24,7 @@\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -51,14 +51,14 @@ public class UserUpdateInSyncProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n-        WorkflowResult<Pair<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+        WorkflowResult<Pair<UserPatch, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated, updated.getResult().getKey().\n-                getPassword() != null, excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n+                updated, updated.getResult().getKey().getPassword() != null, excludedResources);\n \n         try {\n             taskExecutor.execute(tasks, propagationReporter);"},{"sha":"8023264790d287cfd9b7c733e3bf079b962520ed","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateProcessor.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -18,13 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.Collections;\n import java.util.List;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n@@ -57,20 +56,19 @@ public class UserUpdateProcessor implements Processor {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void process(final Exchange exchange) {\n-        WorkflowResult<Pair<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n-        UserMod userMod = exchange.getProperty(\"actual\", UserMod.class);\n+        WorkflowResult<Pair<UserPatch, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+        UserPatch userPatch = exchange.getProperty(\"actual\", UserPatch.class);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n             PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n                     updated.getResult().getKey().getKey(),\n                     AnyTypeKind.USER,\n-                    userMod.getVirAttrsToRemove(),\n-                    userMod.getVirAttrsToUpdate());\n-            tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getUserUpdateTasks(updated, false, null)\n-                    : Collections.<PropagationTask>emptyList());\n+                    userPatch.getVirAttrs());\n+            if (!propByResVirAttr.isEmpty()) {\n+                tasks.addAll(propagationManager.getUserUpdateTasks(updated, false, null));\n+            }\n         }\n \n         PropagationReporter propagationReporter ="},{"sha":"c0b1fe5bf17b76c1dbc6c819ef5008360e5fdc0d","filename":"ext/camel/provisioning-camel/src/main/resources/anyObjectRoutes.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FanyObjectRoutes.xml?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -40,7 +40,7 @@ under the License.\n          \n   <route id=\"updateAnyObject\">\n     <from uri=\"direct:updateAnyObject\"/>\n-    <setProperty propertyName=\"anyMod\">\n+    <setProperty propertyName=\"anyPatch\">\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>"},{"sha":"8e1b914af2afb5791484b05687a44acba1324f23","filename":"ext/camel/provisioning-camel/src/main/resources/groupRoutes.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FgroupRoutes.xml?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -59,7 +59,7 @@ under the License.\n          \n   <route id=\"updateGroup\">\n     <from uri=\"direct:updateGroup\"/>\n-    <setProperty propertyName=\"anyMod\">\n+    <setProperty propertyName=\"anyPatch\">\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>"},{"sha":"1fdc90e8c2e353611b21a5d1d57ac788bcde09b9","filename":"fit/console-reference/src/test/java/org/apache/syncope/fit/console/reference/AbstractITCase.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2Freference%2FAbstractITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -31,9 +31,6 @@\n \n public abstract class AbstractITCase {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractITCase.class);\n \n     public static final String ADMIN = \"admin\";"},{"sha":"4e416dfabcfb037a828f4b418670078a12c24f6f","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueLogicActions.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -20,8 +20,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.core.provisioning.java.DefaultLogicActions;\n@@ -54,19 +54,19 @@ public <A extends AnyTO> A beforeCreate(final A input) {\n     }\n \n     @Override\n-    public <M extends AnyMod> M beforeUpdate(final M input) {\n-        for (AttrMod attr : input.getPlainAttrsToUpdate()) {\n-            if (NAME.equals(attr.getSchema())) {\n-                List<String> values = new ArrayList<>(attr.getValuesToBeAdded().size());\n-                for (String value : attr.getValuesToBeAdded()) {\n+    public <M extends AnyPatch> M beforeUpdate(final M input) {\n+        for (AttrPatch patch : input.getPlainAttrs()) {\n+            if (NAME.equals(patch.getAttrTO().getSchema())) {\n+                List<String> values = new ArrayList<>(patch.getAttrTO().getValues().size());\n+                for (String value : patch.getAttrTO().getValues()) {\n                     try {\n                         values.add(String.valueOf(2 * Long.valueOf(value)));\n                     } catch (NumberFormatException e) {\n                         // ignore\n                     }\n                 }\n-                attr.getValuesToBeAdded().clear();\n-                attr.getValuesToBeAdded().addAll(values);\n+                patch.getAttrTO().getValues().clear();\n+                patch.getAttrTO().getValues().addAll(values);\n             }\n         }\n "},{"sha":"de2b4175481aff74bd7ac8a07febeb4b46df4df0","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSyncActions.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -19,11 +19,12 @@\n package org.apache.syncope.fit.core.reference;\n \n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.syncope.common.lib.mod.AnyMod;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningProfile;\n import org.apache.syncope.core.provisioning.java.sync.DefaultSyncActions;\n@@ -73,28 +74,27 @@ public <A extends AnyTO> SyncDelta beforeAssign(\n     }\n \n     @Override\n-    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyPatch> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n             final A any,\n-            final M anyMod) throws JobExecutionException {\n+            final M anyPatch) throws JobExecutionException {\n \n-        anyMod.getPlainAttrsToRemove().add(\"fullname\");\n-\n-        AttrMod fullnameMod = null;\n-        for (AttrMod attrMod : anyMod.getPlainAttrsToUpdate()) {\n-            if (\"fullname\".equals(attrMod.getSchema())) {\n-                fullnameMod = attrMod;\n+        AttrPatch fullnamePatch = null;\n+        for (AttrPatch attrPatch : anyPatch.getPlainAttrs()) {\n+            if (\"fullname\".equals(attrPatch.getAttrTO().getSchema())) {\n+                fullnamePatch = attrPatch;\n             }\n         }\n-        if (fullnameMod == null) {\n-            fullnameMod = new AttrMod();\n-            fullnameMod.setSchema(\"fullname\");\n-            anyMod.getPlainAttrsToUpdate().add(fullnameMod);\n+        if (fullnamePatch == null) {\n+            fullnamePatch = new AttrPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).\n+                    attrTO(new AttrTO.Builder().schema(\"fullname\").build()).\n+                    build();\n         }\n \n-        fullnameMod.getValuesToBeAdded().clear();\n-        fullnameMod.getValuesToBeAdded().add(String.valueOf(counter++));\n+        fullnamePatch.getAttrTO().getValues().clear();\n+        fullnamePatch.getAttrTO().getValues().add(String.valueOf(counter++));\n \n         return delta;\n     }"},{"sha":"0b05bef3a59ff369f894b0c496eb96f65229992a","filename":"fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -97,7 +97,7 @@ under the License.\n     <exclusiveGateway id=\"activeGw\"/>\n     <sequenceFlow id=\"active2UpdateApproval\" sourceRef=\"activeGw\" targetRef=\"updateApproval\">\n       <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${wfExecutor == user.getUsername() and task == 'update' \n-        and (!userMod.getMembershipsToAdd().isEmpty() or !userMod.getMembershipsToRemove().isEmpty())}]]></conditionExpression>\n+        and (!userPatch.getMemberships().isEmpty())}]]></conditionExpression>\n     </sequenceFlow>\n     <sequenceFlow id=\"active2DeleteApproval\" sourceRef=\"activeGw\" targetRef=\"deleteApproval\">\n       <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${wfExecutor == user.getUsername() and task == 'delete'}]]></conditionExpression>"},{"sha":"b30c962315da4d7c439b726487fe34708358b78a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractITCase.java","status":"modified","additions":14,"deletions":19,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -36,10 +36,10 @@\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -49,6 +49,7 @@\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n@@ -266,17 +267,11 @@ protected static String getUUIDString() {\n     }\n \n     protected static AttrTO attrTO(final String schema, final String value) {\n-        AttrTO attr = new AttrTO();\n-        attr.setSchema(schema);\n-        attr.getValues().add(value);\n-        return attr;\n+        return new AttrTO.Builder().schema(schema).value(value).build();\n     }\n \n-    protected static AttrMod attrMod(final String schema, final String valueToBeAdded) {\n-        AttrMod attr = new AttrMod();\n-        attr.setSchema(schema);\n-        attr.getValuesToBeAdded().add(valueToBeAdded);\n-        return attr;\n+    protected static AttrPatch attrAddReplacePatch(final String schema, final String value) {\n+        return new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO(schema, value)).build();\n     }\n \n     protected UserTO createUser(final UserTO userTO) {\n@@ -299,8 +294,8 @@ protected UserTO readUser(final String username) {\n                 userService.getUserKey(username).getHeaderString(RESTHeaders.USER_KEY)));\n     }\n \n-    protected UserTO updateUser(final UserMod userMod) {\n-        return userService.update(userMod).readEntity(UserTO.class);\n+    protected UserTO updateUser(final UserPatch userPatch) {\n+        return userService.update(userPatch).readEntity(UserTO.class);\n     }\n \n     protected UserTO deleteUser(final Long key) {\n@@ -349,8 +344,8 @@ protected AnyObjectTO createAnyObject(final AnyObjectTO anyObjectTO) {\n         return getObject(response.getLocation(), AnyObjectService.class, AnyObjectTO.class);\n     }\n \n-    protected AnyObjectTO updateAnyObject(final AnyObjectMod anyObjectMod) {\n-        return anyObjectService.update(anyObjectMod).readEntity(AnyObjectTO.class);\n+    protected AnyObjectTO updateAnyObject(final AnyObjectPatch anyObjectPatch) {\n+        return anyObjectService.update(anyObjectPatch).readEntity(AnyObjectTO.class);\n     }\n \n     protected AnyObjectTO deleteAnyObject(final Long key) {\n@@ -368,8 +363,8 @@ protected GroupTO createGroup(final GroupTO groupTO) {\n         return getObject(response.getLocation(), GroupService.class, GroupTO.class);\n     }\n \n-    protected GroupTO updateGroup(final GroupMod groupMod) {\n-        return groupService.update(groupMod).readEntity(GroupTO.class);\n+    protected GroupTO updateGroup(final GroupPatch groupPatch) {\n+        return groupService.update(groupPatch).readEntity(GroupTO.class);\n     }\n \n     protected GroupTO deleteGroup(final Long key) {"},{"sha":"94716e7a7ede3458da8603bb7739544c0647f484","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyObjectITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.AnyObjectMod;\n+import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -113,12 +113,12 @@ public void update() {\n \n         assertEquals(1, anyObjectTO.getPlainAttrs().size());\n \n-        AnyObjectMod anyObjectMod = new AnyObjectMod();\n-        anyObjectMod.setKey(anyObjectTO.getKey());\n+        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n+        anyObjectPatch.setKey(anyObjectTO.getKey());\n         String newLocation = \"new\" + getUUIDString();\n-        anyObjectMod.getPlainAttrsToUpdate().add(attrMod(\"location\", newLocation));\n+        anyObjectPatch.getPlainAttrs().add(attrAddReplacePatch(\"location\", newLocation));\n \n-        anyObjectTO = updateAnyObject(anyObjectMod);\n+        anyObjectTO = updateAnyObject(anyObjectPatch);\n \n         assertEquals(newLocation, anyObjectTO.getPlainAttrMap().get(\"location\").getValues().get(0));\n     }"},{"sha":"3f82edf4699617121d03976878e58c3773a1471b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -36,8 +36,11 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -50,10 +53,9 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.UserService;\n@@ -281,23 +283,22 @@ public void delegatedUserCRUD() {\n             assertEquals(\"surname\", user.getPlainAttrMap().get(\"surname\").getValues().get(0));\n \n             // 5. as delegated, update user attempting to move under realm / -> fail\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(user.getKey());\n-            userMod.setRealm(\"/odd\");\n-            userMod.getPlainAttrsToRemove().add(\"surname\");\n-            userMod.getPlainAttrsToUpdate().add(attrMod(\"surname\", \"surname2\"));\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(user.getKey());\n+            userPatch.setRealm(new StringReplacePatchItem.Builder().value(\"/odd\").build());\n+            userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n \n             try {\n-                delegatedUserService.update(userMod);\n+                delegatedUserService.update(userPatch);\n                 fail();\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n \n             // 6. revert realm change -> succeed\n-            userMod.setRealm(null);\n+            userPatch.setRealm(null);\n \n-            response = delegatedUserService.update(userMod);\n+            response = delegatedUserService.update(userPatch);\n             assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n             user = response.readEntity(UserTO.class);\n@@ -380,9 +381,9 @@ public void checkUserSuspension() {\n         SyncopeClient goodPwdClient = clientFactory.create(userTO.getUsername(), \"password123\");\n         assertReadFails(goodPwdClient);\n \n-        StatusMod reactivate = new StatusMod();\n+        StatusPatch reactivate = new StatusPatch();\n         reactivate.setKey(userTO.getKey());\n-        reactivate.setType(StatusMod.ModType.REACTIVATE);\n+        reactivate.setType(StatusPatchType.REACTIVATE);\n         userTO = userService.status(reactivate).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n@@ -396,9 +397,7 @@ public void issueSYNCOPE434() {\n \n         // 1. create user with group 9 (users with group 9 are defined in workflow as subject to approval)\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"createWithReject@syncope.apache.org\");\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(9L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(9L).build());\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n@@ -442,16 +441,17 @@ public void issueSYNCOPE164() throws Exception {\n         assertNotNull(user);\n \n         // 2. unlink the resource from the created user\n-        assertNotNull(userService.deassociate(user.getKey(),\n-                ResourceDeassociationActionType.UNLINK,\n-                CollectionWrapper.wrap(RESOURCE_NAME_TESTDB, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(user.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_TESTDB);\n+        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         // 3. change password on Syncope\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(user.getKey());\n-        userMod.setPassword(\"password234\");\n-        user = updateUser(userMod);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n+        user = updateUser(userPatch);\n         assertNotNull(user);\n \n         // 4. check that the db resource has still the initial password value"},{"sha":"194de73c24cac86ef0587ca0766a80e17a44654f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":23,"deletions":4,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -38,6 +38,7 @@\n import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.BulkAction;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n@@ -519,14 +520,23 @@ public void validate() {\n         // set connector configuration\n         connectorTO.getConfiguration().addAll(conf);\n \n-        assertTrue(connectorService.check(connectorTO).getElement());\n+        try {\n+            connectorService.check(connectorTO);\n+        } catch (Exception e) {\n+            fail(ExceptionUtils.getStackTrace(e));\n+        }\n \n         conf.remove(password);\n         password.getValues().clear();\n         password.getValues().add(\"password\");\n         conf.add(password);\n \n-        assertFalse(connectorService.check(connectorTO).getElement());\n+        try {\n+            connectorService.check(connectorTO);\n+            fail();\n+        } catch (Exception e) {\n+            assertNotNull(e);\n+        }\n     }\n \n     @Test\n@@ -626,7 +636,12 @@ public void issueSYNCOPE112() {\n         connectorTO.getConfiguration().addAll(conf);\n \n         try {\n-            assertFalse(connectorService.check(connectorTO).getElement());\n+            try {\n+                connectorService.check(connectorTO);\n+                fail();\n+            } catch (Exception e) {\n+                assertNotNull(e);\n+            }\n \n             Response response = connectorService.create(connectorTO);\n             if (response.getStatusInfo().getStatusCode() != Response.Status.CREATED.getStatusCode()) {\n@@ -672,7 +687,11 @@ public void issueSYNCOPE112() {\n             // ----------------------------------------\n             // Check connection without saving the resource ....\n             // ----------------------------------------\n-            assertTrue(resourceService.check(resourceTO).getElement());\n+            try {\n+                resourceService.check(resourceTO);\n+            } catch (Exception e) {\n+                fail(ExceptionUtils.getStackTrace(e));\n+            }\n             // ----------------------------------------\n         } finally {\n             // Remove connector from db to make test re-runnable"},{"sha":"f1cc5877c897951feca8808b427659bf0ee336b2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":102,"deletions":83,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -42,11 +42,15 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.ReferenceMod;\n-import org.apache.syncope.common.lib.mod.GroupMod;\n-import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n+import org.apache.syncope.common.lib.patch.AssociationPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.LongReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n@@ -60,11 +64,10 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.SchemaType;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.GroupService;\n@@ -113,11 +116,11 @@ public void create() {\n         assertNotNull(connObjectTO.getPlainAttrMap().get(\"owner\"));\n \n         // SYNCOPE-515: remove ownership\n-        final GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(groupTO.getKey());\n-        groupMod.setGroupOwner(new ReferenceMod());\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(groupTO.getKey());\n+        groupPatch.setGroupOwner(new LongReplacePatchItem());\n \n-        assertNull(updateGroup(groupMod).getGroupOwner());\n+        assertNull(updateGroup(groupPatch).getGroupOwner());\n     }\n \n     @Test\n@@ -202,13 +205,13 @@ public void update() {\n \n         assertEquals(1, groupTO.getPlainAttrs().size());\n \n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(groupTO.getKey());\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(groupTO.getKey());\n         String modName = \"finalGroup\" + getUUIDString();\n-        groupMod.setName(modName);\n-        groupMod.getPlainAttrsToUpdate().add(attrMod(\"show\", \"FALSE\"));\n+        groupPatch.setName(new StringReplacePatchItem.Builder().value(modName).build());\n+        groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"show\", \"FALSE\"));\n \n-        groupTO = updateGroup(groupMod);\n+        groupTO = updateGroup(groupPatch);\n \n         assertEquals(modName, groupTO.getName());\n         assertEquals(2, groupTO.getPlainAttrs().size());\n@@ -224,11 +227,13 @@ public void updateRemovingVirAttribute() {\n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getVirAttrs().size());\n \n-        final GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(groupTO.getKey());\n-        groupMod.getVirAttrsToRemove().add(\"rvirtualdata\");\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(groupTO.getKey());\n+        groupPatch.getVirAttrs().add(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n+                attrTO(new AttrTO.Builder().schema(\"rvirtualdata\").build()).\n+                build());\n \n-        groupTO = updateGroup(groupMod);\n+        groupTO = updateGroup(groupPatch);\n         assertNotNull(groupTO);\n         assertTrue(groupTO.getVirAttrs().isEmpty());\n     }\n@@ -243,11 +248,13 @@ public void updateRemovingDerAttribute() {\n         assertNotNull(groupTO);\n         assertEquals(1, groupTO.getDerAttrs().size());\n \n-        final GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(groupTO.getKey());\n-        groupMod.getDerAttrsToRemove().add(\"rderivedschema\");\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(groupTO.getKey());\n+        groupPatch.getDerAttrs().add(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n+                attrTO(new AttrTO.Builder().schema(\"rderivedschema\").build()).\n+                build());\n \n-        groupTO = updateGroup(groupMod);\n+        groupTO = updateGroup(groupPatch);\n         assertNotNull(groupTO);\n         assertTrue(groupTO.getDerAttrs().isEmpty());\n     }\n@@ -264,15 +271,15 @@ public void updateAsGroupOwner() {\n         assertEquals(\"admin\", groupTO.getLastModifier());\n \n         // 2. prepare update\n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(groupTO.getKey());\n-        groupMod.setName(\"Director\");\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(groupTO.getKey());\n+        groupPatch.setName(new StringReplacePatchItem.Builder().value(\"Director\").build());\n \n         // 3. try to update as verdi, not owner of group 6 - fail\n         GroupService groupService2 = clientFactory.create(\"verdi\", ADMIN_PWD).getService(GroupService.class);\n \n         try {\n-            groupService2.update(groupMod);\n+            groupService2.update(groupPatch);\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(Response.Status.UNAUTHORIZED, e.getType().getResponseStatus());\n@@ -283,7 +290,7 @@ public void updateAsGroupOwner() {\n         // 4. update as puccini, owner of group 6 - success\n         GroupService groupService3 = clientFactory.create(\"puccini\", ADMIN_PWD).getService(GroupService.class);\n \n-        groupTO = groupService3.update(groupMod).readEntity(GroupTO.class);\n+        groupTO = groupService3.update(groupPatch).readEntity(GroupTO.class);\n         assertEquals(\"Director\", groupTO.getName());\n \n         // issue SYNCOPE-15\n@@ -306,12 +313,12 @@ public void issue178() {\n         assertNotNull(actual);\n         assertEquals(groupName, actual.getName());\n \n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(actual.getKey());\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(actual.getKey());\n         String renamedGroup = \"renamed\" + getUUIDString();\n-        groupMod.setName(renamedGroup);\n+        groupPatch.setName(new StringReplacePatchItem.Builder().value(renamedGroup).build());\n \n-        actual = updateGroup(groupMod);\n+        actual = updateGroup(groupPatch);\n         assertNotNull(actual);\n         assertEquals(renamedGroup, actual.getName());\n     }\n@@ -323,10 +330,12 @@ public void unlink() {\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        assertNotNull(groupService.deassociate(actual.getKey(),\n-                ResourceDeassociationActionType.UNLINK,\n-                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -350,10 +359,12 @@ public void link() {\n             assertNotNull(e);\n         }\n \n-        ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n-        assertNotNull(groupService.associate(actual.getKey(), ResourceAssociationAction.LINK, associationMod).\n-                readEntity(BulkActionResult.class));\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setAction(ResourceAssociationAction.LINK);\n+        associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertFalse(actual.getResources().isEmpty());\n@@ -373,10 +384,12 @@ public void unassign() {\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        assertNotNull(groupService.deassociate(actual.getKey(),\n-                ResourceDeassociationActionType.UNASSIGN,\n-                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -405,11 +418,12 @@ public void assign() {\n             assertNotNull(e);\n         }\n \n-        ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n-        assertNotNull(groupService.associate(actual.getKey(),\n-                ResourceAssociationAction.ASSIGN, associationMod).\n-                readEntity(BulkActionResult.class));\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setAction(ResourceAssociationAction.ASSIGN);\n+        associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertFalse(actual.getResources().isEmpty());\n@@ -424,10 +438,12 @@ public void deprovision() {\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        assertNotNull(groupService.deassociate(actual.getKey(),\n-                ResourceDeassociationActionType.DEPROVISION,\n-                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -456,11 +472,12 @@ public void provision() {\n             assertNotNull(e);\n         }\n \n-        ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n-        assertNotNull(groupService.associate(actual.getKey(),\n-                ResourceAssociationAction.PROVISION, associationMod).\n-                readEntity(BulkActionResult.class));\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setAction(ResourceAssociationAction.PROVISION);\n+        associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertTrue(actual.getResources().isEmpty());\n@@ -483,21 +500,24 @@ public void deprovisionUnlinked() {\n             assertNotNull(e);\n         }\n \n-        ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n-        assertNotNull(groupService.associate(actual.getKey(),\n-                ResourceAssociationAction.PROVISION, associationMod).\n-                readEntity(BulkActionResult.class));\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setAction(ResourceAssociationAction.PROVISION);\n+        associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertTrue(actual.getResources().isEmpty());\n \n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n \n-        assertNotNull(groupService.deassociate(actual.getKey(),\n-                ResourceDeassociationActionType.DEPROVISION,\n-                CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+\n+        assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         actual = groupService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -537,20 +557,20 @@ public void createWithMandatorySchema() {\n \n         try {\n             // 4. update group: failure since no values are provided and it is mandatory\n-            GroupMod groupMod = new GroupMod();\n-            groupMod.setKey(groupTO.getKey());\n+            GroupPatch groupPatch = new GroupPatch();\n+            groupPatch.setKey(groupTO.getKey());\n \n             try {\n-                updateGroup(groupMod);\n+                updateGroup(groupPatch);\n                 fail();\n             } catch (SyncopeClientException e) {\n                 assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n             }\n \n             // 5. also add an actual attribute for badge - it will work        \n-            groupMod.getPlainAttrsToUpdate().add(attrMod(badge.getKey(), \"xxxxxxxxxx\"));\n+            groupPatch.getPlainAttrs().add(attrAddReplacePatch(badge.getKey(), \"xxxxxxxxxx\"));\n \n-            groupTO = updateGroup(groupMod);\n+            groupTO = updateGroup(groupPatch);\n             assertNotNull(groupTO);\n             assertTrue(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n         } finally {\n@@ -594,11 +614,11 @@ public void noContent() throws IOException {\n         group = getObject(response.getLocation(), GroupService.class, GroupTO.class);\n         assertNotNull(group);\n \n-        GroupMod groupMod = new GroupMod();\n-        groupMod.setKey(group.getKey());\n-        groupMod.getPlainAttrsToUpdate().add(attrMod(\"badge\", \"xxxxxxxxxx\"));\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(group.getKey());\n+        groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"badge\", \"xxxxxxxxxx\"));\n \n-        response = noContentService.update(groupMod);\n+        response = noContentService.update(groupPatch);\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n@@ -647,12 +667,11 @@ public void issueSYNCOPE632() {\n             assertNotNull(groupTO);\n \n             // 3. update the group\n-            GroupMod groupMod = new GroupMod();\n-            groupMod.setKey(groupTO.getKey());\n-            groupMod.getPlainAttrsToRemove().add(\"icon\");\n-            groupMod.getPlainAttrsToUpdate().add(attrMod(\"icon\", \"anotherIcon\"));\n+            GroupPatch groupPatch = new GroupPatch();\n+            groupPatch.setKey(groupTO.getKey());\n+            groupPatch.getPlainAttrs().add(attrAddReplacePatch(\"icon\", \"anotherIcon\"));\n \n-            groupTO = updateGroup(groupMod);\n+            groupTO = updateGroup(groupPatch);\n             assertNotNull(groupTO);\n \n             // 4. check that a single group exists in LDAP for the group created and updated above\n@@ -703,9 +722,9 @@ public void dynMembership() {\n \n         assertTrue(userService.read(4L).getDynGroups().contains(group.getKey()));\n \n-        GroupMod mod = new GroupMod();\n+        GroupPatch mod = new GroupPatch();\n         mod.setKey(group.getKey());\n-        mod.setUDynMembershipCond(\"cool==false\");\n+        mod.setUDynMembershipCond(new StringReplacePatchItem.Builder().value(\"cool==false\").build());\n         groupService.update(mod);\n \n         assertTrue(userService.read(4L).getDynGroups().isEmpty());"},{"sha":"f494e857f76f623d509bfe710ebdec2100d18db4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/NotificationTaskITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FNotificationTaskITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -383,9 +383,7 @@ private String createNotificationTask(final boolean active, final boolean includ\n \n         // 2. create user\n         UserTO userTO = UserITCase.getUniqueSampleTO(MAIL_ADDRESS);\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(7L).build());\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);"},{"sha":"679288c8833bcfc78dcec001b7a0b90e6bcafbad","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PlainSchemaITCase.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPlainSchemaITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -29,9 +29,7 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.UserMod;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -247,13 +245,9 @@ public void issue259() {\n         assertNotNull(userTO);\n \n         UserTO newUserTO = SerializationUtils.clone(userTO);\n-        MembershipTO membership = new MembershipTO();\n-        membership.setRightKey(2L);\n-        newUserTO.getMemberships().add(membership);\n+        newUserTO.getMemberships().add(new MembershipTO.Builder().group(2L).build());\n \n-        UserMod userMod = AnyOperations.diff(newUserTO, userTO);\n-\n-        userTO = userService.update(userMod).readEntity(UserTO.class);\n+        userTO = userService.update(newUserTO).readEntity(UserTO.class);\n         assertNotNull(userTO);\n     }\n "},{"sha":"f23f800d01ddf513c7322c65d13ced107361c796","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":31,"deletions":39,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -35,8 +35,9 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -55,10 +56,8 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.provisioning.java.sync.DBPasswordSyncActions;\n@@ -110,9 +109,7 @@ public void create() {\n         UserTO userTemplate = new UserTO();\n         userTemplate.getResources().add(RESOURCE_NAME_WS2);\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(8L);\n-        userTemplate.getMemberships().add(membershipTO);\n+        userTemplate.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n         task.getTemplates().put(AnyTypeKind.USER.name(), userTemplate);\n \n         GroupTO groupTemplate = new GroupTO();\n@@ -287,9 +284,11 @@ private void ldapCleanup() {\n                 build());\n         if (matchingGroups.getSize() > 0) {\n             for (GroupTO group : matchingGroups.getResult()) {\n-                groupService.deassociate(group.getKey(),\n-                        ResourceDeassociationActionType.UNLINK,\n-                        CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n+                DeassociationPatch deassociationPatch = new DeassociationPatch();\n+                deassociationPatch.setKey(group.getKey());\n+                deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n+                deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+                groupService.deassociate(deassociationPatch);\n                 groupService.delete(group.getKey());\n             }\n         }\n@@ -299,9 +298,11 @@ private void ldapCleanup() {\n                 build());\n         if (matchingUsers.getSize() > 0) {\n             for (UserTO user : matchingUsers.getResult()) {\n-                userService.deassociate(user.getKey(),\n-                        ResourceDeassociationActionType.UNLINK,\n-                        CollectionWrapper.wrap(RESOURCE_NAME_LDAP, ResourceKey.class));\n+                DeassociationPatch deassociationPatch = new DeassociationPatch();\n+                deassociationPatch.setKey(user.getKey());\n+                deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n+                deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+                userService.deassociate(deassociationPatch);\n                 userService.delete(user.getKey());\n             }\n         }\n@@ -377,9 +378,11 @@ public void reconcileFromScriptedSQL() {\n                         is(\"location\").equalTo(\"sync*\").query()).build());\n         assertTrue(matchingPrinters.getSize() > 0);\n         for (AnyObjectTO printer : matchingPrinters.getResult()) {\n-            anyObjectService.deassociate(printer.getKey(),\n-                    ResourceDeassociationActionType.UNLINK,\n-                    CollectionWrapper.wrap(RESOURCE_NAME_DBSCRIPTED, ResourceKey.class));\n+            DeassociationPatch deassociationPatch = new DeassociationPatch();\n+            deassociationPatch.setKey(printer.getKey());\n+            deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n+            deassociationPatch.getResources().add(RESOURCE_NAME_DBSCRIPTED);\n+            anyObjectService.deassociate(deassociationPatch);\n             anyObjectService.delete(printer.getKey());\n         }\n \n@@ -418,10 +421,7 @@ public void issueSYNCOPE68() {\n         userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION2);\n         userTO.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7L);\n-\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(7L).build());\n \n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n@@ -436,10 +436,7 @@ public void issueSYNCOPE68() {\n             //-----------------------------\n             UserTO template = new UserTO();\n \n-            membershipTO = new MembershipTO();\n-            membershipTO.setRightKey(10L);\n-\n-            template.getMemberships().add(membershipTO);\n+            template.getMemberships().add(new MembershipTO.Builder().group(10L).build());\n \n             template.getResources().add(RESOURCE_NAME_NOPROPAGATION4);\n             //-----------------------------\n@@ -535,12 +532,11 @@ public void issueSYNCOPE258() {\n         userTO = createUser(userTO);\n \n         // change email in order to unmatch the second user\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getPlainAttrsToRemove().add(\"email\");\n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"email\", \"s258@apache.org\"));\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"email\", \"s258@apache.org\"));\n \n-        userService.update(userMod);\n+        userService.update(userPatch);\n \n         execProvisioningTask(taskService, actual.getKey(), 50, false);\n \n@@ -622,7 +618,7 @@ public void issueSYNCOPE307() {\n         assertEquals(\"virtualvalue\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n         try {\n-            final JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+            JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n \n             String value = jdbcTemplate.queryForObject(\n                     \"SELECT USERNAME FROM testsync WHERE ID=?\", String.class, userTO.getKey());\n@@ -700,14 +696,10 @@ public void issueSYNCOPE313LDAP() throws Exception {\n         assertFalse(user.getResources().isEmpty());\n \n         // 2. request to change password only on Syncope and not on LDAP\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(user.getKey());\n-        userMod.setPassword(\"new-security123\");\n-        StatusMod pwdPropRequest = new StatusMod();\n-        pwdPropRequest.setOnSyncope(true);\n-        pwdPropRequest.getResources().clear();\n-        userMod.setPwdPropRequest(pwdPropRequest);\n-        updateUser(userMod);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"new-security123\").build());\n+        updateUser(userPatch);\n \n         // 3. Check that the Syncope user now has the changed password\n         UserTO updatedUser = userService.read(user.getKey());"},{"sha":"fe919938c3be9652b570c993596b7ed9f4deb591","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":308,"deletions":327,"changes":635,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -48,9 +48,15 @@\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.mod.ResourceAssociationMod;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AssociationPatch;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.DeassociationPatch;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n@@ -73,12 +79,12 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n-import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.lib.types.TaskType;\n-import org.apache.syncope.common.lib.wrap.ResourceKey;\n-import org.apache.syncope.common.rest.api.CollectionWrapper;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -190,35 +196,39 @@ public void issue186() {\n         assertTrue(userTO.getResources().isEmpty());\n \n         // 2. update assigning a resource forcing mandatory constraints: must fail with RequiredValuesMissing\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"newPassword123\");\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS2);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n \n         try {\n-            userTO = updateUser(userMod);\n+            userTO = updateUser(userPatch);\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n         }\n \n         // 3. update assigning a resource NOT forcing mandatory constraints\n         // AND primary: must fail with PropagationException\n-        userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"newPassword123\");\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n \n         // 4. update assigning a resource NOT forcing mandatory constraints\n         // BUT not primary: must succeed\n-        userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"newPassword123456\");\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_CSV);\n-        updateUser(userMod);\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123456\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_CSV).build());\n+\n+        updateUser(userPatch);\n     }\n \n     @Test\n@@ -321,10 +331,7 @@ public void createWithInvalidPasswordByGroup() {\n         // configured to be minLength=16\n         userTO.setPassword(\"password1\");\n \n-        MembershipTO membership = new MembershipTO();\n-        membership.setRightKey(8L);\n-\n-        userTO.getMemberships().add(membership);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         createUser(userTO);\n     }\n@@ -354,9 +361,7 @@ public void create() {\n         UserTO userTO = getUniqueSampleTO(\"a.b@c.com\");\n \n         // add a membership\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(8L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         // add an attribute with a non-existing schema: must be ignored\n         AttrTO attrWithInvalidSchemaTO = attrTO(\"invalid schema\", \"a value\");\n@@ -450,9 +455,7 @@ public void createWithRequiredValueMissing() {\n         AttrTO type = userTO.getPlainAttrMap().get(\"type\");\n         userTO.getPlainAttrs().remove(type);\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(8L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         // 1. create user without type (mandatory by UserSchema)\n         try {\n@@ -598,11 +601,13 @@ public void updateWithouPassword() {\n \n         assertNotNull(userTO);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getDerAttrsToRemove().add(\"cn\");\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getDerAttrs().add(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n+                attrTO(new AttrTO.Builder().schema(\"cn\").build()).\n+                build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getDerAttrMap());\n@@ -616,11 +621,11 @@ public void updateInvalidPassword() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"pass\");\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"pass\").build());\n \n-        userService.update(userMod);\n+        userService.update(userPatch);\n     }\n \n     @Test(expected = SyncopeClientException.class)\n@@ -631,43 +636,42 @@ public void updateSamePassword() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"password123\");\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"password123\").build());\n \n-        userService.update(userMod);\n+        userService.update(userPatch);\n     }\n \n     @Test\n     public void update() {\n         UserTO userTO = getUniqueSampleTO(\"g.h@t.com\");\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(8L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         userTO = createUser(userTO);\n \n         assertFalse(userTO.getDerAttrs().isEmpty());\n         assertEquals(1, userTO.getMemberships().size());\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"new2Password\");\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"new2Password\").build());\n \n-        userMod.getPlainAttrsToRemove().add(\"userId\");\n         String newUserId = getUUIDString() + \"t.w@spre.net\";\n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"userId\", newUserId));\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"userId\", newUserId));\n \n-        userMod.getPlainAttrsToRemove().add(\"fullname\");\n         String newFullName = getUUIDString() + \"g.h@t.com\";\n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"fullname\", newFullName));\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"fullname\", newFullName));\n \n-        userMod.getDerAttrsToAdd().add(\"cn\");\n-        userMod.getMembershipsToAdd().add(8L);\n-        userMod.getMembershipsToRemove().add(userTO.getMemberships().get(0).getRightKey());\n+        userPatch.getDerAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                attrTO(new AttrTO.Builder().schema(\"cn\").build()).build());\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                membershipTO(new MembershipTO.Builder().group(8L).build()).build());\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                membershipTO(userTO.getMemberships().get(0)).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n \n         // issue SYNCOPE-15\n@@ -694,17 +698,15 @@ public void updatePasswordOnly() {\n         assertFalse(beforeTasks <= 0);\n \n         UserTO userTO = getUniqueSampleTO(\"pwdonly@t.com\");\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(8L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         userTO = createUser(userTO);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"newPassword123\");\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n \n         // check for changePwdDate\n         assertNotNull(userTO.getChangePwdDate());\n@@ -734,9 +736,7 @@ public void verifyTaskRegistration() {\n         UserTO userTO = getUniqueSampleTO(\"t@p.mode\");\n \n         // add a membership\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(8L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         // 1. create user\n         userTO = createUser(userTO);\n@@ -759,12 +759,12 @@ public void verifyTaskRegistration() {\n         // --------------------------------------\n         // Update operation\n         // --------------------------------------\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n \n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"surname\", \"surname\"));\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname\"));\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n \n         assertNotNull(userTO);\n \n@@ -809,9 +809,7 @@ public void createActivate() {\n \n         UserTO userTO = getUniqueSampleTO(\"createActivate@syncope.apache.org\");\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(11L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(11L).build());\n \n         userTO = createUser(userTO);\n \n@@ -821,11 +819,11 @@ public void createActivate() {\n \n         assertEquals(\"created\", userTO.getStatus());\n \n-        StatusMod statusMod = new StatusMod();\n-        statusMod.setKey(userTO.getKey());\n-        statusMod.setType(StatusMod.ModType.ACTIVATE);\n-        statusMod.setToken(userTO.getToken());\n-        userTO = userService.status(statusMod).readEntity(UserTO.class);\n+        StatusPatch statusPatch = new StatusPatch();\n+        statusPatch.setKey(userTO.getKey());\n+        statusPatch.setType(StatusPatchType.ACTIVATE);\n+        statusPatch.setToken(userTO.getToken());\n+        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n \n         assertNotNull(userTO);\n         assertNull(userTO.getToken());\n@@ -837,9 +835,7 @@ public void createActivate() {\n     public void suspendReactivate() {\n         UserTO userTO = getUniqueSampleTO(\"suspendReactivate@syncope.apache.org\");\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(7L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(7L).build());\n \n         userTO = createUser(userTO);\n \n@@ -848,17 +844,17 @@ public void suspendReactivate() {\n                 ? \"active\"\n                 : \"created\", userTO.getStatus());\n \n-        StatusMod statusMod = new StatusMod();\n-        statusMod.setKey(userTO.getKey());\n-        statusMod.setType(StatusMod.ModType.SUSPEND);\n-        userTO = userService.status(statusMod).readEntity(UserTO.class);\n+        StatusPatch statusPatch = new StatusPatch();\n+        statusPatch.setKey(userTO.getKey());\n+        statusPatch.setType(StatusPatchType.SUSPEND);\n+        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n-        statusMod = new StatusMod();\n-        statusMod.setKey(userTO.getKey());\n-        statusMod.setType(StatusMod.ModType.REACTIVATE);\n-        userTO = userService.status(statusMod).readEntity(UserTO.class);\n+        statusPatch = new StatusPatch();\n+        statusPatch.setKey(userTO.getKey());\n+        statusPatch.setType(StatusPatchType.REACTIVATE);\n+        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n     }\n@@ -885,13 +881,13 @@ public void suspendReactivateOnResource() {\n         long userKey = userTO.getKey();\n \n         // Suspend with effect on syncope, ldap and db => user should be suspended in syncope and all resources\n-        StatusMod statusMod = new StatusMod();\n-        statusMod.setKey(userKey);\n-        statusMod.setType(StatusMod.ModType.SUSPEND);\n-        statusMod.setOnSyncope(true);\n-        statusMod.getResources().add(RESOURCE_NAME_TESTDB);\n-        statusMod.getResources().add(RESOURCE_NAME_LDAP);\n-        userTO = userService.status(statusMod).readEntity(UserTO.class);\n+        StatusPatch statusPatch = new StatusPatch();\n+        statusPatch.setKey(userKey);\n+        statusPatch.setType(StatusPatchType.SUSPEND);\n+        statusPatch.setOnSyncope(true);\n+        statusPatch.getResources().add(RESOURCE_NAME_TESTDB);\n+        statusPatch.getResources().add(RESOURCE_NAME_LDAP);\n+        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n@@ -903,28 +899,28 @@ public void suspendReactivateOnResource() {\n         assertNotNull(connObjectTO);\n \n         // Suspend and reactivate only on ldap => db and syncope should still show suspended\n-        statusMod = new StatusMod();\n-        statusMod.setKey(userKey);\n-        statusMod.setType(StatusMod.ModType.SUSPEND);\n-        statusMod.setOnSyncope(false);\n-        statusMod.getResources().add(RESOURCE_NAME_LDAP);\n-        userService.status(statusMod);\n-        statusMod.setType(StatusMod.ModType.REACTIVATE);\n-        userTO = userService.status(statusMod).readEntity(UserTO.class);\n+        statusPatch = new StatusPatch();\n+        statusPatch.setKey(userKey);\n+        statusPatch.setType(StatusPatchType.SUSPEND);\n+        statusPatch.setOnSyncope(false);\n+        statusPatch.getResources().add(RESOURCE_NAME_LDAP);\n+        userService.status(statusPatch);\n+        statusPatch.setType(StatusPatchType.REACTIVATE);\n+        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_TESTDB, AnyTypeKind.USER.name(), userKey);\n         assertFalse(getBooleanAttribute(connObjectTO, OperationalAttributes.ENABLE_NAME));\n \n         // Reactivate on syncope and db => syncope and db should show the user as active\n-        statusMod = new StatusMod();\n-        statusMod.setKey(userKey);\n-        statusMod.setType(StatusMod.ModType.REACTIVATE);\n-        statusMod.setOnSyncope(true);\n-        statusMod.getResources().add(RESOURCE_NAME_TESTDB);\n+        statusPatch = new StatusPatch();\n+        statusPatch.setKey(userKey);\n+        statusPatch.setType(StatusPatchType.REACTIVATE);\n+        statusPatch.setOnSyncope(true);\n+        statusPatch.getResources().add(RESOURCE_NAME_TESTDB);\n \n-        userTO = userService.status(statusMod).readEntity(UserTO.class);\n+        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n@@ -946,12 +942,14 @@ public void updateMultivalueAttribute() {\n         assertNotNull(loginDate);\n         assertEquals(1, loginDate.getValues().size());\n \n-        UserMod userMod = new UserMod();\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n \n-        userMod.setKey(userTO.getKey());\n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"loginDate\", \"2000-01-01\"));\n+        loginDate.getValues().add(\"2000-01-01\");\n+        userPatch.getPlainAttrs().add(new AttrPatch.Builder().\n+                operation(PatchOperation.ADD_REPLACE).attrTO(loginDate).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n \n         loginDate = userTO.getPlainAttrMap().get(\"loginDate\");\n@@ -975,12 +973,13 @@ public void issue213() {\n \n         assertEquals(userTO.getUsername(), username);\n \n-        UserMod userMod = new UserMod();\n+        UserPatch userPatch = new UserPatch();\n \n-        userMod.setKey(userTO.getKey());\n-        userMod.getResourcesToRemove().add(RESOURCE_NAME_TESTDB);\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(\n+                new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(RESOURCE_NAME_TESTDB).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertTrue(userTO.getResources().isEmpty());\n \n         jdbcTemplate.queryForObject(\"SELECT id FROM test WHERE id=?\", String.class, userTO.getUsername());\n@@ -994,12 +993,12 @@ public void issue234() {\n         UserTO userTO = createUser(inUserTO);\n         assertNotNull(userTO);\n \n-        UserMod userMod = new UserMod();\n+        UserPatch userPatch = new UserPatch();\n \n-        userMod.setKey(userTO.getKey());\n-        userMod.setUsername(\"1\" + userTO.getUsername());\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setUsername(new StringReplacePatchItem.Builder().value(\"1\" + userTO.getUsername()).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n         assertEquals(\"1\" + inUserTO.getUsername(), userTO.getUsername());\n     }\n@@ -1023,10 +1022,10 @@ public void issue270() {\n         toBeUpdated.getVirAttrs().add(virtual);\n \n         // 2. try to update by adding a resource, but no password: must fail\n-        UserMod userMod = AnyOperations.diff(toBeUpdated, original);\n-        assertNotNull(userMod);\n+        UserPatch userPatch = AnyOperations.diff(toBeUpdated, original, false);\n+        assertNotNull(userPatch);\n \n-        toBeUpdated = updateUser(userMod);\n+        toBeUpdated = updateUser(userPatch);\n         assertNotNull(toBeUpdated);\n \n         assertFalse(toBeUpdated.getVirAttrs().isEmpty());\n@@ -1045,30 +1044,26 @@ public final void issue280() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"123password\");\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n-\n-        final StatusMod st = new StatusMod();\n-        st.setOnSyncope(false);\n-        st.getResources().add(RESOURCE_NAME_TESTDB);\n-        userMod.setPwdPropRequest(st);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).\n+                resource(RESOURCE_NAME_TESTDB).value(\"123password\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n \n-        final List<PropagationStatus> propagations = userTO.getPropagationStatusTOs();\n-\n+        List<PropagationStatus> propagations = userTO.getPropagationStatusTOs();\n         assertNotNull(propagations);\n         assertEquals(1, propagations.size());\n \n-        final PropagationTaskExecStatus status = propagations.get(0).getStatus();\n-        final String resource = propagations.get(0).getResource();\n-\n+        PropagationTaskExecStatus status = propagations.get(0).getStatus();\n         assertNotNull(status);\n-        assertEquals(RESOURCE_NAME_TESTDB, resource);\n         assertTrue(status.isSuccessful());\n+\n+        String resource = propagations.get(0).getResource();\n+        assertEquals(RESOURCE_NAME_TESTDB, resource);\n     }\n \n     @Test\n@@ -1119,10 +1114,7 @@ public void groupAttrPropagation() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(1L);\n-\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(1L).build());\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n@@ -1151,11 +1143,11 @@ public void noContent() throws IOException {\n         user = getObject(response.getLocation(), UserService.class, UserTO.class);\n         assertNotNull(user);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(user.getKey());\n-        userMod.setPassword(\"password321\");\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"password321\").build());\n \n-        response = noContentService.update(userMod);\n+        response = noContentService.update(userPatch);\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n         assertEquals(StringUtils.EMPTY, IOUtils.toString((InputStream) response.getEntity()));\n@@ -1236,15 +1228,8 @@ public void issueSYNCOPE108() {\n         userTO.getAuxClasses().add(\"csv\");\n         userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n \n-        MembershipTO memb12 = new MembershipTO();\n-        memb12.setRightKey(12L);\n-\n-        userTO.getMemberships().add(memb12);\n-\n-        MembershipTO memb13 = new MembershipTO();\n-        memb13.setRightKey(13L);\n-\n-        userTO.getMemberships().add(memb13);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(12L).build());\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(13L).build());\n \n         userTO.getResources().add(RESOURCE_NAME_CSV);\n \n@@ -1260,12 +1245,13 @@ public void issueSYNCOPE108() {\n         // -----------------------------------\n         // Remove the first membership: de-provisioning shouldn't happen\n         // -----------------------------------\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(actual.getKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(actual.getKey());\n \n-        userMod.getMembershipsToRemove().add(actual.getMemberships().get(0).getRightKey());\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().\n+                operation(PatchOperation.DELETE).membershipTO(actual.getMemberships().get(0)).build());\n \n-        actual = updateUser(userMod);\n+        actual = updateUser(userPatch);\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n \n@@ -1276,12 +1262,13 @@ public void issueSYNCOPE108() {\n         // -----------------------------------\n         // Remove the resource assigned directly: de-provisioning shouldn't happen\n         // -----------------------------------\n-        userMod = new UserMod();\n-        userMod.setKey(actual.getKey());\n+        userPatch = new UserPatch();\n+        userPatch.setKey(actual.getKey());\n \n-        userMod.getResourcesToRemove().add(actual.getResources().iterator().next());\n+        userPatch.getResources().add(new StringPatchItem.Builder().operation(PatchOperation.DELETE).\n+                value(actual.getResources().iterator().next()).build());\n \n-        actual = updateUser(userMod);\n+        actual = updateUser(userPatch);\n         assertNotNull(actual);\n         assertEquals(1, actual.getMemberships().size());\n         assertFalse(actual.getResources().isEmpty());\n@@ -1293,12 +1280,13 @@ public void issueSYNCOPE108() {\n         // -----------------------------------\n         // Remove the first membership: de-provisioning should happen\n         // -----------------------------------\n-        userMod = new UserMod();\n-        userMod.setKey(actual.getKey());\n+        userPatch = new UserPatch();\n+        userPatch.setKey(actual.getKey());\n \n-        userMod.getMembershipsToRemove().add(actual.getMemberships().get(0).getRightKey());\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().\n+                operation(PatchOperation.DELETE).membershipTO(actual.getMemberships().get(0)).build());\n \n-        actual = updateUser(userMod);\n+        actual = updateUser(userPatch);\n         assertNotNull(actual);\n         assertTrue(actual.getMemberships().isEmpty());\n         assertTrue(actual.getResources().isEmpty());\n@@ -1400,13 +1388,14 @@ public void issueSYNCOPE266() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n \n         // this resource has not a mapping for Password\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_UPDATE);\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_UPDATE).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n     }\n \n@@ -1454,15 +1443,12 @@ public void issueSYNCOPE122() {\n         final String pwdOnTestDb2 = pwdOnTestDb2Attr.getValues().iterator().next();\n \n         // 2. request to change password only on testdb (no Syncope, no testdb2)\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(getUUIDString());\n-        StatusMod pwdPropRequest = new StatusMod();\n-        pwdPropRequest.setOnSyncope(false);\n-        pwdPropRequest.getResources().add(RESOURCE_NAME_TESTDB);\n-        userMod.setPwdPropRequest(pwdPropRequest);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(getUUIDString()).onSyncope(false).\n+                resource(RESOURCE_NAME_TESTDB).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n \n         // 3a. Chech that only a single propagation took place\n         assertNotNull(userTO.getPropagationStatusTOs());\n@@ -1508,16 +1494,13 @@ public void isseSYNCOPE136AES() {\n             assertNotNull(userTO);\n \n             // 4. update user, assign a propagation primary resource but don't provide any password\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(userTO.getKey());\n-            userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(userTO.getKey());\n+            userPatch.getResources().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n+            userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_WS1).build());\n \n-            StatusMod st = new StatusMod();\n-            st.setOnSyncope(false);\n-            st.getResources().add(RESOURCE_NAME_WS1);\n-            userMod.setPwdPropRequest(st);\n-\n-            userTO = updateUser(userMod);\n+            userTO = updateUser(userPatch);\n             assertNotNull(userTO);\n \n             // 5. verify that propagation was successful\n@@ -1544,16 +1527,13 @@ public void isseSYNCOPE136Random() {\n         assertNotNull(userTO);\n \n         // 2. update user, assign a propagation primary resource but don't provide any password\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_LDAP);\n-\n-        StatusMod st = new StatusMod();\n-        st.setOnSyncope(false);\n-        st.getResources().add(RESOURCE_NAME_LDAP);\n-        userMod.setPwdPropRequest(st);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n+        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n \n         // 3. verify that propagation was successful\n@@ -1589,13 +1569,12 @@ public void mappingPurpose() {\n     @Test\n     public void issueSYNCOPE265() {\n         for (long key = 1; key <= 5; key++) {\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(key);\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(key);\n \n-            userMod.getPlainAttrsToRemove().add(\"type\");\n-            userMod.getPlainAttrsToUpdate().add(attrMod(\"type\", \"a type\"));\n+            userPatch.getPlainAttrs().add(attrAddReplacePatch(\"type\", \"a type\"));\n \n-            UserTO userTO = updateUser(userMod);\n+            UserTO userTO = updateUser(userPatch);\n \n             assertEquals(\"a type\", userTO.getPlainAttrMap().get(\"type\").getValues().get(0));\n         }\n@@ -1658,9 +1637,7 @@ public void issueSYNCOPE354() {\n         // 2. create user with LDAP resource and membership of the above group\n         UserTO userTO = getUniqueSampleTO(\"syncope354@syncope.apache.org\");\n         userTO.getResources().add(RESOURCE_NAME_LDAP);\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(groupTO.getKey());\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n         userTO = createUser(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n@@ -1673,11 +1650,12 @@ public void issueSYNCOPE354() {\n                 contains(\"uid=\" + userTO.getUsername() + \",ou=people,o=isp\"));\n \n         // 4. remove membership\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getMembershipsToRemove().add(userTO.getMemberships().get(0).getRightKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.DELETE).\n+                membershipTO(userTO.getMemberships().get(0)).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n \n         // 5. read group on resource, check that user DN was removed from uniqueMember\n@@ -1711,9 +1689,7 @@ public void issueSYNCOPE357() throws IOException {\n         userTO.getPlainAttrs().add(attrTO(\"obscure\", \"valueToBeObscured\"));\n         userTO.getPlainAttrs().add(attrTO(\"photo\",\n                 Base64Utility.encode(IOUtils.readBytesFromStream(getClass().getResourceAsStream(\"/favicon.jpg\")))));\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(groupTO.getKey());\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n         userTO = createUser(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n@@ -1752,23 +1728,22 @@ public void issueSYNCOPE383() {\n         assertNotNull(userTO);\n \n         // 2. assign resource without specifying a new pwd and check propagation failure\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n-        userTO = updateUser(userMod);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n+        userTO = updateUser(userPatch);\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n         assertFalse(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n         assertNotNull(userTO.getPropagationStatusTOs().get(0).getFailureReason());\n \n         // 3. request to change password only on testdb\n-        userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(getUUIDString() + \"abbcbcbddd123\");\n-        StatusMod pwdPropRequest = new StatusMod();\n-        pwdPropRequest.getResources().add(RESOURCE_NAME_TESTDB);\n-        userMod.setPwdPropRequest(pwdPropRequest);\n-\n-        userTO = updateUser(userMod);\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(getUUIDString() + \"abbcbcbddd123\").\n+                resource(RESOURCE_NAME_TESTDB).build());\n+\n+        userTO = updateUser(userPatch);\n         assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n         assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n     }\n@@ -1792,13 +1767,14 @@ public void issueSYNCOPE402() {\n \n         // 2. update assigning a resource NOT forcing mandatory constraints\n         // AND primary: must fail with PropagationException\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"newPassword123\");\n-\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n-        userTO = updateUser(userMod);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"newPassword123\").build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n+        userTO = updateUser(userPatch);\n \n         List<PropagationStatus> propagationStatuses = userTO.getPropagationStatusTOs();\n         PropagationStatus ws1PropagationStatus = null;\n@@ -1831,10 +1807,12 @@ public void unlink() {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        assertNotNull(userService.deassociate(actual.getKey(),\n-                ResourceDeassociationActionType.UNLINK,\n-                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.UNLINK);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_CSV);\n+\n+        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1864,11 +1842,12 @@ public void link() {\n             assertNotNull(e);\n         }\n \n-        final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class));\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setAction(ResourceAssociationAction.LINK);\n+        associationPatch.getResources().add(RESOURCE_NAME_CSV);\n \n-        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.LINK, associationMod).readEntity(\n-                BulkActionResult.class));\n+        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1897,10 +1876,12 @@ public void unassign() {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        assertNotNull(userService.deassociate(actual.getKey(),\n-                ResourceDeassociationActionType.UNASSIGN,\n-                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_CSV);\n+\n+        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1935,13 +1916,13 @@ public void assign() {\n             assertNotNull(e);\n         }\n \n-        ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class));\n-        associationMod.setChangePwd(true);\n-        associationMod.setPassword(\"password\");\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setValue(\"password\");\n+        associationPatch.setAction(ResourceAssociationAction.ASSIGN);\n+        associationPatch.getResources().add(RESOURCE_NAME_CSV);\n \n-        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.ASSIGN, associationMod)\n-                .readEntity(BulkActionResult.class));\n+        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -1964,10 +1945,12 @@ public void deprovision() {\n         assertNotNull(actual);\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        assertNotNull(userService.deassociate(actual.getKey(),\n-                ResourceDeassociationActionType.DEPROVISION,\n-                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_CSV);\n+\n+        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -2002,13 +1985,13 @@ public void provision() {\n             assertNotNull(e);\n         }\n \n-        ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class));\n-        associationMod.setChangePwd(true);\n-        associationMod.setPassword(\"password\");\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setValue(\"password\");\n+        associationPatch.setAction(ResourceAssociationAction.PROVISION);\n+        associationPatch.getResources().add(RESOURCE_NAME_CSV);\n \n-        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.PROVISION, associationMod).\n-                readEntity(BulkActionResult.class));\n+        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -2037,24 +2020,25 @@ public void deprovisionUnlinked() {\n             assertNotNull(e);\n         }\n \n-        final ResourceAssociationMod associationMod = new ResourceAssociationMod();\n-        associationMod.getTargetResources().addAll(CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class));\n-        associationMod.setChangePwd(true);\n-        associationMod.setPassword(\"password\");\n+        AssociationPatch associationPatch = new AssociationPatch();\n+        associationPatch.setKey(actual.getKey());\n+        associationPatch.setValue(\"password\");\n+        associationPatch.setAction(ResourceAssociationAction.PROVISION);\n+        associationPatch.getResources().add(RESOURCE_NAME_CSV);\n \n-        assertNotNull(userService.associate(actual.getKey(), ResourceAssociationAction.PROVISION,\n-                associationMod)\n-                .readEntity(BulkActionResult.class));\n+        assertNotNull(userService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n         assertTrue(actual.getResources().isEmpty());\n         assertNotNull(resourceService.readConnObject(RESOURCE_NAME_CSV, AnyTypeKind.USER.name(), actual.getKey()));\n \n-        assertNotNull(userService.deassociate(actual.getKey(),\n-                ResourceDeassociationActionType.DEPROVISION,\n-                CollectionWrapper.wrap(RESOURCE_NAME_CSV, ResourceKey.class)).\n-                readEntity(BulkActionResult.class));\n+        DeassociationPatch deassociationPatch = new DeassociationPatch();\n+        deassociationPatch.setKey(actual.getKey());\n+        deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n+        deassociationPatch.getResources().add(RESOURCE_NAME_CSV);\n+\n+        assertNotNull(userService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n         actual = userService.read(actual.getKey());\n         assertNotNull(actual);\n@@ -2082,12 +2066,11 @@ public void issueSYNCOPE420() {\n         userTO = createUser(userTO);\n         assertEquals(\"6\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getPlainAttrsToRemove().add(\"makeItDouble\");\n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"makeItDouble\", \"7\"));\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"makeItDouble\", \"7\"));\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertEquals(\"14\", userTO.getPlainAttrMap().get(\"makeItDouble\").getValues().get(0));\n     }\n \n@@ -2097,10 +2080,10 @@ public void issueSYNCOPE426() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"anotherPassword123\");\n-        userTO = userService.update(userMod).readEntity(UserTO.class);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n+        userTO = userService.update(userPatch).readEntity(UserTO.class);\n         assertNotNull(userTO);\n     }\n \n@@ -2113,11 +2096,12 @@ public void issueSYNCOPE435() {\n         assertNotNull(userTO);\n \n         // 2. try to update user by subscribing a resource - works but propagation is not even attempted\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_WS1);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS1).build());\n \n-        userTO = userService.update(userMod).readEntity(UserTO.class);\n+        userTO = userService.update(userPatch).readEntity(UserTO.class);\n         assertEquals(Collections.singleton(RESOURCE_NAME_WS1), userTO.getResources());\n         assertFalse(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n         assertTrue(userTO.getPropagationStatusTOs().get(0).getFailureReason().\n@@ -2135,18 +2119,18 @@ public void ifMatch() {\n         assertNotNull(etag);\n         assertTrue(StringUtils.isNotBlank(etag.getValue()));\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setUsername(userTO.getUsername() + \"XX\");\n-        userTO = userService.update(userMod).readEntity(UserTO.class);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"XX\").build());\n+        userTO = userService.update(userPatch).readEntity(UserTO.class);\n         assertTrue(userTO.getUsername().endsWith(\"XX\"));\n         EntityTag etag1 = adminClient.getLatestEntityTag(userService);\n         assertFalse(etag.getValue().equals(etag1.getValue()));\n \n         UserService ifMatchService = adminClient.ifMatch(UserService.class, etag);\n-        userMod.setUsername(userTO.getUsername() + \"YY\");\n+        userPatch.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"YY\").build());\n         try {\n-            ifMatchService.update(userMod);\n+            ifMatchService.update(userPatch);\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.ConcurrentModification, e.getType());\n@@ -2175,12 +2159,12 @@ public void issueSYNCOPE454() throws NamingException {\n                 connObject.getPlainAttrMap().get(Name.NAME).getValues().get(0)));\n \n         // 4. update user without any password change request\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPwdPropRequest(new StatusMod());\n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"surname\", \"surname2\"));\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"surname2\"));\n \n-        userService.update(userMod);\n+        userService.update(userPatch);\n \n         // 5. try (and succeed again) to perform simple LDAP binding: password has not changed\n         assertNotNull(getLdapRemoteObject(\n@@ -2229,12 +2213,12 @@ public void issueSYNCOPE493() {\n         assertEquals(7, mapItems.size());\n \n         // 3.  update user and check firstname propagation        \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPwdPropRequest(new StatusMod());\n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"firstname\", \"firstnameNew\"));\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"firstname\", \"firstnameNew\"));\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n         assertEquals(1, userTO.getPropagationStatusTOs().size());\n         assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n@@ -2275,16 +2259,14 @@ public void issueSYNCOPE505DB() throws Exception {\n         resourceService.update(resourceTO);\n \n         // 3. Add a db resource to the User\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(user.getKey());\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n \n-        final StatusMod st = new StatusMod();\n-        st.setOnSyncope(false);\n-        st.getResources().add(RESOURCE_NAME_TESTDB);\n-        userMod.setPwdPropRequest(st);\n+        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n \n-        user = updateUser(userMod);\n+        user = updateUser(userPatch);\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n \n@@ -2318,16 +2300,14 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         resourceService.update(resourceTO);\n \n         // 3. Add a resource to the User\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(user.getKey());\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_LDAP);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(user.getKey());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_LDAP).build());\n \n-        final StatusMod st = new StatusMod();\n-        st.setOnSyncope(false);\n-        st.getResources().add(RESOURCE_NAME_LDAP);\n-        userMod.setPwdPropRequest(st);\n+        userPatch.setPassword(new PasswordPatch.Builder().onSyncope(false).resource(RESOURCE_NAME_LDAP).build());\n \n-        user = updateUser(userMod);\n+        user = updateUser(userPatch);\n         assertNotNull(user);\n         assertEquals(1, user.getResources().size());\n \n@@ -2481,11 +2461,11 @@ public void issueSYNCOPE647() {\n         assertNotNull(connObjectTO);\n         assertEquals(\"postalAddress\", connObjectTO.getPlainAttrMap().get(\"postalAddress\").getValues().get(0));\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(actual.getKey());\n-        userMod.getPlainAttrsToUpdate().add(attrMod(\"postalAddress\", \"newPostalAddress\"));\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(actual.getKey());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"postalAddress\", \"newPostalAddress\"));\n \n-        actual = updateUser(userMod);\n+        actual = updateUser(userPatch);\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.USER.name(), actual.getKey());\n         assertNotNull(connObjectTO);\n@@ -2558,11 +2538,12 @@ public void issueSYNCOPE686() {\n             assertNotNull(userTO);\n \n             // 5. update user with the new group, and don't provide any password\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(userTO.getKey());\n-            userMod.getMembershipsToAdd().add(group.getKey());\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(userTO.getKey());\n+            userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n+                    membershipTO(new MembershipTO.Builder().group(group.getKey()).build()).build());\n \n-            userTO = updateUser(userMod);\n+            userTO = updateUser(userPatch);\n             assertNotNull(userTO);\n \n             // 5. verify that propagation was successful"},{"sha":"97df025b4eea366c2c0a49ab6c98f505ca99b5d7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":35,"deletions":25,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -37,14 +37,19 @@\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.MembershipPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -91,9 +96,7 @@ public void createAndApprove() {\n \n         // self-create user with membership: goes 'createApproval' with resources and membership but no propagation\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"anonymous@syncope.apache.org\");\n-        MembershipTO membership = new MembershipTO();\n-        membership.setRightKey(3L);\n-        userTO.getMemberships().add(membership);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(3L).build());\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n         SyncopeClient anonClient = clientFactory.createAnonymous();\n@@ -148,12 +151,12 @@ public void updateWithoutApproval() {\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n         // 2. self-update (username) - works\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(created.getKey());\n-        userMod.setUsername(created.getUsername() + \"XX\");\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(created.getKey());\n+        userPatch.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n-        UserTO updated = authClient.getService(UserSelfService.class).update(userMod).\n+        UserTO updated = authClient.getService(UserSelfService.class).update(userPatch).\n                 readEntity(UserTO.class);\n         assertNotNull(updated);\n         assertEquals(ActivitiDetector.isActivitiEnabledForUsers(syncopeService)\n@@ -171,19 +174,20 @@ public void updateWithApproval() {\n         assertFalse(created.getUsername().endsWith(\"XX\"));\n \n         // 2. self-update (username + memberships + resource) - works but needs approval\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(created.getKey());\n-        userMod.setUsername(created.getUsername() + \"XX\");\n-        userMod.getMembershipsToAdd().add(7L);\n-        userMod.getResourcesToAdd().add(RESOURCE_NAME_TESTDB);\n-        userMod.setPassword(\"newPassword123\");\n-        StatusMod statusMod = new StatusMod();\n-        statusMod.setOnSyncope(false);\n-        statusMod.getResources().add(RESOURCE_NAME_TESTDB);\n-        userMod.setPwdPropRequest(statusMod);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(created.getKey());\n+        userPatch.setUsername(new StringReplacePatchItem.Builder().value(created.getUsername() + \"XX\").build());\n+        userPatch.getMemberships().add(new MembershipPatch.Builder().\n+                operation(PatchOperation.ADD_REPLACE).\n+                membershipTO(new MembershipTO.Builder().group(7L).build()).\n+                build());\n+        userPatch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_TESTDB).build());\n+        userPatch.setPassword(new PasswordPatch.Builder().\n+                value(\"newPassword123\").onSyncope(false).resource(RESOURCE_NAME_TESTDB).build());\n \n         SyncopeClient authClient = clientFactory.create(created.getUsername(), \"password123\");\n-        UserTO updated = authClient.getService(UserSelfService.class).update(userMod).\n+        UserTO updated = authClient.getService(UserSelfService.class).update(userPatch).\n                 readEntity(UserTO.class);\n         assertNotNull(updated);\n         assertEquals(\"updateApproval\", updated.getStatus());\n@@ -354,16 +358,22 @@ public void passwordResetWithoutSecurityQuestion() {\n \n     @Test\n     public void mustChangePassword() {\n+        // PRE: reset vivaldi's password\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(3L);\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"password321\").build());\n+        userService.update(userPatch);\n+\n         // 0. access as vivaldi -> succeed\n-        SyncopeClient vivaldiClient = clientFactory.create(\"vivaldi\", \"password\");\n+        SyncopeClient vivaldiClient = clientFactory.create(\"vivaldi\", \"password321\");\n         Pair<Map<String, Set<String>>, UserTO> self = vivaldiClient.self();\n         assertFalse(self.getRight().isMustChangePassword());\n \n         // 1. update user vivaldi (3) requirig password update\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(3L);\n-        userMod.setMustChangePassword(true);\n-        UserTO vivaldi = updateUser(userMod);\n+        userPatch = new UserPatch();\n+        userPatch.setKey(3L);\n+        userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(true).build());\n+        UserTO vivaldi = updateUser(userPatch);\n         assertTrue(vivaldi.isMustChangePassword());\n \n         // 2. attempt to access -> fail"},{"sha":"d7171e4c3582c4549f04bc2a2c8cb077d2993635","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserWorkflowITCase.java","status":"modified","additions":16,"deletions":18,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserWorkflowITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -30,12 +30,15 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.LongPatchItem;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n import org.junit.Assume;\n import org.junit.FixMethodOrder;\n@@ -55,9 +58,7 @@ public void createWithReject() {\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n         // User with group 9 are defined in workflow as subject to approval\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(9L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(9L).build());\n \n         // 1. create user with group 9\n         userTO = createUser(userTO);\n@@ -78,10 +79,11 @@ public void createWithReject() {\n         // designated for approval in workflow definition: fail\n         UserTO rossini = userService.read(1L);\n         if (!rossini.getRoles().contains(2L)) {\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(1L);\n-            userMod.getRolesToAdd().add(2L);\n-            rossini = updateUser(userMod);\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(1L);\n+            userPatch.getRoles().add(new LongPatchItem.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).value(2L).build());\n+            rossini = updateUser(userPatch);\n         }\n         assertTrue(rossini.getRoles().contains(2L));\n \n@@ -137,9 +139,7 @@ public void createWithApproval() {\n         userTO.getResources().add(RESOURCE_NAME_TESTDB);\n \n         // User with group 9 are defined in workflow as subject to approval\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(9L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(9L).build());\n \n         // 1. create user with group 9 (and verify that no propagation occurred)\n         userTO = createUser(userTO);\n@@ -199,11 +199,11 @@ public void createWithApproval() {\n         assertNull(exception);\n \n         // 6. update user\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.setPassword(\"anotherPassword123\");\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.setPassword(new PasswordPatch.Builder().value(\"anotherPassword123\").build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n     }\n \n@@ -223,9 +223,7 @@ public void issueSYNCOPE15() {\n         userTO.getMemberships().clear();\n \n         // User with group 9 are defined in workflow as subject to approval\n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(9L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(9L).build());\n \n         // 1. create user with group 9 (and verify that no propagation occurred)\n         userTO = createUser(userTO);"},{"sha":"f321dfacacb67019bbc2c79d914b003c5f5ebcce","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":81,"deletions":119,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -23,15 +23,16 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n-import java.util.Collections;\n import java.util.Locale;\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.common.lib.mod.AttrMod;\n-import org.apache.syncope.common.lib.mod.StatusMod;\n-import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -46,7 +47,9 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.FixMethodOrder;\n@@ -61,9 +64,7 @@ public class VirAttrITCase extends AbstractITCase {\n     public void issueSYNCOPE16() {\n         UserTO userTO = UserITCase.getUniqueSampleTO(\"issue16@apache.org\");\n \n-        MembershipTO membershipTO = new MembershipTO();\n-        membershipTO.setRightKey(8L);\n-        userTO.getMemberships().add(membershipTO);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(8L).build());\n \n         // 1. create user\n         UserTO actual = createUser(userTO);\n@@ -74,13 +75,12 @@ public void issueSYNCOPE16() {\n         assertNotNull(actual);\n         assertEquals(\"virtualvalue\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(actual.getKey());\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-        userMod.getVirAttrsToUpdate().add(attrMod(\"virtualdata\", \"virtualupdated\"));\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(actual.getKey());\n+        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"virtualupdated\"));\n \n         // 3. update virtual attribute\n-        actual = updateUser(userMod);\n+        actual = updateUser(userPatch);\n         assertNotNull(actual);\n \n         // 4. check for virtual attribute value\n@@ -112,17 +112,11 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // update user virtual attribute and check virtual attribute value update propagation\n         // ----------------------------------\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"virtualvalue2\"));\n \n-        AttrMod attrMod = new AttrMod();\n-        attrMod.setSchema(\"virtualdata\");\n-        attrMod.getValuesToBeRemoved().add(\"virtualvalue\");\n-        attrMod.getValuesToBeAdded().add(\"virtualvalue2\");\n-\n-        userMod.getVirAttrsToUpdate().add(attrMod);\n-\n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n         assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n         assertEquals(\"ws-target-resource-2\", userTO.getPropagationStatusTOs().get(0).getResource());\n@@ -136,21 +130,21 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // suspend/reactivate user and check virtual attribute value (unchanged)\n         // ----------------------------------\n-        StatusMod statusMod = new StatusMod();\n-        statusMod.setKey(userTO.getKey());\n-        statusMod.setType(StatusMod.ModType.SUSPEND);\n-        userTO = userService.status(statusMod).readEntity(UserTO.class);\n+        StatusPatch statusPatch = new StatusPatch();\n+        statusPatch.setKey(userTO.getKey());\n+        statusPatch.setType(StatusPatchType.SUSPEND);\n+        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n         assertNotNull(connObjectTO);\n         assertFalse(connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().isEmpty());\n         assertEquals(\"virtualvalue2\", connObjectTO.getPlainAttrMap().get(\"NAME\").getValues().get(0));\n \n-        statusMod = new StatusMod();\n-        statusMod.setKey(userTO.getKey());\n-        statusMod.setType(StatusMod.ModType.REACTIVATE);\n-        userTO = userService.status(statusMod).readEntity(UserTO.class);\n+        statusPatch = new StatusPatch();\n+        statusPatch.setKey(userTO.getKey());\n+        statusPatch.setType(StatusPatchType.REACTIVATE);\n+        userTO = userService.status(statusPatch).readEntity(UserTO.class);\n         assertEquals(\"active\", userTO.getStatus());\n \n         connObjectTO = resourceService.readConnObject(RESOURCE_NAME_WS2, AnyTypeKind.USER.name(), userTO.getKey());\n@@ -162,17 +156,11 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // update user attribute and check virtual attribute value (unchanged)\n         // ----------------------------------\n-        userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-\n-        attrMod = new AttrMod();\n-        attrMod.setSchema(\"surname\");\n-        attrMod.getValuesToBeRemoved().add(\"Surname\");\n-        attrMod.getValuesToBeAdded().add(\"Surname2\");\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getPlainAttrs().add(attrAddReplacePatch(\"surname\", \"Surname2\"));\n \n-        userMod.getPlainAttrsToUpdate().add(attrMod);\n-\n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n         assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n         assertEquals(RESOURCE_NAME_WS2, userTO.getPropagationStatusTOs().get(0).getResource());\n@@ -190,11 +178,13 @@ public void issueSYNCOPE260() {\n         // ----------------------------------\n         // remove user virtual attribute and check virtual attribute value (reset)\n         // ----------------------------------\n-        userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getVirAttrs().add(new AttrPatch.Builder().\n+                operation(PatchOperation.DELETE).\n+                attrTO(new AttrTO.Builder().schema(\"virtualdata\").build()).build());\n \n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n         assertTrue(userTO.getVirAttrs().isEmpty());\n         assertFalse(userTO.getPropagationStatusTOs().isEmpty());\n@@ -249,18 +239,12 @@ public void virAttrCache() {\n         actual = userService.read(actual.getKey());\n         assertEquals(\"virattrcache\", actual.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(actual.getKey());\n-\n-        AttrMod virtualdata = new AttrMod();\n-        virtualdata.setSchema(\"virtualdata\");\n-        virtualdata.getValuesToBeAdded().add(\"virtualupdated\");\n-\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-        userMod.getVirAttrsToUpdate().add(virtualdata);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(actual.getKey());\n+        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"virtualupdated\"));\n \n         // 5. update virtual attribute\n-        actual = updateUser(userMod);\n+        actual = updateUser(userPatch);\n         assertNotNull(actual);\n \n         // 6. check for virtual attribute value\n@@ -318,25 +302,26 @@ public void issueSYNCOPE397() {\n             assertNotNull(created);\n             assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n             assertEquals(\"test@testone.org\", created.getVirAttrs().iterator().next().getValues().get(0));\n-            \n+\n             // update user\n             UserTO toBeUpdated = userService.read(created.getKey());\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(toBeUpdated.getKey());\n-            userMod.setPassword(\"password234\");\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(toBeUpdated.getKey());\n+            userPatch.setPassword(new PasswordPatch.Builder().value(\"password234\").build());\n             // assign new resource to user\n-            userMod.getResourcesToAdd().add(RESOURCE_NAME_WS2);\n-            //modify virtual attribute\n-            userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-            userMod.getVirAttrsToUpdate().add(attrMod(\"virtualdata\", \"test@testoneone.com\"));\n+            userPatch.getResources().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).value(RESOURCE_NAME_WS2).build());\n+            // modify virtual attribute\n+            userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"test@testoneone.com\"));\n \n             // check Syncope change password\n-            StatusMod pwdPropRequest = new StatusMod();\n-            pwdPropRequest.setOnSyncope(true);\n-            pwdPropRequest.getResources().add(RESOURCE_NAME_WS2);\n-            userMod.setPwdPropRequest(pwdPropRequest);\n+            userPatch.setPassword(new PasswordPatch.Builder().\n+                    value(\"password234\").\n+                    onSyncope(true).\n+                    resource(RESOURCE_NAME_WS2).\n+                    build());\n \n-            toBeUpdated = updateUser(userMod);\n+            toBeUpdated = updateUser(userPatch);\n             assertNotNull(toBeUpdated);\n             assertEquals(\"test@testoneone.com\", toBeUpdated.getVirAttrs().iterator().next().getValues().get(0));\n             // check if propagates correctly with assertEquals on size of tasks list\n@@ -386,17 +371,11 @@ public void issueSYNCOPE442() {\n \n         connectorService.update(connInstanceTO);\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(actual.getKey());\n-\n-        AttrMod virtualdata = new AttrMod();\n-        virtualdata.setSchema(\"virtualdata\");\n-        virtualdata.getValuesToBeAdded().add(\"virtualupdated\");\n-\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-        userMod.getVirAttrsToUpdate().add(virtualdata);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(actual.getKey());\n+        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"virtualupdated\"));\n \n-        actual = updateUser(userMod);\n+        actual = updateUser(userPatch);\n         assertNotNull(actual);\n         // ----------------------------------------\n \n@@ -519,9 +498,7 @@ public void issueSYNCOPE453() {\n         userTO.getDerAttrs().clear();\n         userTO.getMemberships().clear();\n \n-        MembershipTO membership = new MembershipTO();\n-        membership.setRightKey(groupTO.getKey());\n-        userTO.getMemberships().add(membership);\n+        userTO.getMemberships().add(new MembershipTO.Builder().group(groupTO.getKey()).build());\n \n         userTO = createUser(userTO);\n         assertEquals(2, userTO.getPropagationStatusTOs().size());\n@@ -562,15 +539,14 @@ public void issueSYNCOPE459() {\n \n         assertNotNull(userTO.getVirAttrMap().get(\"virtualReadOnly\"));\n \n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n+        userPatch.getVirAttrs().add(new AttrPatch.Builder().\n+                operation(PatchOperation.ADD_REPLACE).\n+                attrTO(new AttrTO.Builder().schema(\"virtualdata\").build()).\n+                build());\n \n-        AttrMod virtualdata = new AttrMod();\n-        virtualdata.setSchema(\"virtualdata\");\n-\n-        userMod.getVirAttrsToUpdate().add(virtualdata);\n-\n-        userTO = updateUser(userMod);\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO.getVirAttrMap().get(\"virtualdata\"));\n     }\n \n@@ -585,32 +561,20 @@ public void issueSYNCOPE501() {\n         userTO.getResources().add(RESOURCE_NAME_DBVIRATTR);\n \n         // virtualdata is mapped with username\n-        final AttrTO virtualData = attrTO(\"virtualdata\", \"syncope501@apache.org\");\n-        userTO.getVirAttrs().add(virtualData);\n+        userTO.getVirAttrs().add(attrTO(\"virtualdata\", \"syncope501@apache.org\"));\n \n         userTO = createUser(userTO);\n \n         assertNotNull(userTO.getVirAttrMap().get(\"virtualdata\"));\n         assertEquals(\"syncope501@apache.org\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n \n         // 2. update virtual attribute\n-        UserMod userMod = new UserMod();\n-        userMod.setKey(userTO.getKey());\n-\n-        final StatusMod statusMod = new StatusMod();\n-        statusMod.getResources().addAll(Collections.<String>emptySet());\n-        statusMod.setOnSyncope(false);\n-\n-        userMod.setPwdPropRequest(statusMod);\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getKey());\n         // change virtual attribute value\n-        final AttrMod virtualDataMod = new AttrMod();\n-        virtualDataMod.setSchema(\"virtualdata\");\n-        virtualDataMod.getValuesToBeAdded().add(\"syncope501_updated@apache.org\");\n-        virtualDataMod.getValuesToBeRemoved().add(\"syncope501@apache.org\");\n-        userMod.getVirAttrsToUpdate().add(virtualDataMod);\n-        userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-\n-        userTO = updateUser(userMod);\n+        userPatch.getVirAttrs().add(attrAddReplacePatch(\"virtualdata\", \"syncope501_updated@apache.org\"));\n+\n+        userTO = updateUser(userPatch);\n         assertNotNull(userTO);\n \n         // 3. check that user virtual attribute has really been updated \n@@ -685,19 +649,17 @@ public boolean evaluate(final MappingItemTO item) {\n             assertTrue(created.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom2.org\"));\n \n             // update user\n-            UserMod userMod = new UserMod();\n-            userMod.setKey(created.getKey());\n-            //modify virtual attribute\n-            userMod.getVirAttrsToRemove().add(\"virtualdata\");\n-\n-            final AttrMod emailMod = new AttrMod();\n-            emailMod.setSchema(\"virtualdata\");\n-            emailMod.getValuesToBeAdded().add(\"test@issue691.dom3.org\");\n-            emailMod.getValuesToBeAdded().add(\"test@issue691.dom4.org\");\n-\n-            userMod.getVirAttrsToUpdate().add(emailMod);\n-\n-            final UserTO updated = updateUser(userMod);\n+            UserPatch userPatch = new UserPatch();\n+            userPatch.setKey(created.getKey());\n+            // modify virtual attribute\n+            userPatch.getVirAttrs().add(new AttrPatch.Builder().\n+                    operation(PatchOperation.ADD_REPLACE).\n+                    attrTO(new AttrTO.Builder().schema(\"virtualdata\").\n+                            value(\"test@issue691.dom3.org\").\n+                            value(\"test@issue691.dom4.org\").\n+                            build()).build());\n+\n+            UserTO updated = updateUser(userPatch);\n             assertNotNull(updated);\n             assertEquals(2, updated.getVirAttrs().iterator().next().getValues().size(), 0);\n             assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom3.org\"));"},{"sha":"aff8442dd8eb2fa3871bbd6f16ac3869e81e60f9","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9f73fa43555a47a455e121ee8d52b72925ac9b4f/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9f73fa43555a47a455e121ee8d52b72925ac9b4f/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=9f73fa43555a47a455e121ee8d52b72925ac9b4f","patch":"@@ -330,7 +330,7 @@ under the License.\n \n     <camel.version>2.15.3</camel.version>\t\n \n-    <jackson.version>2.6.1</jackson.version>\n+    <jackson.version>2.6.2</jackson.version>\n \n     <spring.version>4.2.1.RELEASE</spring.version>\n     <spring-security.version>4.0.2.RELEASE</spring-security.version>\n@@ -497,7 +497,7 @@ under the License.\n         <groupId>org.apache.cxf</groupId>\n         <artifactId>cxf-rt-rs-client</artifactId>\n         <version>${cxf.version}</version>\n-      </dependency>      \n+      </dependency>\n       <!-- /CXF -->\n       \n       <!-- Camel -->"}]}