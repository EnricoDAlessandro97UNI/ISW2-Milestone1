{"sha":"a272484e2e32b9e817caacf55b82c6aa6c39040c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmEyNzI0ODRlMmUzMmI5ZTgxN2NhYWNmNTViODJjNmFhNmMzOTA0MGM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-05-25T08:49:00Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-05-25T08:49:00Z"},"message":"Merge from 0_5_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246956 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a58a486a6492ce2d7c1d1e408198825bc4ef521d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a58a486a6492ce2d7c1d1e408198825bc4ef521d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a272484e2e32b9e817caacf55b82c6aa6c39040c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a272484e2e32b9e817caacf55b82c6aa6c39040c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a272484e2e32b9e817caacf55b82c6aa6c39040c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a272484e2e32b9e817caacf55b82c6aa6c39040c/comments","author":null,"committer":null,"parents":[{"sha":"5d6e167af1847d5aa0d76e706d408fe7db12938d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5d6e167af1847d5aa0d76e706d408fe7db12938d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5d6e167af1847d5aa0d76e706d408fe7db12938d"}],"stats":{"total":599,"additions":289,"deletions":310},"files":[{"sha":"631eea1de2ff4c06091a517531bdff5d967c71af","filename":"console/src/main/java/org/syncope/console/SyncopeApplication.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -27,6 +27,7 @@\n import org.apache.wicket.authorization.strategies.role.RoleAuthorizationStrategy;\n import org.apache.wicket.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.protocol.http.WebRequest;\n@@ -84,7 +85,10 @@ protected void init() {\n     }\n \n     public void setupNavigationPane(final WebPage page,\n-            final XMLRolesReader xmlRolesReader) {\n+            final XMLRolesReader xmlRolesReader, final String version) {\n+\n+        page.add(new Label(\"version\", \"Console: \" + version\n+                + \"; Core: \" + SyncopeSession.get().getCoreVersion()));\n \n         BookmarkablePageLink schemaLink =\n                 new BookmarkablePageLink(\"schema\", Schema.class);"},{"sha":"7849b3660d0413dfa252960ddca46636e9ae346a","filename":"console/src/main/java/org/syncope/console/SyncopeSession.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -26,6 +26,8 @@ public class SyncopeSession extends WebSession {\n \n     private String userId;\n \n+    private String coreVersion;\n+\n     private Roles roles = new Roles();\n \n     public static SyncopeSession get() {\n@@ -44,6 +46,14 @@ public void setUserId(final String userId) {\n         this.userId = userId;\n     }\n \n+    public String getCoreVersion() {\n+        return coreVersion;\n+    }\n+\n+    public void setCoreVersion(String coreVersion) {\n+        this.coreVersion = coreVersion;\n+    }\n+\n     public void setEntitlements(final String[] entitlements) {\n         roles = new Roles(entitlements);\n     }"},{"sha":"cd218d19f69364f1a7504cca2fa0cc4e2e6783b0","filename":"console/src/main/java/org/syncope/console/pages/BasePage.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -41,6 +41,9 @@ public class BasePage extends WebPage implements IAjaxIndicatorAware {\n     @SpringBean\n     protected XMLRolesReader xmlRolesReader;\n \n+    @SpringBean(name = \"version\")\n+    private String version;\n+\n     protected FeedbackPanel feedbackPanel;\n \n     public BasePage() {\n@@ -63,7 +66,7 @@ public BasePage(final PageParameters parameters) {\n \n     private void pageSetup() {\n         ((SyncopeApplication) getApplication()).setupNavigationPane(\n-                this, xmlRolesReader);\n+                this, xmlRolesReader, version);\n \n         feedbackPanel = new FeedbackPanel(\"feedback\");\n         feedbackPanel.setOutputMarkupId(true);"},{"sha":"237f0cb84eb5188af26161e853664ea38b95f80b","filename":"console/src/main/java/org/syncope/console/pages/Login.java","status":"modified","additions":24,"deletions":2,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -14,11 +14,15 @@\n  */\n package org.syncope.console.pages;\n \n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.HttpMethod;\n import org.apache.commons.httpclient.UsernamePasswordCredentials;\n import org.apache.commons.httpclient.auth.AuthScope;\n+import org.apache.commons.httpclient.methods.GetMethod;\n import org.apache.wicket.PageParameters;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.markup.html.form.Button;\n@@ -52,6 +56,9 @@ public class Login extends WebPage {\n     @SpringBean\n     private RestTemplate restTemplate;\n \n+    @SpringBean\n+    private HttpClient httpClient;\n+\n     @SpringBean(name = \"baseURL\")\n     private String baseURL;\n \n@@ -99,6 +106,7 @@ public void onSubmit() {\n                             userIdField.getRawInput());\n                     SyncopeSession.get().setEntitlements(\n                             entitlements);\n+                    SyncopeSession.get().setCoreVersion(getCoreVersion());\n \n                     setResponsePage(WelcomePage.class, parameters);\n                 }\n@@ -112,7 +120,7 @@ public void onSubmit() {\n         add(new FeedbackPanel(\"feedback\"));\n     }\n \n-    public String[] authenticate(final String userId, final String password) {\n+    private String[] authenticate(final String userId, final String password) {\n         //1.Set provided credentials to check\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(\n@@ -132,10 +140,24 @@ public String[] authenticate(final String userId, final String password) {\n         return entitlements;\n     }\n \n+    private String getCoreVersion() {\n+        String version = \"\";\n+        try {\n+            HttpMethod get = new GetMethod(baseURL + \"../version.jsp\");\n+            httpClient.executeMethod(get);\n+            version = get.getResponseBodyAsString().trim();\n+        } catch (IOException e) {\n+            LOG.error(\"While fetching core version\", e);\n+            getSession().error(e.getMessage());\n+        }\n+\n+        return version;\n+    }\n+\n     /**\n      * Inner class which implements (custom) Locale DropDownChoice component.\n      */\n-    public class LocaleDropDown extends DropDownChoice<Locale> {\n+    private class LocaleDropDown extends DropDownChoice<Locale> {\n \n         private class LocaleRenderer extends ChoiceRenderer<Locale> {\n "},{"sha":"bc8ce63702b0ece7707d9651f136a84bf35986f9","filename":"console/src/main/java/org/syncope/console/pages/WelcomePage.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -16,11 +16,8 @@\n \n import org.apache.wicket.PageParameters;\n import org.apache.wicket.markup.html.WebPage;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.model.Model;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.syncope.console.SyncopeApplication;\n-import org.syncope.console.SyncopeSession;\n import org.syncope.console.commons.XMLRolesReader;\n \n /**\n@@ -31,13 +28,13 @@ public class WelcomePage extends WebPage {\n     @SpringBean\n     private XMLRolesReader xmlRolesReader;\n \n+    @SpringBean(name = \"version\")\n+    private String version;\n+\n     public WelcomePage(final PageParameters parameters) {\n         super(parameters);\n \n         ((SyncopeApplication) getApplication()).setupNavigationPane(\n-                this, xmlRolesReader);\n-\n-        add(new Label(\"userId\", new Model<String>(\n-                ((SyncopeSession) getSession()).getUserId())));\n+                this, xmlRolesReader, version);\n     }\n }"},{"sha":"56d176ddc1bc7bdc72c7cefef8a89ae79a301102","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -32,6 +32,10 @@\n         <constructor-arg value=\"${baseURL}\"/>\n     </bean>\n \n+    <bean id=\"version\" class=\"java.lang.String\">\n+        <constructor-arg value=\"${version}\"/>\n+    </bean>\n+\n     <bean id=\"authorizations\" class=\"java.lang.String\">\n         <constructor-arg value=\"authorizations.xml\"/>\n     </bean>"},{"sha":"e17cd8a10a6d8886bb58027ae56bb89093fa4fc4","filename":"console/src/main/resources/configuration.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -1 +1,2 @@\n baseURL=http://localhost:9080/syncope/rest/\n+version=${project.version}"},{"sha":"e1631613f3c1426cef83e9d8dbde8a14df7267a7","filename":"console/src/main/resources/org/syncope/console/pages/BasePage.html","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -99,8 +99,14 @@\n     </head>\n     <body>\n         <div id=\"navigationPane\">\n-            <img src=\"img/logo.png\" alt=\"syncope\" title=\"syncope\" id=\"logo\" />\n             <ul>\n+                <li style=\"position: absolute; left: 0px; top: 0px;width:240px;\">\n+                    <img src=\"img/logo.png\" alt=\"logo\"/><br />\n+                    <span style=\"position: absolute; left: 20px;color:#aaaaaa;\">\n+                        <span style=\"font-size:8px;\" wicket:id=\"version\"/>\n+                        &nbsp;\n+                    </span>\n+                </li>\n                 <li><span>\n                         <a href=#\" wicket:id=\"schema\"><img src=\"img/menu/notsel/schema.png\" alt=\"Schema\" width=\"80\" height=\"80\" /><br />\n                             <wicket:message key=\"schema\"/>"},{"sha":"65a31ab65ed6c4e5b29e5851ca814d21d03a82cc","filename":"console/src/main/resources/org/syncope/console/pages/WelcomePage.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.html?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -36,7 +36,7 @@\n     <body style=\"text-align:center\">\n         <div id=\"splash\">\n             <img src=\"img/logo.png\" alt=\"syncope\" title=\"syncope\" id=\"logo\" />\n-            <h2><wicket:message key=\"welcome\"/> <strong><span wicket:id=\"userId\"/></strong>!</h2>\n+            <h2><span style=\"font-size:8px;color:#aaaaaa;\" wicket:id=\"version\"/></h2>\n             <ul>\n                 <li><a href=\"#\" wicket:id=\"schema\" class=\"schema\"><img src=\"img/menu/schema.png\" alt=\"Schema\" width=\"80\" height=\"80\" /><br /><wicket:message key=\"schema\"/></a></li>\n                 <li><a href=\"#\" wicket:id=\"users\" class=\"users\"><img src=\"img/menu/users.png\" alt=\"Users\" width=\"80\" height=\"80\" /><br /><wicket:message key=\"users\"/></a></li>"},{"sha":"80ed2a71807482aafc026accf2c13049e4107a24","filename":"console/src/main/webapp/css/stile_sy.css","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Fstile_sy.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Fstile_sy.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Fstile_sy.css?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -175,12 +175,6 @@ select[disabled] {\n     height: 103px;\n }\n \n-#navigationPane img#logo {\n-    position: absolute;\n-    left: 0px;\n-    top: 0px;\n-}\n-\n #navigationPane a {\n     color: #FFF;\n     text-decoration: none;"},{"sha":"8175c144de030c203f2ce49b247a9f4d4c8e50b9","filename":"core/pom.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -292,6 +292,15 @@\n                 <inherited>true</inherited>\n                 <configuration>\n                     <attachClasses>true</attachClasses>\n+                    <webResources>\n+                        <resource>\n+                            <directory>src/main/webapp</directory>\n+                            <includes>\n+                                <include>**/*.jsp</include>\n+                            </includes>\n+                            <filtering>true</filtering>\n+                        </resource>\n+                    </webResources>\n                 </configuration>\n             </plugin>\n "},{"sha":"0f1d8eab0cc8cab37978fc3572bf330025477037","filename":"core/src/main/java/org/syncope/core/init/ConnInstanceLoader.java","status":"renamed","additions":40,"deletions":47,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -1,67 +1,76 @@\n /*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-package org.syncope.core.persistence;\n+package org.syncope.core.init;\n \n import java.io.File;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n import javassist.NotFoundException;\n-import javax.servlet.ServletContextEvent;\n-import javax.servlet.ServletContextListener;\n import org.identityconnectors.common.IOUtil;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorInfoManagerFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.SyncopeConf;\n+import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.propagation.ConnectorFacadeProxy;\n import org.syncope.core.util.ApplicationContextManager;\n \n /**\n- * Load identity connector instances on application startup.\n+ * Load ConnId connectos instances.\n  */\n-public class ConnInstanceLoader implements ServletContextListener {\n+@Component\n+public class ConnInstanceLoader {\n \n     /**\n      * Logger.\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(\n             ConnInstanceLoader.class);\n \n-    public static ConnectorInfoManager getConnectorManager()\n-            throws NotFoundException {\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n \n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    private DefaultListableBeanFactory getBeanFactory() {\n         ConfigurableApplicationContext context =\n                 ApplicationContextManager.getApplicationContext();\n \n+        return (DefaultListableBeanFactory) context.getBeanFactory();\n+    }\n+\n+    public ConnectorInfoManager getConnectorManager()\n+            throws NotFoundException {\n+\n         // 1. Bundles directory\n-        ConfDAO syncopeConfigurationDAO =\n-                (ConfDAO) context.getBean(\"confDAOImpl\");\n         SyncopeConf connectorBundleDir = null;\n         try {\n-            connectorBundleDir = syncopeConfigurationDAO.find(\n+            connectorBundleDir = confDAO.find(\n                     \"connid.bundles.directory\");\n         } catch (MissingConfKeyException e) {\n             LOG.error(\"Missing configuration\", e);\n@@ -104,27 +113,21 @@ public static ConnectorInfoManager getConnectorManager()\n         return manager;\n     }\n \n-    private static synchronized DefaultListableBeanFactory getBeanFactory() {\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n-        return (DefaultListableBeanFactory) context.getBeanFactory();\n-    }\n-\n-    public static ConnectorFacadeProxy getConnector(final String id)\n+    public ConnectorFacadeProxy getConnector(final String id)\n             throws BeansException {\n \n         return (ConnectorFacadeProxy) getBeanFactory().getBean(id);\n     }\n \n-    public static void registerConnector(final ConnInstance instance)\n+    public void registerConnector(final ConnInstance instance)\n             throws NotFoundException {\n \n         if (getBeanFactory().containsSingleton(instance.getId().toString())) {\n-            removeConnector(instance.getId().toString());\n+            unregisterConnector(instance.getId().toString());\n         }\n \n-        ConnectorFacadeProxy connector = new ConnectorFacadeProxy(instance);\n+        ConnectorFacadeProxy connector =\n+                new ConnectorFacadeProxy(instance, this);\n         LOG.debug(\"Connector to be registered: {}\", connector);\n \n         getBeanFactory().registerSingleton(\n@@ -133,35 +136,25 @@ public static void registerConnector(final ConnInstance instance)\n                 instance.getId().toString());\n     }\n \n-    public static void removeConnector(final String id) {\n+    public void unregisterConnector(final String id) {\n         getBeanFactory().destroySingleton(id);\n     }\n \n-    @Override\n-    public final void contextInitialized(final ServletContextEvent sce) {\n-        ConfigurableApplicationContext context =\n-                ApplicationContextManager.getApplicationContext();\n-\n-        ConnInstanceDAO connectorInstanceDAO =\n-                (ConnInstanceDAO) context.getBean(\"connInstanceDAOImpl\");\n-\n+    @Transactional(readOnly = true)\n+    public void loadAllConnInstances() {\n         // This is needed to avoid encoding problems when sending error\n         // messages via REST\n         CurrentLocale.set(Locale.ENGLISH);\n \n-        List<ConnInstance> instances = connectorInstanceDAO.findAll();\n+        List<ConnInstance> instances = connInstanceDAO.findAll();\n         for (ConnInstance instance : instances) {\n             try {\n-                LOG.error(\"register connector {}\", instance);\n+                LOG.info(\"Registering connector {}\", instance);\n                 registerConnector(instance);\n             } catch (NotFoundException e) {\n                 LOG.error(\"While loading connector bundle for instance \"\n                         + instance, e);\n             }\n         }\n     }\n-\n-    @Override\n-    public final void contextDestroyed(final ServletContextEvent sce) {\n-    }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/ConnInstanceLoader.java"},{"sha":"7312eedda99357ea3dd18c05f890aef3e7a00f5c","filename":"core/src/main/java/org/syncope/core/init/ContentLoader.java","status":"renamed","additions":28,"deletions":40,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FContentLoader.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -1,27 +1,24 @@\n /*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n-package org.syncope.core.persistence;\n+package org.syncope.core.init;\n \n import java.io.InputStream;\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Properties;\n-import javax.servlet.ServletContextEvent;\n-import javax.servlet.ServletContextListener;\n import javax.sql.DataSource;\n import org.dbunit.database.DatabaseConfig;\n import org.dbunit.database.DatabaseConnection;\n@@ -32,39 +29,35 @@\n import org.dbunit.operation.DatabaseOperation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n-import org.springframework.web.context.WebApplicationContext;\n-import org.springframework.web.context.support.WebApplicationContextUtils;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.SyncopeConf;\n \n /**\n- * Load default content in the database.\n+ * If empty, load default content to Syncope database by reading from\n+ * <code>content.xml</code>.\n  */\n-public class DefaultContentLoader implements ServletContextListener {\n+@Component\n+public class ContentLoader {\n \n     /**\n      * Logger.\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(\n-            DefaultContentLoader.class);\n+            ContentLoader.class);\n \n-    /**\n-     * <em>WARNING</em>: this method connects to the database by mean of the\n-     * underlying Spring's datasource, not using the provided one, to be fetched\n-     * via JNDI. This in order to avoid potential conflicts and problems with\n-     * DbUnit.\n-     * @param sce ServletContext event\n-     */\n-    @Override\n-    public final void contextInitialized(final ServletContextEvent sce) {\n-        WebApplicationContext springContext =\n-                WebApplicationContextUtils.getWebApplicationContext(\n-                sce.getServletContext());\n+    @Autowired\n+    private DataSource localDataSource;\n+\n+    @Autowired\n+    private DefaultDataTypeFactory dbUnitDataTypeFactory;\n \n+    @Transactional(readOnly = true)\n+    public void load() {\n         // 0. DB connection, to be used below\n-        DataSource dataSource =\n-                (DataSource) springContext.getBean(\"localDataSource\");\n-        Connection conn = DataSourceUtils.getConnection(dataSource);\n+        Connection conn = DataSourceUtils.getConnection(localDataSource);\n \n         // 1. read persistence.properties\n         String dbSchema = null;\n@@ -177,8 +170,7 @@ public final void contextInitialized(final ServletContextEvent sce) {\n \n             DatabaseConfig config = dbUnitConn.getConfig();\n             config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,\n-                    (DefaultDataTypeFactory) springContext.getBean(\n-                    \"dbUnitDataTypeFactory\"));\n+                    dbUnitDataTypeFactory);\n             config.setProperty(\n                     DatabaseConfig.FEATURE_SKIP_ORACLE_RECYCLEBIN_TABLES,\n                     true);\n@@ -194,7 +186,7 @@ public final void contextInitialized(final ServletContextEvent sce) {\n         } catch (Throwable t) {\n             LOG.error(\"While loading default content\", t);\n         } finally {\n-            DataSourceUtils.releaseConnection(conn, dataSource);\n+            DataSourceUtils.releaseConnection(conn, localDataSource);\n         }\n \n         try {\n@@ -203,8 +195,4 @@ public final void contextInitialized(final ServletContextEvent sce) {\n             LOG.error(\"While closing SQL connection\", e);\n         }\n     }\n-\n-    @Override\n-    public void contextDestroyed(final ServletContextEvent sce) {\n-    }\n }","previous_filename":"core/src/main/java/org/syncope/core/persistence/DefaultContentLoader.java"},{"sha":"2b1463b0555e75e778c1e2dacea5e45e59291fa4","filename":"core/src/main/java/org/syncope/core/init/SpringContextInitializer.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.init;\n+\n+import javax.servlet.ServletContext;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.BeanFactory;\n+import org.springframework.beans.factory.BeanFactoryAware;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.context.ServletContextAware;\n+\n+/**\n+ * Take care of all initializations needed by Syncope to run up and safe.\n+ */\n+@Component\n+public class SpringContextInitializer implements ServletContextAware,\n+        BeanFactoryAware, InitializingBean {\n+\n+    @Autowired\n+    private ConnInstanceLoader connInstanceLoader;\n+\n+    @Autowired\n+    private ContentLoader contentLoader;\n+\n+    @Override\n+    public void setServletContext(final ServletContext servletContext) {\n+    }\n+\n+    @Override\n+    public void setBeanFactory(final BeanFactory beanFactory)\n+            throws BeansException {\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet()\n+            throws Exception {\n+\n+        connInstanceLoader.loadAllConnInstances();\n+        contentLoader.load();\n+    }\n+}"},{"sha":"2723a92c50143d48abb1017ed800b7823470e1f1","filename":"core/src/main/java/org/syncope/core/persistence/beans/Task.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -26,7 +26,6 @@\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n-import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n@@ -89,8 +88,8 @@ public class Task extends AbstractBaseBean {\n     /**\n      * When this task has been (or will be) executed, what its result was.\n      */\n-    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true,\n-    mappedBy = \"task\", fetch = FetchType.EAGER)\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true,\n+    mappedBy = \"task\")\n     private List<TaskExecution> executions;\n \n     /**"},{"sha":"ee91e40b6a1761d9c31b102e9149083f26e38fa2","filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExecution.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExecution.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -15,10 +15,8 @@\n package org.syncope.core.persistence.beans;\n \n import java.util.Date;\n-import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n-import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n@@ -62,8 +60,7 @@ public class TaskExecution extends AbstractBaseBean {\n     /**\n      * The referred task.\n      */\n-    @ManyToOne(cascade = {CascadeType.MERGE, CascadeType.REFRESH},\n-    fetch = FetchType.LAZY)\n+    @ManyToOne(optional = false)\n     private Task task;\n \n     /**"},{"sha":"02d6253cc21dd15557fe8b358fb37b8d25928e92","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ConnInstanceDAOImpl.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -17,15 +17,19 @@\n import java.util.List;\n import javassist.NotFoundException;\n import javax.persistence.Query;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n-import org.syncope.core.persistence.ConnInstanceLoader;\n+import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n \n @Repository\n public class ConnInstanceDAOImpl extends AbstractDAOImpl\n         implements ConnInstanceDAO {\n \n+    @Autowired\n+    private ConnInstanceLoader connInstanceLoader;\n+\n     @Override\n     public ConnInstance find(final Long id) {\n         return entityManager.find(ConnInstance.class, id);\n@@ -41,7 +45,7 @@ public List<ConnInstance> findAll() {\n     public ConnInstance save(final ConnInstance connector) {\n         ConnInstance actual = entityManager.merge(connector);\n         try {\n-            ConnInstanceLoader.registerConnector(actual);\n+            connInstanceLoader.registerConnector(actual);\n         } catch (NotFoundException e) {\n             LOG.error(\"While registering the connector for instance \"\n                     + actual, e);\n@@ -54,6 +58,6 @@ public ConnInstance save(final ConnInstance connector) {\n     public void delete(final Long id) {\n         entityManager.remove(find(id));\n \n-        ConnInstanceLoader.removeConnector(id.toString());\n+        connInstanceLoader.unregisterConnector(id.toString());\n     }\n }"},{"sha":"76662cee102775cc69d766fa378b26d570351692","filename":"core/src/main/java/org/syncope/core/persistence/propagation/ConnectorFacadeProxy.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FConnectorFacadeProxy.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -36,8 +36,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.ClassUtils;\n+import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.types.ConnConfProperty;\n-import org.syncope.core.persistence.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.types.ConnectorCapability;\n import org.syncope.types.PropagationMode;\n@@ -79,7 +79,8 @@ public class ConnectorFacadeProxy {\n      * @see ConfigurationProperties\n      * @see ConnectorFacade\n      */\n-    public ConnectorFacadeProxy(final ConnInstance connInstance)\n+    public ConnectorFacadeProxy(final ConnInstance connInstance,\n+            final ConnInstanceLoader connInstanceLoader)\n             throws NotFoundException {\n \n         // specify a connector.\n@@ -99,10 +100,10 @@ public ConnectorFacadeProxy(final ConnInstance connInstance)\n         }\n \n         // get the specified connector.\n-        ConnectorInfo info = ConnInstanceLoader.getConnectorManager().\n+        ConnectorInfo info = connInstanceLoader.getConnectorManager().\n                 findConnectorInfo(key);\n         if (info == null) {\n-            throw new NotFoundException(\"Connector Info\");\n+            throw new NotFoundException(\"Connector Info for key \" + key);\n         }\n \n         // create default configuration"},{"sha":"be2bc2981d8a837990be662780fdd8eeaab4f950","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":25,"deletions":22,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -37,7 +37,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.syncope.core.persistence.ConnInstanceLoader;\n+import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n@@ -87,43 +87,38 @@ public class PropagationManager {\n      */\n     protected static final Logger LOG =\n             LoggerFactory.getLogger(PropagationManager.class);\n-\n+    @Autowired\n+    private ConnInstanceLoader connInstanceLoader;\n     /**\n      * Schema DAO.\n      */\n     @Autowired\n     private SchemaDAO schemaDAO;\n-\n     /**\n      * Derived Schema DAO.\n      */\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n-\n     /**\n      * Virtual Schema DAO.\n      */\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n-\n     /**\n      * Task DAO.\n      */\n     @Autowired\n     private TaskDAO taskDAO;\n-\n     /**\n      * Task execution DAO.\n      */\n     @Autowired\n     private TaskExecutionDAO taskExecutionDAO;\n-\n     /**\n      * Task execution workflow.\n      */\n     @Resource(name = \"taskExecutionWorkflow\")\n     private Workflow workflow;\n-\n     /**\n      * JEXL engine for evaluating connector's account link.\n      */\n@@ -292,7 +287,8 @@ private void provision(\n                     workflowId = workflow.initialize(\n                             Constants.TASKEXECUTION_WORKFLOW, 0, null);\n                     execution.setWorkflowId(workflowId);\n-                } catch (WorkflowException e) {\n+                }\n+                catch (WorkflowException e) {\n                     LOG.error(\"While initializing workflow for {}\",\n                             execution, e);\n                 }\n@@ -425,10 +421,10 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                                 mapping.getSourceAttrName());\n \n                         values = attr != null\n-                                ? (schema.isUniqueConstraint()\n+                                ? ( schema.isUniqueConstraint()\n                                 ? Collections.singletonList(\n                                 attr.getUniqueValue())\n-                                : attr.getValues())\n+                                : attr.getValues() )\n                                 : Collections.EMPTY_LIST;\n \n                         LOG.debug(\"Retrieved attribute {}\", attr\n@@ -543,9 +539,9 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                     LOG.debug(\"Define mapping for: \"\n                             + \"\\n* DestAttrName \" + mapping.getDestAttrName()\n                             + \"\\n* is accountId \" + mapping.isAccountid()\n-                            + \"\\n* is password \" + (mapping.isPassword()\n+                            + \"\\n* is password \" + ( mapping.isPassword()\n                             || mapping.getSourceMappingType().equals(\n-                            SourceMappingType.Password))\n+                            SourceMappingType.Password) )\n                             + \"\\n* mandatory condition \"\n                             + mapping.getMandatoryCondition()\n                             + \"\\n* Schema \" + mapping.getSourceAttrName()\n@@ -599,7 +595,8 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                                 objValues.iterator().next()));\n                     }\n                 }\n-            } catch (Throwable t) {\n+            }\n+            catch (Throwable t) {\n                 LOG.debug(\"Attribute '{}' processing failed\",\n                         mapping.getSourceAttrName(), t);\n             }\n@@ -630,7 +627,7 @@ public void propagate(final TaskExecution execution) {\n                     task.getResource().getConnector();\n \n             ConnectorFacadeProxy connector =\n-                    ConnInstanceLoader.getConnector(\n+                    connInstanceLoader.getConnector(\n                     connectorInstance.getId().toString());\n \n             if (connector == null) {\n@@ -664,7 +661,8 @@ public void propagate(final TaskExecution execution) {\n                                 ? task.getAccountId()\n                                 : task.getOldAccountId(),\n                                 null);\n-                    } catch (RuntimeException ignore) {\n+                    }\n+                    catch (RuntimeException ignore) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"To be ignored, when resolving \"\n                                     + \"username on connector\", ignore);\n@@ -711,7 +709,8 @@ public void propagate(final TaskExecution execution) {\n \n             LOG.debug(\"Successfully propagated to resource {}\",\n                     task.getResource());\n-        } catch (Throwable t) {\n+        }\n+        catch (Throwable t) {\n             LOG.error(\"Exception during provision on resource \"\n                     + task.getResource().getName(), t);\n \n@@ -733,13 +732,15 @@ public void propagate(final TaskExecution execution) {\n                         ? Collections.singletonMap(\n                         PropagationMode.SYNC.toString(), null)\n                         : null);\n-            } catch (Throwable wft) {\n+            }\n+            catch (Throwable wft) {\n                 LOG.error(\"While executing KO action on {}\", execution, wft);\n             }\n \n             triedPropagationRequests.add(\n                     task.getResourceOperationType().toString().toLowerCase());\n-        } finally {\n+        }\n+        finally {\n             LOG.debug(\"Update execution for {}\", task);\n \n             if (!triedPropagationRequests.isEmpty()) {\n@@ -808,7 +809,8 @@ public <T extends AbstractAttributable> Set<String> getObjectAttributeValue(\n                         accountId = attributable.getAttribute(\n                                 mapping.getSourceAttrName()).\n                                 getValuesAsStrings().get(0);\n-                    } catch (NullPointerException e) {\n+                    }\n+                    catch (NullPointerException e) {\n                         // ignore exception\n                         LOG.debug(\"Invalid accountId specified\", e);\n                     }\n@@ -826,7 +828,7 @@ public <T extends AbstractAttributable> Set<String> getObjectAttributeValue(\n \n                 connectorInstance = resource.getConnector();\n \n-                connector = ConnInstanceLoader.getConnector(\n+                connector = connInstanceLoader.getConnector(\n                         connectorInstance.getId().toString());\n \n                 try {\n@@ -841,7 +843,8 @@ public <T extends AbstractAttributable> Set<String> getObjectAttributeValue(\n                     for (Attribute attribute : attributes) {\n                         values.addAll(attribute.getValue());\n                     }\n-                } catch (Exception e) {\n+                }\n+                catch (Exception e) {\n                     LOG.warn(\"Error connecting to {}\", resource.getName(), e);\n                     // ignore exception and go ahead\n                 }"},{"sha":"3e37b78c8c0002a8c270ccf8c42586188e5e8a7c","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -27,6 +27,7 @@\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n+import org.springframework.beans.BeansException;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.PathVariable;\n@@ -35,7 +36,7 @@\n import org.syncope.client.to.ConnInstanceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.ConnInstanceLoader;\n+import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n@@ -48,6 +49,9 @@\n @RequestMapping(\"/connector\")\n public class ConnInstanceController extends AbstractController {\n \n+    @Autowired\n+    private ConnInstanceLoader connInstanceLoader;\n+\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n \n@@ -170,9 +174,15 @@ public ConnInstanceTO read(\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/check/{connectorId}\")\n-    public ModelAndView check(@PathVariable(\"connectorId\") String connectorId) {\n-        ConnectorFacadeProxy connector =\n-                ConnInstanceLoader.getConnector(connectorId);\n+    public ModelAndView check(@PathVariable(\"connectorId\") String connectorId)\n+            throws NotFoundException {\n+\n+        ConnectorFacadeProxy connector;\n+        try {\n+            connector = connInstanceLoader.getConnector(connectorId);\n+        } catch (BeansException e) {\n+            throw new NotFoundException(\"Connector \" + connectorId, e);\n+        }\n \n         ModelAndView mav = new ModelAndView();\n \n@@ -198,7 +208,7 @@ public List<ConnBundleTO> getBundles()\n             throws NotFoundException, MissingConfKeyException {\n \n         ConnectorInfoManager manager =\n-                ConnInstanceLoader.getConnectorManager();\n+                connInstanceLoader.getConnectorManager();\n \n         List<ConnectorInfo> bundles = manager.getConnectorInfos();\n "},{"sha":"e2da3411553cbd3f82380bf4756185ae9589a5f3","filename":"core/src/main/java/org/syncope/core/util/ApplicationContextManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextManager.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"sha":"3eb99ca0593e75289af675983ab05205e1de7a7a","filename":"core/src/main/java/org/syncope/core/util/ApplicationContextProvider.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FApplicationContextProvider.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -21,9 +21,15 @@\n \n public class ApplicationContextProvider implements ApplicationContextAware {\n \n+    /**\n+     *  Wiring the ApplicationContext into a static method.\n+     * @param ctx Spring application context\n+     * @throws BeansException  if thrown by application context methods\n+     */\n     @Override\n-    public void setApplicationContext(ApplicationContext ctx) throws BeansException {\n-        // Wiring the ApplicationContext into a static method\n+    public void setApplicationContext(final ApplicationContext ctx)\n+            throws BeansException {\n+\n         ApplicationContextManager.setApplicationContext(\n                 (ConfigurableApplicationContext) ctx);\n     }"},{"sha":"63d4a6c33a304376e29e3caef64e95e03c69e005","filename":"core/src/main/resources/logback.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -106,6 +106,14 @@\n         <appender-ref ref=\"rest\"/>\n     </logger>\n     \n+    <logger name=\"org.identityconnectors\" additivity=\"false\">\n+        <level value=\"DEBUG\"/>\n+        <appender-ref ref=\"connid\"/>\n+    </logger>\n+    <logger name=\"org.syncope.core.connid\" additivity=\"false\">\n+        <level value=\"DEBUG\"/>\n+        <appender-ref ref=\"connid\"/>\n+    </logger>\n     <logger name=\"org.connid\" additivity=\"false\">\n         <level value=\"DEBUG\"/>\n         <appender-ref ref=\"connid\"/>"},{"sha":"a499ea9deab31bfaa8ed6bc54edd8addda9c6afb","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -13,9 +13,12 @@\n   limitations under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n+ xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-       http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+       http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://www.springframework.org/schema/context\n+       http://www.springframework.org/schema/context/spring-context.xsd\">\n \n     <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n         <property name=\"locations\">\n@@ -28,4 +31,6 @@\n \n     <bean class=\"org.syncope.core.util.ApplicationContextProvider\"/>\n \n+    <context:component-scan base-package=\"org.syncope.core.init\"/>\n+\n </beans>"},{"sha":"d58a1677eeab1e35deb26e67357e282a1444129c","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -28,12 +28,6 @@\n     <listener>\n         <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n     </listener>\n-    <listener>\n-        <listener-class>org.syncope.core.persistence.DefaultContentLoader</listener-class>\n-    </listener>\n-    <listener>\n-        <listener-class>org.syncope.core.persistence.ConnInstanceLoader</listener-class>\n-    </listener>\n \n     <servlet>\n         <servlet-name>syncope-core-rest</servlet-name>"},{"sha":"0456f99d133eec3e11468f6601ced40ac46e8369","filename":"core/src/main/webapp/version.jsp","status":"added","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fwebapp%2Fversion.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Fmain%2Fwebapp%2Fversion.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2Fversion.jsp?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -0,0 +1,2 @@\n+<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n+${project.version}"},{"sha":"5370a4f03c3887218649e25a0f4badebf5f347d5","filename":"core/src/test/java/org/syncope/core/persistence/AbstractTest.java","status":"modified","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -18,25 +18,14 @@\n \n import java.io.InputStream;\n import java.sql.Connection;\n-import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n import java.util.Properties;\n-import javax.sql.DataSource;\n-import org.dbunit.database.DatabaseConfig;\n-import org.dbunit.database.DatabaseConnection;\n-import org.dbunit.database.IDatabaseConnection;\n-import org.dbunit.dataset.IDataSet;\n-import org.dbunit.dataset.datatype.DefaultDataTypeFactory;\n-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n-import org.dbunit.operation.DatabaseOperation;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n@@ -58,12 +47,6 @@ public abstract class AbstractTest {\n \n     protected static String bundlesDirectory;\n \n-    @Autowired\n-    private DataSource dataSource;\n-\n-    @Autowired\n-    private DefaultDataTypeFactory dbUnitDataTypeFactory;\n-\n     private void logTableContent(final Connection conn,\n             final String tableName)\n             throws SQLException {\n@@ -97,47 +80,6 @@ private void logTableContent(final Connection conn,\n         }\n     }\n \n-    @Before\n-    public void setUpTestDataWithinTransaction()\n-            throws Exception {\n-\n-        Connection conn = DataSourceUtils.getConnection(dataSource);\n-        IDatabaseConnection dbUnitConn = new DatabaseConnection(conn);\n-\n-        DatabaseConfig config = dbUnitConn.getConfig();\n-        config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,\n-                dbUnitDataTypeFactory);\n-\n-        FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n-        dataSetBuilder.setColumnSensing(true);\n-        IDataSet dataSet = dataSetBuilder.build(getClass().getResourceAsStream(\n-                \"/content.xml\"));\n-        try {\n-            DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n-        } catch (Throwable t) {\n-            LOG.error(\"While executing tests\", t);\n-        } finally {\n-            DataSourceUtils.releaseConnection(conn, dataSource);\n-        }\n-\n-        if (LOG.isDebugEnabled()) {\n-            conn = DataSourceUtils.getConnection(dataSource);\n-\n-            DatabaseMetaData dbm = conn.getMetaData();\n-            String[] types = {\"TABLE\", \"VIEW\"};\n-            ResultSet rs = dbm.getTables(null, null, \"%\", types);\n-            while (rs.next()) {\n-                logTableContent(conn, rs.getString(\"TABLE_NAME\"));\n-            }\n-\n-            try {\n-                rs.close();\n-                conn.close();\n-            } catch (SQLException e) {\n-            }\n-        }\n-    }\n-\n     @Before\n     public void setUpIdentityConnectorsBundles() {\n         Properties props = new java.util.Properties();"},{"sha":"ff44619207d51601e80f08c8c4a4d7fb4e485c40","filename":"core/src/test/java/org/syncope/core/persistence/dao/ConnInstanceTest.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnInstanceTest.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -102,8 +102,7 @@ public final void save()\n         assertFalse(connectorInstance.getConfiguration().isEmpty());\n \n         // perform save operation\n-        ConnInstance actual =\n-                connInstanceDAO.save(connectorInstance);\n+        ConnInstance actual = connInstanceDAO.save(connectorInstance);\n \n         assertNotNull(\"save did not work\", actual.getId());\n "},{"sha":"97e3d87ba4d58f02eea7546996b2a712752e46e8","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -16,29 +16,12 @@\n \n import static org.junit.Assert.*;\n \n-import java.io.InputStream;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n-import javax.sql.DataSource;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Properties;\n import java.util.Set;\n-import org.dbunit.database.DatabaseConfig;\n-import org.dbunit.database.DatabaseConnection;\n-import org.dbunit.database.IDatabaseConnection;\n-import org.dbunit.dataset.IDataSet;\n-import org.dbunit.dataset.datatype.DefaultDataTypeFactory;\n-import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;\n-import org.dbunit.operation.DatabaseOperation;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.transaction.annotation.Transactional;\n@@ -57,81 +40,12 @@\n @Transactional\n public class UserSearchTest {\n \n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-            UserSearchTest.class);\n-\n     @Autowired\n     private UserSearchDAO searchDAO;\n \n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n-    @Autowired\n-    private DataSource dataSource;\n-\n-    @Autowired\n-    private DefaultDataTypeFactory dbUnitDataTypeFactory;\n-\n-    @Before\n-    public void createDataAndSearchViews()\n-            throws Exception {\n-\n-        Connection conn = DataSourceUtils.getConnection(dataSource);\n-        IDatabaseConnection dbUnitConn = new DatabaseConnection(conn);\n-\n-        try {\n-            conn = dataSource.getConnection();\n-\n-            Statement statement = conn.createStatement();\n-            statement.executeUpdate(\"DROP VIEW user_search_attr\");\n-            statement.executeUpdate(\"DROP VIEW user_search_membership\");\n-            statement.close();\n-        } catch (SQLException e) {\n-        }\n-\n-        DatabaseConfig config = dbUnitConn.getConfig();\n-        config.setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY,\n-                dbUnitDataTypeFactory);\n-\n-        FlatXmlDataSetBuilder dataSetBuilder = new FlatXmlDataSetBuilder();\n-        dataSetBuilder.setColumnSensing(true);\n-        IDataSet dataSet = dataSetBuilder.build(getClass().getResourceAsStream(\n-                \"/content.xml\"));\n-        try {\n-            DatabaseOperation.CLEAN_INSERT.execute(dbUnitConn, dataSet);\n-        } catch (Throwable t) {\n-            LOG.error(\"While executing tests\", t);\n-        }\n-\n-        InputStream viewsStream = UserSearchTest.class.getResourceAsStream(\n-                \"/views.xml\");\n-        Properties views = new Properties();\n-        views.loadFromXML(viewsStream);\n-\n-        Statement statement = null;\n-        for (String idx : views.stringPropertyNames()) {\n-            LOG.debug(\"Creating view {}\", views.get(idx).toString());\n-\n-            try {\n-                statement = conn.createStatement();\n-                statement.executeUpdate(views.get(idx).toString().\n-                        replaceAll(\"\\\\n\", \" \"));\n-                statement.close();\n-            } catch (SQLException e) {\n-                LOG.error(\"Could not create view \", e);\n-            } finally {\n-                if (statement != null) {\n-                    statement.close();\n-                }\n-            }\n-        }\n-\n-        DataSourceUtils.releaseConnection(conn, dataSource);\n-    }\n-\n     @Test\n     public final void searchWithLikeCondition() {\n         AttributeCond usernameLeafCond ="},{"sha":"0bbf7c0a2d0e1626ad229bccb58b9b3c0c5bf29a","filename":"core/src/test/java/org/syncope/core/persistence/relationships/TaskTest.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -46,6 +46,16 @@ public class TaskTest extends AbstractTest {\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n+    @Test\n+    public final void read() {\n+        Task task = taskDAO.find(1L);\n+        assertNotNull(task);\n+\n+        assertNotNull(task.getExecutions());\n+        assertFalse(task.getExecutions().isEmpty());\n+        assertEquals(1, task.getExecutions().size());\n+    }\n+\n     @Test\n     public final void save() {\n         TargetResource resource = resourceDAO.find(\"ws-target-resource-1\");"},{"sha":"9fc9edfe113e1186729f452170ea32a412410ea6","filename":"core/src/test/java/org/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -38,6 +38,7 @@\n public class ConnInstanceTestITCase extends AbstractTest {\n \n     private static String connidSoapVersion;\n+\n     private static String bundlesDirectory;\n \n     @Before\n@@ -171,13 +172,13 @@ public void update() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n         // set connector instance id\n-        connectorTO.setId(100L);\n+        connectorTO.setId(103L);\n \n         // set connector version\n         connectorTO.setVersion(connidSoapVersion);\n \n         // set connector name\n-        connectorTO.setConnectorName(WebServiceConnector.class.getSimpleName());\n+        connectorTO.setConnectorName(WebServiceConnector.class.getName());\n \n         // set bundle name\n         connectorTO.setBundleName(\"org.connid.bundles.soap\");"},{"sha":"7e168a28226c1f518a969de6687b6ab6cbbfe967","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -48,7 +48,7 @@\n \n public class UserTestITCase extends AbstractTest {\n \n-    private UserTO getSampleTO(final String email) {\n+    public static UserTO getSampleTO(final String email) {\n         UserTO userTO = new UserTO();\n         userTO.setPassword(\"password\");\n "},{"sha":"48f607637ebab9e7bf24378da7fc725487f3b3b4","filename":"core/src/test/resources/exploredb.jsp","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a272484e2e32b9e817caacf55b82c6aa6c39040c/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fexploredb.jsp?ref=a272484e2e32b9e817caacf55b82c6aa6c39040c","patch":"@@ -7,7 +7,6 @@\n <%@page import=\"java.sql.Connection\"%>\n <%@page import=\"org.syncope.core.util.ApplicationContextManager\"%>\n <%@page import=\"org.springframework.context.ConfigurableApplicationContext\"%>\n-<%@page import=\"org.syncope.core.persistence.DefaultContentLoader\"%>\n <%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%>\n <%!\n     private void logTableContent(Connection conn, String tableName,"}]}