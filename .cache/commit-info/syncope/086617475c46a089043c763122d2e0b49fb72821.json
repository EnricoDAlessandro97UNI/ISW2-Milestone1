{"sha":"086617475c46a089043c763122d2e0b49fb72821","node_id":"C_kwDOJfYA1toAKDA4NjYxNzQ3NWM0NmEwODkwNDNjNzYzMTIyZDJlMGI0OWZiNzI4MjE","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-23T14:10:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2023-01-23T14:10:46Z"},"message":"[SYNCOPE-1725] Accumulating OR and AND conditions before generating the final ES query","tree":{"sha":"8e0ffb698fd9f6e052b7052a287f881863196a4a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8e0ffb698fd9f6e052b7052a287f881863196a4a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/086617475c46a089043c763122d2e0b49fb72821","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/086617475c46a089043c763122d2e0b49fb72821","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/086617475c46a089043c763122d2e0b49fb72821","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/086617475c46a089043c763122d2e0b49fb72821/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d254cc688b244fdd2e169b66558c58dbbb86ed5f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d254cc688b244fdd2e169b66558c58dbbb86ed5f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d254cc688b244fdd2e169b66558c58dbbb86ed5f"}],"stats":{"total":249,"additions":237,"deletions":12},"files":[{"sha":"8fe9dd438825dd1ab4c9b1d755aebfec4fad7a53","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":41,"deletions":9,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/086617475c46a089043c763122d2e0b49fb72821/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/086617475c46a089043c763122d2e0b49fb72821/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=086617475c46a089043c763122d2e0b49fb72821","patch":"@@ -24,13 +24,14 @@\n import co.elastic.clients.elasticsearch._types.SearchType;\n import co.elastic.clients.elasticsearch._types.SortOptions;\n import co.elastic.clients.elasticsearch._types.SortOrder;\n+import co.elastic.clients.elasticsearch._types.query_dsl.BoolQuery;\n+import co.elastic.clients.elasticsearch._types.query_dsl.DisMaxQuery;\n import co.elastic.clients.elasticsearch._types.query_dsl.Query;\n import co.elastic.clients.elasticsearch._types.query_dsl.QueryBuilders;\n import co.elastic.clients.elasticsearch.core.CountRequest;\n import co.elastic.clients.elasticsearch.core.SearchRequest;\n import co.elastic.clients.elasticsearch.core.search.Hit;\n import co.elastic.clients.json.JsonData;\n-import java.io.IOException;\n import java.lang.reflect.Field;\n import java.util.ArrayList;\n import java.util.HashSet;\n@@ -239,10 +240,12 @@ protected int doCount(\n                 index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), kind)).\n                 query(getQuery(base, recursive, adminRealms, cond, kind)).\n                 build();\n+        LOG.debug(\"Count JSON request: {}\", request);\n+\n         try {\n             return (int) client.count(request).count();\n-        } catch (IOException e) {\n-            LOG.error(\"Search error\", e);\n+        } catch (Exception e) {\n+            LOG.error(\"While counting in Elasticsearch\", e);\n             return 0;\n         }\n     }\n@@ -304,6 +307,7 @@ protected <T extends Any<?>> List<T> doSearch(\n                 size(itemsPerPage < 0 ? indexMaxResultWindow : itemsPerPage).\n                 sort(sortBuilders(kind, orderBy)).\n                 build();\n+        LOG.debug(\"Search JSON request: {}\", request);\n \n         @SuppressWarnings(\"rawtypes\")\n         List<Hit<Map>> esResult = null;\n@@ -415,15 +419,43 @@ protected Query getQuery(final SearchCond cond, final AnyTypeKind kind) {\n                 break;\n \n             case AND:\n-                query = new Query.Builder().bool(QueryBuilders.bool().\n-                        must(getQuery(cond.getLeft(), kind)).must(getQuery(cond.getRight(), kind)).build()).\n-                        build();\n+                List<Query> andCompound = new ArrayList<>();\n+\n+                Query andLeft = getQuery(cond.getLeft(), kind);\n+                if (andLeft._kind() == Query.Kind.Bool && !((BoolQuery) andLeft._get()).must().isEmpty()) {\n+                    andCompound.addAll(((BoolQuery) andLeft._get()).must());\n+                } else {\n+                    andCompound.add(andLeft);\n+                }\n+\n+                Query andRight = getQuery(cond.getRight(), kind);\n+                if (andRight._kind() == Query.Kind.Bool && !((BoolQuery) andRight._get()).must().isEmpty()) {\n+                    andCompound.addAll(((BoolQuery) andRight._get()).must());\n+                } else {\n+                    andCompound.add(andRight);\n+                }\n+\n+                query = new Query.Builder().bool(QueryBuilders.bool().must(andCompound).build()).build();\n                 break;\n \n             case OR:\n-                query = new Query.Builder().disMax(QueryBuilders.disMax().\n-                        queries(getQuery(cond.getLeft(), kind), getQuery(cond.getRight(), kind)).build()).\n-                        build();\n+                List<Query> orCompound = new ArrayList<>();\n+\n+                Query orLeft = getQuery(cond.getLeft(), kind);\n+                if (orLeft._kind() == Query.Kind.DisMax) {\n+                    orCompound.addAll(((DisMaxQuery) orLeft._get()).queries());\n+                } else {\n+                    orCompound.add(orLeft);\n+                }\n+\n+                Query orRight = getQuery(cond.getRight(), kind);\n+                if (orRight._kind() == Query.Kind.DisMax) {\n+                    orCompound.addAll(((DisMaxQuery) orRight._get()).queries());\n+                } else {\n+                    orCompound.add(orRight);\n+                }\n+\n+                query = new Query.Builder().disMax(QueryBuilders.disMax().queries(orCompound).build()).build();\n                 break;\n \n             default:"},{"sha":"02f4b7893f1077cdffea6f71af5539214d8d1494","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"modified","additions":196,"deletions":3,"changes":199,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/086617475c46a089043c763122d2e0b49fb72821/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/086617475c46a089043c763122d2e0b49fb72821/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=086617475c46a089043c763122d2e0b49fb72821","patch":"@@ -21,11 +21,16 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import co.elastic.clients.elasticsearch._types.FieldValue;\n import co.elastic.clients.elasticsearch._types.SearchType;\n+import co.elastic.clients.elasticsearch._types.query_dsl.BoolQuery;\n+import co.elastic.clients.elasticsearch._types.query_dsl.DisMaxQuery;\n import co.elastic.clients.elasticsearch._types.query_dsl.Query;\n import co.elastic.clients.elasticsearch._types.query_dsl.QueryBuilders;\n import co.elastic.clients.elasticsearch.core.SearchRequest;\n@@ -36,6 +41,7 @@\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.PlainAttrValidationManager;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -46,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n@@ -81,6 +88,9 @@ public class ElasticsearchAnySearchDAOTest {\n     @Mock\n     private AnyUtilsFactory anyUtilsFactory;\n \n+    @Mock\n+    private PlainAttrValidationManager validator;\n+\n     private ElasticsearchAnySearchDAO searchDAO;\n \n     @BeforeEach\n@@ -94,7 +104,7 @@ protected void setupSearchDAO() {\n                 null,\n                 entityFactory,\n                 anyUtilsFactory,\n-                null,\n+                validator,\n                 null,\n                 10000);\n     }\n@@ -154,7 +164,7 @@ public void getAdminRealmsFilter4groupOwner() {\n     public void searchRequest4groupOwner() throws IOException {\n         // 1. mock\n         AnyUtils anyUtils = mock(AnyUtils.class);\n-        when(anyUtils.getField(\"id\")).thenReturn(ReflectionUtils.findField(JPAUser.class, \"id\"));\n+        when(anyUtils.getField(\"key\")).thenReturn(ReflectionUtils.findField(JPAUser.class, \"id\"));\n         when(anyUtils.newPlainAttrValue()).thenReturn(new JPAUPlainAttrValue());\n \n         when(anyUtilsFactory.getInstance(AnyTypeKind.USER)).thenReturn(anyUtils);\n@@ -171,7 +181,7 @@ public void searchRequest4groupOwner() throws IOException {\n             Set<String> adminRealms = Set.of(RealmUtils.getGroupOwnerRealm(\"/any\", \"groupKey\"));\n \n             AnyCond anyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n-            anyCond.setSchema(\"id\");\n+            anyCond.setSchema(\"key\");\n \n             SearchRequest request = new SearchRequest.Builder().\n                     index(ElasticsearchUtils.getAnyIndex(AuthContextUtils.getDomain(), AnyTypeKind.USER)).\n@@ -191,4 +201,187 @@ public void searchRequest4groupOwner() throws IOException {\n                     usingRecursiveComparison().isEqualTo(request.query());\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1725() throws IOException {\n+        // 1. mock\n+        AnyUtils anyUtils = mock(AnyUtils.class);\n+        when(anyUtils.getField(\"key\")).thenReturn(ReflectionUtils.findField(JPAUser.class, \"id\"));\n+        JPAUPlainAttrValue value = new JPAUPlainAttrValue();\n+        when(anyUtils.newPlainAttrValue()).thenReturn(value);\n+\n+        when(anyUtilsFactory.getInstance(AnyTypeKind.USER)).thenReturn(anyUtils);\n+\n+        when(entityFactory.newEntity(PlainSchema.class)).thenReturn(new JPAPlainSchema());\n+\n+        doAnswer(ic -> {\n+            value.setStringValue(ic.getArgument(1));\n+            return null;\n+        }).when(validator).validate(any(PlainSchema.class), anyString(), any(PlainAttrValue.class));\n+\n+        AnyCond cond1 = new AnyCond(AttrCond.Type.EQ);\n+        cond1.setSchema(\"key\");\n+        cond1.setExpression(\"1\");\n+\n+        AnyCond cond2 = new AnyCond(AttrCond.Type.EQ);\n+        cond2.setSchema(\"key\");\n+        cond2.setExpression(\"2\");\n+\n+        AnyCond cond3 = new AnyCond(AttrCond.Type.EQ);\n+        cond3.setSchema(\"key\");\n+        cond3.setExpression(\"3\");\n+\n+        AnyCond cond4 = new AnyCond(AttrCond.Type.EQ);\n+        cond4.setSchema(\"key\");\n+        cond4.setExpression(\"4\");\n+\n+        AnyCond cond5 = new AnyCond(AttrCond.Type.EQ);\n+        cond5.setSchema(\"key\");\n+        cond5.setExpression(\"5\");\n+\n+        AnyCond cond6 = new AnyCond(AttrCond.Type.EQ);\n+        cond6.setSchema(\"key\");\n+        cond6.setExpression(\"6\");\n+\n+        try (MockedStatic<ElasticsearchUtils> utils = Mockito.mockStatic(ElasticsearchUtils.class)) {\n+            utils.when(() -> ElasticsearchUtils.getAnyIndex(\n+                    SyncopeConstants.MASTER_DOMAIN, AnyTypeKind.USER)).thenReturn(\"master_user\");\n+\n+            Query query = searchDAO.getQuery(\n+                    SearchCond.getAnd(\n+                            List.of(SearchCond.getLeaf(cond1),\n+                                    SearchCond.getLeaf(cond2),\n+                                    SearchCond.getLeaf(cond3),\n+                                    SearchCond.getLeaf(cond4),\n+                                    SearchCond.getLeaf(cond5),\n+                                    SearchCond.getLeaf(cond6))),\n+                    AnyTypeKind.USER);\n+            assertEquals(Query.Kind.Bool, query._kind());\n+            assertEquals(6, ((BoolQuery) query._get()).must().size());\n+            assertThat(\n+                    new Query.Builder().bool(QueryBuilders.bool().\n+                            must(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"1\").build()).build()).\n+                            must(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"2\").build()).build()).\n+                            must(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"3\").build()).build()).\n+                            must(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"4\").build()).build()).\n+                            must(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"5\").build()).build()).\n+                            must(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"6\").build()).build()).\n+                            build()).build()).\n+                    usingRecursiveComparison().isEqualTo(query);\n+\n+            query = searchDAO.getQuery(\n+                    SearchCond.getOr(\n+                            List.of(SearchCond.getLeaf(cond1),\n+                                    SearchCond.getLeaf(cond2),\n+                                    SearchCond.getLeaf(cond3),\n+                                    SearchCond.getLeaf(cond4),\n+                                    SearchCond.getLeaf(cond5),\n+                                    SearchCond.getLeaf(cond6))),\n+                    AnyTypeKind.USER);\n+            assertEquals(Query.Kind.DisMax, query._kind());\n+            assertEquals(6, ((DisMaxQuery) query._get()).queries().size());\n+            assertThat(\n+                    new Query.Builder().disMax(QueryBuilders.disMax().\n+                            queries(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"1\").build()).build()).\n+                            queries(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"2\").build()).build()).\n+                            queries(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"3\").build()).build()).\n+                            queries(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"4\").build()).build()).\n+                            queries(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"5\").build()).build()).\n+                            queries(new Query.Builder().term(\n+                                    QueryBuilders.term().field(\"id\").value(\"6\").build()).build()).\n+                            build()).build()).\n+                    usingRecursiveComparison().isEqualTo(query);\n+\n+            query = searchDAO.getQuery(\n+                    SearchCond.getAnd(List.of(\n+                            SearchCond.getOr(List.of(\n+                                    SearchCond.getLeaf(cond1),\n+                                    SearchCond.getLeaf(cond2),\n+                                    SearchCond.getLeaf(cond3))),\n+                            SearchCond.getOr(List.of(\n+                                    SearchCond.getLeaf(cond4),\n+                                    SearchCond.getLeaf(cond5),\n+                                    SearchCond.getLeaf(cond6))))),\n+                    AnyTypeKind.USER);\n+            assertEquals(Query.Kind.Bool, query._kind());\n+            assertEquals(2, ((BoolQuery) query._get()).must().size());\n+            Query left = ((BoolQuery) query._get()).must().get(0);\n+            assertEquals(Query.Kind.DisMax, left._kind());\n+            assertEquals(3, ((DisMaxQuery) left._get()).queries().size());\n+            Query right = ((BoolQuery) query._get()).must().get(1);\n+            assertEquals(Query.Kind.DisMax, right._kind());\n+            assertEquals(3, ((DisMaxQuery) right._get()).queries().size());\n+            assertThat(\n+                    new Query.Builder().bool(QueryBuilders.bool().\n+                            must(new Query.Builder().disMax(QueryBuilders.disMax().\n+                                    queries(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"1\").build()).build()).\n+                                    queries(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"2\").build()).build()).\n+                                    queries(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"3\").build()).build()).build()).\n+                                    build()).\n+                            must(new Query.Builder().disMax(QueryBuilders.disMax().\n+                                    queries(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"4\").build()).build()).\n+                                    queries(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"5\").build()).build()).\n+                                    queries(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"6\").build()).build()).build()).\n+                                    build()).\n+                            build()).build()).\n+                    usingRecursiveComparison().isEqualTo(query);\n+\n+            query = searchDAO.getQuery(\n+                    SearchCond.getOr(List.of(\n+                            SearchCond.getAnd(List.of(\n+                                    SearchCond.getLeaf(cond1),\n+                                    SearchCond.getLeaf(cond2),\n+                                    SearchCond.getLeaf(cond3))),\n+                            SearchCond.getAnd(List.of(\n+                                    SearchCond.getLeaf(cond4),\n+                                    SearchCond.getLeaf(cond5),\n+                                    SearchCond.getLeaf(cond6))))),\n+                    AnyTypeKind.USER);\n+            assertEquals(Query.Kind.DisMax, query._kind());\n+            assertEquals(2, ((DisMaxQuery) query._get()).queries().size());\n+            left = ((DisMaxQuery) query._get()).queries().get(0);\n+            assertEquals(Query.Kind.Bool, left._kind());\n+            assertEquals(3, ((BoolQuery) left._get()).must().size());\n+            right = ((DisMaxQuery) query._get()).queries().get(1);\n+            assertEquals(Query.Kind.Bool, right._kind());\n+            assertEquals(3, ((BoolQuery) right._get()).must().size());\n+            assertThat(\n+                    new Query.Builder().disMax(QueryBuilders.disMax().\n+                            queries(new Query.Builder().bool(QueryBuilders.bool().\n+                                    must(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"1\").build()).build()).\n+                                    must(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"2\").build()).build()).\n+                                    must(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"3\").build()).build()).build()).\n+                                    build()).\n+                            queries(new Query.Builder().bool(QueryBuilders.bool().\n+                                    must(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"4\").build()).build()).\n+                                    must(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"5\").build()).build()).\n+                                    must(new Query.Builder().term(\n+                                            QueryBuilders.term().field(\"id\").value(\"6\").build()).build()).build()).\n+                                    build()).\n+                            build()).build()).\n+                    usingRecursiveComparison().isEqualTo(query);\n+        }\n+    }\n }"}]}