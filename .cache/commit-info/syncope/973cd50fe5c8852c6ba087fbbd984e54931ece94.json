{"sha":"973cd50fe5c8852c6ba087fbbd984e54931ece94","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk3M2NkNTBmZTVjODg1MmM2YmEwODdmYmJkOTg0ZTU0OTMxZWNlOTQ=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-10-23T10:28:09Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-10-23T10:28:09Z"},"message":"merge from master","tree":{"sha":"9bc441429ed5a55c61ace9aeaaba83ce56747959","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9bc441429ed5a55c61ace9aeaaba83ce56747959"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/973cd50fe5c8852c6ba087fbbd984e54931ece94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/973cd50fe5c8852c6ba087fbbd984e54931ece94","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/973cd50fe5c8852c6ba087fbbd984e54931ece94","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/973cd50fe5c8852c6ba087fbbd984e54931ece94/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"13f96e06804f0574a72cf2d496cb2ac62f927847","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/13f96e06804f0574a72cf2d496cb2ac62f927847","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/13f96e06804f0574a72cf2d496cb2ac62f927847"},{"sha":"73f73f20692910e6f0c2acf27d5d8bd7982e6b6c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/73f73f20692910e6f0c2acf27d5d8bd7982e6b6c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/73f73f20692910e6f0c2acf27d5d8bd7982e6b6c"}],"stats":{"total":13344,"additions":9555,"deletions":3789},"files":[{"sha":"d68c6a138d3bed910c80a4129aee86d7bab73293","filename":"client/cli/pom.xml","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fpom.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -40,17 +40,22 @@ under the License.\n   </properties>\n   \n   <dependencies>\n-    <dependency>\n-      <groupId>com.beust</groupId>\n-      <artifactId>jcommander</artifactId>\n-    </dependency>\n     \n     <dependency>\n       <groupId>org.apache.syncope.client</groupId>\n       <artifactId>syncope-client-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>org.jasypt</groupId>\n+      <artifactId>jasypt</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context</artifactId>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n@@ -117,7 +122,7 @@ under the License.\n               <transformers>\n                 <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                   <manifestEntries>\n-                    <Main-Class>org.apache.syncope.cli.SyncopeAdm</Main-Class>\n+                    <Main-Class>org.apache.syncope.client.cli.SyncopeAdm</Main-Class>\n                   </manifestEntries>\n                 </transformer>\n                 <transformer implementation=\"org.apache.maven.plugins.shade.resource.IncludeResourceTransformer\">"},{"sha":"926b4dd30702aa6b19978fd10df5a644e7d08690","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/ArgsManager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FArgsManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FArgsManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FArgsManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli;\n+\n+import java.io.File;\n+import org.apache.syncope.client.cli.commands.install.InstallConfigFileTemplate;\n+\n+public final class ArgsManager {\n+\n+    public static void validator(final String[] args) throws IllegalArgumentException {\n+        if (args.length == 0) {\n+            throw new IllegalArgumentException(\"Syntax error: no options\");\n+        } else if (!\"install\".equalsIgnoreCase(args[0])) {\n+            final File configFile = new File(InstallConfigFileTemplate.FILE_PATH);\n+            if (!configFile.exists()) {\n+                throw new IllegalArgumentException(\n+                        \"It seems you need to setup the CLI client before. Run install --setup.\");\n+            }\n+        }\n+    }\n+\n+    public static String[] operands(final String[] args) {\n+        final String[] operands = new String[args.length - 1];\n+        for (int i = 1; i < args.length; i++) {\n+            operands[i - 1] = args[i];\n+        }\n+        return operands;\n+    }\n+\n+    private ArgsManager() {\n+        // private constructor for static utility class\n+    }\n+\n+}"},{"sha":"7d326a861e9137df0cb4611a27ec1fef491ee7ff","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/AvailableServices.java","status":"renamed","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FAvailableServices.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FAvailableServices.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FAvailableServices.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -16,10 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.user;\n+package org.apache.syncope.client.cli;\n \n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+public enum AvailableServices {\n \n-public interface UVirAttr extends VirAttr<User> {\n+    logger,\n+    config,\n+    notification,\n+    report,\n+    policy,\n+    entitlement,\n+    schema;\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UVirAttr.java"},{"sha":"2c36dd8423d0c962fd41bf9bbc66296a01d705af","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/Command.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(value = RetentionPolicy.RUNTIME)\n+@Target(value = ElementType.TYPE)\n+public @interface Command {\n+\n+    String name();\n+\n+}"},{"sha":"e19f02455add499b325a4e83fac7837866c8c7b0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/CommandClassScanner.java","status":"renamed","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommandClassScanner.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommandClassScanner.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FCommandClassScanner.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -16,15 +16,14 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.to;\n+package org.apache.syncope.client.cli;\n \n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n+import org.springframework.core.type.filter.AnnotationTypeFilter;\n \n-@XmlRootElement(name = \"conf\")\n-@XmlType\n-public class ConfTO extends AnyTO {\n-\n-    private static final long serialVersionUID = -3825039700228595590L;\n+public class CommandClassScanner extends ComponentClassScanner {\n \n+    public CommandClassScanner() {\n+        super();\n+        addIncludeFilter(new AnnotationTypeFilter(Command.class));\n+    }\n }","previous_filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ConfTO.java"},{"sha":"c344596066afda7ea74df78fa77edec3fb3a81f1","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/ComponentClassScanner.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FComponentClassScanner.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FComponentClassScanner.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FComponentClassScanner.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.util.ClassUtils;\n+\n+public abstract class ComponentClassScanner<T> extends ClassPathScanningCandidateComponentProvider {\n+\n+    public ComponentClassScanner() {\n+        super(false);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public final List<Class<? extends T>> getComponentClasses() throws IllegalArgumentException {\n+        final String basePackage = \"org.apache.syncope.client.cli.commands\";\n+        List<Class<? extends T>> classes = new ArrayList<>();\n+        for (final BeanDefinition candidate : findCandidateComponents(basePackage)) {\n+            final Class cls = ClassUtils.\n+                    resolveClassName(candidate.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n+            classes.add((Class) cls);\n+        }\n+        return classes;\n+    }\n+}"},{"sha":"931418770622a52177c11aacb218dfb931cb0519","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/Input.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FInput.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli;\n+\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+\n+public class Input {\n+\n+    private final AbstractCommand command;\n+\n+    private String option;\n+\n+    private final String[] parameters;\n+\n+    public Input(final String[] args)\n+            throws InstantiationException, IllegalAccessException, IllegalArgumentException {\n+\n+        command = CommandUtils.fromArgs(args[0]);\n+\n+        if (args.length > 1) {\n+            option = args[1];\n+        }\n+\n+        if (args.length > 2) {\n+            parameters = new String[args.length - 2];\n+            for (int i = 0; i < parameters.length; i++) {\n+                parameters[i] = args[i + 2];\n+            }\n+        } else {\n+            parameters = new String[0];\n+        }\n+    }\n+\n+    public AbstractCommand getCommand() {\n+        return command;\n+    }\n+\n+    public void setOption(final String option) {\n+        this.option = option;\n+    }\n+\n+    public String getOption() {\n+        return option;\n+    }\n+\n+    public String[] getParameters() {\n+        return parameters;\n+    }\n+\n+    public String firstParameter() {\n+        return parameters[0];\n+    }\n+    \n+    public String secondParameter() {\n+        return parameters[1];\n+    }\n+\n+    public String lastParameter() {\n+        return parameters[parameters.length - 1];\n+    }\n+\n+    public int parameterNumber() {\n+        return parameters.length;\n+    }\n+\n+    public PairParameter toPairParameter(final String parameter) throws IllegalArgumentException {\n+        if (!parameter.contains(\"=\")) {\n+            throw new IllegalArgumentException(\"Parameter syntax error!\");\n+        }\n+        final String[] pairParameterArray = parameter.split(\"=\");\n+        return new PairParameter(pairParameterArray[0], pairParameterArray[1]);\n+    }\n+\n+    public class PairParameter {\n+\n+        private final String key;\n+\n+        private final String value;\n+\n+        public PairParameter(final String key, final String value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        public String getValue() {\n+            return value;\n+        }\n+\n+    }\n+}"},{"sha":"de3d0f1507ea18f8059eebb3efa2d9adb39e7850","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/ResultManager.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -16,10 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.group;\n+package org.apache.syncope.client.cli;\n \n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n \n-public interface GVirAttr extends VirAttr<Group> {\n+public class ResultManager extends CommonsResultManager {\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GVirAttr.java"},{"sha":"7308c574651e64c8abc04a0fa2387798d0f4be87","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeAdm.java","status":"modified","additions":41,"deletions":75,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeAdm.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,99 +18,65 @@\n  */\n package org.apache.syncope.client.cli;\n \n-import com.beust.jcommander.JCommander;\n-import com.beust.jcommander.ParameterException;\n-import org.apache.syncope.client.cli.commands.ConfigurationCommand;\n-import org.apache.syncope.client.cli.commands.LoggerCommand;\n-import org.apache.syncope.client.cli.commands.NotificationCommand;\n-import org.apache.syncope.client.cli.commands.PolicyCommand;\n-import org.apache.syncope.client.cli.commands.ReportCommand;\n+import javax.ws.rs.ProcessingException;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public final class SyncopeAdm {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeAdm.class);\n-\n-    private static final String HELP_MESSAGE = \"Usage: Main [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    logger --help \\n\"\n-            + \"    config --help \\n\"\n-            + \"    notification --help \\n\"\n-            + \"    report --help \\n\"\n-            + \"    policy --help \\n\"\n-            + \"    entitlement --help \\n\";\n-\n-    private static final JCommander JCOMMANDER = new JCommander();\n-\n-    private static LoggerCommand LOGGER_COMMAND;\n-\n-    private static ConfigurationCommand CONFIGURATION_COMMAND;\n-\n-    private static NotificationCommand NOTIFICATION_COMMAND;\n-\n-    private static ReportCommand REPORT_COMMAND;\n-\n-    private static PolicyCommand POLICY_COMMAND;\n+    \n+    private static final ResultManager RESULT_MANAGER = new ResultManager();\n \n     public static void main(final String[] args) {\n         LOG.debug(\"Starting with args \\n\");\n \n-        for (final String arg : args) {\n-            LOG.debug(\"Arg: {}\", arg);\n-        }\n+        try {\n+            ArgsManager.validator(args);\n+            final Input input = new Input(args);\n+            final AbstractCommand command = input.getCommand();\n \n-        instantiateCommands();\n+            LOG.debug(\"Command: {}\", command.getClass().getAnnotation(Command.class).name());\n+            LOG.debug(\"Option: {}\", input.getOption());\n+            LOG.debug(\"Parameters:\");\n+            for (final String parameter : input.getParameters()) {\n+                LOG.debug(\"   > \" + parameter);\n+            }\n \n-        if (args.length == 0) {\n-            System.out.println(HELP_MESSAGE);\n-        } else {\n-            try {\n-                JCOMMANDER.parse(args);\n-            } catch (final ParameterException ioe) {\n-                System.out.println(HELP_MESSAGE);\n-                LOG.error(\"Parameter exception\", ioe);\n+            command.execute(input);\n+        } catch (final IllegalAccessException | InstantiationException e) {\n+            System.out.println(helpMessage());\n+        } catch (final IllegalArgumentException ex) {\n+            LOG.error(\"Error in main\", ex);\n+            RESULT_MANAGER.generic(ex.getMessage());\n+            if (!ex.getMessage().startsWith(\"It seems you\")) {\n+                System.out.println(helpMessage());\n             }\n-            executeCommand();\n+        } catch (final ProcessingException e) {\n+            RESULT_MANAGER.generic(\"Syncope server offline\", e.getCause().getMessage());\n         }\n \n     }\n \n-    private static void instantiateCommands() {\n-        LOG.debug(\"Init JCommander\");\n-        LOGGER_COMMAND = new LoggerCommand();\n-        JCOMMANDER.addCommand(LOGGER_COMMAND);\n-        LOG.debug(\"Added LoggerCommand\");\n-        CONFIGURATION_COMMAND = new ConfigurationCommand();\n-        JCOMMANDER.addCommand(CONFIGURATION_COMMAND);\n-        LOG.debug(\"Added ConfigurationCommand\");\n-        NOTIFICATION_COMMAND = new NotificationCommand();\n-        JCOMMANDER.addCommand(NOTIFICATION_COMMAND);\n-        LOG.debug(\"Added NotificationCommand\");\n-        REPORT_COMMAND = new ReportCommand();\n-        JCOMMANDER.addCommand(REPORT_COMMAND);\n-        LOG.debug(\"Added ReportCommand\");\n-        POLICY_COMMAND = new PolicyCommand();\n-        JCOMMANDER.addCommand(POLICY_COMMAND);\n-        LOG.debug(\"Added PolicyCommand\");\n-    }\n-\n-    private static void executeCommand() {\n-        final String command = JCOMMANDER.getParsedCommand();\n-\n-        LOG.debug(\"Called command {}\", command);\n-\n-        if (\"logger\".equalsIgnoreCase(command)) {\n-            LOGGER_COMMAND.execute();\n-        } else if (\"config\".equalsIgnoreCase(command)) {\n-            CONFIGURATION_COMMAND.execute();\n-        } else if (\"notification\".equalsIgnoreCase(command)) {\n-            NOTIFICATION_COMMAND.execute();\n-        } else if (\"report\".equalsIgnoreCase(command)) {\n-            REPORT_COMMAND.execute();\n-        } else if (\"policy\".equalsIgnoreCase(command)) {\n-            POLICY_COMMAND.execute();\n+    private static String helpMessage() {\n+        final StringBuilder helpMessageBuilder = new StringBuilder(\"Usage: Main [options]\\n\");\n+        helpMessageBuilder.append(\"  Options:\\n\");\n+        try {\n+            for (AbstractCommand command : CommandUtils.commands()) {\n+                final String commandName = command.getClass().getAnnotation(Command.class).name();\n+                helpMessageBuilder.append(\"    \").append(commandName);\n+                if (!\"help\".equalsIgnoreCase(commandName)) {\n+                    helpMessageBuilder.append(\" --help\");\n+                }\n+                helpMessageBuilder.append(\"\\n\");\n+            }\n+        } catch (final IllegalAccessException | IllegalArgumentException | InstantiationException ex) {\n+            RESULT_MANAGER.generic(ex.getMessage());\n         }\n+\n+        return helpMessageBuilder.toString();\n     }\n \n     private SyncopeAdm() {"},{"sha":"0fc5b3324fbfcbf6c371174322fe7fecaae22cce","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeServices.java","status":"modified","additions":25,"deletions":7,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.client.cli;\n \n-import java.util.ResourceBundle;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.apache.syncope.client.cli.commands.install.InstallConfigFileTemplate;\n+import org.apache.syncope.client.cli.util.JasyptUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.slf4j.Logger;\n@@ -28,15 +32,29 @@ public final class SyncopeServices {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeServices.class);\n \n-    private static final ResourceBundle SYNCOPE_PROPS = ResourceBundle.getBundle(\"syncope\");\n-\n-    private static final SyncopeClient CLIENT = new SyncopeClientFactoryBean()\n-            .setAddress(SYNCOPE_PROPS.getString(\"syncope.rest.services\"))\n-            .create(SYNCOPE_PROPS.getString(\"syncope.user\"), SYNCOPE_PROPS.getString(\"syncope.password\"));\n+    private static String SYNCOPE_ADDRESS;\n \n     public static <T> T get(final Class<T> claz) {\n+        final Properties properties = new Properties();\n+        try {\n+            properties.load(new FileInputStream(InstallConfigFileTemplate.FILE_PATH));\n+        } catch (final IOException e) {\n+            LOG.error(\"Error opening properties file\", e);\n+        }\n+\n+        final String syncopeAdminPassword = JasyptUtils.getJasyptUtils().decrypt(properties.getProperty(\n+                \"syncope.admin.password\"));\n+        SYNCOPE_ADDRESS = properties.getProperty(\"syncope.rest.services\");\n+        final SyncopeClient syncopeClient = new SyncopeClientFactoryBean()\n+                .setAddress(SYNCOPE_ADDRESS)\n+                .create(properties.getProperty(\"syncope.admin.user\"), syncopeAdminPassword);\n+\n         LOG.debug(\"Creting service for {}\", claz.getName());\n-        return CLIENT.getService(claz);\n+        return syncopeClient.getService(claz);\n+    }\n+\n+    public static String getAddress() {\n+        return SYNCOPE_ADDRESS;\n     }\n \n     private SyncopeServices() {"},{"sha":"6a03556d6642170ee6172a49ebd2569bf26b02d8","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/AbstractCommand.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FAbstractCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,15 +18,11 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import com.beust.jcommander.Parameter;\n+import org.apache.syncope.client.cli.Input;\n \n public abstract class AbstractCommand {\n \n-    @Parameter(names = {\"-h\", \"--help\"})\n-    protected boolean help = false;\n+    public abstract void execute(final Input input);\n \n-    @Parameter(names = {\"-l\", \"--list\"})\n-    protected boolean list = false;\n-\n-    protected abstract void execute();\n+    public abstract String getHelpMessage();\n }"},{"sha":"c316e138eb0b2deaae47462138affbeacda52a5f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands;\n+\n+import org.apache.syncope.client.cli.messages.Messages;\n+\n+public abstract class CommonsResultManager {\n+\n+    public void deletedMessage(final String what, final String key) {\n+        Messages.printDeletedMessage(what, key);\n+    }\n+\n+    public void notFoundError(final String what, final String parameter) {\n+        Messages.printNofFoundMessage(what, parameter);\n+    }\n+\n+    public void notBooleanDeletedError(final String what, final String key) {\n+        Messages.printNotBooleanDeletedMessage(what, key);\n+    }\n+\n+    public void typeNotValidError(final String what, final String parameter, final String[] options) {\n+        Messages.printTypeNotValidMessage(what, parameter, options);\n+    }\n+\n+    public void commandOptionError(final String message) {\n+        Messages.printCommandOptionMessage(message);\n+    }\n+\n+    public void defaultError(final String option, final String helpMessage) {\n+        Messages.printDefaultMessage(option, helpMessage);\n+    }\n+\n+    public void generic(final String... messages) {\n+        Messages.printMessage(messages);\n+    }\n+}"},{"sha":"70c532dddbc6701bf07a6e3afc1ae6ebd95c7489","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ConfigurationCommand.java","status":"removed","additions":0,"deletions":209,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FConfigurationCommand.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,209 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import com.beust.jcommander.DynamicParameter;\n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n-import java.io.IOException;\n-import java.io.SequenceInputStream;\n-import java.util.HashMap;\n-import java.util.Map;\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.TransformerException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.client.cli.util.XMLUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n-import org.apache.syncope.common.rest.api.service.ConfigurationService;\n-import org.apache.syncope.common.rest.api.service.SyncopeService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.xml.sax.SAXException;\n-\n-@Parameters(\n-        commandNames = \"config\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope configuration service\")\n-public class ConfigurationCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ConfigurationCommand.class);\n-\n-    private static final String EXPORT_FILE_NAME = \"/content.xml\";\n-\n-    private final String helpMessage = \"Usage: config [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={CONF-NAME} \\n\"\n-            + \"    -u, --update \\n\"\n-            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n-            + \"    -c, --create \\n\"\n-            + \"       Syntax: {CONF-NAME}={CONF-VALUE} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={CONF-NAME}\"\n-            + \"    -v, --validators \\n\"\n-            + \"    -mt, --mail-templates \\n\"\n-            + \"    -e, --export \\n\"\n-            + \"       Syntax: -e={WHERE-DIR} \\n\";\n-\n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private String confNameToRead;\n-\n-    @DynamicParameter(names = { \"-u\", \"--update\" })\n-    private final Map<String, String> updateConf = new HashMap<>();\n-\n-    @DynamicParameter(names = { \"-c\", \"--create\" })\n-    private final Map<String, String> createConf = new HashMap<>();\n-\n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private String confNameToDelete;\n-\n-    @Parameter(names = { \"-v\", \"--validators\" })\n-    private boolean validators = false;\n-\n-    @Parameter(names = { \"-mt\", \"--mail-templates\" })\n-    private boolean mailTemplates = false;\n-\n-    @Parameter(names = { \"-e\", \"--export\" })\n-    private String export;\n-\n-    @Override\n-    public void execute() {\n-        final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n-        final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n-\n-        LOG.debug(\"Logger service successfully created\");\n-\n-        if (help) {\n-            LOG.debug(\"- configuration help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            LOG.debug(\"- configuration list command\");\n-            try {\n-                final ConfTO confTO = configurationService.list();\n-                for (final AttrTO attrTO : confTO.getPlainAttrMap().values()) {\n-                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n-                            + \" - readonly: \" + attrTO.isReadonly());\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (StringUtils.isNotBlank(confNameToRead)) {\n-            LOG.debug(\"- configuration read {} command\", confNameToRead);\n-            try {\n-                final AttrTO attrTO = configurationService.get(confNameToRead);\n-                System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n-                        + \" - readonly: \" + attrTO.isReadonly());\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (!updateConf.isEmpty()) {\n-            LOG.debug(\"- configuration update command with params {}\", updateConf);\n-            try {\n-                for (final Map.Entry<String, String> entrySet : updateConf.entrySet()) {\n-                    final AttrTO attrTO = configurationService.get(entrySet.getKey());\n-                    attrTO.getValues().clear();\n-                    attrTO.getValues().add(entrySet.getValue());\n-                    configurationService.set(attrTO);\n-                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" has value(s) \" + attrTO.getValues()\n-                            + \" - readonly: \" + attrTO.isReadonly());\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (!createConf.isEmpty()) {\n-            LOG.debug(\"- configuration create command with params {}\", createConf);\n-            try {\n-                for (final Map.Entry<String, String> entrySet : createConf.entrySet()) {\n-                    final AttrTO attrTO = new AttrTO();\n-                    attrTO.setSchema(entrySet.getKey());\n-                    attrTO.getValues().add(entrySet.getValue());\n-                    configurationService.set(attrTO);\n-                    System.out.println(\" - Conf \" + attrTO.getSchema() + \" created with value(s) \" + attrTO.getValues()\n-                            + \" - readonly: \" + attrTO.isReadonly());\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (StringUtils.isNotBlank(confNameToDelete)) {\n-            try {\n-                LOG.debug(\"- configuration delete {} command\", confNameToDelete);\n-                configurationService.delete(confNameToDelete);\n-                System.out.println(\" - Conf \" + confNameToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (validators) {\n-            LOG.debug(\"- configuration validators command\");\n-            try {\n-                System.out.println(\"Conf validator class: \");\n-                for (final String validator : syncopeService.info().getValidators()) {\n-                    System.out.println(\"  *** \" + validator);\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (mailTemplates) {\n-            LOG.debug(\"- configuration mailTemplates command\");\n-            try {\n-                System.out.println(\"Conf mail template for:\");\n-                for (final String mailTemplate : syncopeService.info().getMailTemplates()) {\n-                    System.out.println(\"  *** \" + mailTemplate);\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (StringUtils.isNotBlank(export)) {\n-            LOG.debug(\"- configuration export command, directory where xml will be export: {}\", export);\n-\n-            try {\n-                XMLUtils.createXMLFile((SequenceInputStream) configurationService.export().getEntity(), export\n-                        + EXPORT_FILE_NAME);\n-                System.out.println(\" - \" + export + EXPORT_FILE_NAME + \" successfully created\");\n-            } catch (final IOException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final ParserConfigurationException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final SAXException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final TransformerConfigurationException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final TransformerException ex) {\n-                LOG.error(\"Error creating content.xml file in {} directory\", export, ex);\n-                System.out.println(\" - Error creating \" + export + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n-            } catch (final SyncopeClientException ex) {\n-                LOG.error(\"Error calling configuration service\", ex);\n-                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n-        }\n-    }\n-\n-}"},{"sha":"469e68a22f19dc58c736ef2215fb71c0a101cc02","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/LoggerCommand.java","status":"removed","additions":0,"deletions":168,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FLoggerCommand.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,168 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import com.beust.jcommander.DynamicParameter;\n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.LoggerTO;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Parameters(\n-        commandNames = \"logger\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope logger service\")\n-public class LoggerCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(LoggerCommand.class);\n-\n-    private final String helpMessage = \"Usage: logger [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={LOG-NAME} \\n\"\n-            + \"    -u, --update \\n\"\n-            + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n-            + \"    -ua, --update-all \\n\"\n-            + \"       Syntax: -ua={LOG-LEVEL} \\n\"\n-            + \"    -c, --create \\n\"\n-            + \"       Syntax: {LOG-NAME}={LOG-LEVEL} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={LOG-NAME}\";\n-\n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private String logNameToRead;\n-\n-    @DynamicParameter(names = { \"-u\", \"--update\" })\n-    private final Map<String, String> updateLogs = new HashMap<String, String>();\n-\n-    @Parameter(names = { \"-ua\", \"--update-all\" })\n-    private String logLevel;\n-\n-    @DynamicParameter(names = { \"-c\", \"--create\" })\n-    private final Map<String, String> createLogs = new HashMap<String, String>();\n-\n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private String logNameToDelete;\n-\n-    @Override\n-    public void execute() {\n-        final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n-\n-        LOG.debug(\"Logger service successfully created\");\n-\n-        if (help) {\n-            LOG.debug(\"- logger help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            LOG.debug(\"- logger list command\");\n-            try {\n-                for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                    System.out.println(\" - \" + loggerTO.getKey() + \" -> \" + loggerTO.getLevel());\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (StringUtils.isNotBlank(logNameToRead)) {\n-            LOG.debug(\"- logger read {} command\", logNameToRead);\n-            try {\n-                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, logNameToRead);\n-                System.out.println(\" - Logger \" + loggerTO.getKey() + \" with level -> \" + loggerTO.getLevel());\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (!updateLogs.isEmpty()) {\n-            LOG.debug(\"- logger update command with params {}\", updateLogs);\n-\n-            for (final Map.Entry<String, String> log : updateLogs.entrySet()) {\n-                final LoggerTO loggerTO = loggerService.read(LoggerType.LOG, log.getKey());\n-                try {\n-                    loggerTO.setLevel(LoggerLevel.valueOf(log.getValue()));\n-                    loggerService.update(LoggerType.LOG, loggerTO);\n-                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" new level -> \" + loggerTO.getLevel());\n-                } catch (final SyncopeClientException ex) {\n-                    System.out.println(\" - Error: \" + ex.getMessage());\n-                } catch (final IllegalArgumentException ex) {\n-                    System.out.println(\" - Error: \" + log.getValue() + \" isn't a valid logger level, try with:\");\n-                    for (final LoggerLevel level : LoggerLevel.values()) {\n-                        System.out.println(\"  *** \" + level.name());\n-                    }\n-                }\n-            }\n-        } else if (StringUtils.isNotBlank(logLevel)) {\n-            LOG.debug(\"- logger update all command with level {}\", logLevel);\n-            for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n-                try {\n-                    loggerTO.setLevel(LoggerLevel.valueOf(logLevel));\n-                    loggerService.update(LoggerType.LOG, loggerTO);\n-                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" new level -> \" + loggerTO.getLevel());\n-                } catch (final SyncopeClientException ex) {\n-                    System.out.println(\" - Error: \" + ex.getMessage());\n-                } catch (final IllegalArgumentException ex) {\n-                    System.out.println(\" - Error: \" + loggerTO.getLevel() + \" isn't a valid logger level, try with:\");\n-                    for (final LoggerLevel level : LoggerLevel.values()) {\n-                        System.out.println(\"  *** \" + level.name());\n-                    }\n-                }\n-            }\n-        } else if (!createLogs.isEmpty()) {\n-            LOG.debug(\"- logger create command with params {}\", createLogs);\n-\n-            for (final Map.Entry<String, String> entrySet : createLogs.entrySet()) {\n-                final LoggerTO loggerTO = new LoggerTO();\n-                try {\n-                    loggerTO.setKey(entrySet.getKey());\n-                    loggerTO.setLevel(LoggerLevel.valueOf(entrySet.getValue()));\n-                    loggerService.update(LoggerType.LOG, loggerTO);\n-                    System.out.println(\" - Logger \" + loggerTO.getKey() + \" created with level -> \" + loggerTO.\n-                            getLevel());\n-                } catch (final SyncopeClientException ex) {\n-                    System.out.println(\" - Error: \" + ex.getMessage());\n-                } catch (final IllegalArgumentException ex) {\n-                    System.out.println(\" - Error: \" + loggerTO.getLevel() + \" isn't a valid logger level, try with:\");\n-                    for (final LoggerLevel level : LoggerLevel.values()) {\n-                        System.out.println(\"  *** \" + level.name());\n-                    }\n-                }\n-            }\n-        } else if (StringUtils.isNotBlank(logNameToDelete)) {\n-            try {\n-                LOG.debug(\"- logger delete {} command\", logNameToDelete);\n-                loggerService.delete(LoggerType.LOG, logNameToDelete);\n-                System.out.println(\" - Logger \" + logNameToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n-        }\n-    }\n-\n-}"},{"sha":"473ebdc036402aa8996d93d26c7ad7c9ec76de78","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/NotificationCommand.java","status":"removed","additions":0,"deletions":92,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FNotificationCommand.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,92 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.NotificationTO;\n-import org.apache.syncope.common.rest.api.service.NotificationService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Parameters(\n-        commandNames = \"notification\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope notification service\")\n-public class NotificationCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(NotificationCommand.class);\n-\n-    private final String helpMessage = \"Usage: notification [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={NOTIFICATION-ID} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={NOTIFICATION-ID}\";\n-\n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private Long notificationIdToRead = -1L;\n-\n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private Long notificationIdToDelete = -1L;\n-\n-    @Override\n-    public void execute() {\n-        final NotificationService notificationService = SyncopeServices.get(NotificationService.class);\n-\n-        LOG.debug(\"Notification service successfully created\");\n-\n-        if (help) {\n-            LOG.debug(\"- notification help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            LOG.debug(\"- notification list command\");\n-            try {\n-                for (final NotificationTO notificationTO : notificationService.list()) {\n-                    System.out.println(notificationTO);\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (notificationIdToRead > -1L) {\n-            LOG.debug(\"- notification read {} command\", notificationIdToRead);\n-            try {\n-                System.out.println(notificationService.read(notificationIdToRead));\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (notificationIdToDelete > -1L) {\n-            try {\n-                LOG.debug(\"- notification delete {} command\", notificationIdToDelete);\n-                notificationService.delete(notificationIdToDelete);\n-                System.out.println(\" - Notification \" + notificationIdToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n-        }\n-    }\n-\n-}"},{"sha":"ae34f53371aeafb29251b155c630b2bec76fdf74","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"removed","additions":0,"deletions":105,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,105 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands;\n-\n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n-import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.common.rest.api.service.PolicyService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-@Parameters(\n-        commandNames = \"policy\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope policy service\")\n-public class PolicyCommand extends AbstractCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(PolicyCommand.class);\n-\n-    private final String helpMessage = \"Usage: policy [options]\\n\"\n-            + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -ll, --list-policy \\n\"\n-            + \"       Syntax: -ll={POLICY-TYPE} \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={POLICY-ID} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={POLICY-ID}\";\n-\n-    @Parameter(names = { \"-ll\", \"--list-policy\" })\n-    private String policyType;\n-\n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private Long policyIdToRead = -1L;\n-\n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private Long policyIdToDelete = -1L;\n-\n-    @Override\n-    public void execute() {\n-        final PolicyService policyService = SyncopeServices.get(PolicyService.class);\n-        LOG.debug(\"Policy service successfully created\");\n-\n-        if (help) {\n-            LOG.debug(\"- policy help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            // do nothing for the moment...\n-        } else if (StringUtils.isNotBlank(policyType)) {\n-            LOG.debug(\"- policy list command for type {}\", policyType);\n-            try {\n-                for (final AbstractPolicyTO policyTO : policyService.list(PolicyType.valueOf(policyType))) {\n-                    System.out.println(policyTO);\n-                }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            } catch (final IllegalArgumentException ex) {\n-                System.out.println(\" - Error: \" + policyType + \" isn't a valid policy type, try with:\");\n-                for (final PolicyType type : PolicyType.values()) {\n-                    System.out.println(\"  *** \" + type.name());\n-                }\n-            }\n-        } else if (policyIdToRead > -1L) {\n-            LOG.debug(\"- policy read {} command\", policyIdToRead);\n-            try {\n-                System.out.println(policyService.read(policyIdToRead));\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (policyIdToDelete > -1L) {\n-            try {\n-                LOG.debug(\"- policy delete {} command\", policyIdToDelete);\n-                policyService.delete(policyIdToDelete);\n-                System.out.println(\" - Report \" + policyIdToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n-        }\n-    }\n-\n-}"},{"sha":"30be7fbf217e682953adb612c7919f4ba1a707ef","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/ReportCommand.java","status":"modified","additions":303,"deletions":130,"changes":433,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FReportCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,162 +18,335 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n import java.io.IOException;\n import java.io.SequenceInputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.TransformerException;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n import org.apache.syncope.client.cli.util.XMLUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.xml.sax.SAXException;\n \n-@Parameters(\n-        commandNames = \"report\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope report service\")\n+@Command(name = \"report\")\n public class ReportCommand extends AbstractCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReportCommand.class);\n \n-    private final String helpMessage = \"Usage: report [options]\\n\"\n+    private static final String HELP_MESSAGE = \"Usage: report [options]\\n\"\n             + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={POLICY-ID} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={POLICY-ID} \\n\"\n-            + \"    -e, --execute \\n\"\n-            + \"       Syntax: -e={POLICY-ID} \\n\"\n-            + \"    -re, --read-executecution \\n\"\n-            + \"       Syntax: -re={EXECUTION-ID} \\n\"\n-            + \"    -de, --delete-executecution \\n\"\n-            + \"       Syntax: -de={EXECUTION-ID} \\n\"\n-            + \"    -eer, --export-executecution-result \\n\"\n-            + \"       Syntax: -eer={EXECUTION-ID} \\n\"\n-            + \"    -rc, --reportlet-class\";\n-\n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private Long reportIdToRead = -1L;\n-\n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private Long reportIdToDelete = -1L;\n-\n-    @Parameter(names = { \"-e\", \"--execute\" })\n-    private Long reportIdToExecute = -1L;\n-\n-    @Parameter(names = { \"-re\", \"--read-execution\" })\n-    private Long executionIdToRead = -1L;\n-\n-    @Parameter(names = { \"-de\", \"--delete-execution\" })\n-    private Long executionIdToDelete = -1L;\n-\n-    @Parameter(names = { \"-eer\", \"--export-execution-result\" })\n-    private Long exportId = -1L;\n-\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {REPORT-ID} {REPORT-ID} [...] \\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {REPORT-ID} {REPORT-ID} [...]\\n\"\n+            + \"    --execute \\n\"\n+            + \"       Syntax: --execute {REPORT-ID} \\n\"\n+            + \"    --read-execution \\n\"\n+            + \"       Syntax: --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n\"\n+            + \"    --delete-execution \\n\"\n+            + \"       Syntax: --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n\"\n+            + \"    --export-execution-result \\n\"\n+            + \"       Syntax: --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n+            + \"          Format: CSV / HTML / PDF / XML / RTF\"\n+            + \"    --reportlet-class\";\n+    \n     @Override\n-    public void execute() {\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n+\n+        String[] parameters = input.getParameters();\n+\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n         final ReportService reportService = SyncopeServices.get(ReportService.class);\n-        LOG.debug(\"Report service successfully created\");\n-\n-        if (help) {\n-            LOG.debug(\"- report help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            LOG.debug(\"- report list command\");\n-            try {\n-                for (ReportTO reportTO : reportService.list()) {\n-                    System.out.println(reportTO);\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                try {\n+                    for (final ReportTO reportTO : reportService.list()) {\n+                        System.out.println(reportTO);\n+                    }\n+                } catch (final SyncopeClientException ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                }\n+                break;\n+            case LIST_JOBS:\n+                try {\n+                    for (final JobStatusType jobStatusType : JobStatusType.values()) {\n+                        System.out.println(\"Report execution for \" + jobStatusType);\n+                        final List<ReportExecTO> reportExecTOs = reportService.listJobs(jobStatusType);\n+                        for (final ReportExecTO reportExecTO : reportExecTOs) {\n+                            System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n+                            System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n+                            System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n+                            System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n+                            System.out.println();\n+                        }\n+                    }\n+                } catch (final SyncopeClientException ex) {\n+                    Messages.printMessage(ex.getMessage());\n+                }\n+                break;\n+            case READ:\n+                final String readErrorMessage = \"report --read {REPORT-ID} {REPORT-ID} [...]\";\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            System.out.println(reportService.read(Long.valueOf(parameter)));\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Report\", parameter);\n+                            } else {\n+                                Messages.printMessage(ex.getMessage());\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(readErrorMessage);\n+                }\n+                break;\n+            case DELETE:\n+                final String deleteErrorMessage = \"report --delete {REPORT-ID} {REPORT-ID} [...]\";\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            reportService.delete(Long.valueOf(parameter));\n+                            Messages.printDeletedMessage(\"Report\", parameter);\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Report\", parameter);\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                Messages.printMessage(\"You cannot delete report \" + parameter);\n+                            } else {\n+                                Messages.printMessage(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n+                        }\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(deleteErrorMessage);\n+                }\n+                break;\n+            case EXECUTE:\n+                final String executeErrorMessage = \"report --execute {REPORT-ID}\";\n+\n+                if (parameters.length == 1) {\n+\n+                    try {\n+                        final Long reportIdToExecute = Long.valueOf(parameters[0]);\n+                        reportService.execute(reportIdToExecute);\n+                        final List<ReportExecTO> executionList\n+                                = reportService.read(reportIdToExecute).getExecutions();\n+                        final ReportExecTO lastExecution = executionList.get(executionList.size() - 1);\n+                        System.out.println(\" - Report execution id: \" + lastExecution.getKey());\n+                        System.out.println(\" - Report execution status: \" + lastExecution.getStatus());\n+                        System.out.println(\" - Report execution start date: \" + lastExecution.getStartDate());\n+                    } catch (final WebServiceException | SyncopeClientException ex) {\n+                        System.out.println(\"Error:\");\n+                        if (ex.getMessage().startsWith(\"NotFound\")) {\n+                            Messages.printNofFoundMessage(\"Report\", parameters[0]);\n+                        } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                            Messages.printMessage(\"You cannot delete report \" + parameters[0]);\n+                        } else {\n+                            Messages.printMessage(ex.getMessage());\n+                        }\n+                    } catch (final NumberFormatException ex) {\n+                        Messages.printIdNotNumberDeletedMessage(\"report\", parameters[0]);\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(executeErrorMessage);\n+                }\n+                break;\n+            case READ_EXECUTION:\n+                final String readExecutionErrorMessage = \"report --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\";\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+\n+                        try {\n+                            ReportExecTO reportExecTO = reportService.readExecution(Long.valueOf(parameter));\n+                            System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n+                            System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n+                            System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n+                            System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            System.out.println(\"Error:\");\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Report\", parameter);\n+                            } else {\n+                                Messages.printMessage(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n+                        }\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(readExecutionErrorMessage);\n+                }\n+                break;\n+            case DELETE_EXECUTION:\n+                final String deleteExecutionErrorMessage\n+                        = \"report --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\";\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+\n+                        try {\n+                            reportService.deleteExecution(Long.valueOf(parameter));\n+                            Messages.printDeletedMessage(\"Report execution\", parameter);\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Report\", parameter);\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                System.out.println(\" - You cannot delete report \" + parameter);\n+                            } else {\n+                                System.out.println(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n+                        }\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(deleteExecutionErrorMessage);\n+                }\n+                break;\n+            case EXPORT_EXECUTION_RESULT:\n+                final String exportExecutionErrorMessage\n+                        = \"report --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n\"\n+                        + \"          Format: CSV / HTML / PDF / XML / RTF\";\n+\n+                if (parameters.length >= 2) {\n+                    parameters = Arrays.copyOf(parameters, parameters.length - 1);\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            final ReportExecExportFormat format = ReportExecExportFormat.valueOf(input.lastParameter());\n+                            final Long exportId = Long.valueOf(parameter);\n+                            final SequenceInputStream report = (SequenceInputStream) reportService.\n+                                    exportExecutionResult(exportId, format).getEntity();\n+                            switch (format) {\n+                                case XML:\n+                                    final String xmlFinalName = \"export_\" + exportId + \".xml\";\n+                                    XMLUtils.createXMLFile(report, xmlFinalName);\n+                                    Messages.printMessage(xmlFinalName + \" successfully created\");\n+                                    break;\n+                                case CSV:\n+                                    Messages.printMessage(format + \" doesn't supported\");\n+                                    break;\n+                                case PDF:\n+                                    Messages.printMessage(format + \" doesn't supported\");\n+                                    break;\n+                                case HTML:\n+                                    Messages.printMessage(format + \" doesn't supported\");\n+                                    break;\n+                                case RTF:\n+                                    Messages.printMessage(format + \" doesn't supported\");\n+                                    break;\n+                                default:\n+                                    Messages.printMessage(format + \" doesn't supported\");\n+                                    break;\n+                            }\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                Messages.printNofFoundMessage(\"Report\", parameter);\n+                            } else {\n+                                System.out.println(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            Messages.printIdNotNumberDeletedMessage(\"report\", parameter);\n+                        } catch (IOException | ParserConfigurationException | SAXException | TransformerException e) {\n+                            System.out.println(\" - Error creating \" + \"export_\" + parameter + \" \" + e.getMessage());\n+                        } catch (final IllegalArgumentException ex) {\n+                            Messages.printTypeNotValidMessage(\n+                                    \"format\", input.firstParameter(),\n+                                    CommandUtils.fromEnumToArray(ReportExecExportFormat.class));\n+                        }\n+                        break;\n+                    }\n+                } else {\n+                    Messages.printCommandOptionMessage(exportExecutionErrorMessage);\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                Messages.printDefaultMessage(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        LIST_JOBS(\"--list-jobs\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\"),\n+        EXECUTE(\"--execute\"),\n+        READ_EXECUTION(\"--read-execution\"),\n+        DELETE_EXECUTION(\"--delete-execution\"),\n+        EXPORT_EXECUTION_RESULT(\"--export-execution-result\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (reportIdToRead > -1L) {\n-            LOG.debug(\"- report read {} command\", reportIdToRead);\n-            try {\n-                System.out.println(reportService.read(reportIdToRead));\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (reportIdToDelete > -1L) {\n-            try {\n-                LOG.debug(\"- report delete {} command\", reportIdToDelete);\n-                reportService.delete(reportIdToDelete);\n-                System.out.println(\" - Report \" + reportIdToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (reportIdToExecute > -1L) {\n-            try {\n-                LOG.debug(\"- report execute {} command\", reportIdToExecute);\n-                reportService.execute(reportIdToExecute);\n-                final List<ReportExecTO> executionList = reportService.read(reportIdToExecute).getExecutions();\n-                final ReportExecTO lastExecution = executionList.get(executionList.size() - 1);\n-                System.out.println(\" - Report execution id: \" + lastExecution.getKey());\n-                System.out.println(\" - Report execution status: \" + lastExecution.getStatus());\n-                System.out.println(\" - Report execution start date: \" + lastExecution.getStartDate());\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (executionIdToRead > -1L) {\n-            try {\n-                LOG.debug(\"- report execution read {} command\", executionIdToRead);\n-                ReportExecTO reportExecTO = reportService.readExecution(executionIdToRead);\n-                System.out.println(\" - Report execution id: \" + reportExecTO.getKey());\n-                System.out.println(\" - Report execution status: \" + reportExecTO.getStatus());\n-                System.out.println(\" - Report execution start date: \" + reportExecTO.getStartDate());\n-                System.out.println(\" - Report execution end date: \" + reportExecTO.getEndDate());\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (executionIdToDelete > -1L) {\n-            try {\n-                LOG.debug(\"- report execution delete {} command\", executionIdToDelete);\n-                reportService.deleteExecution(executionIdToDelete);\n-                System.out.println(\" - Report execution \" + executionIdToDelete + \"successfyllt deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n             }\n-        } else if (exportId > -1L) {\n-            LOG.debug(\"- report export command for report: {}\", exportId);\n-\n-            try {\n-                XMLUtils.createXMLFile((SequenceInputStream) reportService.exportExecutionResult(exportId,\n-                        ReportExecExportFormat.XML).getEntity(), \"export_\" + exportId + \".xml\");\n-                System.out.println(\" - \" + \"export_\" + exportId + \" successfully created\");\n-            } catch (final IOException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final ParserConfigurationException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final SAXException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final TransformerConfigurationException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating \" + \"export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final TransformerException ex) {\n-                LOG.error(\"Error creating xml file\", ex);\n-                System.out.println(\" - Error creating export_\" + exportId + \" \" + ex.getMessage());\n-            } catch (final SyncopeClientException ex) {\n-                LOG.error(\"Error calling configuration service\", ex);\n-                System.out.println(\" - Error calling configuration service \" + ex.getMessage());\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n             }\n-        } else {\n-            System.out.println(helpMessage);\n+            return options;\n         }\n     }\n-\n }"},{"sha":"2942c07bd4ca05bc335920f1f77a2282c1206770","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/AbstractConfigurationCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FAbstractConfigurationCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.ConfigurationService;\n+\n+public abstract class AbstractConfigurationCommand {\n+\n+    protected final ConfigurationService configurationService = SyncopeServices.get(ConfigurationService.class);\n+\n+    protected final ConfigurationResultManager configurationResultManager = new ConfigurationResultManager();\n+\n+}"},{"sha":"00fe6fafef5dd46bab2d644d3964663d8c6fc4ed","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationCommand.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"configuration\")\n+public class ConfigurationCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: configuration [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --get \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {CONF-NAME} {CONF-NAME} [...] \\n\"\n+            + \"    --update \\n\"\n+            + \"       Syntax: --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {CONF-NAME} {CONF-NAME} [...]\\n\"\n+            + \"    --export \\n\"\n+            + \"       Syntax: --export {WHERE-DIR}\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case GET:\n+                new ConfigurationGet().get();\n+                break;\n+            case READ:\n+                new ConfigurationRead(input).read();\n+                break;\n+            case UPDATE:\n+                new ConfigurationUpdate(input).update();\n+                break;\n+            case DELETE:\n+                new ConfigurationDelete(input).delete();\n+                break;\n+            case EXPORT:\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new ConfigurationResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        GET(\"--get\"),\n+        READ(\"--read\"),\n+        UPDATE(\"--update\"),\n+        DELETE(\"--delete\"),\n+        EXPORT(\"--export\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"f308aa99aeeb29cce25e9846b2112451afda857a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationDelete.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationDelete.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class ConfigurationDelete extends AbstractConfigurationCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"configuration --delete {CONF-NAME} {CONF-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public ConfigurationDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    configurationService.delete(parameter);\n+                    configurationResultManager.deletedMessage(\"Configuration\", parameter);\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        configurationResultManager.notFoundError(\"Configuration\", parameter);\n+                    } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                        configurationResultManager.generic(\"You cannot delete configuration\", parameter);\n+                    } else {\n+                        configurationResultManager.generic(ex.getMessage());\n+                    }\n+                    break;\n+                }\n+            }\n+        } else {\n+            configurationResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"2e61c4fff9985b9d95c2fb220e6506a1ab0a3941","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationExport.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationExport.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.XMLUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.xml.sax.SAXException;\n+\n+public class ConfigurationExport extends AbstractConfigurationCommand {\n+\n+    private static final String EXPORT_HELP_MESSAGE = \"configuration --export {WHERE-DIR}\";\n+\n+    private static final String EXPORT_FILE_NAME = \"/content.xml\";\n+\n+    private final Input input;\n+\n+    public ConfigurationExport(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void export() {\n+        if (input.parameterNumber() == 1) {\n+            try {\n+                XMLUtils.createXMLFile(\n+                        (SequenceInputStream) configurationService.export().getEntity(),\n+                        input.firstParameter() + EXPORT_FILE_NAME);\n+                configurationResultManager.generic(\n+                        input.firstParameter() + EXPORT_FILE_NAME + \" successfully created\");\n+            } catch (final IOException ex) {\n+                configurationResultManager.generic(ex.getMessage());\n+            } catch (ParserConfigurationException | SAXException | TransformerConfigurationException ex) {\n+                configurationResultManager.generic(\n+                        \"Error creating \" + input.firstParameter() + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+            } catch (final TransformerException ex) {\n+                if (ex.getCause() instanceof FileNotFoundException) {\n+                    configurationResultManager.generic(\"Permission denied on \" + input.firstParameter());\n+                } else {\n+                    configurationResultManager.generic(\n+                            \"Error creating \" + input.firstParameter() + EXPORT_FILE_NAME + \" \" + ex.getMessage());\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                configurationResultManager.generic(\"Error calling configuration service \" + ex.getMessage());\n+            }\n+        } else {\n+            configurationResultManager.commandOptionError(EXPORT_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"2aa3ff405e2f4613964d23d3de7cd6ac73c2e8e7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationGet.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationGet.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.LinkedList;\n+\n+public class ConfigurationGet extends AbstractConfigurationCommand {\n+\n+    public ConfigurationGet() {\n+    }\n+\n+    public void get() {\n+        try {\n+            configurationResultManager.fromGet(new LinkedList<>(configurationService.list()));\n+        } catch (final Exception ex) {\n+            configurationResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+}"},{"sha":"c4294e741a5b9f69b8b3649f04455a8142e25e29","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationRead.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationRead.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+\n+public class ConfigurationRead extends AbstractConfigurationCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"configuration --read {CONF-NAME} {CONF-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public ConfigurationRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            final LinkedList<AttrTO> attrList = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    attrList.add(configurationService.get(parameter));\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        configurationResultManager.notFoundError(\"Configuration\", parameter);\n+                    } else {\n+                        configurationResultManager.generic(ex.getMessage());\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                configurationResultManager.fromGet(attrList);\n+            }\n+        } else {\n+            configurationResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"446d08af7ed8c38a5646c32e04ae286fe0034a1a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationResultManager.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+\n+public class ConfigurationResultManager extends CommonsResultManager {\n+\n+    public void fromGet(final LinkedList<AttrTO> attrTOs) {\n+        fromCommandToView(\"syncope configuration\", attrTOs);\n+    }\n+\n+    public void fromRead(final LinkedList<AttrTO> attrTOs) {\n+        fromCommandToView(\"selected configuration attributes\", attrTOs);\n+    }\n+    \n+    public void fromUpdate(final LinkedList<AttrTO> attrTOs) {\n+        fromCommandToView(\"updated configuration attributes\", attrTOs);\n+    }\n+\n+    private void fromCommandToView(final String title, final LinkedList<AttrTO> attrTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(title).header(\"attribute\").header(\"value\");\n+        for (final AttrTO attrTO : attrTOs) {\n+            String attrValue = attrTO.getValues().toString();\n+            attrValue = attrValue.substring(0, attrValue.length() - 1);\n+            attrValue = attrValue.substring(1, attrValue.length());\n+            tableBuilder.rowValues(\n+                    new LinkedList(Arrays.asList(attrTO.getSchema(), attrValue)));\n+        }\n+        tableBuilder.build().print();\n+    }\n+}"},{"sha":"295ebd11b85a3cbe43524eb8f57d6e889f61f307","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/configuration/ConfigurationUpdate.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconfiguration%2FConfigurationUpdate.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.configuration;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+\n+public class ConfigurationUpdate extends AbstractConfigurationCommand {\n+\n+    private static final String UPDATE_HELP_MESSAGE\n+            = \"configuration --update {CONF-NAME}={CONF-VALUE} {CONF-NAME}={CONF-VALUE} [...]\";\n+\n+    private final Input input;\n+\n+    public ConfigurationUpdate(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void update() {\n+        if (input.parameterNumber() >= 1) {\n+            Input.PairParameter pairParameter = null;\n+            AttrTO attrTO;\n+            final LinkedList<AttrTO> attrList = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    pairParameter = input.toPairParameter(parameter);\n+                    attrTO = configurationService.get(pairParameter.getKey());\n+                    attrTO.getValues().clear();\n+                    attrTO.getValues().add(pairParameter.getValue());\n+                    configurationService.set(attrTO);\n+                    attrList.add(attrTO);\n+                } catch (final IllegalArgumentException ex) {\n+                    configurationResultManager.generic(ex.getMessage(), UPDATE_HELP_MESSAGE);\n+                    failed = true;\n+                    break;\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        configurationResultManager.notFoundError(\"Configuration\", pairParameter.getKey());\n+                    } else if (ex.getMessage().startsWith(\"InvalidValues\")) {\n+                        configurationResultManager.generic(\n+                                pairParameter.getValue() + \" is not a valid value for \" + pairParameter.getKey());\n+                    } else {\n+                        configurationResultManager.generic(ex.getMessage());\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                configurationResultManager.fromUpdate(attrList);\n+            }\n+        } else {\n+            configurationResultManager.commandOptionError(UPDATE_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"b5bfca5e603e1b8aac68163e51fb964836de1473","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/AbstractDomainCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FAbstractDomainCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FAbstractDomainCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FAbstractDomainCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.domain;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.DomainService;\n+\n+public abstract class AbstractDomainCommand {\n+\n+    protected final DomainService domainService = SyncopeServices.get(DomainService.class);\n+\n+    protected final DomainResultManager domainResultManager = new DomainResultManager();\n+\n+}"},{"sha":"e709b81b81913637835e146914da853478b9b66e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/DomainCommand.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.domain;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"domain\")\n+public class DomainCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: domain [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {DOMAIN-KEY} {DOMAIN-KEY} [...]\\n\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                new DomainList().list();\n+                break;\n+            case DELETE:\n+                new DomainDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new DomainResultManager().deletedMessage(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"1b0c235f034601b4f8b43e0e63feb0b7d17b3525","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/DomainDelete.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainDelete.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.domain;\n+\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class DomainDelete extends AbstractDomainCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"domain --delete {DOMAIN-KEY} {DOMAIN-KEY} [...]\";\n+\n+    private final Input input;\n+\n+    public DomainDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    domainService.delete(parameter);\n+                    domainResultManager.deletedMessage(\"Domain\", parameter);\n+                } catch (final SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        domainResultManager.notFoundError(\"Domain\", parameter);\n+                    } else {\n+                        domainResultManager.generic(ex.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            domainResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"94329d2cb8f4fe1b98a9484a218f51def79d9677","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/DomainList.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainList.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.domain;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.DomainTO;\n+\n+public class DomainList extends AbstractDomainCommand {\n+\n+    public DomainList() {\n+    }\n+\n+    public void list() {\n+        try {\n+            for (final DomainTO domainTO : domainService.list()) {\n+                domainResultManager.generic(domainTO.getKey());\n+            }\n+        } catch (final SyncopeClientException ex) {\n+            domainResultManager.generic(\"Error: \" + ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"a76711dc90c7b6e95e415705215a6d62fb57774c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/DomainRead.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainRead.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.domain;\n+\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.DomainTO;\n+\n+public class DomainRead extends AbstractDomainCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"domain --read {DOMAIN-KEY} {DOMAIN-KEY} [...]\";\n+\n+    private final Input input;\n+\n+    public DomainRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    final DomainTO domainTO = domainService.read(parameter);\n+                    domainResultManager.generic(domainTO.getKey());\n+                } catch (final SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        domainResultManager.notFoundError(\"Domain\", parameter);\n+                    } else {\n+                        domainResultManager.generic(ex.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            domainResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"6066c5d9e10679e1f2d17b5077a686ba6ae0ee94","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/domain/DomainResultManager.java","status":"renamed","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fdomain%2FDomainResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -16,15 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity;\n+package org.apache.syncope.client.cli.commands.domain;\n \n-import java.util.List;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n \n-public interface VirAttr<O extends Any<?, ?, ?>> extends Attr<VirSchema, O> {\n+public class DomainResultManager extends CommonsResultManager {\n \n-    List<String> getValues();\n-\n-    boolean add(String value);\n-\n-    boolean remove(String value);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/VirAttr.java"},{"sha":"c658beb84c1d397b9fdfb9f664f25933ecd9256d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/help/Help.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelp.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.help;\n+\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+\n+public class Help {\n+\n+    public void help() {\n+        final StringBuilder generalHelpBuilder = new StringBuilder(\"General help\\n\");\n+        try {\n+            for (final AbstractCommand command : CommandUtils.commands()) {\n+                generalHelpBuilder.append(\"Command: \")\n+                        .append(command.getClass().getAnnotation(Command.class).name())\n+                        .append(\"\\n\")\n+                        .append(command.getHelpMessage())\n+                        .append(\"\\n\")\n+                        .append(\" \\n\");\n+            }\n+            System.out.println(generalHelpBuilder.toString());\n+        } catch (final IllegalAccessException | IllegalArgumentException | InstantiationException e) {\n+            new HelpResultManager().generic(e.getMessage());\n+        }\n+    }\n+}"},{"sha":"eed0924d06ba8baf6a00a3ccfcdb0e6a5ab60953","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/help/HelpCommand.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.help;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+\n+@Command(name = \"help\")\n+public class HelpCommand extends AbstractCommand {\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case HELP:\n+                new Help().help();\n+                break;\n+            default:\n+                new HelpResultManager().defaultError(\n+                        input.getOption(), CommandUtils.helpMessage(\"info\", Options.toList()));\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return CommandUtils.helpMessage(\"help\", Options.toList());\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--print\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"7a67943eddb012f2a54fd762d962ce5e3fe92c0c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/help/HelpResultManager.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fhelp%2FHelpResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -16,10 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.anyobject;\n+package org.apache.syncope.client.cli.commands.help;\n \n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n \n-public interface AVirAttr extends VirAttr<AnyObject> {\n+public class HelpResultManager extends CommonsResultManager {\n \n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AVirAttr.java"},{"sha":"ccf917089c863da789f36e2c1f76f59e503abc97","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/Info.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,243 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.info;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+\n+public class Info {\n+\n+    private final SyncopeTO syncopeTO = SyncopeServices.get(SyncopeService.class).info();\n+    \n+    private final InfoResultManager infoResultManager = new InfoResultManager();\n+\n+    public void version() {\n+        try {\n+            infoResultManager.generic(\"Syncope version: \" + syncopeTO.getVersion());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void pwdResetAllowed() {\n+        try {\n+            infoResultManager.generic(\"Password reset allowed: \" + syncopeTO.isPwdResetAllowed());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void resetWithSecurityQuestion() {\n+        try {\n+            infoResultManager.generic(\"Password reset requiring security question: \"\n+                    + syncopeTO.isPwdResetRequiringSecurityQuestions());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void selfRegistrationAllowed() {\n+        try {\n+            infoResultManager.generic(\"Self registration allowed: \" + syncopeTO.isSelfRegAllowed());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void provisioningManager() {\n+        try {\n+            infoResultManager.generic(\n+                    \"Any object provisioning manager class: \" + syncopeTO.getAnyObjectProvisioningManager(),\n+                    \"User       provisioning manager class: \" + syncopeTO.getUserProvisioningManager(),\n+                    \"Group      provisioning manager class: \" + syncopeTO.getGroupProvisioningManager());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void workflowAdapter() {\n+        try {\n+            infoResultManager.generic(\n+                    \"Any object workflow adapter class: \" + syncopeTO.getAnyObjectWorkflowAdapter(),\n+                    \"User       workflow adapter class: \" + syncopeTO.getUserWorkflowAdapter(),\n+                    \"Group      workflow adapter class: \" + syncopeTO.getGroupWorkflowAdapter());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void accountRules() {\n+        try {\n+            for (final String accountRule : syncopeTO.getAccountRules()) {\n+                infoResultManager.generic(\"Account rule: \" + accountRule);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void connidLocation() {\n+        try {\n+            for (final String location : syncopeTO.getConnIdLocations()) {\n+                infoResultManager.generic(\"ConnId location: \" + location);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void logicActions() {\n+        try {\n+            for (final String logic : syncopeTO.getLogicActions()) {\n+                infoResultManager.generic(\"Logic action: \" + logic);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void mailTemplates() {\n+        try {\n+            for (final String template : syncopeTO.getMailTemplates()) {\n+                infoResultManager.generic(\"Mail template: \" + template);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void mappingItemTransformers() {\n+        try {\n+            for (final String tranformer : syncopeTO.getMappingItemTransformers()) {\n+                infoResultManager.generic(\"Mapping item tranformer: \" + tranformer);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void passwordRules() {\n+        try {\n+            for (final String rules : syncopeTO.getPasswordRules()) {\n+                infoResultManager.generic(\"Password rule: \" + rules);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void propagationActions() {\n+        try {\n+            for (final String action : syncopeTO.getPropagationActions()) {\n+                infoResultManager.generic(\"Propagation action: \" + action);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void pushActions() {\n+        try {\n+            for (final String action : syncopeTO.getPushActions()) {\n+                infoResultManager.generic(\"Push action: \" + action);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void pushCorrelationActions() {\n+        try {\n+            for (final String rule : syncopeTO.getPushCorrelationRules()) {\n+                infoResultManager.generic(\"Push correlation rule: \" + rule);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void reportlets() {\n+        try {\n+            for (final String reportlet : syncopeTO.getReportlets()) {\n+                infoResultManager.generic(\"Reportlet: \" + reportlet);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void syncActions() {\n+        try {\n+            for (final String action : syncopeTO.getSyncActions()) {\n+                infoResultManager.generic(\"Sync action: \" + action);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void syncCorrelationRules() {\n+        try {\n+            for (final String rule : syncopeTO.getSyncCorrelationRules()) {\n+                infoResultManager.generic(\"Sync correlation rule: \" + rule);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void taskJobs() {\n+        try {\n+            for (final String job : syncopeTO.getTaskJobs()) {\n+                infoResultManager.generic(\"Task job: \" + job);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void validators() {\n+        try {\n+            for (final String validator : syncopeTO.getValidators()) {\n+                infoResultManager.generic(\"Validator: \" + validator);\n+            }\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void passwordGenerators() {\n+        try {\n+            infoResultManager.generic(\n+                    \"Password generator class: \" + syncopeTO.getPasswordGenerator());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+    public void virAttrCache() {\n+        try {\n+            infoResultManager.generic(\n+                    \"Virtual attribute cache class: \" + syncopeTO.getVirAttrCache());\n+        } catch (final Exception ex) {\n+            infoResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"31b9aaa9d6c8f08ad35d56751b22a1e54fd37dea","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/InfoCommand.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.info;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+\n+@Command(name = \"info\")\n+public class InfoCommand extends AbstractCommand {\n+\n+    private final Info info = new Info();\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case VERSION:\n+                info.version();\n+                break;\n+            case PWD_RESET_ALLOWED:\n+                info.pwdResetAllowed();\n+                break;\n+            case PWD_RESET_WITH_SECURITY_QUESTION:\n+                info.resetWithSecurityQuestion();\n+                break;\n+            case SELF_REG_ALLOWED:\n+                info.selfRegistrationAllowed();\n+                break;\n+            case PROVISIONING_MANAGER:\n+                info.provisioningManager();\n+                break;\n+            case WORKFLOW_ADAPTER:\n+                info.workflowAdapter();\n+                break;\n+            case ACCOUNT_RULES:\n+                info.accountRules();\n+                break;\n+            case CONNID_LOCATION:\n+                info.connidLocation();\n+                break;\n+            case LOGIC_ACTIONS:\n+                info.logicActions();\n+                break;\n+            case MAIL_TEMPLATES:\n+                info.mailTemplates();\n+                break;\n+            case MAPPING_ITEM_TRANSFORMERS:\n+                info.mappingItemTransformers();\n+                break;\n+            case PASSWORD_RULES:\n+                info.passwordRules();\n+                break;\n+            case PROPAGATION_ACTIONS:\n+                info.propagationActions();\n+                break;\n+            case PUSH_ACTIONS:\n+                info.pushActions();\n+                break;\n+            case PUSH_CORRELATION_ACTIONS:\n+                info.pushCorrelationActions();\n+                break;\n+            case REPORTLETS:\n+                info.reportlets();\n+                break;\n+            case SYNC_ACTIONS:\n+                info.syncActions();\n+                break;\n+            case SYNC_CORRELATION_RULES:\n+                info.syncCorrelationRules();\n+                break;\n+            case TASK_JOBS:\n+                info.taskJobs();\n+                break;\n+            case VALIDATORS:\n+                info.validators();\n+                break;\n+            case PASSWORD_GENERATOR:\n+                info.passwordGenerators();\n+                break;\n+            case VIR_ATTR_CACHE:\n+                info.virAttrCache();\n+                break;\n+            case HELP:\n+                System.out.println(CommandUtils.helpMessage(\"info\", Options.toList()));\n+                break;\n+            default:\n+                new InfoResultManager().defaultError(\n+                        input.getOption(), CommandUtils.helpMessage(\"info\", Options.toList()));\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return CommandUtils.helpMessage(\"info\", Options.toList());\n+    }\n+\n+    private enum Options {\n+\n+        VERSION(\"--version\"),\n+        PWD_RESET_ALLOWED(\"--pwd-reset-allowed\"),\n+        PWD_RESET_WITH_SECURITY_QUESTION(\"--pwd-reset-with-question\"),\n+        SELF_REG_ALLOWED(\"--self-reg-allowed\"),\n+        PROVISIONING_MANAGER(\"--provisioning-manager-classes\"),\n+        WORKFLOW_ADAPTER(\"--workflow-adapter-classes\"),\n+        ACCOUNT_RULES(\"--account-rules-classes\"),\n+        CONNID_LOCATION(\"--connid-locations\"),\n+        LOGIC_ACTIONS(\"--logic-actions\"),\n+        MAIL_TEMPLATES(\"--mail-templates\"),\n+        MAPPING_ITEM_TRANSFORMERS(\"--mapping-item-transformers\"),\n+        PASSWORD_RULES(\"--password-rules\"),\n+        PROPAGATION_ACTIONS(\"--propagation-actions\"),\n+        PUSH_ACTIONS(\"--push-actions\"),\n+        PUSH_CORRELATION_ACTIONS(\"--push-correlation-actions\"),\n+        REPORTLETS(\"--reportlets\"),\n+        SYNC_ACTIONS(\"--sync-actions\"),\n+        SYNC_CORRELATION_RULES(\"--sync-correlation-rules\"),\n+        TASK_JOBS(\"--task-jobs\"),\n+        VALIDATORS(\"--validators\"),\n+        PASSWORD_GENERATOR(\"--password-generator\"),\n+        VIR_ATTR_CACHE(\"--vir-attr-cache\"),\n+        HELP(\"--help\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"237af649c3dce474d44ff54a8867ca73715c0ddc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/InfoResultManager.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfoResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.info;\n+\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+\n+public class InfoResultManager extends CommonsResultManager {\n+\n+}"},{"sha":"7ebd55465b14d4ce5298fe5d012f1dbb34c6067c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallCommand.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.install;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"install\")\n+public class InstallCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: install [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --setup\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case INSTALL:\n+                new InstallSetup().setup();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new InstallResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        INSTALL(\"--setup\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+    }\n+\n+}"},{"sha":"6ef5cc0e7b1861427d6a882ab046eb069b1cb67e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallConfigFileTemplate.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallConfigFileTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallConfigFileTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallConfigFileTemplate.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.install;\n+\n+import java.util.ResourceBundle;\n+\n+public final class InstallConfigFileTemplate {\n+\n+    private static final ResourceBundle CONF = ResourceBundle.getBundle(\"configuration\");\n+\n+    public static final String DIR_PATH\n+            = CONF.getString(\"cli.installation.directory\");\n+\n+    public static final String FILE_NAME\n+            = CONF.getString(\"cli.installation.filename\");\n+\n+    public static final String FILE_PATH = DIR_PATH + FILE_NAME;\n+\n+    private static final String SYNCOPE_REST_SERVICES = \"syncope.rest.services=%s://%s:%s%s\";\n+\n+    private static final String SYNCOPE_ADMIN_USER = \"syncope.admin.user=%s\";\n+\n+    private static final String SYNCOPE_ADMIN_PASSWORD = \"syncope.admin.password=%s\";\n+\n+    public static String createFile(\n+            final String schema,\n+            final String hostname,\n+            final String port,\n+            final String restContext,\n+            final String user,\n+            final String password) {\n+        final String syncopeRestServices = String.format(SYNCOPE_REST_SERVICES, schema, hostname, port, restContext);\n+        final String syncopeAdminUser = String.format(SYNCOPE_ADMIN_USER, user);\n+        final String syncopeAdminPassword = String.format(SYNCOPE_ADMIN_PASSWORD, password);\n+\n+        return syncopeRestServices + \"\\n\" + syncopeAdminUser + \"\\n\" + syncopeAdminPassword;\n+    }\n+\n+    private InstallConfigFileTemplate() {\n+    }\n+}"},{"sha":"8b96ae0c37331c0c0bcca310eb444b2cf679a5f2","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallResultManager.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.install;\n+\n+import java.net.ConnectException;\n+import java.net.UnknownHostException;\n+import javax.ws.rs.ProcessingException;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+\n+public class InstallResultManager extends CommonsResultManager {\n+\n+    public void installationSuccessful(final String version) {\n+        System.out.println(\"Installation parameters checked on Syncope core version: \" + version);\n+        System.out.println(\"\");\n+        System.out.println(\"###############################################\");\n+        System.out.println(\"#                                             #\");\n+        System.out.println(\"#           Installation successful           #\");\n+        System.out.println(\"#     now you can use Syncope CLI client      #\");\n+        System.out.println(\"#                                             #\");\n+        System.out.println(\"###############################################\");\n+        System.out.println(\"\");\n+    }\n+\n+    public void manageProcessingException(final ProcessingException ex) {\n+        if (ex.getCause() instanceof UnknownHostException) {\n+            final String unknownHost = ex.getCause().getMessage().split(\":\")[3];\n+            System.out.println(\"\");\n+            System.out.println(\"Provided host:\" + unknownHost);\n+            System.out.println(\"\");\n+            System.out.println(\"###############################################\");\n+            System.out.println(\"#                                             #\");\n+            System.out.println(\"#            Provided unknown host!           #\");\n+            System.out.println(\"#        START AGAIN the installation!        #\");\n+            System.out.println(\"#                                             #\");\n+            System.out.println(\"###############################################\");\n+            System.out.println(\"\");\n+        } else if (ex.getCause() instanceof ConnectException) {\n+            System.out.println(\"\");\n+            System.out.println(\"Provided address :\" + SyncopeServices.getAddress());\n+            System.out.println(\"\");\n+            System.out.println(\"###############################################\");\n+            System.out.println(\"#                                             #\");\n+            System.out.println(\"#       Provided address is unreachable!      #\");\n+            System.out.println(\"#         Check it and if it is wrong         #\");\n+            System.out.println(\"#        START AGAIN the installation!        #\");\n+            System.out.println(\"#                                             #\");\n+            System.out.println(\"###############################################\");\n+            System.out.println(\"\");\n+        }\n+    }\n+\n+    public void manageException(final Exception e) {\n+        if (e.getMessage().contains(\"not authenticated\")) {\n+            System.out.println(\"\");\n+            System.out.println(\"###############################################\");\n+            System.out.println(\"#                                             #\");\n+            System.out.println(\"#   Username or password provided are wrong   #\");\n+            System.out.println(\"#        START AGAIN the installation!        #\");\n+            System.out.println(\"#                                             #\");\n+            System.out.println(\"###############################################\");\n+            System.out.println(\"\");\n+        } else {\n+            System.out.println(\"\");\n+            System.out.println(\"###############################################\");\n+            System.out.println(\"#                                             #\");\n+            System.out.println(\"#                Something wrong              #\");\n+            System.out.println(\"#        START AGAIN the installation!        #\");\n+            System.out.println(\"#                                             #\");\n+            System.out.println(\"###############################################\");\n+            System.out.println(\"\");\n+        }\n+    }\n+}"},{"sha":"10995b03f993044ae99784068ac6dc6a94e70b20","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/install/InstallSetup.java","status":"added","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finstall%2FInstallSetup.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.install;\n+\n+import java.io.FileNotFoundException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.Scanner;\n+import javax.ws.rs.ProcessingException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.util.FileSystemUtils;\n+import org.apache.syncope.client.cli.util.JasyptUtils;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+\n+public class InstallSetup {\n+\n+    private final InstallResultManager installResultManager = new InstallResultManager();\n+\n+    private String syncopeAdminUser;\n+\n+    private String syncopeAdminPassword;\n+\n+    private String syncopeServerSchema;\n+\n+    private String syncopeServerHostname = \"localhost\";\n+\n+    private String syncopeServerPort = \"8080\";\n+\n+    private String syncopeServerRestContext = \"/syncope/rest/\";\n+\n+    public InstallSetup() {\n+    }\n+\n+    public void setup() {\n+        final Scanner scanIn = new Scanner(System.in);\n+\n+        System.out.println(\"\");\n+        System.out.println(\"###############################################\");\n+        System.out.println(\"#                                             #\");\n+        System.out.println(\"# Welcome to Syncope CLI installation process #\");\n+        System.out.println(\"#                                             #\");\n+        System.out.println(\"###############################################\");\n+        System.out.println(\"\");\n+\n+        System.out.println(\"Path to config files of Syncope CLI client will be: \"\n+                + InstallConfigFileTemplate.DIR_PATH);\n+\n+        if (!FileSystemUtils.canWrite(InstallConfigFileTemplate.DIR_PATH)) {\n+            System.out.println(\"Permission denied on \" + InstallConfigFileTemplate.DIR_PATH);\n+        }\n+        System.out.println(\"- File system permission checked\");\n+        System.out.println(\"\");\n+\n+        System.out.println(\"Syncope server schema [http/https]:\");\n+        String syncopeServerSchemaFromSystemIn = scanIn.nextLine();\n+        boolean schemaFounded = false;\n+        while (!schemaFounded) {\n+            if ((\"http\".equalsIgnoreCase(syncopeServerSchemaFromSystemIn))\n+                    || (\"https\".equalsIgnoreCase(syncopeServerSchemaFromSystemIn))) {\n+                syncopeServerSchema = syncopeServerSchemaFromSystemIn;\n+                schemaFounded = true;\n+            } else {\n+                System.out.println(\"Please use one of below values:\");\n+                System.out.println(\"   - http\");\n+                System.out.println(\"   - https\");\n+                syncopeServerSchemaFromSystemIn = scanIn.nextLine();\n+            }\n+        }\n+\n+        System.out.println(\"Syncope server hostname [e.g. \" + syncopeServerHostname + \"]:\");\n+        String syncopeServerHostnameFromSystemIn = scanIn.nextLine();\n+        boolean syncopeServerHostnameFounded = false;\n+        while (!syncopeServerHostnameFounded) {\n+            if (StringUtils.isNotBlank(syncopeServerHostnameFromSystemIn)) {\n+                syncopeServerHostname = syncopeServerHostnameFromSystemIn;\n+                syncopeServerHostnameFounded = true;\n+            } else {\n+                System.out.println(\"Syncope server hostname [e.g. \" + syncopeServerHostname + \"]:\");\n+                syncopeServerHostnameFromSystemIn = scanIn.nextLine();\n+            }\n+        }\n+\n+        System.out.println(\"Syncope server port [e.g. \" + syncopeServerPort + \"]:\");\n+        String syncopeServerPortFromSystemIn = scanIn.nextLine();\n+        boolean syncopeServerPortFounded = false;\n+        while (!syncopeServerPortFounded) {\n+            if (StringUtils.isNotBlank(syncopeServerPortFromSystemIn)) {\n+                syncopeServerPort = syncopeServerPortFromSystemIn;\n+                syncopeServerPortFounded = true;\n+            } else if (!StringUtils.isNumeric(syncopeServerPortFromSystemIn)) {\n+                System.out.println(syncopeServerPortFromSystemIn + \" is not a numeric string, try again\");\n+                syncopeServerPortFromSystemIn = scanIn.nextLine();\n+            } else {\n+                System.out.println(\"Syncope server port [e.g. \" + syncopeServerPort + \"]:\");\n+                syncopeServerPortFromSystemIn = scanIn.nextLine();\n+            }\n+        }\n+\n+        System.out.println(\"Syncope server rest context [e.g. \" + syncopeServerRestContext + \"]:\");\n+        String syncopeServerRestContextFromSystemIn = scanIn.nextLine();\n+        boolean syncopeServerRestContextFounded = false;\n+        while (!syncopeServerRestContextFounded) {\n+            if (StringUtils.isNotBlank(syncopeServerRestContextFromSystemIn)) {\n+                syncopeServerRestContext = syncopeServerRestContextFromSystemIn;\n+                syncopeServerRestContextFounded = true;\n+            } else {\n+                System.out.println(\"Syncope server port [e.g. \" + syncopeServerRestContext + \"]:\");\n+                syncopeServerRestContextFromSystemIn = scanIn.nextLine();\n+            }\n+        }\n+\n+        System.out.println(\"Syncope admin user:\");\n+        String syncopeAdminUserFromSystemIn = scanIn.nextLine();\n+        boolean syncopeAdminUserFounded = false;\n+        while (!syncopeAdminUserFounded) {\n+            if (StringUtils.isNotBlank(syncopeAdminUserFromSystemIn)) {\n+                syncopeAdminUser = syncopeAdminUserFromSystemIn;\n+                syncopeAdminUserFounded = true;\n+            } else {\n+                System.out.println(\"Syncope admin user:\");\n+                syncopeAdminUserFromSystemIn = scanIn.nextLine();\n+            }\n+        }\n+\n+        System.out.println(\"Syncope admin password:\");\n+        String syncopeAdminPasswordFromSystemIn = scanIn.nextLine();\n+        boolean syncopeAdminPasswordFounded = false;\n+        while (!syncopeAdminPasswordFounded) {\n+            if (StringUtils.isNotBlank(syncopeAdminPasswordFromSystemIn)) {\n+                syncopeAdminPassword = syncopeAdminPasswordFromSystemIn;\n+                syncopeAdminPasswordFounded = true;\n+            } else {\n+                System.out.println(\"Syncope admin user:\");\n+                syncopeAdminPasswordFromSystemIn = scanIn.nextLine();\n+            }\n+        }\n+\n+        scanIn.close();\n+\n+        final JasyptUtils jasyptUtils = JasyptUtils.getJasyptUtils();\n+\n+        try {\n+            FileSystemUtils.createNewDirectory(InstallConfigFileTemplate.DIR_PATH);\n+            final String contentCliPropertiesFile = InstallConfigFileTemplate.createFile(\n+                    syncopeServerSchema,\n+                    syncopeServerHostname,\n+                    syncopeServerPort,\n+                    syncopeServerRestContext,\n+                    syncopeAdminUser,\n+                    jasyptUtils.encrypt(syncopeAdminPassword));\n+            FileSystemUtils.createFileWith(InstallConfigFileTemplate.FILE_PATH, contentCliPropertiesFile);\n+\n+        } catch (final FileNotFoundException | UnsupportedEncodingException ex) {\n+            System.out.println(ex.getMessage());\n+        }\n+\n+        try {\n+            final SyncopeService syncopeService = SyncopeServices.get(SyncopeService.class);\n+            installResultManager.installationSuccessful(syncopeService.info().getVersion());\n+        } catch (final ProcessingException ex) {\n+            installResultManager.manageProcessingException(ex);\n+        } catch (final Exception e) {\n+            installResultManager.manageException(e);\n+        }\n+    }\n+}"},{"sha":"a8703a9befff2e776f0a7166871ad014f0e9e1cc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/AbstractLoggerCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FAbstractLoggerCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+\n+public abstract class AbstractLoggerCommand {\n+\n+    protected final LoggerService loggerService = SyncopeServices.get(LoggerService.class);\n+    \n+    protected final LoggerResultManager loggerResultManager = new LoggerResultManager();\n+\n+}"},{"sha":"134c294efc169fcdfbd28a11e533f9eb49b3a783","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCommand.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"logger\")\n+public class LoggerCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: logger [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {LOG-NAME} {LOG-NAME} [...]\\n\"\n+            + \"    --update \\n\"\n+            + \"       Syntax: --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n+            + \"    --update-all \\n\"\n+            + \"       Syntax: --update-all {LOG-LEVEL} \\n\"\n+            + \"    --create \\n\"\n+            + \"       Syntax: --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {LOG-NAME} {LOG-NAME} [...]\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(LoggerOptions.HELP.getOptionName());\n+        }\n+\n+        switch (LoggerOptions.fromName(input.getOption())) {\n+            case LIST:\n+                new LoggerList().list();\n+                break;\n+            case READ:\n+                new LoggerRead(input).read();\n+                break;\n+            case UPDATE:\n+                new LoggerUpdate(input).update();\n+                break;\n+            case UPDATE_ALL:\n+                new LoggerUpdateAll(input).updateAll();\n+                break;\n+            case CREATE:\n+                new LoggerCreate(input).create();\n+                break;\n+            case DELETE:\n+                new LoggerDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new LoggerResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum LoggerOptions {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        READ(\"--read\"),\n+        UPDATE(\"--update\"),\n+        UPDATE_ALL(\"--update-all\"),\n+        CREATE(\"--create\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        LoggerOptions(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static LoggerOptions fromName(final String name) {\n+            LoggerOptions optionToReturn = HELP;\n+            for (final LoggerOptions option : LoggerOptions.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final LoggerOptions value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+\n+}"},{"sha":"6a51e953d59cf7114d001e9f4dea17c5647ed8eb","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerCreate.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerCreate.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerCreate extends AbstractLoggerCommand {\n+\n+    private static final String CREATE_HELP_MESSAGE\n+            = \"logger --create {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n+\n+    private final Input input;\n+\n+    public LoggerCreate(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void create() {\n+        if (input.parameterNumber() >= 1) {\n+            Input.PairParameter pairParameter;\n+            LoggerTO loggerTO;\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                loggerTO = new LoggerTO();\n+                try {\n+                    pairParameter = input.toPairParameter(parameter);\n+                    loggerTO.setKey(pairParameter.getKey());\n+                    loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n+                    loggerTOs.add(loggerTO);\n+                } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                    loggerResultManager.typeNotValidError(\n+                            \"logger level\", input.firstParameter(), CommandUtils.fromEnumToArray(LoggerLevel.class));\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                loggerResultManager.fromUpdate(loggerTOs);\n+            }\n+        } else {\n+            loggerResultManager.commandOptionError(CREATE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"5815b717ce1bc770a3b35b023a6c328931f8f283","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerDelete.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerDelete.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerDelete extends AbstractLoggerCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"logger --delete {LOG-NAME} {LOG-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public LoggerDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    loggerService.delete(LoggerType.LOG, parameter);\n+                    loggerResultManager.deletedMessage(\"Logger\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        loggerResultManager.notFoundError(\"Logger\", parameter);\n+                    } else {\n+                        loggerResultManager.generic(ex.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            loggerResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"d9d4f810e047031a3c1f563c175c948db3a44a8e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerList.java","status":"renamed","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerList.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -16,20 +16,22 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao;\n+package org.apache.syncope.client.cli.commands.logger;\n \n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import java.util.LinkedList;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.LoggerType;\n \n-public interface VirAttrDAO extends DAO<VirAttr<?>, Long> {\n+public class LoggerList extends AbstractLoggerCommand {\n \n-    <T extends VirAttr<?>> T find(Long key, Class<T> reference);\n+    public LoggerList() {\n+    }\n \n-    <T extends VirAttr<?>> List<T> findAll(Class<T> reference);\n-\n-    <T extends VirAttr<?>> T save(T virtualAttribute);\n-\n-    <T extends VirAttr<?>> void delete(Long key, Class<T> reference);\n-\n-    <T extends VirAttr<?>> void delete(T virAttr);\n+    public void list() {\n+        try {\n+            loggerResultManager.fromList(new LinkedList<>(loggerService.list(LoggerType.LOG)));\n+        } catch (final SyncopeClientException ex) {\n+            loggerResultManager.generic(\"Error: \" + ex.getMessage());\n+        }\n+    }\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirAttrDAO.java"},{"sha":"6e2447d28ade0c5865c13df6d1730847af0d8491","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerRead.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerRead.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerRead extends AbstractLoggerCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"logger --read {LOG-NAME} {LOG-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public LoggerRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.getParameters().length >= 1) {\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    loggerTOs.add(loggerService.read(LoggerType.LOG, parameter));\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        loggerResultManager.notFoundError(\"Logger\", parameter);\n+                    } else {\n+                        loggerResultManager.generic(\"Error: \" + ex.getMessage());\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                loggerResultManager.fromRead(loggerTOs);\n+            }\n+        } else {\n+            loggerResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"1a686cd467ef3442d05f99dd8732abd16fb21628","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerResultManager.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+\n+public class LoggerResultManager extends CommonsResultManager {\n+\n+    public void fromList(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"list loggers\", \"level\", loggerTOs);\n+    }\n+\n+    public void fromRead(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"read loggers\", \"level\", loggerTOs);\n+    }\n+\n+    public void fromCreate(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"created loggers\", \"level\", loggerTOs);\n+    }\n+\n+    public void fromUpdate(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"updated loggers\", \"new level\", loggerTOs);\n+    }\n+\n+    public void fromDelete(final LinkedList<LoggerTO> loggerTOs) {\n+        fromCommandToView(\"deleted loggers\", \"new level\", loggerTOs);\n+    }\n+\n+    private void fromCommandToView(final String title,\n+            final String secondHeader,\n+            final LinkedList<LoggerTO> loggerTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(title).header(\"logger\").header(secondHeader);\n+        for (final LoggerTO loggerTO : loggerTOs) {\n+            tableBuilder.rowValues(\n+                    new LinkedList(Arrays.asList(loggerTO.getKey(), loggerTO.getLevel().getLevel().name())));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+}"},{"sha":"03de917368d73f93f3f3870e7a720b8dac6bd8f3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdate.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdate.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerUpdate extends AbstractLoggerCommand {\n+\n+    private static final String UPDATE_HELP_MESSAGE\n+            = \"logger --update {LOG-NAME}={LOG-LEVEL} {LOG-NAME}={LOG-LEVEL} [...]\";\n+\n+    private final Input input;\n+\n+    public LoggerUpdate(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void update() {\n+        if (input.parameterNumber() >= 1) {\n+            Input.PairParameter pairParameter;\n+            LoggerTO loggerTO;\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    pairParameter = input.toPairParameter(parameter);\n+                    loggerTO = loggerService.read(LoggerType.LOG, pairParameter.getKey());\n+                    loggerTO.setLevel(LoggerLevel.valueOf(pairParameter.getValue()));\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n+                    loggerTOs.add(loggerTO);\n+                } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                    if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n+                        loggerResultManager.typeNotValidError(\n+                                \"logger level\",\n+                                input.firstParameter(),\n+                                CommandUtils.fromEnumToArray(LoggerLevel.class));\n+                    } else if (\"Parameter syntax error!\".equalsIgnoreCase(ex.getMessage())) {\n+                        loggerResultManager.generic(ex.getMessage(), UPDATE_HELP_MESSAGE);\n+                    } else if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        loggerResultManager.notFoundError(\"Logger\", parameter);\n+                    } else {\n+                        loggerResultManager.generic(ex.getMessage(), UPDATE_HELP_MESSAGE);\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                loggerResultManager.fromUpdate(loggerTOs);\n+            }\n+        } else {\n+            loggerResultManager.commandOptionError(UPDATE_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"55c2e603cc8479acc102e803ae2c20c34801d885","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/logger/LoggerUpdateAll.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Flogger%2FLoggerUpdateAll.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.logger;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.LoggerType;\n+\n+public class LoggerUpdateAll extends AbstractLoggerCommand {\n+\n+    private static final String UPDATE_ALL_HELP_MESSAGE = \"logger --update-all {LOG-LEVEL}\";\n+\n+    private final Input input;\n+\n+    public LoggerUpdateAll(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void updateAll() {\n+        if (input.parameterNumber() == 1) {\n+            final LinkedList<LoggerTO> loggerTOs = new LinkedList<>();\n+            boolean failed = false;\n+            for (final LoggerTO loggerTO : loggerService.list(LoggerType.LOG)) {\n+                try {\n+                    loggerTO.setLevel(LoggerLevel.valueOf(input.firstParameter()));\n+                    loggerService.update(LoggerType.LOG, loggerTO);\n+                    loggerTOs.add(loggerTO);\n+                } catch (final WebServiceException | SyncopeClientException | IllegalArgumentException ex) {\n+                    if (ex.getMessage().startsWith(\"No enum constant org.apache.syncope.common.lib.types.\")) {\n+                        loggerResultManager.typeNotValidError(\n+                                \"logger level\",\n+                                input.firstParameter(),\n+                                CommandUtils.fromEnumToArray(LoggerLevel.class));\n+                    } else {\n+                        loggerResultManager.generic(ex.getMessage(), UPDATE_ALL_HELP_MESSAGE);\n+                    }\n+                    failed = true;\n+                    break;\n+                }\n+            }\n+            if (!failed) {\n+                loggerResultManager.fromUpdate(loggerTOs);\n+            }\n+        } else {\n+            loggerResultManager.commandOptionError(UPDATE_ALL_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"2b862ed28e02b6e51d39e8d9e4486cd7fff1f88d","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/AbstractNotificationCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FAbstractNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FAbstractNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FAbstractNotificationCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.NotificationService;\n+\n+public abstract class AbstractNotificationCommand {\n+\n+    protected final NotificationService notificationService = SyncopeServices.get(NotificationService.class);\n+    \n+    protected final NotificationResultManager notificationResultManager = new NotificationResultManager();\n+\n+}"},{"sha":"d5197acc6d043a79281d1e9cb19bdff626377f9f","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationCommand.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"notification\")\n+public class NotificationCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: notification [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {NOTIFICATION-ID} \\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {NOTIFICATION-ID}\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                new NotificationList().list();\n+                break;\n+            case READ:\n+                new NotificationRead(input).read();\n+                break;\n+            case DELETE:\n+                new NotificationDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new NotificationResultManager().deletedMessage(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+\n+}"},{"sha":"1e4b96d00f7a1246f95f009633e981dd6af2cc43","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationDelete.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationDelete.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.messages.Messages;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class NotificationDelete extends AbstractNotificationCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"notification --delete {NOTIFICATION-ID} {NOTIFICATION-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public NotificationDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    notificationService.delete(Long.valueOf(parameter));\n+                    notificationResultManager.deletedMessage(\"Notification\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        notificationResultManager.notFoundError(\"Notification\", parameter);\n+                    } else {\n+                        Messages.printMessage(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    notificationResultManager.notBooleanDeletedError(\"notification\", parameter);\n+                }\n+            }\n+        } else {\n+            notificationResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"ff9561ca4b23fc2de4e68cbee4702023e5242486","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationList.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationList.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+\n+public class NotificationList extends AbstractNotificationCommand {\n+\n+    public void list() {\n+        try {\n+            for (final NotificationTO notificationTO : notificationService.list()) {\n+                System.out.println(notificationTO);\n+            }\n+        } catch (final SyncopeClientException ex) {\n+            notificationResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"386700c6b4f25a7f63ce5c75d00b37d05b08c305","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationRead.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationRead.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class NotificationRead extends AbstractNotificationCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"notification --read {NOTIFICATION-ID} {NOTIFICATION-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public NotificationRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    System.out.println(notificationService.read(Long.valueOf(parameter)));\n+                } catch (final NumberFormatException ex) {\n+                    notificationResultManager.notBooleanDeletedError(\"notification\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        notificationResultManager.notFoundError(\"Notification\", parameter);\n+                    } else {\n+                        notificationResultManager.generic(ex.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            notificationResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"d16d88b064ec6e838abb079a83eaf83934e183aa","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/notification/NotificationResultManager.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fnotification%2FNotificationResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.notification;\n+\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+\n+public class NotificationResultManager extends CommonsResultManager {\n+\n+}"},{"sha":"0bab4e5c482e6878d41adec67bcac607beb11be4","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/AbstractPolicyCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FAbstractPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FAbstractPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FAbstractPolicyCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.policy;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.PolicyService;\n+\n+public abstract class AbstractPolicyCommand {\n+\n+    protected final PolicyService policyService = SyncopeServices.get(PolicyService.class);\n+    \n+    protected final PolicyResultManager policyResultManager = new PolicyResultManager();\n+\n+}"},{"sha":"7c92d9d8fcf25bd6550f123c53499b7380119f03","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyCommand.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.policy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"policy\")\n+public class PolicyCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: policy [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list-policy \\n\"\n+            + \"       Syntax: --list-policy {POLICY-TYPE} \\n\"\n+            + \"          Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {POLICY-ID} {POLICY-ID} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {POLICY-ID} {POLICY-ID} [...]\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST_POLICY:\n+                new PolicyList(input).list();\n+                break;\n+            case READ:\n+                new PolicyRead(input).read();\n+                break;\n+            case DELETE:\n+                new PolicyDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new PolicyResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST_POLICY(\"--list-policy\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+\n+}"},{"sha":"15ffa8db31e95a75d8d1d31e5698bf0126adbca9","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyDelete.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyDelete.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.policy;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class PolicyDelete extends AbstractPolicyCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"policy --delete {POLICY-ID} {POLICY-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public PolicyDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    policyService.delete(Long.valueOf(parameter));\n+                    policyResultManager.deletedMessage(\"Policy\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    System.out.println(\"Error:\");\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        policyResultManager.notFoundError(\"Policy\", parameter);\n+                    } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                        policyResultManager.generic(\"You cannot delete policy \" + parameter);\n+                    } else {\n+                        policyResultManager.generic(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    policyResultManager.notBooleanDeletedError(\"policy\", parameter);\n+                }\n+            }\n+        } else {\n+            policyResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"c05acf719bc0303b64349d521ab24ecb16973a4b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyList.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyList.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.policy;\n+\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+\n+public class PolicyList extends AbstractPolicyCommand {\n+\n+    private static final String LIST_HELP_MESSAGE = \"policy --list-policy {POLICY-TYPE}\\n\"\n+            + \"   Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\";\n+\n+    private final Input input;\n+\n+    public PolicyList(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void list() {\n+\n+        if (input.parameterNumber() == 1) {\n+            try {\n+                final PolicyType policyType = PolicyType.valueOf(input.firstParameter());\n+                final LinkedList<AbstractPolicyTO> policyTOs = new LinkedList<>();\n+                for (final AbstractPolicyTO policyTO : policyService.list(policyType)) {\n+                    policyTOs.add(policyTO);\n+                }\n+                policyResultManager.fromList(policyType, policyTOs);\n+            } catch (final SyncopeClientException ex) {\n+                policyResultManager.generic(ex.getMessage());\n+            } catch (final IllegalArgumentException ex) {\n+                policyResultManager.typeNotValidError(\n+                        \"policy\", input.firstParameter(), CommandUtils.fromEnumToArray(PolicyType.class));\n+            }\n+        } else {\n+            policyResultManager.commandOptionError(LIST_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"f20d41e841398aa5a7abcea47830d915cb93bb00","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyRead.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyRead.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.policy;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+\n+public class PolicyRead extends AbstractPolicyCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"policy --read {POLICY-ID} {POLICY-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public PolicyRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            final LinkedList<AbstractPolicyTO> policyTOs = new LinkedList<>();\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    policyTOs.add(policyService.read(Long.valueOf(parameter)));\n+                    policyResultManager.fromRead(policyTOs);\n+                } catch (final NumberFormatException ex) {\n+                    policyResultManager.notBooleanDeletedError(\"policy\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        policyResultManager.notFoundError(\"Policy\", parameter);\n+                    } else {\n+                        policyResultManager.generic(ex.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            policyResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"88e40a0f52f58251ef55e00849a7a42678b72407","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/policy/PolicyResultManager.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fpolicy%2FPolicyResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.policy;\n+\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n+import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.policy.SyncPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+\n+public class PolicyResultManager extends CommonsResultManager {\n+\n+    public void fromRead(final LinkedList<AbstractPolicyTO> policyTOs) {\n+        for (AbstractPolicyTO policyTO : policyTOs) {\n+            if (!policyTOs.isEmpty()) {\n+                final PolicyType policyType = policyTO.getType();\n+                switch (policyType) {\n+                    case ACCOUNT:\n+                        printAccountPolicy((AccountPolicyTO) policyTO);\n+                        break;\n+                    case PASSWORD:\n+                        printPasswordPolicy((PasswordPolicyTO) policyTO);\n+                        break;\n+                    case PUSH:\n+                        System.out.println(policyTO);\n+                        break;\n+                    case SYNC:\n+                        printSyncPolicy((SyncPolicyTO) policyTO);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+    }\n+\n+    public void fromList(final PolicyType policyType, final LinkedList<AbstractPolicyTO> policyTOs) {\n+        switch (policyType) {\n+            case ACCOUNT:\n+                for (final AbstractPolicyTO policyTO : policyTOs) {\n+                    printAccountPolicy((AccountPolicyTO) policyTO);\n+                }\n+                break;\n+            case PASSWORD:\n+                for (final AbstractPolicyTO policyTO : policyTOs) {\n+                    printPasswordPolicy((PasswordPolicyTO) policyTO);\n+                }\n+                break;\n+            case PUSH:\n+                for (final AbstractPolicyTO policyTO : policyTOs) {\n+                    System.out.println(policyTO);\n+                }\n+                break;\n+            case SYNC:\n+                for (final AbstractPolicyTO policyTO : policyTOs) {\n+                    printSyncPolicy((SyncPolicyTO) policyTO);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    public void printAccountPolicy(final AccountPolicyTO policyTO) {\n+        System.out.println(\" > KEY: \" + String.valueOf(policyTO.getKey()));\n+        System.out.println(\"    type: \" + policyTO.getType().name());\n+        System.out.println(\"    description: \" + policyTO.getDescription());\n+        System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n+        System.out.println(\"    realms : \" + policyTO.getUsedByRealms().toString());\n+        System.out.println(\"    max authentication attempts : \" + policyTO.getMaxAuthenticationAttempts());\n+        System.out.println(\"    propagation suspension : \" + policyTO.isPropagateSuspension());\n+        System.out.println(\"    RULES : \");\n+        System.out.println(\"       > class : \" + policyTO.getRuleConfs());\n+    }\n+\n+    public void printPasswordPolicy(final PasswordPolicyTO policyTO) {\n+        System.out.println(\" > KEY: \" + String.valueOf(policyTO.getKey()));\n+        System.out.println(\"    type: \" + policyTO.getType().name());\n+        System.out.println(\"    description: \" + policyTO.getDescription());\n+        System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n+        System.out.println(\"    realms : \" + policyTO.getUsedByRealms().toString());\n+        System.out.println(\"    history lenght : \" + policyTO.getHistoryLength());\n+        System.out.println(\"    allow null password : \" + policyTO.isAllowNullPassword());\n+        System.out.println(\"    RULES : \");\n+        System.out.println(\"       > class : \" + ((PasswordPolicyTO) policyTO).getRuleConfs());\n+    }\n+\n+    public void printSyncPolicy(final SyncPolicyTO policyTO) {\n+        System.out.println(\" > KEY: \" + String.valueOf(policyTO.getKey()));\n+        System.out.println(\"    type: \" + policyTO.getType().name());\n+        System.out.println(\"    description: \" + policyTO.getDescription());\n+        System.out.println(\"    resources : \" + policyTO.getUsedByResources().toString());\n+        System.out.println(\"    realms : \" + policyTO.getUsedByRealms().toString());\n+        if (policyTO.getSpecification() != null) {\n+            System.out.println(\"    conflict resolution action: \"\n+                    + policyTO.getSpecification().getConflictResolutionAction().name());\n+            System.out.println(\"    correlation rule : \"\n+                    + policyTO.getSpecification().getCorrelationRules().toString());\n+        }\n+    }\n+}"},{"sha":"3074135a7137edc3555f83841e60d00f032f732e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/AbstractSchemaCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FAbstractSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FAbstractSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FAbstractSchemaCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.SchemaService;\n+\n+public abstract class AbstractSchemaCommand {\n+\n+    protected final SchemaService schemaService = SyncopeServices.get(SchemaService.class);\n+    \n+    protected final SchemaResultManager schemaResultManager = new SchemaResultManager();\n+\n+}"},{"sha":"193c79b45f3f481ecc3916a99dc19f30621e3755","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaCommand.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"schema\")\n+public class SchemaCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: schema [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list-all\\n\"\n+            + \"    --list-plain\\n\"\n+            + \"    --list-derived\\n\"\n+            + \"    --list-virtual\\n\"\n+            + \"    --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"        Schema type: PLAIN / DERIVED / VIRTUAL\\n\"\n+            + \"    --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"        Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST:\n+                new SchemaList(input).list();\n+                break;\n+            case LIST_ALL:\n+                new SchemaListAll().listAll();\n+                break;\n+            case LIST_PLAIN:\n+                new SchemaListPlain().listPlain();\n+                break;\n+            case LIST_DERIVED:\n+                new SchemaListDerived().listDerived();\n+                break;\n+            case LIST_VIRTUAL:\n+                new SchemaListVirtual().listVirtual();\n+                break;\n+            case READ:\n+                new SchemaRead(input).read();\n+                break;\n+            case DELETE:\n+                new SchemaDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new SchemaResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        LIST_ALL(\"--list-all\"),\n+        LIST_PLAIN(\"--list-plain\"),\n+        LIST_DERIVED(\"--list-derived\"),\n+        LIST_VIRTUAL(\"--list-virtual\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"9cf6fe2048db4cced334decef573034d228d9325","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaDelete.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaDelete.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.Arrays;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaDelete extends AbstractSchemaCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"schema --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    private final Input input;\n+\n+    public SchemaDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 2) {\n+            final String[] parameters = Arrays.copyOfRange(input.getParameters(), 1, input.parameterNumber());\n+            try {\n+                for (final String parameter : parameters) {\n+                    schemaService.delete(SchemaType.valueOf(input.firstParameter()), parameter);\n+                    schemaResultManager.deletedMessage(\"Schema\", parameter);\n+                }\n+            } catch (final SyncopeClientException | WebServiceException ex) {\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    schemaResultManager.notFoundError(\"Schema\", parameters[0]);\n+                } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                    schemaResultManager.generic(\"You cannot delete schema \" + parameters[0]);\n+                } else {\n+                    schemaResultManager.generic(ex.getMessage());\n+                }\n+            } catch (final IllegalArgumentException ex) {\n+                schemaResultManager.typeNotValidError(\n+                        \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n+            }\n+        } else {\n+            schemaResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"5f51604896b03db16c59327310d2b39ebd401656","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaList.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaList.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaList extends AbstractSchemaCommand {\n+\n+    private static final String LIST_HELP_MESSAGE = \"schema --list {SCHEMA-TYPE}\\n\"\n+            + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    private final Input input;\n+\n+    public SchemaList(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void list() {\n+        if (input.parameterNumber() == 1) {\n+            try {\n+                final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n+                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+                for (final AbstractSchemaTO schemaTO : schemaService.list(schemaType)) {\n+                    schemaTOs.add(schemaTO);\n+                }\n+                switch (schemaType) {\n+                    case PLAIN:\n+                        schemaResultManager.fromListPlain(schemaTOs);\n+                        break;\n+                    case DERIVED:\n+                        schemaResultManager.fromListDerived(schemaTOs);\n+                        break;\n+                    case VIRTUAL:\n+                        schemaResultManager.fromListVirtual(schemaTOs);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            } catch (final SyncopeClientException ex) {\n+                schemaResultManager.generic(ex.getMessage());\n+            } catch (final IllegalArgumentException ex) {\n+                schemaResultManager.typeNotValidError(\n+                        \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n+            }\n+        } else {\n+            schemaResultManager.commandOptionError(LIST_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"5d00adb1c3505985deb98d35c3f5b188371cb07b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListAll.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListAll.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaListAll extends AbstractSchemaCommand {\n+\n+    public void listAll() {\n+        try {\n+            for (final SchemaType schemaType : SchemaType.values()) {\n+                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+                for (final AbstractSchemaTO schemaTO : schemaService.list(schemaType)) {\n+                    schemaTOs.add(schemaTO);\n+                }\n+                switch (schemaType) {\n+                    case PLAIN:\n+                        schemaResultManager.fromListPlain(schemaTOs);\n+                        break;\n+                    case DERIVED:\n+                        schemaResultManager.fromListDerived(schemaTOs);\n+                        break;\n+                    case VIRTUAL:\n+                        schemaResultManager.fromListVirtual(schemaTOs);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        } catch (final SyncopeClientException | WebServiceException ex) {\n+            schemaResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+}"},{"sha":"8cdb5016b8251e901535f6864dff79a61880b82e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListDerived.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListDerived.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaListDerived extends AbstractSchemaCommand {\n+\n+    public void listDerived() {\n+        try {\n+            final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+            for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.DERIVED)) {\n+                schemaTOs.add(schemaTO);\n+            }\n+            schemaResultManager.fromListDerived(schemaTOs);\n+        } catch (final SyncopeClientException | WebServiceException ex) {\n+            schemaResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"e4160a786e630635decbb3673ebd1d2d143a5751","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListPlain.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListPlain.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaListPlain extends AbstractSchemaCommand {\n+\n+    public void listPlain() {\n+        try {\n+            final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+            for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.PLAIN)) {\n+                schemaTOs.add(schemaTO);\n+            }\n+            schemaResultManager.fromListPlain(schemaTOs);\n+        } catch (final SyncopeClientException | WebServiceException ex) {\n+            schemaResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"7b1bf249a57aa139841f9393a2dd76a8e99da734","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaListVirtual.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaListVirtual.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaListVirtual extends AbstractSchemaCommand {\n+\n+    public void listVirtual() {\n+        try {\n+            final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+            for (final AbstractSchemaTO schemaTO : schemaService.list(SchemaType.VIRTUAL)) {\n+                schemaTOs.add(schemaTO);\n+            }\n+            schemaResultManager.fromListVirtual(schemaTOs);\n+        } catch (final SyncopeClientException | WebServiceException ex) {\n+            schemaResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"97f1029bfe74fb423b76ccb015f3bea1610e2c76","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaRead.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaRead.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public class SchemaRead extends AbstractSchemaCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"schema --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n\"\n+            + \"   Schema type: PLAIN / DERIVED / VIRTUAL\";\n+\n+    private final Input input;\n+\n+    public SchemaRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 2) {\n+            final String[] parameters = Arrays.copyOfRange(input.getParameters(), 1, input.parameterNumber());\n+            try {\n+                final SchemaType schemaType = SchemaType.valueOf(input.firstParameter());\n+                final LinkedList<AbstractSchemaTO> schemaTOs = new LinkedList<>();\n+                for (final String parameter : parameters) {\n+                    schemaTOs.add(schemaService.read(schemaType, parameter));\n+                }\n+                switch (schemaType) {\n+                    case PLAIN:\n+                        schemaResultManager.fromReadPlain(schemaTOs);\n+                        break;\n+                    case DERIVED:\n+                        schemaResultManager.fromListDerived(schemaTOs);\n+                        break;\n+                    case VIRTUAL:\n+                        schemaResultManager.fromListVirtual(schemaTOs);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            } catch (final SyncopeClientException | WebServiceException ex) {\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    schemaResultManager.notFoundError(\"Schema\", parameters[0]);\n+                } else {\n+                    schemaResultManager.generic(ex.getMessage());\n+                }\n+            } catch (final IllegalArgumentException ex) {\n+                schemaResultManager.typeNotValidError(\n+                        \"schema\", input.firstParameter(), CommandUtils.fromEnumToArray(SchemaType.class));\n+            }\n+        } else {\n+            schemaResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"8880dd39a3111370dffde2db2f6fb42f16601c49","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/schema/SchemaResultManager.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fschema%2FSchemaResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.schema;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.client.cli.messages.Table;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.to.DerSchemaTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.VirSchemaTO;\n+\n+public class SchemaResultManager extends CommonsResultManager {\n+\n+    public void fromListPlain(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(\"plain schemas\").header(\"schema key\").header(\"type\").header(\"mandatory\");\n+        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+            tableBuilder.rowValues(new LinkedList(Arrays.asList(\n+                    ((PlainSchemaTO) schemaTO).getKey(),\n+                    ((PlainSchemaTO) schemaTO).getType().toString(),\n+                    ((PlainSchemaTO) schemaTO).getMandatoryCondition())));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+    public void fromReadPlain(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(\"plain schema details \")\n+                .header(\"schema key\")\n+                .header(\"type class\")\n+                .header(\"pattern\")\n+                .header(\"enum keys\")\n+                .header(\"enum values\")\n+                .header(\"mandatory condition\")\n+                .header(\"mime type\")\n+                .header(\"secret key\")\n+                .header(\"class validator\")\n+                .header(\"chiper\")\n+                .header(\"type\");\n+        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+            tableBuilder.rowValues(new LinkedList(Arrays.asList(\n+                    ((PlainSchemaTO) schemaTO).getKey(),\n+                    ((PlainSchemaTO) schemaTO).getAnyTypeClass(),\n+                    ((PlainSchemaTO) schemaTO).getConversionPattern(),\n+                    ((PlainSchemaTO) schemaTO).getEnumerationKeys(),\n+                    ((PlainSchemaTO) schemaTO).getEnumerationValues(),\n+                    ((PlainSchemaTO) schemaTO).getMandatoryCondition(),\n+                    ((PlainSchemaTO) schemaTO).getMimeType(),\n+                    ((PlainSchemaTO) schemaTO).getSecretKey(),\n+                    ((PlainSchemaTO) schemaTO).getValidatorClass(),\n+                    ((PlainSchemaTO) schemaTO).getCipherAlgorithm(),\n+                    ((PlainSchemaTO) schemaTO).getType().toString())));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+    public void fromListDerived(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(\"derived schemas\").header(\"schema key\").header(\"expression\");\n+        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+            tableBuilder.rowValues(new LinkedList(Arrays.asList(\n+                    ((DerSchemaTO) schemaTO).getKey(),\n+                    ((DerSchemaTO) schemaTO).getExpression())));\n+        }\n+        tableBuilder.build().print();\n+    }\n+\n+    public void fromListVirtual(final LinkedList<? extends AbstractSchemaTO> schemaTOs) {\n+        final Table.TableBuilder tableBuilder\n+                = new Table.TableBuilder(\"virtual schemas\").header(\"schema key\").header(\"readonly\");\n+        for (final AbstractSchemaTO schemaTO : schemaTOs) {\n+            tableBuilder.rowValues(new LinkedList(Arrays.asList(\n+                    ((VirSchemaTO) schemaTO).getKey(),\n+                    String.valueOf(((VirSchemaTO) schemaTO).isReadonly()))));\n+        }\n+        tableBuilder.build().print();\n+    }\n+}"},{"sha":"18e877af132e26d521f1706f653de5f5622d56be","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/AbstractTaskCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FAbstractTaskCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FAbstractTaskCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FAbstractTaskCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.TaskService;\n+\n+public abstract class AbstractTaskCommand {\n+\n+    protected final TaskService taskService = SyncopeServices.get(TaskService.class);\n+\n+    protected final TaskResultManager taskResultManager = new TaskResultManager();\n+\n+}"},{"sha":"a6166921293cc1cfe79f7af5a3ab023b8d87e24c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskCommand.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"task\")\n+public class TaskCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: task [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list-task \\n\"\n+            + \"       Syntax: --list-task {TASK-TYPE} \\n\"\n+            + \"          Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / SYNCHRONIZATION\\n\"\n+            + \"    --list-running-jobs \\n\"\n+            + \"    --list-scheduled-jobs \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {TASK-ID} {TASK-ID} [...]\\n\"\n+            + \"    --read-execution \\n\"\n+            + \"       Syntax: --read-execution {TASK-EXEC-ID} {TASK-EXEC-ID} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {TASK-ID} {TASK-ID} [...]\\n\"\n+            + \"    --delete-execution \\n\"\n+            + \"       Syntax: --delete-execution {TASK-EXEC-ID} {TASK-EXEC-ID} [...]\\n\"\n+            + \"    --execute \\n\"\n+            + \"       Syntax: --execute {TASK-ID} {DRY-RUN}\"\n+            + \"          Dry run: true / false\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n+\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST_TASK:\n+                new TaskList(input).list();\n+                break;\n+            case LIST_RUNNING_JOBS:\n+                new TaskRunningJobs().list();\n+                break;\n+            case LIST_SCHEDULED_JOBS:\n+                new TaskScheduledJobs().list();\n+                break;\n+            case READ:\n+                new TaskRead(input).read();\n+                break;\n+            case READ_EXECUTION:\n+                new TaskExecutionRead(input).read();\n+                break;\n+            case DELETE:\n+                new TaskDelete(input).delete();\n+                break;\n+            case DELETE_EXECUTION:\n+                new TaskExecutionDelete(input).delete();\n+                break;\n+            case EXECUTE:\n+                new TaskExecute(input).execute();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new TaskResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST_TASK(\"--list-task\"),\n+        LIST_RUNNING_JOBS(\"--list-running-jobs\"),\n+        LIST_SCHEDULED_JOBS(\"--list-scheduled-jobs\"),\n+        READ(\"--read\"),\n+        READ_EXECUTION(\"--read-execution\"),\n+        DELETE(\"--delete\"),\n+        DELETE_EXECUTION(\"--delete-execution\"),\n+        EXECUTE(\"--execute\");\n+\n+        private final String optionName;\n+\n+        Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final Options value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+}"},{"sha":"655e112d9d8a40e75876ab75a3162cade721569e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskDelete.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskDelete.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class TaskDelete extends AbstractTaskCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"task --delete {TASK-ID} {TASK-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public TaskDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    taskService.delete(Long.valueOf(parameter));\n+                    taskResultManager.deletedMessage(\"Task\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        taskResultManager.notFoundError(\"Task\", parameter);\n+                    } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                        taskResultManager.generic(\"You cannot delete task \" + parameter);\n+                    } else {\n+                        taskResultManager.generic(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    taskResultManager.notBooleanDeletedError(\"task\", parameter);\n+                }\n+            }\n+        } else {\n+            taskResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"9f53ece87f04078b4273de77bf8da81fb38811a5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskExecute.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecute.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import java.util.Arrays;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class TaskExecute extends AbstractTaskCommand {\n+\n+    private static final String EXECUTE_HELP_MESSAGE = \"task --execute {TASK-ID} {DRY-RUN}\\n\"\n+            + \"          Dry run: true / false\";\n+\n+    private final Input input;\n+\n+    public TaskExecute(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void execute() {\n+        if (input.parameterNumber() == 2) {\n+            try {\n+                final Long taskIdToExecute = Long.valueOf(input.firstParameter());\n+                boolean dryRun = true;\n+                if (\"false\".equalsIgnoreCase(input.secondParameter())) {\n+                    dryRun = false;\n+                } else if (\"true\".equalsIgnoreCase(input.secondParameter())) {\n+                    dryRun = true;\n+                } else {\n+                    taskResultManager.notBooleanDeletedError(\"dry run\", input.secondParameter());\n+                }\n+                taskResultManager.printTaskExecTO(Arrays.asList(taskService.execute(taskIdToExecute, dryRun)));\n+            } catch (final WebServiceException | SyncopeClientException ex) {\n+                if (ex.getMessage().startsWith(\"NotFound\")) {\n+                    taskResultManager.notFoundError(\"Task\", input.firstParameter());\n+                } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                    taskResultManager.generic(\"You cannot delete task \" + input.firstParameter());\n+                } else {\n+                    taskResultManager.generic(ex.getMessage());\n+                }\n+            } catch (final NumberFormatException ex) {\n+                taskResultManager.notBooleanDeletedError(\"task\", input.firstParameter());\n+            }\n+        } else {\n+            taskResultManager.commandOptionError(EXECUTE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"a107716512c5f12a4563035441fa1b6f6a50f202","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskExecutionDelete.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionDelete.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class TaskExecutionDelete extends AbstractTaskCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"task --delete-execution \"\n+            + \"{TASK-EXEC-ID} {TASK-EXEC-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public TaskExecutionDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    taskService.deleteExecution(Long.valueOf(parameter));\n+                    taskResultManager.deletedMessage(\"Task execution\", parameter);\n+                } catch (final WebServiceException | SyncopeClientException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        taskResultManager.notFoundError(\"Task execution\", parameter);\n+                    } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                        taskResultManager.generic(\"You cannot delete task execution\" + parameter);\n+                    } else {\n+                        taskResultManager.generic(ex.getMessage());\n+                    }\n+                } catch (final NumberFormatException ex) {\n+                    taskResultManager.notBooleanDeletedError(\"task execution\", parameter);\n+                }\n+            }\n+        } else {\n+            taskResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"d24641de8e4fa137545119340d2f8c5b98c7d35b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskExecutionRead.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionRead.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import java.util.Arrays;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class TaskExecutionRead extends AbstractTaskCommand {\n+\n+    private static final String EXECUTION_READ_HELP_MESSAGE = \"task --read-execution {TASK-ID} {TASK-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public TaskExecutionRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    taskResultManager.printTaskExecTO(\n+                            Arrays.asList(taskService.readExecution(Long.valueOf(parameter))));\n+                } catch (final NumberFormatException ex) {\n+                    taskResultManager.notBooleanDeletedError(\"task execution\", parameter);\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        taskResultManager.notFoundError(\"Task execution\", parameter);\n+                    } else {\n+                        taskResultManager.generic(\"Error: \" + ex.getMessage());\n+                    }\n+                    break;\n+                }\n+            }\n+        } else {\n+            taskResultManager.commandOptionError(EXECUTION_READ_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"203dbcb7ef0ee47b13ff805a0c30f47c1518c671","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskList.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskList.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import java.util.LinkedList;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.util.CommandUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.common.rest.api.beans.TaskQuery;\n+\n+public class TaskList extends AbstractTaskCommand {\n+\n+    private static final String LIST_HELP_MESSAGE = \"task --list-task {TASK-TYPE}\\n\"\n+            + \"   Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / SYNCHRONIZATION\";\n+\n+    private final Input input;\n+\n+    public TaskList(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void list() {\n+        if (input.parameterNumber() == 1) {\n+            try {\n+                final TaskType taskType = TaskType.valueOf(input.firstParameter());\n+                final LinkedList<AbstractTaskTO> taskTOs = new LinkedList<>();\n+                for (final AbstractTaskTO taskTO : taskService.list(taskType, new TaskQuery()).getResult()) {\n+                    taskTOs.add(taskTO);\n+                }\n+                taskResultManager.fromList(taskType, taskTOs);\n+            } catch (final SyncopeClientException ex) {\n+                taskResultManager.generic(ex.getMessage());\n+            } catch (final IllegalArgumentException ex) {\n+                taskResultManager.typeNotValidError(\n+                        \"task\", input.firstParameter(), CommandUtils.fromEnumToArray(TaskType.class));\n+            }\n+        } else {\n+            taskResultManager.commandOptionError(LIST_HELP_MESSAGE);\n+        }\n+    }\n+}"},{"sha":"253825457eeb0fd67cdd61adc31140ee530978cf","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskRead.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRead.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import java.util.LinkedList;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+\n+public class TaskRead extends AbstractTaskCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"task --read {TASK-ID} {TASK-ID} [...]\";\n+\n+    private final Input input;\n+\n+    public TaskRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.parameterNumber() >= 1) {\n+            final LinkedList<AbstractTaskTO> taskTOs = new LinkedList<>();\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    taskTOs.add(taskService.read(Long.valueOf(parameter)));\n+                } catch (final NumberFormatException ex) {\n+                    taskResultManager.notBooleanDeletedError(\"task\", parameter);\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        taskResultManager.notFoundError(\"Task\", parameter);\n+                    } else {\n+                        taskResultManager.generic(\"Error: \" + ex.getMessage());\n+                    }\n+                    break;\n+                }\n+            }\n+            taskResultManager.fromRead(taskTOs);\n+        } else {\n+            taskResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"6075be76da37c8bed725c848d602ef91e4ad24ad","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskResultManager.java","status":"added","additions":222,"deletions":0,"changes":222,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskResultManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,222 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.TaskType;\n+\n+public class TaskResultManager extends CommonsResultManager {\n+\n+    public void fromRead(final LinkedList<AbstractTaskTO> taskTOs) {\n+        for (final AbstractTaskTO taskTO : taskTOs) {\n+            if (taskTO instanceof NotificationTaskTO) {\n+                printNotificationTask((NotificationTaskTO) taskTO);\n+            } else if (taskTO instanceof PropagationTaskTO) {\n+                printPropagationTask((PropagationTaskTO) taskTO);\n+            } else if (taskTO instanceof PushTaskTO) {\n+                printPushTask((PushTaskTO) taskTO);\n+            } else if (taskTO instanceof SchedTaskTO) {\n+                printScheduledTask((SchedTaskTO) taskTO);\n+            } else if (taskTO instanceof SyncTaskTO) {\n+                printSyncTask((SyncTaskTO) taskTO);\n+            }\n+        }\n+    }\n+\n+    public void fromList(final TaskType taskType, final LinkedList<AbstractTaskTO> taskTOs) {\n+        switch (taskType) {\n+            case NOTIFICATION:\n+                for (final AbstractTaskTO taskTO : taskTOs) {\n+                    printNotificationTask(((NotificationTaskTO) taskTO));\n+                }\n+                break;\n+            case PROPAGATION:\n+                for (final AbstractTaskTO taskTO : taskTOs) {\n+                    printPropagationTask((PropagationTaskTO) taskTO);\n+                }\n+                break;\n+            case PUSH:\n+                for (final AbstractTaskTO taskTO : taskTOs) {\n+                    printPushTask((PushTaskTO) taskTO);\n+                }\n+                break;\n+            case SCHEDULED:\n+                for (final AbstractTaskTO taskTO : taskTOs) {\n+                    printScheduledTask((SchedTaskTO) taskTO);\n+                }\n+                break;\n+            case SYNCHRONIZATION:\n+                for (final AbstractTaskTO taskTO : taskTOs) {\n+                    printSyncTask((SyncTaskTO) taskTO);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void printNotificationTask(final NotificationTaskTO notificationTaskTO) {\n+        System.out.println(\"\");\n+        System.out.println(\" - Notification task key: \" + notificationTaskTO.getKey());\n+        System.out.println(\"     executed: \" + notificationTaskTO.isExecuted());\n+        System.out.println(\"     sender: \" + notificationTaskTO.getSender());\n+        System.out.println(\"     subjetc: \" + notificationTaskTO.getSubject());\n+        System.out.println(\"     text body: \" + notificationTaskTO.getTextBody());\n+        System.out.println(\"     html body: \" + notificationTaskTO.getHtmlBody());\n+        System.out.println(\"     latest execution status: \"\n+                + notificationTaskTO.getLatestExecStatus());\n+        System.out.println(\"     start date: \" + notificationTaskTO.getStartDate());\n+        System.out.println(\"     end date: \" + notificationTaskTO.getEndDate());\n+        System.out.println(\"     recipients: \" + notificationTaskTO.getRecipients());\n+        System.out.println(\"     trace level: \" + notificationTaskTO.getTraceLevel());\n+        printTaskExecTO(notificationTaskTO.getExecutions());\n+        System.out.println(\"\");\n+    }\n+\n+    private void printPropagationTask(final PropagationTaskTO propagationTaskTO) {\n+        System.out.println(\"\");\n+        System.out.println(\" - Propagation task key: \" + propagationTaskTO.getKey());\n+        System.out.println(\"     resource: \" + propagationTaskTO.getResource());\n+        System.out.println(\"     any key: \" + propagationTaskTO.getAnyKey());\n+        System.out.println(\"     any type kind: \" + propagationTaskTO.getAnyTypeKind());\n+        System.out.println(\"     connector object key: \"\n+                + propagationTaskTO.getConnObjectKey());\n+        System.out.println(\"     old connector object key: \"\n+                + propagationTaskTO.getOldConnObjectKey());\n+        System.out.println(\"     latest execution status: \"\n+                + propagationTaskTO.getLatestExecStatus());\n+        System.out.println(\"     class name: \" + propagationTaskTO.getObjectClassName());\n+        System.out.println(\"     xml attribute: \" + propagationTaskTO.getXmlAttributes());\n+        System.out.println(\"     start date: \" + propagationTaskTO.getStartDate());\n+        System.out.println(\"     end date: \" + propagationTaskTO.getEndDate());\n+        System.out.println(\"     operation: \" + propagationTaskTO.getOperation());\n+        printTaskExecTO(propagationTaskTO.getExecutions());\n+        System.out.println(\"\");\n+    }\n+\n+    private void printPushTask(final PushTaskTO pushTaskTO) {\n+        System.out.println(\"\");\n+        System.out.println(\" - Push task key: \" + pushTaskTO.getKey());\n+        System.out.println(\"     name: \" + pushTaskTO.getName());\n+        System.out.println(\"     resource: \" + pushTaskTO.getResource());\n+        System.out.println(\"     cron expression: \" + pushTaskTO.getCronExpression());\n+        System.out.println(\"     description: \" + pushTaskTO.getDescription());\n+        System.out.println(\"     is perform create: \" + pushTaskTO.isPerformCreate());\n+        System.out.println(\"     is perform delete: \" + pushTaskTO.isPerformDelete());\n+        System.out.println(\"     is perform update: \" + pushTaskTO.isPerformUpdate());\n+        System.out.println(\"     is sync status: \" + pushTaskTO.isSyncStatus());\n+        System.out.println(\"     start date: \" + pushTaskTO.getStartDate());\n+        System.out.println(\"     end date: \" + pushTaskTO.getEndDate());\n+        System.out.println(\"     last execution: \" + pushTaskTO.getLastExec());\n+        System.out.println(\"     next execution: \" + pushTaskTO.getNextExec());\n+        System.out.println(\"     latest execution status: \"\n+                + pushTaskTO.getLatestExecStatus());\n+        System.out.println(\"     filters: \" + pushTaskTO.getFilters());\n+        System.out.println(\"     delegate class: \" + pushTaskTO.getJobDelegateClassName());\n+        System.out.println(\"     action class: \" + pushTaskTO.getActionsClassNames());\n+        System.out.println(\"     matching rule: \" + pushTaskTO.getMatchingRule());\n+        System.out.println(\"     not matching rule: \" + pushTaskTO.getUnmatchingRule());\n+        printTaskExecTO(pushTaskTO.getExecutions());\n+\n+        System.out.println(\"\");\n+    }\n+\n+    private void printScheduledTask(final SchedTaskTO schedTaskTO) {\n+        System.out.println(\"\");\n+        System.out.println(\" - Scheduled task key: \" + schedTaskTO.getKey());\n+        System.out.println(\"     name: \" + schedTaskTO.getName());\n+        System.out.println(\"     cron expression: \" + schedTaskTO.getCronExpression());\n+        System.out.println(\"     description: \" + schedTaskTO.getDescription());\n+        System.out.println(\"     start date: \" + schedTaskTO.getStartDate());\n+        System.out.println(\"     end date: \" + schedTaskTO.getEndDate());\n+        System.out.println(\"     last execution: \" + schedTaskTO.getLastExec());\n+        System.out.println(\"     next execution: \" + schedTaskTO.getNextExec());\n+        System.out.println(\"     latest execution status: \"\n+                + schedTaskTO.getLatestExecStatus());\n+        System.out.println(\"     job delegate class: \"\n+                + schedTaskTO.getJobDelegateClassName());\n+        printTaskExecTO(schedTaskTO.getExecutions());\n+        System.out.println(\"\");\n+    }\n+\n+    private void printSyncTask(final SyncTaskTO syncTaskTO) {\n+        System.out.println(\"\");\n+        System.out.println(\" - Sync task key: \" + syncTaskTO.getKey());\n+        System.out.println(\"     name: \" + syncTaskTO.getName());\n+        System.out.println(\"     resource: \" + syncTaskTO.getResource());\n+        System.out.println(\"     realm destination: \" + syncTaskTO.getDestinationRealm());\n+        System.out.println(\"     cron expression: \" + syncTaskTO.getCronExpression());\n+        System.out.println(\"     description: \" + syncTaskTO.getDescription());\n+        System.out.println(\"     is full reconciliation: \"\n+                + syncTaskTO.isFullReconciliation());\n+        System.out.println(\"     is perform create: \" + syncTaskTO.isPerformCreate());\n+        System.out.println(\"     is perform delete: \" + syncTaskTO.isPerformDelete());\n+        System.out.println(\"     is perform update: \" + syncTaskTO.isPerformUpdate());\n+        System.out.println(\"     is sync status: \" + syncTaskTO.isSyncStatus());\n+        System.out.println(\"     templates:\");\n+        for (Map.Entry<String, AnyTO> entrySet : syncTaskTO.getTemplates().entrySet()) {\n+            final String key = entrySet.getKey();\n+            final AnyTO value = entrySet.getValue();\n+            System.out.println(\"        \" + key + \" key: \" + value.getKey()\n+                    + \" of realm\" + value.getRealm()\n+                    + \" on resource \" + value.getResources());\n+\n+        }\n+        System.out.println(\"     start date: \" + syncTaskTO.getStartDate());\n+        System.out.println(\"     end date: \" + syncTaskTO.getEndDate());\n+        System.out.println(\"     next execution: \" + syncTaskTO.getNextExec());\n+        System.out.println(\"     last execution: \" + syncTaskTO.getLastExec());\n+        System.out.println(\"     latest execution status: \"\n+                + syncTaskTO.getLatestExecStatus());\n+        System.out.println(\"     job delegate class: \"\n+                + syncTaskTO.getJobDelegateClassName());\n+        System.out.println(\"     action class name: \" + syncTaskTO.getActionsClassNames());\n+        System.out.println(\"     matching rule: \" + syncTaskTO.getMatchingRule());\n+        System.out.println(\"     unmatching rule: \" + syncTaskTO.getUnmatchingRule());\n+        printTaskExecTO(syncTaskTO.getExecutions());\n+        System.out.println(\"\");\n+    }\n+\n+    public void printTaskExecTO(final List<TaskExecTO> taskExecTOs) {\n+        for (final TaskExecTO taskExecTO : taskExecTOs) {\n+            System.out.println(\"     EXECUTIONS: \");\n+            System.out.println(\"     - task execution key: \" + taskExecTO.getKey());\n+            System.out.println(\"       task: \" + taskExecTO.getTask());\n+            System.out.println(\"       message: \");\n+            System.out.println(\"       ###############     <BEGIN MESSAGE>     ###############\");\n+            System.out.println(\"       message: \" + taskExecTO.getMessage());\n+            System.out.println(\"       ###############     <END   MESSAGE>     ###############\");\n+            System.out.println(\"       status: \" + taskExecTO.getStatus());\n+            System.out.println(\"       start date: \" + taskExecTO.getStartDate());\n+            System.out.println(\"       end date: \" + taskExecTO.getEndDate());\n+            System.out.println(\"\");\n+        }\n+    }\n+}"},{"sha":"fdb886f787ef8504e02fc7259be7f98e2834e897","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskRunningJobs.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRunningJobs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRunningJobs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskRunningJobs.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n+\n+public class TaskRunningJobs extends AbstractTaskCommand {\n+\n+    public void list() {\n+        try {\n+            taskResultManager.printTaskExecTO(taskService.listJobs(JobStatusType.RUNNING));\n+        } catch (final SyncopeClientException ex) {\n+            taskResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+}"},{"sha":"d95f1223137e1e952d31e8208d9ad7d6174fa4dc","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskScheduledJobs.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskScheduledJobs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskScheduledJobs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskScheduledJobs.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.task;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n+\n+public class TaskScheduledJobs extends AbstractTaskCommand {\n+\n+    public void list() {\n+        try {\n+            taskResultManager.printTaskExecTO(taskService.listJobs(JobStatusType.SCHEDULED));\n+        } catch (final SyncopeClientException ex) {\n+            taskResultManager.generic(ex.getMessage());\n+        }\n+    }\n+\n+}"},{"sha":"35550fd9425dc77e7d231cdf8a4ac0cebbb29a91","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Messages.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FMessages.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.messages;\n+\n+public final class Messages {\n+\n+    private static final String OPTION_COMMAND_MESSAGE_TEMPLATE = \"\\n - Usage: %s\\n\";\n+\n+    private static final String CREATED_MESSAGE_TEMPLATE = \"%s %s successfully created\";\n+\n+    private static final String UPDATED_MESSAGE_TEMPLATE = \"%s %s successfully updated\";\n+\n+    private static final String DELETED_MESSAGE_TEMPLATE = \"%s %s successfully deleted\";\n+\n+    private static final String DOESNT_EXIST_MESSAGE_TEMPLATE = \"%s %s doesn't exist\";\n+\n+    private static final String TYPE_NOT_VALID_MESSAGE_TEMPLATE = \"%s isn't a valid %s type, try with: %s\";\n+\n+    private static final String ID_NOT_NUMBER_MESSAGE_TEMPLATE = \"Error reading %s. It isn't a valid %s \"\n+            + \"id because it isn't a long value\";\n+\n+    private static final String NOT_BOOLEAN_MESSAGE_TEMPLATE = \"Error reading %s. It isn't a valid %s \"\n+            + \"value because it isn't a boolean value\";\n+\n+    private static final String DEFAULT_MESSAGE_TEMPLATE = \"%s is not a valid option. \\n\\b %s\";\n+\n+    public static void printCommandOptionMessage(final String message) {\n+        System.out.println(String.format(OPTION_COMMAND_MESSAGE_TEMPLATE, message));\n+    }\n+\n+    public static void printMessage(final String... messages) {\n+        final StringBuilder messageBuilder = new StringBuilder(\"\\n\");\n+        for (final String message : messages) {\n+            messageBuilder.append(\" - \").append(message).append(\"\\n\");\n+        }\n+        System.out.println(messageBuilder.toString());\n+    }\n+\n+    public static void printNofFoundMessage(final String what, final String key) {\n+        printMessage(String.format(DOESNT_EXIST_MESSAGE_TEMPLATE, what, key));\n+    }\n+\n+    public static void printCreatedMessage(final String what, final String key) {\n+        printMessage(String.format(CREATED_MESSAGE_TEMPLATE, what, key));\n+    }\n+\n+    public static void printUpdatedMessage(final String what, final String key) {\n+        printMessage(String.format(UPDATED_MESSAGE_TEMPLATE, what, key));\n+    }\n+\n+    public static void printDeletedMessage(final String what, final String key) {\n+        printMessage(String.format(DELETED_MESSAGE_TEMPLATE, what, key));\n+    }\n+\n+    public static void printIdNotNumberDeletedMessage(final String what, final String key) {\n+        printMessage(String.format(ID_NOT_NUMBER_MESSAGE_TEMPLATE, key, what));\n+    }\n+\n+    public static void printNotBooleanDeletedMessage(final String what, final String key) {\n+        printMessage(String.format(NOT_BOOLEAN_MESSAGE_TEMPLATE, key, what));\n+    }\n+\n+    public static void printTypeNotValidMessage(final String what, final String key, final String[] types) {\n+        final StringBuilder typesBuilder = new StringBuilder();\n+        for (final String type : types) {\n+            typesBuilder.append(\"\\n     *** \").append(type);\n+        }\n+        printMessage(String.format(TYPE_NOT_VALID_MESSAGE_TEMPLATE, key, what, typesBuilder.toString()));\n+    }\n+\n+    public static void printDefaultMessage(final String option, final String helpMessage) {\n+        printMessage(String.format(DEFAULT_MESSAGE_TEMPLATE, option, helpMessage));\n+    }\n+\n+    private Messages() {\n+\n+    }\n+}"},{"sha":"311682cccaa70159a3f83dc46668f4be3c40a5a0","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/Table.java","status":"added","additions":194,"deletions":0,"changes":194,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTable.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.messages;\n+\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public final class Table {\n+\n+    private static final String TABLE_TITLE_FORMAT = \"#  %s  #\\n\";\n+\n+    private final String title;\n+\n+    private final LinkedList<String> headers;\n+\n+    private final Set<LinkedList<String>> values;\n+\n+    private int columnsNumber;\n+\n+    private String[] tmpValuesArray;\n+\n+    private String tableContentFormat;\n+\n+    private int[] columnsSize;\n+\n+    private int tableWidth;\n+\n+    private String border = \"\";\n+\n+    private Table(\n+            final String title,\n+            final LinkedList<String> headers,\n+            final Set<LinkedList<String>> values) {\n+        this.title = title;\n+        this.headers = headers;\n+        this.values = values;\n+    }\n+\n+    public void print() {\n+        columnsNumber = headers.size();\n+        tmpValuesArray = new String[columnsNumber];\n+\n+        buildTableContentFormat();\n+        initializeColumnSize();\n+        countTableWidth();\n+\n+        printBorder();\n+        printTitle();\n+        printBorder();\n+        printHeaders();\n+        printBorder();\n+        printeContent();\n+        printBorder();\n+    }\n+\n+    private void buildTableContentFormat() {\n+        final StringBuilder tableContentFormatBuilder = new StringBuilder(\"#\");\n+        for (int s = 0; s < columnsNumber; s++) {\n+            tableContentFormatBuilder.append(\"  %s  #\");\n+        }\n+        tableContentFormatBuilder.append(\"\\n\");\n+        tableContentFormat = tableContentFormatBuilder.toString();\n+    }\n+\n+    private void initializeColumnSize() {\n+        columnsSize = new int[columnsNumber];\n+        for (int j = 0; j < columnsSize.length; j++) {\n+            columnsSize[j] = 0;\n+        }\n+\n+        for (int i = 0; i < columnsSize.length; i++) {\n+            if (headers.get(i).length() > columnsSize[i]) {\n+                columnsSize[i] = headers.get(i).length();\n+            }\n+        }\n+\n+        for (final LinkedList<String> value : values) {\n+            for (int j = 0; j < columnsSize.length; j++) {\n+                if (value.get(j) != null && value.get(j).length() > columnsSize[j]) {\n+                    columnsSize[j] = value.get(j).length();\n+                }\n+            }\n+        }\n+    }\n+\n+    private void countTableWidth() {\n+        int maxColumnValueSum = 0;\n+        for (int j = 0; j < columnsSize.length; j++) {\n+            maxColumnValueSum = maxColumnValueSum + columnsSize[j];\n+        }\n+\n+        tableWidth = maxColumnValueSum + (columnsNumber * (2 + 2)) + columnsNumber + 1;\n+    }\n+\n+    private void printBorder() {\n+        if (border.isEmpty()) {\n+            final StringBuilder borderBuilder = new StringBuilder();\n+            for (int j = 0; j < tableWidth; j++) {\n+                borderBuilder.append(\"#\");\n+            }\n+            border = borderBuilder.toString();\n+        }\n+\n+        System.out.println(border);\n+    }\n+\n+    private void printTitle() {\n+        System.out.format(TABLE_TITLE_FORMAT, StringUtils.center(\" \", tableWidth - 6));\n+        System.out.format(TABLE_TITLE_FORMAT, StringUtils.center(title.toUpperCase(), tableWidth - 6));\n+        System.out.format(TABLE_TITLE_FORMAT, StringUtils.center(\" \", tableWidth - 6));\n+    }\n+\n+    private void printHeaders() {\n+        printColumnSpace();\n+\n+        for (int h = 0; h < columnsNumber; h++) {\n+            tmpValuesArray[h] = StringUtils.center(headers.get(h).toUpperCase(), columnsSize[h]);\n+        }\n+\n+        System.out.format(tableContentFormat, tmpValuesArray);\n+\n+        printColumnSpace();\n+    }\n+\n+    private void printeContent() {\n+        printColumnSpace();\n+\n+        for (final LinkedList<String> value : values) {\n+            for (int j = 0; j < columnsNumber; j++) {\n+                if (value.get(j) == null) {\n+                    tmpValuesArray[j] = StringUtils.center(\"null\", columnsSize[j]);\n+                } else {\n+                    tmpValuesArray[j] = StringUtils.center(value.get(j), columnsSize[j]);\n+                }\n+            }\n+            System.out.format(tableContentFormat, tmpValuesArray);\n+        }\n+\n+        printColumnSpace();\n+    }\n+\n+    private void printColumnSpace() {\n+        for (int h = 0; h < columnsNumber; h++) {\n+            tmpValuesArray[h] = StringUtils.center(\" \", columnsSize[h]);\n+        }\n+\n+        System.out.format(tableContentFormat, tmpValuesArray);\n+    }\n+\n+    public static class TableBuilder {\n+\n+        private final LinkedList<String> headers = new LinkedList<>();\n+\n+        private final Set<LinkedList<String>> values = new LinkedHashSet<>();\n+\n+        private final String title;\n+\n+        public TableBuilder(final String title) {\n+            this.title = title;\n+        }\n+\n+        public TableBuilder header(final String header) {\n+            headers.add(header);\n+            return this;\n+        }\n+\n+        public TableBuilder rowValues(final LinkedList<String> row) {\n+            values.add(row);\n+            return this;\n+        }\n+\n+        public Table build() {\n+            return new Table(title, headers, values);\n+        }\n+    }\n+}"},{"sha":"df5bbea592b3759959909c034a7f11ce6a6d242e","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/messages/TwoColumnTable.java","status":"added","additions":262,"deletions":0,"changes":262,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fmessages%2FTwoColumnTable.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,262 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.messages;\n+\n+import java.util.Map;\n+\n+public class TwoColumnTable {\n+\n+    private static final int TABLE_BORDER = 1;\n+\n+    private static final int MIN_COLUMN_SPACE = 2;\n+\n+    private static final int MIN_COLUMN_SIZE = 5;\n+\n+    private int tableWidth;\n+\n+    private int firstColumntContentWidth;\n+\n+    private int secondColumntContentWidth;\n+\n+    private final String title;\n+\n+    private final String firstColumnHeader;\n+\n+    private int firstColumnMaxWidth;\n+\n+    private final String secondColumnHeader;\n+\n+    private int secondColumnMaxWidth;\n+\n+    public TwoColumnTable(final String title,\n+            final String firstColumnHeader,\n+            final int firstColumnMaxWidth,\n+            final String secondColumnHeader,\n+            final int secondColumnMaxWidth) {\n+\n+        this.firstColumnHeader = firstColumnHeader.toUpperCase();\n+\n+        if (firstColumnMaxWidth < MIN_COLUMN_SIZE) {\n+            this.firstColumnMaxWidth = MIN_COLUMN_SIZE;\n+        } else {\n+            this.firstColumnMaxWidth = firstColumnMaxWidth;\n+        }\n+\n+        this.secondColumnHeader = secondColumnHeader.toUpperCase();\n+\n+        if (secondColumnMaxWidth < MIN_COLUMN_SIZE) {\n+            this.secondColumnMaxWidth = MIN_COLUMN_SIZE;\n+        } else {\n+            this.secondColumnMaxWidth = secondColumnMaxWidth;\n+        }\n+\n+        tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + firstColumnMaxWidth + secondColumnMaxWidth;\n+\n+        if (title.length() > firstColumnMaxWidth + secondColumnMaxWidth) {\n+            tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + title.length();\n+        }\n+\n+        firstColumntContentWidth = (MIN_COLUMN_SPACE * 2) + firstColumnMaxWidth;\n+        secondColumntContentWidth = (MIN_COLUMN_SPACE * 2) + secondColumnMaxWidth;\n+\n+        this.title = title.toUpperCase();\n+    }\n+\n+    public void printTable(final Map<String, String> value) {\n+\n+        if (value.isEmpty()) {\n+            firstColumnMaxWidth = firstColumnHeader.length();\n+            secondColumnMaxWidth = secondColumnHeader.length();\n+            firstColumntContentWidth = (MIN_COLUMN_SPACE * 2) + firstColumnMaxWidth;\n+            secondColumntContentWidth = (MIN_COLUMN_SPACE * 2) + secondColumnMaxWidth;\n+            tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + firstColumnMaxWidth + secondColumnMaxWidth;\n+            if (title.length() > firstColumnMaxWidth + secondColumnMaxWidth) {\n+                tableWidth = (TABLE_BORDER * 3) + (MIN_COLUMN_SPACE * 4) + title.length();\n+            }\n+        }\n+\n+        final StringBuilder table = new StringBuilder();\n+\n+// ################ BORDER-TOP ################\n+        for (int i = 0; i < tableWidth; i++) {\n+            table.append(\"#\");\n+        }\n+        table.append(\"\\n\");\n+// ################ BORDER-TOP ################\n+\n+// ################ TABLE-TITLE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < titleFirstSpace(title); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(title);\n+        for (int i = 0; i < titleSecondSpace(title); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ TABLE-TITLE ################\n+\n+// ################ BORDER-TOP ################\n+        for (int i = 0; i < tableWidth; i++) {\n+            table.append(\"#\");\n+        }\n+        table.append(\"\\n\");\n+// ################ BORDER-TOP ################\n+\n+// ################ LIST-SPACE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ LIST-SPACE ################\n+\n+// ################ HEADER-TITLE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumnFirstSpace(firstColumnHeader); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(firstColumnHeader);\n+        for (int i = 0; i < firstColumnSecondSpace(firstColumnHeader); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumnFirstSpace(secondColumnHeader); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(secondColumnHeader);\n+        for (int i = 0; i < secondColumnSecondSpace(secondColumnHeader); i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ HEADER-TITLE ################\n+\n+// ################ LIST-SPACE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ LIST-SPACE ################\n+\n+// ################ BORDER-TOP ################\n+        for (int i = 0; i < tableWidth; i++) {\n+            table.append(\"#\");\n+        }\n+        table.append(\"\\n\");\n+// ################ BORDER-TOP ################\n+\n+// ################ LIST-SPACE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ LIST-SPACE ################\n+\n+// ################ CONTENT ################\n+        for (final Map.Entry<String, String> entrySet : value.entrySet()) {\n+            final String firstColumnValue = entrySet.getKey();\n+            final String secondColumnValue = entrySet.getValue();\n+            table.append(\"#\");\n+            for (int i = 0; i < firstColumnFirstSpace(firstColumnValue); i++) {\n+                table.append(\" \");\n+            }\n+            table.append(firstColumnValue);\n+            for (int i = 0; i < firstColumnSecondSpace(firstColumnValue); i++) {\n+                table.append(\" \");\n+            }\n+            table.append(\"#\");\n+            for (int i = 0; i < secondColumnFirstSpace(secondColumnValue); i++) {\n+                table.append(\" \");\n+            }\n+            table.append(secondColumnValue);\n+            for (int i = 0; i < secondColumnSecondSpace(secondColumnValue); i++) {\n+                table.append(\" \");\n+            }\n+            table.append(\"#\");\n+            table.append(\"\\n\");\n+        }\n+// ################ CONTENT ################\n+\n+// ################ LIST-SPACE ################\n+        table.append(\"#\");\n+        for (int i = 0; i < firstColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        for (int i = 0; i < secondColumntContentWidth; i++) {\n+            table.append(\" \");\n+        }\n+        table.append(\"#\");\n+        table.append(\"\\n\");\n+// ################ LIST-SPACE ################\n+\n+// ################ BORDER-BOTTOM ################\n+        for (int i = 0; i < tableWidth; i++) {\n+            table.append(\"#\");\n+        }\n+// ################ BORDER-BOTTOM ################\n+\n+        System.out.println(table.toString() + \"\\n\");\n+    }\n+\n+    private int titleFirstSpace(final String wordToPrint) {\n+        return ((tableWidth - 2) - (wordToPrint.length())) / 2;\n+    }\n+\n+    private int titleSecondSpace(final String wordToPrint) {\n+        return tableWidth - 2 - (titleFirstSpace(wordToPrint) + wordToPrint.length());\n+    }\n+\n+    private int firstColumnFirstSpace(final String wordToPrint) {\n+        return (MIN_COLUMN_SPACE * 2 + (firstColumnMaxWidth - wordToPrint.length())) / 2;\n+    }\n+\n+    private int firstColumnSecondSpace(final String wordToPrint) {\n+        return firstColumntContentWidth - (firstColumnFirstSpace(wordToPrint) + wordToPrint.length());\n+    }\n+\n+    private int secondColumnFirstSpace(final String wordToPrint) {\n+        return (MIN_COLUMN_SPACE * 2 + (secondColumnMaxWidth - wordToPrint.length())) / 2;\n+    }\n+\n+    private int secondColumnSecondSpace(final String wordToPrint) {\n+        return secondColumntContentWidth - (secondColumnFirstSpace(wordToPrint) + wordToPrint.length());\n+    }\n+\n+}"},{"sha":"b759877af05d1e8cf4aa6197903b953cddc17710","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/CommandUtils.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FCommandUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.CommandClassScanner;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+public final class CommandUtils {\n+\n+    public static AbstractCommand fromArgs(final String arg)\n+            throws InstantiationException, IllegalAccessException, IllegalArgumentException {\n+\n+        final CommandClassScanner ccs = new CommandClassScanner();\n+        final List<Class<? extends AbstractCommand>> commands = ccs.getComponentClasses();\n+\n+        Class<? extends AbstractCommand> commandClass = null;\n+        for (final Class<? extends AbstractCommand> cmd : commands) {\n+            if (arg.equals(cmd.getAnnotation(Command.class).name())) {\n+                commandClass = cmd;\n+            }\n+        }\n+\n+        if (commandClass == null) {\n+            throw new IllegalArgumentException(arg + \" is not a valid command\");\n+        }\n+\n+        return commandClass.newInstance();\n+\n+    }\n+\n+    public static List<AbstractCommand> commands()\n+            throws InstantiationException, IllegalAccessException, IllegalArgumentException {\n+\n+        final List<AbstractCommand> listCommands = new ArrayList<>();\n+\n+        final CommandClassScanner ccs = new CommandClassScanner();\n+        final List<Class<? extends AbstractCommand>> commands = ccs.getComponentClasses();\n+\n+        Class<? extends AbstractCommand> commandClass;\n+        for (final Class<? extends AbstractCommand> cmd : commands) {\n+            commandClass = cmd;\n+            if (commandClass == null) {\n+                throw new IllegalArgumentException();\n+            }\n+            listCommands.add(commandClass.newInstance());\n+        }\n+\n+        return listCommands;\n+    }\n+\n+    public static String[] fromEnumToArray(final Class<? extends Enum<?>> enumClass) {\n+        final String[] types = new String[enumClass.getFields().length];\n+        for (int i = 0; i < enumClass.getFields().length; i++) {\n+            types[i] = enumClass.getFields()[i].getName();\n+\n+        }\n+        return types;\n+    }\n+    \n+    public static String helpMessage(final String command, final List<String> options) {\n+        final StringBuilder helpMessageBuilder = new StringBuilder(String.format(\"Usage: %s [options]\\n\", command));\n+        helpMessageBuilder.append(\"  Options:\\n\");\n+        for (final String option : options) {\n+            helpMessageBuilder.append(\"    \").append(option).append(\"\\n\");\n+        }\n+        return helpMessageBuilder.toString();\n+    }\n+\n+    private CommandUtils() {\n+\n+    }\n+\n+}"},{"sha":"355e69c84d51e9af65354f92a738a0586381f75c","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/FileSystemUtils.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FFileSystemUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FFileSystemUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FFileSystemUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.util;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.PrintWriter;\n+import java.io.UnsupportedEncodingException;\n+\n+public final class FileSystemUtils {\n+\n+    public static void createNewDirectory(final String directoryToCreate) {\n+        final File directory = new File(directoryToCreate);\n+        directory.mkdirs();\n+    }\n+\n+    public static void createFileWith(final String filePath, final String content)\n+            throws FileNotFoundException, UnsupportedEncodingException {\n+        try (PrintWriter writer = new PrintWriter(filePath, \"UTF-8\")) {\n+            writer.println(content);\n+        }\n+    }\n+\n+    public static boolean canWrite(final String path) {\n+        final File installationDirectory = new File(path);\n+        return installationDirectory.canWrite();\n+    }\n+    \n+    private FileSystemUtils() {\n+        \n+    }\n+}"},{"sha":"4e4551c779a2d2fb094e40bfbf5cc0d5792ea5a3","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/util/JasyptUtils.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.util;\n+\n+import org.jasypt.util.text.StrongTextEncryptor;\n+\n+public final class JasyptUtils {\n+\n+    private final StrongTextEncryptor textEncryptor;\n+\n+    private static JasyptUtils JASYPT_UTILS = null;\n+\n+    public static JasyptUtils getJasyptUtils() {\n+        if (JASYPT_UTILS == null) {\n+            JASYPT_UTILS = new JasyptUtils();\n+        }\n+        return JASYPT_UTILS;\n+    }\n+\n+    private JasyptUtils() {\n+        textEncryptor = new StrongTextEncryptor();\n+        textEncryptor.setPassword(\"Ka9s8yadaisj9mud87ssdaifansy\");\n+    }\n+\n+    public String encrypt(final String password) {\n+        return textEncryptor.encrypt(password);\n+    }\n+\n+    public String decrypt(final String encryptedString) {\n+        return textEncryptor.decrypt(encryptedString);\n+    }\n+\n+}"},{"sha":"1ce85f8dc38901fc3d56f984d305c7e6b30b1a43","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/validators/DebugLevelValidator.java","status":"removed","additions":0,"deletions":60,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fvalidators%2FDebugLevelValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fvalidators%2FDebugLevelValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fvalidators%2FDebugLevelValidator.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.validators;\n-\n-import com.beust.jcommander.IParameterValidator;\n-\n-public class DebugLevelValidator implements IParameterValidator {\n-\n-    @Override\n-    public void validate(final String name, final String value) {\n-        if (!Levels.contains(value)) {\n-            final StringBuilder exceptionMessage = new StringBuilder();\n-            exceptionMessage.append(\"Parameter \")\n-                    .append(name)\n-                    .append(\" should be :\\n\");\n-            for (final Levels l : Levels.values()) {\n-                exceptionMessage.append(l).append(\"\\n\");\n-            }\n-            System.out.println(\">>>> \" + exceptionMessage.toString());\n-        }\n-    }\n-\n-    private enum Levels {\n-\n-        OFF,\n-        FATAL,\n-        ERROR,\n-        WARN,\n-        INFO,\n-        DEBUG,\n-        TRACE,\n-        ALL;\n-\n-        public static boolean contains(final String name) {\n-            for (final Levels c : Levels.values()) {\n-                if (c.name().equals(name)) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-    }\n-\n-}"},{"sha":"245a781b7b96d8e4280716517b24dbe9da0af71d","filename":"client/cli/src/main/resources/configuration.properties","status":"renamed","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fconfiguration.properties?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -14,6 +14,5 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-syncope.rest.services=http://localhost:9080/syncope/rest/\n-syncope.user=admin\n-syncope.password=password\n+cli.installation.directory=/var/tmp/syncope/conf/\n+cli.installation.filename=cli.properties","previous_filename":"client/cli/src/main/resources/syncope.properties"},{"sha":"fce9c8b79c49113ecca495b978416bbc716bd36c","filename":"client/cli/src/main/resources/log4j2.xml","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -41,15 +41,35 @@ under the License.\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     \n-    <asyncLogger name=\"org.apache.syncope.cli\" additivity=\"false\" level=\"DEBUG\">\n+    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"OFF\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    \n+    <asyncLogger name=\"org.apache.cxf.interceptor\" additivity=\"false\" level=\"OFF\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    \n+    <asyncLogger name=\"org.apache.http\" additivity=\"false\" level=\"OFF\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    \n+    <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"OFF\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    \n+    <asyncLogger name=\"org.apache.syncope.cli\" additivity=\"false\" level=\"OFF\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.apache.syncope.client\" additivity=\"false\" level=\"OFF\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    \n+    <asyncLogger name=\"org.apache.syncope.common\" additivity=\"false\" level=\"OFF\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n \n-    <root level=\"DEBUG\">\n+    <root level=\"OFF\">\n       <appender-ref ref=\"main\"/>\n     </root>\n   "},{"sha":"fa40d420eb2eb8099253ef5c93df63ccd11bd942","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -185,8 +185,8 @@ public <T> T getService(final MediaType mediaType, final Class<T> serviceClass)\n         T service;\n \n         synchronized (SyncopeConsoleApplication.get().getClientFactory()) {\n-            SyncopeClientFactoryBean.ContentType preType =\n-                    SyncopeConsoleApplication.get().getClientFactory().getContentType();\n+            SyncopeClientFactoryBean.ContentType preType = SyncopeConsoleApplication.get().getClientFactory().\n+                    getContentType();\n \n             SyncopeConsoleApplication.get().getClientFactory().\n                     setContentType(SyncopeClientFactoryBean.ContentType.fromString(mediaType.toString()));"},{"sha":"68ea37486e07bcabd550f0a38e35c6d2c11dadab","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAnyProviderComparator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAnyProviderComparator.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -60,7 +60,7 @@ private class AttrModel extends AbstractReadOnlyModel<Comparable> {\n \n         private final Map<String, AttrTO> virAttrs;\n \n-        public AttrModel(final AnyTO anyTO) {\n+        AttrModel(final AnyTO anyTO) {\n             super();\n \n             this.attrs = anyTO.getPlainAttrMap();"},{"sha":"56b6992f82793617a9ef8336d86cefcbdafaff31","filename":"client/console/src/main/java/org/apache/syncope/client/console/commons/status/Status.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatus.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -31,7 +31,7 @@ public boolean isActive() {\n         return this == ACTIVE;\n     }\n \n-    private Status(final String name) {\n+    Status(final String name) {\n         this.name = name;\n     }\n "},{"sha":"30975b2be40ad18f695a930fc4036dbf72e73efe","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -131,7 +131,7 @@ public String getDisplayValue(final Locale locale) {\n             }\n         }\n \n-        public LocaleDropDown(final String id) {\n+        LocaleDropDown(final String id) {\n             super(id, SyncopeConsoleApplication.SUPPORTED_LOCALES);\n \n             setChoiceRenderer(new LocaleRenderer());\n@@ -172,7 +172,7 @@ private class DomainDropDown extends BootstrapSelect<String> {\n \n         private static final long serialVersionUID = -7401167913360133325L;\n \n-        public DomainDropDown(final String id) {\n+        DomainDropDown(final String id) {\n             super(id, SyncopeConsoleSession.get().getDomains());\n \n             setModel(new IModel<String>() {"},{"sha":"b5850adbf403e9585d22c57b3a9750b770a7e1b7","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/ProvisioningModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -190,7 +190,7 @@ private class StatusBeanProvider extends AbstractStatusBeanProvider {\n \n         private static final long serialVersionUID = 4287357360778016173L;\n \n-        public StatusBeanProvider() {\n+        StatusBeanProvider() {\n             super(\"connObjectLink\");\n         }\n "},{"sha":"4f5e27afc318d793093812a750635b80d6627d14","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/StatusModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -489,7 +489,7 @@ private class AttributableStatusProvider extends AbstractStatusBeanProvider {\n \n         private static final long serialVersionUID = 4586969457669796621L;\n \n-        public AttributableStatusProvider() {\n+        AttributableStatusProvider() {\n             super(statusOnly ? \"resourceName\" : \"connObjectLink\");\n         }\n "},{"sha":"21568ebc4fc9779a3855b3828806a4a1cc90c2db","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractResourceModal.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractResourceModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractResourceModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractResourceModal.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -52,7 +52,7 @@ public AbstractResourceModal(final BaseModal<?> modal, final PageReference pageR\n \n         private static final long serialVersionUID = 1L;\n \n-        public AjaxBootstrapTabbedPanel(final String id, final List<T> tabs) {\n+        AjaxBootstrapTabbedPanel(final String id, final List<T> tabs) {\n             super(id, tabs);\n         }\n "},{"sha":"4d90788c6decba799731bb5420df4e205ffeb9fb","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceSecurityPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -152,7 +152,7 @@ private class PolicyRenderer extends ChoiceRenderer<Long> {\n \n         private final PolicyType type;\n \n-        public PolicyRenderer(final PolicyType type) {\n+        PolicyRenderer(final PolicyType type) {\n             super();\n             this.type = type;\n         }"},{"sha":"c24cf5308e9e00bf16c2a40c7602098c1c23b7d2","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConfigurationRestClient.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,14 +18,12 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.Iterator;\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.AttrLayoutType;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n@@ -38,19 +36,18 @@ public class ConfigurationRestClient extends BaseRestClient {\n     @Autowired\n     private SchemaRestClient schemaRestClient;\n \n-    public ConfTO list() {\n-        ConfTO conf = getService(ConfigurationService.class).list();\n+    public List<AttrTO> list() {\n+        final List<AttrTO> attrTOs = getService(ConfigurationService.class).list();\n \n-        for (Iterator<AttrTO> it = conf.getPlainAttrs().iterator(); it.hasNext();) {\n-            AttrTO attr = it.next();\n+        for (AttrTO attrTO : attrTOs) {\n             for (AttrLayoutType type : AttrLayoutType.values()) {\n-                if (type.getConfKey().equals(attr.getSchema())) {\n-                    it.remove();\n+                if (type.getConfKey().equals(attrTO.getSchema())) {\n+                    attrTOs.remove(attrTO);\n                 }\n             }\n         }\n \n-        return conf;\n+        return attrTOs;\n     }\n \n     public AttrTO get(final String key) {"},{"sha":"a41e099a1a17e12fc51e2084f09faee9afb374b2","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -574,7 +574,7 @@ private static class WebMarkupContainerNoVeil extends WebMarkupContainer impleme\n \n         private static final long serialVersionUID = 1L;\n \n-        public WebMarkupContainerNoVeil(final String id) {\n+        WebMarkupContainerNoVeil(final String id) {\n             super(id);\n         }\n "},{"sha":"8e3267deddaa600d38ce45916fefa20b66b282a8","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/WebSocketBehavior.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -132,7 +132,7 @@ class ConnCheck implements Runnable {\n \n         private final Session session;\n \n-        public ConnCheck(final Long key) {\n+        ConnCheck(final Long key) {\n             this.key = key;\n             this.application = Application.get();\n             this.session = Session.exists() ? Session.get() : null;\n@@ -173,7 +173,7 @@ class ResCheck implements Runnable {\n \n         private final Session session;\n \n-        public ResCheck(final String key) {\n+        ResCheck(final String key) {\n             this.key = key;\n             this.application = Application.get();\n             this.session = Session.exists() ? Session.get() : null;"},{"sha":"1c6731f590eb13f419c1042500c74c8a3496aa7e","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -73,7 +73,7 @@ public enum ActionType {\n \n         private final String actionId;\n \n-        private ActionType(final String actionId) {\n+        ActionType(final String actionId) {\n             this.actionId = actionId;\n         }\n "},{"sha":"11720354dee5ba294db98256a36a9f7cb0f5caa0","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/provision/ProvisionWizardBuilder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fprovision%2FProvisionWizardBuilder.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -98,7 +98,7 @@ private final class ObjectType extends WizardStep {\n         /**\n          * Construct.\n          */\n-        public ObjectType(final ProvisionTO item) {\n+        ObjectType(final ProvisionTO item) {\n             super(new ResourceModel(\"type.title\", StringUtils.EMPTY),\n                     new ResourceModel(\"type.summary\", StringUtils.EMPTY), new Model<ProvisionTO>(item));\n \n@@ -122,7 +122,7 @@ private final class Mapping extends WizardStep {\n         /**\n          * Construct.\n          */\n-        public Mapping(final ProvisionTO item) {\n+        Mapping(final ProvisionTO item) {\n             setTitleModel(new ResourceModel(\"mapping.title\", \"Mapping\"));\n             setSummaryModel(new StringResourceModel(\"mapping.summary\", this, new Model<ProvisionTO>(item)));\n \n@@ -140,7 +140,7 @@ private final class ConnObjectLink extends WizardStep {\n         /**\n          * Construct.\n          */\n-        public ConnObjectLink(final ProvisionTO item) {\n+        ConnObjectLink(final ProvisionTO item) {\n             super(new ResourceModel(\"link.title\", StringUtils.EMPTY),\n                     new ResourceModel(\"link.summary\", StringUtils.EMPTY));\n "},{"sha":"c126deb8ab2a08ec059824292fe20156f609b910","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientFactoryBean.java","status":"modified","additions":27,"deletions":7,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,11 +20,16 @@\n \n import javax.ws.rs.core.MediaType;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.ClientConfiguration;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n+import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n \n /**\n- * Provides shortcuts for creating JAX-RS service instances via CXF's <tt>JAXRSClientFactoryBean</tt>.\n+ * Provides shortcuts for creating JAX-RS service instances via CXF's {@link JAXRSClientFactoryBean}.\n  */\n public class RestClientFactoryBean extends JAXRSClientFactoryBean {\n \n@@ -39,7 +44,7 @@ public class RestClientFactoryBean extends JAXRSClientFactoryBean {\n      * @return anonymous service instance of the given reference class\n      */\n     public <T> T createServiceInstance(final Class<T> serviceClass, final MediaType mediaType) {\n-        return createServiceInstance(serviceClass, mediaType, null, null);\n+        return createServiceInstance(serviceClass, mediaType, null, null, false);\n     }\n \n     /**\n@@ -50,22 +55,37 @@ public <T> T createServiceInstance(final Class<T> serviceClass, final MediaType\n      * @param mediaType XML or JSON are supported\n      * @param username username for REST authentication\n      * @param password password for REST authentication\n+     * @param useCompression whether transparent gzip <tt>Content-Encoding</tt> handling is to be enabled\n      * @return anonymous service instance of the given reference class\n      */\n     public <T> T createServiceInstance(\n-            final Class<T> serviceClass, final MediaType mediaType, final String username, final String password) {\n+            final Class<T> serviceClass,\n+            final MediaType mediaType,\n+            final String username,\n+            final String password,\n+            final boolean useCompression) {\n \n         if (StringUtils.isNotBlank(username)) {\n             setUsername(username);\n         }\n         if (StringUtils.isNotBlank(password)) {\n             setPassword(password);\n         }\n+\n         setServiceClass(serviceClass);\n-        final T serviceInstance = create(serviceClass);\n-        WebClient.client(serviceInstance).type(mediaType).accept(mediaType);\n-        WebClient.getConfig(WebClient.client(serviceInstance)).\n-                getRequestContext().put(HEADER_SPLIT_PROPERTY, true);\n+        T serviceInstance = create(serviceClass);\n+\n+        Client client = WebClient.client(serviceInstance);\n+        client.type(mediaType).accept(mediaType);\n+\n+        ClientConfiguration config = WebClient.getConfig(client);\n+        config.getRequestContext().put(HEADER_SPLIT_PROPERTY, true);\n+        config.getRequestContext().put(URLConnectionHTTPConduit.HTTPURL_CONNECTION_METHOD_REFLECTION, true);\n+        if (useCompression) {\n+            config.getInInterceptors().add(new GZIPInInterceptor());\n+            config.getOutInterceptors().add(new GZIPOutInterceptor());\n+        }\n+\n         return serviceInstance;\n     }\n }"},{"sha":"ca9f1c36b90f0f00f632a2293487c18cc408f803","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -30,7 +30,6 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n import org.apache.syncope.client.lib.builders.AnyQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnyListQueryBuilder;\n import org.apache.syncope.client.lib.builders.AnySearchQueryBuilder;\n@@ -61,17 +60,21 @@ public class SyncopeClient {\n \n     private final String password;\n \n+    private final boolean useCompression;\n+\n     public SyncopeClient(\n             final MediaType mediaType,\n             final RestClientFactoryBean restClientFactory,\n             final RestClientExceptionMapper exceptionMapper,\n-            final String username, final String password) {\n+            final String username, final String password,\n+            final boolean useCompression) {\n \n         this.mediaType = mediaType;\n         this.restClientFactory = restClientFactory;\n         this.exceptionMapper = exceptionMapper;\n         this.username = username;\n         this.password = password;\n+        this.useCompression = useCompression;\n     }\n \n     /**\n@@ -169,10 +172,7 @@ public static ConnObjectTOListQueryBuilder getConnObjectTOListQueryBuilder() {\n      */\n     public <T> T getService(final Class<T> serviceClass) {\n         synchronized (restClientFactory) {\n-            T service = restClientFactory.createServiceInstance(serviceClass, mediaType, username, password);\n-            WebClient.getConfig(WebClient.client(service)).getRequestContext().\n-                    put(URLConnectionHTTPConduit.HTTPURL_CONNECTION_METHOD_REFLECTION, true);\n-            return service;\n+            return restClientFactory.createServiceInstance(serviceClass, mediaType, username, password, useCompression);\n         }\n     }\n "},{"sha":"724da5af90bea4e2531897fe9e374b1f700eeb1f","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":34,"deletions":3,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -47,7 +47,7 @@ public enum ContentType {\n \n         private final MediaType mediaType;\n \n-        private ContentType(final MediaType mediaType) {\n+        ContentType(final MediaType mediaType) {\n             this.mediaType = mediaType;\n         }\n \n@@ -74,6 +74,8 @@ public static ContentType fromString(final String value) {\n \n     private String domain;\n \n+    private boolean useCompression;\n+\n     private RestClientFactoryBean restClientFactoryBean;\n \n     protected JacksonJaxbJsonProvider defaultJsonProvider() {\n@@ -197,6 +199,21 @@ public SyncopeClientFactoryBean setDomain(final String domain) {\n         return this;\n     }\n \n+    /**\n+     * Sets the given service instance for transparent gzip <tt>Content-Encoding</tt> handling.\n+     *\n+     * @param useCompression whether transparent gzip <tt>Content-Encoding</tt> handling is to be enabled\n+     * @return the current instance\n+     */\n+    public SyncopeClientFactoryBean setUseCompression(final boolean useCompression) {\n+        this.useCompression = useCompression;\n+        return this;\n+    }\n+\n+    public boolean isUseCompression() {\n+        return useCompression;\n+    }\n+\n     public RestClientFactoryBean getRestClientFactoryBean() {\n         return restClientFactoryBean == null\n                 ? defaultRestClientFactoryBean()\n@@ -208,16 +225,30 @@ public SyncopeClientFactoryBean setRestClientFactoryBean(final RestClientFactory\n         return this;\n     }\n \n-    public SyncopeClient createAnonymous() {\n+    /**\n+     * Builds client instance with no authentication, for user self-registration and related queries (schema,\n+     * resources, ...).\n+     *\n+     * @return client instance with no authentication\n+     */\n+    public SyncopeClient create() {\n         return create(null, null);\n     }\n \n+    /**\n+     * Builds client instance with the given credentials.\n+     *\n+     * @param username username\n+     * @param password password\n+     * @return client instance with the given credentials\n+     */\n     public SyncopeClient create(final String username, final String password) {\n         return new SyncopeClient(\n                 getContentType().getMediaType(),\n                 getRestClientFactoryBean(),\n                 getExceptionMapper(),\n                 username,\n-                password);\n+                password,\n+                useCompression);\n     }\n }"},{"sha":"a49170a213bf9e8d8b86a431b7d0ca3d33bc2edc","filename":"client/old_console/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fold_console%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/client%2Fold_console%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fold_console%2Fpom.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -65,6 +65,7 @@ under the License.\n     <dependency>\n       <groupId>org.apache.wicket</groupId>\n       <artifactId>wicket-spring</artifactId>\n+      <version>7.0.0</version>\n       <!-- exclude spring framework that wicket pulls in -->\n       <exclusions>\n         <exclusion>"},{"sha":"0e5bec3541f428b78752ff69623d037b0d93358a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":2,"deletions":24,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -150,29 +150,8 @@ public void execute(final String schema) {\n         }\n \n         // 5. virtual attributes\n-        updatedAttrs = updated.getVirAttrMap();\n-        originalAttrs = original.getVirAttrMap();\n-\n         result.getVirAttrs().clear();\n-\n-        if (!incremental) {\n-            CollectionUtils.forAllDo(CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet()),\n-                    new Closure<String>() {\n-\n-                        @Override\n-                        public void execute(final String schema) {\n-                            result.getVirAttrs().add(new AttrPatch.Builder().\n-                                    operation(PatchOperation.DELETE).\n-                                    attrTO(new AttrTO.Builder().schema(schema).build()).\n-                                    build());\n-                        }\n-                    });\n-        }\n-\n-        for (AttrTO attrTO : updatedAttrs.values()) {\n-            AttrPatch patch = new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).attrTO(attrTO).build();\n-            result.getVirAttrs().add(patch);\n-        }\n+        result.getVirAttrs().addAll(updated.getVirAttrs());\n \n         // 6. resources\n         result.getResources().clear();\n@@ -188,7 +167,6 @@ public void execute(final String schema) {\n             result.getResources().add(\n                     new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build());\n         }\n-\n     }\n \n     /**\n@@ -450,7 +428,7 @@ private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, fina\n \n         // 4. virtual attributes\n         result.getVirAttrs().clear();\n-        result.getVirAttrs().addAll(AnyOperations.patch(to.getVirAttrMap(), patch.getVirAttrs()));\n+        result.getVirAttrs().addAll(patch.getVirAttrs());\n \n         // 5. resources\n         for (StringPatchItem resourcePatch : patch.getResources()) {"},{"sha":"a6c4323b2cd47436536d30f4a9e6e22b5364a7be","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyPatch.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -27,6 +27,7 @@\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.to.AttrTO;\n \n @XmlType\n public abstract class AnyPatch extends AbstractBaseBean {\n@@ -43,7 +44,7 @@ public abstract class AnyPatch extends AbstractBaseBean {\n \n     private final Set<AttrPatch> derAttrs = new HashSet<>();\n \n-    private final Set<AttrPatch> virAttrs = new HashSet<>();\n+    private final Set<AttrTO> virAttrs = new HashSet<>();\n \n     private final Set<StringPatchItem> resources = new HashSet<>();\n \n@@ -88,7 +89,7 @@ public Set<AttrPatch> getDerAttrs() {\n     @XmlElementWrapper(name = \"virAttrs\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"virAttrs\")\n-    public Set<AttrPatch> getVirAttrs() {\n+    public Set<AttrTO> getVirAttrs() {\n         return virAttrs;\n     }\n "},{"sha":"7911d7db99da0ce432b4c1cf99b1f7c8c1c1a40c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AnyTO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAnyTO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -25,7 +25,6 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -53,9 +52,9 @@ public abstract class AnyTO extends ConnObjectTO {\n \n     private final List<String> auxClasses = new ArrayList<>();\n \n-    private final Set<AttrTO> derAttrs = new LinkedHashSet<>();\n+    private final Set<AttrTO> derAttrs = new HashSet<>();\n \n-    private final Set<AttrTO> virAttrs = new LinkedHashSet<>();\n+    private final Set<AttrTO> virAttrs = new HashSet<>();\n \n     private final Set<String> resources = new HashSet<>();\n "},{"sha":"73c05236ad11e8acf40e8456aca38ece6e27b457","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -40,6 +40,8 @@ public class MappingTO extends AbstractBaseBean {\n \n     private final List<MappingItemTO> items = new ArrayList<>();\n \n+    private final List<MappingItemTO> linkingItems = new ArrayList<>();\n+\n     public String getConnObjectLink() {\n         return connObjectLink;\n     }\n@@ -96,4 +98,11 @@ public boolean add(final MappingItemTO item) {\n     public boolean remove(final MappingItemTO item) {\n         return this.items.remove(item);\n     }\n+\n+    @XmlElementWrapper(name = \"linkingItems\")\n+    @XmlElement(name = \"item\")\n+    @JsonProperty(\"linkingItems\")\n+    public List<MappingItemTO> getLinkingItems() {\n+        return linkingItems;\n+    }\n }"},{"sha":"da23a59fc0b85abf3217abdd353f935ee670639d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/ProvisionTO.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FProvisionTO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,8 +18,17 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n \n+@XmlRootElement(name = \"provision\")\n+@XmlType\n public class ProvisionTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 8298910216218007927L;\n@@ -34,6 +43,8 @@ public class ProvisionTO extends AbstractBaseBean {\n \n     private MappingTO mapping;\n \n+    private final List<String> virSchemas = new ArrayList<>();\n+\n     public long getKey() {\n         return key;\n     }\n@@ -74,4 +85,11 @@ public void setMapping(final MappingTO mapping) {\n         this.mapping = mapping;\n     }\n \n+    @XmlElementWrapper(name = \"virSchemas\")\n+    @XmlElement(name = \"virSchema\")\n+    @JsonProperty(\"virSchemas\")\n+    public List<String> getVirSchemas() {\n+        return virSchemas;\n+    }\n+\n }"},{"sha":"8c3df1bdf6914deee29900e929ab9f00a4059b2d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/VirSchemaTO.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FVirSchemaTO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -27,6 +27,10 @@ public class VirSchemaTO extends AbstractSchemaTO {\n \n     private boolean readonly;\n \n+    private long provision;\n+\n+    private String extAttrName;\n+\n     public boolean isReadonly() {\n         return readonly;\n     }\n@@ -35,4 +39,20 @@ public void setReadonly(final boolean readonly) {\n         this.readonly = readonly;\n     }\n \n+    public long getProvision() {\n+        return provision;\n+    }\n+\n+    public void setProvision(final long provision) {\n+        this.provision = provision;\n+    }\n+\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n }"},{"sha":"136d79867aba45fd5cd91817ba22af1449f93f78","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AnyTypeKind.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAnyTypeKind.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -33,7 +33,7 @@ public enum AnyTypeKind {\n \n     private final Class<? extends AnyTO> toClass;\n \n-    private AnyTypeKind(final Class<? extends AnyTO> toClass) {\n+    AnyTypeKind(final Class<? extends AnyTO> toClass) {\n         this.toClass = toClass;\n     }\n "},{"sha":"e4a0f10b07b881e62c60d231c4a6f9eb895e7993","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -73,7 +73,7 @@ public enum ClientExceptionType {\n \n     private final Response.Status responseStatus;\n \n-    private ClientExceptionType(final Response.Status responseStatus) {\n+    ClientExceptionType(final Response.Status responseStatus) {\n         this.responseStatus = responseStatus;\n     }\n "},{"sha":"20b83473cd422e449d34395b931dbccd26f92a68","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -222,6 +222,8 @@ public final class Entitlement {\n \n     public static final String REPORT_EXECUTE = \"REPORT_EXECUTE\";\n \n+    public static final String LOG_READ = \"LOG_READ\";\n+\n     public static final String LOG_LIST = \"LOG_LIST\";\n \n     public static final String LOG_SET_LEVEL = \"LOG_SET_LEVEL\";\n@@ -230,6 +232,8 @@ public final class Entitlement {\n \n     public static final String AUDIT_LIST = \"AUDIT_LIST\";\n \n+    public static final String AUDIT_READ = \"AUDIT_READ\";\n+\n     public static final String AUDIT_ENABLE = \"AUDIT_ENABLE\";\n \n     public static final String AUDIT_DISABLE = \"AUDIT_DISABLE\";"},{"sha":"eccb89d5e019f7625845f8bc844477776a844341","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/IntMappingType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIntMappingType.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -60,7 +60,7 @@ public enum IntMappingType {\n \n     private final AnyTypeKind anyTypeKind;\n \n-    private IntMappingType(final AnyTypeKind anyTypeKind) {\n+    IntMappingType(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n "},{"sha":"3e35feca5e420f3a129f1ab8a9b378bfad535f85","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PropagationByResource.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -263,6 +263,17 @@ public final Set<String> get(final ResourceOperation type) {\n         return result;\n     }\n \n+    public Map<String, ResourceOperation> asMap() {\n+        Map<String, ResourceOperation> result = new HashMap<>();\n+        for (ResourceOperation operation : ResourceOperation.values()) {\n+            for (String resourceName : get(operation)) {\n+                result.put(resourceName, operation);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     /**\n      * Set resources for a given resource operation type.\n      *"},{"sha":"ce1b5cd57ec1b9965e8509e5f61fce7fa29a0610","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/TaskType.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FTaskType.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -29,9 +29,9 @@ public enum TaskType {\n     SYNCHRONIZATION(\"sync\"),\n     PUSH(\"push\");\n \n-    private String name;\n+    private final String name;\n \n-    private TaskType(final String name) {\n+    TaskType(final String name) {\n         this.name = name;\n     }\n "},{"sha":"280de26f3b853e8404981f14ba12379589548888","filename":"common/rest-api/pom.xml","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fpom.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -56,7 +56,22 @@ under the License.\n   </dependencies>\n   \n   <build>\n-    <plugins>\n+    <plugins>      \n+      <!-- Generating javadoc JAR artifact for usage with CXF's WADL generator (for core) -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>attach-javadocs</id>\n+            <goals>\n+              <goal>jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n       <plugin>\n         <groupId>org.apache.cxf</groupId>\n         <artifactId>cxf-java2wadl-plugin</artifactId>"},{"sha":"8d21e549a4481c24f22cfa6fd12b7f1de2db7571","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/Preference.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FPreference.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -32,7 +32,7 @@ public enum Preference {\n \n     private final String literal;\n \n-    private Preference(final String literal) {\n+    Preference(final String literal) {\n         this.literal = literal;\n     }\n "},{"sha":"49899c29d8dc705f39d231fe1b0a13f029670df0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -110,8 +110,8 @@ AttrTO read(\n      * Creates a new any object.\n      *\n      * @param anyTO any object to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created any object as well as the any\n-     * object itself enriched with propagation status information - <tt>AnyTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring Location header of created any object as well as the any\n+     * object itself enriched with propagation status information - AnyTO as Entity\n      */\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -122,8 +122,8 @@ AttrTO read(\n      * Updates any object matching the provided key.\n      *\n      * @param anyPatch modification to be applied to any object matching the provided key\n-     * @return <tt>Response</tt> object featuring the updated any object enriched with propagation status information\n-     * - <tt>AnyTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the updated any object enriched with propagation status information\n+     * - AnyTO as Entity\n      */\n     @PATCH\n     @Path(\"{key}\")\n@@ -137,7 +137,7 @@ AttrTO read(\n      * @param key any object key\n      * @param schemaType schema type\n      * @param attrTO attribute\n-     * @return <tt>Response</tt> object featuring the updated any object attribute - <tt>AttrTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the updated any object attribute - as Entity\n      */\n     @PUT\n     @Path(\"{key}/{schemaType}/{schema}\")\n@@ -152,8 +152,8 @@ Response update(\n      * Updates any object matching the provided key.\n      *\n      * @param anyTO complete update\n-     * @return <tt>Response</tt> object featuring the updated any object enriched with propagation status information\n-     * - <tt>AnyTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the updated any object enriched with propagation status information\n+     * - AnyTO as Entity\n      */\n     @PUT\n     @Path(\"{key}\")\n@@ -181,8 +181,8 @@ void delete(\n      * Deletes any object matching provided key.\n      *\n      * @param key key of any object to be deleted\n-     * @return <tt>Response</tt> object featuring the deleted any object enriched with propagation status information\n-     * - <tt>AnyTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the deleted any object enriched with propagation status information\n+     * - AnyTO as Entity\n      */\n     @DELETE\n     @Path(\"{key}\")\n@@ -194,7 +194,7 @@ void delete(\n      * Executes resource-related operations on given any object.\n      *\n      * @param patch external resources to be used for propagation-related operations\n-     * @return <tt>Response</tt> object featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\n+     * @return Response object featuring BulkActionResult as Entity\n      */\n     @POST\n     @Path(\"{key}/deassociate/{action}\")\n@@ -206,7 +206,7 @@ void delete(\n      * Executes resource-related operations on given any object.\n      *\n      * @param patch external resources to be used for propagation-related operations\n-     * @return <tt>Response</tt> object featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\n+     * @return Response object featuring BulkActionResult as Entity\n      */\n     @POST\n     @Path(\"{key}/associate/{action}\")"},{"sha":"fff0eb5519149b411a4617ab1712bde68bf19068","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeClassService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeClassService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -62,7 +62,7 @@ public interface AnyTypeClassService extends JAXRSService {\n      * Creates a new anyTypeClass.\n      *\n      * @param anyTypeClassTO anyTypeClass to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created anyTypeClass\n+     * @return Response object featuring Location header of created anyTypeClass\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })"},{"sha":"818bea4fae2ec9653d03ecf5ab1194a5f949fe73","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyTypeService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyTypeService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -62,7 +62,7 @@ public interface AnyTypeService extends JAXRSService {\n      * Creates a new anyType.\n      *\n      * @param anyTypeTO anyType to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created anyType\n+     * @return Response object featuring Location header of created anyType\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })"},{"sha":"59339c4ad6ba1af8fbc63e8da0218d9445349412","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConfigurationService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConfigurationService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n@@ -29,7 +30,6 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n \n /**\n  * REST operations for configuration.\n@@ -53,7 +53,7 @@ public interface ConfigurationService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ConfTO list();\n+    List<AttrTO> list();\n \n     /**\n      * Returns configuration parameter with matching schema."},{"sha":"686d37301fe77f333661f17a4f93cbd72e966b3f","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ConnectorService.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FConnectorService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -142,7 +142,7 @@ ConnInstanceTO readByResource(\n      * Creates a new connector instance.\n      *\n      * @param connInstanceTO connector instance to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created connector instance\n+     * @return Response object featuring Location header of created connector instance\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -168,6 +168,8 @@ ConnInstanceTO readByResource(\n     void delete(@NotNull @PathParam(\"key\") Long key);\n \n     /**\n+     * Checks whether the connection to resource could be established.\n+     *\n      * @param connInstanceTO connector instance to be used for connection check\n      */\n     @POST"},{"sha":"9471f7a9703a53cea7291744f9a153facb8b5cb6","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -62,7 +62,7 @@ public interface DomainService extends JAXRSService {\n      * Creates a new domain.\n      *\n      * @param domainTO domain to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created domain\n+     * @return Response object featuring Location header of created domain\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })"},{"sha":"d1e556d1ee5106ae100f3a926a6d0f5d365dc48d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GroupService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FGroupService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -33,7 +33,7 @@\n public interface GroupService extends AnyService<GroupTO, GroupPatch> {\n \n     /**\n-     * This method is similar to <tt>read()</tt>, but uses different authentication handling to ensure that a user\n+     * This method is similar to read() but uses different authentication handling to ensure that a user\n      * can read his own groups.\n      *\n      * @return own groups"},{"sha":"763efc3c812eabfb798c278f2e33b1660fe49711","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -36,7 +36,7 @@\n /**\n  * REST operations for logging and auditing.\n  */\n-@Path(\"logger\")\n+@Path(\"loggers\")\n public interface LoggerService extends JAXRSService {\n \n     /**"},{"sha":"1bdfbf81c3468f3647a4d30c79509f064d2b070a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/NotificationService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FNotificationService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -62,7 +62,7 @@ public interface NotificationService extends JAXRSService {\n      * Creates a new notification.\n      *\n      * @param notificationTO Creates a new notification.\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created notification\n+     * @return Response object featuring Location header of created notification\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })"},{"sha":"c39f98a193b84f151752ffbcf93ea24fd7881e4a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/PolicyService.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FPolicyService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -67,32 +67,29 @@ public interface PolicyService extends JAXRSService {\n      * Create a new policy.\n      *\n      * @param policyTO Policy to be created (needs to match type)\n-     * @param <T> response type (extending PolicyTO)\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created policy\n+     * @return Response object featuring Location header of created policy\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractPolicyTO> Response create(@NotNull T policyTO);\n+    Response create(@NotNull AbstractPolicyTO policyTO);\n \n     /**\n      * Updates policy matching the given key.\n      *\n      * @param policyTO Policy to replace existing policy\n-     * @param <T> response type (extending PolicyTO)\n      */\n     @PUT\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractPolicyTO> void update(@NotNull T policyTO);\n+    void update(@NotNull AbstractPolicyTO policyTO);\n \n     /**\n      * Delete policy matching the given key.\n      *\n      * @param key key of policy to be deleted\n-     * @param <T> response type (extending PolicyTO)\n      */\n     @DELETE\n     @Path(\"{key}\")\n-    <T extends AbstractPolicyTO> void delete(@NotNull @PathParam(\"key\") Long key);\n+    void delete(@NotNull @PathParam(\"key\") Long key);\n \n }"},{"sha":"fdd0b6bfa72feaf92b5e828fe4a2ac3c13a5c76c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -63,7 +63,7 @@ public interface RealmService extends JAXRSService {\n      *\n      * @param parentPath full path of the parent realm\n      * @param realmTO new realm.\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created realm\n+     * @return Response object featuring Location header of created realm\n      */\n     @POST\n     @Path(\"{parentPath:.*}\")"},{"sha":"abfc6b6844b954cfc474167e8ffb70702ac494e1","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RelationshipTypeService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRelationshipTypeService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -62,7 +62,7 @@ public interface RelationshipTypeService extends JAXRSService {\n      * Creates a new relationshipType.\n      *\n      * @param relationshipTypeTO relationshipType to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created relationshipType\n+     * @return Response object featuring Location header of created relationshipType\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })"},{"sha":"1f8399fed8813074678246390161279faa247309","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -79,7 +79,7 @@ public interface ReportService extends JAXRSService {\n      * Creates a new report.\n      *\n      * @param reportTO report to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created report\n+     * @return Response object featuring Location header of created report\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })"},{"sha":"7a3550b7e4d4c5a5ed2ec91b4b16042b9facbc6b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ResourceService.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FResourceService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -103,7 +103,7 @@ PagedConnObjectTOResult listConnObjects(\n      * Creates a new resource.\n      *\n      * @param resourceTO Resource to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created resource\n+     * @return Response object featuring Location header of created resource\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -147,7 +147,7 @@ PagedConnObjectTOResult listConnObjects(\n      * @param anyTypeKey any object kind\n      * @param type resource de-association action type\n      * @param keys any object keys against which the bulk action will be performed\n-     * @return <tt>Response</tt> object featuring <tt>BulkActionResult</tt> as <tt>Entity</tt>\n+     * @return Response object featuring BulkActionResult as Entity\n      */\n     @POST\n     @Path(\"{key}/bulkDeassociation/{anyTypeKey}/{action}\")"},{"sha":"45628c731030fef290f59ae63a6c18242fb6c093","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RoleService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRoleService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -62,7 +62,7 @@ public interface RoleService extends JAXRSService {\n      * Creates a new role.\n      *\n      * @param roleTO role to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created role\n+     * @return Response object featuring Location header of created role\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })"},{"sha":"7c1a43ac1b4f88bdc8f837bba01274c70983384a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SchemaService.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSchemaService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -45,7 +45,7 @@ public interface SchemaService extends JAXRSService {\n      * @param <T> actual SchemaTO\n      * @param type type for schemas to be read\n      * @param key name of schema to be read\n-     * @return schema matching the given kind, type and name\n+     * @return schema matching the given type and name\n      */\n     @GET\n     @Path(\"{key}\")\n@@ -54,11 +54,11 @@ <T extends AbstractSchemaTO> T read(\n             @NotNull @PathParam(\"type\") SchemaType type, @NotNull @PathParam(\"key\") String key);\n \n     /**\n-     * Returns a list of schemas with matching kind and type.\n+     * Returns a list of schemas with matching type.\n      *\n      * @param <T> actual SchemaTO\n      * @param type type for schemas to be listed\n-     * @return list of schemas with matching kind and type\n+     * @return list of schemas with matching type\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -67,26 +67,24 @@ <T extends AbstractSchemaTO> T read(\n     /**\n      * Creates a new schema.\n      *\n-     * @param <T> actual SchemaTO\n      * @param type type for schema to be created\n      * @param schemaTO schema to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created schema\n+     * @return Response object featuring Location header of created schema\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> Response create(@NotNull @PathParam(\"type\") SchemaType type, @NotNull T schemaTO);\n+    Response create(@NotNull @PathParam(\"type\") SchemaType type, @NotNull AbstractSchemaTO schemaTO);\n \n     /**\n      * Updates the schema matching the given type and key.\n      *\n-     * @param <T> actual SchemaTO\n      * @param type type for schemas to be updated\n      * @param schemaTO updated schema to be stored\n      */\n     @PUT\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends AbstractSchemaTO> void update(@NotNull @PathParam(\"type\") SchemaType type, @NotNull T schemaTO);\n+    void update(@NotNull @PathParam(\"type\") SchemaType type, @NotNull AbstractSchemaTO schemaTO);\n \n     /**\n      * Deletes the schema matching the given type and key."},{"sha":"810467924b290a0a7ca4832c3a8d15e3df4b7c42","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SecurityQuestionService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSecurityQuestionService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -62,7 +62,7 @@ public interface SecurityQuestionService extends JAXRSService {\n      * Creates a new security question.\n      *\n      * @param securityQuestionTO security question to be created\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created security question\n+     * @return Response object featuring Location header of created security question\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })"},{"sha":"772c09e311296df555063e4fce909f0a581cd256","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -24,6 +24,9 @@\n import javax.ws.rs.core.MediaType;\n import org.apache.syncope.common.lib.to.SyncopeTO;\n \n+/**\n+ * General info about this Apache Syncope deployment.\n+ */\n @Path(\"\")\n public interface SyncopeService extends JAXRSService {\n "},{"sha":"2029a533fe84b992c04cd7cb23ccae0eb481b1d0","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -92,12 +92,11 @@ <T extends AbstractTaskTO> PagedResult<T> list(\n      * Creates a new task.\n      *\n      * @param taskTO task to be created\n-     * @param <T> type of taskTO\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created task\n+     * @return Response object featuring Location header of created task\n      */\n     @POST\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    <T extends SchedTaskTO> Response create(@NotNull T taskTO);\n+    Response create(@NotNull SchedTaskTO taskTO);\n \n     /**\n      * Updates the task matching the provided key."},{"sha":"745129f9eaa3f9b25c599905e44e1b8a1d555a3a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -55,8 +55,8 @@ public interface UserSelfService extends JAXRSService {\n      *\n      * @param userTO user to be created\n      * @param storePassword whether password shall be stored internally\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of self-registered user as well as the user\n-     * itself - <tt>UserTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring Location header of self-registered user as well as the user\n+     * itself - UserTO as Entity\n      */\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -68,7 +68,7 @@ Response create(@NotNull UserTO userTO,\n      * Self-updates user.\n      *\n      * @param patch modification to be applied to self\n-     * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the updated user - UserTO as Entity\n      */\n     @PATCH\n     @Path(\"{key}\")\n@@ -80,7 +80,7 @@ Response create(@NotNull UserTO userTO,\n      * Self-updates user.\n      *\n      * @param user complete update\n-     * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the updated user - UserTO as Entity\n      */\n     @PUT\n     @Path(\"{key}\")\n@@ -91,7 +91,7 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-deletes user.\n      *\n-     * @return <tt>Response</tt> object featuring the deleted user - <tt>UserTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the deleted user - UserTO as Entity\n      */\n     @DELETE\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -102,7 +102,7 @@ Response create(@NotNull UserTO userTO,\n      *\n      * @param password the password value to update\n      *\n-     * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the updated user - UserTO as Entity\n      */\n     @POST\n     @Path(\"changePassword\")\n@@ -111,7 +111,7 @@ Response create(@NotNull UserTO userTO,\n \n     /**\n      * Provides answer for the security question configured for user matching the given username, if any.\n-     * If provided anwser matches the one stored for that user, a password reset token is internally generated,\n+     * If provided answer matches the one stored for that user, a password reset token is internally generated,\n      * otherwise an error is returned.\n      *\n      * @param username username for which the security answer is provided"},{"sha":"0368ef18e1780fa6ec9fcdb1cd8a60a1c5707704","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -43,7 +43,7 @@ public interface UserService extends AnyService<UserTO, UserPatch> {\n      * Gives the username for the provided user key.\n      *\n      * @param key user key\n-     * @return <tt>Response</tt> object featuring HTTP header with username matching the given key\n+     * @return Response object featuring HTTP header with username matching the given key\n      */\n     @OPTIONS\n     @Path(\"{key}/username\")\n@@ -53,7 +53,7 @@ public interface UserService extends AnyService<UserTO, UserPatch> {\n      * Gives the user key for the provided username.\n      *\n      * @param username username\n-     * @return <tt>Response</tt> object featuring HTTP header with key matching the given username\n+     * @return Response object featuring HTTP header with key matching the given username\n      */\n     @OPTIONS\n     @Path(\"{username}/key\")\n@@ -64,8 +64,8 @@ public interface UserService extends AnyService<UserTO, UserPatch> {\n      *\n      * @param userTO user to be created\n      * @param storePassword whether password shall be stored internally\n-     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created user as well as the user itself\n-     * enriched with propagation status information - <tt>UserTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring Location header of created user as well as the user itself\n+     * enriched with propagation status information - UserTO as Entity\n      */\n     @POST\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n@@ -78,8 +78,8 @@ Response create(\n      * Performs a status update on given.\n      *\n      * @param statusPatch status update details\n-     * @return <tt>Response</tt> object featuring the updated user enriched with propagation status information\n-     * - <tt>UserTO</tt> as <tt>Entity</tt>\n+     * @return Response object featuring the updated user enriched with propagation status information\n+     * - UserTO as Entity\n      */\n     @POST\n     @Path(\"{key}/status\")"},{"sha":"1a1370c6005b97acd73509f3b8203f7e9560b13b","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/WorkflowService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FWorkflowService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n- * REST operations for workflow definition management.\n+ * REST operations for workflow definition.\n  */\n @Path(\"workflows/{anyTypeKind}\")\n public interface WorkflowService extends JAXRSService {"},{"sha":"9a796ef0ec6151aebcc796a9357be32814ec8e8e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -185,7 +185,7 @@ private static class StartsWithPredicate implements Predicate<String> {\n \n         private final Collection<String> targets;\n \n-        public StartsWithPredicate(final Collection<String> targets) {\n+        StartsWithPredicate(final Collection<String> targets) {\n             this.targets = targets;\n         }\n "},{"sha":"de0130e14afdf5440870440bc1ec16864fc747c1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -26,7 +26,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Resource;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -47,8 +46,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -74,15 +71,6 @@ public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch\n     @Autowired\n     protected AnyObjectDataBinder binder;\n \n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Resource(name = \"anonymousUser\")\n-    protected String anonymousUser;\n-\n     @Autowired\n     protected AnyObjectProvisioningManager provisioningManager;\n "},{"sha":"3f0115d7534bc068f89a6f6f881c0dba9df07589","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConfigurationLogic.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConfigurationLogic.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,8 +20,8 @@\n \n import java.io.OutputStream;\n import java.lang.reflect.Method;\n+import java.util.List;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n@@ -39,7 +39,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class ConfigurationLogic extends AbstractTransactionalLogic<ConfTO> {\n+public class ConfigurationLogic extends AbstractTransactionalLogic<AttrTO> {\n \n     @Autowired\n     private ConfDAO confDAO;\n@@ -61,11 +61,19 @@ public class ConfigurationLogic extends AbstractTransactionalLogic<ConfTO> {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_DELETE + \"')\")\n     public void delete(final String schema) {\n+        CPlainAttr conf = confDAO.find(schema);\n+        if (conf == null) {\n+            PlainSchema plainSchema = plainSchemaDAO.find(schema);\n+            if (plainSchema == null) {\n+                throw new NotFoundException(\"Configuration schema \" + schema);\n+            }\n+        }\n+\n         confDAO.delete(schema);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.CONFIGURATION_LIST + \"')\")\n-    public ConfTO list() {\n+    public List<AttrTO> list() {\n         return binder.getConfTO(confDAO.get());\n     }\n \n@@ -106,7 +114,7 @@ public void export(final OutputStream os) {\n     }\n \n     @Override\n-    protected ConfTO resolveReference(final Method method, final Object... args)\n+    protected AttrTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n         throw new UnresolvedReferenceException();"},{"sha":"2a2e0a3d45111610107f3e23b00cf878164b2bad","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -26,7 +26,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Resource;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n@@ -51,8 +50,6 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n@@ -81,15 +78,6 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupPatch> {\n     @Autowired\n     protected GroupDataBinder binder;\n \n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n-    @Resource(name = \"anonymousUser\")\n-    protected String anonymousUser;\n-\n     @Autowired\n     protected GroupProvisioningManager provisioningManager;\n "},{"sha":"30e73743f7fa0769a8d070f93ae6f713ae64dc82","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -134,6 +134,32 @@ private void throwInvalidLogger(final LoggerType type) {\n         throw sce;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + Entitlement.LOG_READ + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    @Transactional(readOnly = true)\n+    public LoggerTO readLog(final String name) {\n+        for (final LoggerTO logger : listLogs()) {\n+            if (logger.getKey().equals(name)) {\n+                return logger;\n+            }\n+        }\n+        throw new NotFoundException(\"Logger \" + name);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.AUDIT_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public LoggerTO readAudit(final String name) {\n+        for (final AuditLoggerName logger : listAudits()) {\n+            if (logger.toLoggerName().equals(name)) {\n+                final LoggerTO loggerTO = new LoggerTO();\n+                loggerTO.setKey(logger.toLoggerName());\n+                loggerTO.setLevel(LoggerLevel.DEBUG);\n+                return loggerTO;\n+            }\n+        }\n+        throw new NotFoundException(\"Logger \" + name);\n+    }\n+\n     private LoggerTO setLevel(final String name, final Level level, final LoggerType expectedType) {\n         Logger syncopeLogger = loggerDAO.find(name);\n         if (syncopeLogger == null) {"},{"sha":"0b4ac92c5ebde29b214cb5b9b913c42d327a588e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/PolicyLogic.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FPolicyLogic.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -65,7 +65,7 @@ private <T extends AbstractPolicyTO, K extends Policy> T update(final T policyTO\n     public PasswordPolicyTO update(final PasswordPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof PasswordPolicy)) {\n-            throw new NotFoundException(\"PasswordPolicy with id \" + policyTO.getKey());\n+            throw new NotFoundException(\"PasswordPolicy with key \" + policyTO.getKey());\n         }\n \n         return update(policyTO, policy);\n@@ -75,7 +75,7 @@ public PasswordPolicyTO update(final PasswordPolicyTO policyTO) {\n     public AccountPolicyTO update(final AccountPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof AccountPolicy)) {\n-            throw new NotFoundException(\"AccountPolicy with id \" + policyTO.getKey());\n+            throw new NotFoundException(\"AccountPolicy with key \" + policyTO.getKey());\n         }\n \n         return update(policyTO, policy);\n@@ -85,7 +85,7 @@ public AccountPolicyTO update(final AccountPolicyTO policyTO) {\n     public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n         Policy policy = policyDAO.find(policyTO.getKey());\n         if (!(policy instanceof SyncPolicy)) {\n-            throw new NotFoundException(\"SyncPolicy with id \" + policyTO.getKey());\n+            throw new NotFoundException(\"SyncPolicy with key \" + policyTO.getKey());\n         }\n \n         return update(policyTO, policy);\n@@ -103,20 +103,20 @@ public T transform(final Policy input) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_READ + \"')\")\n-    public <T extends AbstractPolicyTO> T read(final Long id) {\n-        Policy policy = policyDAO.find(id);\n+    public <T extends AbstractPolicyTO> T read(final Long key) {\n+        Policy policy = policyDAO.find(key);\n         if (policy == null) {\n-            throw new NotFoundException(\"Policy \" + id + \" not found\");\n+            throw new NotFoundException(\"Policy \" + key + \" not found\");\n         }\n \n         return binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.POLICY_DELETE + \"')\")\n-    public <T extends AbstractPolicyTO> T delete(final Long id) {\n-        Policy policy = policyDAO.find(id);\n+    public <T extends AbstractPolicyTO> T delete(final Long key) {\n+        Policy policy = policyDAO.find(key);\n         if (policy == null) {\n-            throw new NotFoundException(\"Policy \" + id + \" not found\");\n+            throw new NotFoundException(\"Policy \" + key + \" not found\");\n         }\n \n         T policyToDelete = binder.getPolicyTO(policy);\n@@ -129,21 +129,21 @@ public <T extends AbstractPolicyTO> T delete(final Long id) {\n     protected AbstractPolicyTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n-        Long id = null;\n+        Long key = null;\n \n         if (ArrayUtils.isNotEmpty(args)) {\n-            for (int i = 0; id == null && i < args.length; i++) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof Long) {\n-                    id = (Long) args[i];\n+                    key = (Long) args[i];\n                 } else if (args[i] instanceof AbstractPolicyTO) {\n-                    id = ((AbstractPolicyTO) args[i]).getKey();\n+                    key = ((AbstractPolicyTO) args[i]).getKey();\n                 }\n             }\n         }\n \n-        if ((id != null) && !id.equals(0L)) {\n+        if ((key != null) && !key.equals(0L)) {\n             try {\n-                return binder.getPolicyTO(policyDAO.find(id));\n+                return binder.getPolicyTO(policyDAO.find(key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"44a5aa862e069866bb94eda9d73ac0fc621299b7","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":33,"deletions":3,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,9 +20,12 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -51,9 +54,11 @@\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -85,6 +90,9 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     private ResourceDataBinder binder;\n \n@@ -205,32 +213,46 @@ private Triple<ExternalResource, AnyType, Provision> connObjectInit(\n     public ConnObjectTO readConnObject(final String key, final String anyTypeKey, final Long anyKey) {\n         Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n \n-        Any<?, ?, ?> any = init.getMiddle().getKind() == AnyTypeKind.USER\n+        // 1. find any\n+        Any<?, ?> any = init.getMiddle().getKind() == AnyTypeKind.USER\n                 ? userDAO.find(anyKey)\n                 : init.getMiddle().getKind() == AnyTypeKind.ANY_OBJECT\n                         ? anyObjectDAO.find(anyKey)\n                         : groupDAO.find(anyKey);\n         if (any == null) {\n             throw new NotFoundException(init.getMiddle() + \" \" + anyKey);\n         }\n+\n+        // 2. build connObjectKeyItem\n         MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(init.getRight());\n         if (connObjectKeyItem == null) {\n             throw new NotFoundException(\n                     \"ConnObjectKey mapping for \" + init.getMiddle() + \" \" + anyKey + \" on resource '\" + key + \"'\");\n         }\n         String connObjectKeyValue = mappingUtils.getConnObjectKeyValue(any, init.getRight());\n \n+        // 3. determine attributes to query\n+        Set<MappingItem> linkinMappingItems = new HashSet<>();\n+        for (VirSchema virSchema : virSchemaDAO.findByProvision(init.getRight())) {\n+            linkinMappingItems.add(virSchema.asLinkingMappingItem());\n+        }\n+        Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+                init.getRight().getMapping().getItems().iterator(),\n+                linkinMappingItems.iterator());\n+\n+        // 4. read from the underlying connector\n         Connector connector = connFactory.getConnector(init.getLeft());\n         ConnectorObject connectorObject = connector.getObject(\n                 init.getRight().getObjectClass(),\n                 new Uid(connObjectKeyValue),\n-                connector.getOperationOptions(MappingUtils.getBothMappingItems(init.getRight())));\n+                connector.getOperationOptions(mapItems));\n         if (connectorObject == null) {\n             throw new NotFoundException(\n                     \"Object \" + connObjectKeyValue + \" with class \" + init.getRight().getObjectClass()\n                     + \" not found on resource \" + key);\n         }\n \n+        // 5. build result\n         Set<Attribute> attributes = connectorObject.getAttributes();\n         if (AttributeUtil.find(Uid.NAME, attributes) == null) {\n             attributes.add(connectorObject.getUid());\n@@ -251,6 +273,14 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n \n         Connector connector = connFactory.getConnector(init.getLeft());\n \n+        Set<MappingItem> linkinMappingItems = new HashSet<>();\n+        for (VirSchema virSchema : virSchemaDAO.findByProvision(init.getRight())) {\n+            linkinMappingItems.add(virSchema.asLinkingMappingItem());\n+        }\n+        Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+                init.getRight().getMapping().getItems().iterator(),\n+                linkinMappingItems.iterator());\n+\n         final SearchResult[] searchResult = new SearchResult[1];\n         final List<ConnObjectTO> connObjects = new ArrayList<>();\n         connector.search(init.getRight().getObjectClass(), null, new SearchResultsHandler() {\n@@ -265,7 +295,7 @@ public boolean handle(final ConnectorObject connectorObject) {\n                 connObjects.add(connObjectUtils.getConnObjectTO(connectorObject));\n                 return true;\n             }\n-        }, size, pagedResultsCookie, orderBy);\n+        }, size, pagedResultsCookie, orderBy, mapItems);\n \n         return ImmutablePair.of(searchResult[0], connObjects);\n     }"},{"sha":"deab762003d7e6966a620741d19d5df723ae659a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":15,"deletions":26,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -53,13 +53,10 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n-import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n-import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -84,15 +81,6 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n     @Autowired\n     protected UserDataBinder binder;\n \n-    @Autowired\n-    protected VirAttrHandler virtAttrHandler;\n-\n-    @Autowired\n-    protected PropagationManager propagationManager;\n-\n-    @Autowired\n-    protected PropagationTaskExecutor taskExecutor;\n-\n     @Autowired\n     protected UserProvisioningManager provisioningManager;\n \n@@ -133,7 +121,7 @@ public List<UserTO> list(\n \n                     @Override\n                     public UserTO transform(final User input) {\n-                        return binder.getUserTO(input, details);\n+                        return binder.returnUserTO(binder.getUserTO(input, details));\n                     }\n                 }, new ArrayList<UserTO>());\n     }\n@@ -143,14 +131,14 @@ public UserTO transform(final User input) {\n     public Pair<String, UserTO> readSelf() {\n         return ImmutablePair.of(\n                 POJOHelper.serialize(AuthContextUtils.getAuthorizations()),\n-                binder.getAuthenticatedUserTO());\n+                binder.returnUserTO(binder.getAuthenticatedUserTO()));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO read(final Long key) {\n-        return binder.getUserTO(key);\n+        return binder.returnUserTO(binder.getUserTO(key));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_SEARCH + \"')\")\n@@ -175,7 +163,7 @@ public List<UserTO> search(final SearchCond searchCondition, final int page, fin\n \n             @Override\n             public UserTO transform(final User input) {\n-                return binder.getUserTO(input, details);\n+                return binder.returnUserTO(binder.getUserTO(input, details));\n             }\n         }, new ArrayList<UserTO>());\n     }\n@@ -215,7 +203,7 @@ protected UserTO doCreate(final UserTO userTO, final boolean storePassword, fina\n         UserTO savedTO = binder.getUserTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n \n-        return afterCreate(savedTO, before.getValue());\n+        return binder.returnUserTO(afterCreate(savedTO, before.getValue()));\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n@@ -252,7 +240,7 @@ protected UserTO doUpdate(final UserPatch userPatch, final boolean self) {\n         UserTO updatedTO = binder.getUserTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n \n-        return afterUpdate(updatedTO, before.getRight());\n+        return binder.returnUserTO(afterUpdate(updatedTO, before.getRight()));\n     }\n \n     protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final StatusPatch statusPatch) {\n@@ -289,11 +277,11 @@ public UserTO status(final StatusPatch statusPatch) {\n         Map.Entry<Long, List<PropagationStatus>> updated = setStatusOnWfAdapter(statusPatch);\n         UserTO savedTO = binder.getUserTO(updated.getKey());\n         savedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return savedTO;\n+        return binder.returnUserTO(savedTO);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.MUST_CHANGE_PASSWORD + \"')\")\n-    public UserTO changePassword(final String password) { \n+    public UserTO changePassword(final String password) {\n         UserPatch userPatch = new UserPatch();\n         userPatch.setPassword(new PasswordPatch.Builder().value(password).build());\n         userPatch.setMustChangePassword(new BooleanReplacePatchItem.Builder().value(false).build());\n@@ -378,7 +366,7 @@ public String transform(final Group group) {\n         }\n         deletedTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return afterDelete(deletedTO, before.getRight());\n+        return binder.returnUserTO(afterDelete(deletedTO, before.getRight()));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -401,7 +389,7 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return binder.getUserTO(provisioningManager.unlink(patch));\n+        return binder.returnUserTO(binder.getUserTO(provisioningManager.unlink(patch)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -424,7 +412,7 @@ public StringPatchItem transform(final String resource) {\n             }\n         }));\n \n-        return binder.getUserTO(provisioningManager.link(patch));\n+        return binder.returnUserTO(binder.getUserTO(provisioningManager.link(patch)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -497,7 +485,7 @@ public UserTO deprovision(final Long key, final Collection<String> resources) {\n \n         UserTO updatedTO = binder.getUserTO(key);\n         updatedTO.getPropagationStatusTOs().addAll(statuses);\n-        return updatedTO;\n+        return binder.returnUserTO(updatedTO);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n@@ -516,7 +504,7 @@ public UserTO provision(\n         securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n \n         user.getPropagationStatusTOs().addAll(provisioningManager.provision(key, changePwd, password, resources));\n-        return user;\n+        return binder.returnUserTO(user);\n     }\n \n     @Override\n@@ -539,7 +527,8 @@ protected UserTO resolveReference(final Method method, final Object... args) thr\n \n         if ((key != null) && !key.equals(0L)) {\n             try {\n-                return key instanceof Long ? binder.getUserTO((Long) key) : binder.getUserTO((String) key);\n+                return binder.returnUserTO(key instanceof Long\n+                        ? binder.getUserTO((Long) key) : binder.getUserTO((String) key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"13acaab8f6226d7faa571f23362eedd0dbda0b1a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -100,7 +100,7 @@ private static class DataSourceConnectionSource implements ConnectionSource {\n \n         private final DataSource dataSource;\n \n-        public DataSourceConnectionSource(final DataSource dataSource) {\n+        DataSourceConnectionSource(final DataSource dataSource) {\n             this.dataSource = dataSource;\n         }\n "},{"sha":"0e785b1e35c786411277ade97aa8209318f93e3d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/StaticReportlet.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FStaticReportlet.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.springframework.util.StringUtils;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n@@ -101,7 +101,7 @@ protected void doExtract(final ReportletConf conf, final ContentHandler handler)\n \n         if (this.conf.getDateField() != null) {\n             handler.startElement(\"\", \"\", \"date\", null);\n-            String printed = DataFormat.format(this.conf.getDateField());\n+            String printed = FormatUtils.format(this.conf.getDateField());\n             handler.characters(printed.toCharArray(), 0, printed.length());\n             handler.endElement(\"\", \"\", \"date\");\n         }"},{"sha":"3eb96b33d1e477189792a37531ddf932e5a8a21d","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/report/UserReportlet.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Freport%2FUserReportlet.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n@@ -231,21 +231,21 @@ private void doExtract(final ContentHandler handler, final List<User> users) thr\n                         type = ReportXMLConst.XSD_DATETIME;\n                         value = user.getCreationDate() == null\n                                 ? \"\"\n-                                : DataFormat.format(user.getCreationDate());\n+                                : FormatUtils.format(user.getCreationDate());\n                         break;\n \n                     case lastLoginDate:\n                         type = ReportXMLConst.XSD_DATETIME;\n                         value = user.getLastLoginDate() == null\n                                 ? \"\"\n-                                : DataFormat.format(user.getLastLoginDate());\n+                                : FormatUtils.format(user.getLastLoginDate());\n                         break;\n \n                     case changePwdDate:\n                         type = ReportXMLConst.XSD_DATETIME;\n                         value = user.getChangePwdDate() == null\n                                 ? \"\"\n-                                : DataFormat.format(user.getChangePwdDate());\n+                                : FormatUtils.format(user.getChangePwdDate());\n                         break;\n \n                     case passwordHistorySize:"},{"sha":"0b069061f2cc1684497bf7380015a3468dcb8f4f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/FormatUtils.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FFormatUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FFormatUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FFormatUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -28,7 +28,7 @@\n /**\n  * Utility class for parsing / formatting date and numbers.\n  */\n-public final class DataFormat {\n+public final class FormatUtils {\n \n     private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n \n@@ -111,7 +111,7 @@ public static void clear() {\n         DECIMAL_FORMAT.remove();\n     }\n \n-    private DataFormat() {\n+    private FormatUtils() {\n         // private empty constructor\n     }\n }","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/DataFormat.java"},{"sha":"54a4428c2174051099a0d86de9ff58405c595226","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":53,"deletions":119,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -19,23 +19,18 @@\n package org.apache.syncope.core.misc;\n \n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -53,7 +48,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n@@ -70,6 +64,7 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -122,42 +117,6 @@ public class MappingUtils {\n     @Autowired\n     private AnyUtilsFactory anyUtilsFactory;\n \n-    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n-            final Collection<T> items, final IntMappingType type) {\n-\n-        return CollectionUtils.select(items, new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T item) {\n-                return item.getIntMappingType() == type;\n-            }\n-        });\n-    }\n-\n-    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n-            final Collection<T> items, final String intAttrName, final IntMappingType type) {\n-\n-        return CollectionUtils.select(items, new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T item) {\n-                return item.getIntMappingType() == type && intAttrName.equals(item.getIntAttrName());\n-            }\n-        });\n-    }\n-\n-    public static <T extends MappingItem> Collection<T> getMatchingMappingItems(\n-            final Collection<T> items, final String intAttrName) {\n-\n-        return CollectionUtils.select(items, new Predicate<T>() {\n-\n-            @Override\n-            public boolean evaluate(final T item) {\n-                return intAttrName.equals(item.getIntAttrName());\n-            }\n-        });\n-    }\n-\n     public static MappingItem getConnObjectKeyItem(final Provision provision) {\n         Mapping mapping = null;\n         if (provision != null) {\n@@ -241,7 +200,7 @@ public static List<MappingItem> getSyncMappingItems(final Provision provision) {\n      * @param connObjectKey connector object key\n      * @return the value to be propagated as __NAME__\n      */\n-    public static Name evaluateNAME(final Any<?, ?, ?> any, final Provision provision, final String connObjectKey) {\n+    public static Name evaluateNAME(final Any<?, ?> any, final Provision provision, final String connObjectKey) {\n         if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n             LOG.error(\"Missing ConnObjectKey for '{}': \", provision.getResource());\n@@ -302,17 +261,15 @@ public static List<MappingItemTransformer> getMappingItemTransformers(final Mapp\n      * @param any given any object\n      * @param password clear-text password\n      * @param changePwd whether password should be included for propagation attributes or not\n-     * @param vAttrs virtual attributes to be managed\n      * @param enable whether any object must be enabled or not\n      * @param provision provision information\n      * @return connObjectLink + prepared attributes\n      */\n     @Transactional(readOnly = true)\n     public Pair<String, Set<Attribute>> prepareAttrs(\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final String password,\n             final boolean changePwd,\n-            final Map<String, AttrPatch> vAttrs,\n             final Boolean enable,\n             final Provision provision) {\n \n@@ -322,19 +279,11 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         Set<Attribute> attributes = new HashSet<>();\n         String connObjectKey = null;\n \n-        for (MappingItem mapping : getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n-            LOG.debug(\"Processing schema {}\", mapping.getIntAttrName());\n+        for (MappingItem mappingItem : getMappingItems(provision, MappingPurpose.PROPAGATION)) {\n+            LOG.debug(\"Processing schema {}\", mappingItem.getIntAttrName());\n \n             try {\n-                if (mapping.getIntMappingType() == IntMappingType.UserVirtualSchema\n-                        || mapping.getIntMappingType() == IntMappingType.GroupVirtualSchema\n-                        || mapping.getIntMappingType() == IntMappingType.AnyObjectVirtualSchema) {\n-\n-                    LOG.debug(\"Expire entry cache {}-{}\", any.getKey(), mapping.getIntAttrName());\n-                    virAttrCache.expire(any.getType().getKey(), any.getKey(), mapping.getIntAttrName());\n-                }\n-\n-                Pair<String, Attribute> preparedAttr = prepareAttr(provision, mapping, any, password, vAttrs);\n+                Pair<String, Attribute> preparedAttr = prepareAttr(provision, mappingItem, any, password);\n \n                 if (preparedAttr != null && preparedAttr.getKey() != null) {\n                     connObjectKey = preparedAttr.getKey();\n@@ -355,7 +304,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n                     }\n                 }\n             } catch (Exception e) {\n-                LOG.debug(\"Attribute '{}' processing failed\", mapping.getIntAttrName(), e);\n+                LOG.debug(\"Attribute '{}' processing failed\", mappingItem.getIntAttrName(), e);\n             }\n         }\n \n@@ -387,15 +336,12 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n      * @param mapItem mapping item for the given attribute\n      * @param any any object\n      * @param password clear-text password\n-     * @param vAttrs virtual attributes to be managed\n      * @return connObjectLink + prepared attribute\n      */\n     private Pair<String, Attribute> prepareAttr(\n-            final Provision provision, final MappingItem mapItem,\n-            final Any<?, ?, ?> any, final String password,\n-            final Map<String, AttrPatch> vAttrs) {\n+            final Provision provision, final MappingItem mapItem, final Any<?, ?> any, final String password) {\n \n-        List<Any<?, ?, ?>> anys = new ArrayList<>();\n+        List<Any<?, ?>> anys = new ArrayList<>();\n \n         switch (mapItem.getIntMappingType().getAnyTypeKind()) {\n             case USER:\n@@ -407,7 +353,6 @@ private Pair<String, Attribute> prepareAttr(\n             case GROUP:\n                 if (any instanceof User) {\n                     for (Group group : userDAO.findAllGroups((User) any)) {\n-                        virAttrHandler.retrieveVirAttrValues(group);\n                         anys.add(group);\n                     }\n                 } else if (any instanceof Group) {\n@@ -424,8 +369,6 @@ private Pair<String, Attribute> prepareAttr(\n             default:\n         }\n \n-        List<PlainAttrValue> values = getIntValues(provision, mapItem, anys, vAttrs);\n-\n         Schema schema = null;\n         boolean readOnlyVirSchema = false;\n         AttrSchemaType schemaType;\n@@ -453,6 +396,8 @@ private Pair<String, Attribute> prepareAttr(\n \n         String extAttrName = mapItem.getExtAttrName();\n \n+        List<PlainAttrValue> values = getIntValues(provision, mapItem, anys);\n+\n         LOG.debug(\"Define mapping for: \"\n                 + \"\\n* ExtAttrName \" + extAttrName\n                 + \"\\n* is connObjectKey \" + mapItem.isConnObjectKey()\n@@ -501,17 +446,15 @@ private Pair<String, Attribute> prepareAttr(\n                     result = null;\n                 } else {\n                     result = new ImmutablePair<>(\n-                            null,\n-                            AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n+                            null, AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n                 }\n             } else {\n                 if ((schema != null && schema.isMultivalue())\n                         || anyUtilsFactory.getInstance(any).getAnyTypeKind()\n                         != mapItem.getIntMappingType().getAnyTypeKind()) {\n \n                     result = new ImmutablePair<>(\n-                            null,\n-                            AttributeBuilder.build(extAttrName, objValues));\n+                            null, AttributeBuilder.build(extAttrName, objValues));\n                 } else {\n                     result = new ImmutablePair<>(\n                             null, objValues.isEmpty()\n@@ -524,9 +467,8 @@ private Pair<String, Attribute> prepareAttr(\n         return result;\n     }\n \n-    private String getGroupOwnerValue(final Provision provision, final Any<?, ?, ?> any) {\n-        Pair<String, Attribute> preparedAttr = prepareAttr(\n-                provision, getConnObjectKeyItem(provision), any, null, Collections.<String, AttrPatch>emptyMap());\n+    private String getGroupOwnerValue(final Provision provision, final Any<?, ?> any) {\n+        Pair<String, Attribute> preparedAttr = prepareAttr(provision, getConnObjectKeyItem(provision), any, null);\n         String connObjectKey = preparedAttr.getKey();\n \n         return evaluateNAME(any, provision, connObjectKey).getNameValue();\n@@ -538,12 +480,11 @@ private String getGroupOwnerValue(final Provision provision, final Any<?, ?, ?>\n      * @param provision provision information\n      * @param mappingItem mapping item\n      * @param anys any objects\n-     * @param vAttrs virtual attributes to be managed\n      * @return attribute values.\n      */\n     @Transactional(readOnly = true)\n     public List<PlainAttrValue> getIntValues(final Provision provision,\n-            final MappingItem mappingItem, final List<Any<?, ?, ?>> anys, final Map<String, AttrPatch> vAttrs) {\n+            final MappingItem mappingItem, final List<Any<?, ?>> anys) {\n \n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", anys, mappingItem.getIntMappingType());\n \n@@ -554,7 +495,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n             case UserPlainSchema:\n             case GroupPlainSchema:\n             case AnyObjectPlainSchema:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     PlainAttr<?> attr = any.getPlainAttr(mappingItem.getIntAttrName());\n                     if (attr != null) {\n                         if (attr.getUniqueValue() != null) {\n@@ -579,46 +520,10 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n \n                 break;\n \n-            case UserVirtualSchema:\n-            case GroupVirtualSchema:\n-            case AnyObjectVirtualSchema:\n-                // virtual attributes don't get transformed\n-                transform = false;\n-\n-                for (Any<?, ?, ?> any : anys) {\n-                    AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-                    VirAttr<?> attr = any.getVirAttr(mappingItem.getIntAttrName());\n-                    if (attr != null) {\n-                        if (vAttrs != null) {\n-                            if (vAttrs.containsKey(mappingItem.getIntAttrName())) {\n-                                attr.getValues().clear();\n-                                attr.getValues().addAll(\n-                                        vAttrs.get(mappingItem.getIntAttrName()).getAttrTO().getValues());\n-                            } else {\n-                                throw new IllegalArgumentException(\"Don't need to update virtual attribute '\"\n-                                        + mappingItem.getIntAttrName() + \"'\");\n-                            }\n-                        }\n-                        for (String value : attr.getValues()) {\n-                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                            attrValue.setStringValue(value);\n-                            values.add(attrValue);\n-                        }\n-                    }\n-\n-                    LOG.debug(\"Retrieved {} virtual attribute {}\"\n-                            + \"\\n* IntAttrName {}\"\n-                            + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\",\n-                            any.getClass().getSimpleName(),\n-                            attr, mappingItem.getIntAttrName(), mappingItem.getIntMappingType(), values);\n-                }\n-                break;\n-\n             case UserDerivedSchema:\n             case GroupDerivedSchema:\n             case AnyObjectDerivedSchema:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n                     DerAttr<?> attr = any.getDerAttr(mappingItem.getIntAttrName());\n                     if (attr != null) {\n@@ -635,10 +540,39 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                 }\n                 break;\n \n+            case UserVirtualSchema:\n+            case GroupVirtualSchema:\n+            case AnyObjectVirtualSchema:\n+                // virtual attributes don't get transformed\n+                transform = false;\n+\n+                VirSchema virSchema = virSchemaDAO.find(mappingItem.getIntAttrName());\n+                if (virSchema != null) {\n+                    for (Any<?, ?> any : anys) {\n+                        LOG.debug(\"Expire entry cache {}-{}\", any.getKey(), mappingItem.getIntAttrName());\n+                        virAttrCache.expire(any.getType().getKey(), any.getKey(), mappingItem.getIntAttrName());\n+\n+                        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+                        for (String value : virAttrHandler.getValues(any, virSchema)) {\n+                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                            attrValue.setStringValue(value);\n+                            values.add(attrValue);\n+                        }\n+\n+                        LOG.debug(\"Retrieved values for {}\"\n+                                + \"\\n* IntAttrName {}\"\n+                                + \"\\n* IntMappingType {}\"\n+                                + \"\\n* Attribute values {}\",\n+                                virSchema.getKey(), mappingItem.getIntAttrName(), mappingItem.getIntMappingType(),\n+                                values);\n+                    }\n+                }\n+                break;\n+\n             case UserKey:\n             case GroupKey:\n             case AnyObjectKey:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n                     PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n                     attrValue.setStringValue(any.getKey().toString());\n@@ -647,7 +581,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                 break;\n \n             case Username:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     if (any instanceof User) {\n                         UPlainAttrValue attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n                         attrValue.setStringValue(((User) any).getUsername());\n@@ -657,7 +591,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                 break;\n \n             case GroupName:\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     if (any instanceof Group) {\n                         GPlainAttrValue attrValue = entityFactory.newEntity(GPlainAttrValue.class);\n                         attrValue.setStringValue(((Group) any).getName());\n@@ -674,7 +608,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                         ? null\n                         : provision.getMapping();\n \n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     if (any instanceof Group) {\n                         Group group = (Group) any;\n                         String groupOwnerValue = null;\n@@ -720,9 +654,9 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n      * @return connObjectKey internal value\n      */\n     @Transactional(readOnly = true)\n-    public String getConnObjectKeyValue(final Any<?, ?, ?> any, final Provision provision) {\n+    public String getConnObjectKeyValue(final Any<?, ?> any, final Provision provision) {\n         List<PlainAttrValue> values = getIntValues(provision, provision.getMapping().getConnObjectKeyItem(),\n-                Collections.<Any<?, ?, ?>>singletonList(any), null);\n+                Collections.<Any<?, ?>>singletonList(any));\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();"},{"sha":"62e3dbabd3f18153621d4412e2bba9064a94824c","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/ClassFreeUberspectImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FClassFreeUberspectImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FClassFreeUberspectImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FClassFreeUberspectImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -26,7 +26,7 @@\n \n class ClassFreeUberspectImpl extends UberspectImpl {\n \n-    public ClassFreeUberspectImpl(final Log runtimeLogger) {\n+    ClassFreeUberspectImpl(final Log runtimeLogger) {\n         super(runtimeLogger);\n     }\n "},{"sha":"3afe6e5f1f010c3b69991f60a802104eee03dcef","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/JexlUtils.java","status":"modified","additions":5,"deletions":30,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -35,8 +35,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.slf4j.Logger;\n@@ -126,7 +125,7 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n                         context.set(fieldName, fieldValue == null\n                                 ? StringUtils.EMPTY\n                                 : (type.equals(Date.class)\n-                                        ? DataFormat.format((Date) fieldValue, false)\n+                                        ? FormatUtils.format((Date) fieldValue, false)\n                                         : fieldValue));\n \n                         LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);\n@@ -140,7 +139,7 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n         }\n \n         if (object instanceof Any) {\n-            Any<?, ?, ?> any = (Any<?, ?, ?>) object;\n+            Any<?, ?> any = (Any<?, ?>) object;\n             if (any.getRealm() != null) {\n                 context.set(\"realm\", any.getRealm().getName());\n             }\n@@ -195,40 +194,16 @@ public static JexlContext addDerAttrsToContext(final Collection<? extends DerAtt\n         return context;\n     }\n \n-    public static JexlContext addVirAttrsToContext(final Collection<? extends VirAttr> virAttrs,\n-            final JexlContext jexlContext) {\n-\n-        JexlContext context = jexlContext == null\n-                ? new MapContext()\n-                : jexlContext;\n-\n-        for (VirAttr<?> virAttr : virAttrs) {\n-            if (virAttr.getSchema() != null) {\n-                List<String> attrValues = virAttr.getValues();\n-                String expressionValue = attrValues.isEmpty()\n-                        ? StringUtils.EMPTY\n-                        : attrValues.get(0);\n-\n-                LOG.debug(\"Add virtual attribute {} with value {}\", virAttr.getSchema().getKey(), expressionValue);\n-\n-                context.set(virAttr.getSchema().getKey(), expressionValue);\n-            }\n-        }\n-\n-        return context;\n-    }\n-\n-    public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?, ?, ?> any) {\n+    public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?, ?> any) {\n         JexlContext jexlContext = new MapContext();\n         addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n         addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n-        addVirAttrsToContext(any.getVirAttrs(), jexlContext);\n \n         return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n     }\n \n     public static String evaluate(final String expression,\n-            final Any<?, ?, ?> any, final Collection<? extends PlainAttr<?>> attributes) {\n+            final Any<?, ?> any, final Collection<? extends PlainAttr<?>> attributes) {\n \n         JexlContext jexlContext = new MapContext();\n         JexlUtils.addPlainAttrsToContext(attributes, jexlContext);"},{"sha":"7dc576a1dc3db4b3c2e76433e8138777bd4bdab1","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -116,14 +116,22 @@ public Domain findDomain(final String key) {\n         return domain;\n     }\n \n+    /**\n+     * Attempts to authenticate the given credentials against internal storage and pass-through resources (if\n+     * configured): the first succeeding causes global success.\n+     *\n+     * @param authentication given credentials\n+     * @return {@code null} if no matching user was found, authentication result otherwise\n+     */\n     @Transactional(noRollbackFor = DisabledException.class)\n     public Pair<Long, Boolean> authenticate(final Authentication authentication) {\n         Long key = null;\n-        Boolean authenticated = false;\n+        Boolean authenticated = null;\n \n         User user = userDAO.find(authentication.getName());\n         if (user != null) {\n             key = user.getKey();\n+            authenticated = false;\n \n             if (user.isSuspended() != null && user.isSuspended()) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");"},{"sha":"313b0f15d3cf5d2e92130d833285e8d1b850e736","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -98,7 +98,7 @@ public Authentication authenticate(final Authentication authentication) {\n         }\n         SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).setDomain(domainKey);\n \n-        boolean authenticated;\n+        Boolean authenticated;\n         if (anonymousUser.equals(authentication.getName())) {\n             authenticated = authentication.getCredentials().toString().equals(anonymousKey);\n         } else if (adminUser.equals(authentication.getName())) {\n@@ -133,7 +133,7 @@ public Pair<Long, Boolean> exec() {\n                         }\n                     });\n             authenticated = authResult.getValue();\n-            if (!authenticated) {\n+            if (authenticated != null && !authenticated) {\n                 AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n \n                     @Override\n@@ -145,7 +145,7 @@ public Void exec() {\n             }\n         }\n \n-        final boolean isAuthenticated = authenticated;\n+        final boolean isAuthenticated = authenticated != null && authenticated;\n         UsernamePasswordAuthenticationToken token;\n         if (isAuthenticated) {\n             token = AuthContextUtils.execWithAuthContext("},{"sha":"fa8847f61d15c8abbc43900fb1920c36a5264670","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -28,7 +28,7 @@\n \n public interface ImplementationLookup extends SyncopeLoader {\n \n-    public enum Type {\n+    enum Type {\n \n         REPORTLET,\n         ACCOUNT_RULE,"},{"sha":"bfda35f068cfa8e497c08e4c539f8fbbc427ae1b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n \n-public interface AnyDAO<A extends Any<?, ?, ?>> extends DAO<A, Long> {\n+public interface AnyDAO<A extends Any<?, ?>> extends DAO<A, Long> {\n \n     A authFind(Long key);\n "},{"sha":"00471e096ef65c04adf57d4a5923514b6f8ec0ce","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnySearchDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n \n-public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n+public interface AnySearchDAO extends DAO<Any<?, ?>, Long> {\n \n     /**\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)\n@@ -42,7 +42,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition\n      */\n-    <T extends Any<?, ?, ?>> List<T> search(\n+    <T extends Any<?, ?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n \n     /**\n@@ -53,7 +53,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition\n      */\n-    <T extends Any<?, ?, ?>> List<T> search(\n+    <T extends Any<?, ?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, List<OrderByClause> orderBy, AnyTypeKind kind);\n \n     /**\n@@ -66,7 +66,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition (in the given page)\n      */\n-    <T extends Any<?, ?, ?>> List<T> search(\n+    <T extends Any<?, ?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, int page, int itemsPerPage,\n             List<OrderByClause> orderBy, AnyTypeKind kind);\n \n@@ -79,5 +79,5 @@ public interface AnySearchDAO extends DAO<Any<?, ?, ?>, Long> {\n      * @param <T> any\n      * @return true if any matches searchCondition\n      */\n-    <T extends Any<?, ?, ?>> boolean matches(T any, SearchCond searchCondition, AnyTypeKind kind);\n+    <T extends Any<?, ?>> boolean matches(T any, SearchCond searchCondition, AnyTypeKind kind);\n }"},{"sha":"aeabe233825c5755023e57c95de074195d00b714","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ExternalResourceDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FExternalResourceDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,13 +21,16 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n public interface ExternalResourceDAO extends DAO<ExternalResource, String> {\n \n     ExternalResource find(String key);\n \n+    Provision findProvision(Long key);\n+\n     List<ExternalResource> findByPolicy(Policy policy);\n \n     List<ExternalResource> findWithoutPolicy(PolicyType type);"},{"sha":"9479428739bfb4997465cc8c21ea3191931cf368","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,8 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n-public interface VirSchemaDAO extends SchemaDAO<VirSchema, VirAttr<?>> {\n+public interface VirSchemaDAO extends SchemaDAO<VirSchema, Attr<VirSchema, ?>> {\n+\n+    List<VirSchema> findByProvision(Provision provision);\n }"},{"sha":"f56485e9aae2fdadb149c43e864ef7958326943d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":1,"deletions":9,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import java.util.Set;\n \n-public interface Any<P extends PlainAttr<?>, D extends DerAttr<?>, V extends VirAttr<?>> extends AnnotatedEntity<Long> {\n+public interface Any<P extends PlainAttr<?>, D extends DerAttr<?>> extends AnnotatedEntity<Long> {\n \n     AnyType getType();\n \n@@ -56,14 +56,6 @@\n \n     List<? extends D> getDerAttrs();\n \n-    boolean add(V virAttr);\n-\n-    boolean remove(V virAttr);\n-\n-    V getVirAttr(String virSchemaName);\n-\n-    List<? extends V> getVirAttrs();\n-\n     boolean add(ExternalResource resource);\n \n     boolean remove(ExternalResource resource);"},{"sha":"702e7a63060b580410bba17352bb078fc386fb10","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -26,7 +26,7 @@ public interface AnyUtils {\n \n     AnyTypeKind getAnyTypeKind();\n \n-    <T extends Any<?, ?, ?>> Class<T> anyClass();\n+    <T extends Any<?, ?>> Class<T> anyClass();\n \n     <T extends PlainAttr<?>> Class<T> plainAttrClass();\n \n@@ -44,10 +44,6 @@ public interface AnyUtils {\n \n     <T extends DerAttr<?>> T newDerAttr();\n \n-    <T extends VirAttr<?>> Class<T> virAttrClass();\n-\n-    <T extends VirAttr<?>> T newVirAttr();\n-\n     IntMappingType plainIntMappingType();\n \n     IntMappingType derIntMappingType();"},{"sha":"d64e7e1dfff6f2ef2994b19fd7455114de05aa2e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtilsFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -26,5 +26,5 @@ public interface AnyUtilsFactory {\n \n     AnyUtils getInstance(String anyTypeKind);\n \n-    AnyUtils getInstance(Any<?, ?, ?> any);\n+    AnyUtils getInstance(Any<?, ?> any);\n }"},{"sha":"500b8359994a097ad89f9a3eaa95ede3e795938b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Attr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface Attr<S extends Schema, O extends Any<?, ?, ?>> extends Entity<Long> {\n+public interface Attr<S extends Schema, O extends Any<?, ?>> extends Entity<Long> {\n \n     O getOwner();\n "},{"sha":"ff15a4a66e2311349c22e84e7617599fd408d820","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DerAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,7 +20,7 @@\n \n import java.util.Collection;\n \n-public interface DerAttr<O extends Any<?, ?, ?>> extends Attr<DerSchema, O> {\n+public interface DerAttr<O extends Any<?, ?>> extends Attr<DerSchema, O> {\n \n     String getValue(Collection<? extends PlainAttr<?>> attrs);\n }"},{"sha":"ebb7cf829c10ce1438d112e70092a2ab644eaa60","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynGroupMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n-public interface DynGroupMembership<A extends Any<?, ?, ?>> extends DynMembership<A> {\n+public interface DynGroupMembership<A extends Any<?, ?>> extends DynMembership<A> {\n \n     Group getGroup();\n "},{"sha":"24c6309e34c32ed74a5db58c3658fc36374dd350","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n \n-public interface DynMembership<A extends Any<?, ?, ?>> extends Entity<Long> {\n+public interface DynMembership<A extends Any<?, ?>> extends Entity<Long> {\n \n     String getFIQLCond();\n "},{"sha":"46fcedc83c7aed14eaa97c91986ba62c86c676fc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/LinkingMappingItem.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+\n+/**\n+ * {@link MappingItem} implementation for usage within {@link VirSchema#asLinkingMappingItem()} implementations.\n+ */\n+public class LinkingMappingItem implements MappingItem {\n+\n+    private static final long serialVersionUID = 327455459536715529L;\n+\n+    private final VirSchema virSchema;\n+\n+    public LinkingMappingItem(final VirSchema virSchema) {\n+        this.virSchema = virSchema;\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return -1L;\n+    }\n+\n+    @Override\n+    public Mapping getMapping() {\n+        return virSchema.getProvision().getMapping();\n+    }\n+\n+    @Override\n+    public void setMapping(final Mapping mapping) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public String getExtAttrName() {\n+        return virSchema.getExtAttrName();\n+    }\n+\n+    @Override\n+    public void setExtAttrName(final String extAttrName) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public String getIntAttrName() {\n+        return virSchema.getKey();\n+    }\n+\n+    @Override\n+    public void setIntAttrName(final String intAttrName) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public IntMappingType getIntMappingType() {\n+        switch (virSchema.getProvision().getAnyType().getKind()) {\n+            case ANY_OBJECT:\n+                return IntMappingType.AnyObjectVirtualSchema;\n+\n+            case GROUP:\n+                return IntMappingType.GroupVirtualSchema;\n+\n+            case USER:\n+            default:\n+                return IntMappingType.UserVirtualSchema;\n+        }\n+    }\n+\n+    @Override\n+    public void setIntMappingType(final IntMappingType intMappingType) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public String getMandatoryCondition() {\n+        return virSchema.getMandatoryCondition();\n+    }\n+\n+    @Override\n+    public void setMandatoryCondition(final String condition) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public MappingPurpose getPurpose() {\n+        return virSchema.isReadonly() ? MappingPurpose.SYNCHRONIZATION : MappingPurpose.BOTH;\n+    }\n+\n+    @Override\n+    public void setPurpose(final MappingPurpose purpose) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public boolean isConnObjectKey() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setConnObjectKey(final boolean connObjectKey) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public boolean isPassword() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setPassword(final boolean password) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public List<String> getMappingItemTransformerClassNames() {\n+        return Collections.emptyList();\n+    }\n+}"},{"sha":"9d1466cc2b368da92be21efec4da79ad20b8da6e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Membership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n-public interface Membership<L extends Any<?, ?, ?>> extends Relationship<L, Group> {\n+public interface Membership<L extends Any<?, ?>> extends Relationship<L, Group> {\n \n     @Override\n     MembershipType getType();"},{"sha":"8d8a7c10c3bf62e912a2d8a4705e5675c5d7915f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n \n-public interface PlainAttr<O extends Any<?, ?, ?>> extends Attr<PlainSchema, O> {\n+public interface PlainAttr<O extends Any<?, ?>> extends Attr<PlainSchema, O> {\n \n     void add(String value, AnyUtils anyUtils);\n "},{"sha":"b87563eed9ee06046891222bb2fa521b7df56400","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Relationship.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface Relationship<L extends Any<?, ?, ?>, R extends Any<?, ?, ?>> extends Entity<Long> {\n+public interface Relationship<L extends Any<?, ?>, R extends Any<?, ?>> extends Entity<Long> {\n \n     RelationshipType getType();\n "},{"sha":"65cc11dc0aafb11085809a1967662bd821f124e5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/VirSchema.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FVirSchema.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,7 +18,20 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+\n public interface VirSchema extends Schema {\n \n     void setReadonly(boolean readonly);\n+\n+    Provision getProvision();\n+\n+    void setProvision(Provision provision);\n+\n+    String getExtAttrName();\n+\n+    void setExtAttrName(String extAttrName);\n+\n+    MappingItem asLinkingMappingItem();\n }"},{"sha":"1e10257173bf2bd49c0dd853eceeb93fe172a262","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AnyObject.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n \n-public interface AnyObject extends Any<APlainAttr, ADerAttr, AVirAttr> {\n+public interface AnyObject extends Any<APlainAttr, ADerAttr> {\n \n     boolean add(ARelationship relationship);\n "},{"sha":"f4ca14d5b54e85fc7c9b9df69dbff199eb9c345d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/conf/Conf.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,9 +21,8 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n \n-public interface Conf extends Any<CPlainAttr, DerAttr<?>, VirAttr<?>> {\n+public interface Conf extends Any<CPlainAttr, DerAttr<?>> {\n \n     void setKey(Long key);\n "},{"sha":"0afddbaf18039a2f93dde27d69940b064a86db84","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface Group extends Any<GPlainAttr, GDerAttr, GVirAttr> {\n+public interface Group extends Any<GPlainAttr, GDerAttr> {\n \n     String getName();\n \n@@ -63,18 +63,6 @@ public interface Group extends Any<GPlainAttr, GDerAttr, GVirAttr> {\n     @Override\n     List<? extends GDerAttr> getDerAttrs();\n \n-    @Override\n-    boolean add(GVirAttr attr);\n-\n-    @Override\n-    boolean remove(GVirAttr virAttr);\n-\n-    @Override\n-    GVirAttr getVirAttr(String virSchemaName);\n-\n-    @Override\n-    List<? extends GVirAttr> getVirAttrs();\n-\n     ADynGroupMembership getADynMembership();\n \n     void setADynMembership(ADynGroupMembership aDynMembership);"},{"sha":"2d194365b82f139d51b660879e195793b33dfa7b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/PropagationTask.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FPropagationTask.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -54,6 +54,10 @@ public interface PropagationTask extends Task {\n \n     void setAnyTypeKind(AnyTypeKind anyTypeKind);\n \n+    String getAnyType();\n+\n+    void setAnyType(String anyType);\n+\n     ExternalResource getResource();\n \n     void setResource(ExternalResource resource);"},{"sha":"0a51c48d19ba38eb5172c1d5429a3f6fba41a840","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n \n-public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n+public interface User extends Any<UPlainAttr, UDerAttr> {\n \n     String getUsername();\n \n@@ -116,18 +116,6 @@ public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n     @Override\n     List<? extends UDerAttr> getDerAttrs();\n \n-    @Override\n-    boolean add(UVirAttr attr);\n-\n-    @Override\n-    boolean remove(UVirAttr virAttr);\n-\n-    @Override\n-    UVirAttr getVirAttr(String virSchemaName);\n-\n-    @Override\n-    List<? extends UVirAttr> getVirAttrs();\n-\n     boolean add(Role role);\n \n     boolean remove(Role role);"},{"sha":"125b4471182fd6b14dd009e15450488b4e58cf4d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/ContentLoaderHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FContentLoaderHandler.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -27,7 +27,7 @@\n import javax.sql.DataSource;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.binary.Hex;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.dao.DataAccessException;\n@@ -48,7 +48,7 @@ class ContentLoaderHandler extends DefaultHandler {\n \n     private final String rootElement;\n \n-    public ContentLoaderHandler(final DataSource dataSource, final String rootElement) {\n+    ContentLoaderHandler(final DataSource dataSource, final String rootElement) {\n         this.dataSource = dataSource;\n         this.rootElement = rootElement;\n     }\n@@ -125,7 +125,7 @@ public Map<String, Integer> extractData(final ResultSet rs) throws SQLException\n                 case Types.TIME:\n                 case Types.TIMESTAMP:\n                     try {\n-                        parameters[i] = DataFormat.parseDate(attrs.getValue(i));\n+                        parameters[i] = FormatUtils.parseDate(attrs.getValue(i));\n                     } catch (ParseException e) {\n                         LOG.error(\"Unparsable Date '{}'\", attrs.getValue(i));\n                         parameters[i] = attrs.getValue(i);"},{"sha":"88a14e1321e9e6c614cbd00e2ea81af4f61dc020","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/MultiParentNode.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FMultiParentNode.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -33,7 +33,7 @@\n \n     private boolean exploited = false;\n \n-    public MultiParentNode(final T object) {\n+    MultiParentNode(final T object) {\n         this.object = object;\n         children = new HashSet<>();\n     }"},{"sha":"9512849dfc13468f719510bd394d532a9c60ce79","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -50,7 +50,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportExec;\n@@ -60,7 +60,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n@@ -69,7 +68,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.security.crypto.codec.Hex;\n@@ -87,9 +85,9 @@ public class XMLContentExporter extends AbstractContentDealer implements Content\n             new HashSet<>(Arrays.asList(new String[] {\n                 \"QRTZ_\", \"LOGGING\", JPAReportExec.TABLE, JPATaskExec.TABLE,\n                 JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE, JPAUPlainAttrUniqueValue.TABLE,\n-                JPAUDerAttr.TABLE, JPAUVirAttr.TABLE,\n+                JPAUDerAttr.TABLE,\n                 JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n-                JPAADerAttr.TABLE, JPAAVirAttr.TABLE,\n+                JPAADerAttr.TABLE,\n                 JPAARelationship.TABLE, JPAAMembership.TABLE, JPAURelationship.TABLE, JPAUMembership.TABLE\n             }));\n \n@@ -206,7 +204,7 @@ private String getValues(final ResultSet rs, final String columnName, final Inte\n                 case Types.TIMESTAMP:\n                     final Timestamp timestamp = rs.getTimestamp(columnName);\n                     if (timestamp != null) {\n-                        res = DataFormat.format(new Date(timestamp.getTime()));\n+                        res = FormatUtils.format(new Date(timestamp.getTime()));\n                     }\n                     break;\n "},{"sha":"960251f958753a6174d5edee3dffecba915413a7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":2,"deletions":9,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -47,14 +47,13 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-public abstract class AbstractAnyDAO<A extends Any<?, ?, ?>> extends AbstractDAO<A, Long> implements AnyDAO<A> {\n+public abstract class AbstractAnyDAO<A extends Any<?, ?>> extends AbstractDAO<A, Long> implements AnyDAO<A> {\n \n     @Autowired\n     protected PlainSchemaDAO plainSchemaDAO;\n@@ -415,13 +414,7 @@ public final int count(final Set<String> adminRealms) {\n \n     @Override\n     public A save(final A any) {\n-        A merged = entityManager().merge(any);\n-        for (VirAttr<?> virAttr : merged.getVirAttrs()) {\n-            virAttr.getValues().clear();\n-            virAttr.getValues().addAll(any.getVirAttr(virAttr.getSchema().getKey()).getValues());\n-        }\n-\n-        return merged;\n+        return entityManager().merge(any);\n     }\n \n     @Override"},{"sha":"2acd68343c853d82bc5958d011e2a4487d2542f2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -67,7 +67,7 @@\n import org.springframework.util.ReflectionUtils;\n \n @Repository\n-public class JPAAnySearchDAO extends AbstractDAO<Any<?, ?, ?>, Long> implements AnySearchDAO {\n+public class JPAAnySearchDAO extends AbstractDAO<Any<?, ?>, Long> implements AnySearchDAO {\n \n     private static final String EMPTY_ATTR_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n \n@@ -150,22 +150,22 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> List<T> search(\n+    public <T extends Any<?, ?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n \n         return search(adminRealms, searchCondition, Collections.<OrderByClause>emptyList(), typeKind);\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> List<T> search(\n+    public <T extends Any<?, ?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final List<OrderByClause> orderBy,\n             final AnyTypeKind typeKind) {\n \n         return search(adminRealms, searchCondition, -1, -1, orderBy, typeKind);\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> List<T> search(\n+    public <T extends Any<?, ?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final int page, final int itemsPerPage,\n             final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n \n@@ -189,7 +189,7 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> boolean matches(\n+    public <T extends Any<?, ?>> boolean matches(\n             final T any, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n@@ -347,7 +347,7 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends Any<?, ?, ?>> List<T> doSearch(final Set<String> adminRealms,\n+    private <T extends Any<?, ?>> List<T> doSearch(final Set<String> adminRealms,\n             final SearchCond nodeCond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n             final AnyTypeKind typeKind) {\n "},{"sha":"985c7aad4eabcccb290f5aa98b7bead9b82f8186","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":16,"deletions":12,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n@@ -64,19 +65,22 @@ public CPlainAttr find(final String key) {\n     public CPlainAttr find(final String key, final String defaultValue) {\n         CPlainAttr result = find(key);\n         if (result == null) {\n-            JPACPlainAttr newAttr = new JPACPlainAttr();\n-            newAttr.setSchema(schemaDAO.find(key));\n-\n-            JPACPlainAttrValue attrValue;\n-            if (newAttr.getSchema().isUniqueConstraint()) {\n-                attrValue = new JPACPlainAttrValue();\n-                ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n-            } else {\n-                attrValue = new JPACPlainAttrValue();\n+            PlainSchema schema = schemaDAO.find(key);\n+            if (schema != null) {\n+                JPACPlainAttr newAttr = new JPACPlainAttr();\n+                newAttr.setSchema(schemaDAO.find(key));\n+\n+                JPACPlainAttrValue attrValue;\n+                if (newAttr.getSchema().isUniqueConstraint()) {\n+                    attrValue = new JPACPlainAttrValue();\n+                    ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n+                } else {\n+                    attrValue = new JPACPlainAttrValue();\n+                }\n+                newAttr.add(defaultValue, attrValue);\n+\n+                result = newAttr;\n             }\n-            newAttr.add(defaultValue, attrValue);\n-\n-            result = newAttr;\n         }\n \n         return result;"},{"sha":"99b90144a734612b9dedd30b7afdfa4c6c75685f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerAttrDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -78,7 +78,7 @@ public <T extends DerAttr<?>> void delete(final Long key, final Class<T> referen\n     @SuppressWarnings(\"unchecked\")\n     public <T extends DerAttr<?>> void delete(final T derAttr) {\n         if (derAttr.getOwner() != null) {\n-            ((Any<?, T, ?>) derAttr.getOwner()).remove(derAttr);\n+            ((Any<?, T>) derAttr.getOwner()).remove(derAttr);\n         }\n \n         entityManager().remove(derAttr);"},{"sha":"0650ee94bb315215a440dc4bfe2117a8bf1db490","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -32,17 +32,20 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -66,6 +69,9 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     private ConnectorRegistry connRegistry;\n \n@@ -74,6 +80,11 @@ public ExternalResource find(final String name) {\n         return entityManager().find(JPAExternalResource.class, name);\n     }\n \n+    @Override\n+    public Provision findProvision(final Long key) {\n+        return entityManager().find(JPAProvision.class, key);\n+    }\n+\n     private StringBuilder getByPolicyQuery(final PolicyType type) {\n         StringBuilder query = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAExternalResource.class.getSimpleName()).\n@@ -203,21 +214,25 @@ public void delete(final String name) {\n             policy.remove(resource);\n         }\n \n-        if (resource.getConnector() != null && resource.getConnector().getResources() != null\n-                && !resource.getConnector().getResources().isEmpty()) {\n-\n-            resource.getConnector().getResources().remove(resource);\n-        }\n-        resource.setConnector(null);\n-\n         for (Provision provision : resource.getProvisions()) {\n             for (MappingItem item : provision.getMapping().getItems()) {\n                 item.setMapping(null);\n             }\n             provision.getMapping().getItems().clear();\n             provision.setMapping(null);\n             provision.setResource(null);\n+\n+            for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+                virSchemaDAO.delete(schema.getKey());\n+            }\n+        }\n+\n+        if (resource.getConnector() != null && resource.getConnector().getResources() != null\n+                && !resource.getConnector().getResources().isEmpty()) {\n+\n+            resource.getConnector().getResources().remove(resource);\n         }\n+        resource.setConnector(null);\n \n         entityManager().remove(resource);\n     }"},{"sha":"4c29c90844e4258b5d21157a860fda1e1cb121d0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -203,7 +203,7 @@ public void delete(final Group group) {\n     }\n \n     private void populateTransitiveResources(\n-            final Group group, final Any<?, ?, ?> any, final Map<Long, PropagationByResource> result) {\n+            final Group group, final Any<?, ?> any, final Map<Long, PropagationByResource> result) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n         for (ExternalResource resource : group.getResources()) {"},{"sha":"cec3d5bec600f724d916c8306fb6a653a975d629","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -68,7 +68,7 @@ public <T extends PlainAttr<?>> void delete(final Long key, final Class<T> refer\n     @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n         if (plainAttr.getOwner() != null) {\n-            ((Any<T, ?, ?>) plainAttr.getOwner()).remove(plainAttr);\n+            ((Any<T, ?>) plainAttr.getOwner()).remove(plainAttr);\n         }\n \n         entityManager().remove(plainAttr);"},{"sha":"60f37868754af5af88d097142117d5b7a38bebaf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrValueDAO.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrValueDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n@@ -99,7 +100,11 @@ public <T extends PlainAttrValue> void delete(final Long id, final Class<T> refe\n     @Override\n     public <T extends PlainAttrValue> void delete(final T attrValue) {\n         if (attrValue.getAttr() != null) {\n-            attrValue.getAttr().remove(attrValue);\n+            if (attrValue instanceof PlainAttrUniqueValue) {\n+                attrValue.getAttr().setUniqueValue(null);\n+            } else {\n+                attrValue.getAttr().remove(attrValue);\n+            }\n         }\n \n         entityManager().remove(attrValue);"},{"sha":"2c8b99f7d5b5d586ab12ea45cc1cd19ad9f13494","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirAttrDAO.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirAttrDAO.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,86 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import java.util.List;\n-import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n-import org.springframework.stereotype.Repository;\n-\n-@Repository\n-public class JPAVirAttrDAO extends AbstractDAO<VirAttr<?>, Long> implements VirAttrDAO {\n-\n-    public <T extends VirAttr<?>> Class<? extends AbstractVirAttr<?>> getJPAEntityReference(\n-            final Class<T> reference) {\n-\n-        return GVirAttr.class.isAssignableFrom(reference)\n-                ? JPAGVirAttr.class\n-                : AVirAttr.class.isAssignableFrom(reference)\n-                        ? JPAAVirAttr.class\n-                        : UVirAttr.class.isAssignableFrom(reference)\n-                                ? JPAUVirAttr.class\n-                                : null;\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> T save(final T virAttr) {\n-        return entityManager().merge(virAttr);\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> void delete(final Long key, final Class<T> reference) {\n-        T virAttr = find(key, reference);\n-        if (virAttr == null) {\n-            return;\n-        }\n-\n-        delete(virAttr);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends VirAttr<?>> void delete(final T virAttr) {\n-        if (virAttr.getOwner() != null) {\n-            ((Any<?, ?, T>) virAttr.getOwner()).remove(virAttr);\n-        }\n-\n-        entityManager().remove(virAttr);\n-    }\n-}"},{"sha":"d4bce14eee802525c44b3f94c0894c9ca5ff467b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,17 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n+import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPAVirSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -37,9 +38,6 @@\n @Repository\n public class JPAVirSchemaDAO extends AbstractDAO<VirSchema, String> implements VirSchemaDAO {\n \n-    @Autowired\n-    private VirAttrDAO virAttrDAO;\n-\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n@@ -60,6 +58,18 @@ public List<VirSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<VirSchema> findByProvision(final Provision provision) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAVirSchema.class.getSimpleName()).\n+                append(\" e WHERE e.provision=:provision\");\n+\n+        TypedQuery<VirSchema> query = entityManager().createQuery(queryString.toString(), VirSchema.class);\n+        query.setParameter(\"provision\", provision);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<VirSchema> findAll() {\n         TypedQuery<VirSchema> query = entityManager().createQuery(\n@@ -68,15 +78,8 @@ public List<VirSchema> findAll() {\n     }\n \n     @Override\n-    public <T extends VirAttr<?>> List<T> findAttrs(final VirSchema schema, final Class<T> reference) {\n-        final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(((JPAVirAttrDAO) virAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n-                append(\" e WHERE e.schema=:schema\");\n-\n-        TypedQuery<T> query = entityManager().createQuery(queryString.toString(), reference);\n-        query.setParameter(\"schema\", schema);\n-\n-        return query.getResultList();\n+    public <T extends Attr<VirSchema, ?>> List<T> findAttrs(final VirSchema schema, final Class<T> reference) {\n+        return Collections.emptyList();\n     }\n \n     @Override\n@@ -95,10 +98,6 @@ public void delete(final String key) {\n         for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n             AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n \n-            for (VirAttr<?> attr : findAttrs(schema, anyUtils.virAttrClass())) {\n-                virAttrDAO.delete(attr.getKey(), anyUtils.virAttrClass());\n-            }\n-\n             resourceDAO.deleteMapping(key, anyUtils.virIntMappingType());\n         }\n "},{"sha":"4c8297a79c1203420b62b0e2dc9fe38803ae15ef","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -49,7 +49,7 @@ public int hashCode() {\n \n     private final AnyTypeKind anyTypeKind;\n \n-    public SearchSupport(final AnyTypeKind anyTypeKind) {\n+    SearchSupport(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n "},{"sha":"041c54f809f4b5b862f9f733e664caeb9876465c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":2,"deletions":15,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -39,7 +39,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -49,9 +48,9 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n @MappedSuperclass\n-public abstract class AbstractAny<P extends PlainAttr<?>, D extends DerAttr<?>, V extends VirAttr<?>>\n+public abstract class AbstractAny<P extends PlainAttr<?>, D extends DerAttr<?>>\n         extends AbstractAnnotatedEntity<Long>\n-        implements Any<P, D, V> {\n+        implements Any<P, D> {\n \n     private static final long serialVersionUID = -2666540708092702810L;\n \n@@ -127,18 +126,6 @@ public boolean evaluate(final D derAttr) {\n         });\n     }\n \n-    @Override\n-    public V getVirAttr(final String virSchemaName) {\n-        return CollectionUtils.find(getVirAttrs(), new Predicate<V>() {\n-\n-            @Override\n-            public boolean evaluate(final V virAttr) {\n-                return virAttr != null && virAttr.getSchema() != null\n-                        && virSchemaName.equals(virAttr.getSchema().getKey());\n-            }\n-        });\n-    }\n-\n     protected abstract List<JPAExternalResource> internalGetResources();\n \n     @Override"},{"sha":"694b18f47bfbbbe8ec5aad5a0c8536a336b76302","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n \n-public abstract class AbstractAttr<S extends Schema, O extends Any<?, ?, ?>>\n+public abstract class AbstractAttr<S extends Schema, O extends Any<?, ?>>\n         extends AbstractEntity<Long> implements Attr<S, O> {\n \n     private static final long serialVersionUID = -7722134717360731874L;"},{"sha":"59f390dfc8edf38f1b01f490252f7baec253f801","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDerAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n \n @MappedSuperclass\n-public abstract class AbstractDerAttr<O extends Any<?, ?, ?>>\n+public abstract class AbstractDerAttr<O extends Any<?, ?>>\n         extends AbstractAttr<DerSchema, O> implements DerAttr<O> {\n \n     private static final long serialVersionUID = 4740924251090424771L;"},{"sha":"c7110d51d0f456643940c06db6669184893cbce8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDynMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynMembership;\n \n @MappedSuperclass\n-public abstract class AbstractDynMembership<A extends Any<?, ?, ?>>\n+public abstract class AbstractDynMembership<A extends Any<?, ?>>\n         extends AbstractEntity<Long> implements DynMembership<A> {\n \n     private static final long serialVersionUID = 921821654690948787L;"},{"sha":"a9b5c13cbf38f4f986bf0a3ca9852265aa418ebb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractExec.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,19 +20,19 @@\n \n import java.util.Date;\n \n-import javax.persistence.Column;\n import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.persistence.api.entity.Exec;\n \n @MappedSuperclass\n public abstract class AbstractExec extends AbstractEntity<Long> implements Exec {\n \n     private static final long serialVersionUID = -812344822970166317L;\n \n-    @Column(nullable = false)\n+    @NotNull\n     protected String status;\n \n     /**"},{"sha":"fdd257ed615dec461c3ec0c4bbedd9585d25c84c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -37,7 +37,7 @@\n \n @MappedSuperclass\n @PlainAttrCheck\n-public abstract class AbstractPlainAttr<O extends Any<?, ?, ?>>\n+public abstract class AbstractPlainAttr<O extends Any<?, ?>>\n         extends AbstractAttr<PlainSchema, O> implements PlainAttr<O> {\n \n     private static final long serialVersionUID = -9115431608821806124L;"},{"sha":"7032df66eece44fc03297dd5c38daff7b68ad080","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttrValue.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttrValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -32,11 +32,11 @@\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.misc.DataFormat;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainAttrValueCheck;\n import org.apache.syncope.core.misc.security.Encryptor;\n \n@@ -153,7 +153,7 @@ public void parseValue(final PlainSchema schema, final String value) {\n                 try {\n                     this.setLongValue(schema.getConversionPattern() == null\n                             ? Long.valueOf(value)\n-                            : DataFormat.parseNumber(value, schema.getConversionPattern()).longValue());\n+                            : FormatUtils.parseNumber(value, schema.getConversionPattern()).longValue());\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n@@ -163,7 +163,7 @@ public void parseValue(final PlainSchema schema, final String value) {\n                 try {\n                     this.setDoubleValue(schema.getConversionPattern() == null\n                             ? Double.valueOf(value)\n-                            : DataFormat.parseNumber(value, schema.getConversionPattern()).doubleValue());\n+                            : FormatUtils.parseNumber(value, schema.getConversionPattern()).doubleValue());\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n@@ -172,8 +172,8 @@ public void parseValue(final PlainSchema schema, final String value) {\n             case Date:\n                 try {\n                     this.setDateValue(schema.getConversionPattern() == null\n-                            ? DataFormat.parseDate(value)\n-                            : new Date(DataFormat.parseDate(value, schema.getConversionPattern()).getTime()));\n+                            ? FormatUtils.parseDate(value)\n+                            : new Date(FormatUtils.parseDate(value, schema.getConversionPattern()).getTime()));\n                 } catch (Exception pe) {\n                     exception = pe;\n                 }\n@@ -246,21 +246,21 @@ public String getValueAsString(final AttrSchemaType type) {\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n                                 ? getLongValue().toString()\n-                                : DataFormat.format(getLongValue(), getAttr().getSchema().getConversionPattern());\n+                                : FormatUtils.format(getLongValue(), getAttr().getSchema().getConversionPattern());\n                 break;\n \n             case Double:\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n                                 ? getDoubleValue().toString()\n-                                : DataFormat.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());\n+                                : FormatUtils.format(getDoubleValue(), getAttr().getSchema().getConversionPattern());\n                 break;\n \n             case Date:\n                 result = getAttr() == null || getAttr().getSchema() == null\n                         || getAttr().getSchema().getConversionPattern() == null\n-                                ? DataFormat.format(getDateValue())\n-                                : DataFormat.format(getDateValue(), false, getAttr().getSchema().\n+                                ? FormatUtils.format(getDateValue())\n+                                : FormatUtils.format(getDateValue(), false, getAttr().getSchema().\n                                         getConversionPattern());\n                 break;\n "},{"sha":"aebc8da60eca8ee2b08b1e159b7661d7d4f07fd7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractVirAttr.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractVirAttr.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,71 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.persistence.Column;\n-import javax.persistence.FetchType;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.MappedSuperclass;\n-import javax.persistence.Transient;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-\n-@MappedSuperclass\n-public abstract class AbstractVirAttr<O extends Any<?, ?, ?>>\n-        extends AbstractAttr<VirSchema, O> implements VirAttr<O> {\n-\n-    private static final long serialVersionUID = 5023204776925954907L;\n-\n-    @Transient\n-    protected List<String> values = new ArrayList<>();\n-\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    @Column(name = \"schema_name\")\n-    private JPAVirSchema schema;\n-\n-    @Override\n-    public List<String> getValues() {\n-        return values;\n-    }\n-\n-    @Override\n-    public boolean add(final String value) {\n-        return !values.contains(value) && values.add(value);\n-    }\n-\n-    @Override\n-    public boolean remove(final String value) {\n-        return values.remove(value);\n-    }\n-\n-    @Override\n-    public VirSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final VirSchema schema) {\n-        checkType(schema, JPAVirSchema.class);\n-        this.schema = (JPAVirSchema) schema;\n-        checkSchema(this.schema);\n-    }\n-}"},{"sha":"c63a4019c6b492548b83eae901d050298c757b8c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AnnotatedEntityListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -33,10 +33,10 @@ public class AnnotatedEntityListener {\n     @PrePersist\n     @PreUpdate\n     public void setSysInfo(final AnnotatedEntity<?> entity) {\n-        final String username = AuthContextUtils.getUsername();\n+        String username = AuthContextUtils.getUsername();\n         LOG.debug(\"Set system properties for '{}'\", entity);\n \n-        final Date now = new Date();\n+        Date now = new Date();\n \n         if (entity.getCreationDate() == null) {\n             LOG.debug(\"Set creation date '{}' and creator '{}' for '{}'\", now, username, entity);"},{"sha":"7de2fbe7fc7532a0df7c1677ffdd2187867e0eb4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":1,"deletions":51,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -29,24 +29,20 @@\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n \n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n@@ -64,7 +60,7 @@ public AnyTypeKind getAnyTypeKind() {\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> Class<T> anyClass() {\n+    public <T extends Any<?, ?>> Class<T> anyClass() {\n         Class result;\n \n         switch (anyTypeKind) {\n@@ -265,52 +261,6 @@ public <T extends DerAttr<?>> T newDerAttr() {\n         return result;\n     }\n \n-    @Override\n-    public <T extends VirAttr<?>> Class<T> virAttrClass() {\n-        Class result = null;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = JPAUVirAttr.class;\n-                break;\n-\n-            case GROUP:\n-                result = JPAGVirAttr.class;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = JPAAVirAttr.class;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends VirAttr<?>> T newVirAttr() {\n-        T result = null;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = (T) new JPAUVirAttr();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGVirAttr();\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = (T) new JPAAVirAttr();\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public IntMappingType plainIntMappingType() {\n         IntMappingType result = null;"},{"sha":"38e08b4c651323176ed79ae0a592344e75ad8281","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -41,7 +41,7 @@ public AnyUtils getInstance(final String anyTypeKind) {\n     }\n \n     @Override\n-    public AnyUtils getInstance(final Any<?, ?, ?> any) {\n+    public AnyUtils getInstance(final Any<?, ?> any) {\n         AnyTypeKind type = null;\n         if (any instanceof User) {\n             type = AnyTypeKind.USER;"},{"sha":"054dd69a3370d9fd8b8eeaadea5f0e77b4173e42","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAConnInstance.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAConnInstance.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -36,6 +36,7 @@\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n@@ -63,31 +64,31 @@ public class JPAConnInstance extends AbstractEntity<Long> implements ConnInstanc\n     /**\n      * URI identifying the local / remote ConnId location where the related connector bundle is found.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String location;\n \n     /**\n      * Connector bundle class name.\n      * Within a given location, the triple\n      * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String connectorName;\n \n     /**\n      * Qualified name for the connector bundle.\n      * Within a given location, the triple\n      * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String bundleName;\n \n     /**\n      * Version of the bundle.\n      * Within a given location, the triple\n      * (ConnectorBundle-Name, ConnectorBundle-Version, ConnectorBundle-Version) must be unique.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String version;\n \n     /**"},{"sha":"45eea22af224c9d80f99e8a347d8ca8e7fe599e4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADerSchema.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -19,12 +19,12 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import javax.persistence.Cacheable;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -46,7 +46,7 @@ public class JPADerSchema extends AbstractEntity<String> implements DerSchema {\n     @OneToOne(fetch = FetchType.EAGER)\n     private JPAAnyTypeClass anyTypeClass;\n \n-    @Column(nullable = false)\n+    @NotNull\n     private String expression;\n \n     @Override"},{"sha":"372e06256fd8f5607f1219c497adafb42d3a3d0a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -64,7 +64,6 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -85,7 +84,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n@@ -102,7 +100,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n@@ -122,7 +119,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.springframework.stereotype.Component;\n \n@@ -202,8 +198,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAUDerAttr();\n         } else if (reference.equals(VirSchema.class)) {\n             result = (T) new JPAVirSchema();\n-        } else if (reference.equals(UVirAttr.class)) {\n-            result = (T) new JPAUVirAttr();\n         } else if (reference.equals(Mapping.class)) {\n             result = (T) new JPAMapping();\n         } else if (reference.equals(MappingItem.class)) {\n@@ -216,8 +210,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAGPlainAttrUniqueValue();\n         } else if (reference.equals(GDerAttr.class)) {\n             result = (T) new JPAGDerAttr();\n-        } else if (reference.equals(GVirAttr.class)) {\n-            result = (T) new JPAGVirAttr();\n         } else if (reference.equals(CPlainAttr.class)) {\n             result = (T) new JPACPlainAttr();\n         } else if (reference.equals(CPlainAttrValue.class)) {"},{"sha":"1c42cf0d15ed740ebf38f2e53adb090bd33c415f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPANotification.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPANotification.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -84,7 +84,7 @@ public class JPANotification extends AbstractEntity<Long> implements Notificatio\n     @NotNull\n     private String recipientAttrName;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -103,7 +103,7 @@ public class JPANotification extends AbstractEntity<Long> implements Notificatio\n     @Enumerated(EnumType.STRING)\n     private TraceLevel traceLevel;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)"},{"sha":"4ba6fa392317a5012ecba1d878d032e7d8c9785c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -32,6 +32,7 @@\n import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n@@ -58,11 +59,11 @@ public class JPAPlainSchema extends AbstractEntity<String> implements PlainSchem\n     @OneToOne(fetch = FetchType.EAGER)\n     private JPAAnyTypeClass anyTypeClass;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Enumerated(EnumType.STRING)\n     private AttrSchemaType type;\n \n-    @Column(nullable = false)\n+    @NotNull\n     private String mandatoryCondition;\n \n     @Basic"},{"sha":"0ee16065816429afc257c807eb84bc9446ea1ba9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -23,13 +23,19 @@\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.LinkingMappingItem;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaNameCheck;\n \n @Entity\n@@ -53,6 +59,13 @@ public class JPAVirSchema extends AbstractEntity<String> implements VirSchema {\n     @Max(1)\n     private Integer readonly;\n \n+    @NotNull\n+    @ManyToOne\n+    private JPAProvision provision;\n+\n+    @NotNull\n+    private String extAttrName;\n+\n     public JPAVirSchema() {\n         super();\n \n@@ -109,4 +122,31 @@ public boolean isReadonly() {\n     public void setReadonly(final boolean readonly) {\n         this.readonly = getBooleanAsInteger(readonly);\n     }\n+\n+    @Override\n+    public Provision getProvision() {\n+        return provision;\n+    }\n+\n+    @Override\n+    public void setProvision(final Provision provision) {\n+        checkType(provision, JPAProvision.class);\n+        this.provision = (JPAProvision) provision;\n+    }\n+\n+    @Override\n+    public String getExtAttrName() {\n+        return extAttrName;\n+    }\n+\n+    @Override\n+    public void setExtAttrName(final String extAttrName) {\n+        this.extAttrName = extAttrName;\n+    }\n+\n+    @Override\n+    public MappingItem asLinkingMappingItem() {\n+        return new LinkingMappingItem(this);\n+    }\n+\n }"},{"sha":"01be6a880710bab93819dfede03ccc866e5d4dbc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttrUniqueValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrUniqueValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -60,7 +60,7 @@ public APlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAAPlainAttr.class);\n         this.attribute = (JPAAPlainAttr) attr;\n     }"},{"sha":"0c9e598035e7e23231005f86c609c84f4c29bbe5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAPlainAttrValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -57,7 +57,7 @@ public APlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAAPlainAttr.class);\n         this.attribute = (JPAAPlainAttr) attr;\n     }"},{"sha":"62e2ea5f933773e3ac88f2e33be0445840e6a1b0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAVirAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAVirAttr.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-\n-@Entity\n-@Table(name = JPAAVirAttr.TABLE)\n-public class JPAAVirAttr extends AbstractVirAttr<AnyObject> implements AVirAttr {\n-\n-    private static final long serialVersionUID = -4935990254545760827L;\n-\n-    public static final String TABLE = \"AVirAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAAnyObject owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public AnyObject getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final AnyObject owner) {\n-        checkType(owner, JPAAnyObject.class);\n-        this.owner = (JPAAnyObject) owner;\n-    }\n-\n-}"},{"sha":"9d6973588b308cd228ac69b0e895871ea6832f84","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AVirAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractAny;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n@@ -52,7 +51,7 @@\n @Entity\n @Table(name = JPAAnyObject.TABLE)\n @Cacheable\n-public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr, AVirAttr> implements AnyObject {\n+public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr> implements AnyObject {\n \n     private static final long serialVersionUID = 9063766472970643492L;\n \n@@ -72,10 +71,6 @@ public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr, AVirAttr> im\n     @Valid\n     private List<JPAADerAttr> derAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAAVirAttr> virAttrs = new ArrayList<>();\n-\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"anyObject_id\"),\n@@ -148,23 +143,6 @@ public List<? extends ADerAttr> getDerAttrs() {\n         return derAttrs;\n     }\n \n-    @Override\n-    public boolean add(final AVirAttr attr) {\n-        checkType(attr, JPAAVirAttr.class);\n-        return virAttrs.add((JPAAVirAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final AVirAttr attr) {\n-        checkType(attr, JPAAVirAttr.class);\n-        return virAttrs.remove((JPAAVirAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends AVirAttr> getVirAttrs() {\n-        return virAttrs;\n-    }\n-\n     @Override\n     protected List<JPAExternalResource> internalGetResources() {\n         return resources;"},{"sha":"fea5af40f22dc4a6fd9473ff03b9550e330ee0fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainAttrUniqueValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrUniqueValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -60,7 +60,7 @@ public CPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPACPlainAttr.class);\n         this.attribute = (JPACPlainAttr) attr;\n     }"},{"sha":"5b7d2b332c334f0e7fe9cff2f759b20267a6c4b8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPACPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPACPlainAttrValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -57,7 +57,7 @@ public CPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPACPlainAttr.class);\n         this.attribute = (JPACPlainAttr) attr;\n     }"},{"sha":"ac5616adcc491fcf88e249dc9c77126a51c5cd0e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n@@ -119,26 +118,6 @@ public List<? extends DerAttr<?>> getDerAttrs() {\n         return Collections.emptyList();\n     }\n \n-    @Override\n-    public boolean add(final VirAttr<?> attr) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean remove(final VirAttr<?> virAttr) {\n-        return false;\n-    }\n-\n-    @Override\n-    public VirAttr<?> getVirAttr(final String virSchemaName) {\n-        return null;\n-    }\n-\n-    @Override\n-    public List<? extends VirAttr<?>> getVirAttrs() {\n-        return Collections.emptyList();\n-    }\n-\n     @Override\n     public boolean add(final ExternalResource resource) {\n         return false;"},{"sha":"a5c1b9071093bd98560f87f113682415232939c1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttrUniqueValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrUniqueValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -60,7 +60,7 @@ public GPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAGPlainAttr.class);\n         this.attribute = (JPAGPlainAttr) attr;\n     }"},{"sha":"e5d0830d3732c9f5dcaea86638557ed60cc83707","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGPlainAttrValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -57,7 +57,7 @@ public GPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAGPlainAttr.class);\n         this.attribute = (JPAGPlainAttr) attr;\n     }"},{"sha":"47b8886b3bcdf8353d8eec099288b4b4798e5e6d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGVirAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGVirAttr.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-\n-@Entity\n-@Table(name = JPAGVirAttr.TABLE)\n-public class JPAGVirAttr extends AbstractVirAttr<Group> implements GVirAttr {\n-\n-    private static final long serialVersionUID = -1747430556914428649L;\n-\n-    public static final String TABLE = \"GVirAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAGroup owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public Group getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Group owner) {\n-        checkType(owner, JPAGroup.class);\n-        this.owner = (JPAGroup) owner;\n-    }\n-\n-}"},{"sha":"2fb84b59a61bfda80e8449f3c61521c61ad68922","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n@@ -61,7 +60,7 @@\n @Table(name = JPAGroup.TABLE)\n @Cacheable\n @GroupCheck\n-public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr, GVirAttr> implements Group {\n+public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr> implements Group {\n \n     private static final long serialVersionUID = -5281258853142421875L;\n \n@@ -88,10 +87,6 @@ public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr, GVirAttr> implem\n     @Valid\n     private List<JPAGDerAttr> derAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAGVirAttr> virAttrs = new ArrayList<>();\n-\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"group_id\"),\n@@ -204,23 +199,6 @@ public List<? extends GDerAttr> getDerAttrs() {\n         return derAttrs;\n     }\n \n-    @Override\n-    public boolean add(final GVirAttr attr) {\n-        checkType(attr, JPAGVirAttr.class);\n-        return virAttrs.add((JPAGVirAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final GVirAttr attr) {\n-        checkType(attr, JPAGVirAttr.class);\n-        return virAttrs.remove((JPAGVirAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends GVirAttr> getVirAttrs() {\n-        return virAttrs;\n-    }\n-\n     @Override\n     public ADynGroupMembership getADynMembership() {\n         return aDynMembership;"},{"sha":"de3931eb040d17e3d7b1767ac111fe760fe7eb40","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -82,7 +82,7 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     /**\n      * Should this resource enforce the mandatory constraints?\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -101,7 +101,7 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     /**\n      * Is this resource primary, for propagations?\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -110,32 +110,32 @@ public class JPAExternalResource extends AbstractAnnotatedEntity<String> impleme\n     /**\n      * Priority index for propagation ordering.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private Integer propagationPriority;\n \n     /**\n      * Generate random password for propagation, if not provided?\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n     private Integer randomPwdIfNotProvided;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n+    @NotNull\n     private TraceLevel createTraceLevel;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n+    @NotNull\n     private TraceLevel updateTraceLevel;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n+    @NotNull\n     private TraceLevel deleteTraceLevel;\n \n     @Enumerated(EnumType.STRING)\n-    @Column(nullable = false)\n+    @NotNull\n     private TraceLevel syncTraceLevel;\n \n     @ManyToOne(fetch = FetchType.EAGER)"},{"sha":"872fee7f033df4481e25a86b1f05e2988c8d5952","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMapping.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMapping.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -28,6 +28,7 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.IntMappingType;\n@@ -48,12 +49,10 @@ public class JPAMapping extends AbstractEntity<Long> implements Mapping {\n     @Id\n     private Long id;\n \n+    @NotNull\n     @OneToOne\n     private JPAProvision provision;\n \n-    /**\n-     * Attribute mappings.\n-     */\n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"mapping\")\n     private List<JPAMappingItem> items = new ArrayList<>();\n \n@@ -78,17 +77,6 @@ public void setProvision(final Provision provision) {\n         this.provision = (JPAProvision) provision;\n     }\n \n-    @Override\n-    public void setConnObjectKeyItem(final MappingItem item) {\n-        checkType(item, JPAMappingItem.class);\n-        this.addConnObjectKeyItem((JPAMappingItem) item);\n-    }\n-\n-    @Override\n-    public List<? extends MappingItem> getItems() {\n-        return items;\n-    }\n-\n     @Override\n     public boolean add(final MappingItem item) {\n         checkType(item, JPAMappingItem.class);\n@@ -101,6 +89,11 @@ public boolean remove(final MappingItem item) {\n         return items.remove((JPAMappingItem) item);\n     }\n \n+    @Override\n+    public List<? extends MappingItem> getItems() {\n+        return items;\n+    }\n+\n     @Override\n     public MappingItem getConnObjectKeyItem() {\n         return CollectionUtils.find(getItems(), new Predicate<MappingItem>() {\n@@ -112,6 +105,12 @@ public boolean evaluate(final MappingItem item) {\n         });\n     }\n \n+    @Override\n+    public void setConnObjectKeyItem(final MappingItem item) {\n+        checkType(item, JPAMappingItem.class);\n+        this.addConnObjectKeyItem((JPAMappingItem) item);\n+    }\n+\n     protected boolean addConnObjectKeyItem(final MappingItem connObjectKeyItem) {\n         if (IntMappingType.UserVirtualSchema == connObjectKeyItem.getIntMappingType()\n                 || IntMappingType.GroupVirtualSchema == connObjectKeyItem.getIntMappingType()"},{"sha":"c3ee73b2e1f01168326a8e271e85b0baa01ff1d7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAMappingItem.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAMappingItem.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -35,6 +35,7 @@\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -59,7 +60,7 @@ public class JPAMappingItem extends AbstractEntity<Long> implements MappingItem\n     @Column(nullable = true)\n     private String intAttrName;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Enumerated(EnumType.STRING)\n     private IntMappingType intMappingType;\n \n@@ -72,13 +73,13 @@ public class JPAMappingItem extends AbstractEntity<Long> implements MappingItem\n     /**\n      * Specify if the mapped target resource's field is nullable.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     private String mandatoryCondition;\n \n     /**\n      * Specify if the mapped target resource's field is the key.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -87,13 +88,13 @@ public class JPAMappingItem extends AbstractEntity<Long> implements MappingItem\n     /**\n      * Specify if the mapped target resource's field is the password.\n      */\n-    @Column(nullable = false)\n+    @NotNull\n     @Basic\n     @Min(0)\n     @Max(1)\n     private Integer password;\n \n-    @Column(nullable = false)\n+    @NotNull\n     @Enumerated(EnumType.STRING)\n     private MappingPurpose purpose;\n "},{"sha":"3906dfd246852bacc27f3afa3dd1c4af8eda3c34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -131,5 +131,4 @@ public void setMapping(final Mapping mapping) {\n         checkType(mapping, JPAMapping.class);\n         this.mapping = (JPAMapping) mapping;\n     }\n-\n }"},{"sha":"9882752c86071acfc299c188fba4315f418a8bef","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAPropagationTask.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAPropagationTask.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -75,6 +75,8 @@ public class JPAPropagationTask extends AbstractTask implements PropagationTask\n     @Enumerated(EnumType.STRING)\n     private AnyTypeKind anyTypeKind;\n \n+    private String anyType;\n+\n     private Long anyKey;\n \n     public JPAPropagationTask() {\n@@ -166,6 +168,16 @@ public void setAnyTypeKind(final AnyTypeKind anyTypeKind) {\n         this.anyTypeKind = anyTypeKind;\n     }\n \n+    @Override\n+    public String getAnyType() {\n+        return anyType;\n+    }\n+\n+    @Override\n+    public void setAnyType(final String anyType) {\n+        this.anyType = anyType;\n+    }\n+\n     @Override\n     public Long getAnyKey() {\n         return anyKey;"},{"sha":"86dfdfa9471a64b7296dd021e9ffabadf24e7525","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttrUniqueValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrUniqueValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -60,7 +60,7 @@ public UPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAUPlainAttr.class);\n         this.attribute = (JPAUPlainAttr) attr;\n     }"},{"sha":"2eca97cece2b42d72b1a4ff4b649539eca695eb3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUPlainAttrValue.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUPlainAttrValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -57,7 +57,7 @@ public UPlainAttr getAttr() {\n     }\n \n     @Override\n-    public void setAttr(final PlainAttr attr) {\n+    public void setAttr(final PlainAttr<?> attr) {\n         checkType(attr, JPAUPlainAttr.class);\n         this.attribute = (JPAUPlainAttr) attr;\n     }"},{"sha":"a6931cef98b1ee23743cfbd1c1384427f79579d2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUVirAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUVirAttr.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.user;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractVirAttr;\n-\n-@Entity\n-@Table(name = JPAUVirAttr.TABLE)\n-public class JPAUVirAttr extends AbstractVirAttr<User> implements UVirAttr {\n-\n-    private static final long serialVersionUID = 2943450934283989741L;\n-\n-    public static final String TABLE = \"UVirAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAUser owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public User getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final User owner) {\n-        checkType(owner, JPAUser.class);\n-        this.owner = (JPAUser) owner;\n-    }\n-\n-}"},{"sha":"9ba4fea3b485e870b741ddb4e9e60a16f641d2d1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -54,7 +54,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.JPASecurityQuestion;\n@@ -75,7 +74,7 @@\n @Entity\n @Table(name = JPAUser.TABLE)\n @Cacheable\n-public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> implements User {\n+public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr> implements User {\n \n     private static final long serialVersionUID = -3905046855521446823L;\n \n@@ -105,10 +104,6 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n     @Valid\n     private List<JPAUDerAttr> derAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAUVirAttr> virAttrs = new ArrayList<>();\n-\n     private String workflowId;\n \n     @Column(nullable = true)\n@@ -321,23 +316,6 @@ public List<? extends UDerAttr> getDerAttrs() {\n         return derAttrs;\n     }\n \n-    @Override\n-    public boolean add(final UVirAttr attr) {\n-        checkType(attr, JPAUVirAttr.class);\n-        return virAttrs.add((JPAUVirAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final UVirAttr attr) {\n-        checkType(attr, JPAUVirAttr.class);\n-        return virAttrs.remove((JPAUVirAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends UVirAttr> getVirAttrs() {\n-        return virAttrs;\n-    }\n-\n     @Override\n     public String getWorkflowId() {\n         return workflowId;"},{"sha":"e7f3a850c3c8ca56c0fdd476ff0423125ecbd700","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":62,"deletions":15,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -25,41 +25,81 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n \n public class ExternalResourceValidator extends AbstractValidator<ExternalResourceCheck, ExternalResource> {\n \n     private boolean isValid(final MappingItem item, final ConstraintValidatorContext context) {\n         if (StringUtils.isBlank(item.getExtAttrName())) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, item + \".extAttrName is null\")).\n+                    getTemplate(EntityViolationType.InvalidMapping, item + \" - extAttrName is null\")).\n                     addPropertyNode(\"extAttrName\").addConstraintViolation();\n \n             return false;\n         }\n \n         if (StringUtils.isBlank(item.getIntAttrName())) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, item + \".intAttrName is null\")).\n+                    getTemplate(EntityViolationType.InvalidMapping, item + \" - intAttrName is null\")).\n                     addPropertyNode(\"intAttrName\").addConstraintViolation();\n \n             return false;\n         }\n \n         if (item.getPurpose() == null) {\n             context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.InvalidMapping, item + \".purpose is null\")).\n+                    getTemplate(EntityViolationType.InvalidMapping, item + \" - purpose is null\")).\n                     addPropertyNode(\"purpose\").addConstraintViolation();\n \n             return false;\n         }\n \n+        if (item.getIntMappingType() == IntMappingType.AnyObjectVirtualSchema\n+                || item.getIntMappingType() == IntMappingType.GroupVirtualSchema\n+                || item.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n+\n+            if (item.getPurpose() != MappingPurpose.PROPAGATION) {\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidMapping,\n+                                \" - only \" + MappingPurpose.PROPAGATION.name() + \" allowed for virtual\")).\n+                        addPropertyNode(\"purpose\").addConstraintViolation();\n+\n+                return false;\n+            }\n+\n+            if (item.getMapping() == null) {\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidMapping,\n+                                \" - need to explicitly set mapping for further checks\")).\n+                        addPropertyNode(\"mapping\").addConstraintViolation();\n+\n+                return false;\n+            }\n+\n+            VirSchema schema = ApplicationContextProvider.getBeanFactory().getBean(VirSchemaDAO.class).\n+                    find(item.getIntAttrName());\n+            if (schema != null && schema.getProvision().equals(item.getMapping().getProvision())) {\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidMapping,\n+                                \" - no need to map virtual schema on linking resource\")).\n+                        addPropertyNode(\"intAttrName\").addConstraintViolation();\n+\n+                return false;\n+            }\n+        }\n+\n         return true;\n     }\n \n@@ -162,22 +202,29 @@ public boolean isValid(final ExternalResource resource, final ConstraintValidato\n             }\n         }\n \n+        final Set<AnyType> anyTypes = new HashSet<>();\n         final Set<String> objectClasses = new HashSet<>();\n-        boolean validMappings = CollectionUtils.matchesAll(resource.getProvisions(),\n-                new Predicate<Provision>() {\n-\n-                    @Override\n-                    public boolean evaluate(final Provision provision) {\n-                        if (provision.getObjectClass() != null) {\n-                            objectClasses.add(provision.getObjectClass().getObjectClassValue());\n-                        }\n-                        return isValid(provision.getAnyType(), provision.getMapping(), context);\n-                    }\n-                });\n+        boolean validMappings = CollectionUtils.matchesAll(resource.getProvisions(), new Predicate<Provision>() {\n+\n+            @Override\n+            public boolean evaluate(final Provision provision) {\n+                anyTypes.add(provision.getAnyType());\n+                if (provision.getObjectClass() != null) {\n+                    objectClasses.add(provision.getObjectClass().getObjectClassValue());\n+                }\n+                return isValid(provision.getAnyType(), provision.getMapping(), context);\n+            }\n+        });\n \n+        if (anyTypes.size() < resource.getProvisions().size()) {\n+            context.buildConstraintViolationWithTemplate(getTemplate(EntityViolationType.InvalidResource,\n+                    \"Each provision requires a different \" + AnyType.class.getSimpleName())).\n+                    addPropertyNode(\"provisions\").addConstraintViolation();\n+            return false;\n+        }\n         if (objectClasses.size() < resource.getProvisions().size()) {\n             context.buildConstraintViolationWithTemplate(getTemplate(EntityViolationType.InvalidResource,\n-                    \"Each provision requires a different ObjectClass\")).\n+                    \"Each provision requires a different\" + ObjectClass.class.getSimpleName())).\n                     addPropertyNode(\"provisions\").addConstraintViolation();\n             return false;\n         }"},{"sha":"2613a2290e0b19dd51a9ef938d57efc648e9a99a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrCheck.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrCheck.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -33,7 +33,7 @@\n @Documented\n public @interface PlainAttrCheck {\n \n-    String message() default \"{org.apache.syncope.syncope.validation.attr}\";\n+    String message() default \"{org.apache.syncope.core.persistence.validation.attr}\";\n \n     Class<?>[] groups() default {};\n "},{"sha":"f2c3c86bf83ef1cc199da2ae7af8784e625abbab","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/PlainAttrValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FPlainAttrValidator.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -43,7 +43,7 @@ public boolean isValid(final PlainAttr object, final ConstraintValidatorContext\n \n             if (!isValid) {\n                 LOG.error(\"Invalid values for attribute \" + object + \": \" + \"schema=\" + object.getSchema().getKey()\n-                        + \", \" + \"values={}\", object.getValuesAsStrings());\n+                        + \", values={}\", object.getValuesAsStrings());\n \n                 context.disableDefaultConstraintViolation();\n "},{"sha":"5ddee8cd18eead1743ea753bc8a75daad6e0f72c","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -337,31 +337,6 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"5ddee8cd18eead1743ea753bc8a75daad6e0f72c","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -337,31 +337,6 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"f4f2b07ca3a3bb23eb9dab9d71e403b289754ec5","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -384,31 +384,6 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n-\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_AVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AVirAttr\" pk-column-value=\"SEQ_AVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UVirAttr\" pk-column-value=\"SEQ_UVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGVirAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GVirAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GVirAttr\" pk-column-value=\"SEQ_GVirAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n   \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>"},{"sha":"ed1c035b0938861be292c19a402e216f293b4263","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -85,6 +85,12 @@ under the License.\n   <CPlainAttr id=\"12\" owner_id=\"1\" schema_name=\"tasks.interruptMaxRetries\"/>\n   <CPlainAttrValue id=\"12\" attribute_id=\"12\" longValue=\"20\"/>\n \n+  <!-- Return hashed password values when reading users -->\n+  <PlainSchema name=\"return.password.value\" type=\"Boolean\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"14\" owner_id=\"1\" schema_name=\"return.password.value\"/>\n+  <CPlainAttrValue id=\"14\" attribute_id=\"14\" booleanValue=\"0\"/>\n+\n   <AnyType name=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass name=\"BaseUser\"/>\n   <AnyType_AnyTypeClass anyType_name=\"USER\" anyTypeClass_name=\"BaseUser\"/>"},{"sha":"a2d4c62c706dd0280edc2825612cfe130e738b1b","filename":"core/persistence-jpa/src/main/resources/indexes.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -68,9 +68,5 @@ under the License.\n   <entry key=\"GDerAttr_owner_id_index\">CREATE INDEX GDerAttr_owner_id_index on GDerAttr(owner_id)</entry>\n   <entry key=\"ADerAttr_owner_id_index\">CREATE INDEX ADerAttr_owner_id_index on ADerAttr(owner_id)</entry>\n \n-  <entry key=\"UVirAttr_owner_id_index\">CREATE INDEX UVirAttr_owner_id_index on UVirAttr(owner_id)</entry>\n-  <entry key=\"GVirAttr_owner_id_index\">CREATE INDEX GVirAttr_owner_id_index on GVirAttr(owner_id)</entry>\n-  <entry key=\"AVirAttr_owner_id_index\">CREATE INDEX AVirAttr_owner_id_index on AVirAttr(owner_id)</entry>\n-\n   <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>\n </properties>"},{"sha":"943a94fec8b6c54a808bcaab2cc53bfe8bd60325","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyObjectTest.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyObjectTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n@@ -36,6 +37,9 @@\n @Transactional(\"Master\")\n public class AnyObjectTest extends AbstractTest {\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n@@ -68,6 +72,7 @@ public void find() {\n     @Test\n     public void save() {\n         AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n+        anyObject.setType(anyTypeDAO.find(\"PRINTER\"));\n         anyObject.setRealm(realmDAO.find(SyncopeConstants.ROOT_REALM));\n \n         anyObject = anyObjectDAO.save(anyObject);"},{"sha":"7d1dfea19ca17c148641a8d005fdeeef7be33aee","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -83,7 +83,7 @@ public static void unsetAuthContext() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(16, plainSchemaDAO.findAll().size());\n+        assertEquals(17, plainSchemaDAO.findAll().size());\n     }\n \n     @Test"},{"sha":"3cea9ab3ca21329c7f26de6e8f48c9c64bbe4306","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainAttrTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainAttrTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -118,7 +118,6 @@ public void saveWithEnum() throws ClassNotFoundException {\n         user.add(attribute);\n \n         Exception thrown = null;\n-\n         try {\n             attribute.add(\"A\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n         } catch (ValidationException e) {"},{"sha":"21636b74757953de4674c783b6168061bd8fcb52","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -47,7 +47,7 @@ public class PlainSchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<PlainSchema> schemas = plainSchemaDAO.findAll();\n-        assertEquals(43, schemas.size());\n+        assertEquals(44, schemas.size());\n     }\n \n     @Test"},{"sha":"0fc2a3ede37d5bced8d4b556fa2b86a3d0bf8077","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -259,6 +259,52 @@ public void saveInvalidProvision() {\n         resourceDAO.save(resource);\n     }\n \n+    @Test\n+    public void saveVirtualMapping() {\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n+        resource.setKey(\"ws-target-resource-virtual-mapping\");\n+        resource.setPropagationPriority(2);\n+        resource.setPropagationPrimary(true);\n+\n+        Provision provision = entityFactory.newEntity(Provision.class);\n+        provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n+        provision.setResource(resource);\n+        resource.add(provision);\n+\n+        Mapping mapping = entityFactory.newEntity(Mapping.class);\n+        mapping.setProvision(provision);\n+        provision.setMapping(mapping);\n+\n+        MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+        connObjectKey.setExtAttrName(\"username\");\n+        connObjectKey.setIntAttrName(\"fullname\");\n+        connObjectKey.setIntMappingType(IntMappingType.UserKey);\n+        connObjectKey.setPurpose(MappingPurpose.BOTH);\n+        mapping.setConnObjectKeyItem(connObjectKey);\n+\n+        MappingItem virtualMapItem = entityFactory.newEntity(MappingItem.class);\n+        virtualMapItem.setIntMappingType(IntMappingType.UserVirtualSchema);\n+        virtualMapItem.setIntAttrName(\"virtualReadOnly\");\n+        virtualMapItem.setExtAttrName(\"TEST\");\n+        virtualMapItem.setPurpose(MappingPurpose.BOTH);\n+        virtualMapItem.setMapping(mapping);\n+        mapping.add(virtualMapItem);\n+\n+        ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n+        resource.setConnector(connector);\n+\n+        try {\n+            resourceDAO.save(resource);\n+            fail();\n+        } catch (InvalidEntityException e) {\n+            assertNotNull(e);\n+        }\n+\n+        virtualMapItem.setPurpose(MappingPurpose.PROPAGATION);\n+        resourceDAO.save(resource);\n+    }\n+\n     @Test\n     public void saveWithGroupMappingType() {\n         ExternalResource resource = entityFactory.newEntity(ExternalResource.class);"},{"sha":"f39f06f4a28d51d043f5c24f8e41e55c756ad3dc","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -113,6 +113,7 @@ public void savePropagationTask() {\n         PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setAnyTypeKind(AnyTypeKind.USER);\n+        task.setAnyType(AnyTypeKind.USER.name());\n         task.setOperation(ResourceOperation.CREATE);\n         task.setConnObjectKey(\"one@two.com\");\n "},{"sha":"fd13cd67240419345947dd1119259852fec023c9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirAttrTest.java","status":"removed","additions":0,"deletions":118,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/13f96e06804f0574a72cf2d496cb2ac62f927847/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirAttrTest.java?ref=13f96e06804f0574a72cf2d496cb2ac62f927847","patch":"@@ -1,118 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.inner;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional(\"Master\")\n-public class VirAttrTest extends AbstractTest {\n-\n-    @Autowired\n-    private VirAttrDAO virAttrDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Test\n-    public void findAll() {\n-        List<UVirAttr> list = virAttrDAO.findAll(UVirAttr.class);\n-        assertEquals(\"did not get expected number of derived attributes \", 1, list.size());\n-    }\n-\n-    @Test\n-    public void findById() {\n-        UVirAttr attribute = virAttrDAO.find(100L, UVirAttr.class);\n-        assertNotNull(\"did not find expected attribute schema\", attribute);\n-    }\n-\n-    @Test\n-    public void saveUVirAttribute() {\n-        VirSchema virSchema = virSchemaDAO.find(\"virtualdata\");\n-        assertNotNull(virSchema);\n-\n-        User owner = userDAO.find(3L);\n-        assertNotNull(\"did not get expected user\", owner);\n-\n-        UVirAttr virAttr = entityFactory.newEntity(UVirAttr.class);\n-        virAttr.setOwner(owner);\n-        virAttr.setSchema(virSchema);\n-\n-        virAttr = virAttrDAO.save(virAttr);\n-\n-        UVirAttr actual = virAttrDAO.find(virAttr.getKey(), UVirAttr.class);\n-        assertNotNull(\"expected save to work\", actual);\n-        assertEquals(virAttr, actual);\n-    }\n-\n-    @Test\n-    public void saveGVirAttribute() {\n-        VirSchema virSchema = virSchemaDAO.find(\"rvirtualdata\");\n-        assertNotNull(virSchema);\n-\n-        Group owner = groupDAO.find(3L);\n-        assertNotNull(\"did not get expected membership\", owner);\n-\n-        GVirAttr virAttr = entityFactory.newEntity(GVirAttr.class);\n-        virAttr.setOwner(owner);\n-        virAttr.setSchema(virSchema);\n-\n-        virAttr = virAttrDAO.save(virAttr);\n-\n-        GVirAttr actual = virAttrDAO.find(virAttr.getKey(), GVirAttr.class);\n-        assertNotNull(\"expected save to work\", actual);\n-        assertEquals(virAttr, actual);\n-    }\n-\n-    @Test\n-    public void delete() {\n-        UVirAttr attribute = virAttrDAO.find(100L, UVirAttr.class);\n-        String attributeSchemaName = attribute.getSchema().getKey();\n-\n-        virAttrDAO.delete(attribute.getKey(), UVirAttr.class);\n-\n-        UVirAttr actual = virAttrDAO.find(1000L, UVirAttr.class);\n-        assertNull(\"delete did not work\", actual);\n-\n-        VirSchema attributeSchema = virSchemaDAO.find(attributeSchemaName);\n-        assertNotNull(\"user virtual attribute schema deleted \" + \"when deleting values\", attributeSchema);\n-    }\n-}"},{"sha":"19193dd19778dae49fddc430b5956498564f0664","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FVirSchemaTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -27,9 +27,13 @@\n import java.util.List;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -40,10 +44,13 @@ public class VirSchemaTest extends AbstractTest {\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     @Test\n     public void findAll() {\n         List<VirSchema> list = virSchemaDAO.findAll();\n-        assertEquals(4, list.size());\n+        assertEquals(3, list.size());\n     }\n \n     @Test\n@@ -54,15 +61,22 @@ public void findByName() {\n \n     @Test\n     public void save() {\n-        VirSchema virtualAttributeSchema = entityFactory.newEntity(VirSchema.class);\n-        virtualAttributeSchema.setKey(\"virtual\");\n-        virtualAttributeSchema.setReadonly(true);\n+        ExternalResource csv = resourceDAO.find(\"resource-csv\");\n+        Provision provision = csv.getProvision(ObjectClass.ACCOUNT);\n+        assertNotNull(provision);\n+\n+        VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n+        virSchema.setKey(\"virtual\");\n+        virSchema.setProvision(provision);\n+        virSchema.setReadonly(true);\n+        virSchema.setExtAttrName(\"EXT_ATTR\");\n \n-        virSchemaDAO.save(virtualAttributeSchema);\n+        virSchemaDAO.save(virSchema);\n \n         VirSchema actual = virSchemaDAO.find(\"virtual\");\n         assertNotNull(\"expected save to work\", actual);\n         assertTrue(actual.isReadonly());\n+        assertEquals(\"EXT_ATTR\", actual.getExtAttrName());\n     }\n \n     @Test"},{"sha":"2a8a090ff373ce950a89c40d4f4b8dedf0e631b8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -38,8 +38,10 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -75,6 +77,9 @@ public class ResourceTest extends AbstractTest {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Test\n     public void createWithPasswordPolicy() {\n         final String resourceName = \"resourceWithPasswordPolicy\";\n@@ -269,16 +274,20 @@ public void emptyMapping() {\n             itemKeys.add(item.getKey());\n         }\n \n-        ldap.remove(ldap.getProvision(anyTypeDAO.findGroup()));\n+        Provision groupProvision = ldap.getProvision(anyTypeDAO.findGroup());\n+        ldap.remove(groupProvision);\n+        for (VirSchema schema : virSchemaDAO.findByProvision(groupProvision)) {\n+            virSchemaDAO.delete(schema.getKey());\n+        }\n \n         // need to avoid any class not defined in this Maven module\n         ldap.getPropagationActionsClassNames().clear();\n \n         resourceDAO.save(ldap);\n         resourceDAO.flush();\n \n-        for (Long itemId : itemKeys) {\n-            assertNull(entityManager().find(JPAMappingItem.class, itemId));\n+        for (Long itemKey : itemKeys) {\n+            assertNull(entityManager().find(JPAMappingItem.class, itemKey));\n         }\n     }\n "},{"sha":"53f88d8ea19bfa2d9dbe9552cd17db603ce88315","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -92,6 +92,7 @@ public void save() {\n         PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n         task.setResource(resource);\n         task.setAnyTypeKind(AnyTypeKind.USER);\n+        task.setAnyType(AnyTypeKind.USER.name());\n         task.setOperation(ResourceOperation.CREATE);\n         task.setConnObjectKey(\"one@two.com\");\n "},{"sha":"bd683131a1de87f9b1ad04aa42be889b1bdf89c4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/VirSchemaTest.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FVirSchemaTest.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class VirSchemaTest extends AbstractTest {\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Test\n+    public void deal() {\n+        Provision provision = resourceDAO.findProvision(15L);\n+        assertNotNull(provision);\n+        assertTrue(virSchemaDAO.findByProvision(provision).isEmpty());\n+\n+        VirSchema virSchema = entityFactory.newEntity(VirSchema.class);\n+        virSchema.setKey(\"vSchema\");\n+        virSchema.setReadonly(true);\n+        virSchema.setExtAttrName(\"EXT_ATTR\");\n+        virSchema.setProvision(provision);\n+\n+        virSchemaDAO.save(virSchema);\n+        virSchemaDAO.flush();\n+\n+        virSchema = virSchemaDAO.find(\"vSchema\");\n+        assertNotNull(\"expected save to work\", virSchema);\n+        assertTrue(virSchema.isReadonly());\n+        assertEquals(\"EXT_ATTR\", virSchema.getExtAttrName());\n+\n+        provision = resourceDAO.findProvision(15L);\n+        assertNotNull(provision);\n+        assertFalse(virSchemaDAO.findByProvision(provision).isEmpty());\n+        assertTrue(virSchemaDAO.findByProvision(provision).contains(virSchema));\n+\n+        MappingItem item = virSchema.asLinkingMappingItem();\n+        assertNotNull(item);\n+        assertEquals(IntMappingType.UserVirtualSchema, item.getIntMappingType());\n+        assertEquals(virSchema.getKey(), item.getIntAttrName());\n+    }\n+}"},{"sha":"d1fde9ea83c36fc6358e4f1e95f7ba552fdbd9c7","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":15,"deletions":22,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -84,7 +84,13 @@ under the License.\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <CPlainAttr id=\"12\" owner_id=\"1\" schema_name=\"tasks.interruptMaxRetries\"/>\n   <CPlainAttrValue id=\"12\" attribute_id=\"12\" longValue=\"20\"/>\n-\n+  \n+  <!-- Return hashed password values when reading users -->\n+  <PlainSchema name=\"return.password.value\" type=\"Boolean\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"14\" owner_id=\"1\" schema_name=\"return.password.value\"/>\n+  <CPlainAttrValue id=\"14\" attribute_id=\"14\" booleanValue=\"0\"/>\n+  \n   <!-- For usage with admin console -->\n   <PlainSchema name=\"admin.user.layout\" type=\"String\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -326,9 +332,6 @@ under the License.\n   <DerSchema name=\"cn\" expression=\"surname + ', ' + firstname\" anyTypeClass_name=\"minimal user\"/>\n   <DerSchema name=\"noschema\" expression=\"surname + ', ' + notfound\" anyTypeClass_name=\"other\"/>\n \n-  <VirSchema name=\"virtualdata\" anyTypeClass_name=\"minimal user\"/>\n-  <VirSchema name=\"virtualReadOnly\" READONLY=\"1\"  anyTypeClass_name=\"minimal user\"/>\n-\n   <PlainSchema name=\"icon\" type=\"String\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>                \n   <PlainSchema name=\"show\" type=\"Boolean\" anyTypeClass_name=\"minimal group\"\n@@ -347,8 +350,6 @@ under the License.\n   <DerSchema name=\"rderToBePropagated\" expression=\"rderived_sx + '-' + rderived_dx\"\n              anyTypeClass_name=\"minimal group\"/>\n \n-  <VirSchema name=\"rvirtualdata\" anyTypeClass_name=\"minimal group\"/>\n-\n   <DerSchema name=\"rderivedschema\" expression=\"rderived_sx + '-' + rderived_dx\"  anyTypeClass_name=\"minimal group\"/>\n \n   <PlainSchema name=\"subscriptionDate\" type=\"Date\" anyTypeClass_name=\"generic membership\"\n@@ -364,8 +365,6 @@ under the License.\n   <DerSchema name=\"mderiveddata\" expression=\"mderived_sx + '-' + mderived_dx\"/>\n   <DerSchema name=\"mderToBePropagated\" expression=\"mderived_sx + '-' + mderived_dx\" \n              anyTypeClass_name=\"generic membership\"/>\n-\n-  <VirSchema name=\"mvirtualdata\"/>\n         \n   <PlainSchema name=\"model\" type=\"String\" anyTypeClass_name=\"minimal printer\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n@@ -444,8 +443,6 @@ under the License.\n   <UPlainAttrValue id=\"36\" attribute_id=\"125\" stringValue=\"vivaldi@syncope.org\"/>\n   <UPlainAttr id=\"126\" owner_id=\"3\" schema_name=\"type\"/>\n   <UPlainAttrValue id=\"37\" attribute_id=\"126\" stringValue=\"F\"/>\n-    \n-  <UVirAttr id=\"100\" schema_name=\"virtualdata\" owner_id=\"3\"/>\n   \n   <UDerAttr id=\"100\" schema_name=\"cn\" owner_id=\"3\"/>\n   <UDerAttr id=\"101\" schema_name=\"cn\" owner_id=\"1\"/>\n@@ -485,8 +482,6 @@ under the License.\n \n   <GDerAttr id=\"103\" owner_id=\"1\" schema_name=\"rderToBePropagated\"/>    \n \n-  <GVirAttr id=\"98\" owner_id=\"4\" schema_name=\"rvirtualdata\"/>\n-\n   <ConnInstance id=\"100\" displayName=\"ConnInstance100\"\n                 location=\"${connid.location}\"\n                 bundleName=\"net.tirasa.connid.bundles.soap\"\n@@ -763,7 +758,7 @@ under the License.\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   <MappingItem id=\"110\" extAttrName=\"name\" mapping_id=\"1\"\n                intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\" mandatoryCondition=\"type == 'F'\"\n-               connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n+               connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"111\" extAttrName=\"fullname\" mapping_id=\"1\"\n                intAttrName=\"cn\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n@@ -892,16 +887,16 @@ under the License.\n   <MappingItem id=\"318\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n                extAttrName=\"mail\" intAttrName=\"userId\" intMappingType=\"UserPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n-  <MappingItem id=\"319\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n-               extAttrName=\"givenname\" intAttrName=\"virtualReadOnly\" intMappingType=\"UserVirtualSchema\"\n-               mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"320\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n                extAttrName=\"registeredAddress\" intAttrName=\"obscure\" intMappingType=\"UserPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   <MappingItem id=\"321\" connObjectKey=\"0\" password=\"0\" mapping_id=\"11\"\n                extAttrName=\"jpegPhoto\" intAttrName=\"photo\" intMappingType=\"UserPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n         \n+  <VirSchema name=\"virtualReadOnly\" READONLY=\"1\" anyTypeClass_name=\"minimal user\"\n+             provision_id=\"11\" extAttrName=\"givenname\"/>\n+\n   <Provision id=\"20\" resource_name=\"resource-ldap\" anyType_name=\"GROUP\" objectClass=\"__GROUP__\"/>\n   <Mapping id=\"20\" provision_id=\"20\"\n            connObjectLink=\"&apos;cn=&apos; + name + &apos;,ou=groups,o=isp&apos;\"/>\n@@ -914,10 +909,9 @@ under the License.\n   <MappingItem id=\"3\" connObjectKey=\"0\" password=\"0\" mapping_id=\"20\"\n                extAttrName=\"description\" intAttrName=\"title\" intMappingType=\"GroupPlainSchema\"\n                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n-  <MappingItem id=\"4\" extAttrName=\"businessCategory\" mapping_id=\"20\"\n-               intAttrName=\"rvirtualdata\" intMappingType=\"GroupVirtualSchema\" mandatoryCondition=\"false\"\n-               connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n   \n+  <VirSchema name=\"rvirtualdata\" anyTypeClass_name=\"minimal group\" provision_id=\"20\" extAttrName=\"businessCategory\"/>\n+\n   <Provision id=\"16\" resource_name=\"resource-db-sync\" anyType_name=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"16\" provision_id=\"16\"/>\n   <MappingItem id=\"322\" connObjectKey=\"0\" mapping_id=\"16\"\n@@ -944,10 +938,9 @@ under the License.\n   <MappingItem id=\"331\" mapping_id=\"17\" connObjectKey=\"1\" password=\"0\"\n                extAttrName=\"id\" intMappingType=\"UserKey\" \n                mandatoryCondition=\"true\" purpose=\"BOTH\"/>\n-  <MappingItem id=\"332\" mapping_id=\"17\" connObjectKey=\"0\" password=\"0\" \n-               extAttrName=\"USERNAME\" intAttrName=\"virtualdata\" intMappingType=\"UserVirtualSchema\"\n-               mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n                 \n+  <VirSchema name=\"virtualdata\" anyTypeClass_name=\"minimal user\" provision_id=\"17\" extAttrName=\"USERNAME\"/>\n+  \n   <Provision id=\"18\" resource_name=\"ws-target-resource-timeout\" anyType_name=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"18\" provision_id=\"18\"/>\n   <MappingItem id=\"333\" mapping_id=\"18\" connObjectKey=\"1\" password=\"0\""},{"sha":"cc36a9d26361e5dd0a14659779d6aa141a22d916","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -71,6 +71,12 @@ under the License.\n   <CPlainAttr id=\"12\" owner_id=\"1\" schema_name=\"tasks.interruptMaxRetries\"/>\n   <CPlainAttrValue id=\"12\" attribute_id=\"12\" longValue=\"20\"/>\n \n+  <!-- Return hashed password values when reading users -->\n+  <PlainSchema name=\"return.password.value\" type=\"Boolean\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"14\" owner_id=\"1\" schema_name=\"return.password.value\"/>\n+  <CPlainAttrValue id=\"14\" attribute_id=\"14\" booleanValue=\"0\"/>\n+  \n   <AnyType name=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass name=\"BaseUser\"/>\n   <AnyType_AnyTypeClass anyType_name=\"USER\" anyTypeClass_name=\"BaseUser\"/>"},{"sha":"ce8adba2004b5f6ddcf8d96374ea2cf208b59dda","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/Connector.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnector.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -59,10 +59,11 @@ public interface Connector {\n      * @param propagationAttempted if creation is actually performed (based on connector instance's capabilities)\n      * @return Uid for created object\n      */\n-    Uid create(ObjectClass objectClass,\n+    Uid create(\n+            ObjectClass objectClass,\n             Set<Attribute> attrs,\n             OperationOptions options,\n-            Set<String> propagationAttempted);\n+            Boolean[] propagationAttempted);\n \n     /**\n      * Update user / group on a connector instance.\n@@ -71,14 +72,15 @@ Uid create(ObjectClass objectClass,\n      * @param uid user to be updated\n      * @param attrs attributes for update\n      * @param options ConnId's OperationOptions\n-     * @param propagationAttempted if update is actually performed (based on connector instance's capabilities)\n+     * @param propagationAttempted if creation is actually performed (based on connector instance's capabilities)\n      * @return Uid for updated object\n      */\n-    Uid update(ObjectClass objectClass,\n+    Uid update(\n+            ObjectClass objectClass,\n             Uid uid,\n             Set<Attribute> attrs,\n             OperationOptions options,\n-            Set<String> propagationAttempted);\n+            Boolean[] propagationAttempted);\n \n     /**\n      * Delete user / group on a connector instance.\n@@ -88,8 +90,11 @@ Uid update(ObjectClass objectClass,\n      * @param options ConnId's OperationOptions\n      * @param propagationAttempted if deletion is actually performed (based on connector instance's capabilities)\n      */\n-    void delete(ObjectClass objectClass,\n-            Uid uid, OperationOptions options, Set<String> propagationAttempted);\n+    void delete(\n+            ObjectClass objectClass,\n+            Uid uid,\n+            OperationOptions options,\n+            Boolean[] propagationAttempted);\n \n     /**\n      * Fetches all remote objects (for use during full reconciliation).\n@@ -169,14 +174,16 @@ void search(\n      * query results\n      * @param orderBy the sort keys which should be used for ordering the {@link ConnectorObject} returned by\n      * search request\n+     * @param mapItems mapping items\n      */\n     void search(\n             ObjectClass objectClass,\n             Filter filter,\n             ResultsHandler handler,\n             int pageSize,\n             String pagedResultsCookie,\n-            List<OrderByClause> orderBy);\n+            List<OrderByClause> orderBy,\n+            Iterator<? extends MappingItem> mapItems);\n \n     /**\n      * Read attribute for a given connector object.\n@@ -238,5 +245,5 @@ void search(\n      * @return options for requesting all mapped connector attributes\n      * @see OperationOptions\n      */\n-    OperationOptions getOperationOptions(Collection<? extends MappingItem> mapItems);\n+    OperationOptions getOperationOptions(Iterator<? extends MappingItem> mapItems);\n }"},{"sha":"2e312048dde042d089159258924ab44015dfec9c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/VirAttrHandler.java","status":"modified","additions":14,"deletions":38,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,56 +18,32 @@\n  */\n package org.apache.syncope.core.provisioning.api;\n \n-import java.util.Collection;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n+import java.util.List;\n+import java.util.Map;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface VirAttrHandler {\n \n     /**\n-     * Create and add virtual attributes to any.\n+     * Query external resource (or cache, if configured) associated to the given any for values associated to the given\n+     * virtual schema.\n      *\n-     * @param any any\n-     * @param vAttrs virtual attributes to be added.\n-     */\n-    void createVirtual(Any any, Collection<AttrTO> vAttrs);\n-\n-    /**\n-     * Update virtual attributes to any.\n-     *\n-     * @param any\n-     * @param vAttrs virtual attributes to be updated.\n-     * @return operations to be performed on external resources for virtual attributes changes\n-     */\n-    PropagationByResource updateVirtual(Any any, Collection<AttrPatch> vAttrs);\n-\n-    /**\n-     * Update virtual attributes to any identified by the given {@code key}.\n-     *\n-     * @param key any key\n-     * @param anyTypeKind type kind\n-     * @param vAttrs virtual attributes to be updated.\n-     * @return operations to be performed on external resources for virtual attributes changes\n+     * @param any any object\n+     * @param schema virtual schema\n+     * @return virtual attribute values, either for local cache or external resource, if resource is owned by the given\n+     * any and associated to the given virtual schema; empty list otherwise.\n      */\n-    PropagationByResource updateVirtual(Long key, AnyTypeKind anyTypeKind, Collection<AttrPatch> vAttrs);\n-\n-    VirSchema getVirSchema(String virSchemaName);\n+    List<String> getValues(Any<?, ?> any, VirSchema schema);\n \n     /**\n-     * Query connected external resources for values to populated virtual attributes associated with the given owner.\n+     * Query external resources (or cache, if configured) associated to the given any for values associated to all\n+     * {@link VirSchema} instances in the {@link org.apache.syncope.core.persistence.api.entity.AnyTypeClass}\n+     * associated to the given any.\n      *\n      * @param any any object\n+     * @return virtual attribute values, either for local cache or external resources\n      */\n-    void retrieveVirAttrValues(Any<?, ?, ?> any);\n-\n-    void updateOnResourcesIfMappingMatches(\n-            Any<?, ?, ?> any, String schemaKey, Iterable<? extends ExternalResource> resources,\n-            IntMappingType mappingType, PropagationByResource propByRes);\n+    Map<VirSchema, List<String>> getValues(Any<?, ?> any);\n \n }"},{"sha":"93b9c63b9e6849a2503215bc407e06d4bbdd16cb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java","status":"modified","additions":15,"deletions":21,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.api.cache;\n \n-import java.util.Collections;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Date;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.List;\n \n /**\n  * Cache entry value.\n@@ -33,7 +31,7 @@ public class VirAttrCacheValue {\n     /**\n      * Virtual attribute values.\n      */\n-    private final Map<String, Set<String>> values;\n+    private final List<String> values;\n \n     /**\n      * Entry creation date.\n@@ -48,11 +46,17 @@ public class VirAttrCacheValue {\n     public VirAttrCacheValue() {\n         this.creationDate = new Date();\n         this.lastAccessDate = new Date();\n-        this.values = new HashMap<>();\n+        this.values = new ArrayList<>();\n     }\n \n-    public void setResourceValues(final String resourceName, final Set<String> cached) {\n-        this.values.put(resourceName, cached);\n+    public void setValues(final Collection<Object> values) {\n+        this.values.clear();\n+\n+        if (values != null) {\n+            for (Object value : values) {\n+                this.values.add(value.toString());\n+            }\n+        }\n     }\n \n     public Date getCreationDate() {\n@@ -63,18 +67,8 @@ public void forceExpiring() {\n         creationDate = new Date(0);\n     }\n \n-    public Set<String> getValues(final String resourceName) {\n-        return values.get(resourceName);\n-    }\n-\n-    public Set<String> getValues() {\n-        final Set<String> res = new HashSet<>();\n-\n-        for (Set<String> value : values.values()) {\n-            res.addAll(value);\n-        }\n-\n-        return Collections.unmodifiableSet(res);\n+    public List<String> getValues() {\n+        return values;\n     }\n \n     public Date getLastAccessDate() {"},{"sha":"020a6aeb434a1a701b6c1293d2b53da2a80a259e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ConfigurationDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConfigurationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConfigurationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FConfigurationDataBinder.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,16 +18,16 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n+import java.util.List;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n \n public interface ConfigurationDataBinder {\n \n     AttrTO getAttrTO(CPlainAttr attr);\n \n-    ConfTO getConfTO(Conf conf);\n+    List<AttrTO> getConfTO(Conf conf);\n \n     CPlainAttr getAttribute(AttrTO attributeTO);\n "},{"sha":"9592a3feb3d9363d434367ae58eec8f08985c44b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -25,6 +25,8 @@\n \n public interface UserDataBinder {\n \n+    UserTO returnUserTO(UserTO userTO);\n+\n     UserTO getAuthenticatedUserTO();\n \n     UserTO getUserTO(String username);"},{"sha":"dd87d19834ee3015a0641dddbfd1a5b54dd90d50","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.List;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -75,7 +74,7 @@ List<PropagationTask> getUserCreateTasks(\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param enable whether any object should be enabled or not, may be null to leave unchanged\n      * @param propByRes operation to be performed per resource\n-     * @param vAttrs virtual attributes patches\n+     * @param vAttrs virtual attributes to be set\n      * @param noPropResourceNames external resource names not to be considered for propagation\n      * @return list of propagation tasks\n      */\n@@ -85,7 +84,7 @@ List<PropagationTask> getUpdateTasks(\n             boolean changePwd,\n             Boolean enable,\n             PropagationByResource propByRes,\n-            Collection<AttrPatch> vAttrs,\n+            Collection<AttrTO> vAttrs,\n             Collection<String> noPropResourceNames);\n \n     /**"},{"sha":"c06a05f6c9d61c150c53e24d0bf03d00fe46a588","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/PushActions.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -37,7 +37,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeAssign(\n+    <A extends Any<?, ?>> A beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -50,7 +50,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeProvision(\n+    <A extends Any<?, ?>> A beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -63,7 +63,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeUpdate(\n+    <A extends Any<?, ?>> A beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -76,7 +76,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeLink(\n+    <A extends Any<?, ?>> A beforeLink(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -89,7 +89,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeUnlink(\n+    <A extends Any<?, ?>> A beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -102,7 +102,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeUnassign(\n+    <A extends Any<?, ?>> A beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -115,7 +115,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeDeprovision(\n+    <A extends Any<?, ?>> A beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -128,7 +128,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> A beforeDelete(\n+    <A extends Any<?, ?>> A beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -142,7 +142,7 @@ public interface PushActions extends ProvisioningActions {\n      * @param error error being reported\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> void onError(\n+    <A extends Any<?, ?>> void onError(\n             ProvisioningProfile<?, ?> profile,\n             A any,\n             ProvisioningResult result,\n@@ -157,7 +157,7 @@ public interface PushActions extends ProvisioningActions {\n      * @param result operation result.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?, ?>> void after(\n+    <A extends Any<?, ?>> void after(\n             ProvisioningProfile<?, ?> profile,\n             A any,\n             ProvisioningResult result) throws JobExecutionException;"},{"sha":"6c2be32098635ef540e0937f914cd4883f9300cc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":18,"deletions":11,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,8 +21,8 @@\n import java.io.File;\n import java.net.URI;\n import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n import java.util.concurrent.Future;\n@@ -31,6 +31,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n@@ -168,12 +169,12 @@ public Uid create(\n             final ObjectClass objectClass,\n             final Set<Attribute> attrs,\n             final OperationOptions options,\n-            final Set<String> propagationAttempted) {\n+            final Boolean[] propagationAttempted) {\n \n         Uid result = null;\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.CREATE)) {\n-            propagationAttempted.add(\"create\");\n+            propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.create(connector, objectClass, attrs, options);\n             try {\n@@ -203,12 +204,12 @@ public Uid update(\n             final Uid uid,\n             final Set<Attribute> attrs,\n             final OperationOptions options,\n-            final Set<String> propagationAttempted) {\n+            final Boolean[] propagationAttempted) {\n \n         Uid result = null;\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.UPDATE)) {\n-            propagationAttempted.add(\"update\");\n+            propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.update(connector, objectClass, uid, attrs, options);\n \n@@ -239,10 +240,10 @@ public void delete(\n             final ObjectClass objectClass,\n             final Uid uid,\n             final OperationOptions options,\n-            final Set<String> propagationAttempted) {\n+            final Boolean[] propagationAttempted) {\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.DELETE)) {\n-            propagationAttempted.add(\"delete\");\n+            propagationAttempted[0] = true;\n \n             Future<Uid> future = asyncFacade.delete(connector, objectClass, uid, options);\n \n@@ -544,7 +545,8 @@ public void search(\n             final ResultsHandler handler,\n             final int pageSize,\n             final String pagedResultsCookie,\n-            final List<OrderByClause> orderBy) {\n+            final List<OrderByClause> orderBy,\n+            final Iterator<? extends MappingItem> mapItems) {\n \n         OperationOptionsBuilder builder = new OperationOptionsBuilder().setPageSize(pageSize);\n         if (pagedResultsCookie != null) {\n@@ -558,6 +560,8 @@ public SortKey transform(final OrderByClause clause) {\n             }\n         }, new ArrayList<SortKey>(orderBy.size())));\n \n+        builder.setAttributesToGet(getOperationOptions(mapItems).getAttributesToGet());\n+\n         search(objectClass, filter, handler, builder.build());\n     }\n \n@@ -567,7 +571,7 @@ public ConnInstance getActiveConnInstance() {\n     }\n \n     @Override\n-    public OperationOptions getOperationOptions(final Collection<? extends MappingItem> mapItems) {\n+    public OperationOptions getOperationOptions(final Iterator<? extends MappingItem> mapItems) {\n         // -------------------------------------\n         // Ask just for mapped attributes\n         // -------------------------------------\n@@ -578,8 +582,11 @@ public OperationOptions getOperationOptions(final Collection<? extends MappingIt\n         attrsToGet.add(Uid.NAME);\n         attrsToGet.add(OperationalAttributes.ENABLE_NAME);\n \n-        for (MappingItem item : mapItems) {\n-            attrsToGet.add(item.getExtAttrName());\n+        while (mapItems.hasNext()) {\n+            MappingItem mapItem = mapItems.next();\n+            if (mapItem.getPurpose() != MappingPurpose.NONE) {\n+                attrsToGet.add(mapItem.getExtAttrName());\n+            }\n         }\n \n         builder.setAttributesToGet(attrsToGet);"},{"sha":"ffecdb9c5e75c4792c4cf116ebc5e16bb3208079","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -113,24 +113,6 @@ public Pair<Long, List<PropagationStatus>> update(\n                 updated.getPropByRes(),\n                 anyObjectPatch.getVirAttrs(),\n                 excludedResources);\n-        if (tasks.isEmpty()) {\n-            // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                    updated.getResult(),\n-                    AnyTypeKind.ANY_OBJECT,\n-                    anyObjectPatch.getVirAttrs());\n-            tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getUpdateTasks(\n-                            AnyTypeKind.ANY_OBJECT,\n-                            updated.getResult(),\n-                            false,\n-                            null,\n-                            updated.getPropByRes(),\n-                            anyObjectPatch.getVirAttrs(),\n-                            null)\n-                    : Collections.<PropagationTask>emptyList());\n-        }\n-\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"9e3d566c44d933eb975269d7eef046dde37e29f5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -145,24 +145,6 @@ public Pair<Long, List<PropagationStatus>> update(\n                 updated.getPropByRes(),\n                 groupPatch.getVirAttrs(),\n                 excludedResources);\n-        if (tasks.isEmpty()) {\n-            // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                    updated.getResult(),\n-                    AnyTypeKind.GROUP,\n-                    groupPatch.getVirAttrs());\n-            tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getUpdateTasks(\n-                            AnyTypeKind.GROUP,\n-                            updated.getResult(),\n-                            false,\n-                            null,\n-                            updated.getPropByRes(),\n-                            groupPatch.getVirAttrs(),\n-                            excludedResources)\n-                    : Collections.<PropagationTask>emptyList());\n-        }\n-\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"54244867cea54d9ba04a26dea82c8a551cdf6a3e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":13,"deletions":33,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -120,25 +120,13 @@ public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch) {\n         WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.update(userPatch);\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n-        if (tasks.isEmpty()) {\n-            // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n-                    updated.getResult().getKey().getKey(),\n-                    AnyTypeKind.USER,\n-                    userPatch.getVirAttrs());\n-            if (!propByResVirAttr.isEmpty()) {\n-                tasks.addAll(propagationManager.getUserUpdateTasks(updated, false, null));\n-            }\n-        }\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n-                getBean(PropagationReporter.class);\n-        if (!tasks.isEmpty()) {\n-            try {\n-                taskExecutor.execute(tasks, propagationReporter);\n-            } catch (PropagationException e) {\n-                LOG.error(\"Error propagation primary resource\", e);\n-                propagationReporter.onPrimaryResourceFailure(tasks);\n-            }\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n         return new ImmutablePair<>(updated.getResult().getKey().getKey(), propagationReporter.getStatuses());\n@@ -279,17 +267,16 @@ public Pair<Long, List<PropagationStatus>> suspend(final StatusPatch statusPatch\n     }\n \n     protected List<PropagationStatus> propagateStatus(final StatusPatch statusPatch) {\n-        Collection<String> noPropResourceNames = CollectionUtils.removeAll(\n-                userDAO.findAllResourceNames(userDAO.find(statusPatch.getKey())), statusPatch.getResources());\n-\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.UPDATE, statusPatch.getResources());\n         List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n                 AnyTypeKind.USER,\n                 statusPatch.getKey(),\n                 false,\n                 statusPatch.getType() != StatusPatchType.SUSPEND,\n+                propByRes,\n                 null,\n-                null,\n-                noPropResourceNames);\n+                null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -300,7 +287,6 @@ protected List<PropagationStatus> propagateStatus(final StatusPatch statusPatch)\n         }\n \n         return propReporter.getStatuses();\n-\n     }\n \n     @Override\n@@ -391,16 +377,10 @@ public void requestPasswordReset(final Long key) {\n \n     @Override\n     public void confirmPasswordReset(final Long key, final String token, final String password) {\n-        uwfAdapter.confirmPasswordReset(key, token, password);\n+        WorkflowResult<Pair<UserPatch, Boolean>> updated = uwfAdapter.confirmPasswordReset(key, token, password);\n \n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(key);\n-        userPatch.setPassword(new PasswordPatch.Builder().value(password).build());\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                new WorkflowResult<Pair<UserPatch, Boolean>>(\n-                        new ImmutablePair<UserPatch, Boolean>(userPatch, null), null, \"confirmPasswordReset\"),\n-                true, null);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"57634495db6403e9d56b8da160fc41e6be1fa089","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":70,"deletions":286,"changes":356,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -19,34 +19,19 @@\n package org.apache.syncope.core.provisioning.java;\n \n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n-import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -68,29 +53,16 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-@Transactional(rollbackFor = { Throwable.class })\n public class VirAttrHandlerImpl implements VirAttrHandler {\n \n     private static final Logger LOG = LoggerFactory.getLogger(VirAttrHandler.class);\n \n-    @Autowired\n-    private VirSchemaDAO virSchemaDAO;\n-\n-    @Autowired\n-    private VirAttrDAO virAttrDAO;\n-\n     @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n     @Autowired\n     private UserDAO userDAO;\n \n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private AnyUtilsFactory anyUtilsFactory;\n-\n     @Autowired\n     private ConnectorFactory connFactory;\n \n@@ -103,290 +75,102 @@ public class VirAttrHandlerImpl implements VirAttrHandler {\n     @Autowired\n     private MappingUtils mappingUtils;\n \n-    @Override\n-    public VirSchema getVirSchema(final String virSchemaName) {\n-        VirSchema virtualSchema = null;\n-        if (StringUtils.isNotBlank(virSchemaName)) {\n-            virtualSchema = virSchemaDAO.find(virSchemaName);\n-\n-            if (virtualSchema == null) {\n-                LOG.debug(\"Ignoring invalid virtual schema {}\", virSchemaName);\n-            }\n+    private Map<VirSchema, List<String>> getValues(final Any<?, ?> any, final Set<VirSchema> schemas) {\n+        Collection<? extends ExternalResource> ownedResources;\n+        if (any instanceof User) {\n+            ownedResources = userDAO.findAllResources((User) any);\n+        } else if (any instanceof AnyObject) {\n+            ownedResources = anyObjectDAO.findAllResources((AnyObject) any);\n+        } else {\n+            ownedResources = ((Group) any).getResources();\n         }\n \n-        return virtualSchema;\n-    }\n-\n-    @Override\n-    public void updateOnResourcesIfMappingMatches(final Any<?, ?, ?> any, final String schemaKey,\n-            final Iterable<? extends ExternalResource> resources, final IntMappingType mappingType,\n-            final PropagationByResource propByRes) {\n+        Map<VirSchema, List<String>> result = new HashMap<>();\n \n-        for (ExternalResource resource : resources) {\n-            for (MappingItem mapItem\n-                    : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+        Map<Provision, Set<VirSchema>> toRead = new HashMap<>();\n \n-                if (schemaKey.equals(mapItem.getIntAttrName()) && mapItem.getIntMappingType() == mappingType) {\n-                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                }\n-            }\n-        }\n-    }\n-\n-    private Iterable<? extends ExternalResource> getAllResources(final Any<?, ?, ?> any) {\n-        return any instanceof User\n-                ? userDAO.findAllResources((User) any)\n-                : any instanceof AnyObject\n-                        ? anyObjectDAO.findAllResources((AnyObject) any)\n-                        : any instanceof Group\n-                                ? ((Group) any).getResources()\n-                                : Collections.<ExternalResource>emptySet();\n-    }\n-\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    @Override\n-    public void createVirtual(final Any any, final Collection<AttrTO> vAttrs) {\n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+        for (VirSchema schema : schemas) {\n+            if (ownedResources.contains(schema.getProvision().getResource())) {\n+                VirAttrCacheValue virAttrCacheValue =\n+                        virAttrCache.get(any.getType().getKey(), any.getKey(), schema.getKey());\n \n-        for (AttrTO attrTO : vAttrs) {\n-            VirAttr virAttr = any.getVirAttr(attrTO.getSchema());\n-            if (virAttr == null) {\n-                VirSchema virSchema = getVirSchema(attrTO.getSchema());\n-                if (virSchema != null) {\n-                    virAttr = anyUtils.newVirAttr();\n-                    virAttr.setSchema(virSchema);\n-                    if (virAttr.getSchema() == null) {\n-                        LOG.debug(\"Ignoring {} because no valid schema was found\", attrTO);\n-                    } else {\n-                        virAttr.setOwner(any);\n-                        any.add(virAttr);\n-                        virAttr.getValues().clear();\n-                        virAttr.getValues().addAll(attrTO.getValues());\n+                if (virAttrCache.isValidEntry(virAttrCacheValue)) {\n+                    LOG.debug(\"Values for {} found in cache: {}\", schema, virAttrCacheValue);\n+                    result.put(schema, virAttrCacheValue.getValues());\n+                } else {\n+                    Set<VirSchema> schemasToRead = toRead.get(schema.getProvision());\n+                    if (schemasToRead == null) {\n+                        schemasToRead = new HashSet<>();\n+                        toRead.put(schema.getProvision(), schemasToRead);\n                     }\n+                    schemasToRead.add(schema);\n                 }\n             } else {\n-                virAttr.getValues().clear();\n-                virAttr.getValues().addAll(attrTO.getValues());\n+                LOG.debug(\"Not considering {} since {} is not assigned to {}\",\n+                        schema, any, schema.getProvision().getResource());\n             }\n         }\n-    }\n-\n-    private Any<?, ?, ?> find(final Long key, final AnyTypeKind anyTypeKind) {\n-        Any<?, ?, ?> result;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = userDAO.authFind(key);\n-                break;\n-\n-            case GROUP:\n-                result = groupDAO.authFind(key);\n-                break;\n-\n-            case ANY_OBJECT:\n-            default:\n-                result = anyObjectDAO.authFind(key);\n-        }\n-\n-        return result;\n-    }\n-\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    @Override\n-    public PropagationByResource updateVirtual(final Any any, final Collection<AttrPatch> vAttrs) {\n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-\n-        Iterable<? extends ExternalResource> externalResources = getAllResources(any);\n-\n-        for (AttrPatch patch : vAttrs) {\n-            VirSchema virSchema = getVirSchema(patch.getAttrTO().getSchema());\n-            if (virSchema != null) {\n-                VirAttr virAttr = any.getVirAttr(virSchema.getKey());\n-                switch (patch.getOperation()) {\n-                    case ADD_REPLACE:\n-                        if (virAttr == null) {\n-                            virAttr = anyUtils.newVirAttr();\n-                            virAttr.setOwner(any);\n-                            virAttr.setSchema(virSchema);\n-\n-                            any.add(virAttr);\n-                        }\n-\n-                        updateOnResourcesIfMappingMatches(\n-                                any, virSchema.getKey(), externalResources, anyUtils.virIntMappingType(), propByRes);\n-\n-                        if (!virAttr.getValues().equals(patch.getAttrTO().getValues())) {\n-                            virAttr.getValues().clear();\n-                            virAttr.getValues().addAll(patch.getAttrTO().getValues());\n-                        }\n-                        break;\n-\n-                    case DELETE:\n-                    default:\n-                        if (virAttr == null) {\n-                            LOG.debug(\"No virtual attribute found for schema {}\", virSchema.getKey());\n-                        } else {\n-                            any.remove(virAttr);\n-                            virAttrDAO.delete(virAttr);\n-                        }\n-\n-                        for (ExternalResource resource : externalResources) {\n-                            for (MappingItem mapItem\n-                                    : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n \n-                                if (virSchema.getKey().equals(mapItem.getIntAttrName())\n-                                        && mapItem.getIntMappingType() == anyUtils.virIntMappingType()) {\n+        for (Map.Entry<Provision, Set<VirSchema>> entry : toRead.entrySet()) {\n+            LOG.debug(\"About to read from {}: {}\", entry.getKey(), entry.getValue());\n \n-                                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-\n-                                    // Using virtual attribute as ConnObjectKey must be avoided\n-                                    if (mapItem.isConnObjectKey()\n-                                            && virAttr != null && !virAttr.getValues().isEmpty()) {\n-\n-                                        propByRes.addOldConnObjectKey(\n-                                                resource.getKey(), virAttr.getValues().get(0).toString());\n-                                    }\n-                                }\n-                            }\n-                        }\n+            String connObjectKey = MappingUtils.getConnObjectKeyItem(entry.getKey()) == null\n+                    ? null\n+                    : mappingUtils.getConnObjectKeyValue(any, entry.getKey());\n+            if (StringUtils.isBlank(connObjectKey)) {\n+                LOG.error(\"No ConnObjectKey found for {}, ignoring...\", entry.getKey());\n+            } else {\n+                Set<MappingItem> linkingMappingItems = new HashSet<>();\n+                for (VirSchema schema : entry.getValue()) {\n+                    linkingMappingItems.add(schema.asLinkingMappingItem());\n                 }\n-            }\n-        }\n-\n-        return propByRes;\n-    }\n-\n-    @Transactional\n-    @Override\n-    public PropagationByResource updateVirtual(\n-            final Long key, final AnyTypeKind anyTypeKind, final Collection<AttrPatch> vAttrs) {\n-\n-        return updateVirtual(find(key, anyTypeKind), vAttrs);\n-    }\n-\n-    @Override\n-    public void retrieveVirAttrValues(final Any<?, ?, ?> any) {\n-        IntMappingType type = any.getType().getKind() == AnyTypeKind.USER\n-                ? IntMappingType.UserVirtualSchema\n-                : any.getType().getKind() == AnyTypeKind.GROUP\n-                        ? IntMappingType.GroupVirtualSchema\n-                        : IntMappingType.AnyObjectVirtualSchema;\n-\n-        Map<String, ConnectorObject> resources = new HashMap<>();\n-\n-        // -----------------------\n-        // Retrieve virtual attribute values if and only if they have not been retrieved yet\n-        // -----------------------\n-        for (VirAttr<?> virAttr : any.getVirAttrs()) {\n-            // reset value set\n-            if (virAttr.getValues().isEmpty()) {\n-                retrieveVirAttrValue(any, virAttr, type, resources);\n-            }\n-        }\n-        // -----------------------\n-    }\n-\n-    private void retrieveVirAttrValue(\n-            final Any<?, ?, ?> any,\n-            final VirAttr<?> virAttr,\n-            final IntMappingType type,\n-            final Map<String, ConnectorObject> externalResources) {\n-\n-        String schemaName = virAttr.getSchema().getKey();\n-        VirAttrCacheValue virAttrCacheValue = virAttrCache.get(any.getType().getKey(), any.getKey(), schemaName);\n-\n-        LOG.debug(\"Retrieve values for virtual attribute {} ({})\", schemaName, type);\n-\n-        if (virAttrCache.isValidEntry(virAttrCacheValue)) {\n-            // cached ...\n-            LOG.debug(\"Values found in cache {}\", virAttrCacheValue);\n-            virAttr.getValues().clear();\n-            virAttr.getValues().addAll(new ArrayList<>(virAttrCacheValue.getValues()));\n-        } else {\n-            // not cached ...\n-            LOG.debug(\"Need one or more remote connections\");\n-\n-            VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n-\n-            for (ExternalResource resource : getTargetResources(virAttr, type, any.getType())) {\n-                Provision provision = resource.getProvision(any.getType());\n-                LOG.debug(\"Search values into {},{}\", resource, provision);\n \n+                Connector connector = connFactory.getConnector(entry.getKey().getResource());\n                 try {\n-                    List<MappingItem> mapItems = MappingUtils.getBothMappingItems(provision);\n+                    ConnectorObject connectorObject = connector.getObject(\n+                            entry.getKey().getObjectClass(),\n+                            new Uid(connObjectKey),\n+                            connector.getOperationOptions(linkingMappingItems.iterator()));\n \n-                    ConnectorObject connectorObject;\n-                    if (externalResources.containsKey(resource.getKey())) {\n-                        connectorObject = externalResources.get(resource.getKey());\n+                    if (connectorObject == null) {\n+                        LOG.debug(\"No read from {} about {}\", entry.getKey(), connObjectKey);\n                     } else {\n-                        LOG.debug(\"Perform connection to {}\", resource.getKey());\n-                        String connObjectKey = MappingUtils.getConnObjectKeyItem(provision) == null\n-                                ? null\n-                                : mappingUtils.getConnObjectKeyValue(any, provision);\n-\n-                        if (StringUtils.isBlank(connObjectKey)) {\n-                            throw new IllegalArgumentException(\"No ConnObjectKey found for \" + resource.getKey());\n-                        }\n-\n-                        Connector connector = connFactory.getConnector(resource);\n-                        connectorObject = connector.getObject(\n-                                provision.getObjectClass(),\n-                                new Uid(connObjectKey),\n-                                connector.getOperationOptions(MappingUtils.getMatchingMappingItems(mapItems, type)));\n-                        externalResources.put(resource.getKey(), connectorObject);\n-                    }\n-\n-                    if (connectorObject != null) {\n-                        // the same virtual attribute could be mapped with one or more external attributes\n-                        for (MappingItem mapItem : MappingUtils.getMatchingMappingItems(mapItems, schemaName, type)) {\n-                            Attribute attr = connectorObject.getAttributeByName(mapItem.getExtAttrName());\n-                            if (attr != null && attr.getValue() != null) {\n-                                for (Object obj : attr.getValue()) {\n-                                    if (obj != null) {\n-                                        virAttr.getValues().add(obj.toString());\n-                                    }\n-                                }\n+                        for (VirSchema schema : entry.getValue()) {\n+                            Attribute attr = connectorObject.getAttributeByName(schema.getExtAttrName());\n+                            if (attr != null) {\n+                                VirAttrCacheValue virAttrCacheValue = new VirAttrCacheValue();\n+                                virAttrCacheValue.setValues(attr.getValue());\n+                                virAttrCache.put(any.getType().getKey(), any.getKey(), schema.getKey(),\n+                                        virAttrCacheValue);\n+                                LOG.debug(\"Values for {} set in cache: {}\", schema, virAttrCacheValue);\n+\n+                                result.put(schema, virAttrCacheValue.getValues());\n                             }\n                         }\n-\n-                        toBeCached.setResourceValues(resource.getKey(), new HashSet<>(virAttr.getValues()));\n-\n-                        LOG.debug(\"Retrieved values {}\", virAttr.getValues());\n                     }\n                 } catch (Exception e) {\n-                    LOG.error(\"Error reading connector object from {}\", resource.getKey(), e);\n-\n-                    if (virAttrCacheValue != null) {\n-                        toBeCached.forceExpiring();\n-                        LOG.debug(\"Search for a cached value (even expired!) ...\");\n-                        final Set<String> cachedValues = virAttrCacheValue.getValues(resource.getKey());\n-                        if (cachedValues != null) {\n-                            LOG.debug(\"Use cached value {}\", cachedValues);\n-                            virAttr.getValues().addAll(cachedValues);\n-                            toBeCached.setResourceValues(resource.getKey(), new HashSet<>(cachedValues));\n-                        }\n-                    }\n+                    LOG.error(\"Error reading from {}\", entry.getKey(), e);\n                 }\n             }\n-\n-            virAttrCache.put(any.getType().getKey(), any.getKey(), schemaName, toBeCached);\n         }\n+\n+        return result;\n     }\n \n-    private Collection<ExternalResource> getTargetResources(\n-            final VirAttr<?> attr, final IntMappingType type, final AnyType anyType) {\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<String> getValues(final Any<?, ?> any, final VirSchema schema) {\n+        if (!any.getAllowedVirSchemas().contains(schema)) {\n+            LOG.debug(\"{} not allowed for {}\", schema, any);\n+            return Collections.emptyList();\n+        }\n \n-        return CollectionUtils.select(getAllResources(attr.getOwner()), new Predicate<ExternalResource>() {\n+        return ListUtils.emptyIfNull(getValues(any, Collections.singleton(schema)).get(schema));\n+    }\n \n-            @Override\n-            public boolean evaluate(final ExternalResource resource) {\n-                return resource.getProvision(anyType) != null\n-                        && !MappingUtils.getMatchingMappingItems(\n-                                MappingUtils.getBothMappingItems(resource.getProvision(anyType)),\n-                                attr.getSchema().getKey(), type).isEmpty();\n-            }\n-        });\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Map<VirSchema, List<String>> getValues(final Any<?, ?> any) {\n+        return getValues(any, any.getAllowedVirSchemas());\n     }\n }"},{"sha":"93a0b31b890899d43a40bb393ce2ce2b01dad290","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":57,"deletions":81,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n@@ -53,16 +54,13 @@\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n@@ -80,6 +78,7 @@\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Relationship;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -129,9 +128,6 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected DerAttrDAO derAttrDAO;\n \n-    @Autowired\n-    protected VirAttrDAO virAttrDAO;\n-\n     @Autowired\n     protected PlainAttrValueDAO plainAttrValueDAO;\n \n@@ -159,7 +155,7 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected void setRealm(final Any<?, ?, ?> any, final AnyPatch anyPatch) {\n+    protected void setRealm(final Any<?, ?> any, final AnyPatch anyPatch) {\n         if (anyPatch.getRealm() != null && StringUtils.isNotBlank(anyPatch.getRealm().getValue())) {\n             Realm newRealm = realmDAO.find(anyPatch.getRealm().getValue());\n             if (newRealm == null) {\n@@ -225,7 +221,7 @@ private void fillAttr(final List<String> values, final AnyUtils anyUtils,\n         }\n     }\n \n-    private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?, ?, ?> any) {\n+    private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?, ?> any) {\n         List<String> missingAttrNames = new ArrayList<>();\n \n         if (provision != null) {\n@@ -235,7 +231,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n                         || item.getPurpose() == MappingPurpose.BOTH)) {\n \n                     List<PlainAttrValue> values = mappingUtils.getIntValues(\n-                            provision, item, Collections.<Any<?, ?, ?>>singletonList(any), null);\n+                            provision, item, Collections.<Any<?, ?>>singletonList(any));\n                     if (values.isEmpty() && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n                         missingAttrNames.add(item.getIntAttrName());\n                     }\n@@ -247,7 +243,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n     }\n \n     private SyncopeClientException checkMandatoryOnResources(\n-            final Any<?, ?, ?> any, final Set<ExternalResource> resources) {\n+            final Any<?, ?> any, final Set<ExternalResource> resources) {\n \n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n@@ -266,7 +262,7 @@ private SyncopeClientException checkMandatoryOnResources(\n         return reqValMissing;\n     }\n \n-    private SyncopeClientException checkMandatory(final Any<?, ?, ?> any) {\n+    private SyncopeClientException checkMandatory(final Any<?, ?> any) {\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n@@ -284,7 +280,7 @@ private SyncopeClientException checkMandatory(final Any<?, ?, ?> any) {\n         return reqValMissing;\n     }\n \n-    private Set<ExternalResource> getAllResources(final Any<?, ?, ?> any) {\n+    private Set<ExternalResource> getAllResources(final Any<?, ?> any) {\n         Set<ExternalResource> resources = new HashSet<>();\n \n         if (any instanceof User) {\n@@ -323,21 +319,26 @@ private void processAttrPatch(final Any any, final AttrPatch patch, final PlainS\n \n         switch (patch.getOperation()) {\n             case ADD_REPLACE:\n-                virAttrHander.updateOnResourcesIfMappingMatches(\n-                        any, schema.getKey(), resources, anyUtils.plainIntMappingType(), propByRes);\n-\n                 // 1.1 remove values\n-                Collection<Long> valuesToBeRemoved = attr.getSchema().isUniqueConstraint()\n-                        ? Collections.singleton(attr.getUniqueValue().getKey())\n-                        : CollectionUtils.collect(attr.getValues(), new Transformer<PlainAttrValue, Long>() {\n-\n-                            @Override\n-                            public Long transform(final PlainAttrValue input) {\n-                                return input.getKey();\n-                            }\n-                        });\n-                for (Long attrValueKey : valuesToBeRemoved) {\n-                    plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n+                if (attr.getSchema().isUniqueConstraint()) {\n+                    if (attr.getUniqueValue() != null\n+                            && !patch.getAttrTO().getValues().isEmpty()\n+                            && !patch.getAttrTO().getValues().get(0).equals(attr.getUniqueValue().getValueAsString())) {\n+\n+                        plainAttrValueDAO.delete(attr.getUniqueValue().getKey(), anyUtils.plainAttrUniqueValueClass());\n+                    }\n+                } else {\n+                    Collection<Long> valuesToBeRemoved = CollectionUtils.collect(attr.getValues(),\n+                            new Transformer<PlainAttrValue, Long>() {\n+\n+                                @Override\n+                                public Long transform(final PlainAttrValue input) {\n+                                    return input.getKey();\n+                                }\n+                            });\n+                    for (Long attrValueKey : valuesToBeRemoved) {\n+                        plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n+                    }\n                 }\n \n                 // 1.2 add values\n@@ -359,22 +360,20 @@ public Long transform(final PlainAttrValue input) {\n             default:\n                 any.remove(attr);\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n+        }\n \n-                for (ExternalResource resource : resources) {\n-                    for (MappingItem mapItem\n-                            : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n-\n-                        if (schema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == anyUtils.plainIntMappingType()) {\n+        for (ExternalResource resource : resources) {\n+            for (MappingItem mapItem : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+                if (schema.getKey().equals(mapItem.getIntAttrName())\n+                        && mapItem.getIntMappingType() == anyUtils.plainIntMappingType()) {\n \n-                            propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n-                            if (mapItem.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n-                                propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n-                            }\n-                        }\n+                    if (mapItem.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n+                        propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n                     }\n                 }\n+            }\n         }\n     }\n \n@@ -400,36 +399,26 @@ private void processAttrPatch(final Any any, final AttrPatch patch, final DerSch\n             }\n         }\n \n-        switch (patch.getOperation()) {\n-            case ADD_REPLACE:\n-                virAttrHander.updateOnResourcesIfMappingMatches(\n-                        any, schema.getKey(), resources, anyUtils.derIntMappingType(), propByRes);\n-                break;\n-\n-            case DELETE:\n-            default:\n-                derAttrDAO.delete(attr);\n-\n-                for (ExternalResource resource : resources) {\n-                    for (MappingItem mapItem\n-                            : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+        if (patch.getOperation() == PatchOperation.DELETE) {\n+            derAttrDAO.delete(attr);\n+        }\n \n-                        if (schema.getKey().equals(mapItem.getIntAttrName())\n-                                && mapItem.getIntMappingType() == anyUtils.derIntMappingType()) {\n+        for (ExternalResource resource : resources) {\n+            for (MappingItem mapItem : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n+                if (schema.getKey().equals(mapItem.getIntAttrName())\n+                        && mapItem.getIntMappingType() == anyUtils.derIntMappingType()) {\n \n-                            propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n \n-                            if (mapItem.isConnObjectKey() && !attr.getValue(any.getPlainAttrs()).isEmpty()) {\n-                                propByRes.addOldConnObjectKey(resource.getKey(), attr.getValue(any.getPlainAttrs()));\n-                            }\n-                        }\n+                    if (mapItem.isConnObjectKey() && !attr.getValue(any.getPlainAttrs()).isEmpty()) {\n+                        propByRes.addOldConnObjectKey(resource.getKey(), attr.getValue(any.getPlainAttrs()));\n                     }\n                 }\n+            }\n         }\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    protected PropagationByResource fill(final Any any, final AnyPatch anyPatch, final AnyUtils anyUtils,\n+    protected PropagationByResource fill(final Any<?, ?> any, final AnyPatch anyPatch, final AnyUtils anyUtils,\n             final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n@@ -576,25 +565,12 @@ protected void fill(\n             }\n         }\n \n-        // 3. virtual attributes\n-        for (AttrTO vattrTO : anyTO.getVirAttrs()) {\n-            VirSchema virSchema = virAttrHander.getVirSchema(vattrTO.getSchema());\n-            if (virSchema != null) {\n-                VirAttr virAttr = anyUtils.newVirAttr();\n-                virAttr.setOwner(any);\n-                virAttr.setSchema(virSchema);\n-                any.add(virAttr);\n-            }\n-        }\n-\n         SyncopeClientException requiredValuesMissing = checkMandatory(any);\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n \n-        virAttrHander.createVirtual(any, anyTO.getVirAttrs());\n-\n-        // 4. realm & resources\n+        // 3. realm & resources\n         Realm realm = realmDAO.find(anyTO.getRealm());\n         if (realm == null) {\n             SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n@@ -628,7 +604,7 @@ protected void fillTO(final AnyTO anyTO,\n             final Collection<? extends AnyTypeClass> auxClasses,\n             final Collection<? extends PlainAttr<?>> attrs,\n             final Collection<? extends DerAttr<?>> derAttrs,\n-            final Collection<? extends VirAttr<?>> virAttrs,\n+            final Map<VirSchema, List<String>> virAttrs,\n             final Collection<? extends ExternalResource> resources) {\n \n         anyTO.setRealm(realmFullPath);\n@@ -659,11 +635,11 @@ public String transform(final AnyTypeClass role) {\n             anyTO.getDerAttrs().add(attrTO);\n         }\n \n-        for (VirAttr<?> virAttr : virAttrs) {\n+        for (Map.Entry<VirSchema, List<String>> entry : virAttrs.entrySet()) {\n             AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(virAttr.getSchema().getKey());\n-            attrTO.getValues().addAll(virAttr.getValues());\n-            attrTO.setReadonly(virAttr.getSchema().isReadonly());\n+            attrTO.setSchema(entry.getKey().getKey());\n+            attrTO.getValues().addAll(entry.getValue());\n+            attrTO.setReadonly(entry.getKey().isReadonly());\n \n             anyTO.getVirAttrs().add(attrTO);\n         }\n@@ -673,21 +649,21 @@ public String transform(final AnyTypeClass role) {\n         }\n     }\n \n-    protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?, ?, ?>, AnyObject> relationship) {\n+    protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?, ?>, AnyObject> relationship) {\n         return new RelationshipTO.Builder().\n                 left(relationship.getLeftEnd().getType().getKey(), relationship.getLeftEnd().getKey()).\n                 right(relationship.getRightEnd().getType().getKey(), relationship.getRightEnd().getKey()).\n                 build();\n     }\n \n-    protected MembershipTO getMembershipTO(final Membership<? extends Any<?, ?, ?>> membership) {\n+    protected MembershipTO getMembershipTO(final Membership<? extends Any<?, ?>> membership) {\n         return new MembershipTO.Builder().\n                 left(membership.getLeftEnd().getType().getKey(), membership.getLeftEnd().getKey()).\n                 group(membership.getRightEnd().getKey(), membership.getRightEnd().getName()).\n                 build();\n     }\n \n-    protected Map<String, String> getConnObjectKeys(final Any<?, ?, ?> any) {\n+    protected Map<String, String> getConnObjectKeys(final Any<?, ?> any) {\n         Map<String, String> connObjectKeys = new HashMap<>();\n \n         Iterable<? extends ExternalResource> iterable = any instanceof User"},{"sha":"2dca6e4504ce043c20ebbc1f3a9d60787aafd8ba","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -41,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -75,12 +78,12 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n \n         BeanUtils.copyProperties(anyObject, anyObjectTO, IGNORE_PROPERTIES);\n \n-        if (details) {\n-            virAttrHander.retrieveVirAttrValues(anyObject);\n-        }\n+        Map<VirSchema, List<String>> virAttrValues = details\n+                ? virAttrHander.getValues(anyObject)\n+                : Collections.<VirSchema, List<String>>emptyMap();\n \n         fillTO(anyObjectTO, anyObject.getRealm().getFullPath(), anyObject.getAuxClasses(),\n-                anyObject.getPlainAttrs(), anyObject.getDerAttrs(), anyObject.getVirAttrs(),\n+                anyObject.getPlainAttrs(), anyObject.getDerAttrs(), virAttrValues,\n                 anyObjectDAO.findAllResources(anyObject));\n \n         if (details) {"},{"sha":"c0f0485495743f8a0b1e3977ff6e9da6e3c0fe44","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConfigurationDataBinderImpl.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConfigurationDataBinderImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.ArrayList;\n import org.apache.syncope.core.provisioning.api.data.ConfigurationDataBinder;\n import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -34,21 +34,22 @@\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.springframework.stereotype.Component;\n \n @Component\n public class ConfigurationDataBinderImpl extends AbstractAnyDataBinder implements ConfigurationDataBinder {\n \n     @Override\n-    public ConfTO getConfTO(final Conf conf) {\n-        ConfTO confTO = new ConfTO();\n-        confTO.setKey(conf.getKey());\n-\n-        fillTO(confTO, null, conf.getAuxClasses(),\n-                conf.getPlainAttrs(), conf.getDerAttrs(), conf.getVirAttrs(), Collections.<ExternalResource>emptySet());\n-\n-        return confTO;\n+    public List<AttrTO> getConfTO(final Conf conf) {\n+        final List<AttrTO> attrTOs = new ArrayList<>();\n+        for (final CPlainAttr plainAttr : conf.getPlainAttrs()) {\n+            final AttrTO attrTO = new AttrTO();\n+            attrTO.setSchema(plainAttr.getSchema().getKey());\n+            attrTO.getValues().addAll(plainAttr.getValuesAsStrings());\n+            attrTO.setReadonly(plainAttr.getSchema().isReadonly());\n+            attrTOs.add(attrTO);\n+        }\n+        return attrTOs;\n     }\n \n     @Override"},{"sha":"620cdf8a689b4d691e2b4300ead7fcb07eba61c5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n@@ -34,6 +36,7 @@\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.springframework.stereotype.Component;\n@@ -203,12 +206,12 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n             groupTO.setGroupOwner(group.getGroupOwner().getKey());\n         }\n \n-        if (details) {\n-            virAttrHander.retrieveVirAttrValues(group);\n-        }\n+        Map<VirSchema, List<String>> virAttrValues = details\n+                ? virAttrHander.getValues(group)\n+                : Collections.<VirSchema, List<String>>emptyMap();\n \n         fillTO(groupTO, group.getRealm().getFullPath(), group.getAuxClasses(),\n-                group.getPlainAttrs(), group.getDerAttrs(), group.getVirAttrs(), group.getResources());\n+                group.getPlainAttrs(), group.getDerAttrs(), virAttrValues, group.getResources());\n \n         if (group.getADynMembership() != null) {\n             groupTO.setADynMembershipCond(group.getADynMembership().getFIQLCond());"},{"sha":"388f099eaa8a8747bed9d016c9413830c9304a9f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":46,"deletions":14,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,9 +21,8 @@\n import org.apache.syncope.core.provisioning.api.data.ResourceDataBinder;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.Set;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -50,7 +49,9 @@\n import org.slf4j.LoggerFactory;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -75,6 +76,9 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n     @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -112,7 +116,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         for (ProvisionTO provisionTO : resourceTO.getProvisions()) {\n             AnyType anyType = anyTypeDAO.find(provisionTO.getAnyType());\n             if (anyType == null) {\n-                LOG.debug(\"Invalid AnyType specified {}, ignoring...\", provisionTO.getAnyType());\n+                LOG.debug(\"Invalid {} specified {}, ignoring...\",\n+                        AnyType.class.getSimpleName(), provisionTO.getAnyType());\n             } else {\n                 Provision provision = resource.getProvision(anyType);\n                 if (provision == null) {\n@@ -124,7 +129,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n                 if (provisionTO.getObjectClass() == null) {\n                     SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidProvision);\n-                    sce.getElements().add(\"Null ObjectClass\");\n+                    sce.getElements().add(\"Null \" + ObjectClass.class.getSimpleName());\n                     throw sce;\n                 }\n                 provision.setObjectClass(new ObjectClass(provisionTO.getObjectClass()));\n@@ -146,17 +151,36 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                     }\n                     populateMapping(provisionTO.getMapping(), mapping, entityFactory.newEntity(MappingItem.class));\n                 }\n+\n+                if (provisionTO.getVirSchemas().isEmpty()) {\n+                    for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+                        virSchemaDAO.delete(schema.getKey());\n+                    }\n+                } else {\n+                    for (String schemaName : provisionTO.getVirSchemas()) {\n+                        VirSchema schema = virSchemaDAO.find(schemaName);\n+                        if (schema == null) {\n+                            LOG.debug(\"Invalid {} specified: {}, ignoring...\",\n+                                    VirSchema.class.getSimpleName(), schemaName);\n+                        } else {\n+                            schema.setProvision(provision);\n+                        }\n+                    }\n+                }\n             }\n         }\n \n-        // 2. remove all abouts not contained in the TO\n-        CollectionUtils.filter(resource.getProvisions(), new Predicate<Provision>() {\n+        // 2. remove all provisions not contained in the TO\n+        for (Iterator<? extends Provision> itor = resource.getProvisions().iterator(); itor.hasNext();) {\n+            Provision provision = itor.next();\n+            if (resourceTO.getProvision(provision.getAnyType().getKey()) == null) {\n+                for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+                    virSchemaDAO.delete(schema.getKey());\n+                }\n \n-            @Override\n-            public boolean evaluate(final Provision provision) {\n-                return resourceTO.getProvision(provision.getAnyType().getKey()) != null;\n+                itor.remove();\n             }\n-        });\n+        }\n \n         resource.setCreateTraceLevel(resourceTO.getCreateTraceLevel());\n         resource.setUpdateTraceLevel(resourceTO.getUpdateTraceLevel());\n@@ -275,10 +299,6 @@ private void populateMappingTO(final Mapping mapping, final MappingTO mappingTO)\n \n     @Override\n     public ResourceTO getResourceTO(final ExternalResource resource) {\n-        if (resource == null) {\n-            return null;\n-        }\n-\n         ResourceTO resourceTO = new ResourceTO();\n \n         // set sys info\n@@ -310,6 +330,18 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n                 populateMappingTO(provision.getMapping(), mappingTO);\n             }\n \n+            for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+                provisionTO.getVirSchemas().add(virSchema.getKey());\n+\n+                MappingItem linkingMappingItem = virSchema.asLinkingMappingItem();\n+\n+                MappingItemTO itemTO = new MappingItemTO();\n+                itemTO.setKey(linkingMappingItem.getKey());\n+                BeanUtils.copyProperties(linkingMappingItem, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n+\n+                provisionTO.getMapping().getLinkingItems().add(itemTO);\n+            }\n+\n             resourceTO.getProvisions().add(provisionTO);\n         }\n "},{"sha":"6e9837f84d663b1164492ae4858a8d61bdc99273","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":23,"deletions":11,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -35,11 +35,13 @@\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -50,7 +52,7 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SchemaDataBinder.class);\n \n-    private static final String[] IGNORE_PROPERTIES = { \"anyTypeClass\" };\n+    private static final String[] IGNORE_PROPERTIES = { \"anyTypeClass\", \"provision\" };\n \n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n@@ -64,6 +66,9 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n@@ -216,26 +221,32 @@ public DerSchemaTO getDerSchemaTO(final DerSchema schema) {\n     private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n         BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);\n \n-        VirSchema merged = virSchemaDAO.save(schema);\n-\n         if (schemaTO.getAnyTypeClass() != null\n-                && (merged.getAnyTypeClass() == null\n-                || !schemaTO.getAnyTypeClass().equals(merged.getAnyTypeClass().getKey()))) {\n+                && (schema.getAnyTypeClass() == null\n+                || !schemaTO.getAnyTypeClass().equals(schema.getAnyTypeClass().getKey()))) {\n \n             AnyTypeClass anyTypeClass = anyTypeClassDAO.find(schemaTO.getAnyTypeClass());\n             if (anyTypeClass == null) {\n                 LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName()\n                         + \"{}, ignoring...\", schemaTO.getAnyTypeClass());\n             } else {\n-                anyTypeClass.add(merged);\n-                merged.setAnyTypeClass(anyTypeClass);\n+                anyTypeClass.add(schema);\n+                schema.setAnyTypeClass(anyTypeClass);\n             }\n-        } else if (schemaTO.getAnyTypeClass() == null && merged.getAnyTypeClass() != null) {\n-            merged.getAnyTypeClass().remove(merged);\n-            merged.setAnyTypeClass(null);\n+        } else if (schemaTO.getAnyTypeClass() == null && schema.getAnyTypeClass() != null) {\n+            schema.getAnyTypeClass().remove(schema);\n+            schema.setAnyTypeClass(null);\n         }\n \n-        return merged;\n+        Provision provision = resourceDAO.findProvision(schemaTO.getProvision());\n+        if (provision == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSchemaDefinition);\n+            sce.getElements().add(\"Provision \" + schemaTO.getProvision() + \" not found\");\n+            throw sce;\n+        }\n+        schema.setProvision(provision);\n+\n+        return virSchemaDAO.save(schema);\n     }\n \n     @Override\n@@ -253,6 +264,7 @@ public VirSchemaTO getVirSchemaTO(final VirSchema schema) {\n         VirSchemaTO schemaTO = new VirSchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);\n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n+        schemaTO.setProvision(schema.getProvision().getKey());\n \n         return schemaTO;\n     }"},{"sha":"49527b9a5b5c85d5e265336fe98bb2ee13006ec4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":24,"deletions":9,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.annotation.Resource;\n@@ -57,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n@@ -96,6 +99,15 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n \n     private final Encryptor encryptor = Encryptor.getInstance();\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public UserTO returnUserTO(final UserTO userTO) {\n+        if (!confDAO.find(\"return.password.value\", \"false\").getValues().get(0).getBooleanValue()) {\n+            userTO.setPassword(null);\n+        }\n+        return userTO;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO getAuthenticatedUserTO() {\n@@ -264,21 +276,24 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n \n         // password\n         if (userPatch.getPassword() != null && StringUtils.isNotBlank(userPatch.getPassword().getValue())) {\n-            setPassword(user, userPatch.getPassword().getValue(), scce);\n-            user.setChangePwdDate(new Date());\n-            propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n+            if (userPatch.getPassword().isOnSyncope()) {\n+                setPassword(user, userPatch.getPassword().getValue(), scce);\n+                user.setChangePwdDate(new Date());\n+            }\n+\n+            propByRes.addAll(ResourceOperation.UPDATE, userPatch.getPassword().getResources());\n         }\n \n         // username\n         if (userPatch.getUsername() != null && StringUtils.isNotBlank(userPatch.getUsername().getValue())) {\n-            propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n-\n             String oldUsername = user.getUsername();\n             user.setUsername(userPatch.getUsername().getValue());\n \n             if (oldUsername.equals(AuthContextUtils.getUsername())) {\n                 AuthContextUtils.updateUsername(userPatch.getUsername().getValue());\n             }\n+\n+            propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n         }\n \n         // security question / answer:\n@@ -427,12 +442,12 @@ public UserTO getUserTO(final User user, final boolean details) {\n             userTO.setSecurityQuestion(user.getSecurityQuestion().getKey());\n         }\n \n-        if (details) {\n-            virAttrHander.retrieveVirAttrValues(user);\n-        }\n+        Map<VirSchema, List<String>> virAttrValues = details\n+                ? virAttrHander.getValues(user)\n+                : Collections.<VirSchema, List<String>>emptyMap();\n \n         fillTO(userTO, user.getRealm().getFullPath(), user.getAuxClasses(),\n-                user.getPlainAttrs(), user.getDerAttrs(), user.getVirAttrs(), userDAO.findAllResources(user));\n+                user.getPlainAttrs(), user.getDerAttrs(), virAttrValues, userDAO.findAllResources(user));\n \n         if (details) {\n             // roles"},{"sha":"7c6d34c1dade45704db42a6f6d29c51172da51ab","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,7 +21,7 @@\n import java.util.Date;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.ClassUtils;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n@@ -114,7 +114,7 @@ public void interrupt() throws UnableToInterruptJobException {\n         if (thread == null) {\n             LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n         } else {\n-            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), DataFormat.format(new Date()));\n+            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), FormatUtils.format(new Date()));\n \n             if (interruptMaxRetries < 1) {\n                 interruptMaxRetries = 1;"},{"sha":"fd4af1b143e69da491102f76596ec32d7ec149f3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":15,"deletions":11,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -50,16 +50,17 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.velocity.VelocityContext;\n import org.apache.velocity.app.VelocityEngine;\n@@ -76,9 +77,6 @@\n @Transactional(rollbackFor = { Throwable.class })\n public class NotificationManagerImpl implements NotificationManager {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(NotificationManager.class);\n \n     public static final String MAIL_TEMPLATES = \"mailTemplates/\";\n@@ -87,6 +85,9 @@ public class NotificationManagerImpl implements NotificationManager {\n \n     public static final String MAIL_TEMPLATE_TEXT_SUFFIX = \".txt.vm\";\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     /**\n      * Notification DAO.\n      */\n@@ -169,11 +170,11 @@ public long getMaxRetries() {\n      */\n     private NotificationTask getNotificationTask(\n             final Notification notification,\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final Map<String, Object> model) {\n \n         if (any != null) {\n-            virAttrHander.retrieveVirAttrValues(any);\n+            virAttrHander.getValues(any);\n         }\n \n         List<User> recipients = new ArrayList<>();\n@@ -191,7 +192,7 @@ private NotificationTask getNotificationTask(\n         Set<String> recipientEmails = new HashSet<>();\n         List<UserTO> recipientTOs = new ArrayList<>(recipients.size());\n         for (User recipient : recipients) {\n-            virAttrHander.retrieveVirAttrValues(recipient);\n+            virAttrHander.getValues(recipient);\n \n             String email = getRecipientEmail(notification.getRecipientAttrType(),\n                     notification.getRecipientAttrName(), recipient);\n@@ -267,7 +268,7 @@ public List<NotificationTask> createTasks(\n             final Object output,\n             final Object... input) {\n \n-        Any<?, ?, ?> any = null;\n+        Any<?, ?> any = null;\n \n         if (before instanceof UserTO) {\n             any = userDAO.find(((UserTO) before).getKey());\n@@ -357,9 +358,12 @@ private String getRecipientEmail(\n                 break;\n \n             case UserVirtualSchema:\n-                UVirAttr virAttr = user.getVirAttr(recipientAttrName);\n-                if (virAttr != null) {\n-                    email = virAttr.getValues().isEmpty() ? null : virAttr.getValues().get(0);\n+                VirSchema schema = virSchemaDAO.find(recipientAttrName);\n+                if (schema == null) {\n+                    LOG.warn(\"Ignoring non existing {} {}\", VirSchema.class.getSimpleName(), recipientAttrName);\n+                } else {\n+                    List<String> virAttrValues = virAttrHander.getValues(user, schema);\n+                    email = virAttrValues.isEmpty() ? null : virAttrValues.get(0);\n                 }\n                 break;\n "},{"sha":"316f91a597e1190bf2f126e089139b048d6970a6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":60,"deletions":29,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -27,6 +27,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n@@ -49,12 +50,17 @@\n import org.apache.syncope.core.misc.ExceptionUtils2;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -110,6 +116,9 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected TaskDAO taskDAO;\n \n+    @Autowired\n+    protected VirSchemaDAO virSchemaDAO;\n+\n     /**\n      * Notification Manager.\n      */\n@@ -125,6 +134,9 @@ public abstract class AbstractPropagationTaskExecutor implements PropagationTask\n     @Autowired\n     protected EntityFactory entityFactory;\n \n+    @Autowired\n+    protected VirAttrCache virAttrCache;\n+\n     @Override\n     public TaskExec execute(final PropagationTask task) {\n         return execute(task, null);\n@@ -149,12 +161,15 @@ protected List<PropagationActions> getPropagationActions(final ExternalResource\n     }\n \n     /**\n-     * Transform a\n-     * <code>Collection</code> of {@link Attribute} instances into a {@link Map}. The key to each element in the map is\n-     * the <i>name</i> of an\n-     * <code>Attribute</code>. The value of each element in the map is the\n-     * <code>Attribute</code> instance with that name. <br/> Different from the original because: <ul> <li>map keys are\n-     * transformed toUpperCase()</li> <li>returned map is mutable</li> </ul>\n+     * Transform a {@link Collection} of {@link Attribute} instances into a {@link Map}.\n+     * The key to each element in the map is the {@code name} of an {@link Attribute}.\n+     * The value of each element in the map is the {@link Attribute} instance with that name.\n+     * <br/>\n+     * Different from the original because:\n+     * <ul>\n+     * <li>map keys are transformed toUpperCase()</li>\n+     * <li>returned map is mutable</li>\n+     * </ul>\n      *\n      * @param attributes set of attribute to transform to a map.\n      * @return a map of string and attribute.\n@@ -173,7 +188,7 @@ protected void createOrUpdate(\n             final PropagationTask task,\n             final ConnectorObject beforeObj,\n             final Connector connector,\n-            final Set<String> propagationAttempted) {\n+            final Boolean[] propagationAttempted) {\n \n         // set of attributes to be propagated\n         Set<Attribute> attributes = new HashSet<>(task.getAttributes());\n@@ -201,14 +216,10 @@ protected void createOrUpdate(\n \n         if (beforeObj == null) {\n             LOG.debug(\"Create {} on {}\", attributes, task.getResource().getKey());\n-            connector.create(\n-                    new ObjectClass(task.getObjectClassName()),\n-                    attributes,\n-                    null,\n-                    propagationAttempted);\n+            connector.create(new ObjectClass(task.getObjectClassName()), attributes, null, propagationAttempted);\n         } else {\n             // 1. check if rename is really required\n-            final Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n+            Name newName = (Name) AttributeUtil.find(Name.NAME, attributes);\n \n             LOG.debug(\"Rename required with value {}\", newName);\n \n@@ -254,8 +265,8 @@ protected void createOrUpdate(\n         }\n     }\n \n-    protected Any<?, ?, ?> getAny(final PropagationTask task) {\n-        Any<?, ?, ?> any = null;\n+    protected Any<?, ?> getAny(final PropagationTask task) {\n+        Any<?, ?> any = null;\n \n         if (task.getAnyKey() != null) {\n             switch (task.getAnyTypeKind()) {\n@@ -289,8 +300,11 @@ protected void createOrUpdate(\n         return any;\n     }\n \n-    protected void delete(final PropagationTask task, final ConnectorObject beforeObj,\n-            final Connector connector, final Set<String> propagationAttempted) {\n+    protected void delete(\n+            final PropagationTask task,\n+            final ConnectorObject beforeObj,\n+            final Connector connector,\n+            final Boolean[] propagationAttempted) {\n \n         if (beforeObj == null) {\n             LOG.debug(\"{} not found on external resource: ignoring delete\", task.getConnObjectKey());\n@@ -310,7 +324,7 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n              * update, this user / group used to have the current resource assigned by more than one mean (for example,\n              * two different memberships with the same resource).\n              */\n-            Any<?, ?, ?> any = getAny(task);\n+            Any<?, ?> any = getAny(task);\n             Collection<String> resources = any instanceof User\n                     ? userDAO.findAllResourceNames((User) any)\n                     : any instanceof AnyObject\n@@ -321,11 +335,7 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n             if (!resources.contains(task.getResource().getKey())) {\n                 LOG.debug(\"Delete {} on {}\", beforeObj.getUid(), task.getResource().getKey());\n \n-                connector.delete(\n-                        beforeObj.getObjectClass(),\n-                        beforeObj.getUid(),\n-                        null,\n-                        propagationAttempted);\n+                connector.delete(beforeObj.getObjectClass(), beforeObj.getUid(), null, propagationAttempted);\n             } else {\n                 createOrUpdate(task, beforeObj, connector, propagationAttempted);\n             }\n@@ -345,7 +355,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n         String failureReason = null;\n \n         // Flag to state whether any propagation has been attempted\n-        Set<String> propagationAttempted = new HashSet<>();\n+        Boolean[] propagationAttempted = new Boolean[] { false };\n \n         ConnectorObject beforeObj = null;\n         ConnectorObject afterObj = null;\n@@ -411,7 +421,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n                 LOG.error(\"While executing KO action on {}\", execution, wft);\n             }\n \n-            propagationAttempted.add(task.getOperation().name().toLowerCase());\n+            propagationAttempted[0] = true;\n \n             for (PropagationActions action : actions) {\n                 action.onError(task, execution, e);\n@@ -434,7 +444,7 @@ public TaskExec execute(final PropagationTask task, final PropagationReporter re\n             execution.setEndDate(new Date());\n \n             if (hasToBeregistered(task, execution)) {\n-                if (propagationAttempted.isEmpty()) {\n+                if (!propagationAttempted[0]) {\n                     LOG.debug(\"No propagation attempted for {}\", execution);\n                 } else {\n                     execution.setTask(task);\n@@ -535,20 +545,41 @@ protected boolean hasToBeregistered(final PropagationTask task, final TaskExec e\n      * @param latest 'FALSE' to retrieve object using old connObjectKey if not null.\n      * @return remote connector object.\n      */\n-    protected ConnectorObject getRemoteObject(final PropagationTask task, final Connector connector,\n-            final Provision provision, final boolean latest) {\n+    protected ConnectorObject getRemoteObject(\n+            final PropagationTask task,\n+            final Connector connector,\n+            final Provision provision,\n+            final boolean latest) {\n \n         String connObjectKey = latest || task.getOldConnObjectKey() == null\n                 ? task.getConnObjectKey()\n                 : task.getOldConnObjectKey();\n \n+        List<MappingItem> linkingMappingItems = new ArrayList<>();\n+        for (VirSchema schema : virSchemaDAO.findByProvision(provision)) {\n+            linkingMappingItems.add(schema.asLinkingMappingItem());\n+        }\n+\n         ConnectorObject obj = null;\n         try {\n             obj = connector.getObject(\n                     task.getOperation(),\n                     new ObjectClass(task.getObjectClassName()),\n                     new Uid(connObjectKey),\n-                    connector.getOperationOptions(MappingUtils.getPropagationMappingItems(provision)));\n+                    connector.getOperationOptions(IteratorUtils.chainedIterator(\n+                                    MappingUtils.getPropagationMappingItems(provision).iterator(),\n+                                    linkingMappingItems.iterator())));\n+\n+            for (MappingItem item : linkingMappingItems) {\n+                Attribute attr = obj.getAttributeByName(item.getExtAttrName());\n+                if (attr == null) {\n+                    virAttrCache.expire(task.getAnyType(), task.getAnyKey(), item.getIntAttrName());\n+                } else {\n+                    VirAttrCacheValue cacheValue = new VirAttrCacheValue();\n+                    cacheValue.setValues(attr.getValue());\n+                    virAttrCache.put(task.getAnyType(), task.getAnyKey(), item.getIntAttrName(), cacheValue);\n+                }\n+            }\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"77efd287c04955f9a31e520210842c39ad42f77d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":131,"deletions":123,"changes":254,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -29,7 +29,6 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n@@ -40,9 +39,7 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n@@ -51,11 +48,15 @@\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n@@ -72,6 +73,9 @@ public class PropagationManagerImpl implements PropagationManager {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(PropagationManager.class);\n \n+    @Autowired\n+    protected VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     protected AnyObjectDAO anyObjectDAO;\n \n@@ -102,14 +106,11 @@ public class PropagationManagerImpl implements PropagationManager {\n     @Autowired\n     protected ConnObjectUtils connObjectUtils;\n \n-    @Autowired\n-    protected VirAttrHandler virAttrHandler;\n-\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected Any<?, ?, ?> find(final AnyTypeKind kind, final Long key) {\n-        AnyDAO<? extends Any<?, ?, ?>> dao;\n+    protected Any<?, ?> find(final AnyTypeKind kind, final Long key) {\n+        AnyDAO<? extends Any<?, ?>> dao;\n         switch (kind) {\n             case ANY_OBJECT:\n                 dao = anyObjectDAO;\n@@ -135,12 +136,7 @@ public List<PropagationTask> getCreateTasks(\n             final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        Any<?, ?, ?> any = find(kind, key);\n-        if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.createVirtual(any, vAttrs);\n-        }\n-\n-        return getCreateTasks(any, null, null, propByRes, noPropResourceNames);\n+        return getCreateTasks(find(kind, key), null, null, propByRes, vAttrs, noPropResourceNames);\n     }\n \n     @Override\n@@ -152,19 +148,15 @@ public List<PropagationTask> getUserCreateTasks(\n             final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        User user = userDAO.authFind(key);\n-        if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.createVirtual(user, vAttrs);\n-        }\n-\n-        return getCreateTasks(user, password, enable, propByRes, noPropResourceNames);\n+        return getCreateTasks(userDAO.authFind(key), password, enable, propByRes, vAttrs, noPropResourceNames);\n     }\n \n     protected List<PropagationTask> getCreateTasks(\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final String password,\n             final Boolean enable,\n             final PropagationByResource propByRes,\n+            final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n@@ -175,7 +167,7 @@ protected List<PropagationTask> getCreateTasks(\n             propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceNames);\n         }\n \n-        return createTasks(any, password, true, null, enable, false, propByRes);\n+        return createTasks(any, password, true, enable, false, propByRes, vAttrs);\n     }\n \n     @Override\n@@ -185,7 +177,7 @@ public List<PropagationTask> getUpdateTasks(\n             final boolean changePwd,\n             final Boolean enable,\n             final PropagationByResource propByRes,\n-            final Collection<AttrPatch> vAttrs,\n+            final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n         return getUpdateTasks(find(kind, key), null, changePwd, enable, propByRes, vAttrs, noPropResourceNames);\n@@ -257,37 +249,19 @@ public String transform(final StringPatchItem input) {\n     }\n \n     protected List<PropagationTask> getUpdateTasks(\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final String password,\n             final boolean changePwd,\n             final Boolean enable,\n             final PropagationByResource propByRes,\n-            final Collection<AttrPatch> vAttrs,\n+            final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        PropagationByResource localPropByRes = virAttrHandler.updateVirtual(\n-                any,\n-                vAttrs == null ? Collections.<AttrPatch>emptySet() : vAttrs);\n-\n-        if (propByRes == null || propByRes.isEmpty()) {\n-            localPropByRes.addAll(ResourceOperation.UPDATE, any.getResourceNames());\n-        } else {\n-            localPropByRes.merge(propByRes);\n-        }\n-\n         if (noPropResourceNames != null) {\n-            localPropByRes.removeAll(noPropResourceNames);\n-        }\n-\n-        Map<String, AttrPatch> vAttrsMap = null;\n-        if (vAttrs != null) {\n-            vAttrsMap = new HashMap<>();\n-            for (AttrPatch attrPatch : vAttrs) {\n-                vAttrsMap.put(attrPatch.getAttrTO().getSchema(), attrPatch);\n-            }\n+            propByRes.removeAll(noPropResourceNames);\n         }\n \n-        return createTasks(any, password, changePwd, vAttrsMap, enable, false, localPropByRes);\n+        return createTasks(any, password, changePwd, enable, false, propByRes, vAttrs);\n     }\n \n     @Override\n@@ -297,7 +271,7 @@ public List<PropagationTask> getDeleteTasks(\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames) {\n \n-        Any<?, ?, ?> any = find(kind, key);\n+        Any<?, ?> any = find(kind, key);\n \n         PropagationByResource localPropByRes = new PropagationByResource();\n \n@@ -315,109 +289,143 @@ public List<PropagationTask> getDeleteTasks(\n     }\n \n     protected List<PropagationTask> getDeleteTasks(\n-            final Any<?, ?, ?> any,\n+            final Any<?, ?> any,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames) {\n \n-        return createTasks(any, null, false, null, false, true, propByRes);\n+        return createTasks(any, null, false, false, true, propByRes, null);\n     }\n \n     /**\n      * Create propagation tasks.\n      *\n-     * @param any user / group to be provisioned\n-     * @param password cleartext password to be provisioned\n+     * @param any to be provisioned\n+     * @param password clear text password to be provisioned\n      * @param changePwd whether password should be included for propagation attributes or not\n-     * @param vAttrs virtual attributes to be maaged\n      * @param enable whether user must be enabled or not\n-     * @param deleteOnResource whether user / group must be deleted anyway from external resource or not\n+     * @param deleteOnResource whether any must be deleted anyway from external resource or not\n      * @param propByRes operation to be performed per resource\n+     * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks created\n      */\n-    protected List<PropagationTask> createTasks(final Any<?, ?, ?> any,\n+    protected List<PropagationTask> createTasks(final Any<?, ?> any,\n             final String password, final boolean changePwd,\n-            final Map<String, AttrPatch> vAttrs,\n-            final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes) {\n+            final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes,\n+            final Collection<AttrTO> vAttrs) {\n \n-        LOG.debug(\"Provisioning any {}:\\n{}\", any, propByRes);\n+        LOG.debug(\"Provisioning {}:\\n{}\", any, propByRes);\n \n-        if (!propByRes.get(ResourceOperation.CREATE).isEmpty() && vAttrs != null) {\n-            virAttrHandler.retrieveVirAttrValues(any);\n+        // Avoid duplicates - see javadoc\n+        propByRes.purge();\n+        LOG.debug(\"After purge {}:\\n{}\", any, propByRes);\n+\n+        // Virtual attributes\n+        Set<String> virtualResources = new HashSet<>();\n+        virtualResources.addAll(propByRes.get(ResourceOperation.CREATE));\n+        virtualResources.addAll(propByRes.get(ResourceOperation.UPDATE));\n+        if (any instanceof User) {\n+            virtualResources.addAll(userDAO.findAllResourceNames((User) any));\n+        } else if (any instanceof AnyObject) {\n+            virtualResources.addAll(anyObjectDAO.findAllResourceNames((AnyObject) any));\n+        } else {\n+            virtualResources.addAll(((Group) any).getResourceNames());\n+        }\n \n-            // update vAttrsToBeUpdated as well\n-            for (VirAttr<?> virAttr : any.getVirAttrs()) {\n-                String schema = virAttr.getSchema().getKey();\n+        Map<String, Set<Attribute>> vAttrMap = new HashMap<>();\n+        for (AttrTO vAttr : CollectionUtils.emptyIfNull(vAttrs)) {\n+            VirSchema schema = virSchemaDAO.find(vAttr.getSchema());\n+            if (schema == null) {\n+                LOG.warn(\"Ignoring invalid {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n+            } else if (schema.isReadonly()) {\n+                LOG.warn(\"Ignoring read-only {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n+            } else {\n+                if (any.getAllowedVirSchemas().contains(schema)\n+                        && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n+\n+                    Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());\n+                    if (values == null) {\n+                        values = new HashSet<>();\n+                        vAttrMap.put(schema.getProvision().getResource().getKey(), values);\n+                    }\n+                    values.add(AttributeBuilder.build(schema.getExtAttrName(), vAttr.getValues()));\n \n-                vAttrs.put(schema, new AttrPatch.Builder().\n-                        attrTO(new AttrTO.Builder().schema(schema).values(virAttr.getValues()).build()).\n-                        build());\n+                    propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());\n+                } else {\n+                    LOG.warn(\"{} not owned by or {} not allowed for {}\",\n+                            schema.getProvision().getResource(), schema, any);\n+                }\n             }\n         }\n-\n-        // Avoid duplicates - see javadoc\n-        propByRes.purge();\n-        LOG.debug(\"After purge: {}\", propByRes);\n+        LOG.debug(\"With virtual attributes {}:\\n{}\\n{}\", any, propByRes, vAttrMap);\n \n         List<PropagationTask> tasks = new ArrayList<>();\n \n-        for (ResourceOperation operation : ResourceOperation.values()) {\n-            for (String resourceName : propByRes.get(operation)) {\n-                ExternalResource resource = resourceDAO.find(resourceName);\n-                Provision provision = resource == null ? null : resource.getProvision(any.getType());\n-                if (resource == null) {\n-                    LOG.error(\"Invalid resource name specified: {}, ignoring...\", resourceName);\n-                } else if (provision == null) {\n-                    LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n-                            resource, any.getType());\n-                } else if (MappingUtils.getPropagationMappingItems(provision).isEmpty()) {\n-                    LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n-                            any.getType(), resource);\n-                } else {\n-                    PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n-                    task.setResource(resource);\n-                    task.setObjectClassName(\n-                            resource.getProvision(any.getType()).getObjectClass().getObjectClassValue());\n-                    task.setAnyTypeKind(any.getType().getKind());\n-                    if (!deleteOnResource) {\n-                        task.setAnyKey(any.getKey());\n-                    }\n-                    task.setOperation(operation);\n-                    task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n-\n-                    Pair<String, Set<Attribute>> preparedAttrs = mappingUtils.prepareAttrs(\n-                            any, password, changePwd, vAttrs, enable, provision);\n-                    task.setConnObjectKey(preparedAttrs.getKey());\n-\n-                    // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n-                    // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n-                    List<String> mandatoryMissing = new ArrayList<>();\n-                    List<String> mandatoryNullOrEmpty = new ArrayList<>();\n-                    for (MappingItem item : MappingUtils.getPropagationMappingItems(provision)) {\n-                        if (!item.isConnObjectKey()\n-                                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n-\n-                            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n-                            if (attr == null) {\n-                                mandatoryMissing.add(item.getExtAttrName());\n-                            } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n-                                mandatoryNullOrEmpty.add(item.getExtAttrName());\n-                            }\n+        for (Map.Entry<String, ResourceOperation> entry : propByRes.asMap().entrySet()) {\n+            ExternalResource resource = resourceDAO.find(entry.getKey());\n+            Provision provision = resource == null ? null : resource.getProvision(any.getType());\n+            List<MappingItem> mappingItems = provision == null\n+                    ? Collections.<MappingItem>emptyList()\n+                    : MappingUtils.getPropagationMappingItems(provision);\n+\n+            if (resource == null) {\n+                LOG.error(\"Invalid resource name specified: {}, ignoring...\", entry.getKey());\n+            } else if (provision == null) {\n+                LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n+                        resource, any.getType());\n+            } else if (mappingItems.isEmpty()) {\n+                LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n+                        any.getType(), resource);\n+            } else {\n+                PropagationTask task = entityFactory.newEntity(PropagationTask.class);\n+                task.setResource(resource);\n+                task.setObjectClassName(\n+                        resource.getProvision(any.getType()).getObjectClass().getObjectClassValue());\n+                task.setAnyTypeKind(any.getType().getKind());\n+                task.setAnyType(any.getType().getKey());\n+                if (!deleteOnResource) {\n+                    task.setAnyKey(any.getKey());\n+                }\n+                task.setOperation(entry.getValue());\n+                task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n+\n+                Pair<String, Set<Attribute>> preparedAttrs =\n+                        mappingUtils.prepareAttrs(any, password, changePwd, enable, provision);\n+                task.setConnObjectKey(preparedAttrs.getKey());\n+\n+                // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n+                // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n+                List<String> mandatoryMissing = new ArrayList<>();\n+                List<String> mandatoryNullOrEmpty = new ArrayList<>();\n+                for (MappingItem item : mappingItems) {\n+                    if (!item.isConnObjectKey()\n+                            && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n+\n+                        Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n+                        if (attr == null) {\n+                            mandatoryMissing.add(item.getExtAttrName());\n+                        } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n+                            mandatoryNullOrEmpty.add(item.getExtAttrName());\n                         }\n                     }\n-                    if (!mandatoryMissing.isEmpty()) {\n-                        preparedAttrs.getValue().add(AttributeBuilder.build(\n-                                PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n-                    }\n-                    if (!mandatoryNullOrEmpty.isEmpty()) {\n-                        preparedAttrs.getValue().add(AttributeBuilder.build(\n-                                PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n-                    }\n-\n-                    task.setAttributes(preparedAttrs.getValue());\n-                    tasks.add(task);\n+                }\n+                if (!mandatoryMissing.isEmpty()) {\n+                    preparedAttrs.getValue().add(AttributeBuilder.build(\n+                            PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n+                }\n+                if (!mandatoryNullOrEmpty.isEmpty()) {\n+                    preparedAttrs.getValue().add(AttributeBuilder.build(\n+                            PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n+                }\n \n-                    LOG.debug(\"PropagationTask created: {}\", task);\n+                if (vAttrMap.containsKey(resource.getKey())) {\n+                    preparedAttrs.getValue().addAll(vAttrMap.get(resource.getKey()));\n                 }\n+\n+                task.setAttributes(preparedAttrs.getValue());\n+\n+                tasks.add(task);\n+\n+                LOG.debug(\"PropagationTask created: {}\", task);\n             }\n         }\n "},{"sha":"dcce5e5991b6e9af1b7a4415af22b2720475916c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":12,"deletions":45,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,25 +20,19 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n-import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n@@ -48,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.TimeoutException;\n@@ -68,9 +61,9 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected abstract String getName(Any<?, ?, ?> any);\n+    protected abstract String getName(Any<?, ?> any);\n \n-    protected void deprovision(final Any<?, ?, ?> any) {\n+    protected void deprovision(final Any<?, ?> any) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -83,7 +76,7 @@ protected void deprovision(final Any<?, ?, ?> any) {\n                 noPropResources));\n     }\n \n-    protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n+    protected void provision(final Any<?, ?> any, final Boolean enabled) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -101,7 +94,7 @@ protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void link(final Any<?, ?, ?> any, final Boolean unlink) {\n+    protected void link(final Any<?, ?> any, final Boolean unlink) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n@@ -111,7 +104,7 @@ protected void link(final Any<?, ?, ?> any, final Boolean unlink) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void unassign(final Any<?, ?, ?> any) {\n+    protected void unassign(final Any<?, ?> any) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.DELETE).\n@@ -122,7 +115,7 @@ protected void unassign(final Any<?, ?, ?> any) {\n         deprovision(any);\n     }\n \n-    protected void assign(final Any<?, ?, ?> any, final Boolean enabled) {\n+    protected void assign(final Any<?, ?> any, final Boolean enabled) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n@@ -141,7 +134,7 @@ protected ConnectorObject getRemoteObject(final String connObjectKey, final Obje\n             obj = profile.getConnector().getObject(\n                     objectClass,\n                     uid,\n-                    profile.getConnector().getOperationOptions(Collections.<MappingItem>emptySet()));\n+                    profile.getConnector().getOperationOptions(IteratorUtils.<MappingItem>emptyIterator()));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;\n@@ -155,7 +148,7 @@ protected ConnectorObject getRemoteObject(final String connObjectKey, final Obje\n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public boolean handle(final long anyKey) {\n-        Any<?, ?, ?> any = null;\n+        Any<?, ?> any = null;\n         try {\n             any = getAny(anyKey);\n             doHandle(any);\n@@ -176,7 +169,7 @@ public boolean handle(final long anyKey) {\n         }\n     }\n \n-    protected final void doHandle(final Any<?, ?, ?> any) throws JobExecutionException {\n+    protected final void doHandle(final Any<?, ?> any) throws JobExecutionException {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n         ProvisioningResult result = new ProvisioningResult();\n@@ -406,33 +399,7 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    protected Any<?, ?, ?> update(final Any<?, ?, ?> any, final Boolean enabled) {\n-        Set<AttrPatch> vattrs = new HashSet<>();\n-\n-        // Search for all mapped vattrs\n-        Mapping mapping = profile.getTask().getResource().getProvision(any.getType()).getMapping();\n-        for (MappingItem mappingItem : mapping.getItems()) {\n-            if (mappingItem.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n-                vattrs.add(new AttrPatch.Builder().\n-                        operation(PatchOperation.DELETE).\n-                        attrTO(new AttrTO.Builder().schema(mappingItem.getIntAttrName()).build()).\n-                        build());\n-            }\n-        }\n-\n-        // Search for all user's vattrs and:\n-        // 1. add mapped vattrs not owned by the user to the set of vattrs to be removed\n-        // 2. add all vattrs owned by the user to the set of vattrs to be update\n-        for (VirAttr<?> vattr : any.getVirAttrs()) {\n-            vattrs.add(new AttrPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).\n-                    attrTO(new AttrTO.Builder().\n-                            schema(vattr.getSchema().getKey()).\n-                            values(vattr.getValues()).\n-                            build()).\n-                    build());\n-        }\n-\n+    protected Any<?, ?> update(final Any<?, ?> any, final Boolean enabled) {\n         boolean changepwd;\n         Collection<String> resourceNames;\n         if (any instanceof User) {\n@@ -458,7 +425,7 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n                 changepwd,\n                 null,\n                 propByRes,\n-                vattrs,\n+                null,\n                 noPropResources));\n \n         return getAny(any.getKey());"},{"sha":"3967f2b9fc3462b080e3c61ebdc83d63b2dde092","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":41,"deletions":1,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -38,12 +38,17 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n+import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeSyncResultHandler;\n+import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n import org.identityconnectors.framework.common.objects.SyncDeltaType;\n import org.quartz.JobExecutionException;\n@@ -57,6 +62,12 @@ public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected SyncUtils syncUtilities;\n \n+    @Autowired\n+    protected VirSchemaDAO virSchemaDAO;\n+\n+    @Autowired\n+    protected VirAttrCache virAttrCache;\n+\n     protected abstract String getName(AnyTO anyTO);\n \n     protected abstract ProvisioningManager<?, ?> getProvisioningManager();\n@@ -656,6 +667,8 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n \n         try {\n             List<Long> anyKeys = syncUtilities.findExisting(uid, delta.getObject(), provision, anyUtils);\n+            LOG.debug(\"Match(es) found for {} as {}: {}\",\n+                    delta.getUid().getUidValue(), delta.getObject().getObjectClass(), anyKeys);\n \n             if (anyKeys.size() > 1) {\n                 switch (profile.getResAct()) {\n@@ -671,7 +684,7 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                         break;\n \n                     default:\n-                    // keep anyIds as is\n+                    // keep anyKeys unmodified\n                 }\n             }\n \n@@ -694,25 +707,52 @@ protected void doHandle(final SyncDelta delta, final Provision provision) throws\n                         // do nothing\n                     }\n                 } else {\n+                    // update VirAttrCache\n+                    for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+                        Attribute attr = delta.getObject().getAttributeByName(virSchema.getExtAttrName());\n+                        for (Long anyKey : anyKeys) {\n+                            if (attr == null) {\n+                                virAttrCache.expire(\n+                                        provision.getAnyType().getKey(),\n+                                        anyKey,\n+                                        virSchema.getKey());\n+                            } else {\n+                                VirAttrCacheValue cacheValue = new VirAttrCacheValue();\n+                                cacheValue.setValues(attr.getValue());\n+                                virAttrCache.put(\n+                                        provision.getAnyType().getKey(),\n+                                        anyKey,\n+                                        virSchema.getKey(),\n+                                        cacheValue);\n+                            }\n+                        }\n+                    }\n+\n                     switch (profile.getTask().getMatchingRule()) {\n                         case UPDATE:\n                             profile.getResults().addAll(update(delta, anyKeys, provision));\n                             break;\n+\n                         case DEPROVISION:\n                             profile.getResults().addAll(deprovision(delta, anyKeys, provision, false));\n                             break;\n+\n                         case UNASSIGN:\n                             profile.getResults().addAll(deprovision(delta, anyKeys, provision, true));\n                             break;\n+\n                         case LINK:\n                             profile.getResults().addAll(link(delta, anyKeys, provision, false));\n                             break;\n+\n                         case UNLINK:\n                             profile.getResults().addAll(link(delta, anyKeys, provision, true));\n                             break;\n+\n                         case IGNORE:\n                             profile.getResults().addAll(ignore(delta, provision, true));\n                             break;\n+\n                         default:\n                         // do nothing\n                     }"},{"sha":"570cb761b008fc00bb570aad662ebba29310d41e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -137,7 +137,7 @@\n \n     protected abstract AnyTO getAnyTO(long key);\n \n-    protected abstract Any<?, ?, ?> getAny(long key);\n+    protected abstract Any<?, ?> getAny(long key);\n \n     protected abstract AnyPatch newPatch(final long key);\n "},{"sha":"7d9ab24e7f76dbc27b02c1670506805811f4d510","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectPushResultHandlerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -36,12 +36,12 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?, ?> any) {\n+    protected String getName(final Any<?, ?> any) {\n         return StringUtils.EMPTY;\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return anyObjectDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"079529d7adaaff97412bdeec291d805747dce4a8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -54,7 +54,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return anyObjectDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"15f06e03287fb6ae2a2ca0b9ec43b8cf0016fa5b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultPushActions.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -34,57 +34,57 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?, ?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> void onError(\n+    public <A extends Any<?, ?>> void onError(\n             final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result,\n             final Exception error) throws JobExecutionException {\n \n         // do nothing\n     }\n \n     @Override\n-    public <A extends Any<?, ?, ?>> void after(\n+    public <A extends Any<?, ?>> void after(\n             final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result)\n             throws JobExecutionException {\n "},{"sha":"212eb84fb5aa1446ebbe9cc1f8b908f83a1ab27c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupPushResultHandlerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -36,12 +36,12 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?, ?> any) {\n+    protected String getName(final Any<?, ?> any) {\n         return Group.class.cast(any).getName();\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return groupDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"c3b9eda82590c45918b693152bbd337ac8b4bb2f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -63,7 +63,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return groupDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"e13407d9592c1c57e84f89a9f0f23defde1432e0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PushJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -145,13 +145,13 @@ protected String doExecuteProvisioning(\n \n                 int count = anyDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n                 for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n-                    List<? extends Any<?, ?, ?>> localAnys = StringUtils.isBlank(filter)\n+                    List<? extends Any<?, ?>> localAnys = StringUtils.isBlank(filter)\n                             ? anyDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE)\n                             : searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                                     SearchCondConverter.convert(filter),\n                                     Collections.<OrderByClause>emptyList(), provision.getAnyType().getKind());\n \n-                    for (Any<?, ?, ?> any : localAnys) {\n+                    for (Any<?, ?> any : localAnys) {\n                         SyncopePushResultHandler handler;\n                         switch (provision.getAnyType().getKind()) {\n                             case USER:"},{"sha":"890ceced2e23ac6f482e5c1c64d850cca0033c4a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobDelegate.java","status":"modified","additions":27,"deletions":4,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -19,15 +19,22 @@\n package org.apache.syncope.core.provisioning.java.sync;\n \n import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.collections4.IteratorUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.SyncPolicySpec;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.ProvisioningTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n@@ -51,6 +58,9 @@ public class SyncJobDelegate extends AbstractProvisioningJobDelegate<SyncTask> {\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Autowired\n     protected SyncUtils syncUtils;\n \n@@ -163,12 +173,25 @@ protected String doExecuteProvisioning(\n                         latestSyncToken = connector.getLatestSyncToken(provision.getObjectClass());\n                     }\n \n+                    Set<MappingItem> linkinMappingItems = new HashSet<>();\n+                    for (VirSchema virSchema : virSchemaDAO.findByProvision(provision)) {\n+                        linkinMappingItems.add(virSchema.asLinkingMappingItem());\n+                    }\n+                    Iterator<MappingItem> mapItems = IteratorUtils.chainedIterator(\n+                            provision.getMapping().getItems().iterator(),\n+                            linkinMappingItems.iterator());\n+\n                     if (syncTask.isFullReconciliation()) {\n-                        connector.getAllObjects(provision.getObjectClass(), handler,\n-                                connector.getOperationOptions(provision.getMapping().getItems()));\n+                        connector.getAllObjects(\n+                                provision.getObjectClass(),\n+                                handler,\n+                                connector.getOperationOptions(mapItems));\n                     } else {\n-                        connector.sync(provision.getObjectClass(), provision.getSyncToken(), handler,\n-                                connector.getOperationOptions(provision.getMapping().getItems()));\n+                        connector.sync(\n+                                provision.getObjectClass(),\n+                                provision.getSyncToken(),\n+                                handler,\n+                                connector.getOperationOptions(mapItems));\n                     }\n \n                     if (!dryRun && !syncTask.isFullReconciliation()) {"},{"sha":"eefccad2077ac3c5f86d88edb2faddaf6ab8edf2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -128,7 +128,7 @@ public boolean handle(final ConnectorObject obj) {\n                         return found.add(obj);\n                     }\n                 },\n-                connector.getOperationOptions(MappingUtils.getSyncMappingItems(provision)));\n+                connector.getOperationOptions(MappingUtils.getSyncMappingItems(provision).iterator()));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.getObjectClass(), resource, name);\n@@ -199,9 +199,9 @@ private List<Long> findByConnObjectKeyItem(\n                     }\n                 }\n \n-                List<? extends Any<?, ?, ?>> anys =\n+                List<? extends Any<?, ?>> anys =\n                         getAnyDAO(connObjectKeyItem).findByAttrValue(connObjectKeyItem.getIntAttrName(), value);\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     result.add(any.getKey());\n                 }\n                 break;\n@@ -210,15 +210,15 @@ private List<Long> findByConnObjectKeyItem(\n             case GroupDerivedSchema:\n             case AnyObjectDerivedSchema:\n                 anys = getAnyDAO(connObjectKeyItem).findByDerAttrValue(connObjectKeyItem.getIntAttrName(), transfUid);\n-                for (Any<?, ?, ?> any : anys) {\n+                for (Any<?, ?> any : anys) {\n                     result.add(any.getKey());\n                 }\n                 break;\n \n             case UserKey:\n             case GroupKey:\n             case AnyObjectKey:\n-                Any<?, ?, ?> any = getAnyDAO(connObjectKeyItem).find(Long.parseLong(transfUid));\n+                Any<?, ?> any = getAnyDAO(connObjectKeyItem).find(Long.parseLong(transfUid));\n                 if (any != null) {\n                     result.add(any.getKey());\n                 }\n@@ -249,7 +249,7 @@ private List<Long> findByCorrelationRule(\n             final ConnectorObject connObj, final SyncCorrelationRule rule, final AnyTypeKind type) {\n \n         List<Long> result = new ArrayList<>();\n-        for (Any<?, ?, ?> any : searchDAO.search(\n+        for (Any<?, ?> any : searchDAO.search(\n                 SyncopeConstants.FULL_ADMIN_REALMS,\n                 rule.getSearchCond(connObj),\n                 Collections.<OrderByClause>emptyList(),"},{"sha":"8f70560bcda83e7f28f1a12e57127164b14693c3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserPushResultHandlerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -41,7 +41,7 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n+    protected void provision(final Any<?, ?> any, final Boolean enabled) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -60,12 +60,12 @@ protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?, ?> any) {\n+    protected String getName(final Any<?, ?> any) {\n         return User.class.cast(any).getUsername();\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return userDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"23e209cb7aa12286fb5a383a5b8485e7a43bd813","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -54,7 +54,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?, ?> getAny(final long key) {\n+    protected Any<?, ?> getAny(final long key) {\n         try {\n             return userDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"808c7dd3d4fe108556d828d289d298de94f9eb9f","filename":"core/rest-cxf/pom.xml","status":"modified","additions":187,"deletions":124,"changes":311,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fpom.xml?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -99,7 +99,18 @@ under the License.\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-rs-client</artifactId>\n     </dependency>  \n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-rest-api</artifactId>\n+      <version>${project.version}</version>\n+      <classifier>javadoc</classifier>\n+    </dependency>\n     \n+    <dependency>\n+      <groupId>io.swagger</groupId>\n+      <artifactId>swagger-jaxrs</artifactId>\n+    </dependency>\n+        \n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-logic</artifactId>\n@@ -130,130 +141,7 @@ under the License.\n   </dependencies>\n \n   <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-dependency-plugin</artifactId>\n-        <inherited>false</inherited>\n-        <configuration>\n-          <outputDirectory>${project.build.directory}</outputDirectory>\n-          <artifactItems>\n-            <artifactItem>\n-              <groupId>org.apache.syncope.common</groupId>\n-              <artifactId>syncope-common-rest-api</artifactId>\n-              <version>${project.version}</version>\n-              <type>wadl</type>\n-            </artifactItem>\n-          </artifactItems>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <phase>process-resources</phase>\n-            <goals>\n-              <goal>copy</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n-              \n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>xml-maven-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <executions>\n-          <execution>\n-            <phase>prepare-package</phase>\n-            <goals>\n-              <goal>transform</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-        <configuration>\n-          <transformationSets>\n-            <transformationSet>\n-              <dir>${project.build.directory}</dir>\n-              <includes>\n-                <include>syncope-common-rest-api-${project.version}.wadl</include>\n-              </includes>\n-              <outputDir>${project.build.directory}/classes/META-INF/resources/doc</outputDir>\n-              <stylesheet>${project.build.directory}/classes/wadl2html/identity.xsl</stylesheet>\n-              <outputProperties>\n-                <outputProperty>\n-                  <name>indent</name>\n-                  <value>yes</value>\n-                </outputProperty>\n-              </outputProperties>\n-              <fileMappers>\n-                <fileMapper implementation=\"org.codehaus.plexus.components.io.filemappers.RegExpFileMapper\">\n-                  <pattern>^.*$</pattern>\n-                  <replacement>syncope.wadl</replacement>\n-                </fileMapper>\n-              </fileMappers>\n-            </transformationSet>\n-            <transformationSet>\n-              <dir>${project.build.directory}</dir>\n-              <includes>\n-                <include>syncope-common-rest-api-${project.version}.wadl</include>\n-              </includes>\n-              <outputDir>${project.build.directory}/classes/META-INF/resources/doc</outputDir>\n-              <stylesheet>${project.build.directory}/classes/wadl2html/index.xsl</stylesheet>\n-              <parameters>\n-                <parameter>\n-                  <name>contextPath</name>\n-                  <value>..</value>\n-                </parameter>\n-              </parameters>\n-              <outputProperties>\n-                <outputProperty>\n-                  <name>indent</name>\n-                  <value>yes</value>\n-                </outputProperty>\n-              </outputProperties>\n-              <fileMappers>\n-                <fileMapper implementation=\"org.codehaus.plexus.components.io.filemappers.RegExpFileMapper\">\n-                  <pattern>^.*$</pattern>\n-                  <replacement>index.html</replacement>\n-                </fileMapper>\n-              </fileMappers>\n-            </transformationSet>\n-            <transformationSet>\n-              <dir>${project.build.directory}</dir>\n-              <includes>\n-                <include>syncope-common-rest-api-${project.version}.wadl</include>\n-              </includes>\n-              <outputDir>${project.build.directory}/classes/META-INF/resources/doc</outputDir>\n-              <stylesheet>${project.build.directory}/classes/wadl2html/schema.xsl</stylesheet>\n-              <parameters>\n-                <parameter>\n-                  <name>contextPath</name>\n-                  <value>..</value>\n-                </parameter>\n-                <parameter>\n-                  <name>schema-position</name>\n-                  <value>1</value>\n-                </parameter>\n-                <parameter>\n-                  <name>schema-prefix</name>\n-                  <value>syncope1</value>\n-                </parameter>\n-              </parameters>\n-              <outputProperties>\n-                <outputProperty>\n-                  <name>indent</name>\n-                  <value>yes</value>\n-                </outputProperty>\n-              </outputProperties>\n-              <fileMappers>\n-                <fileMapper implementation=\"org.codehaus.plexus.components.io.filemappers.RegExpFileMapper\">\n-                  <pattern>^.*$</pattern>\n-                  <replacement>schema_1_syncope1.html</replacement>\n-                </fileMapper>\n-              </fileMappers>\n-            </transformationSet>\n-          </transformationSets>\n-        </configuration>\n-      </plugin>\n-            \n+    <plugins>            \n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-checkstyle-plugin</artifactId>\n@@ -267,4 +155,179 @@ under the License.\n       </resource>\n     </resources>\n   </build>\n+  \n+  <profiles>\n+    <profile>\n+      <id>offline-wadl</id>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <!-- 1. Fetch offline WADL -->\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-dependency-plugin</artifactId>\n+            <inherited>false</inherited>\n+            <configuration>\n+              <outputDirectory>${project.build.directory}</outputDirectory>\n+              <artifactItems>\n+                <artifactItem>\n+                  <groupId>org.apache.syncope.common</groupId>\n+                  <artifactId>syncope-common-rest-api</artifactId>\n+                  <version>${project.version}</version>\n+                  <type>wadl</type>\n+                </artifactItem>\n+              </artifactItems>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>fetch-offline-wadl</id>\n+                <phase>process-resources</phase>\n+                <goals>\n+                  <goal>copy</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+              \n+          <!-- 2. Transform WADL into 2 HTML pages -->\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>xml-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>wadl2html</id>\n+                <phase>process-resources</phase>\n+                <goals>\n+                  <goal>transform</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+            <configuration>\n+              <transformationSets>\n+                <transformationSet>\n+                  <dir>${project.build.directory}</dir>\n+                  <includes>\n+                    <include>syncope-common-rest-api-${project.version}.wadl</include>\n+                  </includes>\n+                  <outputDir>${project.build.directory}/generated/wadl</outputDir>\n+                  <stylesheet>${project.build.directory}/classes/wadl2html/identity.xsl</stylesheet>\n+                  <outputProperties>\n+                    <outputProperty>\n+                      <name>indent</name>\n+                      <value>yes</value>\n+                    </outputProperty>\n+                  </outputProperties>\n+                  <fileMappers>\n+                    <fileMapper implementation=\"org.codehaus.plexus.components.io.filemappers.RegExpFileMapper\">\n+                      <pattern>^.*$</pattern>\n+                      <replacement>syncope.wadl</replacement>\n+                    </fileMapper>\n+                  </fileMappers>\n+                </transformationSet>\n+                <transformationSet>\n+                  <dir>${project.build.directory}</dir>\n+                  <includes>\n+                    <include>syncope-common-rest-api-${project.version}.wadl</include>\n+                  </includes>\n+                  <outputDir>${project.build.directory}/generated/wadl</outputDir>\n+                  <stylesheet>${project.build.directory}/classes/wadl2html/index.xsl</stylesheet>\n+                  <parameters>\n+                    <parameter>\n+                      <name>contextPath</name>\n+                      <value>..</value>\n+                    </parameter>\n+                  </parameters>\n+                  <outputProperties>\n+                    <outputProperty>\n+                      <name>indent</name>\n+                      <value>yes</value>\n+                    </outputProperty>\n+                  </outputProperties>\n+                  <fileMappers>\n+                    <fileMapper implementation=\"org.codehaus.plexus.components.io.filemappers.RegExpFileMapper\">\n+                      <pattern>^.*$</pattern>\n+                      <replacement>index.html</replacement>\n+                    </fileMapper>\n+                  </fileMappers>\n+                </transformationSet>\n+                <transformationSet>\n+                  <dir>${project.build.directory}</dir>\n+                  <includes>\n+                    <include>syncope-common-rest-api-${project.version}.wadl</include>\n+                  </includes>\n+                  <outputDir>${project.build.directory}/generated/wadl</outputDir>\n+                  <stylesheet>${project.build.directory}/classes/wadl2html/schema.xsl</stylesheet>\n+                  <parameters>\n+                    <parameter>\n+                      <name>contextPath</name>\n+                      <value>..</value>\n+                    </parameter>\n+                    <parameter>\n+                      <name>schema-position</name>\n+                      <value>1</value>\n+                    </parameter>\n+                    <parameter>\n+                      <name>schema-prefix</name>\n+                      <value>syncope1</value>\n+                    </parameter>\n+                  </parameters>\n+                  <outputProperties>\n+                    <outputProperty>\n+                      <name>indent</name>\n+                      <value>yes</value>\n+                    </outputProperty>\n+                  </outputProperties>\n+                  <fileMappers>\n+                    <fileMapper implementation=\"org.codehaus.plexus.components.io.filemappers.RegExpFileMapper\">\n+                      <pattern>^.*$</pattern>\n+                      <replacement>schema_1_syncope1.html</replacement>\n+                    </fileMapper>\n+                  </fileMappers>\n+                </transformationSet>\n+              </transformationSets>\n+            </configuration>\n+          </plugin>\n+          \n+          <!-- 3. Fix external references -->\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-antrun-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>fix-html-ext-refs</id>\n+                <phase>process-resources</phase>\n+                <configuration>\n+                  <target>\n+                    <replace file=\"${project.build.directory}/generated/wadl/index.html\"\n+                             token=\"../webjars/jquery/${jquery.version}/jquery.min.js\"\n+                             value=\"https://code.jquery.com/jquery-${jquery.version}.min.js\"/>\n+                    <replace file=\"${project.build.directory}/generated/wadl/index.html\"\n+                             token=\"../webjars/jquery-ui/${jquery-ui.version}/jquery-ui.min.js\"\n+                             value=\"http://code.jquery.com/ui/${jquery-ui.version}/jquery-ui.min.js\"/>\n+                    <replace file=\"${project.build.directory}/generated/wadl/index.html\"\n+                             token=\"../webjars/jquery-ui-themes/${jquery-ui.version}/smoothness/jquery-ui.min.css\"\n+                             value=\"https://code.jquery.com/ui/${jquery-ui.version}/themes/smoothness/jquery-ui.css\"/>      \n+\n+                    <replace file=\"${project.build.directory}/generated/wadl/schema_1_syncope1.html\"\n+                             token=\"../webjars/highlightjs/${highlightjs.version}/highlight.min.js\"\n+                             value=\"http://cdnjs.cloudflare.com/ajax/libs/highlight.js/${highlightjs.version}/highlight.min.js\"/>\n+                    <replace file=\"${project.build.directory}/generated/wadl/schema_1_syncope1.html\"\n+                             token=\"../webjars/highlightjs/${highlightjs.version}/styles/default.min.css\"\n+                             value=\"http://cdnjs.cloudflare.com/ajax/libs/highlight.js/${highlightjs.version}/styles/default.min.css\"/>      \n+                  </target>\n+                </configuration>\n+                <goals>\n+                  <goal>run</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n </project>"},{"sha":"fe19915d9f1ecaf282d0c7f78a0888cf88aab00d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/ThreadLocalCleanupListener.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FThreadLocalCleanupListener.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,7 +20,7 @@\n \n import javax.servlet.ServletRequestEvent;\n import javax.servlet.ServletRequestListener;\n-import org.apache.syncope.core.misc.DataFormat;\n+import org.apache.syncope.core.misc.FormatUtils;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.impl.api.local.ThreadClassLoaderManager;\n \n@@ -36,7 +36,7 @@ public void requestInitialized(final ServletRequestEvent sre) {\n \n     @Override\n     public void requestDestroyed(final ServletRequestEvent sre) {\n-        DataFormat.clear();\n+        FormatUtils.clear();\n \n         ThreadClassLoaderManager.clearInstance();\n         CurrentLocale.clear();"},{"sha":"534ae9f10228598f8c849808c860e2393b145eb9","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WADLServlet.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWADLServlet.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.rmi.ServerException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.cocoon.pipeline.CachingPipeline;\n+import org.apache.cocoon.pipeline.Pipeline;\n+import org.apache.cocoon.sax.SAXPipelineComponent;\n+import org.apache.cocoon.sax.component.XMLGenerator;\n+import org.apache.cocoon.sax.component.XMLSerializer;\n+import org.apache.cocoon.sax.component.XSLTTransformer;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class WADLServlet extends HttpServlet {\n+\n+    private static final long serialVersionUID = -6737005675471095560L;\n+\n+    private static final Pattern SCHEMA_PATTERN = Pattern.compile(\"/schema_(.*)_(.*)\\\\.html\");\n+\n+    protected void finish(final Pipeline<SAXPipelineComponent> pipeline, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        pipeline.addComponent(XMLSerializer.createHTML4Serializer());\n+        pipeline.setup(response.getOutputStream());\n+        try {\n+            pipeline.execute();\n+        } catch (Exception e) {\n+            throw new ServletException(e);\n+        }\n+    }\n+\n+    /**\n+     * Handles the HTTP <code>GET</code> method.\n+     *\n+     * @param request servlet request\n+     * @param response servlet response\n+     * @throws ServletException if a servlet-specific error occurs\n+     * @throws IOException if an I/O error occurs\n+     */\n+    @Override\n+    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        Matcher schemaMatcher = SCHEMA_PATTERN.matcher(request.getServletPath());\n+\n+        Pipeline<SAXPipelineComponent> pipeline = new CachingPipeline<>();\n+        String wadlURL = StringUtils.substringBeforeLast(request.getRequestURL().toString(), \"/\")\n+                + \"/rest/?_wadl\";\n+        pipeline.addComponent(new XMLGenerator(new URL(wadlURL)));\n+        if (\"/index.html\".equals(request.getServletPath())) {\n+            XSLTTransformer xslt = new XSLTTransformer(getClass().getResource(\"/wadl2html/index.xsl\"));\n+\n+            Map<String, Object> parameters = new HashMap<>();\n+            parameters.put(\"contextPath\", request.getContextPath());\n+            xslt.setParameters(parameters);\n+\n+            pipeline.addComponent(xslt);\n+\n+            finish(pipeline, response);\n+        } else if (schemaMatcher.matches()) {\n+            XSLTTransformer xslt = new XSLTTransformer(getClass().getResource(\"/wadl2html/schema.xsl\"));\n+\n+            Map<String, Object> parameters = new HashMap<>();\n+            parameters.put(\"contextPath\", request.getContextPath());\n+            parameters.put(\"schema-position\", schemaMatcher.group(1));\n+            parameters.put(\"schema-prefix\", schemaMatcher.group(2));\n+            xslt.setParameters(parameters);\n+\n+            pipeline.addComponent(xslt);\n+\n+            finish(pipeline, response);\n+        } else if (\"/syncope.wadl\".equals(request.getServletPath())) {\n+            response.setContentType(MediaType.APPLICATION_XML);\n+\n+            InputStream in = new URL(wadlURL).openStream();\n+            OutputStream out = response.getOutputStream();\n+            try {\n+                IOUtils.copy(in, out);\n+            } finally {\n+                IOUtils.closeQuietly(in);\n+                IOUtils.closeQuietly(out);\n+            }\n+        } else {\n+            throw new ServerException(\"URL not supported: \" + request.getRequestURI());\n+        }\n+    }\n+\n+}"},{"sha":"4258e64dbf56b495a53d054a9db4a89ea7d9274d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -179,23 +179,20 @@ private void addUpdateOrReplaceAttr(\n \n         P patch = newPatch(key);\n \n-        Set<AttrPatch> patches;\n         switch (schemaType) {\n             case DERIVED:\n-                patches = patch.getDerAttrs();\n+                patch.getDerAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n                 break;\n \n             case VIRTUAL:\n-                patches = patch.getVirAttrs();\n+                patch.getVirAttrs().add(attrTO);\n                 break;\n \n             case PLAIN:\n             default:\n-                patches = patch.getPlainAttrs();\n+                patch.getPlainAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n         }\n \n-        patches.add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n-\n         update(patch);\n     }\n "},{"sha":"1a6dac7caac61f8ecb71943018d5c173e9057feb","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ConfigurationServiceImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FConfigurationServiceImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -20,12 +20,12 @@\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.util.List;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.common.lib.to.ConfTO;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.syncope.core.logic.ConfigurationLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -60,7 +60,7 @@ public void delete(final String schema) {\n     }\n \n     @Override\n-    public ConfTO list() {\n+    public List<AttrTO> list() {\n         return logic.list();\n     }\n "},{"sha":"32ae12c9a04d768c462c6b50ed888affba77263a","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -21,7 +21,6 @@\n import java.text.ParseException;\n import java.util.List;\n import javax.ws.rs.BadRequestException;\n-import javax.ws.rs.NotFoundException;\n import org.apache.syncope.common.lib.to.EventCategoryTO;\n import org.apache.syncope.common.lib.to.LoggerTO;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n@@ -76,13 +75,16 @@ public List<LoggerTO> list(final LoggerType type) {\n \n     @Override\n     public LoggerTO read(final LoggerType type, final String name) {\n-        List<LoggerTO> logger = list(type);\n-        for (LoggerTO l : logger) {\n-            if (l.getKey().equals(name)) {\n-                return l;\n-            }\n+        switch (type) {\n+            case LOG:\n+                return logic.readLog(name);\n+\n+            case AUDIT:\n+                return logic.readAudit(name);\n+\n+            default:\n+                throw new BadRequestException();\n         }\n-        throw new NotFoundException();\n     }\n \n     @Override"},{"sha":"5e819781b14f9d3efe7d069d9c8cb12ccdb7f908","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/PolicyServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FPolicyServiceImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -39,8 +39,8 @@ public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyServ\n     private PolicyLogic logic;\n \n     @Override\n-    public <T extends AbstractPolicyTO> Response create(final T policyTO) {\n-        T policy = logic.create(policyTO);\n+    public Response create(final AbstractPolicyTO policyTO) {\n+        AbstractPolicyTO policy = logic.create(policyTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(policy.getKey())).build();\n         return Response.created(location).\n                 header(RESTHeaders.RESOURCE_KEY, policy.getKey()).\n@@ -63,7 +63,7 @@ public <T extends AbstractPolicyTO> T read(final Long key) {\n     }\n \n     @Override\n-    public <T extends AbstractPolicyTO> void update(final T policyTO) {\n+    public void update(final AbstractPolicyTO policyTO) {\n         switch (policyTO.getType()) {\n             case ACCOUNT:\n                 logic.update((AccountPolicyTO) policyTO);"},{"sha":"d5380ab7441682cb8320cbcee2011a89c7f54827","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SchemaServiceImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/973cd50fe5c8852c6ba087fbbd984e54931ece94/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSchemaServiceImpl.java?ref=973cd50fe5c8852c6ba087fbbd984e54931ece94","patch":"@@ -36,8 +36,8 @@ public class SchemaServiceImpl extends AbstractServiceImpl implements SchemaServ\n     private SchemaLogic logic;\n \n     @Override\n-    public <T extends AbstractSchemaTO> Response create(final SchemaType schemaType, final T schemaTO) {\n-        T created = logic.create(schemaType, schemaTO);\n+    public Response create(final SchemaType schemaType, final AbstractSchemaTO schemaTO) {\n+        AbstractSchemaTO created = logic.create(schemaType, schemaTO);\n \n         URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n         return Response.created(location).\n@@ -61,7 +61,7 @@ public <T extends AbstractSchemaTO> T read(final SchemaType schemaType, final St\n     }\n \n     @Override\n-    public <T extends AbstractSchemaTO> void update(final SchemaType schemaType, final T schemaTO) {\n+    public void update(final SchemaType schemaType, final AbstractSchemaTO schemaTO) {\n         logic.update(schemaType, schemaTO);\n     }\n }"}]}