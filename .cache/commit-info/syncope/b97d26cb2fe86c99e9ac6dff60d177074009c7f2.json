{"sha":"b97d26cb2fe86c99e9ac6dff60d177074009c7f2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI5N2QyNmNiMmZlODZjOTllOWFjNmRmZjYwZDE3NzA3NDAwOWM3ZjI=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-05-31T14:49:16Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2013-05-31T14:49:16Z"},"message":"[SYNCOPE-383] merged from 1_1_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1488260 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"207945d32020b61e5f34af6d8c74dee6b1e8800b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/207945d32020b61e5f34af6d8c74dee6b1e8800b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b97d26cb2fe86c99e9ac6dff60d177074009c7f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b97d26cb2fe86c99e9ac6dff60d177074009c7f2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b97d26cb2fe86c99e9ac6dff60d177074009c7f2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b97d26cb2fe86c99e9ac6dff60d177074009c7f2/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"6930e5c48beb2e2719062a12e0f66ae62bf01016","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6930e5c48beb2e2719062a12e0f66ae62bf01016","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6930e5c48beb2e2719062a12e0f66ae62bf01016"},{"sha":"fbd31cd5dd2022c37d9cedff58898d9c9218bdc1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fbd31cd5dd2022c37d9cedff58898d9c9218bdc1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fbd31cd5dd2022c37d9cedff58898d9c9218bdc1"}],"stats":{"total":89,"additions":31,"deletions":58},"files":[{"sha":"2e05be730271cb444b1d3cf1a09595280ee82bab","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97d26cb2fe86c99e9ac6dff60d177074009c7f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97d26cb2fe86c99e9ac6dff60d177074009c7f2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=b97d26cb2fe86c99e9ac6dff60d177074009c7f2","patch":"@@ -244,17 +244,12 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n \n         SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n-        // when requesting to add user to new resources, either directly or\n-        // through role subscription, password is mandatory (issue 147)\n-        // first, let's take current resources into account\n         Set<String> currentResources = user.getResourceNames();\n \n         // password\n         if (StringUtils.isNotBlank(userMod.getPassword())) {\n             setPassword(user, userMod.getPassword(), scce);\n-\n             user.setChangePwdDate(new Date());\n-\n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n         }\n \n@@ -365,28 +360,6 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n             }\n         }\n \n-        // now, let's see if there are new resource subscriptions without providing password\n-        if (StringUtils.isBlank(userMod.getPassword())) {\n-            Set<String> updatedResources = user.getResourceNames();\n-            updatedResources.removeAll(currentResources);\n-\n-            for (String resourceName : updatedResources) {\n-                final ExternalResource resource = resourceDAO.find(resourceName);\n-\n-                if (!user.canDecodePassword() && resource != null && !resource.isRandomPwdIfNotProvided()\n-                        && resource.getUmapping() != null && !MappingUtil.getMatchingMappingItems(\n-                        resource.getUmapping().getItems(), \"password\", IntMappingType.Password).isEmpty()) {\n-\n-                    SyncopeClientException sce =\n-                            new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n-                    sce.addElement(\"Password cannot be empty when subscribing to new resources\");\n-                    scce.addException(sce);\n-\n-                    throw scce;\n-                }\n-            }\n-        }\n-\n         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);\n         propByRes.addAll(ResourceOperation.UPDATE, toBeProvisioned);\n "},{"sha":"be32c7ab04af4d16850bf77c2c070a30702fee59","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97d26cb2fe86c99e9ac6dff60d177074009c7f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97d26cb2fe86c99e9ac6dff60d177074009c7f2/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=b97d26cb2fe86c99e9ac6dff60d177074009c7f2","patch":"@@ -316,35 +316,6 @@ public void testEnforceMandatoryConditionOnDerived() {\n         assertEquals(Collections.singleton(\"resource-csv-enforcing\"), userTO.getResources());\n     }\n \n-    @Test\n-    public void issue147() {\n-        // 1. create an user without role nor resources\n-        UserTO userTO = getUniqueSampleTO(\"147@t.com\");\n-\n-        userTO = createUser(userTO);\n-        assertNotNull(userTO);\n-        assertTrue(userTO.getResources().isEmpty());\n-\n-        // 2. try to update by adding a resource, but no password: must fail\n-        UserMod userMod = new UserMod();\n-        userMod.setId(userTO.getId());\n-        userMod.addResourceToBeAdded(\"ws-target-resource-2\");\n-\n-        SyncopeClientException sce = null;\n-        try {\n-            userService.update(userMod.getId(), userMod);\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n-        }\n-        assertNotNull(sce);\n-\n-        // 3. provide password: now update must work\n-        userMod.setPassword(\"newPassword\");\n-        userTO = userService.update(userMod.getId(), userMod);\n-        assertNotNull(userTO);\n-        assertEquals(1, userTO.getResources().size());\n-    }\n-\n     @Test\n     public void createUserWithDbPropagation() {\n         UserTO userTO = getUniqueSampleTO(\"yyy@yyy.yyy\");\n@@ -2219,13 +2190,42 @@ public void issueSYNCOPE357() {\n             assertNotNull(scce.getException(SyncopeClientExceptionType.NotFound));\n         }\n     }\n-    \n-        @Test\n+\n+    @Test\n     public void issueSYNCOPE373() {\n         UserTO userTO = userService.readSelf();\n         assertEquals(ADMIN_UNAME, userTO.getUsername());\n     }\n \n+    @Test\n+    public void issueSYNCOPE383() {\n+        // 1. create user on testdb and testdb2\n+        UserTO userTO = getUniqueSampleTO(\"syncope383@apache.org\");\n+        userTO.getResources().clear();\n+        userTO = createUser(userTO);\n+        assertNotNull(userTO);\n+\n+        // 2. assign resource without specifying a new pwd and check propagation failure\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.addResourceToBeAdded(RESOURCE_NAME_TESTDB);\n+        userTO = userService.update(userMod.getId(), userMod);\n+        assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n+        assertFalse(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+\n+        // 3. request to change password only on testdb\n+        userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPassword(getUUIDString());\n+        PropagationRequestTO pwdPropRequest = new PropagationRequestTO();\n+        pwdPropRequest.addResource(RESOURCE_NAME_TESTDB);\n+        userMod.setPwdPropRequest(pwdPropRequest);\n+\n+        userTO = userService.update(userMod.getId(), userMod);\n+        assertEquals(RESOURCE_NAME_TESTDB, userTO.getResources().iterator().next());\n+        assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n+    }\n+\n     private boolean getBooleanAttribute(ConnObjectTO connObjectTO, String attrName) {\n         return Boolean.parseBoolean(getStringAttribute(connObjectTO, attrName));\n     }"}]}