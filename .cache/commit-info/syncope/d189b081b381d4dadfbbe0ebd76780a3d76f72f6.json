{"sha":"d189b081b381d4dadfbbe0ebd76780a3d76f72f6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQxODliMDgxYjM4MWQ0ZGFkZmJiZTBlYmQ3Njc4MGEzZDc2ZjcyZjY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-04T14:32:24Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-11-04T14:32:24Z"},"message":"User search bugfix for LIKE and ISNULL\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246617 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d3c9cd02ed8ac212f895dbc42264db01d6f7ce0e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d3c9cd02ed8ac212f895dbc42264db01d6f7ce0e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d189b081b381d4dadfbbe0ebd76780a3d76f72f6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d189b081b381d4dadfbbe0ebd76780a3d76f72f6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d189b081b381d4dadfbbe0ebd76780a3d76f72f6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d189b081b381d4dadfbbe0ebd76780a3d76f72f6/comments","author":null,"committer":null,"parents":[{"sha":"24b5ba4432bcbf5cb6fc9c6d02009bffa12c9c02","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24b5ba4432bcbf5cb6fc9c6d02009bffa12c9c02","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/24b5ba4432bcbf5cb6fc9c6d02009bffa12c9c02"}],"stats":{"total":127,"additions":89,"deletions":38},"files":[{"sha":"f35b1b05edaa02d984d2befa3cd9715dc1bb87de","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":62,"deletions":38,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d189b081b381d4dadfbbe0ebd76780a3d76f72f6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d189b081b381d4dadfbbe0ebd76780a3d76f72f6/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=d189b081b381d4dadfbbe0ebd76780a3d76f72f6","patch":"@@ -141,34 +141,57 @@ public final List<SyncopeUser> search(final NodeCond searchCondition) {\n             LOG.debug(\"Search condition:\\n\" + searchCondition);\n         }\n \n-        List<SyncopeUser> result = Collections.EMPTY_LIST;\n+        List<SyncopeUser> result;\n         try {\n             result = doSearch(searchCondition);\n         } catch (Throwable t) {\n             LOG.error(\"While searching users\", t);\n+\n+            result = Collections.EMPTY_LIST;\n         }\n \n         return result;\n     }\n \n     @Transactional(readOnly = true)\n     private List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n-        List<SyncopeUser> result = null;\n-        List<SyncopeUser> rightResult = null;\n+        List<SyncopeUser> result;\n+        List<SyncopeUser> rightResult;\n \n         switch (nodeCond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n-                Criteria criteria = getBaseCriteria().\n-                        add(getCriterion(nodeCond));\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Criteria to be performed:\\n\" + criteria);\n-                }\n+                if (nodeCond.getAttributeCond() != null\n+                        && nodeCond.getAttributeCond().getType()\n+                        == AttributeCond.Type.ISNULL) {\n+\n+                    if (nodeCond.getType() == NodeCond.Type.NOT_LEAF) {\n+                        nodeCond.setType(NodeCond.Type.LEAF);\n+                        nodeCond.getAttributeCond().setType(\n+                                AttributeCond.Type.ISNOTNULL);\n+\n+                        result = doSearch(nodeCond);\n+                    } else {\n+                        Query query = entityManager.createQuery(\n+                                \"SELECT e FROM SyncopeUser e WHERE e NOT IN (\"\n+                                + \"SELECT u FROM SyncopeUser u \"\n+                                + \"LEFT OUTER JOIN u.attributes ua \"\n+                                + \"WHERE ua.schema.name = :schemaName)\");\n+                        query.setParameter(\"schemaName\",\n+                                nodeCond.getAttributeCond().getSchema());\n+                        LOG.debug(\"Search query to be performed: {}\", query);\n+\n+                        result = query.getResultList();\n+                    }\n+                } else {\n+                    Criteria criteria = getBaseCriteria().\n+                            add(getCriterion(nodeCond));\n+                    LOG.debug(\"Criteria to be performed: {}\", criteria);\n \n-                result = criteria.list();\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Criteria result:\\n\" + result);\n+                    result = criteria.list();\n                 }\n+\n+                LOG.debug(\"Leaf result: {}\", result);\n                 break;\n \n             case AND:\n@@ -184,6 +207,7 @@ private List<SyncopeUser> doSearch(final NodeCond nodeCond) {\n                 break;\n \n             default:\n+                result = Collections.EMPTY_LIST;\n         }\n \n         return result;\n@@ -227,44 +251,45 @@ private Criterion getCriterion(final NodeCond leafCond) {\n                                 + leafCond.getAttributeCond().getSchema()\n                                 + \"'\");\n                     } else {\n-                        if (leafCond.getAttributeCond().getType()\n-                                == AttributeCond.Type.ISNULL) {\n+                        UserAttributeValue example =\n+                                new UserAttributeValue();\n+                        try {\n+                            if (leafCond.getAttributeCond().getType()\n+                                    == AttributeCond.Type.LIKE) {\n+\n+                                example.setStringValue(\n+                                        leafCond.getAttributeCond().\n+                                        getExpression());\n+                            } else {\n+                                example = userSchema.getValidator().\n+                                        getValue(\n+                                        leafCond.getAttributeCond().\n+                                        getExpression(),\n+                                        example);\n+                            }\n \n                             criterion = Restrictions.and(\n                                     Restrictions.eq(\"a.schema.name\",\n                                     leafCond.getAttributeCond().getSchema()),\n-                                    Restrictions.isEmpty(\"a.values\"));\n-                        } else {\n-                            try {\n-                                UserAttributeValue example =\n-                                        userSchema.getValidator().\n-                                        getValue(leafCond.getAttributeCond().\n-                                        getExpression(),\n-                                        new UserAttributeValue());\n-                                criterion = Restrictions.and(\n-                                        Restrictions.eq(\"a.schema.name\",\n-                                        leafCond.getAttributeCond().\n-                                        getSchema()),\n-                                        getCriterion(\n-                                        leafCond.getAttributeCond().getType(),\n-                                        example));\n-                            } catch (ValidationException e) {\n-                                LOG.error(\"Could not validate expression '\"\n-                                        + leafCond.getAttributeCond().\n-                                        getExpression() + \"'\", e);\n-                            }\n+                                    getCriterion(\n+                                    leafCond.getAttributeCond().getType(),\n+                                    example));\n+                        } catch (ValidationException e) {\n+                            LOG.error(\"Could not validate expression '\"\n+                                    + leafCond.getAttributeCond().\n+                                    getExpression() + \"'\", e);\n                         }\n                     }\n-\n                 }\n \n-\n                 break;\n \n             case NOT_LEAF:\n                 leafCond.setType(NodeCond.Type.LEAF);\n                 criterion = Restrictions.not(getCriterion(leafCond));\n                 break;\n+\n+            default:\n         }\n \n         return criterion;\n@@ -343,9 +368,8 @@ private Criterion getCriterion(final AttributeCond.Type type,\n \n             case LIKE:\n                 // LIKE operator is meaningful for strings only\n-                result = Restrictions.disjunction().\n-                        add(Restrictions.like(\"av.stringValue\",\n-                        example.getStringValue()));\n+                result = Restrictions.like(\"av.stringValue\",\n+                        example.getStringValue());\n                 break;\n \n             case LT:"},{"sha":"1d8de484b30c9af4fb4c182c8ef7397f79545f87","filename":"core/src/main/resources/logback.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d189b081b381d4dadfbbe0ebd76780a3d76f72f6/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d189b081b381d4dadfbbe0ebd76780a3d76f72f6/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=d189b081b381d4dadfbbe0ebd76780a3d76f72f6","patch":"@@ -115,6 +115,11 @@\n         <appender-ref ref=\"monitor\"/>\n     </logger>\n \n+    <logger name=\"net.sf.ehcache.hibernate\" additivity=\"false\">\n+        <level value=\"INFO\"/>\n+        <appender-ref ref=\"monitor\"/>\n+    </logger>\n+\n     <logger name=\"org.springframework\" additivity=\"false\">\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"main\"/>"},{"sha":"30f4de02b39db135a523620c11364c0e026ae44b","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d189b081b381d4dadfbbe0ebd76780a3d76f72f6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d189b081b381d4dadfbbe0ebd76780a3d76f72f6/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=d189b081b381d4dadfbbe0ebd76780a3d76f72f6","patch":"@@ -21,7 +21,9 @@\n import static org.junit.Assert.*;\n \n import java.util.Date;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n@@ -282,6 +284,7 @@ public final void token() {\n \n     @Test\n     public final void search() {\n+        // LIKE\n         AttributeCond usernameLeafCond1 =\n                 new AttributeCond(AttributeCond.Type.LIKE);\n         usernameLeafCond1.setSchema(\"username\");\n@@ -307,6 +310,25 @@ public final void search() {\n         for (UserTO user : matchedUsers) {\n             assertNotNull(user);\n         }\n+\n+        // ISNULL\n+        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        isNullCond.setSchema(\"loginDate\");\n+        searchCondition = NodeCond.getLeafCond(isNullCond);\n+\n+        matchedUsers = Arrays.asList(\n+                restTemplate.postForObject(\n+                BASE_URL + \"user/search\",\n+                searchCondition, UserTO[].class));\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.isEmpty());\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n+        for (UserTO user : matchedUsers) {\n+            userIds.add(user.getId());\n+        }\n+        assertEquals(2, userIds.size());\n+        assertTrue(userIds.contains(2L));\n+        assertTrue(userIds.contains(3L));\n     }\n \n     @Test"}]}