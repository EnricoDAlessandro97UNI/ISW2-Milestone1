{"sha":"61a03446a8416e281ea23082e75852edb30b3d6a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYxYTAzNDQ2YTg0MTZlMjgxZWEyMzA4MmU3NTg1MmVkYjMwYjNkNmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-11-18T16:22:55Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-11-18T16:23:07Z"},"message":"[SYNCOPE-1602] Including ConnObjectKey attributes when specified","tree":{"sha":"f6953629ff4338211dea0b78cc60c74f233096da","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f6953629ff4338211dea0b78cc60c74f233096da"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/61a03446a8416e281ea23082e75852edb30b3d6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61a03446a8416e281ea23082e75852edb30b3d6a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61a03446a8416e281ea23082e75852edb30b3d6a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61a03446a8416e281ea23082e75852edb30b3d6a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0477a802e2143debfa25109c45740ca56fb46870","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0477a802e2143debfa25109c45740ca56fb46870","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0477a802e2143debfa25109c45740ca56fb46870"}],"stats":{"total":20,"additions":15,"deletions":5},"files":[{"sha":"03d1e3d745efda326797873c374a35f66b9a2212","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61a03446a8416e281ea23082e75852edb30b3d6a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61a03446a8416e281ea23082e75852edb30b3d6a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java?ref=61a03446a8416e281ea23082e75852edb30b3d6a","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.core.provisioning.api.AccountGetter;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.PlainAttrGetter;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -59,7 +60,8 @@ public Filter getFilter(final Any<?> any, final Provision provision) {\n         List<Filter> filters = new ArrayList<>();\n \n         provision.getMapping().getItems().stream().filter(\n-                item -> item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH).\n+                item -> conf.getSchemas().contains(item.getIntAttrName())\n+                && (item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH)).\n                 forEach(item -> {\n                     Pair<String, Attribute> attr = mappingManager.prepareAttr(\n                             provision,\n@@ -69,10 +71,18 @@ public Filter getFilter(final Any<?> any, final Provision provision) {\n                             AccountGetter.DEFAULT,\n                             AccountGetter.DEFAULT,\n                             PlainAttrGetter.DEFAULT);\n-                    if (attr != null && attr.getRight() != null && conf.getSchemas().contains(item.getIntAttrName())) {\n-                        filters.add(provision.isIgnoreCaseMatch()\n-                                ? FilterBuilder.equalsIgnoreCase(attr.getRight())\n-                                : FilterBuilder.equalTo(attr.getRight()));\n+                    if (attr != null) {\n+                        Attribute toFilter = null;\n+                        if (attr.getLeft() != null) {\n+                            toFilter = AttributeBuilder.build(item.getExtAttrName(), attr.getLeft());\n+                        } else if (attr.getRight() != null) {\n+                            toFilter = attr.getRight();\n+                        }\n+                        if (toFilter != null) {\n+                            filters.add(provision.isIgnoreCaseMatch()\n+                                    ? FilterBuilder.equalsIgnoreCase(toFilter)\n+                                    : FilterBuilder.equalTo(toFilter));\n+                        }\n                     }\n                 });\n "}]}