{"sha":"4715ef1ea909a932b3cf3d4874404480e8bdc889","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ3MTVlZjFlYTkwOWE5MzJiM2NmM2Q0ODc0NDA0NDgwZThiZGM4ODk=","commit":{"author":{"name":"Matteo Di Carlo","email":"matteo.dicarlo@tirasa.net","date":"2016-09-07T13:14:02Z"},"committer":{"name":"Matteo Di Carlo","email":"matteo.dicarlo@tirasa.net","date":"2016-09-07T13:14:02Z"},"message":"Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/syncope","tree":{"sha":"e53e64e7c93da6fcd17109314c24d94e5f3b4320","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e53e64e7c93da6fcd17109314c24d94e5f3b4320"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4715ef1ea909a932b3cf3d4874404480e8bdc889","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4715ef1ea909a932b3cf3d4874404480e8bdc889","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4715ef1ea909a932b3cf3d4874404480e8bdc889","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4715ef1ea909a932b3cf3d4874404480e8bdc889/comments","author":null,"committer":null,"parents":[{"sha":"1e5f620cfe8249f779ae51add8a8fcc35931dd7a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1e5f620cfe8249f779ae51add8a8fcc35931dd7a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1e5f620cfe8249f779ae51add8a8fcc35931dd7a"},{"sha":"bbee3af7676bf566554bfb429191002890d1b577","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bbee3af7676bf566554bfb429191002890d1b577","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bbee3af7676bf566554bfb429191002890d1b577"}],"stats":{"total":37,"additions":17,"deletions":20},"files":[{"sha":"b4facfea2baea317fda948d03575bfbad72a2497","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SearchableFields.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4715ef1ea909a932b3cf3d4874404480e8bdc889/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4715ef1ea909a932b3cf3d4874404480e8bdc889/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSearchableFields.java?ref=4715ef1ea909a932b3cf3d4874404480e8bdc889","patch":"@@ -36,7 +36,7 @@\n public final class SearchableFields {\n \n     private static final String[] ATTRIBUTES_NOTINCLUDED = {\n-        \"serialVersionUID\", \"password\"\n+        \"serialVersionUID\", \"password\", \"type\", \"realm\", \"udynMembershipCond\"\n     };\n \n     private static final Set<String> ANY_FIELDS = new HashSet<>();"},{"sha":"745d82adc44c0048d265b4badb9b369493b342ba","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":16,"deletions":19,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4715ef1ea909a932b3cf3d4874404480e8bdc889/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4715ef1ea909a932b3cf3d4874404480e8bdc889/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=4715ef1ea909a932b3cf3d4874404480e8bdc889","patch":"@@ -35,6 +35,7 @@\n import javax.validation.constraints.Min;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.ClassUtils;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -885,16 +886,18 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n     private String getQuery(final AnyCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n+        AnyCond condClone = SerializationUtils.clone(cond);\n+        \n         AnyUtils attrUtils = anyUtilsFactory.getInstance(svs.anyTypeKind());\n \n         // Keeps track of difference between entity's getKey() and JPA @Id fields\n-        if (\"key\".equals(cond.getSchema())) {\n-            cond.setSchema(\"id\");\n+        if (\"key\".equals(condClone.getSchema())) {\n+            condClone.setSchema(\"id\");\n         }\n \n-        Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), cond.getSchema());\n+        Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), condClone.getSchema());\n         if (anyField == null) {\n-            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n+            LOG.warn(\"Ignoring invalid schema '{}'\", condClone.getSchema());\n             return EMPTY_QUERY;\n         }\n \n@@ -931,35 +934,29 @@ private String getQuery(final AnyCond cond, final boolean not, final List<Object\n                 LOG.error(\"Could not find {}#getKey\", anyField.getType(), e);\n             }\n \n-            if (relMethod != null) {\n-                if (Long.class.isAssignableFrom(relMethod.getReturnType())) {\n-                    cond.setSchema(cond.getSchema() + \"_id\");\n-                    schema.setType(AttrSchemaType.Long);\n-                }\n-                if (String.class.isAssignableFrom(relMethod.getReturnType())) {\n-                    cond.setSchema(cond.getSchema() + \"_id\");\n-                    schema.setType(AttrSchemaType.String);\n-                }\n+            if (relMethod != null && String.class.isAssignableFrom(relMethod.getReturnType())) {\n+                condClone.setSchema(condClone.getSchema() + \"_id\");\n+                schema.setType(AttrSchemaType.String);\n             }\n         }\n \n         PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n-        if (cond.getType() != AttributeCond.Type.LIKE\n-                && cond.getType() != AttributeCond.Type.ISNULL\n-                && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+        if (condClone.getType() != AttributeCond.Type.LIKE\n+                && condClone.getType() != AttributeCond.Type.ISNULL\n+                && condClone.getType() != AttributeCond.Type.ISNOTNULL) {\n \n             try {\n-                schema.getValidator().validate(cond.getExpression(), attrValue);\n+                schema.getValidator().validate(condClone.getExpression(), attrValue);\n             } catch (ValidationException e) {\n-                LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n+                LOG.error(\"Could not validate expression '\" + condClone.getExpression() + \"'\", e);\n                 return EMPTY_QUERY;\n             }\n         }\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n-        fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n+        fillAttributeQuery(query, attrValue, schema, condClone, not, parameters, svs);\n \n         return query.toString();\n     }"}]}