{"sha":"25c41ad81b491d1df7606f0b88db0c3d6cf079a6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI1YzQxYWQ4MWI0OTFkMWRmNzYwNmYwYjg4ZGIwYzNkNmNmMDc5YTY=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-23T15:25:18Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-23T15:25:18Z"},"message":"Fixed SYNCOPE-588","tree":{"sha":"ee61ce21dc1c06677cc121e41c4025fa2bdbb912","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ee61ce21dc1c06677cc121e41c4025fa2bdbb912"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/25c41ad81b491d1df7606f0b88db0c3d6cf079a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25c41ad81b491d1df7606f0b88db0c3d6cf079a6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/25c41ad81b491d1df7606f0b88db0c3d6cf079a6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"9a1474770d0f77cd5655072e43280b2176cdc404","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a1474770d0f77cd5655072e43280b2176cdc404","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9a1474770d0f77cd5655072e43280b2176cdc404"}],"stats":{"total":416,"additions":400,"deletions":16},"files":[{"sha":"251297b6d5fa563d64bbf693f16af046cdb6283b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/CommonsResultManager.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FCommonsResultManager.java?ref=25c41ad81b491d1df7606f0b88db0c3d6cf079a6","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n+import java.util.Set;\n import org.apache.syncope.client.cli.view.Messages;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n \n public abstract class CommonsResultManager {\n \n@@ -53,4 +55,20 @@ public void defaultError(final String option, final String helpMessage) {\n     public void generic(final String... messages) {\n         Messages.printMessage(messages);\n     }\n+    \n+    protected void printConfiguration(final Set<ConnConfProperty> configurationPropertys) {\n+        for (final ConnConfProperty configuration : configurationPropertys) {\n+            System.out.println(\"       name: \" + configuration.getSchema().getName());\n+            System.out.println(\"       values: \" + configuration.getValues());\n+            System.out.println(\"       type: \" + configuration.getSchema().getType());\n+            System.out.println(\"       display name: \" + configuration.getSchema().getDisplayName());\n+            System.out.println(\"       help message: \" + configuration.getSchema().getHelpMessage());\n+            System.out.println(\"       order: \" + configuration.getSchema().getOrder());\n+            System.out.println(\"       default values: \" + configuration.getSchema().getDefaultValues());\n+            System.out.println(\"       confidential: \" + configuration.getSchema().isConfidential());\n+            System.out.println(\"       required: \" + configuration.getSchema().isRequired());\n+            System.out.println(\"       overridable: \" + configuration.isOverridable());\n+            System.out.println(\"\");\n+        }\n+    }\n }"},{"sha":"b6edbc2a6352f20ad43db0f994f27fa540a2009a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/connector/ConnectorResultManager.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fconnector%2FConnectorResultManager.java?ref=25c41ad81b491d1df7606f0b88db0c3d6cf079a6","patch":"@@ -76,22 +76,6 @@ private void printCapabilities(final Set<ConnectorCapability> capabilities) {\n         }\n     }\n \n-    private void printConfiguration(final Set<ConnConfProperty> configurationPropertys) {\n-        for (final ConnConfProperty configuration : configurationPropertys) {\n-            System.out.println(\"       name: \" + configuration.getSchema().getName());\n-            System.out.println(\"       values: \" + configuration.getValues());\n-            System.out.println(\"       type: \" + configuration.getSchema().getType());\n-            System.out.println(\"       display name: \" + configuration.getSchema().getDisplayName());\n-            System.out.println(\"       help message: \" + configuration.getSchema().getHelpMessage());\n-            System.out.println(\"       order: \" + configuration.getSchema().getOrder());\n-            System.out.println(\"       default values: \" + configuration.getSchema().getDefaultValues());\n-            System.out.println(\"       confidential: \" + configuration.getSchema().isConfidential());\n-            System.out.println(\"       required: \" + configuration.getSchema().isRequired());\n-            System.out.println(\"       overridable: \" + configuration.isOverridable());\n-            System.out.println(\"\");\n-        }\n-    }\n-\n     private void printConfPool(final ConnPoolConfTO connPoolConfTO) {\n         System.out.println(\"       min idle: \" + connPoolConfTO.getMinIdle());\n         System.out.println(\"       min evictlable idle: \" + connPoolConfTO.getMinEvictableIdleTimeMillis());"},{"sha":"85d4a2d5e4c5948eee5c0ea00ade5cfedfe6d593","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/AbstractResourceCommand.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FAbstractResourceCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FAbstractResourceCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FAbstractResourceCommand.java?ref=25c41ad81b491d1df7606f0b88db0c3d6cf079a6","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.resource;\n+\n+import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n+\n+public abstract class AbstractResourceCommand {\n+\n+    protected final ResourceService resourceService = SyncopeServices.get(ResourceService.class);\n+\n+    protected final ResourceResultManager resourceResultManager = new ResourceResultManager();\n+\n+}"},{"sha":"942fcd20ed8dfc1cd750150a6a445aba9827ebce","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceCommand.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceCommand.java?ref=25c41ad81b491d1df7606f0b88db0c3d6cf079a6","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.resource;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.client.cli.commands.AbstractCommand;\n+\n+@Command(name = \"resource\")\n+public class ResourceCommand extends AbstractCommand {\n+\n+    private static final String HELP_MESSAGE = \"Usage: resource [options]\\n\"\n+            + \"  Options:\\n\"\n+            + \"    --help \\n\"\n+            + \"    --list \\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {CONNECTOR-ID} {CONNECTOR-ID} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {CONNECTOR-ID} {CONNECTOR-ID} [...]\";\n+\n+    @Override\n+    public void execute(final Input input) {\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(ResourceOptions.HELP.getOptionName());\n+        }\n+\n+        switch (ResourceOptions.fromName(input.getOption())) {\n+            case LIST:\n+                new ResourceList().list();\n+                break;\n+            case READ:\n+                new ResourceRead(input).read();\n+                break;\n+            case DELETE:\n+                new ResourceDelete(input).delete();\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                new ResourceResultManager().defaultError(input.getOption(), HELP_MESSAGE);\n+        }\n+    }\n+\n+    @Override\n+    public String getHelpMessage() {\n+        return HELP_MESSAGE;\n+    }\n+\n+    private enum ResourceOptions {\n+\n+        HELP(\"--help\"),\n+        LIST(\"--list\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        ResourceOptions(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static ResourceOptions fromName(final String name) {\n+            ResourceOptions optionToReturn = HELP;\n+            for (final ResourceOptions option : ResourceOptions.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n+                }\n+            }\n+            return optionToReturn;\n+        }\n+\n+        public static List<String> toList() {\n+            final List<String> options = new ArrayList<>();\n+            for (final ResourceOptions value : values()) {\n+                options.add(value.getOptionName());\n+            }\n+            return options;\n+        }\n+    }\n+\n+}"},{"sha":"c3ecd8497f54b071768ce6895a7c4aaa78c436ff","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceDelete.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceDelete.java?ref=25c41ad81b491d1df7606f0b88db0c3d6cf079a6","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.resource;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class ResourceDelete extends AbstractResourceCommand {\n+\n+    private static final String DELETE_HELP_MESSAGE = \"resource --delete {RESOURCE-NAME} {RESOURCE-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public ResourceDelete(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void delete() {\n+        if (input.getParameters().length >= 1) {\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    resourceService.delete(parameter);\n+                    resourceResultManager.deletedMessage(\"resource\", parameter);\n+                } catch (final NumberFormatException ex) {\n+                    resourceResultManager.managerNumberFormatException(\"resource\", parameter);\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        resourceResultManager.notFoundError(\"Resource\", parameter);\n+                    } else {\n+                        resourceResultManager.generic(ex.getMessage());\n+                    }\n+                    break;\n+                }\n+            }\n+        } else {\n+            resourceResultManager.commandOptionError(DELETE_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"85f05f537cdf9b0db148d973bbd97cf85d01f10a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceList.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceList.java?ref=25c41ad81b491d1df7606f0b88db0c3d6cf079a6","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.resource;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+\n+public class ResourceList extends AbstractResourceCommand {\n+\n+    public void list() {\n+        try {\n+            resourceResultManager.toView(resourceService.list());\n+        } catch (final SyncopeClientException ex) {\n+            resourceResultManager.generic(ex.getMessage());\n+        }\n+    }\n+}"},{"sha":"3790c020ed9f65cdbe45cd9167f2d067fedfccb2","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceRead.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceRead.java?ref=25c41ad81b491d1df7606f0b88db0c3d6cf079a6","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.resource;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.cli.Input;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+\n+public class ResourceRead extends AbstractResourceCommand {\n+\n+    private static final String READ_HELP_MESSAGE = \"resource --read {RESOURCE-NAME} {RESOURCE-NAME} [...]\";\n+\n+    private final Input input;\n+\n+    public ResourceRead(final Input input) {\n+        this.input = input;\n+    }\n+\n+    public void read() {\n+        if (input.getParameters().length >= 1) {\n+            final List<ResourceTO> resourceTOs = new ArrayList<>();\n+            for (final String parameter : input.getParameters()) {\n+                try {\n+                    resourceTOs.add(resourceService.read(parameter));\n+                } catch (final NumberFormatException ex) {\n+                    resourceResultManager.managerNumberFormatException(\"resource\", parameter);\n+                } catch (final SyncopeClientException | WebServiceException ex) {\n+                    if (ex.getMessage().startsWith(\"NotFound\")) {\n+                        resourceResultManager.notFoundError(\"Resource\", parameter);\n+                    } else {\n+                        resourceResultManager.generic(ex.getMessage());\n+                    }\n+                    break;\n+                }\n+            }\n+            resourceResultManager.toView(resourceTOs);\n+        } else {\n+            resourceResultManager.commandOptionError(READ_HELP_MESSAGE);\n+        }\n+    }\n+\n+}"},{"sha":"91847f42d677be1d98ce265b2a0495b5c9a460b7","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/resource/ResourceResultManager.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/25c41ad81b491d1df7606f0b88db0c3d6cf079a6/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fresource%2FResourceResultManager.java?ref=25c41ad81b491d1df7606f0b88db0c3d6cf079a6","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.cli.commands.resource;\n+\n+import java.util.List;\n+import org.apache.syncope.client.cli.commands.CommonsResultManager;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.MappingTO;\n+import org.apache.syncope.common.lib.to.ProvisionTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+\n+public class ResourceResultManager extends CommonsResultManager {\n+\n+    public void toView(final List<ResourceTO> resourceTOs) {\n+        for (final ResourceTO resourceTO : resourceTOs) {\n+            printResource(resourceTO);\n+        }\n+        System.out.println(\"\");\n+    }\n+\n+    private void printResource(final ResourceTO resourceTO) {\n+        System.out.println(\" > RESOURCE ID: \" + resourceTO.getKey());\n+        System.out.println(\"    connector dispaly name: \" + resourceTO.getConnectorDisplayName());\n+        System.out.println(\"    etag value: \" + resourceTO.getETagValue());\n+        System.out.println(\"    connector id: \" + resourceTO.getConnector());\n+        System.out.println(\"    account policy id: \" + resourceTO.getAccountPolicy());\n+        System.out.println(\"    password policy id: \" + resourceTO.getPasswordPolicy());\n+        System.out.println(\"    sync policy id: \" + resourceTO.getSyncPolicy());\n+        System.out.println(\"    creator: \" + resourceTO.getCreator());\n+        System.out.println(\"    creation date: \" + resourceTO.getCreationDate());\n+        System.out.println(\"    last modifier: \" + resourceTO.getLastModifier());\n+        System.out.println(\"    last change date: \" + resourceTO.getLastChangeDate());\n+        System.out.println(\"    propagation actions class: \" + resourceTO.getPropagationActionsClassNames());\n+        System.out.println(\"    propagation priority: \" + resourceTO.getPropagationPriority());\n+        System.out.println(\"    PROVISIONS:\");\n+        printProvision(resourceTO.getProvisions());\n+        System.out.println(\"    create trace level: \" + resourceTO.getCreateTraceLevel());\n+        System.out.println(\"    delete trace level: \" + resourceTO.getDeleteTraceLevel());\n+        System.out.println(\"    update trace level: \" + resourceTO.getUpdateTraceLevel());\n+        System.out.println(\"    sync trace level: \" + resourceTO.getSyncTraceLevel());\n+    }\n+\n+    private void printProvision(final List<ProvisionTO> provisionTOs) {\n+        for (final ProvisionTO provisionTO : provisionTOs) {\n+            System.out.println(\"       provision id: \" + provisionTO.getKey());\n+            System.out.println(\"       any type: \" + provisionTO.getAnyType());\n+            System.out.println(\"       object class: \" + provisionTO.getObjectClass());\n+            System.out.println(\"       sync token: \" + provisionTO.getSyncToken());\n+            System.out.println(\"       virtual schema: \" + provisionTO.getVirSchemas());\n+            System.out.println(\"       MAPPING: \");\n+            printMapping(provisionTO.getMapping());\n+        }\n+        System.out.println(\"\");\n+    }\n+\n+    private void printMapping(final MappingTO mappingTO) {\n+        System.out.println(\"          ConnObjectLink: \" + mappingTO.getConnObjectLink());\n+        System.out.println(\"          MAPPING ITEM: \");\n+        printMappingItem(mappingTO.getItems());\n+        System.out.println(\"\");\n+    }\n+\n+    private void printMappingItem(final List<MappingItemTO> mappingItemTOs) {\n+        for (final MappingItemTO mappingItemTO : mappingItemTOs) {\n+            System.out.println(\"             mapping key: \" + mappingItemTO.getKey());\n+            System.out.println(\"             mapping item type: \" + mappingItemTO.getIntMappingType().name());\n+            System.out.println(\"             internal attribute name: \" + mappingItemTO.getIntAttrName());\n+            System.out.println(\"             external attribute name: \" + mappingItemTO.getExtAttrName());\n+            System.out.println(\"             mandatory condition: \" + mappingItemTO.getMandatoryCondition());\n+            System.out.println(\"             transformers class: \"\n+                    + mappingItemTO.getMappingItemTransformerClassNames());\n+            System.out.println(\"             purpose: \" + mappingItemTO.getPurpose());\n+            System.out.println(\"             connector object key: \" + mappingItemTO.isConnObjectKey());\n+            System.out.println(\"             password: \" + mappingItemTO.isPassword());\n+        }\n+        System.out.println(\"\");\n+    }\n+\n+}"}]}