{"sha":"eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVhZWFiYzk4MzYwZjU0ZTZmZmRkY2Q5Y2IzZmUxMDMzNWFlODllNjI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-29T13:22:04Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-29T13:22:04Z"},"message":"Basic update now working for both users and roles: still missing some update on the PropagationManager and workflow connection\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246417 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6cc4a30a37bff31212c2c3a4fb8569ad8846549","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e6cc4a30a37bff31212c2c3a4fb8569ad8846549"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/comments","author":null,"committer":null,"parents":[{"sha":"c2d2be66e63ab59f5f57b1a6dd7cb7f4720ce0e9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c2d2be66e63ab59f5f57b1a6dd7cb7f4720ce0e9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c2d2be66e63ab59f5f57b1a6dd7cb7f4720ce0e9"}],"stats":{"total":1517,"additions":1216,"deletions":301},"files":[{"sha":"41ef6091d4be3991fba6c6d27fd0a15b7e68b426","filename":"client/src/main/java/org/syncope/client/AbstractBaseBean.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FAbstractBaseBean.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -12,15 +12,15 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.client.to;\n+package org.syncope.client;\n \n import java.io.Serializable;\n import org.apache.commons.lang.builder.EqualsBuilder;\n import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n \n-public abstract class AbstractBaseTO implements Serializable {\n+public abstract class AbstractBaseBean implements Serializable {\n \n     @Override\n     public boolean equals(Object obj) {","previous_filename":"client/src/main/java/org/syncope/client/to/AbstractBaseTO.java"},{"sha":"76f04da38bb320ab8d95759532edf2fa459dea22","filename":"client/src/main/java/org/syncope/client/mod/AbstractAttributableMod.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAbstractAttributableMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAbstractAttributableMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAbstractAttributableMod.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -0,0 +1,149 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.syncope.client.AbstractBaseBean;\n+\n+public abstract class AbstractAttributableMod extends AbstractBaseBean {\n+\n+    protected long id;\n+    protected Set<AttributeMod> attributesToBeUpdated;\n+    protected Set<String> attributesToBeRemoved;\n+    protected Set<String> derivedAttributesToBeAdded;\n+    protected Set<String> derivedAttributesToBeRemoved;\n+    protected Set<String> resourcesToBeAdded;\n+    protected Set<String> resourcesToBeRemoved;\n+\n+    public AbstractAttributableMod() {\n+        attributesToBeUpdated = new HashSet<AttributeMod>();\n+        attributesToBeRemoved = new HashSet<String>();\n+        derivedAttributesToBeAdded = new HashSet<String>();\n+        derivedAttributesToBeRemoved = new HashSet<String>();\n+        resourcesToBeAdded = new HashSet<String>();\n+        resourcesToBeRemoved = new HashSet<String>();\n+    }\n+\n+    public boolean addAttributeToBeRemoved(String attribute) {\n+        return attributesToBeRemoved.add(attribute);\n+    }\n+\n+    public boolean removeAttributeToBeRemoved(String attribute) {\n+        return attributesToBeRemoved.remove(attribute);\n+    }\n+\n+    public Set<String> getAttributesToBeRemoved() {\n+        return attributesToBeRemoved;\n+    }\n+\n+    public void setAttributesToBeRemoved(Set<String> attributesToBeRemoved) {\n+        this.attributesToBeRemoved = attributesToBeRemoved;\n+    }\n+\n+    public boolean addAttributeToBeUpdated(AttributeMod attribute) {\n+        return attributesToBeUpdated.add(attribute);\n+    }\n+\n+    public boolean removeAttributeToBeUpdated(AttributeMod attribute) {\n+        return attributesToBeUpdated.remove(attribute);\n+    }\n+\n+    public Set<AttributeMod> getAttributesToBeUpdated() {\n+        return attributesToBeUpdated;\n+    }\n+\n+    public void setAttributesToBeUpdated(\n+            Set<AttributeMod> attributesToBeUpdated) {\n+\n+        this.attributesToBeUpdated = attributesToBeUpdated;\n+    }\n+\n+    public boolean addDerivedAttributeToBeAdded(String derivedAttribute) {\n+        return derivedAttributesToBeAdded.add(derivedAttribute);\n+    }\n+\n+    public boolean removeDerivedAttributeToBeAdded(String derivedAttribute) {\n+        return derivedAttributesToBeAdded.remove(derivedAttribute);\n+    }\n+\n+    public Set<String> getDerivedAttributesToBeAdded() {\n+        return derivedAttributesToBeAdded;\n+    }\n+\n+    public void setDerivedAttributesToBeAdded(\n+            Set<String> derivedAttributesToBeAdded) {\n+\n+        this.derivedAttributesToBeAdded = derivedAttributesToBeAdded;\n+    }\n+\n+    public boolean addDerivedAttributeToBeRemoved(String derivedAttribute) {\n+        return derivedAttributesToBeRemoved.add(derivedAttribute);\n+    }\n+\n+    public boolean removeDerivedAttributeToBeRemoved(String derivedAttribute) {\n+        return derivedAttributesToBeRemoved.remove(derivedAttribute);\n+    }\n+\n+    public Set<String> getDerivedAttributesToBeRemoved() {\n+        return derivedAttributesToBeRemoved;\n+    }\n+\n+    public void setDerivedAttributesToBeRemoved(\n+            Set<String> derivedAttributesToBeRemoved) {\n+\n+        this.derivedAttributesToBeRemoved = derivedAttributesToBeRemoved;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public boolean addResourceToBeAdded(String resource) {\n+        return resourcesToBeAdded.add(resource);\n+    }\n+\n+    public boolean removeResourceToBeAdded(String resource) {\n+        return resourcesToBeAdded.remove(resource);\n+    }\n+\n+    public Set<String> getResourcesToBeAdded() {\n+        return resourcesToBeAdded;\n+    }\n+\n+    public void setResourcesToBeAdded(Set<String> resourcesToBeAdded) {\n+        this.resourcesToBeAdded = resourcesToBeAdded;\n+    }\n+\n+    public boolean addResourceToBeRemoved(String resource) {\n+        return resourcesToBeRemoved.add(resource);\n+    }\n+\n+    public boolean removeResourceToBeRemoved(String resource) {\n+        return resourcesToBeRemoved.remove(resource);\n+    }\n+\n+    public Set<String> getResourcesToBeRemoved() {\n+        return resourcesToBeRemoved;\n+    }\n+\n+    public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\n+        this.resourcesToBeRemoved = resourcesToBeRemoved;\n+    }\n+}"},{"sha":"e3ca7d7f38571b7d65a172869d62a22fb1231d61","filename":"client/src/main/java/org/syncope/client/mod/AttributeMod.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAttributeMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAttributeMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAttributeMod.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -0,0 +1,71 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class AttributeMod extends AbstractBaseBean {\n+\n+    private String schema;\n+    private Set<String> valuesToBeAdded;\n+    private Set<String> valuesToBeRemoved;\n+\n+    public AttributeMod() {\n+        valuesToBeAdded = new HashSet<String>();\n+        valuesToBeRemoved = new HashSet<String>();\n+    }\n+\n+    public String getSchema() {\n+        return schema;\n+    }\n+\n+    public void setSchema(String schema) {\n+        this.schema = schema;\n+    }\n+\n+    public boolean addValueToBeAdded(String value) {\n+        return valuesToBeAdded.add(value);\n+    }\n+\n+    public boolean removeValueToBeAdded(String value) {\n+        return valuesToBeAdded.remove(value);\n+    }\n+\n+    public Set<String> getValuesToBeAdded() {\n+        return valuesToBeAdded;\n+    }\n+\n+    public void setValuesToBeAdded(Set<String> valuesToBeAdded) {\n+        this.valuesToBeAdded = valuesToBeAdded;\n+    }\n+\n+    public boolean addValueToBeRemoved(String value) {\n+        return valuesToBeRemoved.add(value);\n+    }\n+\n+    public boolean removeValueToBeRemoved(String value) {\n+        return valuesToBeRemoved.remove(value);\n+    }\n+\n+    public Set<String> getValuesToBeRemoved() {\n+        return valuesToBeRemoved;\n+    }\n+\n+    public void setValuesToBeRemoved(Set<String> valuesToBeRemoved) {\n+        this.valuesToBeRemoved = valuesToBeRemoved;\n+    }\n+}"},{"sha":"e1883f85bd82519a6fcf040bd2cb3ca2a4547e30","filename":"client/src/main/java/org/syncope/client/mod/MembershipMod.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FMembershipMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FMembershipMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FMembershipMod.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -0,0 +1,69 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class MembershipMod extends AbstractAttributableMod {\n+\n+    private long role;\n+\n+    public long getRole() {\n+        return role;\n+    }\n+\n+    public void setRole(long role) {\n+        this.role = role;\n+    }\n+\n+    @Override\n+    public boolean addResourceToBeAdded(String resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean addResourceToBeRemoved(String resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Set<String> getResourcesToBeAdded() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n+    @Override\n+    public Set<String> getResourcesToBeRemoved() {\n+        return Collections.EMPTY_SET;\n+    }\n+\n+    @Override\n+    public boolean removeResourceToBeAdded(String resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean removeResourceToBeRemoved(String resource) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setResourcesToBeAdded(Set<String> resourcesToBeAdded) {\n+    }\n+\n+    @Override\n+    public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\n+    }\n+}"},{"sha":"08af75007b03063da5f0d6e353b0b4758de69fd1","filename":"client/src/main/java/org/syncope/client/mod/RoleMod.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -0,0 +1,48 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+public class RoleMod extends AbstractAttributableMod {\n+\n+    private String name;\n+    private boolean changeInheritAttributes;\n+    private boolean changeInheritDerivedAttributes;\n+\n+    public boolean isChangeInheritAttributes() {\n+        return changeInheritAttributes;\n+    }\n+\n+    public void setChangeInheritAttributes(boolean changeInheritAttributes) {\n+        this.changeInheritAttributes = changeInheritAttributes;\n+    }\n+\n+    public boolean isChangeInheritDerivedAttributes() {\n+        return changeInheritDerivedAttributes;\n+    }\n+\n+    public void setChangeInheritDerivedAttributes(\n+            boolean changeInheritDerivedAttributes) {\n+\n+        this.changeInheritDerivedAttributes = changeInheritDerivedAttributes;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"c3de59d438092ec2eb3756b46b53e012c4ea8466","filename":"client/src/main/java/org/syncope/client/mod/UserMod.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FUserMod.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -0,0 +1,52 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class UserMod extends AbstractAttributableMod {\n+\n+    private String password;\n+    private Set<MembershipMod> membershipMods;\n+\n+    public UserMod() {\n+        membershipMods = new HashSet<MembershipMod>();\n+    }\n+\n+    public boolean addMembershipMod(MembershipMod membershipMod) {\n+        return membershipMods.add(membershipMod);\n+    }\n+\n+    public boolean removeMembershipMod(MembershipMod membershipMod) {\n+        return membershipMods.remove(membershipMod);\n+    }\n+\n+    public Set<MembershipMod> getMembershipMods() {\n+        return membershipMods;\n+    }\n+\n+    public void setMembershipMods(Set<MembershipMod> membershipMods) {\n+        this.membershipMods = membershipMods;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+}"},{"sha":"921c7039b0794236dbaf135732c5ef9ca3a5cc61","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,8 +16,9 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import org.syncope.client.AbstractBaseBean;\n \n-public abstract class AbstractAttributableTO extends AbstractBaseTO {\n+public abstract class AbstractAttributableTO extends AbstractBaseBean {\n \n     protected long id;\n     protected Set<AttributeTO> attributes;"},{"sha":"3cff8e7c3de0713e88dfdd50ffa4a1064c367f04","filename":"client/src/main/java/org/syncope/client/to/AttributeTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributeTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,8 +16,9 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class AttributeTO extends AbstractBaseTO {\n+public class AttributeTO extends AbstractBaseBean {\n \n     private String schema;\n     private Set<String> values;"},{"sha":"5418bbfb45c291a84076dcac127e40ce34181ba5","filename":"client/src/main/java/org/syncope/client/to/ConfigurationTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,7 +14,9 @@\n  */\n package org.syncope.client.to;\n \n-public class ConfigurationTO extends AbstractBaseTO {\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class ConfigurationTO extends AbstractBaseBean {\n \n     private String confKey;\n     private String confValue;"},{"sha":"e998b4db20dcf0f66d5c4f583bfb35851c1b254c","filename":"client/src/main/java/org/syncope/client/to/ConfigurationTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class ConfigurationTOs extends AbstractBaseTO\n+public class ConfigurationTOs extends AbstractBaseBean\n         implements Iterable<ConfigurationTO> {\n \n     private List<ConfigurationTO> configurations;"},{"sha":"a123516ea588ee1421f19cd576b291902c269726","filename":"client/src/main/java/org/syncope/client/to/ConnectorBundleTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,8 +16,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class ConnectorBundleTO extends AbstractBaseTO {\n+public class ConnectorBundleTO extends AbstractBaseBean {\n \n     private String displayName;\n "},{"sha":"990abd5887a6c50f1d4cea731f8b161e47d2c6eb","filename":"client/src/main/java/org/syncope/client/to/ConnectorBundleTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorBundleTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class ConnectorBundleTOs extends AbstractBaseTO\n+public class ConnectorBundleTOs extends AbstractBaseBean\n         implements Iterable<ConnectorBundleTO> {\n \n     private List<ConnectorBundleTO> bundles;"},{"sha":"be2b2c5f9b610c7ea44e1da91b990901b3fb60ce","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,8 +16,9 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class ConnectorInstanceTO extends AbstractBaseTO {\n+public class ConnectorInstanceTO extends AbstractBaseBean {\n \n     private Long id;\n "},{"sha":"ba78c8161642d19ebce600ad570073a486770500","filename":"client/src/main/java/org/syncope/client/to/ConnectorInstanceTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnectorInstanceTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class ConnectorInstanceTOs extends AbstractBaseTO\n+public class ConnectorInstanceTOs extends AbstractBaseBean\n         implements Iterable<ConnectorInstanceTO> {\n \n     private List<ConnectorInstanceTO> instances;"},{"sha":"2bdd95d6996ab4cd4b4d12517ee7ea3181e65e48","filename":"client/src/main/java/org/syncope/client/to/DerivedSchemaTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,8 +16,9 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class DerivedSchemaTO extends AbstractBaseTO {\n+public class DerivedSchemaTO extends AbstractBaseBean {\n \n     private String name;\n     private String expression;"},{"sha":"3ca50e5932c64df02cc5e29fc58ab7b81563f80e","filename":"client/src/main/java/org/syncope/client/to/DerivedSchemaTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FDerivedSchemaTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class DerivedSchemaTOs extends AbstractBaseTO\n+public class DerivedSchemaTOs extends AbstractBaseBean\n         implements Iterable<DerivedSchemaTO> {\n \n     private List<DerivedSchemaTO> derivedSchemas;"},{"sha":"c03835454f3d20f37014d725812a0153c8fbc6b7","filename":"client/src/main/java/org/syncope/client/to/LeafSearchCondition.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FLeafSearchCondition.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,7 +14,9 @@\n  */\n package org.syncope.client.to;\n \n-public class LeafSearchCondition extends AbstractBaseTO {\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class LeafSearchCondition extends AbstractBaseBean {\n \n     public enum Type {\n "},{"sha":"2962249bbbb878da91f7af7751e7e7e561eab369","filename":"client/src/main/java/org/syncope/client/to/MembershipTO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FMembershipTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -19,13 +19,13 @@\n \n public class MembershipTO extends AbstractAttributableTO {\n \n-    private Long role;\n+    private long role;\n \n-    public Long getRole() {\n+    public long getRole() {\n         return role;\n     }\n \n-    public void setRole(Long role) {\n+    public void setRole(long role) {\n         this.role = role;\n     }\n "},{"sha":"14bfe2d058825826c6a0e306cb1aa6e8e8535699","filename":"client/src/main/java/org/syncope/client/to/NodeSearchCondition.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FNodeSearchCondition.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,7 +14,9 @@\n  */\n package org.syncope.client.to;\n \n-public class NodeSearchCondition extends AbstractBaseTO {\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class NodeSearchCondition extends AbstractBaseBean {\n \n     public enum Type {\n "},{"sha":"eb0068dbe91df183834655add9964bbd7b8de393","filename":"client/src/main/java/org/syncope/client/to/PropertyTO.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropertyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropertyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPropertyTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,10 +14,11 @@\n  */\n package org.syncope.client.to;\n \n-public class PropertyTO {\n+import org.syncope.client.AbstractBaseBean;\n \n-    private String key;\n+public class PropertyTO extends AbstractBaseBean {\n \n+    private String key;\n     private Object value;\n \n     public String getKey() {"},{"sha":"f247a3e8a40d758c32ff907e98d30d8135bbb65b","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,7 +14,9 @@\n  */\n package org.syncope.client.to;\n \n-public class ResourceTO extends AbstractBaseTO {\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class ResourceTO extends AbstractBaseBean {\n \n     /**\n      * The resource identifier is the name."},{"sha":"a73b2a953d36893be939840765c273b06ba01b2e","filename":"client/src/main/java/org/syncope/client/to/ResourceTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class ResourceTOs extends AbstractBaseTO\n+public class ResourceTOs extends AbstractBaseBean\n         implements Iterable<ResourceTO> {\n \n     private List<ResourceTO> resources;"},{"sha":"2714092e92e6a54342318f6f01c533e6d780c246","filename":"client/src/main/java/org/syncope/client/to/RoleTO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -19,7 +19,7 @@\n public class RoleTO extends AbstractAttributableTO {\n \n     private String name;\n-    private Long parent;\n+    private long parent;\n     private boolean inheritAttributes;\n     private boolean inheritDerivedAttributes;\n \n@@ -37,11 +37,11 @@ public void setName(String name) {\n         this.name = name;\n     }\n \n-    public Long getParent() {\n+    public long getParent() {\n         return parent;\n     }\n \n-    public void setParent(Long parent) {\n+    public void setParent(long parent) {\n         this.parent = parent;\n     }\n "},{"sha":"910b2be705c72bbb27b1adbf6f547fc2653a898c","filename":"client/src/main/java/org/syncope/client/to/RoleTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class RoleTOs extends AbstractBaseTO implements Iterable<RoleTO> {\n+public class RoleTOs extends AbstractBaseBean implements Iterable<RoleTO> {\n \n     private List<RoleTO> roles;\n "},{"sha":"c730b68561d5b4bb3f8f41819f45f8194a1b0cbf","filename":"client/src/main/java/org/syncope/client/to/SchemaMappingTO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,7 +14,9 @@\n  */\n package org.syncope.client.to;\n \n-public class SchemaMappingTO extends AbstractBaseTO {\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class SchemaMappingTO extends AbstractBaseBean {\n \n     private Long id;\n "},{"sha":"f60713ea5d403901f78a46a41de7b1f1786f5869","filename":"client/src/main/java/org/syncope/client/to/SchemaMappingTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaMappingTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class SchemaMappingTOs extends AbstractBaseTO\n+public class SchemaMappingTOs extends AbstractBaseBean\n         implements Iterable<SchemaMappingTO> {\n \n     private List<SchemaMappingTO> mappings;"},{"sha":"4f9736109f540f8410c8718315777b32e78fa3e6","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,9 +16,10 @@\n \n import java.util.HashSet;\n import java.util.Set;\n+import org.syncope.client.AbstractBaseBean;\n import org.syncope.types.SchemaType;\n \n-public class SchemaTO extends AbstractBaseTO {\n+public class SchemaTO extends AbstractBaseBean {\n \n     private String name;\n     private SchemaType type;"},{"sha":"7146c85bca1901c1ebe41be17e8be40157579f0a","filename":"client/src/main/java/org/syncope/client/to/SchemaTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class SchemaTOs extends AbstractBaseTO implements Iterable<SchemaTO> {\n+public class SchemaTOs extends AbstractBaseBean implements Iterable<SchemaTO> {\n \n     private List<SchemaTO> schemas;\n "},{"sha":"08db2e208eae351b627027fc09cffc293874620f","filename":"client/src/main/java/org/syncope/client/to/UserTOs.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTOs.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,8 +17,9 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n \n-public class UserTOs extends AbstractBaseTO implements Iterable<UserTO> {\n+public class UserTOs extends AbstractBaseBean implements Iterable<UserTO> {\n \n     private List<UserTO> users;\n "},{"sha":"993026b5b0a033477668866c6daa04844275a600","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -43,18 +43,15 @@ public enum SyncopeClientExceptionType {\n     NotFound(\n     \"Syncope.NotFound\",\n     \"Syncope.NotFound.entity\"),\n+    Propagation(\n+    \"Syncope.Propagation\",\n+    \"Syncope.Propagation.resourceName\"),\n     RejectedUserCreate(\n     \"Syncope.RejectUserCreate\",\n     \"Syncope.RejectUserCreate.syncopeUserId\"),\n     RequiredValuesMissing(\n     \"Syncope.RequiredValuesMissing\",\n     \"Syncope.RequiredValuesMissing.attributeName\"),\n-    Propagation(\n-    \"Syncope.Propagation\",\n-    \"Syncope.Propagation.resourceName\"),\n-    RequiredValueMissing(\n-    \"Syncope.RequiredValuesMissing\",\n-    \"Syncope.RequiredValuesMissing.attributeName\"),\n     Unknown(\n     \"Syncope.Unknown\",\n     \"\"),"},{"sha":"d87c65a0558adc2a36a6e10783ec1ab50a14c70e","filename":"core/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -417,7 +417,7 @@\n                     <container>\n                         <containerId>tomcat6x</containerId>\n                         <zipUrlInstaller>\n-                            <url>http://www.apache.org/dist/tomcat/tomcat-6/v6.0.29/bin/apache-tomcat-6.0.29.zip</url>\n+                            <url>http://www.apache.org/dist/tomcat/tomcat-6/v6.0.28/bin/apache-tomcat-6.0.28.zip</url>\n                             <installDir>${java.io.tmpdir}/tomcat</installDir>\n                         </zipUrlInstaller>\n                         <log>${cargo.log}</log>"},{"sha":"c69e41384197707ada3165cf26949364f03a2f4e","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttribute.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttribute.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,8 +14,8 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n@@ -64,19 +64,19 @@ public abstract <T extends AbstractAttributeValue> boolean addAttributeValue(\n     public abstract <T extends AbstractAttributeValue> boolean removeAttributeValue(\n             T attributeValue);\n \n-    public abstract Set<? extends AbstractAttributeValue> getAttributeValues();\n+    public <T extends AbstractAttributeValue> List<String> getAttributeValuesAsStrings() {\n+        List<T> values = getAttributeValues();\n \n-    public Set<String> getAttributeValuesAsStrings() {\n-        Set<? extends AbstractAttributeValue> values = getAttributeValues();\n-        \n-        Set<String> result = new HashSet<String>(values.size());\n-        for (AbstractAttributeValue attributeValue : values) {\n+        List<String> result = new ArrayList<String>(values.size());\n+        for (T attributeValue : values) {\n             result.add(attributeValue.getValueAsString());\n         }\n \n         return result;\n     }\n \n-    public abstract void setAttributeValues(\n-            Set<? extends AbstractAttributeValue> attributeValues);\n+    public abstract <T extends AbstractAttributeValue> List<T> getAttributeValues();\n+\n+    public abstract <T extends AbstractAttributeValue> void setAttributeValues(\n+            List<T> attributeValues);\n }"},{"sha":"bbf68a0e3ddee1b98fea0ebebc91ea4c1709b71c","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerivedAttribute.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,7 +16,7 @@\n \n import java.util.Collection;\n import java.util.Iterator;\n-import java.util.Set;\n+import java.util.List;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n@@ -56,7 +56,7 @@ public String getValue(Collection<? extends AbstractAttribute> attributes) {\n                 getDerivedSchema().getExpression());\n         JexlContext jexlContext = new MapContext();\n \n-        Set<? extends AbstractAttributeValue> attributeValues = null;\n+        List<? extends AbstractAttributeValue> attributeValues = null;\n         String expressionValue = null;\n         AbstractAttribute attribute = null;\n         AbstractAttributeValue attributeValue = null;"},{"sha":"6426d693929eaa08446a3ffefc3ddb2fd2cb13ac","filename":"core/src/main/java/org/syncope/core/persistence/beans/membership/MembershipAttribute.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembershipAttribute.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,8 +14,8 @@\n  */\n package org.syncope.core.persistence.beans.membership;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -33,12 +33,11 @@ public class MembershipAttribute extends AbstractAttribute {\n     private Membership owner;\n     @ManyToOne(fetch = FetchType.EAGER)\n     private MembershipSchema schema;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"attribute\")\n-    private Set<MembershipAttributeValue> attributeValues;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    private List<MembershipAttributeValue> attributeValues;\n \n     public MembershipAttribute() {\n-        attributeValues = new HashSet<MembershipAttributeValue>();\n+        attributeValues = new ArrayList<MembershipAttributeValue>();\n     }\n \n     @Override\n@@ -76,14 +75,15 @@ public <T extends AbstractAttributeValue> boolean removeAttributeValue(\n     }\n \n     @Override\n-    public Set<? extends AbstractAttributeValue> getAttributeValues() {\n-        return attributeValues;\n+    public <T extends AbstractAttributeValue> List<T> getAttributeValues() {\n+        return (List<T>) attributeValues;\n     }\n \n     @Override\n-    public void setAttributeValues(\n-            Set<? extends AbstractAttributeValue> attributeValues) {\n+    public <T extends AbstractAttributeValue> void setAttributeValues(\n+            List<T> attributeValues) {\n+\n+        this.attributeValues = (List<MembershipAttributeValue>) attributeValues;\n \n-        this.attributeValues = (Set<MembershipAttributeValue>) attributeValues;\n     }\n }"},{"sha":"c3ef14cdb725c67c6ad6375b07e3f891acd61df7","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/RoleAttribute.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRoleAttribute.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,8 +14,8 @@\n  */\n package org.syncope.core.persistence.beans.role;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -33,12 +33,11 @@ public class RoleAttribute extends AbstractAttribute {\n     private SyncopeRole owner;\n     @ManyToOne(fetch = FetchType.EAGER)\n     private RoleSchema schema;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"attribute\")\n-    private Set<RoleAttributeValue> attributeValues;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    private List<RoleAttributeValue> attributeValues;\n \n     public RoleAttribute() {\n-        attributeValues = new HashSet<RoleAttributeValue>();\n+        attributeValues = new ArrayList<RoleAttributeValue>();\n     }\n \n     @Override\n@@ -76,14 +75,15 @@ public <T extends AbstractAttributeValue> boolean removeAttributeValue(\n     }\n \n     @Override\n-    public Set<? extends AbstractAttributeValue> getAttributeValues() {\n-        return attributeValues;\n+    public <T extends AbstractAttributeValue> List<T> getAttributeValues() {\n+        return (List<T>) attributeValues;\n     }\n \n     @Override\n-    public void setAttributeValues(\n-            Set<? extends AbstractAttributeValue> attributeValues) {\n+    public <T extends AbstractAttributeValue> void setAttributeValues(\n+            List<T> attributeValues) {\n+\n+        this.attributeValues = (List<RoleAttributeValue>) attributeValues;\n \n-        this.attributeValues = (Set<RoleAttributeValue>) attributeValues;\n     }\n }"},{"sha":"46b08c2803bcff744834840a167f4b208d7bf908","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttribute.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttribute.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,8 +14,8 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.List;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -33,12 +33,11 @@ public class UserAttribute extends AbstractAttribute {\n     private SyncopeUser owner;\n     @ManyToOne(fetch = FetchType.EAGER)\n     private UserSchema schema;\n-    @OneToMany(cascade = CascadeType.ALL,\n-    fetch = FetchType.EAGER, mappedBy = \"attribute\")\n-    private Set<UserAttributeValue> attributeValues;\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"attribute\")\n+    private List<UserAttributeValue> attributeValues;\n \n     public UserAttribute() {\n-        attributeValues = new HashSet<UserAttributeValue>();\n+        attributeValues = new ArrayList<UserAttributeValue>();\n     }\n \n     @Override\n@@ -76,14 +75,15 @@ public <T extends AbstractAttributeValue> boolean removeAttributeValue(\n     }\n \n     @Override\n-    public Set<? extends AbstractAttributeValue> getAttributeValues() {\n-        return attributeValues;\n+    public <T extends AbstractAttributeValue> List<T> getAttributeValues() {\n+        return (List<T>) attributeValues;\n     }\n \n     @Override\n-    public void setAttributeValues(\n-            Set<? extends AbstractAttributeValue> attributeValues) {\n+    public <T extends AbstractAttributeValue> void setAttributeValues(\n+            List<T> attributeValues) {\n+\n+        this.attributeValues = (List<UserAttributeValue>) attributeValues;\n \n-        this.attributeValues = (Set<UserAttributeValue>) attributeValues;\n     }\n }"},{"sha":"cfa66228de638ae0455de1439243eaf189b2617b","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/UserAttributeValue.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttributeValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttributeValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUserAttributeValue.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -15,14 +15,17 @@\n package org.syncope.core.persistence.beans.user;\n \n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang.builder.ToStringStyle;\n import org.syncope.core.persistence.beans.AbstractAttribute;\n import org.syncope.core.persistence.beans.AbstractAttributeValue;\n \n @Entity\n public class UserAttributeValue extends AbstractAttributeValue {\n \n-    @ManyToOne\n+    @ManyToOne(fetch = FetchType.EAGER)\n     private UserAttribute attribute;\n \n     @Override\n@@ -34,4 +37,10 @@ public <T extends AbstractAttribute> T getAttribute() {\n     public <T extends AbstractAttribute> void setAttribute(T attribute) {\n         this.attribute = (UserAttribute) attribute;\n     }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this,\n+                ToStringStyle.MULTI_LINE_STYLE);\n+    }\n }"},{"sha":"33f1ecc91ed1ca878a001899a12a453dc6d08a9f","filename":"core/src/main/java/org/syncope/core/persistence/dao/AttributeValueDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeValueDAO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -29,4 +29,6 @@ <T extends AbstractAttributeValue> boolean existingAttributeValue(\n     <T extends AbstractAttributeValue> T save(T attributeValue);\n \n     <T extends AbstractAttributeValue> void delete(Long id, Class<T> reference);\n+\n+    <T extends AbstractAttributeValue> void delete(T attributeValue);\n }"},{"sha":"25ac26e93dd5d0cd5db60594a43561faf519aca2","filename":"core/src/main/java/org/syncope/core/persistence/dao/MembershipDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FMembershipDAO.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,11 +16,15 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n \n public interface MembershipDAO extends DAO {\n \n     Membership find(Long id);\n \n+    Membership find(SyncopeUser user, SyncopeRole role);\n+\n     List<Membership> findAll();\n \n     Membership save(Membership membership);"},{"sha":"56530d3959e2b09bb7618755ad2490adb64c4ccd","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttributeValueDAOImpl.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributeValueDAOImpl.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -77,6 +77,16 @@ public <T extends AbstractAttributeValue> void delete(Long id,\n             return;\n         }\n \n+        delete(attributeValue);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public <T extends AbstractAttributeValue> void delete(T attributeValue) {\n+        if (attributeValue.getAttribute() != null) {\n+            attributeValue.getAttribute().removeAttributeValue(attributeValue);\n+        }\n+\n         entityManager.remove(attributeValue);\n     }\n }"},{"sha":"cc525eede3347bb006c73080d849598de42b1d7f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/MembershipDAOImpl.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -15,10 +15,13 @@\n package org.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n+import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.membership.Membership;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.MembershipDAO;\n \n @Repository\n@@ -30,6 +33,27 @@ public Membership find(Long id) {\n         return entityManager.find(Membership.class, id);\n     }\n \n+    @Override\n+    public Membership find(SyncopeUser user, SyncopeRole role) {\n+        Query query = entityManager.createQuery(\"SELECT e FROM Membership e \"\n+                + \"WHERE e.syncopeUser = :user AND e.syncopeRole = :role\");\n+        query.setParameter(\"user\", user);\n+        query.setParameter(\"role\", role);\n+\n+        Membership result = null;\n+\n+        try {\n+            result = (Membership) query.getSingleResult();\n+        } catch (NoResultException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"No membership was found for user \"\n+                        + user + \" and role \" + role);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public List<Membership> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM Membership e\");"},{"sha":"c754c6db7e0a0d95a98e8a18799d340debbe0619","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,6 +16,7 @@\n \n import java.util.Collections;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import org.identityconnectors.framework.api.ConnectorFacade;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -220,9 +221,9 @@ private void propagate(SyncopeUser user, Resource resource, boolean merge)\n             if (log.isErrorEnabled()) {\n \n                 log.error(\n-                        \"Connector instance bean \" +\n-                        connectorInstance.getId().toString() +\n-                        \" not found\");\n+                        \"Connector instance bean \"\n+                        + connectorInstance.getId().toString()\n+                        + \" not found\");\n \n             }\n \n@@ -257,7 +258,7 @@ private void propagate(SyncopeUser user, Resource resource, boolean merge)\n         // syncope user attribute schema type\n         SchemaType type = null;\n         // syncope user attribute values\n-        Set<UserAttributeValue> values = null;\n+        List<UserAttributeValue> values = null;\n \n \n         for (SchemaMapping mapping : mappings) {\n@@ -279,19 +280,19 @@ private void propagate(SyncopeUser user, Resource resource, boolean merge)\n \n             if (log.isDebugEnabled()) {\n                 log.debug(\n-                        \"\\nDefine mapping for: \" +\n-                        \"\\n* Field \" + field +\n-                        \"\\n* is accountId \" + mapping.isAccountid() +\n-                        \"\\n* is password \" + mapping.isPassword() +\n-                        \"\\n* is nullable \" + mapping.isNullable() +\n-                        \"\\n* Schema \" + schema +\n-                        \"\\n* Type \" + type.getClassName());\n+                        \"\\nDefine mapping for: \"\n+                        + \"\\n* Field \" + field\n+                        + \"\\n* is accountId \" + mapping.isAccountid()\n+                        + \"\\n* is password \" + mapping.isPassword()\n+                        + \"\\n* is nullable \" + mapping.isNullable()\n+                        + \"\\n* Schema \" + schema\n+                        + \"\\n* Type \" + type.getClassName());\n             }\n \n             objValues = new HashSet();\n \n             if (userAttribute != null) {\n-                values = (Set<UserAttributeValue>) userAttribute.getAttributeValues();\n+                values = userAttribute.getAttributeValues();\n \n                 for (UserAttributeValue value : values) {\n                     objValues.add(value.getValue());\n@@ -308,9 +309,9 @@ private void propagate(SyncopeUser user, Resource resource, boolean merge)\n                         password.toCharArray()));\n             }\n \n-            if (!mapping.isPassword() &&\n-                    !mapping.isAccountid() &&\n-                    !objValues.isEmpty()) {\n+            if (!mapping.isPassword()\n+                    && !mapping.isAccountid()\n+                    && !objValues.isEmpty()) {\n \n                 if (mapping.getUserSchema().isMultivalue()) {\n                     attrs.add(AttributeBuilder.build(field, objValues));"},{"sha":"80104513e7e4cbacc36d4107d84a4413ee5e6148","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -336,7 +336,7 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n                 }\n \n                 SyncopeClientException ex = new SyncopeClientException(\n-                        SyncopeClientExceptionType.RequiredValueMissing);\n+                        SyncopeClientExceptionType.RequiredValuesMissing);\n \n                 ex.addElement(\"resource\");\n \n@@ -349,7 +349,7 @@ public SchemaMappingTOs createMappings(HttpServletResponse response,\n                 }\n \n                 SyncopeClientException ex = new SyncopeClientException(\n-                        SyncopeClientExceptionType.RequiredValueMissing);\n+                        SyncopeClientExceptionType.RequiredValuesMissing);\n \n                 ex.addElement(\"mappings\");\n \n@@ -460,7 +460,7 @@ public SchemaMappingTOs getResourceMapping(HttpServletResponse response,\n                     HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException ex = new SyncopeClientException(\n-                    SyncopeClientExceptionType.RequiredValueMissing);\n+                    SyncopeClientExceptionType.RequiredValuesMissing);\n \n             ex.addElement(\"resource\");\n \n@@ -500,7 +500,7 @@ public SchemaMappingTOs getRoleResourcesMapping(HttpServletResponse response,\n                     HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException ex = new SyncopeClientException(\n-                    SyncopeClientExceptionType.RequiredValueMissing);\n+                    SyncopeClientExceptionType.RequiredValuesMissing);\n \n             ex.addElement(\"resource\");\n "},{"sha":"2f774dc697923da987fffeb843988895c7255485","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -25,6 +25,7 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.RoleTOs;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -153,10 +154,23 @@ public RoleTO read(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public RoleTO update(HttpServletResponse response,\n-            @RequestBody RoleTO roleTO) {\n+            @RequestBody RoleMod roleMod) throws NotFoundException {\n \n-        log.info(\"update called with parameter \" + roleTO);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"update called with parameter \" + roleMod);\n+        }\n+\n+        SyncopeRole syncopeRole = syncopeRoleDAO.find(roleMod.getId());\n \n-        return roleTO;\n+        if (syncopeRole == null) {\n+            log.error(\"Could not find user '\" + roleMod.getId() + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(roleMod.getId()));\n+        }\n+\n+        syncopeRole = roleDataBinder.updateSyncopeRole(syncopeRole, roleMod);\n+        syncopeRole = syncopeRoleDAO.save(syncopeRole);\n+\n+        return roleDataBinder.getRoleTO(syncopeRole);\n     }\n }"},{"sha":"0b356e668f19b7b2ba298fd4e975c2b34fd008d7","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":24,"deletions":10,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -44,6 +44,7 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n+import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.NodeSearchCondition;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -75,8 +76,7 @@ public class UserController extends AbstractController {\n     @Autowired\n     private PropagationManager propagationManager;\n \n-    private UserTO executeAction(String actionName,\n-            HttpServletResponse response, UserTO userTO)\n+    private UserTO executeAction(String actionName, UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n         SyncopeUser syncopeUser = syncopeUserDAO.find(userTO.getId());\n@@ -122,7 +122,7 @@ public UserTO activate(HttpServletResponse response,\n             @RequestBody UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n-        return executeAction(Constants.ACTION_ACTIVATE, response, userTO);\n+        return executeAction(Constants.ACTION_ACTIVATE, userTO);\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -135,7 +135,7 @@ public UserTO create(HttpServletRequest request,\n             @RequestParam(value = \"syncResources\",\n             required = false) Set<String> syncResources)\n             throws SyncopeClientCompositeErrorException,\n-            WorkflowException, PropagationException {\n+            WorkflowException, PropagationException, NotFoundException {\n \n         if (syncRoles == null) {\n             syncRoles = Collections.EMPTY_SET;\n@@ -167,7 +167,7 @@ public UserTO create(HttpServletRequest request,\n         if (wie != null) {\n             switch (wie.getExceptionOperation()) {\n                 case OVERWRITE:\n-                    return update(response, userTO);\n+                    return update(response, new UserMod());\n                 case REJECT:\n                     SyncopeClientCompositeErrorException compositeException =\n                             new SyncopeClientCompositeErrorException(\n@@ -285,7 +285,7 @@ public UserTO generateToken(HttpServletResponse response,\n \n         UserTO userTO = new UserTO();\n         userTO.setId(userId);\n-        return executeAction(Constants.ACTION_GENERATE_TOKEN, response, userTO);\n+        return executeAction(Constants.ACTION_GENERATE_TOKEN, userTO);\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -294,7 +294,7 @@ public UserTO verifyToken(HttpServletResponse response,\n             @RequestBody UserTO userTO)\n             throws WorkflowException, NotFoundException {\n \n-        return executeAction(Constants.ACTION_VERIFY_TOKEN, response, userTO);\n+        return executeAction(Constants.ACTION_VERIFY_TOKEN, userTO);\n     }\n \n     @RequestMapping(method = RequestMethod.POST,\n@@ -350,10 +350,24 @@ public ModelAndView getStatus(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public UserTO update(HttpServletResponse response,\n-            @RequestBody UserTO userTO) {\n+            @RequestBody UserMod userMod) throws NotFoundException {\n \n-        log.info(\"update called with parameter \" + userTO);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"update called with parameter \" + userMod);\n+        }\n+\n+        SyncopeUser syncopeUser = syncopeUserDAO.find(userMod.getId());\n+\n+        if (syncopeUser == null) {\n+            log.error(\"Could not find user '\" + userMod.getId() + \"'\");\n \n-        return userTO;\n+            throw new NotFoundException(String.valueOf(userMod.getId()));\n+        }\n+\n+        syncopeUser = userDataBinder.updateSyncopeUser(syncopeUser, userMod);\n+        syncopeUser = syncopeUserDAO.save(syncopeUser);\n+\n+        // TODO: workflow\n+        return userDataBinder.getUserTO(syncopeUser);\n     }\n }"},{"sha":"ef3609fa6e70c31a0721a5a6f7b015db7c02e253","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":348,"deletions":100,"changes":448,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -14,11 +14,15 @@\n  */\n package org.syncope.core.rest.data;\n \n+import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.syncope.client.mod.AbstractAttributableMod;\n+import org.syncope.client.mod.AttributeMod;\n import org.syncope.client.to.AbstractAttributableTO;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n@@ -32,8 +36,11 @@\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.MembershipDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n@@ -48,97 +55,365 @@ class AbstractAttributableDataBinder {\n     protected SyncopeRoleDAO syncopeRoleDAO;\n     protected SchemaDAO schemaDAO;\n     protected DerivedSchemaDAO derivedSchemaDAO;\n+    protected AttributeDAO attributeDAO;\n+    protected DerivedAttributeDAO derivedAttributeDAO;\n     protected AttributeValueDAO attributeValueDAO;\n     protected SyncopeUserDAO syncopeUserDAO;\n     protected ResourceDAO resourceDAO;\n+    protected MembershipDAO membershipDAO;\n \n-    protected <T extends AbstractAttributable> T fill(\n-            T abstractAttributable,\n-            AbstractAttributableTO abstractAttributableTO,\n+    private <T extends AbstractSchema> AbstractSchema getSchema(\n+            String schemaName, Class<T> reference) {\n+\n+        T schema = schemaDAO.find(schemaName, reference);\n+\n+        // safely ignore invalid schemas from AttributeTO\n+        // see http://code.google.com/p/syncope/issues/detail?id=17\n+        if (schema == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring invalid schema \" + schemaName);\n+            }\n+        } else if (schema.isVirtual()) {\n+            schema = null;\n+\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring virtual schema \" + schemaName);\n+            }\n+        }\n+\n+        return schema;\n+    }\n+\n+    private <T extends AbstractDerivedSchema> AbstractDerivedSchema getDerivedSchema(\n+            String derivedSchemaName, Class<T> reference) {\n+\n+        T derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n+\n+        if (derivedSchema == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring invalid derivedschema \"\n+                        + derivedSchemaName);\n+            }\n+        }\n+\n+        return derivedSchema;\n+    }\n+\n+    private Resource getResource(String resourceName) {\n+        Resource resource = resourceDAO.find(resourceName);\n+\n+        if (resource == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring invalid resource \" + resourceName);\n+            }\n+        }\n+\n+        return resource;\n+    }\n+\n+    private void fillAttribute(Set<String> values,\n             AttributableUtil attributableUtil,\n-            SyncopeClientCompositeErrorException compositeErrorException)\n-            throws SyncopeClientCompositeErrorException {\n+            AbstractSchema schema,\n+            AbstractAttribute attribute,\n+            AbstractAttributeValue attributeValue,\n+            SyncopeClientException invalidValues,\n+            SyncopeClientException invalidUniques) {\n+\n+        // if the schema is multivale, all values are considered for\n+        // addition, otherwise only the fist one - if provided - is\n+        // considered\n+        Set<String> valuesProvided = schema.isMultivalue()\n+                ? values\n+                : (values.isEmpty()\n+                ? Collections.EMPTY_SET\n+                : Collections.singleton(\n+                values.iterator().next()));\n+\n+        for (String value : valuesProvided) {\n+            attributeValue = attributableUtil.newAttributeValue();\n+\n+            try {\n+                attributeValue = attribute.addValue(value,\n+                        attributeValue);\n+            } catch (ValidationException e) {\n+                log.error(\"Invalid value for attribute \"\n+                        + schema.getName() + \": \" + value, e);\n+\n+                invalidValues.addElement(value);\n+            }\n+\n+            // if the schema is uniquevalue, check the uniqueness\n+            if (schema.isUniquevalue()\n+                    && attributeValueDAO.existingAttributeValue(\n+                    attributeValue)) {\n+\n+                log.error(\"Unique value schema \" + schema.getName()\n+                        + \" with no unique value: \"\n+                        + attributeValue.getValueAsString());\n+\n+                invalidUniques.addElement(schema.getName());\n+                attribute.setAttributeValues(Collections.EMPTY_LIST);\n+            }\n+        }\n+    }\n+\n+    private <T extends AbstractSchema> SyncopeClientException checkMandatory(\n+            Class<T> referenceSchema,\n+            AbstractAttributable attributable) {\n \n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n+\n+        // Check if there is some mandatory schema defined for which no value\n+        // has been provided\n+        List<T> allSchemas = schemaDAO.findAll(referenceSchema);\n+        for (T schema : allSchemas) {\n+            if (attributable.getAttribute(schema.getName()) == null\n+                    && schema.isMandatory()) {\n+\n+                log.error(\"Mandatory schema \" + schema.getName()\n+                        + \" not provided with values\");\n+\n+                requiredValuesMissing.addElement(schema.getName());\n+            }\n+        }\n+\n+        return requiredValuesMissing;\n+    }\n+\n+    protected <T extends AbstractAttributable> T fill(\n+            T attributable,\n+            AbstractAttributableMod attributableMod,\n+            AttributableUtil attributableUtil,\n+            SyncopeClientCompositeErrorException compositeErrorException)\n+            throws SyncopeClientCompositeErrorException {\n+\n         SyncopeClientException invalidValues = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidValues);\n         SyncopeClientException invalidUniques = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidUniques);\n \n-        // 1. attributes\n+        // 1. attributes to be updated\n         AbstractSchema schema = null;\n         AbstractAttribute attribute = null;\n-        Set<String> valuesProvided = null;\n         AbstractAttributeValue attributeValue = null;\n-        for (AttributeTO attributeTO : abstractAttributableTO.getAttributes()) {\n-            schema = schemaDAO.find(attributeTO.getSchema(),\n+        Set<Long> valuesToBeRemoved = null;\n+        for (AttributeMod attributeMod :\n+                attributableMod.getAttributesToBeUpdated()) {\n+\n+            schema = getSchema(attributeMod.getSchema(),\n                     attributableUtil.getSchemaClass());\n \n-            // safely ignore invalid schemas from AttributeTO\n-            // see http://code.google.com/p/syncope/issues/detail?id=17\n-            if (schema == null) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid schema \"\n-                            + attributeTO.getSchema());\n+            if (schema != null) {\n+                attribute = attributable.getAttribute(schema.getName());\n+                if (attribute == null) {\n+                    attribute = attributableUtil.newAttribute();\n+                    attribute.setSchema(schema);\n+                    attribute.setOwner(attributable);\n+\n+                    attributable.addAttribute(attribute);\n                 }\n-            } else if (schema.isVirtual()) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring virtual schema\" + schema.getName());\n+\n+                // 1.1 remove values\n+                valuesToBeRemoved = new HashSet<Long>();\n+                for (String valueToBeRemoved :\n+                        attributeMod.getValuesToBeRemoved()) {\n+\n+                    for (AbstractAttributeValue mav :\n+                            attribute.getAttributeValues()) {\n+\n+                        if (valueToBeRemoved.equals(mav.getValueAsString())) {\n+                            valuesToBeRemoved.add(mav.getId());\n+                        }\n+                    }\n                 }\n-            } else {\n-                attribute = attributableUtil.newAttribute();\n-                attribute.setSchema(schema);\n-                attribute.setOwner(abstractAttributable);\n-\n-                // if the schema is multivale, all values are considered for\n-                // addition, otherwise only the fist one - if provided - is\n-                // considered\n-                valuesProvided = schema.isMultivalue()\n-                        ? attributeTO.getValues()\n-                        : (attributeTO.getValues().isEmpty()\n-                        ? Collections.EMPTY_SET\n-                        : Collections.singleton(\n-                        attributeTO.getValues().iterator().next()));\n-                for (String value : valuesProvided) {\n-                    attributeValue = attributableUtil.newAttributeValue();\n-\n-                    try {\n-                        attributeValue = attribute.addValue(value,\n-                                attributeValue);\n-                    } catch (ValidationException e) {\n-                        log.error(\"Invalid value for attribute \"\n-                                + schema.getName() + \": \" + value, e);\n-\n-                        invalidValues.addElement(schema.getName());\n+                for (Long attributeValueId : valuesToBeRemoved) {\n+                    attributeValueDAO.delete(attributeValueId,\n+                            attributableUtil.getAttributeValueClass());\n+                }\n+\n+                // 1.2 add values\n+                fillAttribute(attributeMod.getValuesToBeAdded(),\n+                        attributableUtil, schema, attribute,\n+                        attributeValue, invalidValues, invalidUniques);\n+\n+                // if no values are in, the attribute can be saely removed\n+                if (attribute.getAttributeValues().isEmpty()) {\n+                    attributeDAO.delete(attribute);\n+                }\n+            }\n+        }\n+\n+        // 2. attributes to be removed\n+        for (String attributeToBeRemoved :\n+                attributableMod.getAttributesToBeRemoved()) {\n+\n+            schema = getSchema(attributeToBeRemoved,\n+                    attributableUtil.getSchemaClass());\n+\n+            if (schema != null) {\n+                attribute = attributable.getAttribute(schema.getName());\n+                if (attribute == null) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No attribute found for schema \"\n+                                + schema.getName());\n                     }\n+                } else {\n+                    attributeDAO.delete(attribute);\n+                }\n+            }\n+        }\n+\n+        if (!invalidValues.getElements().isEmpty()) {\n+            compositeErrorException.addException(invalidValues);\n+        }\n+        if (!invalidUniques.getElements().isEmpty()) {\n+            compositeErrorException.addException(invalidUniques);\n+        }\n+\n+        SyncopeClientException requiredValuesMissing =\n+                checkMandatory(attributableUtil.getSchemaClass(), attributable);\n+        if (!requiredValuesMissing.getElements().isEmpty()) {\n+            compositeErrorException.addException(requiredValuesMissing);\n+        }\n+\n+        // 3. derived attributes to be added\n+        AbstractDerivedSchema derivedSchema = null;\n+        AbstractDerivedAttribute derivedAttribute = null;\n+        for (String derivedAttributeToBeAdded :\n+                attributableMod.getDerivedAttributesToBeAdded()) {\n \n-                    // if the schema is uniquevalue, check the uniqueness\n-                    if (schema.isUniquevalue()\n-                            && attributeValueDAO.existingAttributeValue(\n-                            attributeValue)) {\n+            derivedSchema = getDerivedSchema(derivedAttributeToBeAdded,\n+                    attributableUtil.getDerivedSchemaClass());\n+            if (derivedSchema != null) {\n+                derivedAttribute = attributableUtil.newDerivedAttribute();\n+                derivedAttribute.setDerivedSchema(derivedSchema);\n+                derivedAttribute.setOwner(attributable);\n+                attributable.addDerivedAttribute(derivedAttribute);\n+            }\n+        }\n \n-                        log.error(\"Unique value schema \" + schema.getName()\n-                                + \" with no unique value: \"\n-                                + attributeValue.getValueAsString());\n+        // 4. derived attributes to be removed\n+        for (String derivedAttributeToBeRemoved :\n+                attributableMod.getDerivedAttributesToBeRemoved()) {\n \n-                        invalidUniques.addElement(schema.getName());\n-                        attribute.setAttributeValues(Collections.EMPTY_SET);\n+            derivedSchema = getDerivedSchema(derivedAttributeToBeRemoved,\n+                    attributableUtil.getDerivedSchemaClass());\n+            if (derivedSchema != null) {\n+                derivedAttribute = attributable.getDerivedAttribute(\n+                        derivedSchema.getName());\n+\n+                if (attribute == null) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"No derived attribute found for schema \"\n+                                + derivedSchema.getName());\n                     }\n+                } else {\n+                    derivedAttributeDAO.delete(derivedAttribute);\n                 }\n+            }\n+        }\n+\n+        // 5. resources to be removed\n+        Resource resource = null;\n+        for (String resourceToBeRemoved :\n+                attributableMod.getResourcesToBeRemoved()) {\n+\n+            resource = getResource(resourceToBeRemoved);\n+\n+            if (resource != null) {\n+                attributable.removeResource(resource);\n+\n+                if (attributableUtil == attributableUtil.USER) {\n+                    resource.removeUser((SyncopeUser) attributable);\n+                }\n+                if (attributableUtil == attributableUtil.ROLE) {\n+                    resource.removeRole((SyncopeRole) attributable);\n+                }\n+            }\n+        }\n+\n+\n+        // 6. resources to be added\n+        for (String resourceToBeAdded :\n+                attributableMod.getResourcesToBeAdded()) {\n+\n+            resource = getResource(resourceToBeAdded);\n+\n+            if (resource != null) {\n+                attributable.addResource(resource);\n+\n+                if (attributableUtil == attributableUtil.USER) {\n+                    resource.addUser((SyncopeUser) attributable);\n+                }\n+                if (attributableUtil == attributableUtil.ROLE) {\n+                    resource.addRole((SyncopeRole) attributable);\n+                }\n+            }\n+        }\n+        // Throw composite exception if there is at least one element set\n+        // in the composing exceptions\n+        if (compositeErrorException.hasExceptions()) {\n+            throw compositeErrorException;\n+        }\n+\n+        return attributable;\n+    }\n+\n+    protected <T extends AbstractAttributable> T fill(\n+            T attributable,\n+            AbstractAttributableTO attributableTO,\n+            AttributableUtil attributableUtil,\n+            SyncopeClientCompositeErrorException compositeErrorException)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        // 1. attributes\n+        SyncopeClientException invalidValues = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidValues);\n+        SyncopeClientException invalidUniques = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidUniques);\n+\n+        AbstractSchema schema = null;\n+        AbstractAttribute attribute = null;\n+        AbstractAttributeValue attributeValue = null;\n+        for (AttributeTO attributeTO : attributableTO.getAttributes()) {\n+            schema = getSchema(attributeTO.getSchema(),\n+                    attributableUtil.getSchemaClass());\n+\n+            if (schema != null) {\n+                attribute = attributableUtil.newAttribute();\n+                attribute.setSchema(schema);\n+                attribute.setOwner(attributable);\n+\n+                fillAttribute(attributeTO.getValues(),\n+                        attributableUtil, schema, attribute,\n+                        attributeValue, invalidValues, invalidUniques);\n \n                 if (!attribute.getAttributeValues().isEmpty()) {\n-                    abstractAttributable.addAttribute(attribute);\n+                    attributable.addAttribute(attribute);\n                 }\n             }\n         }\n \n+        if (!invalidValues.getElements().isEmpty()) {\n+            compositeErrorException.addException(invalidValues);\n+        }\n+        if (!invalidUniques.getElements().isEmpty()) {\n+            compositeErrorException.addException(invalidUniques);\n+        }\n+\n+        SyncopeClientException requiredValuesMissing =\n+                checkMandatory(attributableUtil.getSchemaClass(), attributable);\n+        if (!requiredValuesMissing.getElements().isEmpty()) {\n+            compositeErrorException.addException(requiredValuesMissing);\n+        }\n+\n         // 2. derived attributes\n         AbstractDerivedSchema derivedSchema = null;\n         AbstractDerivedAttribute derivedAttribute = null;\n         for (AttributeTO attributeTO :\n-                abstractAttributableTO.getDerivedAttributes()) {\n+                attributableTO.getDerivedAttributes()) {\n \n             derivedSchema = derivedSchemaDAO.find(attributeTO.getSchema(),\n                     attributableUtil.getDerivedSchemaClass());\n@@ -151,92 +426,65 @@ protected <T extends AbstractAttributable> T fill(\n             } else {\n                 derivedAttribute = attributableUtil.newDerivedAttribute();\n                 derivedAttribute.setDerivedSchema(derivedSchema);\n-                derivedAttribute.setOwner(abstractAttributable);\n-                abstractAttributable.addDerivedAttribute(derivedAttribute);\n-            }\n-        }\n-        // Check if there is some mandatory schema defined for which no value\n-        // has been provided\n-        List<AbstractSchema> allUserSchemas =\n-                schemaDAO.findAll(attributableUtil.getSchemaClass());\n-        for (AbstractSchema userSchema : allUserSchemas) {\n-            if (abstractAttributable.getAttribute(userSchema.getName()) == null\n-                    && userSchema.isMandatory()) {\n-\n-                log.error(\"Mandatory schema \" + userSchema.getName()\n-                        + \" not provided with values\");\n-\n-                requiredValuesMissing.addElement(userSchema.getName());\n+                derivedAttribute.setOwner(attributable);\n+                attributable.addDerivedAttribute(derivedAttribute);\n             }\n         }\n \n         // 3. resources\n         Resource resource = null;\n-        for (String resourceName : abstractAttributableTO.getResources()) {\n-            resource = resourceDAO.find(resourceName);\n+        for (String resourceName : attributableTO.getResources()) {\n+            resource = getResource(resourceName);\n \n-            if (resource == null) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid resource \" + resourceName);\n-                }\n-            } else {\n-                abstractAttributable.addResource(resource);\n+            if (resource != null) {\n+                attributable.addResource(resource);\n \n                 if (attributableUtil == attributableUtil.USER) {\n-                    resource.addUser((SyncopeUser) abstractAttributable);\n+                    resource.addUser((SyncopeUser) attributable);\n                 }\n                 if (attributableUtil == attributableUtil.ROLE) {\n-                    resource.addRole((SyncopeRole) abstractAttributable);\n+                    resource.addRole((SyncopeRole) attributable);\n                 }\n             }\n         }\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n-        if (!requiredValuesMissing.getElements().isEmpty()) {\n-            compositeErrorException.addException(requiredValuesMissing);\n-        }\n-        if (!invalidValues.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidValues);\n-        }\n-        if (!invalidUniques.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidUniques);\n-        }\n         if (compositeErrorException.hasExceptions()) {\n             throw compositeErrorException;\n         }\n \n-        return abstractAttributable;\n+        return attributable;\n     }\n \n-    protected <T extends AbstractAttributableTO> T getTO(\n+    protected <T extends AbstractAttributableTO> T fillTO(\n             T abstractAttributableTO,\n-            AbstractAttributable abstractAttributable) {\n+            Collection<? extends AbstractAttribute> attributes,\n+            Collection<? extends AbstractDerivedAttribute> derivedAttributes,\n+            Collection<Resource> resources) {\n \n         AttributeTO attributeTO = null;\n-        for (AbstractAttribute attribute :\n-                abstractAttributable.getAttributes()) {\n+        for (AbstractAttribute attribute : attributes) {\n \n             attributeTO = new AttributeTO();\n             attributeTO.setSchema(attribute.getSchema().getName());\n-            attributeTO.setValues(attribute.getAttributeValuesAsStrings());\n+            attributeTO.setValues(new HashSet(\n+                    attribute.getAttributeValuesAsStrings()));\n \n             abstractAttributableTO.addAttribute(attributeTO);\n         }\n \n-        for (AbstractDerivedAttribute derivedAttribute :\n-                abstractAttributable.getDerivedAttributes()) {\n+        for (AbstractDerivedAttribute derivedAttribute : derivedAttributes) {\n \n             attributeTO = new AttributeTO();\n             attributeTO.setSchema(\n                     derivedAttribute.getDerivedSchema().getName());\n-            attributeTO.addValue(derivedAttribute.getValue(\n-                    abstractAttributable.getAttributes()));\n+            attributeTO.addValue(derivedAttribute.getValue(attributes));\n \n             abstractAttributableTO.addDerivedAttribute(attributeTO);\n         }\n \n-        for (Resource resource : abstractAttributable.getResources()) {\n+        for (Resource resource : resources) {\n             abstractAttributableTO.addResource(resource.getName());\n         }\n "},{"sha":"00f330958bb415aa05802e6d3c343fb602eebb02","filename":"core/src/main/java/org/syncope/core/rest/data/ConnectorInstanceDataBinder.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnectorInstanceDataBinder.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -42,10 +42,8 @@ public class ConnectorInstanceDataBinder {\n \n     private static final Logger log = LoggerFactory.getLogger(\n             ConnectorInstanceDataBinder.class);\n-\n     private static final String[] ignoreProperties = {\n         \"id\", \"resources\", \"xmlConfiguration\", \"configuration\"};\n-\n     private ConnectorInstanceDAO connectorInstanceDAO;\n \n     @Autowired\n@@ -64,7 +62,7 @@ public ConnectorInstance getConnectorInstance(\n \n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n-                SyncopeClientExceptionType.RequiredValueMissing);\n+                SyncopeClientExceptionType.RequiredValuesMissing);\n \n         if (connectorTO.getBundleName() == null) {\n             requiredValuesMissing.addElement(\"bundlename\");\n@@ -78,8 +76,8 @@ public ConnectorInstance getConnectorInstance(\n             requiredValuesMissing.addElement(\"connectorname\");\n         }\n \n-        if (connectorTO.getConfiguration() == null ||\n-                connectorTO.getConfiguration().isEmpty()) {\n+        if (connectorTO.getConfiguration() == null\n+                || connectorTO.getConfiguration().isEmpty()) {\n             requiredValuesMissing.addElement(\"configuration\");\n         }\n \n@@ -117,7 +115,7 @@ public ConnectorInstance updateConnectorInstance(\n \n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n-                SyncopeClientExceptionType.RequiredValueMissing);\n+                SyncopeClientExceptionType.RequiredValuesMissing);\n \n         if (connectorInstanceId == null) {\n             requiredValuesMissing.addElement(\"connector id\");\n@@ -139,8 +137,8 @@ public ConnectorInstance updateConnectorInstance(\n             connectorInstance.setConnectorName(connectorTO.getConnectorName());\n         }\n \n-        if (connectorTO.getConfiguration() != null ||\n-                connectorTO.getConfiguration().isEmpty()) {\n+        if (connectorTO.getConfiguration() != null\n+                || connectorTO.getConfiguration().isEmpty()) {\n \n             connectorInstance.setXmlConfiguration(\n                     serializeToXML("},{"sha":"869d062be6be72d3264ed4a9d4790e0750c15c16","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -74,7 +74,7 @@ public Resource getResource(Resource resource, ResourceTO resourceTO)\n \n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n-                SyncopeClientExceptionType.RequiredValueMissing);\n+                SyncopeClientExceptionType.RequiredValuesMissing);\n \n         if (resourceTO == null) return null;\n \n@@ -175,7 +175,7 @@ public SchemaMapping getSchemaMapping(\n \n         SyncopeClientException requiredValuesMissing =\n                 new SyncopeClientException(\n-                SyncopeClientExceptionType.RequiredValueMissing);\n+                SyncopeClientExceptionType.RequiredValuesMissing);\n \n         if (mapping == null) {\n             if (log.isErrorEnabled()) {"},{"sha":"323a86e09a2c73f7155352a453422b3a851ae600","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":66,"deletions":54,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -15,18 +15,13 @@\n package org.syncope.core.rest.data;\n \n import java.util.Collections;\n-import java.util.List;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n-import org.syncope.core.persistence.beans.role.RoleAttribute;\n-import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n@@ -79,16 +74,15 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             syncopeRole.setName(roleTO.getName());\n         }\n         Long parentRoleId = null;\n-        if (roleTO.getParent() != null) {\n-            SyncopeRole parentRole = syncopeRoleDAO.find(roleTO.getParent());\n-            if (parentRole == null) {\n-                log.error(\"Could not find role with id \" + roleTO.getParent());\n+        SyncopeRole parentRole = syncopeRoleDAO.find(roleTO.getParent());\n+        if (parentRole == null) {\n+            log.error(\"Could not find role with id \" + roleTO.getParent());\n \n-                invalidRoles.addElement(String.valueOf(roleTO.getParent()));\n-            } else {\n-                syncopeRole.setParent(parentRole);\n-                parentRoleId = syncopeRole.getParent().getId();\n-            }\n+            invalidRoles.addElement(String.valueOf(roleTO.getParent()));\n+            scce.addException(invalidRoles);\n+        } else {\n+            syncopeRole.setParent(parentRole);\n+            parentRoleId = syncopeRole.getParent().getId();\n         }\n \n         SyncopeRole otherRole = syncopeRoleDAO.find(\n@@ -100,12 +94,53 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             invalidRoles.addElement(roleTO.getName());\n         }\n \n-        if (!invalidRoles.getElements().isEmpty()) {\n-            scce.addException(invalidRoles);\n+        // attributes, derived attributes and resources\n+        syncopeRole = fill(syncopeRole, roleTO, AttributableUtil.ROLE, scce);\n+\n+        return syncopeRole;\n+    }\n+\n+    public SyncopeRole updateSyncopeRole(SyncopeRole syncopeRole,\n+            RoleMod roleMod)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientCompositeErrorException scce =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        // name\n+        SyncopeClientException invalidRoles =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidRoles);\n+        if (roleMod.getName() != null) {\n+            SyncopeRole otherRole = syncopeRoleDAO.find(\n+                    roleMod.getName(), syncopeRole.getParent().getId());\n+\n+            if (otherRole != null) {\n+                log.error(\"Another role exists with the same name \"\n+                        + \"and the same parent role: \" + otherRole);\n+\n+                invalidRoles.addElement(roleMod.getName());\n+                scce.addException(invalidRoles);\n+            } else {\n+                syncopeRole.setName(roleMod.getName());\n+            }\n         }\n \n-        syncopeRole = fill(\n-                syncopeRole, roleTO, AttributableUtil.ROLE, scce);\n+        // inherited attributes\n+        if (roleMod.isChangeInheritAttributes()) {\n+            syncopeRole.setInheritAttributes(\n+                    !syncopeRole.isInheritAttributes());\n+        }\n+\n+        // inherited derived attributes\n+        if (roleMod.isChangeInheritDerivedAttributes()) {\n+            syncopeRole.setInheritDerivedAttributes(\n+                    !syncopeRole.isInheritDerivedAttributes());\n+        }\n+\n+        // attributes, derived attributes and resources\n+        syncopeRole = fill(syncopeRole, roleMod, AttributableUtil.ROLE, scce);\n \n         return syncopeRole;\n     }\n@@ -120,41 +155,18 @@ public RoleTO getRoleTO(SyncopeRole role) {\n             roleTO.setParent(role.getParent().getId());\n         }\n \n-        roleTO = getTO(roleTO, role);\n-\n-        AttributeTO attributeTO = null;\n-\n-        List<RoleAttribute> inheritedAttributes = null;\n-        if (role.isInheritAttributes()) {\n-            // inherited attributes\n-            inheritedAttributes = syncopeRoleDAO.findInheritedAttributes(role);\n-\n-            for (AbstractAttribute attribute : inheritedAttributes) {\n-                attributeTO = new AttributeTO();\n-                attributeTO.setSchema(attribute.getSchema().getName());\n-                attributeTO.setValues(attribute.getAttributeValuesAsStrings());\n-\n-                roleTO.addAttribute(attributeTO);\n-            }\n-\n-            // inherited derived attributes\n-            List<RoleDerivedAttribute> inheritedDerivedAttributes = null;\n-            if (role.isInheritDerivedAttributes()) {\n-                inheritedDerivedAttributes =\n-                        syncopeRoleDAO.findInheritedDerivedAttributes(role);\n-\n-                for (AbstractDerivedAttribute attribute :\n-                        inheritedDerivedAttributes) {\n-\n-                    attributeTO = new AttributeTO();\n-                    attributeTO.setSchema(\n-                            attribute.getDerivedSchema().getName());\n-                    attributeTO.setValues(Collections.singleton(\n-                            attribute.getValue(inheritedAttributes)));\n-\n-                    roleTO.addDerivedAttribute(attributeTO);\n-                }\n-            }\n+        roleTO = fillTO(roleTO, role.getAttributes(),\n+                role.getDerivedAttributes(), role.getResources());\n+\n+        if (role.isInheritAttributes() || role.isInheritDerivedAttributes()) {\n+            roleTO = fillTO(roleTO,\n+                    role.isInheritAttributes()\n+                    ? syncopeRoleDAO.findInheritedAttributes(role)\n+                    : Collections.EMPTY_SET,\n+                    role.isInheritDerivedAttributes()\n+                    ? syncopeRoleDAO.findInheritedDerivedAttributes(role)\n+                    : Collections.EMPTY_SET,\n+                    Collections.EMPTY_SET);\n         }\n \n         return roleTO;"},{"sha":"46015a468e99e31c94ab776b515ff4be91fb0d62","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":61,"deletions":5,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -17,14 +17,18 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n+import org.syncope.client.mod.MembershipMod;\n+import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.AttributeDAO;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.DerivedAttributeDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.MembershipDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n@@ -38,25 +42,29 @@ public class UserDataBinder extends AbstractAttributableDataBinder {\n \n     @Autowired\n     public UserDataBinder(SchemaDAO schemaDAO,\n+            AttributeDAO attributeDAO,\n             AttributeValueDAO attributeValueDAO,\n             DerivedSchemaDAO derivedSchemaDAO,\n+            DerivedAttributeDAO derivedAttributeDAO,\n             SyncopeUserDAO syncopeUserDAO,\n             SyncopeRoleDAO syncopeRoleDAO,\n             ResourceDAO resourceDAO,\n             MembershipDAO membershipDAO) {\n \n         this.schemaDAO = schemaDAO;\n+        this.attributeDAO = attributeDAO;\n         this.attributeValueDAO = attributeValueDAO;\n         this.derivedSchemaDAO = derivedSchemaDAO;\n+        this.derivedSchemaDAO = derivedSchemaDAO;\n         this.syncopeUserDAO = syncopeUserDAO;\n         this.syncopeRoleDAO = syncopeRoleDAO;\n         this.resourceDAO = resourceDAO;\n+        this.membershipDAO = membershipDAO;\n     }\n \n     public SyncopeUser createSyncopeUser(UserTO userTO)\n             throws SyncopeClientCompositeErrorException {\n \n-\n         SyncopeUser syncopeUser = new SyncopeUser();\n \n         SyncopeClientCompositeErrorException scce =\n@@ -81,8 +89,8 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n             scce.addException(invalidPassword);\n         }\n \n-        syncopeUser = fill(\n-                syncopeUser, userTO, AttributableUtil.USER, scce);\n+        // attributes, derived attributes and resources\n+        syncopeUser = fill(syncopeUser, userTO, AttributableUtil.USER, scce);\n \n         // memberships\n         SyncopeRole role = null;\n@@ -109,6 +117,50 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n         return syncopeUser;\n     }\n \n+    public SyncopeUser updateSyncopeUser(SyncopeUser syncopeUser,\n+            UserMod userMod)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientCompositeErrorException scce =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        // password\n+        if (userMod.getPassword() != null) {\n+            syncopeUser.setPassword(userMod.getPassword());\n+        }\n+\n+        // attributes, derived attributes and resources\n+        syncopeUser = fill(syncopeUser, userMod, AttributableUtil.USER, scce);\n+\n+        // memberships\n+        SyncopeRole role = null;\n+        for (MembershipMod membershipMod : userMod.getMembershipMods()) {\n+            role = syncopeRoleDAO.find(membershipMod.getRole());\n+\n+            if (role == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ignoring invalid role \"\n+                            + membershipMod.getRole());\n+                }\n+            } else {\n+                Membership membership = membershipDAO.find(syncopeUser, role);\n+                if (membership == null) {\n+                    membership = new Membership();\n+                    membership.setSyncopeRole(role);\n+                    membership.setSyncopeUser(syncopeUser);\n+\n+                    syncopeUser.addMembership(membership);\n+                }\n+\n+                membership = fill(membership, membershipMod,\n+                        AttributableUtil.MEMBERSHIP, scce);\n+            }\n+        }\n+\n+        return syncopeUser;\n+    }\n+\n     public UserTO getUserTO(SyncopeUser user) {\n         UserTO userTO = new UserTO();\n         userTO.setId(user.getId());\n@@ -117,13 +169,17 @@ public UserTO getUserTO(SyncopeUser user) {\n         userTO.setTokenExpireTime(user.getTokenExpireTime());\n         userTO.setPassword(user.getPassword());\n \n-        userTO = getTO(userTO, user);\n+        userTO = fillTO(userTO, user.getAttributes(),\n+                user.getDerivedAttributes(), user.getResources());\n \n         MembershipTO membershipTO = new MembershipTO();\n         for (Membership membership : user.getMemberships()) {\n             membershipTO.setRole(membership.getSyncopeRole().getId());\n \n-            membershipTO = getTO(membershipTO, membership);\n+            membershipTO = fillTO(membershipTO,\n+                    membership.getAttributes(),\n+                    membership.getDerivedAttributes(),\n+                    membership.getResources());\n \n             userTO.addMembership(membershipTO);\n         }"},{"sha":"b3a6ec42e3c39ff8bf5f4cee8e3ff0b717de7d7f","filename":"core/src/test/java/org/syncope/core/test/persistence/relationships/AttributeTest.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2Frelationships%2FAttributeTest.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -0,0 +1,63 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.user.UserAttribute;\n+import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.dao.AttributeDAO;\n+import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.test.persistence.AbstractTest;\n+\n+@Transactional\n+public class AttributeTest extends AbstractTest {\n+\n+    @Autowired\n+    private AttributeDAO attributeDAO;\n+    @Autowired\n+    private AttributeValueDAO attributeValueDAO;\n+\n+    @Test\n+    public final void deleteAttribute() {\n+        attributeDAO.delete(550L, UserAttribute.class);\n+\n+        attributeDAO.flush();\n+\n+        assertNull(attributeDAO.find(550L, UserAttribute.class));\n+        assertNull(attributeValueDAO.find(22L, UserAttributeValue.class));\n+    }\n+\n+    @Test\n+    public final void deleteAttributeValue() {\n+        UserAttributeValue value =\n+                attributeValueDAO.find(20L, UserAttributeValue.class);\n+        int attributeValueNumber =\n+                value.getAttribute().getAttributeValues().size();\n+\n+        attributeValueDAO.delete(20L, UserAttributeValue.class);\n+\n+        attributeValueDAO.flush();\n+\n+        assertNull(attributeValueDAO.find(20L, UserAttributeValue.class));\n+\n+        UserAttribute attribute = attributeDAO.find(200L, UserAttribute.class);\n+        assertEquals(attribute.getAttributeValues().size(),\n+                attributeValueNumber - 1);\n+    }\n+}"},{"sha":"86bcd0820d03527066661faeea87b2cc7e8cf978","filename":"core/src/test/java/org/syncope/core/test/rest/RoleTestITCase.java","status":"modified","additions":27,"deletions":9,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -16,11 +16,12 @@\n \n import static org.junit.Assert.*;\n \n-import java.util.Collections;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.mod.AttributeMod;\n+import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.RoleTOs;\n@@ -106,16 +107,33 @@ public void read() {\n \n     @Test\n     public void update() {\n-        AttributeTO attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"attr1\");\n-        attributeTO.setValues(Collections.singleton(\"value1\"));\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"latestRole\");\n+        roleTO.setParent(8L);\n \n-        RoleTO newRoleTO = new RoleTO();\n-        newRoleTO.addAttribute(attributeTO);\n+        AttributeTO icon = new AttributeTO();\n+        icon.setSchema(\"icon\");\n+        icon.addValue(\"anIcon\");\n+        roleTO.addAttribute(icon);\n \n-        RoleTO userTO = restTemplate.postForObject(BASE_URL + \"role/update\",\n-                newRoleTO, RoleTO.class);\n+        roleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n+                roleTO, RoleTO.class);\n+\n+        assertEquals(1, roleTO.getAttributes().size());\n+\n+        AttributeMod attributeMod = new AttributeMod();\n+        attributeMod.setSchema(\"show\");\n+        attributeMod.addValueToBeAdded(\"FALSE\");\n+\n+        RoleMod roleMod = new RoleMod();\n+        roleMod.setId(roleTO.getId());\n+        roleMod.setName(\"finalRole\");\n+        roleMod.addAttributeToBeUpdated(attributeMod);\n+\n+        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\",\n+                roleMod, RoleTO.class);\n \n-        assertEquals(newRoleTO, userTO);\n+        assertEquals(\"finalRole\", roleTO.getName());\n+        assertEquals(2, roleTO.getAttributes().size());\n     }\n }"},{"sha":"8c30265d16a69caae353caee854279990e2aadb4","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":38,"deletions":8,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eaeabc98360f54e6ffddcd9cb3fe10335ae89e62/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=eaeabc98360f54e6ffddcd9cb3fe10335ae89e62","patch":"@@ -23,6 +23,9 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.mod.AttributeMod;\n+import org.syncope.client.mod.MembershipMod;\n+import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.LeafSearchCondition;\n import org.syncope.client.to.MembershipTO;\n@@ -221,16 +224,43 @@ public void search() {\n \n     @Test\n     public void update() {\n-        AttributeTO attributeTO = new AttributeTO();\n-        attributeTO.setSchema(\"attr1\");\n-        attributeTO.addValue(\"value1\");\n+        UserTO userTO = getSampleTO(\"g.h@t.com\");\n \n-        UserTO newUserTO = new UserTO();\n-        newUserTO.addAttribute(attributeTO);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n+                userTO, UserTO.class);\n \n-        UserTO userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n-                newUserTO, UserTO.class);\n+        AttributeMod attributeMod = new AttributeMod();\n+        attributeMod.setSchema(\"userId\");\n+        attributeMod.addValueToBeRemoved(\"g.h@t.com\");\n+        attributeMod.addValueToBeAdded(\"new@t.com\");\n+\n+        MembershipMod membershipMod = new MembershipMod();\n+        membershipMod.setRole(8L);\n+        membershipMod.addAttributeToBeUpdated(attributeMod);\n+\n+        assertTrue(userTO.getDerivedAttributes().isEmpty());\n+        assertTrue(userTO.getMemberships().isEmpty());\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPassword(\"newPassword\");\n+        userMod.addDerivedAttributeToBeAdded(\"cn\");\n+        userMod.addAttributeToBeUpdated(attributeMod);\n+        userMod.addMembershipMod(membershipMod);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n+                userMod, UserTO.class);\n+\n+        assertEquals(\"newPassword\", userTO.getPassword());\n+\n+        AttributeTO attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"userId\");\n+        attributeTO.addValue(\"new@t.com\");\n \n-        assertEquals(newUserTO, userTO);\n+        assertTrue(userTO.getAttributes().contains(attributeTO));\n+        assertFalse(userTO.getDerivedAttributes().isEmpty());\n+        assertFalse(userTO.getMemberships().isEmpty());\n     }\n }"}]}