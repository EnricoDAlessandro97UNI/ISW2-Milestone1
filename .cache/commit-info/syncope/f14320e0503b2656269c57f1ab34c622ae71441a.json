{"sha":"f14320e0503b2656269c57f1ab34c622ae71441a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYxNDMyMGUwNTAzYjI2NTYyNjljNTdmMWFiMzRjNjIyYWU3MTQ0MWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-26T07:35:13Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-26T07:35:13Z"},"message":"Upgrading Commons IO","tree":{"sha":"2ead2356a38db8ea60c4fc43fac405566df8dc7a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2ead2356a38db8ea60c4fc43fac405566df8dc7a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f14320e0503b2656269c57f1ab34c622ae71441a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f14320e0503b2656269c57f1ab34c622ae71441a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f14320e0503b2656269c57f1ab34c622ae71441a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f14320e0503b2656269c57f1ab34c622ae71441a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d2404b9073b0e54f1efc9554d4d54b7fc44408a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d2404b9073b0e54f1efc9554d4d54b7fc44408a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d2404b9073b0e54f1efc9554d4d54b7fc44408a1"}],"stats":{"total":150,"additions":93,"deletions":57},"files":[{"sha":"ebf581e9b27589942124dd907489afa25e925a0c","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/NotificationRestClient.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -22,19 +22,17 @@\n import java.util.List;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.to.NotificationTO;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n import org.apache.syncope.common.rest.api.service.MailTemplateService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n-import org.slf4j.LoggerFactory;\n \n public class NotificationRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 6328933265096511690L;\n \n-    protected static final org.slf4j.Logger LOG = LoggerFactory.getLogger(NotificationRestClient.class);\n-\n     public List<NotificationTO> getAllNotifications() {\n         return getService(NotificationService.class).list();\n     }\n@@ -74,14 +72,16 @@ public MailTemplateTO readTemplate(final String key) {\n     public String readTemplateFormat(final String key, final MailTemplateFormat format) {\n         try {\n             return IOUtils.toString(InputStream.class.cast(\n-                    getService(MailTemplateService.class).getFormat(key, format).getEntity()));\n+                    getService(MailTemplateService.class).getFormat(key, format).getEntity()),\n+                    SyncopeConstants.DEFAULT_CHARSET);\n         } catch (Exception e) {\n             LOG.info(\"Error retrieving mail tenplate content\");\n             return StringUtils.EMPTY;\n         }\n     }\n \n     public void updateTemplateFormat(final String key, final String str, final MailTemplateFormat format) {\n-        getService(MailTemplateService.class).setFormat(key, format, IOUtils.toInputStream(str));\n+        getService(MailTemplateService.class).setFormat(\n+                key, format, IOUtils.toInputStream(str, SyncopeConstants.DEFAULT_CHARSET));\n     }\n }"},{"sha":"8b2eb1d85455c8dc9270ae2e49a6b45aa8ad8852","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -40,6 +40,7 @@\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n@@ -232,31 +233,35 @@ public void exportExecutionResult(final OutputStream os, final ReportExec report\n             switch (format) {\n                 case HTML:\n                     XSLTTransformer xsl2html = new XSLTTransformer(new StreamSource(\n-                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getHTMLTemplate())));\n+                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getHTMLTemplate(),\n+                                    SyncopeConstants.DEFAULT_CHARSET)));\n                     xsl2html.setParameters(parameters);\n                     pipeline.addComponent(xsl2html);\n                     pipeline.addComponent(XMLSerializer.createXHTMLSerializer());\n                     break;\n \n                 case PDF:\n                     XSLTTransformer xsl2pdf = new XSLTTransformer(new StreamSource(\n-                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getFOTemplate())));\n+                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getFOTemplate(),\n+                                    SyncopeConstants.DEFAULT_CHARSET)));\n                     xsl2pdf.setParameters(parameters);\n                     pipeline.addComponent(xsl2pdf);\n                     pipeline.addComponent(new FopSerializer(MimeConstants.MIME_PDF));\n                     break;\n \n                 case RTF:\n                     XSLTTransformer xsl2rtf = new XSLTTransformer(new StreamSource(\n-                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getFOTemplate())));\n+                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getFOTemplate(),\n+                                    SyncopeConstants.DEFAULT_CHARSET)));\n                     xsl2rtf.setParameters(parameters);\n                     pipeline.addComponent(xsl2rtf);\n                     pipeline.addComponent(new FopSerializer(MimeConstants.MIME_RTF));\n                     break;\n \n                 case CSV:\n                     XSLTTransformer xsl2csv = new XSLTTransformer(new StreamSource(\n-                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getCSVTemplate())));\n+                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getCSVTemplate(),\n+                                    SyncopeConstants.DEFAULT_CHARSET)));\n                     xsl2csv.setParameters(parameters);\n                     pipeline.addComponent(xsl2csv);\n                     pipeline.addComponent(new TextSerializer());"},{"sha":"8a6ede56bdd22756ca0825ef98b0c55e34addce6","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/MailTemplateServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FMailTemplateServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FMailTemplateServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FMailTemplateServiceImpl.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -27,6 +27,7 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -83,7 +84,7 @@ public void write(final OutputStream os) throws IOException {\n     @Override\n     public void setFormat(final String key, final MailTemplateFormat format, final InputStream templateIn) {\n         try {\n-            logic.setFormat(key, format, IOUtils.toString(templateIn));\n+            logic.setFormat(key, format, IOUtils.toString(templateIn, SyncopeConstants.DEFAULT_CHARSET));\n         } catch (final IOException e) {\n             LOG.error(\"While setting format {} for mail template {}\", format, key, e);\n             throw new InternalServerErrorException(\"Could not read entity\", e);"},{"sha":"4a1b5040b704d092a19f1e67d7e50ff723bcc377","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportTemplateServiceImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportTemplateServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportTemplateServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportTemplateServiceImpl.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -28,6 +28,7 @@\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -84,7 +85,7 @@ public void write(final OutputStream os) throws IOException {\n     @Override\n     public void setFormat(final String key, final ReportTemplateFormat format, final InputStream templateIn) {\n         try {\n-            logic.setFormat(key, format, IOUtils.toString(templateIn));\n+            logic.setFormat(key, format, IOUtils.toString(templateIn, SyncopeConstants.DEFAULT_CHARSET));\n         } catch (final IOException e) {\n             LOG.error(\"While setting format {} for report template {}\", format, key, e);\n             throw new InternalServerErrorException(\"Could not read entity\", e);"},{"sha":"d034f0802a1b371a18889f84dc50d9663c88162a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -29,6 +29,7 @@\n import org.apache.camel.model.RouteDefinition;\n import org.apache.camel.spring.SpringCamelContext;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n@@ -86,7 +87,7 @@ private void loadContext(final List<CamelRoute> routes) {\n             for (CamelRoute route : routes) {\n                 InputStream input = null;\n                 try {\n-                    input = IOUtils.toInputStream(route.getContent());\n+                    input = IOUtils.toInputStream(route.getContent(), SyncopeConstants.DEFAULT_CHARSET);\n                     LSInput lsinput = domImpl.createLSInput();\n                     lsinput.setByteStream(input);\n "},{"sha":"3840f7cde597813b2a0ab0a3a7b2e024ff7e4d78","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/cli/CLIITCase.java","status":"modified","additions":13,"deletions":9,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcli%2FCLIITCase.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.client.cli.commands.report.ReportCommand;\n import org.apache.syncope.client.cli.commands.role.RoleCommand;\n import org.apache.syncope.client.cli.commands.user.UserCommand;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n@@ -104,7 +105,7 @@ public void runScriptWithoutOptions() {\n             PROCESS_BUILDER.command(getCommand());\n             Process process = PROCESS_BUILDER.start();\n \n-            String result = IOUtils.toString(process.getInputStream());\n+            String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.startsWith(\"\\nUsage: Main [options]\"));\n             assertTrue(result.contains(\n                     new EntitlementCommand().getClass().getAnnotation(Command.class).name()\n@@ -128,7 +129,8 @@ public void entitlementCount() {\n                     EntitlementCommand.EntitlementOptions.LIST.getOptionName()));\n             Process process = PROCESS_BUILDER.start();\n \n-            long entitlements = IterableUtils.countMatches(IOUtils.readLines(process.getInputStream()),\n+            long entitlements = IterableUtils.countMatches(\n+                    IOUtils.readLines(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET),\n                     new Predicate<String>() {\n \n                 @Override\n@@ -152,7 +154,8 @@ public void connectorCount() {\n                     ConnectorCommand.ConnectorOptions.LIST_BUNDLES.getOptionName()));\n             Process process = PROCESS_BUILDER.start();\n \n-            long bundles = IterableUtils.countMatches(IOUtils.readLines(process.getInputStream()),\n+            long bundles = IterableUtils.countMatches(\n+                    IOUtils.readLines(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET),\n                     new Predicate<String>() {\n \n                 @Override\n@@ -181,7 +184,7 @@ public void userRead() {\n                     UserCommand.UserOptions.READ_BY_ID.getOptionName(),\n                     String.valueOf(userKey1)));\n             Process process = PROCESS_BUILDER.start();\n-            String result = IOUtils.toString(process.getInputStream());\n+            String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.contains(\"username: \" + userService.read(userKey1).getUsername()));\n             process.destroy();\n \n@@ -191,7 +194,8 @@ public void userRead() {\n                     String.valueOf(userKey1), String.valueOf(userKey2),\n                     String.valueOf(userKey3), String.valueOf(userKey4), String.valueOf(userKey5)));\n             Process process2 = PROCESS_BUILDER.start();\n-            long users = IterableUtils.countMatches(IOUtils.readLines(process2.getInputStream()),\n+            long users = IterableUtils.countMatches(\n+                    IOUtils.readLines(process2.getInputStream(), SyncopeConstants.DEFAULT_CHARSET),\n                     new Predicate<String>() {\n \n                 @Override\n@@ -209,7 +213,7 @@ public boolean evaluate(final String line) {\n                     String.valueOf(userKey1), String.valueOf(userKey2),\n                     String.valueOf(userKey3), String.valueOf(userKey4), String.valueOf(userKey5)));\n             Process process3 = PROCESS_BUILDER.start();\n-            String result3 = IOUtils.toString(process3.getInputStream());\n+            String result3 = IOUtils.toString(process3.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(\n                     result3.contains(\"username: \" + userService.read(userKey1).getUsername())\n                     && result3.contains(\"username: \" + userService.read(userKey2).getUsername())\n@@ -231,7 +235,7 @@ public void roleRead() {\n                     RoleCommand.RoleOptions.READ.getOptionName(),\n                     roleId));\n             final Process process = PROCESS_BUILDER.start();\n-            final String result = IOUtils.toString(process.getInputStream());\n+            final String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.contains(roleService.read(roleId).getEntitlements().iterator().next()));\n \n             process.destroy();\n@@ -248,7 +252,7 @@ public void reportNotExists() {\n                     ReportCommand.ReportOptions.READ.getOptionName(),\n                     \"72\"));\n             final Process process = PROCESS_BUILDER.start();\n-            final String result = IOUtils.toString(process.getInputStream());\n+            final String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.contains(\"- Report 72 doesn't exist\"));\n \n             process.destroy();\n@@ -265,7 +269,7 @@ public void policyError() {\n                     PolicyCommand.PolicyOptions.READ.getOptionName(),\n                     \"wrong\"));\n             final Process process = PROCESS_BUILDER.start();\n-            final String result = IOUtils.toString(process.getInputStream());\n+            final String result = IOUtils.toString(process.getInputStream(), SyncopeConstants.DEFAULT_CHARSET);\n             assertTrue(result.contains(\"- Policy wrong doesn't exist\"));\n \n             process.destroy();"},{"sha":"fdf3a2a37f8710df119df3360900d5aeaa93ff46","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MailTemplateITCase.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMailTemplateITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMailTemplateITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMailTemplateITCase.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -31,6 +31,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.MailTemplateTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MailTemplateFormat;\n@@ -86,24 +87,28 @@ public void crud() throws IOException {\n         // 3. set TEXT\n         String textTemplate = \"Hi there, I am ${username}.\";\n         mailTemplateService.setFormat(\n-                key, MailTemplateFormat.TEXT, IOUtils.toInputStream(textTemplate));\n+                key, MailTemplateFormat.TEXT, IOUtils.toInputStream(textTemplate, SyncopeConstants.DEFAULT_CHARSET));\n \n         response = mailTemplateService.getFormat(key, MailTemplateFormat.TEXT);\n         assertEquals(200, response.getStatus());\n         assertTrue(response.getMediaType().toString().startsWith(MediaType.TEXT_PLAIN));\n         assertTrue(response.getEntity() instanceof InputStream);\n-        assertEquals(textTemplate, IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                textTemplate,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n \n         // 3. set HTML\n         String htmlTemplate = \"<html><body>Hi there, I am ${username}.</body></html>\";\n         mailTemplateService.setFormat(\n-                key, MailTemplateFormat.HTML, IOUtils.toInputStream(htmlTemplate));\n+                key, MailTemplateFormat.HTML, IOUtils.toInputStream(htmlTemplate, SyncopeConstants.DEFAULT_CHARSET));\n \n         response = mailTemplateService.getFormat(key, MailTemplateFormat.HTML);\n         assertEquals(200, response.getStatus());\n         assertTrue(response.getMediaType().toString().startsWith(MediaType.TEXT_HTML));\n         assertTrue(response.getEntity() instanceof InputStream);\n-        assertEquals(htmlTemplate, IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                htmlTemplate,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n \n         // 4. remove HTML\n         mailTemplateService.removeFormat(key, MailTemplateFormat.HTML);\n@@ -119,7 +124,9 @@ public void crud() throws IOException {\n         assertEquals(200, response.getStatus());\n         assertTrue(response.getMediaType().toString().startsWith(MediaType.TEXT_PLAIN));\n         assertTrue(response.getEntity() instanceof InputStream);\n-        assertEquals(textTemplate, IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                textTemplate,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n \n         // 5. remove mail template\n         mailTemplateService.delete(key);"},{"sha":"97caca3cee3c136d30b6859df451bec2b0a8111d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RESTITCase.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -32,11 +32,13 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.MultivaluedMap;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n@@ -67,7 +69,9 @@ public void noContent() throws IOException {\n         Response response = noContentService.create(group);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n-        assertEquals(StringUtils.EMPTY, org.apache.commons.io.IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                StringUtils.EMPTY,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n \n         group = getObject(response.getLocation(), GroupService.class, GroupTO.class);\n         assertNotNull(group);\n@@ -79,12 +83,16 @@ public void noContent() throws IOException {\n         response = noContentService.update(groupPatch);\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n-        assertEquals(StringUtils.EMPTY, org.apache.commons.io.IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                StringUtils.EMPTY,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n \n         response = noContentService.delete(group.getKey());\n         assertEquals(Response.Status.NO_CONTENT.getStatusCode(), response.getStatus());\n         assertEquals(Preference.RETURN_NO_CONTENT.toString(), response.getHeaderString(RESTHeaders.PREFERENCE_APPLIED));\n-        assertEquals(StringUtils.EMPTY, org.apache.commons.io.IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                StringUtils.EMPTY,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n     }\n \n     @Test"},{"sha":"638f7d65b6cdf50ac4df463cd56daa505125ffed","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportTemplateITCase.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -31,6 +31,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ReportTemplateTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ReportTemplateFormat;\n@@ -87,25 +88,29 @@ public void crud() throws IOException {\n         String csvTemplate =\n                 \"<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'></xsl:stylesheet>\";\n         reportTemplateService.setFormat(\n-                key, ReportTemplateFormat.CSV, IOUtils.toInputStream(csvTemplate));\n+                key, ReportTemplateFormat.CSV, IOUtils.toInputStream(csvTemplate, SyncopeConstants.DEFAULT_CHARSET));\n \n         response = reportTemplateService.getFormat(key, ReportTemplateFormat.CSV);\n         assertEquals(200, response.getStatus());\n         assertTrue(response.getMediaType().toString().startsWith(MediaType.APPLICATION_XML));\n         assertTrue(response.getEntity() instanceof InputStream);\n-        assertEquals(csvTemplate, IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                csvTemplate,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n \n         // 3. set HTML\n         String htmlTemplate =\n                 \"<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'></xsl:stylesheet>\";\n         reportTemplateService.setFormat(\n-                key, ReportTemplateFormat.HTML, IOUtils.toInputStream(htmlTemplate));\n+                key, ReportTemplateFormat.HTML, IOUtils.toInputStream(htmlTemplate, SyncopeConstants.DEFAULT_CHARSET));\n \n         response = reportTemplateService.getFormat(key, ReportTemplateFormat.HTML);\n         assertEquals(200, response.getStatus());\n         assertTrue(response.getMediaType().toString().startsWith(MediaType.APPLICATION_XML));\n         assertTrue(response.getEntity() instanceof InputStream);\n-        assertEquals(htmlTemplate, IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                htmlTemplate,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n \n         // 4. remove HTML\n         reportTemplateService.removeFormat(key, ReportTemplateFormat.HTML);\n@@ -121,7 +126,9 @@ public void crud() throws IOException {\n         assertEquals(200, response.getStatus());\n         assertTrue(response.getMediaType().toString().startsWith(MediaType.APPLICATION_XML));\n         assertTrue(response.getEntity() instanceof InputStream);\n-        assertEquals(csvTemplate, IOUtils.toString((InputStream) response.getEntity()));\n+        assertEquals(\n+                csvTemplate,\n+                IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET));\n \n         // 5. remove report template\n         reportTemplateService.delete(key);"},{"sha":"db05c732d0aa2b38d3a4378ee2eeab045fbd29f3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/WorkflowITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWorkflowITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWorkflowITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FWorkflowITCase.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -28,6 +28,7 @@\n import java.io.InputStream;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.Assume;\n@@ -40,7 +41,7 @@ private void exportDefinition(final AnyTypeKind type) throws IOException {\n         assertTrue(response.getMediaType().toString().\n                 startsWith(clientFactory.getContentType().getMediaType().toString()));\n         assertTrue(response.getEntity() instanceof InputStream);\n-        String definition = IOUtils.toString((InputStream) response.getEntity());\n+        String definition = IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET);\n         assertNotNull(definition);\n         assertFalse(definition.isEmpty());\n     }\n@@ -59,7 +60,7 @@ public void getGroupDefinition() throws IOException {\n \n     private void importDefinition(final AnyTypeKind type) throws IOException {\n         Response response = workflowService.exportDefinition(type);\n-        String definition = IOUtils.toString((InputStream) response.getEntity());\n+        String definition = IOUtils.toString((InputStream) response.getEntity(), SyncopeConstants.DEFAULT_CHARSET);\n \n         workflowService.importDefinition(type, definition);\n     }"},{"sha":"b3ea05f35d8812e0d838afaa396d0686eb529d33","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -111,7 +111,7 @@ public void writeToFile(final File file, final String content) {\n     public String readFile(final File file) {\n         String content = \"\";\n         try {\n-            content = FileUtils.readFileToString(file);\n+            content = FileUtils.readFileToString(file, Charset.forName(\"UTF-8\"));\n         } catch (IOException ex) {\n             final String errorMessage = \"Error reading file \" + file.getAbsolutePath() + \": \" + ex.getMessage();\n             handler.emitError(errorMessage, errorMessage);"},{"sha":"fbd18e98b41929da5667ffe2ad154fc6b2b58516","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/HttpUtils.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FHttpUtils.java?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -21,6 +21,7 @@\n import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.File;\n import java.io.IOException;\n+import java.nio.charset.Charset;\n import org.apache.commons.io.IOUtils;\n import org.apache.http.HttpEntity;\n import org.apache.http.HttpHost;\n@@ -98,17 +99,18 @@ public int getWithBasicAuth(final String path) {\n             httpGet = new HttpGet(String.format(HTTP_URL_TEMPLATE, host, port) + path);\n         }\n         int status = 0;\n+        handler.logOutput(\"Calling \" + httpGet.getURI(), true);\n+        InstallLog.getInstance().info(\"Calling \" + httpGet.getURI());\n         try {\n-            handler.logOutput(\"Calling \" + httpGet.getURI(), true);\n-            InstallLog.getInstance().info(\"Calling \" + httpGet.getURI());\n-            final CloseableHttpResponse response = httpClient.execute(\n-                    targetHost, httpGet, setAuth(targetHost, new BasicScheme()));\n-            status = response.getStatusLine().getStatusCode();\n-            handler.logOutput(\"Calling status \" + status, true);\n-            InstallLog.getInstance().info(\"Calling status \" + status);\n-            response.close();\n-        } catch (final IOException ex) {\n-            final String messageError = \"Error in \" + path + \": \" + ex.getMessage();\n+            try (CloseableHttpResponse response = httpClient.execute(\n+                    targetHost, httpGet, setAuth(targetHost, new BasicScheme()))) {\n+\n+                status = response.getStatusLine().getStatusCode();\n+                handler.logOutput(\"Calling status \" + status, true);\n+                InstallLog.getInstance().info(\"Calling status \" + status);\n+            }\n+        } catch (IOException e) {\n+            String messageError = \"Error in \" + path + \": \" + e.getMessage();\n             handler.emitError(messageError, messageError);\n             InstallLog.getInstance().error(messageError);\n         }\n@@ -117,16 +119,15 @@ public int getWithBasicAuth(final String path) {\n \n     public String postWithDigestAuth(final String url, final String file) {\n         String responseBodyAsString = \"\";\n-        try {\n-            final CloseableHttpResponse response = httpClient.execute(targetHost,\n-                    httpPost(url, MultipartEntityBuilder.create().addPart(\"bin\", new FileBody(new File(file))).build()),\n-                    setAuth(targetHost, new DigestScheme()));\n-            responseBodyAsString = IOUtils.toString(response.getEntity().getContent());\n+        try (CloseableHttpResponse response =\n+                httpClient.execute(targetHost, httpPost(url, MultipartEntityBuilder.create().\n+                        addPart(\"bin\", new FileBody(new File(file))).build()),\n+                        setAuth(targetHost, new DigestScheme()))) {\n+            responseBodyAsString = IOUtils.toString(response.getEntity().getContent(), Charset.forName(\"UTF-8\"));\n             handler.logOutput(\"Http status: \" + response.getStatusLine().getStatusCode(), true);\n             InstallLog.getInstance().info(\"Http status: \" + response.getStatusLine().getStatusCode());\n-            response.close();\n-        } catch (final IOException ex) {\n-            final String messageError = \"Error calling \" + url + \": \" + ex.getMessage();\n+        } catch (IOException e) {\n+            final String messageError = \"Error calling \" + url + \": \" + e.getMessage();\n             handler.emitError(messageError, messageError);\n             InstallLog.getInstance().error(messageError);\n         }"},{"sha":"c9335dbb456294af9d7597d8a4b3a6128e22df84","filename":"installer/src/main/resources/izpack/install.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2Finstall.xml?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -132,7 +132,7 @@ under the License.\n   <jar src=\"../syncope-installer-@{syncope.version}.jar\" stage=\"install\"/>\n   <jar src=\"lib/commons-logging-@{commons-logging.version}.jar\"/>\n   <jar src=\"lib/commons-codec-@{commons-codec.version}.jar\"/>\n-  <jar src=\"lib/commons-io-2.4.jar\"/>\n+  <jar src=\"lib/commons-io-@{commons-io.version}.jar\"/>\n   <jar src=\"lib/httpclient-@{httpclient.version}.jar\"/>\n   <jar src=\"lib/httpmime-@{httpclient.version}.jar\"/>\n   <jar src=\"lib/httpcore-4.3.3.jar\"/>"},{"sha":"78725f68cec86cdc48779bf98f6da7e1f32c282f","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f14320e0503b2656269c57f1ab34c622ae71441a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f14320e0503b2656269c57f1ab34c622ae71441a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=f14320e0503b2656269c57f1ab34c622ae71441a","patch":"@@ -359,7 +359,7 @@ under the License.\n     <log4j.version>2.5</log4j.version>\n     <disruptor.version>3.3.4</disruptor.version>\n \n-    <commons-io.version>2.4</commons-io.version>\n+    <commons-io.version>2.5</commons-io.version>\n     <commons-email.version>1.4</commons-email.version>\n     <commons-codec.version>1.10</commons-codec.version>\n     <commons-jexl.version>3.0</commons-jexl.version>"}]}