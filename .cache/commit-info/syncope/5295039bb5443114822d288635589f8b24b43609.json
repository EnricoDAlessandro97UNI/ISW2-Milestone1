{"sha":"5295039bb5443114822d288635589f8b24b43609","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUyOTUwMzliYjU0NDMxMTQ4MjJkMjg4NjM1NTg5ZjhiMjRiNDM2MDk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-09-08T11:13:57Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-09-08T13:41:54Z"},"message":"[SYNCOPE-1206] At the end of update, explicitely process dynamic memberships for group resources","tree":{"sha":"4944521bc9d5b1733ef2146b6640aa337e995dd8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4944521bc9d5b1733ef2146b6640aa337e995dd8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5295039bb5443114822d288635589f8b24b43609","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5295039bb5443114822d288635589f8b24b43609","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5295039bb5443114822d288635589f8b24b43609","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5295039bb5443114822d288635589f8b24b43609/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"19a0345f6d587e9f85f0106b4b28b95696a943d9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/19a0345f6d587e9f85f0106b4b28b95696a943d9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/19a0345f6d587e9f85f0106b4b28b95696a943d9"}],"stats":{"total":369,"additions":272,"deletions":97},"files":[{"sha":"16d2882cbca7dea7859bb20a30ed528bb62f36fb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -373,7 +373,7 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n \n             objectClass = resource.getOrgUnit().getObjectClass();\n             options = MappingUtils.buildOperationOptions(\n-                    MappingUtils.getPropagationItems(resource.getOrgUnit()).iterator());\n+                    MappingUtils.getPropagationItems(resource.getOrgUnit().getItems()).iterator());\n         } else {\n             Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n             resource = init.getLeft();"},{"sha":"518575b0c9e34118c59b6078acb7a0c252e2b33a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -21,6 +21,8 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -51,4 +53,5 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     Collection<ExternalResource> findAllResources(AnyObject anyObject);\n \n+    Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(AnyObject anyObject);\n }"},{"sha":"1ee1cf1eea9c59f741b56ea6e1c57865b3684cbb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":32,"deletions":6,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -21,6 +21,8 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n@@ -51,16 +53,40 @@ public interface GroupDAO extends AnyDAO<Group> {\n \n     void clearADynMembers(Group group);\n \n-    void refreshDynMemberships(AnyObject anyObject);\n-\n-    void removeDynMemberships(AnyObject anyObject);\n+    /**\n+     * Evaluates all the dynamic group membership conditions against the given anyObject (invoked during save).\n+     *\n+     * @param anyObject anyObject being saved\n+     * @return pair of groups dynamically assigned before and after refresh\n+     */\n+    Pair<Set<String>, Set<String>> refreshDynMemberships(AnyObject anyObject);\n+\n+    /**\n+     * Removes the dynamic group memberships of the given anyObject (invoked during delete).\n+     *\n+     * @param anyObject anyObject being deleted\n+     * @return groups dynamically assigned before refresh\n+     */\n+    Set<String> removeDynMemberships(AnyObject anyObject);\n \n     List<String> findUDynMembers(Group group);\n \n     void clearUDynMembers(Group group);\n \n-    void refreshDynMemberships(User user);\n-\n-    void removeDynMemberships(User user);\n+    /**\n+     * Evaluates all the dynamic group membership conditions against the given user (invoked during save).\n+     *\n+     * @param user user being saved\n+     * @return pair of groups dynamically assigned before and after refresh\n+     */\n+    Pair<Set<String>, Set<String>> refreshDynMemberships(User user);\n+\n+    /**\n+     * Removes the dynamic group memberships of the given anyObject (invoked during delete).\n+     *\n+     * @param user user being deleted\n+     * @return groups dynamically assigned before refresh\n+     */\n+    Set<String> removeDynMemberships(User user);\n \n }"},{"sha":"13d7c7755d020f9de31fa2d7659127b7a9c17e0f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -55,4 +56,6 @@ public interface UserDAO extends AnyDAO<User> {\n     Collection<ExternalResource> findAllResources(User user);\n \n     Pair<Boolean, Boolean> enforcePolicies(User user);\n+\n+    Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(User user);\n }"},{"sha":"1aa14de24885ccbb1a4f30278b62872872e3bbb5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -32,6 +32,7 @@\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -195,15 +196,24 @@ public List<AnyObject> findAll(final int page, final int itemsPerPage) {\n         return query.getResultList();\n     }\n \n-    @Override\n-    public AnyObject save(final AnyObject anyObject) {\n+    private Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject anyObject) {\n         AnyObject merged = super.save(anyObject);\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n-        groupDAO().refreshDynMemberships(merged);\n+        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO().refreshDynMemberships(merged);\n         dynRealmDAO().refreshDynMemberships(merged);\n \n-        return merged;\n+        return Pair.of(merged, dynGroupMembs);\n+    }\n+\n+    @Override\n+    public AnyObject save(final AnyObject anyObject) {\n+        return doSave(anyObject).getLeft();\n+    }\n+\n+    @Override\n+    public Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(final AnyObject anyObject) {\n+        return doSave(anyObject).getRight();\n     }\n \n     private List<ARelationship> findARelationships(final AnyObject anyObject) {"},{"sha":"ae85977beb3ef97beb4703ae74dc54210dddc79f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":42,"deletions":4,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -23,13 +23,15 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -413,7 +415,16 @@ private List<ADynGroupMembership> findWithADynMemberships(final AnyType anyType)\n \n     @Transactional\n     @Override\n-    public void refreshDynMemberships(final AnyObject anyObject) {\n+    public Pair<Set<String>, Set<String>> refreshDynMemberships(final AnyObject anyObject) {\n+        Query dynGroupsQuery = entityManager().createNativeQuery(\n+                \"SELECT group_id FROM \" + ADYNMEMB_TABLE + \" WHERE any_id=?\");\n+        dynGroupsQuery.setParameter(1, anyObject.getKey());\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> dynGroups = dynGroupsQuery.getResultList();\n+\n+        Set<String> before = dynGroups.stream().collect(Collectors.toSet());\n+\n+        Set<String> after = new HashSet<>();\n         findWithADynMemberships(anyObject.getType()).stream().map(memb -> {\n             Query delete = entityManager().createNativeQuery(\n                     \"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE group_id=? AND any_id=?\");\n@@ -430,23 +441,32 @@ public void refreshDynMemberships(final AnyObject anyObject) {\n                 insert.setParameter(2, anyObject.getKey());\n                 insert.setParameter(3, memb.getGroup().getKey());\n                 insert.executeUpdate();\n+\n+                after.add(memb.getGroup().getKey());\n             }\n             return memb;\n         }).forEachOrdered(memb -> publisher.publishEvent(\n                 new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain())));\n+\n+        return Pair.of(before, after);\n     }\n \n     @Override\n-    public void removeDynMemberships(final AnyObject anyObject) {\n+    public Set<String> removeDynMemberships(final AnyObject anyObject) {\n         List<Group> dynGroups = anyObjectDAO().findDynGroups(anyObject.getKey());\n \n         Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE any_id=?\");\n         delete.setParameter(1, anyObject.getKey());\n         delete.executeUpdate();\n \n+        Set<String> before = new HashSet<>();\n         dynGroups.forEach(group -> {\n+            before.add(group.getKey());\n+\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group, AuthContextUtils.getDomain()));\n         });\n+\n+        return before;\n     }\n \n     @Override\n@@ -484,7 +504,16 @@ private List<UDynGroupMembership> findWithUDynMemberships() {\n \n     @Transactional\n     @Override\n-    public void refreshDynMemberships(final User user) {\n+    public Pair<Set<String>, Set<String>> refreshDynMemberships(final User user) {\n+        Query dynGroupsQuery = entityManager().createNativeQuery(\n+                \"SELECT group_id FROM \" + UDYNMEMB_TABLE + \" WHERE any_id=?\");\n+        dynGroupsQuery.setParameter(1, user.getKey());\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> dynGroups = dynGroupsQuery.getResultList();\n+\n+        Set<String> before = dynGroups.stream().collect(Collectors.toSet());\n+\n+        Set<String> after = new HashSet<>();\n         findWithUDynMemberships().stream().map(memb -> {\n             Query delete = entityManager().createNativeQuery(\n                     \"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE group_id=? AND any_id=?\");\n@@ -500,23 +529,32 @@ public void refreshDynMemberships(final User user) {\n                 insert.setParameter(1, user.getKey());\n                 insert.setParameter(2, memb.getGroup().getKey());\n                 insert.executeUpdate();\n+\n+                after.add(memb.getGroup().getKey());\n             }\n             return memb;\n         }).forEachOrdered(memb -> publisher.publishEvent(\n                 new AnyCreatedUpdatedEvent<>(this, memb.getGroup(), AuthContextUtils.getDomain())));\n+\n+        return Pair.of(before, after);\n     }\n \n     @Override\n-    public void removeDynMemberships(final User user) {\n+    public Set<String> removeDynMemberships(final User user) {\n         List<Group> dynGroups = userDAO().findDynGroups(user.getKey());\n \n         Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE any_id=?\");\n         delete.setParameter(1, user.getKey());\n         delete.executeUpdate();\n \n+        Set<String> before = new HashSet<>();\n         dynGroups.forEach(group -> {\n+            before.add(group.getKey());\n+\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, group, AuthContextUtils.getDomain()));\n         });\n+\n+        return before;\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"5b6998ec15a9f2c904b6ae0be4b1c85b11f45002","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -411,8 +411,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n         return ImmutablePair.of(suspend, propagateSuspension);\n     }\n \n-    @Override\n-    public User save(final User user) {\n+    private Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n         // 1. save clear password value before save\n         String clearPwd = user.getClearPassword();\n \n@@ -434,10 +433,20 @@ public User save(final User user) {\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n         roleDAO.refreshDynMemberships(merged);\n-        groupDAO().refreshDynMemberships(merged);\n+        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO().refreshDynMemberships(merged);\n         dynRealmDAO().refreshDynMemberships(merged);\n \n-        return merged;\n+        return Pair.of(merged, dynGroupMembs);\n+    }\n+\n+    @Override\n+    public User save(final User user) {\n+        return doSave(user).getLeft();\n+    }\n+\n+    @Override\n+    public Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(final User user) {\n+        return doSave(user).getRight();\n     }\n \n     @Override"},{"sha":"6c34916c43b4f3044d0459d8072063047bc043f2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAExternalResource.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAExternalResource.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n@@ -208,17 +209,17 @@ public boolean add(final Provision provision) {\n \n     @Override\n     public Optional<? extends Provision> getProvision(final ObjectClass objectClass) {\n-        return provisions.stream().filter(provision -> provision.getObjectClass().equals(objectClass)).findFirst();\n+        return getProvisions().stream().filter(provision -> provision.getObjectClass().equals(objectClass)).findFirst();\n     }\n \n     @Override\n     public Optional<? extends Provision> getProvision(final AnyType anyType) {\n-        return provisions.stream().filter(provision -> provision.getAnyType().equals(anyType)).findFirst();\n+        return getProvisions().stream().filter(provision -> provision.getAnyType().equals(anyType)).findFirst();\n     }\n \n     @Override\n     public List<? extends Provision> getProvisions() {\n-        return provisions;\n+        return provisions == null ? Collections.emptyList() : provisions;\n     }\n \n     @Override"},{"sha":"a2e5c8e8d2f73ff8595da75d5dacdd66cf0b08c1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -28,9 +28,8 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n@@ -55,15 +54,15 @@ public interface MappingManager {\n     String getConnObjectKeyValue(Realm realm, OrgUnit orgUnit);\n \n     /**\n-     * Get attribute values for the given {@link MappingItem} and any object.\n+     * Get attribute values for the given {@link Item} and any object.\n      *\n      * @param provision provision information\n      * @param mapItem mapping item\n      * @param intAttrName int attr name\n      * @param any any object\n      * @return attribute values.\n      */\n-    List<PlainAttrValue> getIntValues(Provision provision, MappingItem mapItem, IntAttrName intAttrName, Any<?> any);\n+    List<PlainAttrValue> getIntValues(Provision provision, Item mapItem, IntAttrName intAttrName, Any<?> any);\n \n     /**\n      * Prepare attributes for sending to a connector instance.\n@@ -88,7 +87,7 @@ Pair<String, Set<Attribute>> prepareAttrs(\n     Pair<String, Set<Attribute>> prepareAttrs(Realm realm, OrgUnit orgUnit);\n \n     /**\n-     * Set attribute values, according to the given {@link MappingItem}, to any object from attribute received from\n+     * Set attribute values, according to the given {@link Item}, to any object from attribute received from\n      * connector.\n      *\n      * @param <T> any object\n@@ -97,16 +96,16 @@ Pair<String, Set<Attribute>> prepareAttrs(\n      * @param anyTO any object\n      * @param anyUtils any utils\n      */\n-    <T extends AnyTO> void setIntValues(MappingItem mapItem, Attribute attr, T anyTO, AnyUtils anyUtils);\n+    <T extends AnyTO> void setIntValues(Item mapItem, Attribute attr, T anyTO, AnyUtils anyUtils);\n \n     /**\n-     * Set attribute values, according to the given {@link OrgUnitItem}, to realm from attribute received from\n+     * Set attribute values, according to the given {@link Item}, to realm from attribute received from\n      * connector.\n      *\n      * @param orgUnitItem mapping item\n      * @param attr attribute received from connector\n      * @param realmTO realm\n      */\n-    void setIntValues(OrgUnitItem orgUnitItem, Attribute attr, RealmTO realmTO);\n+    void setIntValues(Item orgUnitItem, Attribute attr, RealmTO realmTO);\n \n }"},{"sha":"5e180ed0a9d47221fbcb789a68c527b5fa7bdfb8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n@@ -153,7 +154,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         Set<Attribute> attributes = new HashSet<>();\n         String connObjectKey = null;\n \n-        for (MappingItem mapItem : MappingUtils.getPropagationItems(provision)) {\n+        for (Item mapItem : MappingUtils.getPropagationItems(provision.getMapping().getItems())) {\n             LOG.debug(\"Processing expression '{}'\", mapItem.getIntAttrName());\n \n             try {\n@@ -214,7 +215,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         return Pair.of(connObjectKey, attributes);\n     }\n \n-    private String getIntValue(final Realm realm, final OrgUnitItem orgUnitItem) {\n+    private String getIntValue(final Realm realm, final Item orgUnitItem) {\n         String value = null;\n         switch (orgUnitItem.getIntAttrName()) {\n             case \"key\":\n@@ -242,7 +243,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUni\n         Set<Attribute> attributes = new HashSet<>();\n         String connObjectKey = null;\n \n-        for (OrgUnitItem orgUnitItem : MappingUtils.getPropagationItems(orgUnit)) {\n+        for (Item orgUnitItem : MappingUtils.getPropagationItems(orgUnit.getItems())) {\n             LOG.debug(\"Processing expression '{}'\", orgUnitItem.getIntAttrName());\n \n             String value = getIntValue(realm, orgUnitItem);\n@@ -293,7 +294,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUni\n      * @return connObjectKey + prepared attribute\n      */\n     private Pair<String, Attribute> prepareAttr(\n-            final Provision provision, final MappingItem mapItem, final Any<?> any, final String password) {\n+            final Provision provision, final Item mapItem, final Any<?> any, final String password) {\n \n         IntAttrName intAttrName =\n                 intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind());\n@@ -386,7 +387,7 @@ private Pair<String, Attribute> prepareAttr(\n     @Override\n     public List<PlainAttrValue> getIntValues(\n             final Provision provision,\n-            final MappingItem mapItem,\n+            final Item mapItem,\n             final IntAttrName intAttrName,\n             final Any<?> any) {\n \n@@ -606,9 +607,7 @@ public String getConnObjectKeyValue(final Realm realm, final OrgUnit orgUnit) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public void setIntValues(\n-            final MappingItem mapItem, final Attribute attr, final AnyTO anyTO, final AnyUtils anyUtils) {\n-\n+    public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO anyTO, final AnyUtils anyUtils) {\n         List<Object> values = null;\n         if (attr != null) {\n             values = attr.getValue();\n@@ -769,7 +768,7 @@ public void setIntValues(\n     }\n \n     @Override\n-    public void setIntValues(final OrgUnitItem orgUnitItem, final Attribute attr, final RealmTO realmTO) {\n+    public void setIntValues(final Item orgUnitItem, final Attribute attr, final RealmTO realmTO) {\n         List<Object> values = null;\n         if (attr != null) {\n             values = attr.getValue();"},{"sha":"fa838b7b1ac991988602782a042304d6d1195626","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":21,"deletions":14,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -201,7 +201,7 @@ private void fillAttr(\n     private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?> any) {\n         List<String> missingAttrNames = new ArrayList<>();\n \n-        MappingUtils.getPropagationItems(provision).forEach(mapItem -> {\n+        MappingUtils.getPropagationItems(provision.getMapping().getItems()).forEach(mapItem -> {\n             IntAttrName intAttrName = intAttrNameParser.\n                     parse(mapItem.getIntAttrName(), provision.getAnyType().getKind());\n             if (intAttrName.getSchemaType() != null) {\n@@ -215,7 +215,9 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n         return missingAttrNames;\n     }\n \n-    private SyncopeClientException checkMandatoryOnResources(final Any<?> any, final Set<ExternalResource> resources) {\n+    private SyncopeClientException checkMandatoryOnResources(\n+            final Any<?> any, final Collection<? extends ExternalResource> resources) {\n+\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         resources.forEach(resource -> {\n@@ -322,16 +324,21 @@ protected void processAttrPatch(\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n         }\n \n-        resources.forEach(resource -> {\n-            MappingUtils.getPropagationItems(resource.getProvision(any.getType()).get()).stream().\n-                    filter(item -> (schema.getKey().equals(item.getIntAttrName()))).\n-                    forEachOrdered(item -> {\n-                        propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                        if (item.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n-                            propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n-                        }\n-                    });\n-        });\n+        resources.stream().\n+                filter(resource -> (resource.getProvision(any.getType()).isPresent())\n+                && resource.getProvision(any.getType()).get().getMapping() != null).\n+                forEach(resource -> {\n+                    MappingUtils.getPropagationItems(\n+                            resource.getProvision(any.getType()).get().getMapping().getItems()).stream().\n+                            filter(item -> (schema.getKey().equals(item.getIntAttrName()))).\n+                            forEach(item -> {\n+                                propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+\n+                                if (item.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n+                                    propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n+                                }\n+                            });\n+                });\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n@@ -634,7 +641,7 @@ protected Map<String, String> getConnObjectKeys(final Any<?> any, final AnyUtils\n         Map<String, String> connObjectKeys = new HashMap<>();\n \n         Iterable<? extends ExternalResource> iterable = anyUtils.getAllResources(any);\n-        for (ExternalResource resource : iterable) {\n+        anyUtils.getAllResources(any).forEach(resource -> {\n             Optional<? extends Provision> provision = resource.getProvision(any.getType());\n             if (provision.isPresent() && provision.get().getMapping() != null) {\n                 Optional<MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision.get());\n@@ -649,7 +656,7 @@ protected Map<String, String> getConnObjectKeys(final Any<?> any, final AnyUtils\n                     connObjectKeys.put(resource.getKey(), connObjectKey.get());\n                 }\n             }\n-        }\n+        });\n \n         return connObjectKeys;\n     }"},{"sha":"eafba379d06a7c00b717d6a7626ce9852ccc1b22","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":33,"deletions":5,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -27,6 +27,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n@@ -389,10 +390,8 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         propByRes.addAll(ResourceOperation.DELETE, toBeDeprovisioned);\n         propByRes.addAll(ResourceOperation.UPDATE, toBeProvisioned);\n \n-        /**\n-         * In case of new memberships all the current resources have to be updated in order to propagate new group and\n-         * membership attribute values.\n-         */\n+        // In case of new memberships all current resources need to be updated in order to propagate new group\n+        // attribute values.\n         if (!toBeDeprovisioned.isEmpty() || !toBeProvisioned.isEmpty()) {\n             currentResources.removeAll(toBeDeprovisioned);\n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n@@ -408,7 +407,36 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                     propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n                 });\n \n-        anyObjectDAO.save(anyObject);\n+        Pair<Set<String>, Set<String>> dynGroupMembs = anyObjectDAO.saveAndGetDynGroupMembs(anyObject);\n+\n+        // finally check if any resource assignment is to be processed due to dynamic group membership change\n+        dynGroupMembs.getLeft().stream().\n+                filter(group -> !dynGroupMembs.getRight().contains(group)).\n+                forEach(delete -> {\n+                    groupDAO.find(delete).getResources().stream().\n+                            filter(resource -> !propByRes.contains(resource.getKey())).\n+                            forEach(resource -> {\n+                                propByRes.add(ResourceOperation.DELETE, resource.getKey());\n+                            });\n+                });\n+        dynGroupMembs.getLeft().stream().\n+                filter(group -> dynGroupMembs.getRight().contains(group)).\n+                forEach(update -> {\n+                    groupDAO.find(update).getResources().stream().\n+                            filter(resource -> !propByRes.contains(resource.getKey())).\n+                            forEach(resource -> {\n+                                propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                            });\n+                });\n+        dynGroupMembs.getRight().stream().\n+                filter(group -> !dynGroupMembs.getLeft().contains(group)).\n+                forEach(create -> {\n+                    groupDAO.find(create).getResources().stream().\n+                            filter(resource -> !propByRes.contains(resource.getKey())).\n+                            forEach(resource -> {\n+                                propByRes.add(ResourceOperation.CREATE, resource.getKey());\n+                            });\n+                });\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {"},{"sha":"ce3a1270db1508205d1a28db9a7cf8e2584a229b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":31,"deletions":1,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -29,6 +29,7 @@\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n@@ -511,7 +512,36 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                     propByRes.add(ResourceOperation.UPDATE, entry.getKey());\n                 });\n \n-        userDAO.save(user);\n+        Pair<Set<String>, Set<String>> dynGroupMembs = userDAO.saveAndGetDynGroupMembs(user);\n+\n+        // finally check if any resource assignment is to be processed due to dynamic group membership change\n+        dynGroupMembs.getLeft().stream().\n+                filter(group -> !dynGroupMembs.getRight().contains(group)).\n+                forEach(delete -> {\n+                    groupDAO.find(delete).getResources().stream().\n+                            filter(resource -> !propByRes.contains(resource.getKey())).\n+                            forEach(resource -> {\n+                                propByRes.add(ResourceOperation.DELETE, resource.getKey());\n+                            });\n+                });\n+        dynGroupMembs.getLeft().stream().\n+                filter(group -> dynGroupMembs.getRight().contains(group)).\n+                forEach(update -> {\n+                    groupDAO.find(update).getResources().stream().\n+                            filter(resource -> !propByRes.contains(resource.getKey())).\n+                            forEach(resource -> {\n+                                propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+                            });\n+                });\n+        dynGroupMembs.getRight().stream().\n+                filter(group -> !dynGroupMembs.getLeft().contains(group)).\n+                forEach(create -> {\n+                    groupDAO.find(create).getResources().stream().\n+                            filter(resource -> !propByRes.contains(resource.getKey())).\n+                            forEach(resource -> {\n+                                propByRes.add(ResourceOperation.CREATE, resource.getKey());\n+                            });\n+                });\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {"},{"sha":"9b1ab70357812b87bfbf5db7630e4a6e0ba49385","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -611,7 +611,7 @@ protected ConnectorObject getRemoteObject(\n                     AttributeBuilder.build(\n                             MappingUtils.getConnObjectKeyItem(provision).get().getExtAttrName(), connObjectKey),\n                     MappingUtils.buildOperationOptions(new IteratorChain<>(\n-                            MappingUtils.getPropagationItems(provision).iterator(),\n+                            MappingUtils.getPropagationItems(provision.getMapping().getItems()).iterator(),\n                             linkingMappingItems.iterator())));\n \n             for (MappingItem item : linkingMappingItems) {\n@@ -657,7 +657,8 @@ protected ConnectorObject getRemoteObject(\n         try {\n             obj = connector.getObject(new ObjectClass(task.getObjectClassName()),\n                     AttributeBuilder.build(orgUnit.getConnObjectKeyItem().get().getExtAttrName(), connObjectKey),\n-                    MappingUtils.buildOperationOptions(MappingUtils.getPropagationItems(orgUnit).iterator()));\n+                    MappingUtils.buildOperationOptions(\n+                            MappingUtils.getPropagationItems(orgUnit.getItems()).iterator()));\n         } catch (TimeoutException toe) {\n             LOG.debug(\"Request timeout\", toe);\n             throw toe;"},{"sha":"fb48708dce53f8953573fd3daea50fc4bce168e4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -52,7 +52,7 @@\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n@@ -360,12 +360,12 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n \n         List<PropagationTask> tasks = new ArrayList<>();\n \n-        for (Map.Entry<String, ResourceOperation> entry : propByRes.asMap().entrySet()) {\n+        propByRes.asMap().entrySet().forEach(entry -> {\n             ExternalResource resource = resourceDAO.find(entry.getKey());\n             Provision provision = resource == null ? null : resource.getProvision(any.getType()).orElse(null);\n-            List<? extends MappingItem> mappingItems = provision == null\n-                    ? Collections.<MappingItem>emptyList()\n-                    : MappingUtils.getPropagationItems(provision);\n+            List<? extends Item> mappingItems = provision == null\n+                    ? Collections.<Item>emptyList()\n+                    : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n \n             if (resource == null) {\n                 LOG.error(\"Invalid resource name specified: {}, ignoring...\", entry.getKey());\n@@ -424,7 +424,7 @@ protected List<PropagationTask> createTasks(final Any<?> any,\n \n                 LOG.debug(\"PropagationTask created: {}\", task);\n             }\n-        }\n+        });\n \n         return tasks;\n     }"},{"sha":"1874e6aa20a5d40a8422e12d72681961183d706d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PlainAttrsPullCorrelationRule.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPlainAttrsPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPlainAttrsPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPlainAttrsPullCorrelationRule.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -46,16 +46,16 @@ public PlainAttrsPullCorrelationRule(final String[] plainSchemaNames, final Prov\n \n     @Override\n     public SearchCond getSearchCond(final ConnectorObject connObj) {\n-        Map<String, MappingItem> mappingItems = new HashMap<>();\n-        for (MappingItem item : MappingUtils.getPullItems(provision)) {\n+        Map<String, Item> mappingItems = new HashMap<>();\n+        for (Item item : MappingUtils.getPullItems(provision.getMapping().getItems())) {\n             mappingItems.put(item.getIntAttrName(), item);\n         }\n \n         // search for anys by attribute(s) specified in the policy\n         SearchCond searchCond = null;\n \n         for (String schema : plainSchemaNames) {\n-            MappingItem mappingItem = mappingItems.get(schema);\n+            Item mappingItem = mappingItems.get(schema);\n             Attribute attr = mappingItem == null\n                     ? null\n                     : connObj.getAttributeByName(mappingItem.getExtAttrName());"},{"sha":"9c6f4860508eea631e3fe17394dc335894de0266","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -152,7 +152,7 @@ protected String doExecuteProvisioning(\n         if (pullTask.getResource().getOrgUnit() != null) {\n             OrgUnit orgUnit = pullTask.getResource().getOrgUnit();\n             OperationOptions options = MappingUtils.buildOperationOptions(\n-                    MappingUtils.getPullItems(orgUnit).iterator());\n+                    MappingUtils.getPullItems(orgUnit.getItems()).iterator());\n \n             SyncopePullResultHandler rhandler = (SyncopePullResultHandler) ApplicationContextProvider.getBeanFactory().\n                     createBean(RealmPullResultHandlerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);"},{"sha":"15976b4b3eec6d8e4d7fcc4521aa704fc245f0e1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullUtils.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullUtils.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -132,7 +132,8 @@ public Optional<String> findMatchingAnyKey(\n         final List<ConnectorObject> found = new ArrayList<>();\n         connector.search(provision.get().getObjectClass(),\n                 new EqualsFilter(new Name(name)), obj -> found.add(obj),\n-                MappingUtils.buildOperationOptions(MappingUtils.getPullItems(provision.get()).iterator()));\n+                MappingUtils.buildOperationOptions(\n+                        MappingUtils.getPullItems(provision.get().getMapping().getItems()).iterator()));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", provision.get().getObjectClass(), resource, name);"},{"sha":"9f0bbd57dd1bd263d3a5a92f986fdd671106171e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -160,7 +160,7 @@ public <T extends AnyTO> T getAnyTO(\n     public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final OrgUnit orgUnit) {\n         RealmTO realmTO = new RealmTO();\n \n-        MappingUtils.getPullItems(orgUnit).forEach(item -> {\n+        MappingUtils.getPullItems(orgUnit.getItems()).forEach(item -> {\n             mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), realmTO);\n         });\n \n@@ -263,7 +263,7 @@ private <T extends AnyTO> T getAnyTOFromConnObject(\n \n         // 1. fill with data from connector object\n         anyTO.setRealm(pullTask.getDestinatioRealm().getFullPath());\n-        MappingUtils.getPullItems(provision).forEach(item -> {\n+        MappingUtils.getPullItems(provision.getMapping().getItems()).forEach(item -> {\n             mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), anyTO, anyUtils);\n         });\n "},{"sha":"eee6d9a2682ba632751b090dafee6f247c53667b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":4,"deletions":22,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.utils;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n@@ -38,7 +37,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n-import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.java.data.JEXLItemTransformerImpl;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n@@ -69,34 +67,18 @@ public static Optional<MappingItem> getConnObjectKeyItem(final Provision provisi\n                 : mapping.getConnObjectKeyItem().get());\n     }\n \n-    public static List<? extends MappingItem> getPropagationItems(final Provision provision) {\n-        return provision == null\n-                ? Collections.emptyList()\n-                : provision.getMapping().getItems().stream().\n+    public static List<? extends Item> getPropagationItems(final List<? extends Item> items) {\n+        return items.stream().\n                         filter(item -> item.getPurpose() == MappingPurpose.PROPAGATION\n                         || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n-    public static List<? extends MappingItem> getPullItems(final Provision provision) {\n-        return provision == null\n-                ? Collections.emptyList()\n-                : provision.getMapping().getItems().stream().\n+    public static List<? extends Item> getPullItems(final List<? extends Item> items) {\n+        return items.stream().\n                         filter(item -> item.getPurpose() == MappingPurpose.PULL\n                         || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n     }\n \n-    public static List<? extends OrgUnitItem> getPropagationItems(final OrgUnit orgUnit) {\n-        return orgUnit.getItems().stream().\n-                filter(item -> item.getPurpose() == MappingPurpose.PROPAGATION\n-                || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n-    }\n-\n-    public static List<? extends OrgUnitItem> getPullItems(final OrgUnit orgUnit) {\n-        return orgUnit.getItems().stream().\n-                filter(item -> item.getPurpose() == MappingPurpose.PULL\n-                || item.getPurpose() == MappingPurpose.BOTH).collect(Collectors.toList());\n-    }\n-\n     private static Name evaluateNAME(final String evalConnObjectLink, final String connObjectKey) {\n         // If connObjectLink evaluates to an empty string, just use the provided connObjectKey as Name(),\n         // otherwise evaluated connObjectLink expression is taken as Name()."},{"sha":"a21bfa50a975b7032a4eaf423b092cf34b42c1b0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5295039bb5443114822d288635589f8b24b43609/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5295039bb5443114822d288635589f8b24b43609/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=5295039bb5443114822d288635589f8b24b43609","patch":"@@ -39,8 +39,10 @@\n import javax.ws.rs.core.GenericType;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.helpers.IOUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n@@ -1390,4 +1392,40 @@ public void issueSYNCOPE1166() {\n         assertEquals(RESOURCE_NAME_DBVIRATTR, result.getPropagationStatuses().get(1).getResource());\n         assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(1).getStatus());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1206() {\n+        // 1. create group with dynamic user condition 'cool==true'\n+        GroupTO dynGroup = GroupITCase.getSampleTO(\"syncope1206\");\n+        dynGroup.setUDynMembershipCond(\n+                SyncopeClient.getUserSearchConditionBuilder().is(\"cool\").equalTo(\"true\").query());\n+        dynGroup = createGroup(dynGroup).getEntity();\n+        assertNotNull(dynGroup);\n+        assertTrue(dynGroup.getResources().contains(RESOURCE_NAME_LDAP));\n+\n+        // 2. create user (no value for cool, no dynamic membership, no propagation to LDAP)\n+        UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope1206@apache.org\");\n+        userTO.getResources().clear();\n+\n+        ProvisioningResult<UserTO> result = createUser(userTO);\n+        assertTrue(result.getPropagationStatuses().isEmpty());\n+\n+        // 3. update user to match the dynamic condition: expect propagation to LDAP\n+        UserPatch userPatch = new UserPatch();\n+        userPatch.setKey(result.getEntity().getKey());\n+        userPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"cool\", \"true\")).build());\n+\n+        result = updateUser(userPatch);\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+\n+        // 4. update again user to not match the dynamic condition any more: expect propagation to LDAP\n+        userPatch = new UserPatch();\n+        userPatch.setKey(result.getEntity().getKey());\n+        userPatch.getPlainAttrs().add(new AttrPatch.Builder().attrTO(attrTO(\"cool\", \"false\")).build());\n+\n+        result = updateUser(userPatch);\n+        assertEquals(1, result.getPropagationStatuses().size());\n+        assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n+    }\n }"}]}