{"sha":"03cb2f012124a40a6f9ef4b5861beb32a2798848","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAzY2IyZjAxMjEyNGE0MGE2ZjllZjRiNTg2MWJlYjMyYTI3OTg4NDg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-30T14:28:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-05-30T14:28:17Z"},"message":"[SYNCOPE-1100] Providing JWT expire as HTTP header in response to login + adding support for that with SAML 2.0 SP Agent","tree":{"sha":"faa3a1afe9b2699a96eba1e8090dd0d4e2bcac1f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/faa3a1afe9b2699a96eba1e8090dd0d4e2bcac1f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/03cb2f012124a40a6f9ef4b5861beb32a2798848","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/03cb2f012124a40a6f9ef4b5861beb32a2798848","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/03cb2f012124a40a6f9ef4b5861beb32a2798848","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/03cb2f012124a40a6f9ef4b5861beb32a2798848/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d40aafe76a129ddcf4d7656d27e2ecc36c9aa056","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d40aafe76a129ddcf4d7656d27e2ecc36c9aa056","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d40aafe76a129ddcf4d7656d27e2ecc36c9aa056"}],"stats":{"total":63,"additions":50,"deletions":13},"files":[{"sha":"2a613210e2015cda648d23a3fbfc13d8e146d122","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -27,6 +27,8 @@ public final class RESTHeaders {\n \n     public static final String TOKEN = \"X-Syncope-Token\";\n \n+    public static final String TOKEN_EXPIRE = \"X-Syncope-Token-Expire\";\n+\n     public static final String OWNED_ENTITLEMENTS = \"X-Syncope-Entitlements\";\n \n     public static final String RESOURCE_KEY = \"X-Syncope-Key\";"},{"sha":"c4953922cfa28617bd27f4bf98a935b17736ae91","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -21,10 +21,12 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.List;\n import javax.annotation.Resource;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n@@ -50,7 +52,7 @@ public class AccessTokenLogic extends AbstractTransactionalLogic<AccessTokenTO>\n     private AccessTokenDAO accessTokenDAO;\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public String login() {\n+    public Pair<String, Date> login() {\n         if (anonymousUser.equals(AuthContextUtils.getUsername())) {\n             throw new IllegalArgumentException(anonymousUser + \" cannot be granted for an access token\");\n         }\n@@ -59,7 +61,7 @@ public String login() {\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public String refresh() {\n+    public Pair<String, Date> refresh() {\n         AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());\n         if (accessToken == null) {\n             throw new NotFoundException(\"AccessToken for \" + AuthContextUtils.getUsername());"},{"sha":"be51926dc2b38e73cac48e16c67c44e6c5262831","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AccessTokenDataBinder.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Date;\n import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n@@ -28,9 +29,9 @@ public interface AccessTokenDataBinder {\n \n     Triple<String, String, Date> generateJWT(String subject, int duration, Map<String, Object> claims);\n \n-    String create(String subject, Map<String, Object> claims, boolean replaceExisting);\n+    Pair<String, Date> create(String subject, Map<String, Object> claims, boolean replaceExisting);\n \n-    String update(AccessToken accessToken);\n+    Pair<String, Date> update(AccessToken accessToken);\n \n     AccessTokenTO getAccessTokenTO(AccessToken accessToken);\n "},{"sha":"5159733a3127cf6e444226671e5f2c17224e60de","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -24,6 +24,7 @@\n import java.util.Date;\n import java.util.Map;\n import javax.annotation.Resource;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.rs.security.jose.common.JoseType;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n@@ -110,12 +111,16 @@ public Triple<String, String, Date> generateJWT(\n     }\n \n     @Override\n-    public String create(final String subject, final Map<String, Object> claims, final boolean replaceExisting) {\n+    public Pair<String, Date> create(\n+            final String subject, final Map<String, Object> claims, final boolean replaceExisting) {\n+\n         String body = null;\n+        Date expiryTime = null;\n \n         AccessToken existing = accessTokenDAO.findByOwner(subject);\n         if (existing != null) {\n             body = existing.getBody();\n+            expiryTime = existing.getExpiryTime();\n         }\n \n         if (replaceExisting || body == null) {\n@@ -125,11 +130,12 @@ public String create(final String subject, final Map<String, Object> claims, fin\n                     claims);\n \n             body = created.getMiddle();\n+            expiryTime = created.getRight();\n \n             AccessToken accessToken = entityFactory.newEntity(AccessToken.class);\n             accessToken.setKey(created.getLeft());\n             accessToken.setBody(body);\n-            accessToken.setExpiryTime(created.getRight());\n+            accessToken.setExpiryTime(expiryTime);\n             accessToken.setOwner(subject);\n \n             if (!adminUser.equals(accessToken.getOwner())) {\n@@ -149,11 +155,11 @@ public String create(final String subject, final Map<String, Object> claims, fin\n             accessTokenDAO.delete(existing);\n         }\n \n-        return body;\n+        return Pair.of(body, expiryTime);\n     }\n \n     @Override\n-    public String update(final AccessToken accessToken) {\n+    public Pair<String, Date> update(final AccessToken accessToken) {\n         JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken.getBody());\n \n         Date now = new Date();\n@@ -167,9 +173,10 @@ public String update(final AccessToken accessToken) {\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(token);\n \n         String body = producer.signWith(jwsSignatureProvider);\n+        Date expiryTime = expiry.getTime();\n \n         accessToken.setBody(body);\n-        accessToken.setExpiryTime(expiry.getTime());\n+        accessToken.setExpiryTime(expiryTime);\n \n         if (!adminUser.equals(accessToken.getOwner())) {\n             try {\n@@ -183,7 +190,7 @@ public String update(final AccessToken accessToken) {\n \n         accessTokenDAO.save(accessToken);\n \n-        return body;\n+        return Pair.of(body, expiryTime);\n     }\n \n     @Override"},{"sha":"54db9cc0e90fed9789813a404bd2404639080c7d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.core.rest.cxf.service;\n \n+import java.util.Date;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -36,15 +39,21 @@ public class AccessTokenServiceImpl extends AbstractServiceImpl implements Acces\n \n     @Override\n     public Response login() {\n+        Pair<String, Date> login = logic.login();\n         return Response.noContent().\n-                header(RESTHeaders.TOKEN, logic.login()).\n+                header(RESTHeaders.TOKEN, login.getLeft()).\n+                header(RESTHeaders.TOKEN_EXPIRE,\n+                        DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.format(login.getRight())).\n                 build();\n     }\n \n     @Override\n     public Response refresh() {\n+        Pair<String, Date> refresh = logic.refresh();\n         return Response.noContent().\n-                header(RESTHeaders.TOKEN, logic.refresh()).\n+                header(RESTHeaders.TOKEN, refresh.getLeft()).\n+                header(RESTHeaders.TOKEN_EXPIRE,\n+                        DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.format(refresh.getRight())).\n                 build();\n     }\n "},{"sha":"698aa7f0f6c97df608dc0017b681146c5cc7e418","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AssertionConsumer.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -45,6 +45,7 @@ protected void doPost(final HttpServletRequest request, final HttpServletRespons\n                     validateLoginResponse(extract(request.getInputStream()));\n \n             request.getSession(true).setAttribute(Constants.SAML2SPJWT, responseTO.getAccessToken());\n+            request.getSession(true).setAttribute(Constants.SAML2SPJWT_EXPIRE, responseTO.getAccessTokenExpiryTime());\n \n             String successURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_SUCCESS_URL);\n             if (successURL == null) {"},{"sha":"b7da815d9d93af286c586553c5c8e4b6f3b11688","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Constants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -36,6 +36,8 @@ public final class Constants {\n \n     public static final String SAML2SPJWT = \"saml2sp.jwt\";\n \n+    public static final String SAML2SPJWT_EXPIRE = \"saml2sp.jwt.expire\";\n+\n     private Constants() {\n         // private constructor for static utility class\n     }"},{"sha":"f905035f88e7855a4afc7ea2406e19042a603a83","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2LoginResponseTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -44,6 +44,8 @@ public class SAML2LoginResponseTO extends AbstractBaseBean {\n \n     private String accessToken;\n \n+    private Date accessTokenExpiryTime;\n+\n     private String username;\n \n     private final Set<AttrTO> attrs = new HashSet<>();\n@@ -106,6 +108,14 @@ public void setAccessToken(final String accessToken) {\n         this.accessToken = accessToken;\n     }\n \n+    public Date getAccessTokenExpiryTime() {\n+        return accessTokenExpiryTime;\n+    }\n+\n+    public void setAccessTokenExpiryTime(final Date accessTokenExpiryTime) {\n+        this.accessTokenExpiryTime = accessTokenExpiryTime;\n+    }\n+\n     public String getUsername() {\n         return username;\n     }"},{"sha":"e5c444c79a414c852e64f3ac4fe7d80105e3f49b","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/03cb2f012124a40a6f9ef4b5861beb32a2798848/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/03cb2f012124a40a6f9ef4b5861beb32a2798848/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=03cb2f012124a40a6f9ef4b5861beb32a2798848","patch":"@@ -33,6 +33,7 @@\n import java.util.Map;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n@@ -530,7 +531,9 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         claims.put(JWT_CLAIM_NAMEID_FORMAT, nameID.getFormat());\n         claims.put(JWT_CLAIM_NAMEID_VALUE, nameID.getValue());\n         claims.put(JWT_CLAIM_SESSIONINDEX, responseTO.getSessionIndex());\n-        responseTO.setAccessToken(accessTokenDataBinder.create(responseTO.getUsername(), claims, true));\n+        Pair<String, Date> accessTokenInfo = accessTokenDataBinder.create(responseTO.getUsername(), claims, true);\n+        responseTO.setAccessToken(accessTokenInfo.getLeft());\n+        responseTO.setAccessTokenExpiryTime(accessTokenInfo.getRight());\n \n         return responseTO;\n     }"}]}