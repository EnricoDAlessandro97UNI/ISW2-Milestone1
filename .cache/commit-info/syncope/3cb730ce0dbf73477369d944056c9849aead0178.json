{"sha":"3cb730ce0dbf73477369d944056c9849aead0178","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNjYjczMGNlMGRiZjczNDc3MzY5ZDk0NDA1NmM5ODQ5YWVhZDAxNzg=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-19T09:30:44Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-19T09:30:44Z"},"message":"[SYNCOPE-231]\nAdded ConnectorService implementation\nAdding JAX-B Annotations for related TOs\nCode cleanup (according to checkstyle and PMD)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1435513 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"73bd1ad8e5b8f729e8888bf7c08e3c9eba91a6b3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/73bd1ad8e5b8f729e8888bf7c08e3c9eba91a6b3"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3cb730ce0dbf73477369d944056c9849aead0178","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3cb730ce0dbf73477369d944056c9849aead0178","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3cb730ce0dbf73477369d944056c9849aead0178","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3cb730ce0dbf73477369d944056c9849aead0178/comments","author":null,"committer":null,"parents":[{"sha":"60756a286dc8cc42ec1833dce0d7290fc795a2ee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/60756a286dc8cc42ec1833dce0d7290fc795a2ee","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/60756a286dc8cc42ec1833dce0d7290fc795a2ee"}],"stats":{"total":643,"additions":433,"deletions":210},"files":[{"sha":"4e1961a334dbfcef257e18b404b850731bfb045e","filename":"client/src/main/java/org/apache/syncope/client/to/AbstractSchemaTO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FAbstractSchemaTO.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -18,8 +18,11 @@\n  */\r\n package org.apache.syncope.client.to;\r\n \r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n import org.apache.syncope.client.AbstractBaseBean;\r\n \r\n+@XmlType\r\n public abstract class AbstractSchemaTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 4088388951694301759L;\r\n@@ -30,7 +33,7 @@ public String getName() {\n         return name;\r\n     }\r\n \r\n-    public void setName(String name) {\r\n+    public void setName(final String name) {\r\n         this.name = name;\r\n     }\r\n \r"},{"sha":"2f5f254184329eb8ab3fff9f0bd4ea6ab6fd9c07","filename":"client/src/main/java/org/apache/syncope/client/to/ConnBundleTO.java","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConnBundleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConnBundleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConnBundleTO.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -20,9 +20,17 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n import org.apache.syncope.client.AbstractBaseBean;\n import org.apache.syncope.types.ConnConfPropSchema;\n \n+@XmlRootElement(name = \"connectorBundle\")\n+@XmlType\n public class ConnBundleTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 7215115961910138005L;\n@@ -35,57 +43,55 @@ public class ConnBundleTO extends AbstractBaseBean {\n \n     private String connectorName;\n \n-    private List<ConnConfPropSchema> properties;\n-\n-    public ConnBundleTO() {\n-        properties = new ArrayList<ConnConfPropSchema>();\n-    }\n+    private List<ConnConfPropSchema> properties = new ArrayList<ConnConfPropSchema>();\n \n     public String getBundleName() {\n         return bundleName;\n     }\n \n-    public void setBundleName(String bundleName) {\n+    public void setBundleName(final String bundleName) {\n         this.bundleName = bundleName;\n     }\n \n     public String getConnectorName() {\n         return connectorName;\n     }\n \n-    public void setConnectorName(String connectorName) {\n+    public void setConnectorName(final String connectorName) {\n         this.connectorName = connectorName;\n     }\n \n     public String getDisplayName() {\n         return displayName;\n     }\n \n-    public void setDisplayName(String displayName) {\n+    public void setDisplayName(final String displayName) {\n         this.displayName = displayName;\n     }\n \n+    @XmlElementWrapper(name = \"properties\")\n+    @XmlElement(name = \"connConfPropSchema\")\n     public List<ConnConfPropSchema> getProperties() {\n         return properties;\n     }\n \n-    public void setProperties(List<ConnConfPropSchema> properties) {\n+    public void setProperties(final List<ConnConfPropSchema> properties) {\n         this.properties = properties;\n     }\n \n-    public boolean addProperty(ConnConfPropSchema property) {\n+    public boolean addProperty(final ConnConfPropSchema property) {\n         return properties.add(property);\n     }\n \n-    public boolean removeProperty(ConnConfPropSchema property) {\n+    public boolean removeProperty(final ConnConfPropSchema property) {\n         return properties.remove(property);\n     }\n \n     public String getVersion() {\n         return version;\n     }\n \n-    public void setVersion(String version) {\n+    public void setVersion(final String version) {\n         this.version = version;\n     }\n }"},{"sha":"42d359a50d711a687f1347ee3939fe9f77acbbed","filename":"client/src/main/java/org/apache/syncope/client/to/ConnInstanceTO.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConnInstanceTO.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -24,11 +24,19 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n import org.codehaus.jackson.annotate.JsonIgnore;\n import org.apache.syncope.client.AbstractBaseBean;\n import org.apache.syncope.types.ConnConfProperty;\n import org.apache.syncope.types.ConnectorCapability;\n \n+@XmlRootElement(name = \"connector\")\n+@XmlType\n public class ConnInstanceTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 2707778645445168671L;\n@@ -41,9 +49,9 @@ public class ConnInstanceTO extends AbstractBaseBean {\n \n     private String connectorName;\n \n-    private Set<ConnConfProperty> configuration;\n+    private final Set<ConnConfProperty> configuration;\n \n-    private Set<ConnectorCapability> capabilities;\n+    private final Set<ConnectorCapability> capabilities;\n \n     private String displayName;\n \n@@ -78,6 +86,8 @@ public void setVersion(String bundleversion) {\n         this.version = bundleversion;\n     }\n \n+    @XmlElementWrapper(name = \"configuration\")\n+    @XmlElement(name = \"property\")\n     public Set<ConnConfProperty> getConfiguration() {\n         return this.configuration;\n     }\n@@ -130,6 +140,8 @@ public boolean removeCapability(ConnectorCapability capability) {\n         return capabilities.remove(capability);\n     }\n \n+    @XmlElementWrapper(name = \"capabilities\")\n+    @XmlElement(name = \"capability\")\n     public Set<ConnectorCapability> getCapabilities() {\n         return capabilities;\n     }"},{"sha":"53a7940e8a056451fee8a8867a276ea51f8c81e3","filename":"client/src/main/java/org/apache/syncope/client/to/SchemaTO.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -18,14 +18,19 @@\n  */\n package org.apache.syncope.client.to;\n \n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.types.SchemaType;\n \n+@XmlRootElement(name = \"schema\")\n+@XmlType\n public class SchemaTO extends AbstractSchemaTO {\n \n     private static final long serialVersionUID = -8133983392476990308L;\n \n-    private SchemaType type;\n+    private SchemaType type = SchemaType.String;\n \n     private String mandatoryCondition;\n \n@@ -43,15 +48,11 @@ public class SchemaTO extends AbstractSchemaTO {\n \n     private String validatorClass;\n \n-    public SchemaTO() {\n-        type = SchemaType.String;\n-    }\n-\n     public String getConversionPattern() {\n         return conversionPattern;\n     }\n \n-    public void setConversionPattern(String conversionPattern) {\n+    public void setConversionPattern(final String conversionPattern) {\n         this.conversionPattern = conversionPattern;\n     }\n \n@@ -61,63 +62,63 @@ public String getMandatoryCondition() {\n                 : \"false\";\n     }\n \n-    public void setMandatoryCondition(String mandatoryCondition) {\n+    public void setMandatoryCondition(final String mandatoryCondition) {\n         this.mandatoryCondition = mandatoryCondition;\n     }\n \n     public String getEnumerationValues() {\n         return enumerationValues;\n     }\n \n-    public void setEnumerationValues(String enumerationValues) {\n+    public void setEnumerationValues(final String enumerationValues) {\n         this.enumerationValues = enumerationValues;\n     }\n \n     public String getEnumerationKeys() {\n         return enumerationKeys;\n     }\n \n-    public void setEnumerationKeys(String enumerationKeys) {\n+    public void setEnumerationKeys(final String enumerationKeys) {\n         this.enumerationKeys = enumerationKeys;\n     }\n \n     public boolean isMultivalue() {\n         return multivalue;\n     }\n \n-    public void setMultivalue(boolean multivalue) {\n+    public void setMultivalue(final boolean multivalue) {\n         this.multivalue = multivalue;\n     }\n \n     public boolean isUniqueConstraint() {\n         return uniqueConstraint;\n     }\n \n-    public void setUniqueConstraint(boolean uniqueConstraint) {\n+    public void setUniqueConstraint(final boolean uniqueConstraint) {\n         this.uniqueConstraint = uniqueConstraint;\n     }\n \n     public boolean isReadonly() {\n         return readonly;\n     }\n \n-    public void setReadonly(boolean readonly) {\n+    public void setReadonly(final boolean readonly) {\n         this.readonly = readonly;\n     }\n \n     public SchemaType getType() {\n         return type;\n     }\n \n-    public void setType(SchemaType type) {\n+    public void setType(final SchemaType type) {\n         this.type = type;\n     }\n \n     public String getValidatorClass() {\n         return validatorClass;\n     }\n \n-    public void setValidatorClass(String validatorClass) {\n+    public void setValidatorClass(final String validatorClass) {\n         this.validatorClass = validatorClass;\n     }\n }"},{"sha":"b2b79a2e47120be08bc70f2c11e6d71d753a07f9","filename":"client/src/main/java/org/apache/syncope/services/ConfigurationService.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -27,8 +27,6 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-import javax.ws.rs.Produces;\r\n-import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n \r\n import org.apache.syncope.client.to.ConfigurationTO;\r\n@@ -42,7 +40,7 @@ public interface ConfigurationService {\n     Response create(ConfigurationTO configurationTO);\r\n \r\n     @GET\r\n-    @Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n+    @Path(\"dbDump\")\r\n     Response dbExport();\r\n \r\n     @DELETE\r"},{"sha":"2d12a00dbf7546f3d043f3195153bc09df12d3f4","filename":"client/src/main/java/org/apache/syncope/services/ConnectorService.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConnectorService.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -28,8 +28,11 @@\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.QueryParam;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n import org.apache.syncope.client.to.ConnBundleTO;\r\n import org.apache.syncope.client.to.ConnInstanceTO;\r\n+import org.apache.syncope.client.to.SchemaTO;\r\n import org.apache.syncope.types.ConnConfProperty;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RequestMethod;\r\n@@ -38,11 +41,11 @@\n public interface ConnectorService {\r\n \r\n     @POST\r\n-    ConnInstanceTO create(ConnInstanceTO connectorTO);\r\n+    Response create(ConnInstanceTO connectorTO);\r\n \r\n     @DELETE\r\n     @Path(\"{connectorId}\")\r\n-    ConnInstanceTO delete(@PathParam(\"connectorId\") Long connectorId);\r\n+    void delete(@PathParam(\"connectorId\") Long connectorId);\r\n \r\n     @GET\r\n     @Path(\"bundles\")\r\n@@ -53,10 +56,9 @@ public interface ConnectorService {\n     List<ConnConfProperty> getConfigurationProperties(\r\n             @PathParam(\"connectorId\") Long connectorId);\r\n \r\n-    @GET\r\n     @POST\r\n     @Path(\"{connectorId}/schemas\")\r\n-    List<String> getSchemaNames(\r\n+    List<SchemaTO> getSchemaNames(\r\n             @PathParam(\"connectorId\") Long connectorId,\r\n             ConnInstanceTO connectorTO,\r\n             @QueryParam(\"showall\") @DefaultValue(\"false\") boolean showall);\r\n@@ -75,7 +77,7 @@ ConnInstanceTO readConnectorBean(\n \r\n     @PUT\r\n     @Path(\"{connectorId}\")\r\n-    ConnInstanceTO update(@PathParam(\"connectorId\") Long connectorId,\r\n+    void update(@PathParam(\"connectorId\") Long connectorId,\r\n             ConnInstanceTO connectorTO);\r\n \r\n     @POST\r"},{"sha":"253478b77fe402ab43a8735861e7f053ae6abe14","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConnectorServiceProxy.java","status":"modified","additions":38,"deletions":25,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -18,10 +18,16 @@\n  */\r\n package org.apache.syncope.services.proxy;\r\n \r\n+import java.net.URI;\r\n+import java.util.ArrayList;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n+\r\n+import javax.ws.rs.core.Response;\r\n+\r\n import org.apache.syncope.client.to.ConnBundleTO;\r\n import org.apache.syncope.client.to.ConnInstanceTO;\r\n+import org.apache.syncope.client.to.SchemaTO;\r\n import org.apache.syncope.services.ConnectorService;\r\n import org.apache.syncope.types.ConnConfProperty;\r\n import org.springframework.web.client.RestTemplate;\r\n@@ -33,28 +39,29 @@ public ConnectorServiceProxy(final String baseUrl, final RestTemplate restTempla\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO create(final ConnInstanceTO connectorTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connectorTO,\r\n+    public Response create(final ConnInstanceTO connectorTO) {\r\n+        ConnInstanceTO response = getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connectorTO,\r\n                 ConnInstanceTO.class);\r\n+        URI location = URI.create(baseUrl + \"connector/read\" + response.getId());\r\n+        return Response.created(location).entity(response).build();\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO update(final Long connectorId, final ConnInstanceTO connectorTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"connector/update.json\", connectorTO,\r\n-                ConnInstanceTO.class);\r\n+    public void update(final Long connectorId, final ConnInstanceTO connectorTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"connector/update.json\", connectorTO, ConnInstanceTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO delete(final Long connectorId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"connector/delete/{connectorId}.json\",\r\n-                ConnInstanceTO.class, connectorId);\r\n+    public void delete(final Long connectorId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"connector/delete/{connectorId}.json\", ConnInstanceTO.class,\r\n+                connectorId);\r\n     }\r\n \r\n     @Override\r\n     public List<ConnInstanceTO> list(final String lang) {\r\n-        String param = (lang != null)\r\n-                ? \"?lang=\" + lang\r\n-                : \"\";\r\n+        String param = (lang == null)\r\n+                ? \"\"\r\n+                : \"?lang=\" + lang;\r\n \r\n         return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"connector/list.json\" + param,\r\n                 ConnInstanceTO[].class));\r\n@@ -68,28 +75,34 @@ public ConnInstanceTO read(final Long connectorId) {\n \r\n     @Override\r\n     public List<ConnBundleTO> getBundles(final String lang) {\r\n-        String param = (lang != null)\r\n-                ? \"?lang=\" + lang\r\n-                : \"\";\r\n+        String param = (lang == null)\r\n+                ? \"\"\r\n+                : \"?lang=\" + lang;\r\n \r\n         return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"connector/bundle/list.json\" + param,\r\n                 ConnBundleTO[].class));\r\n     }\r\n \r\n     @Override\r\n-    public List<String> getSchemaNames(final Long connectorId, final ConnInstanceTO connectorTO, boolean showall) {\r\n-        final String queryString = \"?showall=\" + String.valueOf(showall);\r\n-\r\n-        return Arrays.asList(getRestTemplate().postForObject(baseUrl + \"connector/schema/list\" + queryString,\r\n-                connectorTO,\r\n-                String[].class));\r\n+    public List<SchemaTO> getSchemaNames(final Long connectorId, final ConnInstanceTO connectorTO,\r\n+            final boolean showall) {\r\n+        final String queryString = \"?showall=\" + showall;\r\n+\r\n+        List<String> response = Arrays.asList(getRestTemplate().postForObject(\r\n+                baseUrl + \"connector/schema/list\" + queryString, connectorTO, String[].class));\r\n+        List<SchemaTO> schemaNames = new ArrayList<SchemaTO>();\r\n+        for (String name : response) {\r\n+            SchemaTO schemaTO = new SchemaTO();\r\n+            schemaTO.setName(name);\r\n+            schemaNames.add(schemaTO);\r\n+        }\r\n+        return schemaNames;\r\n     }\r\n \r\n     @Override\r\n     public List<ConnConfProperty> getConfigurationProperties(final Long connectorId) {\r\n-        return Arrays.asList(getRestTemplate()\r\n-                .getForObject(baseUrl + \"connector/{connectorId}/configurationProperty/list\",\r\n-                ConnConfProperty[].class, connectorId));\r\n+        return Arrays.asList(getRestTemplate().getForObject(\r\n+                baseUrl + \"connector/{connectorId}/configurationProperty/list\", ConnConfProperty[].class, connectorId));\r\n     }\r\n \r\n     @Override\r\n@@ -99,7 +112,7 @@ public boolean validate(final ConnInstanceTO connectorTO) {\n \r\n     @Override\r\n     public ConnInstanceTO readConnectorBean(final String resourceName) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"connector/{resourceName}/connectorBean\",\r\n-                ConnInstanceTO.class, resourceName);\r\n+        return getRestTemplate().getForObject(baseUrl + \"connector/{resourceName}/connectorBean\", ConnInstanceTO.class,\r\n+                resourceName);\r\n     }\r\n }\r"},{"sha":"152d792fd70d49b798bdcb8e2215421ac658c157","filename":"client/src/main/java/org/apache/syncope/types/ConnConfPropSchema.java","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfPropSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfPropSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfPropSchema.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -18,8 +18,13 @@\n  */\n package org.apache.syncope.types;\n \n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n import org.apache.syncope.client.AbstractBaseBean;\n \n+@XmlRootElement\n+@XmlType\n public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<ConnConfPropSchema> {\n \n     private static final long serialVersionUID = -1976365781005801296L;\n@@ -42,55 +47,55 @@ public String getName() {\n         return name;\n     }\n \n-    public void setName(String name) {\n+    public void setName(final String name) {\n         this.name = name;\n     }\n \n     public boolean isRequired() {\n         return required;\n     }\n \n-    public void setRequired(boolean required) {\n+    public void setRequired(final boolean required) {\n         this.required = required;\n     }\n \n     public String getType() {\n         return type;\n     }\n \n-    public void setType(String type) {\n+    public void setType(final String type) {\n         this.type = type;\n     }\n \n     public String getDisplayName() {\n         return displayName;\n     }\n \n-    public void setDisplayName(String displayName) {\n+    public void setDisplayName(final String displayName) {\n         this.displayName = displayName;\n     }\n \n     public String getHelpMessage() {\n         return helpMessage;\n     }\n \n-    public void setHelpMessage(String helpMessage) {\n+    public void setHelpMessage(final String helpMessage) {\n         this.helpMessage = helpMessage;\n     }\n \n     public int getOrder() {\n         return order;\n     }\n \n-    public void setOrder(int order) {\n+    public void setOrder(final int order) {\n         this.order = order;\n     }\n \n     public boolean isConfidential() {\n         return confidential;\n     }\n \n-    public void setConfidential(boolean confidential) {\n+    public void setConfidential(final boolean confidential) {\n         this.confidential = confidential;\n     }\n "},{"sha":"c970ecaa124a4b8c352a3355af7ceba8a2e6ce07","filename":"client/src/main/java/org/apache/syncope/types/ConnConfProperty.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FConnConfProperty.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -20,42 +20,49 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n import org.apache.syncope.client.AbstractBaseBean;\n \n+@XmlRootElement\n+@XmlType\n public class ConnConfProperty extends AbstractBaseBean implements Comparable<ConnConfProperty> {\n \n     private static final long serialVersionUID = -8391413960221862238L;\n \n     private ConnConfPropSchema schema;\n \n-    private List values;\n+    private List<?> values = new ArrayList<Object>();\n \n     private boolean overridable;\n \n     public ConnConfPropSchema getSchema() {\n         return schema;\n     }\n \n-    public void setSchema(ConnConfPropSchema schema) {\n+    public void setSchema(final ConnConfPropSchema schema) {\n         this.schema = schema;\n     }\n \n-    public List getValues() {\n-        if (values == null) {\n-            values = new ArrayList();\n-        }\n+    @XmlElementWrapper(name = \"values\")\n+    @XmlElement(name = \"value\")\n+    public List<?> getValues() {\n         return values;\n     }\n \n-    public void setValues(final List values) {\n+    public void setValues(final List<?> values) {\n         this.values = values;\n     }\n \n     public boolean isOverridable() {\n         return overridable;\n     }\n \n-    public void setOverridable(boolean overridable) {\n+    public void setOverridable(final boolean overridable) {\n         this.overridable = overridable;\n     }\n "},{"sha":"ae7283255e208959ebde67b8effe8bbca345dab2","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.client.to.ConnBundleTO;\n import org.apache.syncope.client.to.ConnInstanceTO;\n import org.apache.syncope.client.to.ResourceTO;\n+import org.apache.syncope.client.to.SchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.services.ConnectorService;\n@@ -86,7 +87,9 @@ public void update(final ConnInstanceTO connectorTO) {\n     }\n \n     public ConnInstanceTO delete(Long id) {\n-        return getService(ConnectorService.class).delete(id);\n+        ConnInstanceTO instanceTO = getService(ConnectorService.class).read(id);\n+        getService(ConnectorService.class).delete(id);\n+        return instanceTO;\n     }\n \n     public List<ConnBundleTO> getAllBundles() {\n@@ -179,17 +182,19 @@ public Boolean check(final ResourceTO resourceTO) {\n     }\n \n     public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n-        List<String> schemaNames = null;\n-\n+        List<String> schemaNames = new ArrayList<String>();\n         try {\n-            schemaNames = getService(ConnectorService.class).getSchemaNames(connectorTO.getId(), connectorTO, false);\n-\n+            List<SchemaTO> response = getService(ConnectorService.class).getSchemaNames(connectorTO.getId(),\n+                    connectorTO, false);\n+            for (SchemaTO schema : response) {\n+                schemaNames.add(schema.getName());\n+            }\n             // re-order schema names list\n             Collections.sort(schemaNames);\n         } catch (Exception e) {\n             LOG.error(\"While getting resource schema names\", e);\n+            schemaNames = null;\n         }\n-\n         return schemaNames;\n     }\n }"},{"sha":"a0cd423e87e95f821d85dd7c4c8303153be614f4","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/ConnectorFacadeProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -484,11 +484,11 @@ public OperationOptions getOperationOptions(final Collection<AbstractMappingItem\n         return oob.build();\n     }\n \n-    private Object getPropertyValue(final String propType, final List<Object> values) {\n+    private Object getPropertyValue(final String propType, final List<?> values) {\n         Object value = null;\n \n         try {\n-            final Class propertySchemaClass = ClassUtils.forName(propType, ClassUtils.getDefaultClassLoader());\n+            final Class<?> propertySchemaClass = ClassUtils.forName(propType, ClassUtils.getDefaultClassLoader());\n \n             if (GuardedString.class.equals(propertySchemaClass)) {\n                 value = new GuardedString(values.get(0).toString().toCharArray());"},{"sha":"5a9a695af27f0e7e3ca32f095200a3311e959489","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -326,7 +326,7 @@ public List<String> getSchemaNames(final HttpServletResponse response,\n         final Set<ConnConfProperty> conf = mergeConnConfProperties(connectorTO.getConfiguration(),\n                 connInstance.getConfiguration());\n \n-        // We cannot use Spring bean because this method could be used during resource definition or modification: \n+        // We cannot use Spring bean because this method could be used during resource definition or modification:\n         // bean couldn't exist or couldn't be updated.\n         // This is the reason why we should take a \"not mature\" connector facade proxy to ask for schema names.\n         final List<String> result = new ArrayList<String>(connLoader.createConnectorBean(connInstance, conf)."},{"sha":"40c3b5c7eadb0f845ca23bd7ae9be1f4c2dfefd6","filename":"core/src/main/java/org/apache/syncope/core/services/impl/ConfigurationServiceImpl.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2Fimpl%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2Fimpl%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2Fimpl%2FConfigurationServiceImpl.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -41,6 +41,7 @@ public class ConfigurationServiceImpl implements ConfigurationService, ContextAw\n \r\n     @Autowired\r\n     private ConfigurationController configurationController;\r\n+\r\n     private UriInfo uriInfo;\r\n \r\n     @Override\r"},{"sha":"2031cf94181f2b16dbe09fa75a7066be1221c5cc","filename":"core/src/main/java/org/apache/syncope/core/services/impl/ConnectorServiceImpl.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2Fimpl%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2Fimpl%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2Fimpl%2FConnectorServiceImpl.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -0,0 +1,159 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services.impl;\r\n+\r\n+import java.net.URI;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.UriInfo;\r\n+\r\n+import org.apache.syncope.client.to.ConnBundleTO;\r\n+import org.apache.syncope.client.to.ConnInstanceTO;\r\n+import org.apache.syncope.client.to.SchemaTO;\r\n+import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\r\n+import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n+import org.apache.syncope.core.rest.controller.ConnInstanceController;\r\n+import org.apache.syncope.core.util.NotFoundException;\r\n+import org.apache.syncope.services.ConnectorService;\r\n+import org.apache.syncope.types.ConnConfProperty;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class ConnectorServiceImpl implements ConnectorService, ContextAware {\r\n+\r\n+    @Autowired\r\n+    private ConnInstanceController connectorController;\r\n+\r\n+    private UriInfo uriInfo;\r\n+\r\n+    @Override\r\n+    public Response create(final ConnInstanceTO connectorTO) {\r\n+        try {\r\n+            ConnInstanceTO connector = connectorController.create(new DummyHTTPServletResponse(), connectorTO);\r\n+            URI location = uriInfo.getAbsolutePathBuilder().path(connector.getId() + \"\").build();\r\n+            return Response.created(location).entity(connector).build();\r\n+        } catch (SyncopeClientCompositeErrorException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final Long connectorId) {\r\n+        try {\r\n+            connectorController.delete(connectorId);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnBundleTO> getBundles(final String lang) {\r\n+        try {\r\n+            return connectorController.getBundles(lang);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        } catch (MissingConfKeyException e) {\r\n+            throw new BadRequestException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnConfProperty> getConfigurationProperties(final Long connectorId) {\r\n+        try {\r\n+            return connectorController.getConfigurationProperties(connectorId);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<SchemaTO> getSchemaNames(final Long connectorId, final ConnInstanceTO connectorTO,\r\n+            final boolean showall) {\r\n+        try {\r\n+            List<String> schemaNames = connectorController.getSchemaNames(new DummyHTTPServletResponse(), connectorTO,\r\n+                    showall);\r\n+            List<SchemaTO> schemas = new ArrayList<SchemaTO>();\r\n+            for (String name : schemaNames) {\r\n+                SchemaTO schemaTO = new SchemaTO();\r\n+                schemaTO.setName(name);\r\n+                schemas.add(schemaTO);\r\n+            }\r\n+            return schemas;\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConnInstanceTO> list(final String lang) {\r\n+        return connectorController.list(lang);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO read(final Long connectorId) {\r\n+        try {\r\n+            return connectorController.read(connectorId);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConnInstanceTO readConnectorBean(final String resourceName) {\r\n+        try {\r\n+            return connectorController.readConnectorBean(resourceName);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void update(final Long connectorId, final ConnInstanceTO connectorTO) {\r\n+        try {\r\n+            connectorController.update(connectorTO);\r\n+        } catch (SyncopeClientCompositeErrorException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean validate(final ConnInstanceTO connectorTO) {\r\n+        try {\r\n+            return (Boolean) connectorController.check(new DummyHTTPServletResponse(), connectorTO).getModel().values()\r\n+                    .iterator().next();\r\n+        } catch (SyncopeClientCompositeErrorException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setUriInfo(final UriInfo ui) {\r\n+        this.uriInfo = ui;\r\n+    }\r\n+}\r"},{"sha":"7a9777368b235aa5d6e90962b199ac1d96edc27c","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -67,6 +67,7 @@ under the License.\n    <jaxrs:server id=\"restContainer\" address=\"/\">\n       <jaxrs:serviceBeans>\n          <ref bean=\"configurationServiceImpl\" />\n+         <ref bean=\"connectorServiceImpl\" />\n          <ref bean=\"entitlementServiceImpl\" />\n       </jaxrs:serviceBeans>\n       <jaxrs:resourceComparator>"},{"sha":"9771f596b81e5d03341dd0536a678cb946151b0c","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":110,"deletions":104,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -33,11 +33,14 @@\n import java.util.Properties;\n import java.util.Set;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.client.to.ConnBundleTO;\n import org.apache.syncope.client.to.ConnInstanceTO;\n import org.apache.syncope.client.to.MappingItemTO;\n import org.apache.syncope.client.to.MappingTO;\n import org.apache.syncope.client.to.ResourceTO;\n+import org.apache.syncope.client.to.SchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.types.ConnConfPropSchema;\n import org.apache.syncope.types.ConnConfProperty;\n@@ -133,7 +136,8 @@ public void create() {\n         connectorTO.addCapability(ConnectorCapability.ONE_PHASE_CREATE);\n         connectorTO.addCapability(ConnectorCapability.TWO_PHASES_UPDATE);\n \n-        ConnInstanceTO actual = connectorService.create(connectorTO);\n+        Response response = connectorService.create(connectorTO);\n+        ConnInstanceTO actual = (ConnInstanceTO) response.getEntity();\n \n         assertNotNull(actual);\n \n@@ -151,7 +155,8 @@ public void create() {\n         connectorTO.removeCapability(ConnectorCapability.TWO_PHASES_UPDATE);\n         actual = null;\n         try {\n-            actual = connectorService.update(connectorTO.getId(), connectorTO);\n+            connectorService.update(connectorTO.getId(), connectorTO);\n+            actual = connectorService.read(connectorTO.getId());\n         } catch (HttpStatusCodeException e) {\n             LOG.error(\"update failed\", e);\n             t = e;\n@@ -163,8 +168,7 @@ public void create() {\n \n         // check also for the deletion of the created object\n         try {\n-            ConnInstanceTO deletedConn = connectorService.delete(actual.getId());\n-            assertNotNull(deletedConn);\n+            connectorService.delete(actual.getId());\n         } catch (HttpStatusCodeException e) {\n             LOG.error(\"delete failed\", e);\n             t = e;\n@@ -221,7 +225,8 @@ public void update() {\n         // set connector configuration\n         connectorTO.setConfiguration(conf);\n \n-        ConnInstanceTO actual = connectorService.update(connectorTO.getId(), connectorTO);\n+        connectorService.update(connectorTO.getId(), connectorTO);\n+        ConnInstanceTO actual = connectorService.read(connectorTO.getId());\n \n         assertNotNull(actual);\n \n@@ -262,7 +267,8 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         // Create a new connector instance.\n         // ----------------------------------\n-        connInstanceTO = connectorService.create(connInstanceTO);\n+        Response response = connectorService.create(connInstanceTO);\n+        connInstanceTO = (ConnInstanceTO) response.getEntity();\n \n         assertNotNull(connInstanceTO);\n         assertTrue(connInstanceTO.getCapabilities().isEmpty());\n@@ -299,7 +305,8 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         connInstanceTO.addCapability(ConnectorCapability.SEARCH);\n \n-        ConnInstanceTO actual = connectorService.update(connInstanceTO.getId(), connInstanceTO);\n+        connectorService.update(connInstanceTO.getId(), connInstanceTO);\n+        ConnInstanceTO actual = connectorService.read(connInstanceTO.getId());\n \n         assertNotNull(actual);\n         assertFalse(connInstanceTO.getCapabilities().isEmpty());\n@@ -497,9 +504,11 @@ public void validate() {\n     public void getSchemaNames() {\n         ConnInstanceTO conn = connectorService.read(101L);\n \n-        List<String> schemaNames = connectorService.getSchemaNames(conn.getId(), conn, true);\n+        List<SchemaTO> schemaNames = connectorService.getSchemaNames(conn.getId(), conn, true);\n         assertNotNull(schemaNames);\n         assertFalse(schemaNames.isEmpty());\n+        assertNotNull(schemaNames.get(0).getName());\n+        assertNull(schemaNames.get(0).getEnumerationValues());\n \n         schemaNames = connectorService.getSchemaNames(conn.getId(), conn, false);\n \n@@ -516,100 +525,97 @@ public void getSchemaNames() {\n         assertFalse(schemaNames.isEmpty());\n     }\n \n-\t@Test\n-\tpublic void issueSYNCOPE112() {\n-\n-\t\t// ----------------------------------------\n-\t\t// Create a new connector\n-\t\t// ----------------------------------------\n-\t\tConnInstanceTO connectorTO = new ConnInstanceTO();\n-\n-\t\t// set connector version\n-\t\tconnectorTO.setVersion(connidSoapVersion);\n-\n-\t\t// set connector name\n-\t\tconnectorTO\n-\t\t\t\t.setConnectorName(\"org.connid.bundles.soap.WebServiceConnector\");\n-\n-\t\t// set bundle name\n-\t\tconnectorTO.setBundleName(\"org.connid.bundles.soap\");\n-\n-\t\t// set display name\n-\t\tconnectorTO.setDisplayName(\"WSSoap\");\n-\n-\t\t// set the connector configuration using PropertyTO\n-\t\tSet<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n-\n-\t\tConnConfPropSchema userSchema = new ConnConfPropSchema();\n-\t\tuserSchema.setName(\"endpoint\");\n-\t\tuserSchema.setType(String.class.getName());\n-\t\tuserSchema.setRequired(true);\n-\t\tConnConfProperty endpoint = new ConnConfProperty();\n-\t\tendpoint.setSchema(userSchema);\n-\t\tendpoint.setValues(Collections\n-\t\t\t\t.singletonList(\"http://localhost:9080/does_not_work\"));\n-\t\tendpoint.setOverridable(true);\n-\n-\t\tConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n-\t\tkeyColumnSchema.setName(\"servicename\");\n-\t\tkeyColumnSchema.setType(String.class.getName());\n-\t\tkeyColumnSchema.setRequired(true);\n-\t\tConnConfProperty servicename = new ConnConfProperty();\n-\t\tservicename.setSchema(keyColumnSchema);\n-\t\tservicename\n-\t\t\t\t.setValues(Collections\n-\t\t\t\t\t\t.singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n-\t\tservicename.setOverridable(false);\n-\n-\t\tconf.add(endpoint);\n-\t\tconf.add(servicename);\n-\n-\t\t// set connector configuration\n-\t\tconnectorTO.setConfiguration(conf);\n-\n-\t\ttry {\n-\n-\t\t\tassertFalse(connectorService.validate(connectorTO));\n-\n-\t\t\tconnectorTO = connectorService.create(connectorTO);\n-\t\t\tassertNotNull(connectorTO);\n-\t\t\t// ----------------------------------------\n-\n-\t\t\t// ----------------------------------------\n-\t\t\t// create a resourceTO\n-\t\t\t// ----------------------------------------\n-\t\t\tString resourceName = \"checkForPropOverriding\";\n-\t\t\tResourceTO resourceTO = new ResourceTO();\n-\n-\t\t\tresourceTO.setName(resourceName);\n-\t\t\tresourceTO.setConnectorId(connectorTO.getId());\n-\n-\t\t\tconf = new HashSet<ConnConfProperty>();\n-\t\t\tendpoint.setValues(Collections\n-\t\t\t\t\t.singletonList(\"http://localhost:9080/wssample/services/provisioning\"));\n-\t\t\tconf.add(endpoint);\n-\n-\t\t\tresourceTO.setConnectorConfigurationProperties(conf);\n-\n-\t\t\tMappingTO mapping = new MappingTO();\n-\t\t\tresourceTO.setUmapping(mapping);\n-\n-\t\t\tMappingItemTO mapItem = new MappingItemTO();\n-\t\t\tmapItem.setExtAttrName(\"uid\");\n-\t\t\tmapItem.setIntAttrName(\"userId\");\n-\t\t\tmapItem.setIntMappingType(IntMappingType.UserSchema);\n-\t\t\tmapItem.setAccountid(true);\n-\t\t\tmapping.setAccountIdItem(mapItem);\n-\t\t\t// ----------------------------------------\n-\n-\t\t\t// ----------------------------------------\n-\t\t\t// Check connection without saving the resource ....\n-\t\t\t// ----------------------------------------\n-\t\t\tassertTrue(resourceService.check(resourceTO));\n-\t\t\t// ----------------------------------------\n-\t\t} finally {\n-\t\t\t// Remove connector from db to make test re-runnable\n-\t\t\tconnectorService.delete(connectorTO.getId());\n-\t\t}\n-\t}\n+    @Test\n+    public void issueSYNCOPE112() {\n+\n+        // ----------------------------------------\n+        // Create a new connector\n+        // ----------------------------------------\n+        ConnInstanceTO connectorTO = new ConnInstanceTO();\n+\n+        // set connector version\n+        connectorTO.setVersion(connidSoapVersion);\n+\n+        // set connector name\n+        connectorTO.setConnectorName(\"org.connid.bundles.soap.WebServiceConnector\");\n+\n+        // set bundle name\n+        connectorTO.setBundleName(\"org.connid.bundles.soap\");\n+\n+        // set display name\n+        connectorTO.setDisplayName(\"WSSoap\");\n+\n+        // set the connector configuration using PropertyTO\n+        Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+\n+        ConnConfPropSchema userSchema = new ConnConfPropSchema();\n+        userSchema.setName(\"endpoint\");\n+        userSchema.setType(String.class.getName());\n+        userSchema.setRequired(true);\n+        ConnConfProperty endpoint = new ConnConfProperty();\n+        endpoint.setSchema(userSchema);\n+        endpoint.setValues(Collections.singletonList(\"http://localhost:9080/does_not_work\"));\n+        endpoint.setOverridable(true);\n+\n+        ConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n+        keyColumnSchema.setName(\"servicename\");\n+        keyColumnSchema.setType(String.class.getName());\n+        keyColumnSchema.setRequired(true);\n+        ConnConfProperty servicename = new ConnConfProperty();\n+        servicename.setSchema(keyColumnSchema);\n+        servicename\n+                .setValues(Collections.singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n+        servicename.setOverridable(false);\n+\n+        conf.add(endpoint);\n+        conf.add(servicename);\n+\n+        // set connector configuration\n+        connectorTO.setConfiguration(conf);\n+\n+        try {\n+\n+            assertFalse(connectorService.validate(connectorTO));\n+\n+            Response response = connectorService.create(connectorTO);\n+            connectorTO = (ConnInstanceTO) response.getEntity();\n+            assertNotNull(connectorTO);\n+            // ----------------------------------------\n+\n+            // ----------------------------------------\n+            // create a resourceTO\n+            // ----------------------------------------\n+            String resourceName = \"checkForPropOverriding\";\n+            ResourceTO resourceTO = new ResourceTO();\n+\n+            resourceTO.setName(resourceName);\n+            resourceTO.setConnectorId(connectorTO.getId());\n+\n+            conf = new HashSet<ConnConfProperty>();\n+            endpoint.setValues(Collections.singletonList(\"http://localhost:9080/wssample/services/provisioning\"));\n+            conf.add(endpoint);\n+\n+            resourceTO.setConnectorConfigurationProperties(conf);\n+\n+            MappingTO mapping = new MappingTO();\n+            resourceTO.setUmapping(mapping);\n+\n+            MappingItemTO mapItem = new MappingItemTO();\n+            mapItem.setExtAttrName(\"uid\");\n+            mapItem.setIntAttrName(\"userId\");\n+            mapItem.setIntMappingType(IntMappingType.UserSchema);\n+            mapItem.setAccountid(true);\n+            mapping.setAccountIdItem(mapItem);\n+            // ----------------------------------------\n+\n+            // ----------------------------------------\n+            // Check connection without saving the resource ....\n+            // ----------------------------------------\n+            assertTrue(resourceService.check(resourceTO));\n+            // ----------------------------------------\n+        } finally {\n+            // Remove connector from db to make test re-runnable\n+            connectorService.delete(connectorTO.getId());\n+        }\n+    }\n }"},{"sha":"33984d26307cc81acb290cc167f0ea9a9d3f3f54","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":24,"deletions":20,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3cb730ce0dbf73477369d944056c9849aead0178/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=3cb730ce0dbf73477369d944056c9849aead0178","patch":"@@ -18,28 +18,32 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n \n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.junit.Test;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n-import org.apache.syncope.client.to.ResourceTO;\n+\n import org.apache.syncope.client.to.MappingItemTO;\n import org.apache.syncope.client.to.MappingTO;\n+import org.apache.syncope.client.to.ResourceTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.types.ConnConfPropSchema;\n import org.apache.syncope.types.ConnConfProperty;\n import org.apache.syncope.types.IntMappingType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n+import org.junit.Test;\n import org.junit.runners.MethodSorters;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ResourceTestITCase extends AbstractTest {\n@@ -256,7 +260,7 @@ public void updateWithException() {\n \n     @Test\n     public void update() {\n-        final String resourceName = \"ws-target-resource-update\";\n+        String resourceName = \"ws-target-resource-update\";\n         ResourceTO resourceTO = new ResourceTO();\n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(101L);\n@@ -310,24 +314,24 @@ public void deleteWithException() {\n     public void updateResetSyncToken() {\n         // create resource with sync token\n         String resourceName = \"ws-target-resource-update-resetsynctoken\" + getUUIDString();\n-    \tResourceTO pre = buildResourceTO(resourceName);\n-    \tpre.setUsyncToken(\"test\");\n-    \tresourceService.create(pre);\n-\n-\t\tpre.setUsyncToken(null);\n-\t\tResourceTO actual = resourceService.update(pre.getName(), pre);\n-\t\t// check that the synctoken has been reset\n-\t\tassertNull(actual.getUsyncToken());\n+        ResourceTO pre = buildResourceTO(resourceName);\n+        pre.setUsyncToken(\"test\");\n+        resourceService.create(pre);\n+\n+        pre.setUsyncToken(null);\n+        ResourceTO actual = resourceService.update(pre.getName(), pre);\n+        // check that the synctoken has been reset\n+        assertNull(actual.getUsyncToken());\n     }\n \n     @Test\n     public void delete() {\n-        final String resourceName = \"ws-target-resource-delete\";\n+        String resourceName = \"ws-target-resource-delete\";\n \n         ResourceTO resource = buildResourceTO(resourceName);\n         ResourceTO actual = resourceService.create(resource);\n         assertNotNull(actual);\n-        \n+\n         ResourceTO deletedResource = resourceService.delete(resourceName);\n         assertNotNull(deletedResource);\n \n@@ -364,8 +368,8 @@ public void read() {\n         assertNotNull(actual);\n     }\n \n-\tprivate ResourceTO buildResourceTO(String resourceName) {\n-\t\tResourceTO resourceTO = new ResourceTO();\n+    private ResourceTO buildResourceTO(String resourceName) {\n+        ResourceTO resourceTO = new ResourceTO();\n \n         resourceTO.setName(resourceName);\n         resourceTO.setConnectorId(102L);\n@@ -393,7 +397,7 @@ private ResourceTO buildResourceTO(String resourceName) {\n         mapping.addItem(item);\n \n         resourceTO.setUmapping(mapping);\n-\t\treturn resourceTO;\n-\t}\n+        return resourceTO;\n+    }\n \n }"}]}