{"sha":"4d9dcb63ce89ecdc33f544f7e5e937786e354599","node_id":"C_kwDOJfYA1toAKDRkOWRjYjYzY2U4OWVjZGMzM2Y1NDRmN2U1ZTkzNzc4NmUzNTQ1OTk","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-04-13T09:11:38Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-04-13T09:11:38Z"},"message":"[SYNCOPE-1673] DefaultPasswordRule and DefaultPasswordGenerator now b… (#338)","tree":{"sha":"8f0af5717446920438a501d62f7d4f494f9e0a68","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8f0af5717446920438a501d62f7d4f494f9e0a68"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4d9dcb63ce89ecdc33f544f7e5e937786e354599","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVpPKCRBK7hj4Ov3rIwAAxmUIACrJSJD1P/joaeJdJ5+cYo4F\nudHyc3kIa6zULaCqhU46WJcTvc/w1mxniWyTpyPrB7JkLUi1wa0NDFJuEYtw39Qv\nLrntdd/C3Jph/BkgC9MrUolXXccByEVEiwdeaqoiZOM3QP7WpbgtzfS2pEhI5YzX\nJbtyR6VkfMHCcvms3ZertBp+4eDLcBkF36PD+KUKbm+MZqJkDcY9dLGUY9pJBYz8\n5/JUklQzpK3iLunpaNl2TzEwlCcCQmIeCN80CHzeGlANt4KznKb03R048jxcp4dA\ndT1fnCiQR/HJWFG7ZY0SUlZ8HDOursbXub7jZrpnezgHe0bch1dU4PErSDRizhg=\n=b0Dh\n-----END PGP SIGNATURE-----\n","payload":"tree 8f0af5717446920438a501d62f7d4f494f9e0a68\nparent c11953fc3dc6a838d92465888c864321845dca4e\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1649841098 +0200\ncommitter GitHub <noreply@github.com> 1649841098 +0200\n\n[SYNCOPE-1673] DefaultPasswordRule and DefaultPasswordGenerator now b… (#338)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d9dcb63ce89ecdc33f544f7e5e937786e354599","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4d9dcb63ce89ecdc33f544f7e5e937786e354599","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4d9dcb63ce89ecdc33f544f7e5e937786e354599/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"c11953fc3dc6a838d92465888c864321845dca4e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c11953fc3dc6a838d92465888c864321845dca4e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c11953fc3dc6a838d92465888c864321845dca4e"}],"stats":{"total":1247,"additions":360,"deletions":887},"files":[{"sha":"d2844bb8b4e02eaa276f085d69b618311e54c3b9","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ProvisionAuxClassesPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FProvisionAuxClassesPanel.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -102,7 +102,7 @@ private static List<String> getSchemas(final AnyTypeTO anyType, final List<Strin\n         classes.addAll(anyTypeClasses);\n \n         return SchemaRestClient.<PlainSchemaTO>getSchemas(\n-                SchemaType.PLAIN, null, classes.toArray(new String[] {})).\n+                SchemaType.PLAIN, null, classes.toArray(String[]::new)).\n                 stream().map(EntityTO::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"96377e0441e7e2f90a2d67fb1aa415341400082a","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -548,7 +548,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n             }\n         });\n \n-        panel.add(behaviors.toArray(new Behavior[] {}));\n+        panel.add(behaviors.toArray(Behavior[]::new));\n \n         return panel;\n     }"},{"sha":"3292c2c6679f11ec929399b79e2a3fb1dc57afbd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -338,7 +338,7 @@ public boolean owns(final String entitlements, final String... realms) {\n     @Override\n     public Roles getRoles() {\n         if (isSignedIn() && roles == null && auth != null) {\n-            roles = new Roles(auth.keySet().toArray(new String[] {}));\n+            roles = new Roles(auth.keySet().toArray(String[]::new));\n             roles.add(Constants.ROLE_AUTHENTICATED);\n         }\n "},{"sha":"ecc23d1cd521ef975fe2a951de06beb5cbe66d89","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -166,7 +166,7 @@ public Events(final NotificationWrapper modelObject) {\n             add(new EventCategoryPanel(\n                     \"eventSelection\",\n                     AuditRestClient.listEvents(),\n-                new PropertyModel<>(modelObject.getInnerObject(), \"events\")) {\n+                    new PropertyModel<>(modelObject.getInnerObject(), \"events\")) {\n \n                 private static final long serialVersionUID = 6429053774964787735L;\n \n@@ -332,7 +332,7 @@ public static class Recipients extends WizardStep {\n             @Override\n             protected List<String> load() {\n                 return ImplementationRestClient.list(IdRepoImplementationType.RECIPIENTS_PROVIDER).stream().\n-                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n+                        map(EntityTO::getKey).sorted().collect(Collectors.toList());\n             }\n         };\n \n@@ -389,8 +389,8 @@ private static List<String> getSchemas() {\n             LOG.error(\"While reading all any types\", e);\n         }\n \n-        String[] anyTypeClasses = Optional.ofNullable(type)\n-                .map(anyTypeTO -> anyTypeTO.getClasses().toArray(new String[] {})).orElseGet(() -> new String[0]);\n+        String[] anyTypeClasses = Optional.ofNullable(type).\n+                map(anyTypeTO -> anyTypeTO.getClasses().toArray(String[]::new)).orElseGet(() -> new String[0]);\n \n         List<String> result = new ArrayList<>();\n         result.add(Constants.USERNAME_FIELD_NAME);"},{"sha":"80235038aab8958482ee3e3fe900983d336f5af5","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -86,12 +86,12 @@ protected List<SearchClause.Type> load() {\n             @Override\n             protected List<String> load() {\n                 return groupRestClient.search(\n-                    SyncopeConstants.ROOT_REALM,\n-                    null,\n-                    1,\n-                    Constants.MAX_GROUP_LIST_SIZE,\n-                    new SortParam<>(Constants.NAME_FIELD_NAME, true),\n-                    null).stream().map(GroupTO::getName).collect(Collectors.toList());\n+                        SyncopeConstants.ROOT_REALM,\n+                        null,\n+                        1,\n+                        Constants.MAX_GROUP_LIST_SIZE,\n+                        new SortParam<>(Constants.NAME_FIELD_NAME, true),\n+                        null).stream().map(GroupTO::getName).collect(Collectors.toList());\n             }\n         };\n \n@@ -102,8 +102,8 @@ protected List<String> load() {\n             @Override\n             protected Map<String, PlainSchemaTO> load() {\n                 return SchemaRestClient.<PlainSchemaTO>getSchemas(\n-                    SchemaType.PLAIN, null, AnyTypeRestClient.read(type).getClasses().toArray(new String[]{})).\n-                    stream().collect(Collectors.toMap(SchemaTO::getKey, Function.identity()));\n+                        SchemaType.PLAIN, null, AnyTypeRestClient.read(type).getClasses().toArray(String[]::new)).\n+                        stream().collect(Collectors.toMap(SchemaTO::getKey, Function.identity()));\n             }\n         };\n     }"},{"sha":"b912f238b7c2eec975cc2a859edcf706bf888694","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSearchPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -89,8 +89,8 @@ protected List<String> load() {\n             @Override\n             protected Map<String, PlainSchemaTO> load() {\n                 return SchemaRestClient.<PlainSchemaTO>getSchemas(\n-                    SchemaType.PLAIN, null, AnyTypeRestClient.read(type).getClasses().toArray(new String[]{})).\n-                    stream().collect(Collectors.toMap(SchemaTO::getKey, Function.identity()));\n+                        SchemaType.PLAIN, null, AnyTypeRestClient.read(type).getClasses().toArray(String[]::new)).\n+                        stream().collect(Collectors.toMap(SchemaTO::getKey, Function.identity()));\n             }\n         };\n     }"},{"sha":"adfe707cfa4a4f81844467d333e9f57daf6a211c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -62,7 +62,7 @@ public static <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaTyp\n                         && anyTypeTO.getKind() != AnyTypeKind.GROUP)).\n                         forEach((anyTypeTO) -> classes.addAll(anyTypeTO.getClasses()));\n         }\n-        return getSchemas(schemaType, null, classes.toArray(new String[] {}));\n+        return getSchemas(schemaType, null, classes.toArray(String[]::new));\n     }\n \n     public static <T extends SchemaTO> List<T> getSchemas("},{"sha":"64e551e5255110c9b7685e270c710c4c8bbea49e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrsWizardStep.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -131,7 +131,7 @@ protected void setSchemas(final List<String> anyTypeClasses) {\n     protected void setSchemas(final List<String> anyTypeClasses, final Map<String, S> scs) {\n         List<S> allSchemas = anyTypeClasses.isEmpty()\n                 ? List.of()\n-                : SchemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n+                : SchemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(String[]::new));\n \n         scs.clear();\n "},{"sha":"159d3a92962ecc16f17964e1f0ad51fb2c7d4d31","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -117,7 +117,7 @@ public Component getHeader(final String id, final Component parent, final IWizar\n \n     private Fragment getViewFragment() {\n         final Map<String, List<RelationshipTO>> relationships = new HashMap<>();\n-        addRelationship(relationships, getCurrentRelationships().toArray(new RelationshipTO[] {}));\n+        addRelationship(relationships, getCurrentRelationships().toArray(RelationshipTO[]::new));\n \n         final Fragment viewFragment = new Fragment(\"relationships\", \"viewFragment\", this);\n         viewFragment.setOutputMarkupId(true);"},{"sha":"f49f68f4d81b9eb94cf1740c5b01dbff0ead33d8","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/panels/any/AbstractAttrs.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpanels%2Fany%2FAbstractAttrs.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -171,7 +171,7 @@ private void setSchemas(final List<String> anyTypeClasses, final String groupNam\n         if (anyTypeClasses.isEmpty()) {\n             allSchemas = new ArrayList<>();\n         } else {\n-            allSchemas = SchemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(new String[] {}));\n+            allSchemas = SchemaRestClient.getSchemas(getSchemaType(), null, anyTypeClasses.toArray(String[]::new));\n         }\n \n         scs.clear();"},{"sha":"6391f0a76a6429c32c8f3396098cb7476563e88f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -62,7 +62,7 @@ public static <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaTyp\n                         && anyTypeTO.getKind() != AnyTypeKind.GROUP)).\n                         forEach((anyTypeTO) -> classes.addAll(anyTypeTO.getClasses()));\n         }\n-        return getSchemas(schemaType, null, classes.toArray(new String[] {}));\n+        return getSchemas(schemaType, null, classes.toArray(String[]::new));\n     }\n \n     public static <T extends SchemaTO> List<T> getSchemas("},{"sha":"16b501f24ce184e13fcd5d3b1bcb265df24eb4eb","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java","status":"modified","additions":40,"deletions":213,"changes":253,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FDefaultPasswordRuleConf.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -30,100 +30,25 @@ public class DefaultPasswordRuleConf extends AbstractPasswordRuleConf {\n \n     private static final long serialVersionUID = -7988778083915548547L;\n \n-    /**\n-     * Minimum length.\n-     */\n     private int maxLength;\n \n-    /**\n-     * Maximum length.\n-     */\n     private int minLength;\n \n-    /**\n-     * Specify if one or more non alphanumeric characters are required.\n-     */\n-    private boolean nonAlphanumericRequired;\n+    private int alphabetical;\n \n-    /**\n-     * Specify if one or more alphanumeric characters are required.\n-     */\n-    private boolean alphanumericRequired;\n+    private int uppercase;\n \n-    /**\n-     * Specify if one or more digits are required.\n-     */\n-    private boolean digitRequired;\n+    private int lowercase;\n \n-    /**\n-     * Specify if one or more lowercase alphabetic characters are required.\n-     */\n-    private boolean lowercaseRequired;\n+    private int digit;\n \n-    /**\n-     * Specify if one or more uppercase alphabetic characters are required.\n-     */\n-    private boolean uppercaseRequired;\n-\n-    /**\n-     * Specify if must start with a digit.\n-     */\n-    private boolean mustStartWithDigit;\n+    private int special;\n \n-    /**\n-     * Specify if mustn't start with a digit.\n-     */\n-    private boolean mustntStartWithDigit;\n+    private final List<Character> specialChars = new ArrayList<>();\n \n-    /**\n-     * Specify if must end with a digit.\n-     */\n-    private boolean mustEndWithDigit;\n+    private final List<Character> illegalChars = new ArrayList<>();\n \n-    /**\n-     * Specify if mustn't end with a digit.\n-     */\n-    private boolean mustntEndWithDigit;\n-\n-    /**\n-     * Specify if must start with a non alphanumeric character.\n-     */\n-    private boolean mustStartWithNonAlpha;\n-\n-    /**\n-     * Specify if must start with a alphanumeric character.\n-     */\n-    private boolean mustStartWithAlpha;\n-\n-    /**\n-     * Specify if mustn't start with a non alphanumeric character.\n-     */\n-    private boolean mustntStartWithNonAlpha;\n-\n-    /**\n-     * Specify if mustn't start with a alphanumeric character.\n-     */\n-    private boolean mustntStartWithAlpha;\n-\n-    /**\n-     * Specify if must end with a non alphanumeric character.\n-     */\n-    private boolean mustEndWithNonAlpha;\n-\n-    /**\n-     * Specify if must end with a alphanumeric character.\n-     */\n-    private boolean mustEndWithAlpha;\n-\n-    /**\n-     * Specify if mustn't end with a non alphanumeric character.\n-     */\n-    private boolean mustntEndWithNonAlpha;\n-\n-    /**\n-     * Specify if mustn't end with a alphanumeric character.\n-     */\n-    private boolean mustntEndWithAlpha;\n+    private int repeatSame;\n \n     /**\n      * Specify if using username as password is allowed.\n@@ -142,32 +67,6 @@ public class DefaultPasswordRuleConf extends AbstractPasswordRuleConf {\n             type = { SchemaType.PLAIN, SchemaType.DERIVED, SchemaType.VIRTUAL })\n     private final List<String> schemasNotPermitted = new ArrayList<>();\n \n-    /**\n-     * Substrings not permitted as prefix.\n-     */\n-    private final List<String> prefixesNotPermitted = new ArrayList<>();\n-\n-    /**\n-     * Substrings not permitted as suffix.\n-     */\n-    private final List<String> suffixesNotPermitted = new ArrayList<>();\n-\n-    public boolean isDigitRequired() {\n-        return digitRequired;\n-    }\n-\n-    public void setDigitRequired(final boolean digitRequired) {\n-        this.digitRequired = digitRequired;\n-    }\n-\n-    public boolean isLowercaseRequired() {\n-        return lowercaseRequired;\n-    }\n-\n-    public void setLowercaseRequired(final boolean lowercaseRequired) {\n-        this.lowercaseRequired = lowercaseRequired;\n-    }\n-\n     public int getMaxLength() {\n         return maxLength;\n     }\n@@ -184,124 +83,64 @@ public void setMinLength(final int minLength) {\n         this.minLength = minLength;\n     }\n \n-    public boolean isMustEndWithDigit() {\n-        return mustEndWithDigit;\n-    }\n-\n-    public void setMustEndWithDigit(final boolean mustEndWithDigit) {\n-        this.mustEndWithDigit = mustEndWithDigit;\n-    }\n-\n-    public boolean isMustEndWithNonAlpha() {\n-        return mustEndWithNonAlpha;\n-    }\n-\n-    public void setMustEndWithNonAlpha(final boolean mustEndWithNonAlpha) {\n-        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\n-    }\n-\n-    public boolean isMustStartWithDigit() {\n-        return mustStartWithDigit;\n-    }\n-\n-    public void setMustStartWithDigit(final boolean mustStartWithDigit) {\n-        this.mustStartWithDigit = mustStartWithDigit;\n-    }\n-\n-    public boolean isMustStartWithNonAlpha() {\n-        return mustStartWithNonAlpha;\n+    public int getAlphabetical() {\n+        return alphabetical;\n     }\n \n-    public void setMustStartWithNonAlpha(final boolean mustStartWithNonAlpha) {\n-        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\n+    public void setAlphabetical(final int alphabetical) {\n+        this.alphabetical = alphabetical;\n     }\n \n-    public boolean isMustntEndWithDigit() {\n-        return mustntEndWithDigit;\n+    public int getUppercase() {\n+        return uppercase;\n     }\n \n-    public void setMustntEndWithDigit(final boolean mustntEndWithDigit) {\n-        this.mustntEndWithDigit = mustntEndWithDigit;\n+    public void setUppercase(final int uppercase) {\n+        this.uppercase = uppercase;\n     }\n \n-    public boolean isMustntEndWithNonAlpha() {\n-        return mustntEndWithNonAlpha;\n+    public int getLowercase() {\n+        return lowercase;\n     }\n \n-    public void setMustntEndWithNonAlpha(final boolean mustntEndWithNonAlpha) {\n-        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\n+    public void setLowercase(final int lowercase) {\n+        this.lowercase = lowercase;\n     }\n \n-    public boolean isMustntStartWithDigit() {\n-        return mustntStartWithDigit;\n+    public int getDigit() {\n+        return digit;\n     }\n \n-    public void setMustntStartWithDigit(final boolean mustntStartWithDigit) {\n-        this.mustntStartWithDigit = mustntStartWithDigit;\n+    public void setDigit(final int digit) {\n+        this.digit = digit;\n     }\n \n-    public boolean isMustntStartWithNonAlpha() {\n-        return mustntStartWithNonAlpha;\n+    public int getSpecial() {\n+        return special;\n     }\n \n-    public void setMustntStartWithNonAlpha(final boolean mustntStartWithNonAlpha) {\n-        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\n+    public void setSpecial(final int special) {\n+        this.special = special;\n     }\n \n-    public boolean isNonAlphanumericRequired() {\n-        return nonAlphanumericRequired;\n+    @JacksonXmlElementWrapper(localName = \"specialChars\")\n+    @JacksonXmlProperty(localName = \"char\")\n+    public List<Character> getSpecialChars() {\n+        return specialChars;\n     }\n \n-    public void setNonAlphanumericRequired(final boolean nonAlphanumericRequired) {\n-        this.nonAlphanumericRequired = nonAlphanumericRequired;\n+    @JacksonXmlElementWrapper(localName = \"illegalChars\")\n+    @JacksonXmlProperty(localName = \"char\")\n+    public List<Character> getIllegalChars() {\n+        return illegalChars;\n     }\n \n-    public boolean isUppercaseRequired() {\n-        return uppercaseRequired;\n+    public int getRepeatSame() {\n+        return repeatSame;\n     }\n \n-    public void setUppercaseRequired(final boolean uppercaseRequired) {\n-        this.uppercaseRequired = uppercaseRequired;\n-    }\n-\n-    public boolean isAlphanumericRequired() {\n-        return alphanumericRequired;\n-    }\n-\n-    public void setAlphanumericRequired(final boolean alphanumericRequired) {\n-        this.alphanumericRequired = alphanumericRequired;\n-    }\n-\n-    public boolean isMustEndWithAlpha() {\n-        return mustEndWithAlpha;\n-    }\n-\n-    public void setMustEndWithAlpha(final boolean mustEndWithAlpha) {\n-        this.mustEndWithAlpha = mustEndWithAlpha;\n-    }\n-\n-    public boolean isMustStartWithAlpha() {\n-        return mustStartWithAlpha;\n-    }\n-\n-    public void setMustStartWithAlpha(final boolean mustStartWithAlpha) {\n-        this.mustStartWithAlpha = mustStartWithAlpha;\n-    }\n-\n-    public boolean isMustntEndWithAlpha() {\n-        return mustntEndWithAlpha;\n-    }\n-\n-    public void setMustntEndWithAlpha(final boolean mustntEndWithAlpha) {\n-        this.mustntEndWithAlpha = mustntEndWithAlpha;\n-    }\n-\n-    public boolean isMustntStartWithAlpha() {\n-        return mustntStartWithAlpha;\n-    }\n-\n-    public void setMustntStartWithAlpha(final boolean mustntStartWithAlpha) {\n-        this.mustntStartWithAlpha = mustntStartWithAlpha;\n+    public void setRepeatSame(final int repeatSame) {\n+        this.repeatSame = repeatSame;\n     }\n \n     public boolean isUsernameAllowed() {\n@@ -318,21 +157,9 @@ public List<String> getWordsNotPermitted() {\n         return wordsNotPermitted;\n     }\n \n-    @JacksonXmlElementWrapper(localName = \"prefixesNotPermitted\")\n-    @JacksonXmlProperty(localName = \"prefix\")\n-    public List<String> getPrefixesNotPermitted() {\n-        return prefixesNotPermitted;\n-    }\n-\n     @JacksonXmlElementWrapper(localName = \"schemasNotPermitted\")\n     @JacksonXmlProperty(localName = \"schema\")\n     public List<String> getSchemasNotPermitted() {\n         return schemasNotPermitted;\n     }\n-\n-    @JacksonXmlElementWrapper(localName = \"suffixesNotPermitted\")\n-    @JacksonXmlProperty(localName = \"suffix\")\n-    public List<String> getSuffixesNotPermitted() {\n-        return suffixesNotPermitted;\n-    }\n }"},{"sha":"34fa534d45c3a2d6ddd8674001d3e29a252b0d90","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -251,7 +251,7 @@ public ReconStatus status(\n         status.setOnSyncope(getOnSyncope(any, connObjectKeyItem, provision));\n \n         List<ConnectorObject> connObjs = outboundMatcher.match(connectorManager.getConnector(\n-                provision.getResource()), any, provision, Optional.of(moreAttrsToGet.toArray(new String[] {})));\n+                provision.getResource()), any, provision, Optional.of(moreAttrsToGet.toArray(String[]::new)));\n         if (!connObjs.isEmpty()) {\n             status.setOnResource(ConnObjectUtils.getConnObjectTO(\n                     outboundMatcher.getFIQL(connObjs.get(0), provision), connObjs.get(0).getAttributes()));\n@@ -274,7 +274,7 @@ protected SyncDeltaBuilder syncDeltaBuilder(\n         Stream<MappingItem> mapItems = Stream.concat(\n                 provision.getMapping().getItems().stream(),\n                 virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n-        OperationOptions options = MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0]));\n+        OperationOptions options = MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(String[]::new));\n \n         SyncDeltaBuilder syncDeltaBuilder = new SyncDeltaBuilder().\n                 setToken(new SyncToken(\"\"))."},{"sha":"ed35249621de81f1ccfc01b71b1d2d836e487593","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -417,7 +417,7 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n             provision = null;\n             objectClass = resource.getOrgUnit().getObjectClass();\n             options = MappingUtils.buildOperationOptions(\n-                    resource.getOrgUnit().getItems().stream(), moreAttrsToGet.toArray(new String[0]));\n+                    resource.getOrgUnit().getItems().stream(), moreAttrsToGet.toArray(String[]::new));\n         } else {\n             provision = getProvision(key, anyTypeKey);\n             resource = provision.getResource();\n@@ -426,7 +426,7 @@ public Pair<SearchResult, List<ConnObjectTO>> searchConnObjects(\n             Stream<MappingItem> mapItems = Stream.concat(\n                     provision.getMapping().getItems().stream(),\n                     virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n-            options = MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0]));\n+            options = MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(String[]::new));\n         }\n \n         List<ConnObjectTO> connObjects = new ArrayList<>();"},{"sha":"43b14f4977291f68a844c6c775b53aaf30cc02ec","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/JavaDocUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FJavaDocUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FJavaDocUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FJavaDocUtils.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -43,7 +43,7 @@ public static URL[] getJavaDocURLs() {\n                 }\n             }\n             if (!javaDocURLs.isEmpty()) {\n-                result = javaDocURLs.toArray(new URL[javaDocURLs.size()]);\n+                result = javaDocURLs.toArray(URL[]::new);\n             }\n         }\n "},{"sha":"05b0b89db345a0494a9f83d9cb03964f8246341c","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -22,12 +22,12 @@ under the License.\n   <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" name=\"a password policy\"\n                   historyLength=\"1\" allowNullPassword=\"1\"/>\n   <Implementation id=\"DefaultPasswordRuleConf1\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n-                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"wordsNotPermitted\":[\"notpermitted1\",\"notpermitted2\"]}'/>\n   <PasswordPolicyRule policy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" implementation_id=\"DefaultPasswordRuleConf1\"/>\n   <PasswordPolicy id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"\n                   name=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"1\"/> \n   <Implementation id=\"DefaultPasswordRuleConf2\" type=\"PASSWORD_RULE\"  engine=\"JAVA\"\n-                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"digit\":1,\"wordsNotPermitted\":[\"notpermitted1\",\"notpermitted2\"]}'/>\n   <PasswordPolicyRule policy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\" implementation_id=\"DefaultPasswordRuleConf2\"/>\n   <AccountPolicy id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" name=\"an account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"0\"/>\n@@ -41,11 +41,11 @@ under the License.\n   <AccountPolicyRule policy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" implementation_id=\"DefaultAccountRuleConf2\"/>\n   <PasswordPolicy id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" name=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n-                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"special\":1,\"specialChars\":[\"@\",\"!\"],\"digit\":1,\"lowercase\":1,\"uppercase\":1,\"wordsNotPermitted\":[\"notpermitted1\",\"notpermitted2\"]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   <PropagationPolicy id=\"89d322db-9878-420c-b49c-67be13df9a12\" name=\"sample propagation policy\"\n                      maxAttempts=\"5\" backOffStrategy=\"FIXED\" backOffParams=\"10000\"/>\n-  \n+\n   <!-- Authentication policies -->\n   <AuthPolicy id=\"659b9906-4b6e-4bc0-aca0-6809dff346d4\" name=\"MyDefaultAuthPolicyConf\"\n               jsonConf='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf\",\"authModules\":[\"LdapAuthenticationTest\"]}'/>"},{"sha":"8d5de578690100dd08fa55dd96e4598e8aad0eff","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/PersistenceTestContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceTestContext.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -53,7 +53,7 @@ public static PropertySourcesPlaceholderConfigurer propertyPlaceholderConfigurer\n         for (String location : System.getProperty(\"CORE_PROPERTIES\").split(\",\")) {\n             locations.add(resourceLoader.getResource(location));\n         }\n-        ppc.setLocations(locations.toArray(new Resource[0]));\n+        ppc.setLocations(locations.toArray(Resource[]::new));\n \n         return ppc;\n     }"},{"sha":"b69f426f36c8dd9f2c72212ffb9d75982d0594b9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":2,"deletions":13,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -40,7 +40,6 @@\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.apache.syncope.core.spring.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -296,12 +295,7 @@ public void issueSYNCOPE391() {\n \n     @Test\n     public void testPasswordGenerator() {\n-        String password = \"\";\n-        try {\n-            password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n-        } catch (InvalidPasswordRuleConf e) {\n-            fail(e::getMessage);\n-        }\n+        String password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n         assertNotNull(password);\n \n         User user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");\n@@ -312,12 +306,7 @@ public void testPasswordGenerator() {\n     @Test\n     public void passwordGeneratorFailing() {\n         assertThrows(IllegalArgumentException.class, () -> {\n-            String password = \"\";\n-            try {\n-                password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n-            } catch (InvalidPasswordRuleConf e) {\n-                fail(e.getMessage());\n-            }\n+            String password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n             assertNotNull(password);\n \n             User user = userDAO.find(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\");"},{"sha":"d11af422b7632b0573cc7f61e63045cfd62f7000","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -22,12 +22,12 @@ under the License.\n   <PasswordPolicy id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" name=\"a password policy\"\n                   historyLength=\"1\" allowNullPassword=\"1\"/>\n   <Implementation id=\"DefaultPasswordRuleConf1\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n-                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":8,\"wordsNotPermitted\":[\"notpermitted1\",\"notpermitted2\"]}'/>\n   <PasswordPolicyRule policy_id=\"ce93fcda-dc3a-4369-a7b0-a6108c261c85\" implementation_id=\"DefaultPasswordRuleConf1\"/>\n   <PasswordPolicy id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\"\n                   name=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"1\"/> \n   <Implementation id=\"DefaultPasswordRuleConf2\" type=\"PASSWORD_RULE\"  engine=\"JAVA\"\n-                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"digit\":1,\"wordsNotPermitted\":[\"notpermitted1\",\"notpermitted2\"]}'/>\n   <PasswordPolicyRule policy_id=\"986d1236-3ac5-4a19-810c-5ab21d79cba1\" implementation_id=\"DefaultPasswordRuleConf2\"/>\n   <AccountPolicy id=\"20ab5a8c-4b0c-432c-b957-f7fb9784d9f7\" name=\"an account policy\"\n                  propagateSuspension=\"0\" maxAuthenticationAttempts=\"0\"/>\n@@ -41,7 +41,7 @@ under the License.\n   <AccountPolicyRule policy_id=\"06e2ed52-6966-44aa-a177-a0ca7434201f\" implementation_id=\"DefaultAccountRuleConf2\"/>\n   <PasswordPolicy id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" name=\"sample password policy\" historyLength=\"0\" allowNullPassword=\"0\"/> \n   <Implementation id=\"DefaultPasswordRuleConf3\" type=\"PASSWORD_RULE\" engine=\"JAVA\"\n-                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n+                  body='{\"_class\":\"org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf\",\"maxLength\":0,\"minLength\":10,\"special\":1,\"specialChars\":[\"@\",\"!\"],\"digit\":1,\"lowercase\":1,\"uppercase\":1,\"wordsNotPermitted\":[\"notpermitted1\",\"notpermitted2\"]}'/>\n   <PasswordPolicyRule policy_id=\"55e5de0b-c79c-4e66-adda-251b6fb8579a\" implementation_id=\"DefaultPasswordRuleConf3\"/>\n   <PropagationPolicy id=\"89d322db-9878-420c-b49c-67be13df9a12\" name=\"sample propagation policy\"\n                      maxAttempts=\"5\" backOffStrategy=\"FIXED\" backOffParams=\"10000\"/>"},{"sha":"d6ba13da05d32d35ee299e6e21a42fae036bf8f6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -483,7 +483,7 @@ private static Object getPropertyValue(final String propType, final List<?> valu\n             } else if (File.class.equals(propertySchemaClass)) {\n                 value = new File(values.get(0).toString());\n             } else if (String[].class.equals(propertySchemaClass)) {\n-                value = values.toArray(new String[] {});\n+                value = values.toArray(String[]::new);\n             } else {\n                 value = values.get(0) == null ? null : values.get(0).toString();\n             }"},{"sha":"9e18cfdb9ccc0ce6b113102593fc17e3cfb02a8d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultConnIdBundleManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnIdBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnIdBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultConnIdBundleManager.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -106,8 +106,8 @@ protected void initLocal(final URI location) {\n                 + \"\\n\\tFiles: {}\", bundleFileURLs);\n \n         // 2. Get connector info manager\n-        ConnectorInfoManager manager = ConnectorInfoManagerFactory.getInstance().getLocalManager(\n-                bundleFileURLs.toArray(new URL[bundleFileURLs.size()]));\n+        ConnectorInfoManager manager =\n+                ConnectorInfoManagerFactory.getInstance().getLocalManager(bundleFileURLs.toArray(URL[]::new));\n         if (manager == null) {\n             throw new NotFoundException(\"Local ConnectorInfoManager\");\n         }"},{"sha":"30d509256da4a61847cd11579d9dfa20b0fab82b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultMappingManager.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultMappingManager.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -90,7 +90,6 @@\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheKey;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n-import org.apache.syncope.core.spring.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n import org.identityconnectors.framework.common.FrameworkUtil;\n@@ -517,11 +516,7 @@ protected String getPasswordAttrValue(final Provision provision, final Account a\n         }\n \n         if (passwordAttrValue == null && provision.getResource().isRandomPwdIfNotProvided()) {\n-            try {\n-                passwordAttrValue = passwordGenerator.generate(provision.getResource());\n-            } catch (InvalidPasswordRuleConf e) {\n-                LOG.error(\"Could not generate policy-compliant random password for {}\", account, e);\n-            }\n+            passwordAttrValue = passwordGenerator.generate(provision.getResource());\n         }\n \n         return passwordAttrValue;"},{"sha":"31e95b8adf83a7506eaf91834ceb46289835e47d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -749,7 +749,7 @@ protected ConnectorObject getRemoteObject(\n                         orgUnit.isIgnoreCaseMatch(),\n                         MappingUtils.buildOperationOptions(\n                                 MappingUtils.getPropagationItems(orgUnit.getItems().stream()),\n-                                moreAttrsToGet.toArray(new String[0])));\n+                                moreAttrsToGet.toArray(String[]::new)));\n             } catch (TimeoutException toe) {\n                 LOG.debug(\"Request timeout\", toe);\n                 throw toe;"},{"sha":"2f9445f0efbd45fef3303400a6fb4d6a9b879a92","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -260,7 +260,7 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n         Set<String> moreAttrsToGet = new HashSet<>();\n         profile.getActions().forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, provision)));\n         List<ConnectorObject> connObjs = outboundMatcher.match(\n-                profile.getConnector(), any, provision, Optional.of(moreAttrsToGet.toArray(new String[0])));\n+                profile.getConnector(), any, provision, Optional.of(moreAttrsToGet.toArray(String[]::new)));\n         LOG.debug(\"Match(es) found for {} as {}: {}\", any, provision.getObjectClass(), connObjs);\n \n         if (connObjs.size() > 1) {\n@@ -454,7 +454,7 @@ protected void doHandle(final Any<?> any, final Provision provision) throws JobE\n                 if (notificationsAvailable || auditRequested) {\n                     resultStatus = AuditElements.Result.SUCCESS;\n                     output = outboundMatcher.match(\n-                            profile.getConnector(), any, provision, Optional.of(moreAttrsToGet.toArray(new String[0])));\n+                            profile.getConnector(), any, provision, Optional.of(moreAttrsToGet.toArray(String[]::new)));\n                 }\n             } catch (IgnoreProvisionException e) {\n                 throw e;"},{"sha":"da3b84aae8cbf5c7e1ef6f1392d3612744369353","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -131,15 +131,15 @@ public List<ConnectorObject> match(\n                         connector,\n                         rule.get().getFilter(any, provision),\n                         provision,\n-                        Optional.of(moreAttrsToGet.toArray(new String[0])),\n+                        Optional.of(moreAttrsToGet.toArray(String[]::new)),\n                         Optional.empty()));\n             } else {\n                 MappingUtils.getConnObjectKeyItem(provision).flatMap(connObjectKeyItem -> matchByConnObjectKeyValue(\n                         connector,\n                         connObjectKeyItem,\n                         connObjectKeyValue,\n                         provision,\n-                        Optional.of(moreAttrsToGet.toArray(new String[0])),\n+                        Optional.of(moreAttrsToGet.toArray(String[]::new)),\n                         Optional.empty())).ifPresent(result::add);\n             }\n         } catch (RuntimeException e) {"},{"sha":"b67aa53f0f35c58a56b0ccb2e84d5cde3d1a2a5d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -240,7 +240,7 @@ protected String doExecuteProvisioning(\n             Set<String> moreAttrsToGet = new HashSet<>();\n             actions.forEach(action -> moreAttrsToGet.addAll(action.moreAttrsToGet(profile, orgUnit)));\n             OperationOptions options = MappingUtils.buildOperationOptions(\n-                    MappingUtils.getPullItems(orgUnit.getItems().stream()), moreAttrsToGet.toArray(new String[0]));\n+                    MappingUtils.getPullItems(orgUnit.getItems().stream()), moreAttrsToGet.toArray(String[]::new));\n \n             RealmPullResultHandler handler = buildRealmHandler();\n             handler.setProfile(profile);\n@@ -326,7 +326,7 @@ protected String doExecuteProvisioning(\n                         MappingUtils.getPullItems(provision.getMapping().getItems().stream()),\n                         virSchemaDAO.findByProvision(provision).stream().map(VirSchema::asLinkingMappingItem));\n                 OperationOptions options = MappingUtils.buildOperationOptions(\n-                        mapItems, moreAttrsToGet.toArray(new String[0]));\n+                        mapItems, moreAttrsToGet.toArray(String[]::new));\n \n                 switch (pullTask.getPullMode()) {\n                     case INCREMENTAL:"},{"sha":"12086e606f29a647f96f4c3dd6573c6af56d67b0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -157,7 +157,7 @@ public List<ProvisioningReport> pull(\n                     provision.getObjectClass(),\n                     reconFilterBuilder,\n                     handler,\n-                    MappingUtils.buildOperationOptions(mapItems, matg.toArray(new String[0])));\n+                    MappingUtils.buildOperationOptions(mapItems, matg.toArray(String[]::new)));\n \n             try {\n                 setGroupOwners(ghandler);"},{"sha":"67004b1b8816e20fff5355c296d9e16ee30057aa","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -240,7 +240,7 @@ public List<ProvisioningReport> pull(\n             connector.fullReconciliation(\n                     provision.getObjectClass(),\n                     handler,\n-                    MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(new String[0])));\n+                    MappingUtils.buildOperationOptions(mapItems, moreAttrsToGet.toArray(String[]::new)));\n \n             try {\n                 setGroupOwners(ghandler);"},{"sha":"0582f8947096d2beb02a2830b848ff9129c2dd2d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -50,10 +50,8 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n-import org.apache.syncope.core.spring.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.core.spring.security.PasswordGenerator;\n-import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.common.security.SecurityUtil;\n@@ -201,15 +199,7 @@ public <C extends AnyCR> C getAnyCR(\n                     filter(resource -> resource != null && resource.getPasswordPolicy() != null).\n                     forEach(resource -> passwordPolicies.add(resource.getPasswordPolicy()));\n \n-            String password;\n-            try {\n-                password = passwordGenerator.generate(passwordPolicies);\n-            } catch (InvalidPasswordRuleConf e) {\n-                LOG.error(\"Could not generate policy-compliant random password for {}\", userCR, e);\n-\n-                password = SecureRandomUtils.generateRandomPassword(16);\n-            }\n-            userCR.setPassword(password);\n+            userCR.setPassword(passwordGenerator.generate(passwordPolicies));\n         }\n \n         return anyCR;"},{"sha":"f7a230b57850279ff8d6f629356c563cecf57836","filename":"core/spring/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fpom.xml?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -59,6 +59,11 @@ under the License.\n       <artifactId>nimbus-jose-jwt</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.passay</groupId>\n+      <artifactId>passay</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-security</artifactId>"},{"sha":"b8c2de24fe4d39155c112f43804947d17cf9c6e8","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultPasswordRule.java","status":"modified","additions":88,"deletions":101,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -18,11 +18,16 @@\n  */\n package org.apache.syncope.core.spring.policy;\n \n+import java.io.InputStream;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Optional;\n+import java.util.Properties;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n@@ -31,6 +36,18 @@\n import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.security.Encryptor;\n+import org.passay.CharacterData;\n+import org.passay.CharacterRule;\n+import org.passay.EnglishCharacterData;\n+import org.passay.IllegalCharacterRule;\n+import org.passay.LengthRule;\n+import org.passay.PasswordData;\n+import org.passay.PasswordValidator;\n+import org.passay.PropertiesMessageResolver;\n+import org.passay.RepeatCharactersRule;\n+import org.passay.Rule;\n+import org.passay.RuleResult;\n+import org.passay.UsernameRule;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n@@ -39,140 +56,110 @@\n @PasswordRuleConfClass(DefaultPasswordRuleConf.class)\n public class DefaultPasswordRule implements PasswordRule {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(DefaultPasswordRule.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(DefaultPasswordRule.class);\n \n-    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+    protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n-    private DefaultPasswordRuleConf conf;\n+    public static List<Rule> conf2Rules(final DefaultPasswordRuleConf conf) {\n+        List<Rule> rules = new ArrayList<>();\n \n-    @Override\n-    public PasswordRuleConf getConf() {\n-        return conf;\n-    }\n-\n-    @Override\n-    public void setConf(final PasswordRuleConf conf) {\n-        if (conf instanceof DefaultPasswordRuleConf) {\n-            this.conf = (DefaultPasswordRuleConf) conf;\n-        } else {\n-            throw new IllegalArgumentException(\n-                    DefaultPasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n-        }\n-    }\n-\n-    protected void enforce(final String clear, final String username, final Set<String> wordsNotPermitted) {\n-        // check length\n-        if (conf.getMinLength() > 0 && conf.getMinLength() > clear.length()) {\n-            throw new PasswordPolicyException(\"Password too short\");\n+        LengthRule lengthRule = new LengthRule();\n+        if (conf.getMinLength() > 0) {\n+            lengthRule.setMinimumLength(conf.getMinLength());\n         }\n-\n-        if (conf.getMaxLength() > 0 && conf.getMaxLength() < clear.length()) {\n-            throw new PasswordPolicyException(\"Password too long\");\n+        if (conf.getMaxLength() > 0) {\n+            lengthRule.setMaximumLength(conf.getMaxLength());\n         }\n+        rules.add(lengthRule);\n \n-        // check words not permitted\n-        if (!conf.isUsernameAllowed() && username != null && username.equals(clear)) {\n-            throw new PasswordPolicyException(\"Password mustn't be equal to username\");\n+        if (conf.getAlphabetical() > 0) {\n+            rules.add(new CharacterRule(EnglishCharacterData.Alphabetical, conf.getAlphabetical()));\n         }\n \n-        wordsNotPermitted.stream().\n-                filter(word -> StringUtils.containsIgnoreCase(clear, word)).\n-                forEach(item -> {\n-                    throw new PasswordPolicyException(\"Used word(s) not permitted\");\n-                });\n-\n-        // check digits occurrence\n-        if (conf.isDigitRequired() && !PolicyPattern.DIGIT.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must contain digit(s)\");\n+        if (conf.getUppercase() > 0) {\n+            rules.add(new CharacterRule(EnglishCharacterData.UpperCase, conf.getUppercase()));\n         }\n \n-        // check lowercase alphabetic characters occurrence\n-        if (conf.isLowercaseRequired() && !PolicyPattern.ALPHA_LOWERCASE.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n+        if (conf.getLowercase() > 0) {\n+            rules.add(new CharacterRule(EnglishCharacterData.LowerCase, conf.getLowercase()));\n         }\n \n-        // check uppercase alphabetic characters occurrence\n-        if (conf.isUppercaseRequired() && !PolicyPattern.ALPHA_UPPERCASE.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n+        if (conf.getDigit() > 0) {\n+            rules.add(new CharacterRule(EnglishCharacterData.Digit, conf.getDigit()));\n         }\n \n-        // check prefix\n-        conf.getPrefixesNotPermitted().stream().\n-                filter(clear::startsWith).\n-                forEach(item -> {\n-                    throw new PasswordPolicyException(\"Prefix not permitted\");\n-                });\n-\n-        // check suffix\n-        conf.getSuffixesNotPermitted().stream().\n-                filter(clear::endsWith).\n-                forEach(item -> {\n-                    throw new PasswordPolicyException(\"Suffix not permitted\");\n-                });\n+        if (conf.getSpecial() > 0) {\n+            rules.add(new CharacterRule(new CharacterData() {\n \n-        // check digit first occurrence\n-        if (conf.isMustStartWithDigit() && !PolicyPattern.FIRST_DIGIT.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must start with a digit\");\n-        }\n-\n-        if (conf.isMustntStartWithDigit() && PolicyPattern.FIRST_DIGIT.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n-        }\n+                @Override\n+                public String getErrorCode() {\n+                    return \"INSUFFICIENT_SPECIAL\";\n+                }\n \n-        // check digit last occurrence\n-        if (conf.isMustEndWithDigit() && !PolicyPattern.LAST_DIGIT.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must end with a digit\");\n+                @Override\n+                public String getCharacters() {\n+                    return new String(ArrayUtils.toPrimitive(conf.getSpecialChars().toArray(Character[]::new)));\n+                }\n+            }, conf.getSpecial()));\n         }\n \n-        if (conf.isMustntEndWithDigit() && PolicyPattern.LAST_DIGIT.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n+        if (!conf.getIllegalChars().isEmpty()) {\n+            rules.add(new IllegalCharacterRule(\n+                    ArrayUtils.toPrimitive(conf.getIllegalChars().toArray(Character[]::new))));\n         }\n \n-        // check alphanumeric characters occurence\n-        if (conf.isAlphanumericRequired() && !PolicyPattern.ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n+        if (conf.getRepeatSame() > 0) {\n+            rules.add(new RepeatCharactersRule(conf.getRepeatSame()));\n         }\n \n-        // check non alphanumeric characters occurence\n-        if (conf.isNonAlphanumericRequired() && !PolicyPattern.NON_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n+        if (!conf.isUsernameAllowed()) {\n+            rules.add(new UsernameRule(true, true));\n         }\n \n-        // check alphanumeric character first occurrence\n-        if (conf.isMustStartWithAlpha() && !PolicyPattern.FIRST_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n-        }\n+        return rules;\n+    }\n \n-        if (conf.isMustntStartWithAlpha() && PolicyPattern.FIRST_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n-        }\n+    protected DefaultPasswordRuleConf conf;\n \n-        // check alphanumeric character last occurrence\n-        if (conf.isMustEndWithAlpha() && !PolicyPattern.LAST_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n-        }\n+    protected PasswordValidator passwordValidator;\n \n-        if (conf.isMustntEndWithAlpha() && PolicyPattern.LAST_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n-        }\n+    @Override\n+    public PasswordRuleConf getConf() {\n+        return conf;\n+    }\n \n-        // check non alphanumeric character first occurrence\n-        if (conf.isMustStartWithNonAlpha() && !PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n-        }\n+    @Override\n+    public void setConf(final PasswordRuleConf conf) {\n+        if (conf instanceof DefaultPasswordRuleConf) {\n+            this.conf = (DefaultPasswordRuleConf) conf;\n \n-        if (conf.isMustntStartWithNonAlpha() && PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n+            Properties passay = new Properties();\n+            try (InputStream in = getClass().getResourceAsStream(\"/passay.properties\")) {\n+                passay.load(in);\n+                passwordValidator = new PasswordValidator(new PropertiesMessageResolver(passay), conf2Rules(this.conf));\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Could not initialize Passay\", e);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\n+                    DefaultPasswordRuleConf.class.getName() + \" expected, got \" + conf.getClass().getName());\n         }\n+    }\n \n-        // check non alphanumeric character last occurrence\n-        if (conf.isMustEndWithNonAlpha() && !PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n+    protected void enforce(final String clear, final String username, final Set<String> wordsNotPermitted) {\n+        RuleResult result = passwordValidator.validate(\n+                username == null ? new PasswordData(clear) : new PasswordData(username, clear));\n+        if (!result.isValid()) {\n+            throw new PasswordPolicyException(passwordValidator.getMessages(result).\n+                    stream().collect(Collectors.joining(\",\")));\n         }\n \n-        if (conf.isMustntEndWithNonAlpha() && PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(clear).matches()) {\n-            throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n-        }\n+        // check words not permitted\n+        wordsNotPermitted.stream().\n+                filter(word -> StringUtils.containsIgnoreCase(clear, word)).findFirst().\n+                ifPresent(word -> {\n+                    throw new PasswordPolicyException(\"Used word(s) not permitted\");\n+                });\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"e016a25ca22a6da8b6cc5c8697c1b219b79be61f","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/InvalidPasswordRuleConf.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c11953fc3dc6a838d92465888c864321845dca4e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FInvalidPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c11953fc3dc6a838d92465888c864321845dca4e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FInvalidPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FInvalidPasswordRuleConf.java?ref=c11953fc3dc6a838d92465888c864321845dca4e","patch":"@@ -1,37 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.spring.policy;\n-\n-/**\n- * Raise when the merge of two or more PasswordRuleconf instances led to an inconsistent condition.\n- *\n- * @see org.apache.syncope.common.lib.policy.PasswordRuleConf\n- */\n-public class InvalidPasswordRuleConf extends Exception {\n-\n-    private static final long serialVersionUID = 4810651743226663580L;\n-\n-    public InvalidPasswordRuleConf(final String msg) {\n-        super(msg);\n-    }\n-\n-    public InvalidPasswordRuleConf(final String msg, final Exception e) {\n-        super(msg, e);\n-    }\n-}"},{"sha":"b82e80c50becc8629dfbf0e0f77fa015164dd682","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultPasswordGenerator.java","status":"modified","additions":51,"deletions":221,"changes":272,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -20,13 +20,14 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.commons.lang3.StringUtils;\n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.spring.ImplementationManager;\n-import org.apache.syncope.core.spring.policy.InvalidPasswordRuleConf;\n-import org.apache.syncope.core.spring.policy.PolicyPattern;\n+import org.apache.syncope.core.spring.policy.DefaultPasswordRule;\n+import org.passay.CharacterRule;\n+import org.passay.EnglishCharacterData;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n@@ -49,7 +50,7 @@ public class DefaultPasswordGenerator implements PasswordGenerator {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public String generate(final ExternalResource resource) throws InvalidPasswordRuleConf {\n+    public String generate(final ExternalResource resource) {\n         List<PasswordPolicy> policies = new ArrayList<>();\n \n         if (resource.getPasswordPolicy() != null) {\n@@ -60,27 +61,25 @@ public String generate(final ExternalResource resource) throws InvalidPasswordRu\n     }\n \n     @Override\n-    public String generate(final List<PasswordPolicy> policies) throws InvalidPasswordRuleConf {\n-        List<DefaultPasswordRuleConf> defaultRuleConfs = new ArrayList<>();\n+    public String generate(final List<PasswordPolicy> policies) {\n+        List<DefaultPasswordRuleConf> ruleConfs = new ArrayList<>();\n \n         policies.stream().forEach(policy -> policy.getRules().forEach(impl -> {\n             try {\n                 ImplementationManager.buildPasswordRule(impl).ifPresent(rule -> {\n                     if (rule.getConf() instanceof DefaultPasswordRuleConf) {\n-                        defaultRuleConfs.add((DefaultPasswordRuleConf) rule.getConf());\n+                        ruleConfs.add((DefaultPasswordRuleConf) rule.getConf());\n                     }\n                 });\n             } catch (Exception e) {\n                 LOG.error(\"Invalid {}, ignoring...\", impl, e);\n             }\n         }));\n \n-        DefaultPasswordRuleConf ruleConf = merge(defaultRuleConfs);\n-        check(ruleConf);\n-        return generate(ruleConf);\n+        return generate(merge(ruleConfs));\n     }\n \n-    protected static DefaultPasswordRuleConf merge(final List<DefaultPasswordRuleConf> defaultRuleConfs) {\n+    protected DefaultPasswordRuleConf merge(final List<DefaultPasswordRuleConf> defaultRuleConfs) {\n         DefaultPasswordRuleConf result = new DefaultPasswordRuleConf();\n         result.setMinLength(VERY_MIN_LENGTH);\n         result.setMaxLength(VERY_MAX_LENGTH);\n@@ -90,240 +89,71 @@ protected static DefaultPasswordRuleConf merge(final List<DefaultPasswordRuleCon\n                 result.setMinLength(ruleConf.getMinLength());\n             }\n \n-            if ((ruleConf.getMaxLength() != 0) && ((ruleConf.getMaxLength() < result.getMaxLength()))) {\n+            if (ruleConf.getMaxLength() > 0 && ruleConf.getMaxLength() < result.getMaxLength()) {\n                 result.setMaxLength(ruleConf.getMaxLength());\n             }\n-            result.getPrefixesNotPermitted().addAll(ruleConf.getPrefixesNotPermitted());\n-            result.getSuffixesNotPermitted().addAll(ruleConf.getSuffixesNotPermitted());\n \n-            if (!result.isNonAlphanumericRequired()) {\n-                result.setNonAlphanumericRequired(ruleConf.isNonAlphanumericRequired());\n+            if (ruleConf.getUppercase() > result.getUppercase()) {\n+                result.setUppercase(ruleConf.getUppercase());\n             }\n \n-            if (!result.isAlphanumericRequired()) {\n-                result.setAlphanumericRequired(ruleConf.isAlphanumericRequired());\n-            }\n-            if (!result.isDigitRequired()) {\n-                result.setDigitRequired(ruleConf.isDigitRequired());\n+            if (ruleConf.getLowercase() > result.getLowercase()) {\n+                result.setLowercase(ruleConf.getLowercase());\n             }\n \n-            if (!result.isLowercaseRequired()) {\n-                result.setLowercaseRequired(ruleConf.isLowercaseRequired());\n-            }\n-            if (!result.isUppercaseRequired()) {\n-                result.setUppercaseRequired(ruleConf.isUppercaseRequired());\n-            }\n-            if (!result.isMustStartWithDigit()) {\n-                result.setMustStartWithDigit(ruleConf.isMustStartWithDigit());\n-            }\n-            if (!result.isMustntStartWithDigit()) {\n-                result.setMustntStartWithDigit(ruleConf.isMustntStartWithDigit());\n-            }\n-            if (!result.isMustEndWithDigit()) {\n-                result.setMustEndWithDigit(ruleConf.isMustEndWithDigit());\n-            }\n-            if (result.isMustntEndWithDigit()) {\n-                result.setMustntEndWithDigit(ruleConf.isMustntEndWithDigit());\n+            if (ruleConf.getDigit() > result.getDigit()) {\n+                result.setDigit(ruleConf.getDigit());\n             }\n-            if (!result.isMustStartWithAlpha()) {\n-                result.setMustStartWithAlpha(ruleConf.isMustStartWithAlpha());\n-            }\n-            if (!result.isMustntStartWithAlpha()) {\n-                result.setMustntStartWithAlpha(ruleConf.isMustntStartWithAlpha());\n-            }\n-            if (!result.isMustStartWithNonAlpha()) {\n-                result.setMustStartWithNonAlpha(ruleConf.isMustStartWithNonAlpha());\n-            }\n-            if (!result.isMustntStartWithNonAlpha()) {\n-                result.setMustntStartWithNonAlpha(ruleConf.isMustntStartWithNonAlpha());\n-            }\n-            if (!result.isMustEndWithNonAlpha()) {\n-                result.setMustEndWithNonAlpha(ruleConf.isMustEndWithNonAlpha());\n+\n+            if (ruleConf.getSpecial() > result.getSpecial()) {\n+                result.setSpecial(ruleConf.getSpecial());\n             }\n-            if (!result.isMustntEndWithNonAlpha()) {\n-                result.setMustntEndWithNonAlpha(ruleConf.isMustntEndWithNonAlpha());\n+\n+            if (!ruleConf.getSpecialChars().isEmpty()) {\n+                result.getSpecialChars().addAll(ruleConf.getSpecialChars().stream().\n+                        filter(c -> !result.getSpecialChars().contains(c)).collect(Collectors.toList()));\n             }\n-            if (!result.isMustEndWithAlpha()) {\n-                result.setMustEndWithAlpha(ruleConf.isMustEndWithAlpha());\n+\n+            if (!ruleConf.getIllegalChars().isEmpty()) {\n+                result.getIllegalChars().addAll(ruleConf.getIllegalChars().stream().\n+                        filter(c -> !result.getIllegalChars().contains(c)).collect(Collectors.toList()));\n             }\n-            if (!result.isMustntEndWithAlpha()) {\n-                result.setMustntEndWithAlpha(ruleConf.isMustntEndWithAlpha());\n+\n+            if (ruleConf.getRepeatSame() > result.getRepeatSame()) {\n+                result.setRepeatSame(ruleConf.getRepeatSame());\n             }\n+\n             if (!result.isUsernameAllowed()) {\n                 result.setUsernameAllowed(ruleConf.isUsernameAllowed());\n             }\n+\n+            if (!ruleConf.getWordsNotPermitted().isEmpty()) {\n+                result.getWordsNotPermitted().addAll(ruleConf.getWordsNotPermitted().stream().\n+                        filter(w -> !result.getWordsNotPermitted().contains(w)).collect(Collectors.toList()));\n+            }\n         });\n \n         if (result.getMinLength() == 0) {\n             result.setMinLength(\n                     result.getMaxLength() < MIN_LENGTH_IF_ZERO ? result.getMaxLength() : MIN_LENGTH_IF_ZERO);\n         }\n-\n-        return result;\n-    }\n-\n-    protected static void check(final DefaultPasswordRuleConf defaultPasswordRuleConf)\n-            throws InvalidPasswordRuleConf {\n-\n-        if (defaultPasswordRuleConf.isMustEndWithAlpha() && defaultPasswordRuleConf.isMustntEndWithAlpha()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"mustEndWithAlpha and mustntEndWithAlpha are both true\");\n-        }\n-        if (defaultPasswordRuleConf.isMustEndWithAlpha() && defaultPasswordRuleConf.isMustEndWithDigit()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"mustEndWithAlpha and mustEndWithDigit are both true\");\n-        }\n-        if (defaultPasswordRuleConf.isMustEndWithDigit() && defaultPasswordRuleConf.isMustntEndWithDigit()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"mustEndWithDigit and mustntEndWithDigit are both true\");\n-        }\n-        if (defaultPasswordRuleConf.isMustEndWithNonAlpha() && defaultPasswordRuleConf.isMustntEndWithNonAlpha()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"mustEndWithNonAlpha and mustntEndWithNonAlpha are both true\");\n-        }\n-        if (defaultPasswordRuleConf.isMustStartWithAlpha() && defaultPasswordRuleConf.isMustntStartWithAlpha()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"mustStartWithAlpha and mustntStartWithAlpha are both true\");\n-        }\n-        if (defaultPasswordRuleConf.isMustStartWithAlpha() && defaultPasswordRuleConf.isMustStartWithDigit()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"mustStartWithAlpha and mustStartWithDigit are both true\");\n+        if (result.getMinLength() > result.getMaxLength()) {\n+            result.setMaxLength(result.getMinLength());\n         }\n-        if (defaultPasswordRuleConf.isMustStartWithDigit() && defaultPasswordRuleConf.isMustntStartWithDigit()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"mustStartWithDigit and mustntStartWithDigit are both true\");\n-        }\n-        if (defaultPasswordRuleConf.isMustStartWithNonAlpha() && defaultPasswordRuleConf.isMustntStartWithNonAlpha()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"mustStartWithNonAlpha and mustntStartWithNonAlpha are both true\");\n-        }\n-        if (defaultPasswordRuleConf.getMinLength() > defaultPasswordRuleConf.getMaxLength()) {\n-            throw new InvalidPasswordRuleConf(\n-                    \"Minimun length (\" + defaultPasswordRuleConf.getMinLength() + ')'\n-                    + \"is greater than maximum length (\" + defaultPasswordRuleConf.getMaxLength() + ')');\n-        }\n-    }\n-\n-    protected static String generate(final DefaultPasswordRuleConf ruleConf) {\n-        String[] generatedPassword = new String[ruleConf.getMinLength()];\n \n-        for (int i = 0; i < generatedPassword.length; i++) {\n-            generatedPassword[i] = StringUtils.EMPTY;\n-        }\n-\n-        checkStartChar(generatedPassword, ruleConf);\n-\n-        checkEndChar(generatedPassword, ruleConf);\n-\n-        checkRequired(generatedPassword, ruleConf);\n-\n-        for (int firstEmptyChar = firstEmptyChar(generatedPassword);\n-                firstEmptyChar < generatedPassword.length - 1; firstEmptyChar++) {\n-\n-            generatedPassword[firstEmptyChar] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        checkPrefixAndSuffix(generatedPassword, ruleConf);\n-\n-        return StringUtils.join(generatedPassword);\n-    }\n-\n-    protected static void checkStartChar(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n-        if (ruleConf.isMustStartWithAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (ruleConf.isMustStartWithNonAlpha() || ruleConf.isMustStartWithDigit()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (ruleConf.isMustntStartWithAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (ruleConf.isMustntStartWithDigit()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (ruleConf.isMustntStartWithNonAlpha()) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        if (StringUtils.EMPTY.equals(generatedPassword[0])) {\n-            generatedPassword[0] = SecureRandomUtils.generateRandomLetter();\n-        }\n-    }\n-\n-    protected static void checkEndChar(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n-        if (ruleConf.isMustEndWithAlpha()) {\n-            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (ruleConf.isMustEndWithNonAlpha() || ruleConf.isMustEndWithDigit()) {\n-            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n-        }\n-\n-        if (ruleConf.isMustntEndWithAlpha()) {\n-            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomNumber();\n-        }\n-        if (ruleConf.isMustntEndWithDigit()) {\n-            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-        if (ruleConf.isMustntEndWithNonAlpha()) {\n-            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-\n-        if (StringUtils.EMPTY.equals(generatedPassword[ruleConf.getMinLength() - 1])) {\n-            generatedPassword[ruleConf.getMinLength() - 1] = SecureRandomUtils.generateRandomLetter();\n-        }\n-    }\n-\n-    protected static int firstEmptyChar(final String[] generatedPStrings) {\n-        int index = 0;\n-        while (!generatedPStrings[index].isEmpty()) {\n-            index++;\n-        }\n-        return index;\n-    }\n-\n-    protected static void checkRequired(final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n-        if (ruleConf.isDigitRequired()\n-                && !PolicyPattern.DIGIT.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] = SecureRandomUtils.generateRandomNumber();\n-        }\n-\n-        if (ruleConf.isUppercaseRequired()\n-                && !PolicyPattern.ALPHA_UPPERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomLetter().toUpperCase();\n-        }\n-\n-        if (ruleConf.isLowercaseRequired()\n-                && !PolicyPattern.ALPHA_LOWERCASE.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomLetter().toLowerCase();\n-        }\n-\n-        if (ruleConf.isNonAlphanumericRequired()\n-                && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n-\n-            generatedPassword[firstEmptyChar(generatedPassword)] =\n-                    SecureRandomUtils.generateRandomNonAlphanumericChar(\n-                            PolicyPattern.NON_ALPHANUMERIC_CHARS_FOR_PASSWORD_VALUES);\n-        }\n+        return result;\n     }\n \n-    protected static void checkPrefixAndSuffix(\n-            final String[] generatedPassword, final DefaultPasswordRuleConf ruleConf) {\n-\n-        ruleConf.getPrefixesNotPermitted().forEach(prefix -> {\n-            if (StringUtils.join(generatedPassword).startsWith(prefix)) {\n-                checkStartChar(generatedPassword, ruleConf);\n-            }\n-        });\n-\n-        ruleConf.getSuffixesNotPermitted().forEach(suffix -> {\n-            if (StringUtils.join(generatedPassword).endsWith(suffix)) {\n-                checkEndChar(generatedPassword, ruleConf);\n-            }\n-        });\n+    protected String generate(final DefaultPasswordRuleConf ruleConf) {\n+        List<CharacterRule> characterRules = DefaultPasswordRule.conf2Rules(ruleConf).stream().\n+                filter(CharacterRule.class::isInstance).map(CharacterRule.class::cast).\n+                collect(Collectors.toList());\n+        if (characterRules.isEmpty()) {\n+            int halfMinLength = ruleConf.getMinLength() / 2;\n+            characterRules = List.of(\n+                    new CharacterRule(EnglishCharacterData.Alphabetical, halfMinLength),\n+                    new CharacterRule(EnglishCharacterData.Digit, halfMinLength));\n+        }\n+        return SecureRandomUtils.passwordGenerator().generatePassword(ruleConf.getMinLength(), characterRules);\n     }\n }"},{"sha":"17518b1ed21a70ab439898e96903ca87ad19884f","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/PasswordGenerator.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGenerator.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -21,12 +21,10 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.spring.policy.InvalidPasswordRuleConf;\n \n public interface PasswordGenerator {\n \n-    String generate(ExternalResource resource) throws InvalidPasswordRuleConf;\n-\n-    String generate(List<PasswordPolicy> policies) throws InvalidPasswordRuleConf;\n+    String generate(ExternalResource resource);\n \n+    String generate(List<PasswordPolicy> policies);\n }"},{"sha":"d27e37240a23ea649f24744d171b64aeec5c9b5c","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SecureRandomUtils.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSecureRandomUtils.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -23,11 +23,14 @@\n import java.security.SecureRandom;\n import java.util.UUID;\n import org.apache.commons.text.RandomStringGenerator;\n+import org.passay.PasswordGenerator;\n \n public final class SecureRandomUtils {\n \n     private static final SecureRandom RANDOM = new SecureRandom();\n \n+    private static final PasswordGenerator PASSWORD_GENERATOR = new PasswordGenerator(RANDOM);\n+\n     private static final RandomStringGenerator FOR_PASSWORD = new RandomStringGenerator.Builder().\n             usingRandom(RANDOM::nextInt).\n             withinRange('0', 'z').\n@@ -79,6 +82,10 @@ public static UUID generateRandomUUID() {\n         return UUID_GENERATOR.generate();\n     }\n \n+    public static PasswordGenerator passwordGenerator() {\n+        return PASSWORD_GENERATOR;\n+    }\n+\n     private SecureRandomUtils() {\n         // private constructor for static utility class\n     }"},{"sha":"fa292318ac87d6575e50b4ae666f90bf6970cfa3","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/ImplementationManagerTest.java","status":"modified","additions":3,"deletions":18,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -37,27 +37,12 @@\n @SpringJUnitConfig(classes = { SpringTestConfiguration.class })\n public class ImplementationManagerTest {\n \n-    private static DefaultPasswordRuleConf createBaseDefaultPasswordRuleConf() {\n+    public static DefaultPasswordRuleConf createBaseDefaultPasswordRuleConf() {\n         DefaultPasswordRuleConf baseDefaultPasswordRuleConf = new DefaultPasswordRuleConf();\n-        baseDefaultPasswordRuleConf.setAlphanumericRequired(false);\n-        baseDefaultPasswordRuleConf.setDigitRequired(false);\n-        baseDefaultPasswordRuleConf.setLowercaseRequired(false);\n+        baseDefaultPasswordRuleConf.setUppercase(1);\n+        baseDefaultPasswordRuleConf.setDigit(1);\n         baseDefaultPasswordRuleConf.setMaxLength(1000);\n         baseDefaultPasswordRuleConf.setMinLength(8);\n-        baseDefaultPasswordRuleConf.setMustEndWithAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustEndWithDigit(false);\n-        baseDefaultPasswordRuleConf.setMustEndWithNonAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustStartWithAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustStartWithDigit(false);\n-        baseDefaultPasswordRuleConf.setMustStartWithNonAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustntEndWithAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustntEndWithDigit(false);\n-        baseDefaultPasswordRuleConf.setMustntEndWithNonAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustntStartWithAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustntStartWithDigit(false);\n-        baseDefaultPasswordRuleConf.setMustntStartWithNonAlpha(false);\n-        baseDefaultPasswordRuleConf.setNonAlphanumericRequired(false);\n-        baseDefaultPasswordRuleConf.setUppercaseRequired(false);\n         return baseDefaultPasswordRuleConf;\n     }\n "},{"sha":"fd9696725d927f8eee5d653a4366b6e3d848840e","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/PasswordGeneratorTest.java","status":"modified","additions":56,"deletions":130,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -20,18 +20,12 @@\n \n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n-import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.ImplementationManagerTest;\n import org.apache.syncope.core.spring.SpringTestConfiguration;\n-import org.apache.syncope.core.spring.policy.InvalidPasswordRuleConf;\n-import org.apache.syncope.core.spring.policy.PolicyPattern;\n import org.junit.jupiter.api.Test;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n \n@@ -40,148 +34,80 @@ public class PasswordGeneratorTest {\n \n     private final DefaultPasswordGenerator passwordGenerator = new DefaultPasswordGenerator();\n \n-    private static DefaultPasswordRuleConf createBaseDefaultPasswordRuleConf() {\n-        DefaultPasswordRuleConf baseDefaultPasswordRuleConf = new DefaultPasswordRuleConf();\n-        baseDefaultPasswordRuleConf.setAlphanumericRequired(false);\n-        baseDefaultPasswordRuleConf.setDigitRequired(false);\n-        baseDefaultPasswordRuleConf.setLowercaseRequired(false);\n-        baseDefaultPasswordRuleConf.setMaxLength(1000);\n-        baseDefaultPasswordRuleConf.setMinLength(8);\n-        baseDefaultPasswordRuleConf.setMustEndWithAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustEndWithDigit(false);\n-        baseDefaultPasswordRuleConf.setMustEndWithNonAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustStartWithAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustStartWithDigit(false);\n-        baseDefaultPasswordRuleConf.setMustStartWithNonAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustntEndWithAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustntEndWithDigit(false);\n-        baseDefaultPasswordRuleConf.setMustntEndWithNonAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustntStartWithAlpha(false);\n-        baseDefaultPasswordRuleConf.setMustntStartWithDigit(false);\n-        baseDefaultPasswordRuleConf.setMustntStartWithNonAlpha(false);\n-        baseDefaultPasswordRuleConf.setNonAlphanumericRequired(false);\n-        baseDefaultPasswordRuleConf.setUppercaseRequired(false);\n-        return baseDefaultPasswordRuleConf;\n+    @Test\n+    public void digit() {\n+        DefaultPasswordRuleConf pwdRuleConf = ImplementationManagerTest.createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setDigit(1);\n+        TestImplementation passwordRule = new TestImplementation();\n+        passwordRule.setBody(POJOHelper.serialize(pwdRuleConf));\n+\n+        String generatedPassword = passwordGenerator.generate(List.of(new TestPasswordPolicy(passwordRule)));\n+\n+        assertTrue(generatedPassword.chars().anyMatch(Character::isDigit));\n     }\n \n     @Test\n-    public void startEndWithDigit() throws InvalidPasswordRuleConf {\n-        DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf1.setMustStartWithDigit(true);\n-        TestImplementation passwordRule1 = new TestImplementation();\n-        passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n-        TestPasswordPolicy policy1 = new TestPasswordPolicy();\n-        policy1.add(passwordRule1);\n-\n-        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf2.setMustEndWithDigit(true);\n-        TestImplementation passwordRule2 = new TestImplementation();\n-        passwordRule2.setBody(POJOHelper.serialize(pwdRuleConf2));\n-        TestPasswordPolicy policy2 = new TestPasswordPolicy();\n-        policy2.add(passwordRule2);\n-\n-        List<PasswordPolicy> policies = new ArrayList<>();\n-        policies.add(policy1);\n-        policies.add(policy2);\n-        String generatedPassword = passwordGenerator.generate(policies);\n-        assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n-        assertTrue(Character.isDigit(generatedPassword.charAt(generatedPassword.length() - 1)));\n+    public void alphabetical() {\n+        DefaultPasswordRuleConf pwdRuleConf = ImplementationManagerTest.createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setAlphabetical(1);\n+        TestImplementation passwordRule = new TestImplementation();\n+        passwordRule.setBody(POJOHelper.serialize(pwdRuleConf));\n+\n+        String generatedPassword = passwordGenerator.generate(List.of(new TestPasswordPolicy(passwordRule)));\n+\n+        assertTrue(generatedPassword.chars().anyMatch(Character::isAlphabetic));\n     }\n \n     @Test\n-    public void startWithDigitAndWithAlpha() throws InvalidPasswordRuleConf {\n-        DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf1.setMustStartWithDigit(true);\n-        TestImplementation passwordRule1 = new TestImplementation();\n-        passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n-        TestPasswordPolicy policy1 = new TestPasswordPolicy();\n-        policy1.add(passwordRule1);\n-\n-        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf2.setMustEndWithAlpha(true);\n-        TestImplementation passwordRule2 = new TestImplementation();\n-        passwordRule2.setBody(POJOHelper.serialize(pwdRuleConf2));\n-        TestPasswordPolicy policy2 = new TestPasswordPolicy();\n-        policy2.add(passwordRule2);\n-\n-        List<PasswordPolicy> policies = new ArrayList<>();\n-        policies.add(policy1);\n-        policies.add(policy2);\n-        String generatedPassword = passwordGenerator.generate(policies);\n-        assertTrue(Character.isDigit(generatedPassword.charAt(0)));\n-        assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n+    public void lowercase() {\n+        DefaultPasswordRuleConf pwdRuleConf = ImplementationManagerTest.createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setLowercase(1);\n+        TestImplementation passwordRule = new TestImplementation();\n+        passwordRule.setBody(POJOHelper.serialize(pwdRuleConf));\n+\n+        String generatedPassword = passwordGenerator.generate(List.of(new TestPasswordPolicy(passwordRule)));\n+\n+        assertTrue(generatedPassword.chars().anyMatch(Character::isLowerCase));\n     }\n \n     @Test\n-    public void passwordWithNonAlpha() throws InvalidPasswordRuleConf {\n-        DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf1.setNonAlphanumericRequired(true);\n-        TestImplementation passwordRule1 = new TestImplementation();\n-        passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n-        TestPasswordPolicy policy1 = new TestPasswordPolicy();\n-        policy1.add(passwordRule1);\n-\n-        DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n-        pwdRuleConf2.setMustEndWithAlpha(true);\n-        TestImplementation passwordRule2 = new TestImplementation();\n-        passwordRule2.setBody(POJOHelper.serialize(pwdRuleConf2));\n-        TestPasswordPolicy policy2 = new TestPasswordPolicy();\n-        policy2.add(passwordRule2);\n-\n-        List<PasswordPolicy> policies = new ArrayList<>();\n-        policies.add(policy1);\n-        policies.add(policy2);\n-        String generatedPassword = passwordGenerator.generate(policies);\n-        assertTrue(PolicyPattern.NON_ALPHANUMERIC.matcher(generatedPassword).matches());\n-        assertTrue(Character.isLetter(generatedPassword.charAt(generatedPassword.length() - 1)));\n+    public void uppercase() {\n+        DefaultPasswordRuleConf pwdRuleConf = ImplementationManagerTest.createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setUppercase(1);\n+        TestImplementation passwordRule = new TestImplementation();\n+        passwordRule.setBody(POJOHelper.serialize(pwdRuleConf));\n+\n+        String generatedPassword = passwordGenerator.generate(List.of(new TestPasswordPolicy(passwordRule)));\n+\n+        assertTrue(generatedPassword.chars().anyMatch(Character::isUpperCase));\n     }\n \n     @Test\n-    public void incopatiblePolicies() {\n-        assertThrows(InvalidPasswordRuleConf.class, () -> {\n-            DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n-            pwdRuleConf1.setMinLength(12);\n-            TestImplementation passwordRule1 = new TestImplementation();\n-            passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n-            TestPasswordPolicy policy1 = new TestPasswordPolicy();\n-            policy1.add(passwordRule1);\n-\n-            DefaultPasswordRuleConf pwdRuleConf2 = createBaseDefaultPasswordRuleConf();\n-            pwdRuleConf2.setMaxLength(10);\n-            TestImplementation passwordRule2 = new TestImplementation();\n-            passwordRule2.setBody(POJOHelper.serialize(pwdRuleConf2));\n-            TestPasswordPolicy policy2 = new TestPasswordPolicy();\n-            policy2.add(passwordRule2);\n-\n-            List<PasswordPolicy> policies = new ArrayList<>();\n-            policies.add(policy1);\n-            policies.add(policy2);\n-            passwordGenerator.generate(policies);\n-        });\n+    public void special() {\n+        DefaultPasswordRuleConf pwdRuleConf = ImplementationManagerTest.createBaseDefaultPasswordRuleConf();\n+        pwdRuleConf.setSpecial(1);\n+        pwdRuleConf.getSpecialChars().add('@');\n+        pwdRuleConf.getSpecialChars().add('!');\n+        pwdRuleConf.getSpecialChars().add('%');\n+        TestImplementation passwordRule = new TestImplementation();\n+        passwordRule.setBody(POJOHelper.serialize(pwdRuleConf));\n+\n+        String generatedPassword = passwordGenerator.generate(List.of(new TestPasswordPolicy(passwordRule)));\n+\n+        assertTrue(generatedPassword.chars().anyMatch(c -> '@' == c || '!' == c || '%' == c));\n     }\n \n     @Test\n     public void issueSYNCOPE678() {\n-        String password = null;\n-        try {\n-            password = passwordGenerator.generate(Collections.<PasswordPolicy>emptyList());\n-        } catch (InvalidPasswordRuleConf e) {\n-            fail(e::getMessage);\n-        }\n+        String password = passwordGenerator.generate(List.of());\n         assertNotNull(password);\n \n-        DefaultPasswordRuleConf pwdRuleConf1 = createBaseDefaultPasswordRuleConf();\n+        DefaultPasswordRuleConf pwdRuleConf1 = ImplementationManagerTest.createBaseDefaultPasswordRuleConf();\n         pwdRuleConf1.setMinLength(0);\n-        TestImplementation passwordRule1 = new TestImplementation();\n-        passwordRule1.setBody(POJOHelper.serialize(pwdRuleConf1));\n-        TestPasswordPolicy policy1 = new TestPasswordPolicy();\n-\n-        password = null;\n-        try {\n-            password = passwordGenerator.generate(Collections.<PasswordPolicy>singletonList(policy1));\n-        } catch (InvalidPasswordRuleConf e) {\n-            fail(e::getMessage);\n-        }\n+        TestImplementation passwordRule = new TestImplementation();\n+        passwordRule.setBody(POJOHelper.serialize(pwdRuleConf1));\n+\n+        password = passwordGenerator.generate(List.of(new TestPasswordPolicy(passwordRule)));\n         assertNotNull(password);\n     }\n }"},{"sha":"521b98dbff1e57d7a1c79863c8be7f74093b267e","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/TestPasswordPolicy.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordPolicy.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -29,6 +29,10 @@ public class TestPasswordPolicy implements PasswordPolicy {\n \n     private final List<Implementation> rules = new ArrayList<>();\n \n+    public TestPasswordPolicy(final Implementation rule) {\n+        rules.add(rule);\n+    }\n+\n     @Override\n     public String getKey() {\n         return \"\";\n@@ -72,6 +76,5 @@ public boolean add(final Implementation rule) {\n     @Override\n     public List<? extends Implementation> getRules() {\n         return this.rules;\n-\n     }\n }"},{"sha":"bb99f27d8383a4b9dadc1c75d34fc89d33041500","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ITImplementationLookup.java","status":"modified","additions":26,"deletions":57,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FITImplementationLookup.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -20,7 +20,6 @@\n \n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -86,76 +85,46 @@ public class ITImplementationLookup implements ImplementationLookup {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ITImplementationLookup.class);\n \n-    private static final Set<Class<?>> JWTSSOPROVIDER_CLASSES = new HashSet<>(\n-            List.of(SyncopeJWTSSOProvider.class, CustomJWTSSOProvider.class));\n+    private static final Set<Class<?>> JWTSSOPROVIDER_CLASSES =\n+            Set.of(SyncopeJWTSSOProvider.class, CustomJWTSSOProvider.class);\n \n     private static final Map<Class<? extends ReportletConf>, Class<? extends Reportlet>> REPORTLET_CLASSES =\n-            new HashMap<>() {\n-\n-        private static final long serialVersionUID = 3109256773218160485L;\n-\n-        {\n-            put(AuditReportletConf.class, AuditReportlet.class);\n-            put(ReconciliationReportletConf.class, ReconciliationReportlet.class);\n-            put(GroupReportletConf.class, GroupReportlet.class);\n-            put(UserReportletConf.class, UserReportlet.class);\n-            put(StaticReportletConf.class, StaticReportlet.class);\n-        }\n-    };\n+            Map.of(\n+                    AuditReportletConf.class, AuditReportlet.class,\n+                    ReconciliationReportletConf.class, ReconciliationReportlet.class,\n+                    GroupReportletConf.class, GroupReportlet.class,\n+                    UserReportletConf.class, UserReportlet.class,\n+                    StaticReportletConf.class, StaticReportlet.class);\n \n     private static final Map<Class<? extends AccountRuleConf>, Class<? extends AccountRule>> ACCOUNT_RULE_CLASSES =\n-            new HashMap<>() {\n-\n-        private static final long serialVersionUID = 3109256773218160485L;\n-\n-        {\n-            put(TestAccountRuleConf.class, TestAccountRule.class);\n-            put(DefaultAccountRuleConf.class, DefaultAccountRule.class);\n-        }\n-    };\n+            Map.of(\n+                    TestAccountRuleConf.class, TestAccountRule.class,\n+                    DefaultAccountRuleConf.class, DefaultAccountRule.class);\n \n     private static final Map<Class<? extends PasswordRuleConf>, Class<? extends PasswordRule>> PASSWORD_RULE_CLASSES =\n-            new HashMap<>() {\n-\n-        private static final long serialVersionUID = -6624291041977583649L;\n-\n-        {\n-            put(TestPasswordRuleConf.class, TestPasswordRule.class);\n-            put(DefaultPasswordRuleConf.class, DefaultPasswordRule.class);\n-            put(HaveIBeenPwnedPasswordRuleConf.class, HaveIBeenPwnedPasswordRule.class);\n-        }\n-    };\n+            Map.of(\n+                    TestPasswordRuleConf.class, TestPasswordRule.class,\n+                    DefaultPasswordRuleConf.class, DefaultPasswordRule.class,\n+                    HaveIBeenPwnedPasswordRuleConf.class, HaveIBeenPwnedPasswordRule.class);\n \n     private static final Map<\n             Class<? extends PullCorrelationRuleConf>, Class<? extends PullCorrelationRule>> PULL_CR_CLASSES =\n-            new HashMap<>() {\n-\n-        private static final long serialVersionUID = 3109256773218160485L;\n-\n-        {\n-            put(DummyPullCorrelationRuleConf.class, DummyPullCorrelationRule.class);\n-            put(DefaultPullCorrelationRuleConf.class, DefaultPullCorrelationRule.class);\n-            put(LinkedAccountSamplePullCorrelationRuleConf.class, LinkedAccountSamplePullCorrelationRule.class);\n-        }\n-    };\n+            Map.of(\n+                    DummyPullCorrelationRuleConf.class, DummyPullCorrelationRule.class,\n+                    DefaultPullCorrelationRuleConf.class, DefaultPullCorrelationRule.class,\n+                    LinkedAccountSamplePullCorrelationRuleConf.class, LinkedAccountSamplePullCorrelationRule.class);\n \n     private static final Map<\n             Class<? extends PushCorrelationRuleConf>, Class<? extends PushCorrelationRule>> PUSH_CR_CLASSES =\n-            new HashMap<>() {\n-\n-        private static final long serialVersionUID = 3109256773218160485L;\n-\n-        {\n-            put(DummyPushCorrelationRuleConf.class, DummyPushCorrelationRule.class);\n-            put(DefaultPushCorrelationRuleConf.class, DefaultPushCorrelationRule.class);\n-        }\n-    };\n+            Map.of(\n+                    DummyPushCorrelationRuleConf.class, DummyPushCorrelationRule.class,\n+                    DefaultPushCorrelationRuleConf.class, DefaultPushCorrelationRule.class);\n \n-    private static final Set<Class<?>> AUDITAPPENDER_CLASSES = new HashSet<>(\n-            List.of(TestFileAuditAppender.class, TestFileRewriteAuditAppender.class));\n+    private static final Set<Class<?>> AUDITAPPENDER_CLASSES =\n+            Set.of(TestFileAuditAppender.class, TestFileRewriteAuditAppender.class);\n \n-    private static final Set<Class<?>> PROVISION_SORTER_CLASSES = new HashSet<>(\n-            List.of(DefaultProvisionSorter.class));\n+    private static final Set<Class<?>> PROVISION_SORTER_CLASSES =\n+            Set.of(DefaultProvisionSorter.class);\n \n     private static final Map<String, Set<String>> CLASS_NAMES = new HashMap<>() {\n "},{"sha":"661fbe07d032764f8f5fe2957636b17ae9f24e2f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -779,7 +779,7 @@ protected void updateLdapRemoteObject(\n             attributes.forEach((key, value) -> items.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE,\n                     new BasicAttribute(key, value))));\n \n-            ctx.modifyAttributes(objectDn, items.toArray(new ModificationItem[] {}));\n+            ctx.modifyAttributes(objectDn, items.toArray(ModificationItem[]::new));\n         } catch (Exception e) {\n             LOG.error(\"While updating {} with {}\", objectDn, attributes, e);\n         } finally {"},{"sha":"f8e0fec48e7dfbb713bbae753476da836316a554","filename":"pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -1864,6 +1864,12 @@ under the License.\n         <version>${nimbus-jose-jwt.version}</version>\n       </dependency>\n \n+      <dependency>\n+        <groupId>org.passay</groupId>\n+        <artifactId>passay</artifactId>\n+        <version>1.6.1</version>\n+      </dependency>\n+\n       <dependency>\n         <groupId>org.jsoup</groupId>\n         <artifactId>jsoup</artifactId>"},{"sha":"6712428411e59d0c5abead4df28a451ee64ba277","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -122,7 +122,7 @@ public ClientRegistration oidcClientRegistration(final SRAProperties props) {\n                 registrationId(SRAProperties.AMType.OIDC.name()).\n                 clientId(props.getOidc().getClientId()).\n                 clientSecret(props.getOidc().getClientSecret()).\n-                scope(props.getOidc().getScopes().toArray(new String[0])).\n+                scope(props.getOidc().getScopes().toArray(String[]::new)).\n                 build();\n     }\n \n@@ -177,7 +177,7 @@ public ClientRegistration oauth2ClientRegistration(final SRAProperties props) {\n                 userNameAttributeName(props.getOauth2().getUserNameAttributeName()).\n                 clientId(props.getOauth2().getClientId()).\n                 clientSecret(props.getOauth2().getClientSecret()).\n-                scope(props.getOauth2().getScopes().toArray(new String[0])).\n+                scope(props.getOauth2().getScopes().toArray(String[]::new)).\n                 authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE).\n                 jwkSetUri(props.getOauth2().getJwkSetUri()).\n                 build();"},{"sha":"81df1a1a57cb0696646f2dae6520fd7b39f0d6b2","filename":"sra/src/main/java/org/apache/syncope/sra/security/pac4j/ServerWebExchangeContext.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fpac4j%2FServerWebExchangeContext.java?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -87,7 +87,7 @@ public Map<String, String[]> getRequestParameters() {\n                 forEach((key, value) -> params.put(key, new String[] { value.toString() }));\n \n         if (this.form != null) {\n-            form.forEach((key, values) -> params.put(key, values.toArray(new String[0])));\n+            form.forEach((key, values) -> params.put(key, values.toArray(String[]::new)));\n         }\n \n         return params;"},{"sha":"51746fdce8fe6d2bd791779c6b8c020bff739682","filename":"src/main/asciidoc/reference-guide/concepts/policies.adoc","status":"modified","additions":17,"deletions":24,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4d9dcb63ce89ecdc33f544f7e5e937786e354599/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4d9dcb63ce89ecdc33f544f7e5e937786e354599/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Fpolicies.adoc?ref=4d9dcb63ce89ecdc33f544f7e5e937786e354599","patch":"@@ -216,32 +216,25 @@ endif::[]\n ifeval::[\"{snapshotOrRelease}\" == \"snapshot\"]\n https://github.com/apache/syncope/blob/master/common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/DefaultPasswordRuleConf.java[DefaultPasswordRuleConf^]\n endif::[]\n-) contains the following controls:\n-\n-* maximum length - the maximum length to allow; `0` means no limit set;\n-* minimum length - the minimum length to allow; `0` means no limit set;\n-* non-alphanumeric required\n-* alphanumeric required\n-* digit required\n-* lowercase required\n-* uppercase required\n-* must start with digit\n-* must not start with digit\n-* must end with digit\n-* must not end with digit\n-* must start with alphanumeric\n-* must start with non-alphanumeric\n-* must not start with alphanumeric\n-* must not start with non-alphanumeric\n-* must end with alphanumeric\n-* must end with non-alphanumeric\n-* must not end with alphanumeric\n-* must not end with non-alphanumeric\n-* username allowed - whether a username value can be used\n+) is based on https://www.passay.org/[Passay^] and contains the following controls:\n+\n+* maximum length - the maximum length to allow (`0` means no limit set);\n+* minimum length - the minimum length to allow (`0` means no limit set);\n+* alphabetical - the number of alphabetical characters required;\n+* uppercase - the number of uppercase characters required;\n+* lowercase - the number of lowercase characters required;\n+* digit - the number of digits required;\n+* special - the number of special characters required;\n+* special chars - the set of special characters allowed;\n+* illegal chars - the set of characters not allowed;\n+* repeat same - the size of the longest sequence of repeating characters allowed;\n+* username allowed - whether a username value can be used;\n * words not permitted - list of words that cannot be present, even as a substring;\n * schemas not permitted - list of <<schema,schemas>> whose values cannot be present, even as a substring;\n-* prefixes not permitted - list of strings that cannot be present as a prefix;\n-* suffixes not permitted - list of strings that cannot be present as a suffix.\n+\n+[TIP]\n+The default password rule can be extended to cover specific needs, relying on the\n+https://www.passay.org/reference/[whole set of features^] provided by Passay.\n \n [NOTE]\n Before being able to configure the default password rule as mentioned above, you will need to first create a `JAVA`"}]}