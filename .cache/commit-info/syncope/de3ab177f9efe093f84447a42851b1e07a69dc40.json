{"sha":"de3ab177f9efe093f84447a42851b1e07a69dc40","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRlM2FiMTc3ZjllZmUwOTNmODQ0NDdhNDI4NTFiMWUwN2E2OWRjNDA=","commit":{"author":{"name":"Tushar","email":"tusharm567@gmail.com","date":"2016-07-28T10:10:50Z"},"committer":{"name":"Francesco ChicchiriccÃ²","email":"ilgrosso@apache.org","date":"2016-08-03T09:24:45Z"},"message":"Auto-Format menu item for HTMLEditor - This closes #31","tree":{"sha":"e8a40be1773fbd167c58fda0cd4b5e582517f63d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e8a40be1773fbd167c58fda0cd4b5e582517f63d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/de3ab177f9efe093f84447a42851b1e07a69dc40","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/de3ab177f9efe093f84447a42851b1e07a69dc40","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/de3ab177f9efe093f84447a42851b1e07a69dc40","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/de3ab177f9efe093f84447a42851b1e07a69dc40/comments","author":{"login":"tmess567","id":9494086,"node_id":"MDQ6VXNlcjk0OTQwODY=","avatar_url":"https://avatars.githubusercontent.com/u/9494086?v=4","gravatar_id":"","url":"https://api.github.com/users/tmess567","html_url":"https://github.com/tmess567","followers_url":"https://api.github.com/users/tmess567/followers","following_url":"https://api.github.com/users/tmess567/following{/other_user}","gists_url":"https://api.github.com/users/tmess567/gists{/gist_id}","starred_url":"https://api.github.com/users/tmess567/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmess567/subscriptions","organizations_url":"https://api.github.com/users/tmess567/orgs","repos_url":"https://api.github.com/users/tmess567/repos","events_url":"https://api.github.com/users/tmess567/events{/privacy}","received_events_url":"https://api.github.com/users/tmess567/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"33fd24368f7d6d90b3534906ac3f51e43f909af2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/33fd24368f7d6d90b3534906ac3f51e43f909af2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/33fd24368f7d6d90b3534906ac3f51e43f909af2"}],"stats":{"total":474,"additions":439,"deletions":35},"files":[{"sha":"87a5b1325875c7b7d651a2e595b830aebf24a88e","filename":"ide/eclipse/LICENSE","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2FLICENSE","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2FLICENSE","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2FLICENSE?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -673,6 +673,11 @@ This is licensed under the MIT license:\n \n ==\n \n+For Jsoup (https://jsoup.org/):\n+This is licensed under the MIT license, see above.\n+\n+==\n+\n For Web Services Description Language for Java (http://wsdl4j.sourceforge.net/):\n This is licensed under the CPL:\n "},{"sha":"2e18d85c61a71ad81ec0a2cfbcba769c29d0dd29","filename":"ide/eclipse/NOTICE","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2FNOTICE","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2FNOTICE","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2FNOTICE?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -79,3 +79,8 @@ All Rights Reserved\n This product includes software developed by the Eclipse SWT project.\n Copyright (c) 2016 The Eclipse Foundation.\n All Rights Reserved.\n+\n+==\n+\n+This product includes software developed by the Jsoup project.\n+Copyright (c) 2009 - 2016 Jonathan Hedley (jonathan@hedley.net)\n\\ No newline at end of file"},{"sha":"64d615915deadfb53fa6f5a0b59447ef971f7048","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/META-INF/MANIFEST.MF","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2FMETA-INF%2FMANIFEST.MF","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2FMETA-INF%2FMANIFEST.MF","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2FMETA-INF%2FMANIFEST.MF?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -45,4 +45,5 @@ Bundle-ClassPath: lib/asm.jar,\n       lib/woodstox-core-asl.jar,\n       lib/wsdl4j.jar,\n       lib/xmlschema-core.jar,\n+      lib/jsoup.jar,\n       ."},{"sha":"13ef6f0b42e2826fabf7da7b22759a9aa30c10bf","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/build.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fbuild.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fbuild.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fbuild.properties?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -54,4 +54,5 @@ bin.includes = plugin.xml,\\\n       lib/validation-api.jar,\\\n       lib/woodstox-core-asl.jar,\\\n       lib/wsdl4j.jar,\\\n-      lib/xmlschema-core.jar\n+      lib/xmlschema-core.jar,\\\n+      lib/jsoup.jar"},{"sha":"cd0bcf134f443ce49e9458d1afaad35c26e078b4","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/plugin.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fplugin.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fplugin.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fplugin.xml?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -58,6 +58,10 @@ under the License.\n          icon=\"src/main/resources/icons/syncope.png\"\n          class=\"org.apache.syncope.ide.eclipse.plugin.editors.TemplateEditor\"\n       />\n+    <editor id=\"org.apache.syncope.ide.eclipse.plugin.editors.HTMLEditor\"\n+         name=\"HTML Editor\"\n+         icon=\"src/main/resources/icons/syncope.png\"\n+         class=\"org.apache.syncope.ide.eclipse.plugin.editors.HTMLEditor\"\n+      />\n    </extension>\n-\n </plugin>"},{"sha":"732c24276ef63ebed73e660664a2fe852c3b1c54","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fpom.xml?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -40,6 +40,11 @@ under the License.\n       <artifactId>syncope-client-lib</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.jsoup</groupId>\n+      <artifactId>jsoup</artifactId>\n+      <version>1.9.2</version>\n+    </dependency>\n   </dependencies>\n   \n   <properties>"},{"sha":"95768cd728b3d9fc5b4b75b52bcc6763d6c684d0","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/src/main/java/org/apache/syncope/ide/eclipse/plugin/editors/HTMLEditor.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2FHTMLEditor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2FHTMLEditor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2FHTMLEditor.java?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -18,19 +18,44 @@\n  */\n package org.apache.syncope.ide.eclipse.plugin.editors;\n \n+import java.util.ResourceBundle;\n+\n+import org.apache.syncope.ide.eclipse.plugin.editors.htmlhelpers.AutoIndentAction;\n import org.apache.syncope.ide.eclipse.plugin.editors.htmlhelpers.HTMLFileDocumentProvider;\n import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.jface.action.IAction;\n+import org.eclipse.jface.action.IMenuManager;\n import org.eclipse.ui.IEditorInput;\n import org.eclipse.ui.editors.text.TextEditor;\n+import org.eclipse.ui.texteditor.ITextEditorActionConstants;\n+import org.eclipse.ui.texteditor.TextEditorAction;\n \n public class HTMLEditor extends TextEditor {\n+    \n+    private static final String RESOURCE_BUNDLE = \"/src/main/resources/HTMLEditor\";\n+            \n     public HTMLEditor() {\n         super();\n         setSourceViewerConfiguration(new HTMLSourceConfiguration());\n     }\n \n+    @Override\n     protected final void doSetInput(final IEditorInput input) throws CoreException {\n         setDocumentProvider(new HTMLFileDocumentProvider());\n         super.doSetInput(input);\n     }\n+\n+    @Override\n+    protected void editorContextMenuAboutToShow(final IMenuManager menu) {\n+        super.editorContextMenuAboutToShow(menu);\n+        addAction(menu, ITextEditorActionConstants.GROUP_EDIT, \"AutoIndent\");\n+    }\n+\n+    @Override\n+    protected void createActions() {\n+        super.createActions();\n+        IAction a = (TextEditorAction) new AutoIndentAction(\n+                ResourceBundle.getBundle(RESOURCE_BUNDLE), \"AutoIndent\", null);\n+        setAction(\"AutoIndent\", a);\n+    }\n }"},{"sha":"5b0ba38424430ac0c384c19049ae8c22c49ac20d","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/src/main/java/org/apache/syncope/ide/eclipse/plugin/editors/TemplateEditor.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2FTemplateEditor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2FTemplateEditor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2FTemplateEditor.java?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -68,10 +68,7 @@ void createPage(final String inputString, final String title, final String toolt\n             setPageText(index, editor.getTitle());\n         } catch (final PartInitException e) {\n             ErrorDialog.openError(\n-                getSite().getShell(),\n-                ERROR_NESTED_EDITOR,\n-                null,\n-                e.getStatus());\n+                getSite().getShell(), ERROR_NESTED_EDITOR, null, e.getStatus());\n         }\n     }\n \n@@ -179,6 +176,15 @@ public boolean isSaveAsAllowed() {\n     protected void pageChange(final int newPageIndex) {\n         super.pageChange(newPageIndex);\n     }\n+    \n+    public ITextEditor getActiveHTMLEditor() {\n+        final ITextEditor ite = (ITextEditor) getActiveEditor();\n+        if (ite.getTitle().equals(SyncopeView.TEMPLATE_FORMAT_HTML)) {\n+            return (ITextEditor) getActiveEditor();\n+        } else {\n+            return null;\n+        }\n+    }\n \n     public void resourceChanged(final IResourceChangeEvent event) {\n         if (event.getType() == IResourceChangeEvent.PRE_CLOSE) {"},{"sha":"b5e7d11370b3f4a51f021bb573171cf2f3823861","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/src/main/java/org/apache/syncope/ide/eclipse/plugin/editors/htmlhelpers/AutoIndentAction.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FAutoIndentAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FAutoIndentAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FAutoIndentAction.java?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ide.eclipse.plugin.editors.htmlhelpers;\n+\n+import java.util.ResourceBundle;\n+\n+import org.apache.syncope.ide.eclipse.plugin.editors.TemplateEditor;\n+import org.eclipse.jface.text.IDocument;\n+import org.eclipse.ui.IEditorPart;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.ui.texteditor.ITextEditor;\n+import org.eclipse.ui.texteditor.TextEditorAction;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+\n+public class AutoIndentAction extends TextEditorAction {\n+\n+    public AutoIndentAction(final ResourceBundle bundle, final String prefix, final ITextEditor editor) {\n+        super(bundle, prefix, editor);\n+        update();\n+    }\n+\n+    @Override\n+    public void run() {\n+        String content = getCurrentEditorContent();\n+        content = formatContent(content);\n+        ITextEditor ite = getHTMLEditor();\n+        IDocument doc = ite.getDocumentProvider().getDocument(ite.getEditorInput());\n+        doc.set(content);\n+    }\n+\n+    private String formatContent(final String contentarg) {\n+        String content =  contentarg;\n+        Document htmlDoc = Jsoup.parse(content);\n+        content = htmlDoc.html();\n+        return content;\n+    }\n+\n+    public String getCurrentEditorContent() {\n+        ITextEditor ite = getHTMLEditor();\n+        IDocument doc = ite.getDocumentProvider().getDocument(ite.getEditorInput());\n+        return doc.get();\n+    }\n+\n+    protected ITextEditor getHTMLEditor() {\n+        final IEditorPart editor = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage()\n+                .getActiveEditor();\n+        if (!(editor instanceof TemplateEditor)) {\n+            return null;\n+        }\n+        TemplateEditor te = (TemplateEditor) editor;\n+        return (ITextEditor) (te.getActiveHTMLEditor());\n+    }\n+\n+    @Override\n+    public void update() {\n+        setEnabled(true);\n+    }\n+}"},{"sha":"8761e888364f7541158a9660bc2022617f3d29f4","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/src/main/java/org/apache/syncope/ide/eclipse/plugin/editors/htmlhelpers/HTMLAutoEditStrategy.java","status":"modified","additions":275,"deletions":26,"changes":301,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FHTMLAutoEditStrategy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FHTMLAutoEditStrategy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FHTMLAutoEditStrategy.java?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -24,18 +24,13 @@\n import org.eclipse.jface.text.DefaultIndentLineAutoEditStrategy;\n import org.eclipse.jface.text.DocumentCommand;\n import org.eclipse.jface.text.IDocument;\n+import org.eclipse.jface.text.TextUtilities;\n \n public class HTMLAutoEditStrategy extends DefaultIndentLineAutoEditStrategy {\n \n     private String charset = System.getProperty(\"file.encoding\");\n-    protected boolean enable;\n \n     public HTMLAutoEditStrategy() {\n-        this.enable = true;\n-    }\n-\n-    public void setEnabled(final boolean enable) {\n-        this.enable = enable;\n     }\n \n     public void setFile(final IFile file) {\n@@ -47,31 +42,285 @@ public void setFile(final IFile file) {\n     }\n \n     public void customizeDocumentCommand(final IDocument d, final DocumentCommand c) {\n-        if (enable) {\n-            try {\n-                if (\"-\".equals(c.text) && c.offset >= 3 && d.get(c.offset - 3, 3).equals(\"<!-\")) {\n-                    c.text = \"-  -->\";\n-                    c.shiftsCaret = false;\n-                    c.caretOffset = c.offset + 2;\n-                    c.doit = false;\n-                    return;\n+        try {\n+            if (\"-\".equals(c.text) && c.offset >= 3 && d.get(c.offset - 3, 3).equals(\"<!-\")) {\n+                c.text = \"-  -->\";\n+                c.shiftsCaret = false;\n+                c.caretOffset = c.offset + 2;\n+                c.doit = false;\n+                return;\n+            } else if (\"[\".equals(c.text) && c.offset >= 2 && d.get(c.offset - 2, 2).equals(\"<!\")) {\n+                c.text = \"[CDATA[]]>\";\n+                c.shiftsCaret = false;\n+                c.caretOffset = c.offset + 7;\n+                c.doit = false;\n+                return;\n+            } else if (\"l\".equals(c.text) && c.offset >= 4 && d.get(c.offset - 4, 4).equals(\"<?xm\")) {\n+                c.text = \"l version = \\\"1.0\\\" encoding = \\\"\" + charset + \"\\\"?>\";\n+                return;\n+            } else if (c.length == 0 && c.text != null && endsWithDelimiter(d, c.text)) {\n+                smartIndentAfterNewLine(d, c);\n+            } else if (\"<\".equals(c.text)) { //$NON-NLS-1$\n+                smartInsertAfterBracket(d, c);\n+            }\n+        } catch (final BadLocationException e) {\n+            e.printStackTrace();\n+        }\n+        super.customizeDocumentCommand(d, c);\n+    }\n+\n+\n+    /**\n+     * Returns whether or not the given text ends with one of the documents legal line delimiters.\n+     *\n+     * @param d the document\n+     * @param txt the text\n+     * @return <code>true</code> if <code>txt</code> ends with one of the document's line delimiters,\n+     * <code>false</code> otherwise\n+     */\n+    private boolean endsWithDelimiter(final IDocument d, final String txt) {\n+        String[] delimiters = d.getLegalLineDelimiters();\n+        if (delimiters != null) {\n+            return TextUtilities.endsWith(delimiters, txt) > -1;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns the line number of the next bracket after end.\n+     *\n+     * @param document - the document being parsed\n+     * @param line - the line to start searching back from\n+     * @param end - the end position to search back from\n+     * @param closingBracketIncrease - the number of brackets to skip\n+     * @return the line number of the next matching bracket after end\n+     * @throws BadLocationException in case the line numbers are invalid in the document\n+     */\n+     protected int findMatchingOpenBracket(final IDocument document, final int linearg,\n+         final int endarg, final int closingBracketIncrease) throws BadLocationException {\n+\n+         int line = linearg;\n+         int end = endarg;\n+        int start = document.getLineOffset(line);\n+        int brackcount = getBracketCount(document, start, end, false) - closingBracketIncrease;\n+\n+        // sum up the brackets counts of each line (closing brackets count negative,\n+        // opening positive) until we find a line the brings the count to zero\n+        while (brackcount < 0) {\n+            line--;\n+            if (line < 0) {\n+                return -1;\n+            }\n+            start = document.getLineOffset(line);\n+            end = start + document.getLineLength(line) - 1;\n+            brackcount += getBracketCount(document, start, end, false);\n+        }\n+        return line;\n+    }\n+\n+    /**\n+     * Returns the bracket value of a section of text. Closing brackets have a value of -1 and\n+     * open brackets have a value of 1.\n+     *\n+     * @param document - the document being parsed\n+     * @param start - the start position for the search\n+     * @param end - the end position for the search\n+     * @param ignoreCloseBrackets - whether or not to ignore closing brackets in the count\n+     * @return the bracket value of a section of text\n+     * @throws BadLocationException in case the positions are invalid in the document\n+     */\n+     private int getBracketCount(final IDocument document, final int start, final int end,\n+         final boolean ignoreCloseBracketsarg) throws BadLocationException {\n+\n+         boolean ignoreCloseBrackets = ignoreCloseBracketsarg;\n+        int begin = start;\n+        int bracketcount = 0;\n+        while (begin < end) {\n+            char curr = document.getChar(begin);\n+            begin++;\n+            switch (curr) {\n+                case '/' :\n+                    if (begin < end) {\n+                        char next = document.getChar(begin);\n+                        if (next == '*') {\n+                            // a comment starts, advance to the comment end\n+                            begin = getCommentEnd(document, begin + 1, end);\n+                        } else if (next == '/') {\n+                            // '//'-comment: nothing to do anymore on this line\n+                            begin = end;\n+                        }\n+                    }\n+                    break;\n+                case '*' :\n+                    if (begin < end) {\n+                        char next = document.getChar(begin);\n+                        if (next == '/') {\n+                            // we have been in a comment: forget what we read before\n+                            bracketcount = 0;\n+                            begin++;\n+                        }\n+                    }\n+                    break;\n+                case '>' :\n+                    bracketcount++;\n+                    ignoreCloseBrackets = false;\n+                    break;\n+                case '<' :\n+                    if (!ignoreCloseBrackets) {\n+                        bracketcount--;\n+                    }\n+                    break;\n+                case '\"' :\n+                case '\\'' :\n+                    begin = getStringEnd(document, begin, end, curr);\n+                    break;\n+                default :\n+                    }\n+        }\n+        return bracketcount;\n+    }\n+\n+    /**\n+     * Returns the end position of a comment starting at the given <code>position</code>.\n+     *\n+     * @param document - the document being parsed\n+     * @param position - the start position for the search\n+     * @param end - the end position for the search\n+     * @return the end position of a comment starting at the given <code>position</code>\n+     * @throws BadLocationException in case <code>position</code> and <code>end</code> are invalid in the document\n+     */\n+     private int getCommentEnd(final IDocument document, final int position, final int end)\n+            throws BadLocationException {\n+        int currentPosition = position;\n+        while (currentPosition < end) {\n+            char curr = document.getChar(currentPosition);\n+            currentPosition++;\n+            if (curr == '*') {\n+                if (currentPosition < end && document.getChar(currentPosition) == '/') {\n+                    return currentPosition + 1;\n                 }\n-                if (\"[\".equals(c.text) && c.offset >= 2 && d.get(c.offset - 2, 2).equals(\"<!\")) {\n-                    c.text = \"[CDATA[]]>\";\n-                    c.shiftsCaret = false;\n-                    c.caretOffset = c.offset + 7;\n-                    c.doit = false;\n-                    return;\n+            }\n+        }\n+        return end;\n+    }\n+\n+    /**\n+     * Returns the content of the given line without the leading whitespace.\n+     *\n+     * @param document - the document being parsed\n+     * @param line - the line being searched\n+     * @return the content of the given line without the leading whitespace\n+     * @throws BadLocationException in case <code>line</code> is invalid in the document\n+     */\n+     protected String getIndentOfLine(final IDocument document, final int line)\n+            throws BadLocationException {\n+        if (line > -1) {\n+            int start = document.getLineOffset(line);\n+            int end = start + document.getLineLength(line) - 1;\n+            int whiteend = findEndOfWhiteSpace(document, start, end);\n+            return document.get(start, whiteend - start);\n+        }\n+        return \"\"; //$NON-NLS-1$\n+    }\n+\n+    /**\n+     * Returns the position of the <code>character</code> in the <code>document</code> after <code>position</code>.\n+     *\n+     * @param document - the document being parsed\n+     * @param position - the position to start searching from\n+     * @param end - the end of the document\n+     * @param character - the character you are trying to match\n+     * @return the next location of <code>character</code>\n+     * @throws BadLocationException in case <code>position</code> is invalid in the document\n+     */\n+     private int getStringEnd(final IDocument document, final int position, final int end,\n+         final char character) throws BadLocationException {\n+        int currentPosition = position;\n+        while (currentPosition < end) {\n+            char currentCharacter = document.getChar(currentPosition);\n+            currentPosition++;\n+            if (currentCharacter == '\\\\') {\n+                // ignore escaped characters\n+                currentPosition++;\n+            } else if (currentCharacter == character) {\n+                return currentPosition;\n+            }\n+        }\n+        return end;\n+    }\n+\n+    /**\n+     * Set the indent of a new line based on the command provided in the supplied document.\n+     * @param document - the document being parsed\n+     * @param command - the command being performed\n+     */\n+     protected void smartIndentAfterNewLine(final IDocument document, final DocumentCommand command) {\n+\n+        int docLength = document.getLength();\n+        if (command.offset == -1 || docLength == 0) {\n+            return;\n+        }\n+\n+        try {\n+            int p = (command.offset == docLength ? command.offset - 1 : command.offset);\n+            int line = document.getLineOfOffset(p);\n+\n+            StringBuilder buf = new StringBuilder(command.text);\n+            if (command.offset < docLength && document.getChar(command.offset) == '<') {\n+                int indLine = findMatchingOpenBracket(document, line, command.offset, 0);\n+                if (indLine == -1) {\n+                    indLine = line;\n                 }\n-                if (\"l\".equals(c.text) && c.offset >= 4 && d.get(c.offset - 4, 4).equals(\"<?xm\")) {\n-                    c.text = \"l version = \\\"1.0\\\" encoding = \\\"\" + charset + \"\\\"?>\";\n-                    return;\n+                buf.append(getIndentOfLine(document, indLine));\n+            } else {\n+                int start = document.getLineOffset(line);\n+                int whiteend = findEndOfWhiteSpace(document, start, command.offset);\n+                buf.append(document.get(start, whiteend - start));\n+                if (getBracketCount(document, start, command.offset, true) > 0) {\n+                    buf.append('\\t');\n                 }\n-            } catch (final BadLocationException e) {\n-                e.printStackTrace();\n             }\n+            command.text = buf.toString();\n+\n+        } catch (BadLocationException excp) {\n+            System.out.println(\"AutoIndent.error.bad_location_1\"); //$NON-NLS-1$\n         }\n-        super.customizeDocumentCommand(d, c);\n     }\n \n+    /**\n+     * Set the indent of a bracket based on the command provided in the supplied document.\n+     * @param document - the document being parsed\n+     * @param command - the command being performed\n+     */\n+     protected void smartInsertAfterBracket(final IDocument document, final DocumentCommand command) {\n+        if (command.offset == -1 || document.getLength() == 0) {\n+            return;\n+        }\n+\n+        try {\n+            int p = (command.offset == document.getLength() ? command.offset - 1 : command.offset);\n+            int line = document.getLineOfOffset(p);\n+            int start = document.getLineOffset(line);\n+            int whiteend = findEndOfWhiteSpace(document, start, command.offset);\n+\n+            // shift only when line does not contain any text up to the closing bracket\n+            if (whiteend == command.offset) {\n+                // evaluate the line with the opening bracket that matches out closing bracket\n+                int indLine = findMatchingOpenBracket(document, line, command.offset, 1);\n+                if (indLine != -1 && indLine != line) {\n+                    // take the indent of the found line\n+                    StringBuilder replaceText = new StringBuilder(getIndentOfLine(document, indLine));\n+                    // add the rest of the current line including the just added close bracket\n+                    replaceText.append(document.get(whiteend, command.offset - whiteend));\n+                    replaceText.append(command.text);\n+                    // modify document command\n+                    command.length = command.offset - start;\n+                    command.offset = start;\n+                    command.text = replaceText.toString();\n+                }\n+            }\n+        } catch (final BadLocationException excp) {\n+            System.out.println(\"AutoIndent.error.bad_location_2\"); //$NON-NLS-1$\n+        }\n+    }\n }"},{"sha":"44d2efc5983fa5657e4f71b0daf8d73d98975646","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/src/main/java/org/apache/syncope/ide/eclipse/plugin/editors/htmlhelpers/HTMLCompletionProcessor.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FHTMLCompletionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FHTMLCompletionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Feclipse%2Fplugin%2Feditors%2Fhtmlhelpers%2FHTMLCompletionProcessor.java?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -272,9 +272,16 @@ public ICompletionProposal[] computeCompletionProposals(final ITextViewer viewer\n                 if (word.equals(\"</\")) {\n                     length = 2;\n                 }\n-                list.add(new CompletionProposal(\n-                        assistKeyword, documentOffset - length, length,\n-                        assistKeyword.length()));\n+                String contentBefore = viewer.getDocument().get().substring(0, documentOffset - length);\n+                if (contentBefore.endsWith(\"\\t\")) {\n+                    list.add(new CompletionProposal(\n+                            assistKeyword, documentOffset - (length + 1), length + 1,\n+                            assistKeyword.length()));\n+                } else {\n+                    list.add(new CompletionProposal(\n+                            assistKeyword, documentOffset - length, length,\n+                            assistKeyword.length()));\n+                }\n             }\n         }\n "},{"sha":"d73d046eb828e3683459c140bc6c553469543347","filename":"ide/eclipse/bundles/org.apache.syncope.ide.eclipse.plugin/src/main/resources/HTMLEditor.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fresources%2FHTMLEditor.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/de3ab177f9efe093f84447a42851b1e07a69dc40/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fresources%2FHTMLEditor.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Feclipse%2Fbundles%2Forg.apache.syncope.ide.eclipse.plugin%2Fsrc%2Fmain%2Fresources%2FHTMLEditor.properties?ref=de3ab177f9efe093f84447a42851b1e07a69dc40","patch":"@@ -0,0 +1,21 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+AutoIndentlabel=Auto Indent\n+AutoIndenttooltip=Auto Format HTML content\n+AutoIndentdescription=Indentation and formatting of HTML content"}]}