{"sha":"d452cbb4ee5cb44110708ff2440a0aba9c5bdc35","node_id":"C_kwDOJfYA1toAKGQ0NTJjYmI0ZWU1Y2I0NDExMDcwOGZmMjQ0MGEwYWJhOWM1YmRjMzU","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-03-21T09:59:58Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-03-21T10:00:20Z"},"message":"Workaround for CXF-8680","tree":{"sha":"371a12aede08cefc3517a1b9363bb65317d8bbbc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/371a12aede08cefc3517a1b9363bb65317d8bbbc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"86d5fb729ff4612506e79f54b1c3ea9411f6b827","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/86d5fb729ff4612506e79f54b1c3ea9411f6b827","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/86d5fb729ff4612506e79f54b1c3ea9411f6b827"}],"stats":{"total":22,"additions":13,"deletions":9},"files":[{"sha":"5088e70b7dd9245cd232c796497c9b5b98e46350","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AbstractCSVSpec.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAbstractCSVSpec.java?ref=d452cbb4ee5cb44110708ff2440a0aba9c5bdc35","patch":"@@ -24,6 +24,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.DefaultValue;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n@@ -143,7 +144,7 @@ public T build() {\n \n     protected String nullValue = \"\";\n \n-    protected boolean allowComments;\n+    protected Boolean allowComments;\n \n     protected UnmatchingRule unmatchingRule = UnmatchingRule.PROVISION;\n \n@@ -236,11 +237,12 @@ public void setNullValue(final String nullValue) {\n     @Parameter(name = PARAM_ALLOWCOMMENTS, description = \"are hash comments, e.g. lines where the first non-whitespace \"\n             + \"character is '#' allowed? if so, they will be skipped without processing\", schema =\n             @Schema(implementation = boolean.class, defaultValue = \"false\"))\n-    public boolean isAllowComments() {\n-        return allowComments;\n+    public Boolean getAllowComments() {\n+        return allowComments == null ? Boolean.FALSE : allowComments;\n     }\n \n     @QueryParam(PARAM_ALLOWCOMMENTS)\n+    @DefaultValue(\"false\")\n     public void setAllowComments(final boolean allowComments) {\n         this.allowComments = allowComments;\n     }"},{"sha":"06d9a49aa16c2726577f5a7a3cb5afa8da0ff7bd","filename":"common/idm/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/CSVPullSpec.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPullSpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPullSpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FCSVPullSpec.java?ref=d452cbb4ee5cb44110708ff2440a0aba9c5bdc35","patch":"@@ -23,6 +23,7 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.DefaultValue;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n@@ -75,7 +76,7 @@ public Builder pullCorrelationRule(final String pullCorrelationRule) {\n \n     private Set<String> ignoreColumns = new HashSet<>();\n \n-    private boolean remediation;\n+    private Boolean remediation;\n \n     private ConflictResolutionAction conflictResolutionAction = ConflictResolutionAction.IGNORE;\n \n@@ -109,11 +110,12 @@ public void setIgnoreColumns(final Set<String> ignoreColumns) {\n         this.ignoreColumns = ignoreColumns;\n     }\n \n-    public boolean isRemediation() {\n-        return remediation;\n+    public Boolean getRemediation() {\n+        return remediation == null ? Boolean.FALSE : remediation;\n     }\n \n     @QueryParam(\"remediation\")\n+    @DefaultValue(\"false\")\n     public void setRemediation(final boolean remediation) {\n         this.remediation = remediation;\n     }"},{"sha":"ef107f7820fec78aae05ecbc589937d07a34466b","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=d452cbb4ee5cb44110708ff2440a0aba9c5bdc35","patch":"@@ -528,7 +528,7 @@ protected CsvSchema.Builder csvSchema(final AbstractCSVSpec spec) {\n                 setQuoteChar(spec.getQuoteChar()).\n                 setLineSeparator(spec.getLineSeparator()).\n                 setNullValue(spec.getNullValue()).\n-                setAllowComments(spec.isAllowComments());\n+                setAllowComments(spec.getAllowComments());\n         if (spec.getEscapeChar() != null) {\n             schemaBuilder.setEscapeChar(spec.getEscapeChar());\n         }\n@@ -661,7 +661,7 @@ public List<ProvisioningReport> pull(final CSVPullSpec spec, final InputStream c\n \n         PullTaskTO pullTask = new PullTaskTO();\n         pullTask.setDestinationRealm(spec.getDestinationRealm());\n-        pullTask.setRemediation(spec.isRemediation());\n+        pullTask.setRemediation(spec.getRemediation());\n         pullTask.setMatchingRule(spec.getMatchingRule());\n         pullTask.setUnmatchingRule(spec.getUnmatchingRule());\n         pullTask.getActions().addAll(spec.getProvisioningActions());"},{"sha":"7ad2241a705736a0182d8191fd83588ebbd3345e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/InboundMatcher.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d452cbb4ee5cb44110708ff2440a0aba9c5bdc35/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FInboundMatcher.java?ref=d452cbb4ee5cb44110708ff2440a0aba9c5bdc35","patch":"@@ -389,7 +389,7 @@ public List<PullMatch> match(final SyncDelta syncDelta, final Provision provisio\n                 }\n             }\n         } catch (RuntimeException e) {\n-            LOG.error(\"Could not match {} with any existing {}\", syncDelta, provision.getAnyType(), e);\n+            LOG.error(\"Could not match {} with any existing {}\", syncDelta, provision.getAnyType().getKey(), e);\n         }\n \n         if (result.size() == 1 && result.get(0).getMatchTarget() == MatchType.ANY) {"}]}