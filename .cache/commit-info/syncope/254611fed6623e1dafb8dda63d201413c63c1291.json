{"sha":"254611fed6623e1dafb8dda63d201413c63c1291","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI1NDYxMWZlZDY2MjNlMWRhZmI4ZGRhNjNkMjAxNDEzYzYzYzEyOTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-30T10:46:20Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-01-30T10:48:20Z"},"message":"[SYNCOPE-1531] Attempt to keep column order as requested","tree":{"sha":"74a12d30e1dece9a1a6a52abf6942976901765c8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/74a12d30e1dece9a1a6a52abf6942976901765c8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/254611fed6623e1dafb8dda63d201413c63c1291","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/254611fed6623e1dafb8dda63d201413c63c1291","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/254611fed6623e1dafb8dda63d201413c63c1291","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/254611fed6623e1dafb8dda63d201413c63c1291/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1578ba679a81216532d526c1f9b7d7b1c0a9807d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1578ba679a81216532d526c1f9b7d7b1c0a9807d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1578ba679a81216532d526c1f9b7d7b1c0a9807d"}],"stats":{"total":31,"additions":24,"deletions":7},"files":[{"sha":"ec5976f3fb371c701e02c8f113ee1315a78fbe0c","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/254611fed6623e1dafb8dda63d201413c63c1291/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/254611fed6623e1dafb8dda63d201413c63c1291/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=254611fed6623e1dafb8dda63d201413c63c1291","patch":"@@ -478,7 +478,8 @@ public List<ProvisioningReport> push(\n                 spec.getArrayElementSeparator(),\n                 csvSchema(spec),\n                 null,\n-                os)) {\n+                os,\n+                columns.toArray(new String[columns.size()]))) {\n \n             return streamPushExecutor.push(\n                     anyType,"},{"sha":"a1e04efbceb645d0d32acc024bd5ecbbffcabe86","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/CSVStreamConnector.java","status":"modified","additions":22,"deletions":6,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/254611fed6623e1dafb8dda63d201413c63c1291/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/254611fed6623e1dafb8dda63d201413c63c1291/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FCSVStreamConnector.java?ref=254611fed6623e1dafb8dda63d201413c63c1291","patch":"@@ -26,7 +26,7 @@\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.ArrayList;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -69,6 +69,8 @@ public class CSVStreamConnector implements Connector, AutoCloseable {\n \n     private final OutputStream out;\n \n+    private final List<String> columns;\n+\n     private MappingIterator<Map<String, String>> reader;\n \n     private SequenceWriter writer;\n@@ -78,13 +80,15 @@ public CSVStreamConnector(\n             final String arrayElementsSeparator,\n             final CsvSchema.Builder schemaBuilder,\n             final InputStream in,\n-            final OutputStream out) {\n+            final OutputStream out,\n+            final String... columns) {\n \n         this.keyColumn = keyColumn;\n         this.arrayElementsSeparator = arrayElementsSeparator;\n         this.schemaBuilder = schemaBuilder;\n         this.in = in;\n         this.out = out;\n+        this.columns = List.of(columns);\n     }\n \n     @Override\n@@ -107,13 +111,13 @@ public MappingIterator<Map<String, String>> reader() throws IOException {\n     }\n \n     public List<String> getColumns(final CSVPullSpec spec) throws IOException {\n-        List<String> columns = new ArrayList<>();\n+        List<String> fromSpec = new ArrayList<>();\n         ((CsvSchema) reader().getParserSchema()).forEach(column -> {\n             if (!spec.getIgnoreColumns().contains(column.getName())) {\n-                columns.add(column.getName());\n+                fromSpec.add(column.getName());\n             }\n         });\n-        return columns;\n+        return fromSpec;\n     }\n \n     public SequenceWriter writer() throws IOException {\n@@ -145,11 +149,23 @@ public Uid create(\n         synchronized (schemaBuilder) {\n             if (schemaBuilder.size() == 0) {\n                 attrs.stream().filter(attr -> !AttributeUtil.isSpecial(attr)).map(Attribute::getName).\n+                        sorted((c1, c2) -> {\n+                            // sort according to the passed columns, leave any additional column at the end\n+                            int index1 = columns.indexOf(c1);\n+                            if (index1 == -1) {\n+                                index1 = Integer.MAX_VALUE;\n+                            }\n+                            int index2 = columns.indexOf(c2);\n+                            if (index2 == -1) {\n+                                index2 = Integer.MAX_VALUE;\n+                            }\n+                            return Integer.compare(index1, index2);\n+                        }).\n                         forEachOrdered(schemaBuilder::addColumn);\n             }\n         }\n \n-        Map<String, String> row = new HashMap<>();\n+        Map<String, String> row = new LinkedHashMap<>();\n         attrs.stream().filter(attr -> !AttributeUtil.isSpecial(attr)).forEach(attr -> {\n             if (CollectionUtils.isEmpty(attr.getValue()) || attr.getValue().get(0) == null) {\n                 row.put(attr.getName(), null);"}]}