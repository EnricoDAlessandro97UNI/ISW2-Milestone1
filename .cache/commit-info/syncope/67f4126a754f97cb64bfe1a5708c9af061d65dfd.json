{"sha":"67f4126a754f97cb64bfe1a5708c9af061d65dfd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY3ZjQxMjZhNzU0Zjk3Y2I2NGJmZTFhNTcwOGM5YWYwNjFkNjVkZmQ=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-09T14:48:55Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-09T14:48:55Z"},"message":"More readable user search (still working, I hope ;-))\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246692 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80cc48b9824e8633857090390b5b8aea9213f73b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/80cc48b9824e8633857090390b5b8aea9213f73b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/67f4126a754f97cb64bfe1a5708c9af061d65dfd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/67f4126a754f97cb64bfe1a5708c9af061d65dfd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/67f4126a754f97cb64bfe1a5708c9af061d65dfd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/67f4126a754f97cb64bfe1a5708c9af061d65dfd/comments","author":null,"committer":null,"parents":[{"sha":"ae66d6082ed3f5c391f26e16c8e47db693423e01","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ae66d6082ed3f5c391f26e16c8e47db693423e01","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ae66d6082ed3f5c391f26e16c8e47db693423e01"}],"stats":{"total":205,"additions":83,"deletions":122},"files":[{"sha":"205cb5d62e0a1cbb6f8588220812cf3021f4adcd","filename":"client/src/main/java/org/syncope/client/search/NodeCond.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f4126a754f97cb64bfe1a5708c9af061d65dfd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f4126a754f97cb64bfe1a5708c9af061d65dfd/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fsearch%2FNodeCond.java?ref=67f4126a754f97cb64bfe1a5708c9af061d65dfd","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -21,11 +21,16 @@ public class NodeCond extends AbstractBaseBean {\n     public enum Type {\n \n         LEAF, NOT_LEAF, AND, OR\n+\n     }\n     private Type type;\n+\n     private AttributeCond attributeCond;\n+\n     private MembershipCond membershipCond;\n+\n     private NodeCond leftNodeCond;\n+\n     private NodeCond rightNodeCond;\n \n     public static NodeCond getLeafCond(final AttributeCond attributeCond) {"},{"sha":"dfbba3296c5d92c1da375ed1216812e2ccf7f136","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":52,"deletions":107,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=67f4126a754f97cb64bfe1a5708c9af061d65dfd","patch":"@@ -27,6 +27,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.client.search.AttributeCond;\n+import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n import org.syncope.core.persistence.beans.membership.Membership;\n@@ -282,138 +283,82 @@ private List<SyncopeUser> doSearch(\n \n     private Criteria getCriteria(final NodeCond leafCond) {\n         Session hibernateSess = (Session) entityManager.getDelegate();\n-        Criteria baseCriteria = hibernateSess.createCriteria(SyncopeUser.class);\n+        Criteria criteria = hibernateSess.createCriteria(SyncopeUser.class);\n+        criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n \n         if (leafCond.getMembershipCond() != null) {\n-            baseCriteria = baseCriteria.createAlias(\"memberships\", \"m\").\n+            criteria = criteria.createAlias(\"memberships\", \"m\").\n                     createAlias(\"m.syncopeRole\", \"r\");\n+\n+            criteria.add(getCriterion(leafCond.getMembershipCond(),\n+                    leafCond.getType()));\n         }\n+\n         USchema schema = null;\n         if (leafCond.getAttributeCond() != null) {\n-            schema = schemaDAO.find(\n-                    leafCond.getAttributeCond().getSchema(),\n+            schema = schemaDAO.find(leafCond.getAttributeCond().getSchema(),\n                     USchema.class);\n             if (schema == null) {\n                 LOG.warn(\"Ignoring invalid schema '{}'\",\n                         leafCond.getAttributeCond().getSchema());\n             } else {\n-                baseCriteria = baseCriteria.createAlias(\"attributes\", \"a\");\n+                criteria = criteria.createAlias(\"attributes\", \"a\");\n                 if (schema.isUniqueConstraint()) {\n-                    baseCriteria =\n-                            baseCriteria.createAlias(\"a.uniqueValue\", \"av\");\n+                    criteria = criteria.createAlias(\"a.uniqueValue\", \"av\");\n                 } else {\n-                    baseCriteria =\n-                            baseCriteria.createAlias(\"a.values\", \"av\");\n+                    criteria = criteria.createAlias(\"a.values\", \"av\");\n                 }\n+\n+                criteria.add(getCriterion(leafCond.getAttributeCond(),\n+                        leafCond.getType(), schema));\n             }\n         }\n \n-        baseCriteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);\n-\n-        return baseCriteria.add(getCriterion(schema, leafCond));\n+        return criteria;\n     }\n \n-    private Criterion getCriterion(final USchema schema,\n-            final NodeCond leafCond) {\n+    private Criterion getCriterion(final MembershipCond cond,\n+            final NodeCond.Type nodeCondType) {\n \n         Criterion criterion = null;\n \n-        switch (leafCond.getType()) {\n-            case LEAF:\n-                if (leafCond.getMembershipCond() != null) {\n-                    if (leafCond.getMembershipCond().getRoleId() != null) {\n-                        criterion = Restrictions.eq(\"r.id\",\n-                                leafCond.getMembershipCond().getRoleId());\n-                    }\n-                    if (leafCond.getMembershipCond().getRoleName() != null) {\n-                        criterion = Restrictions.eq(\"r.name\",\n-                                leafCond.getMembershipCond().getRoleName());\n-                    }\n-                }\n-                if (leafCond.getAttributeCond() != null && schema != null) {\n-                    UAttrValue attrValue = new UAttrValue();\n-                    try {\n-                        if (leafCond.getAttributeCond().getType()\n-                                == AttributeCond.Type.LIKE) {\n-\n-                            attrValue.setStringValue(\n-                                    leafCond.getAttributeCond().\n-                                    getExpression());\n-                        } else {\n-                            attrValue =\n-                                    schema.getValidator().\n-                                    getValue(\n-                                    leafCond.getAttributeCond().\n-                                    getExpression(),\n-                                    attrValue);\n-                        }\n-\n-                        criterion = Restrictions.and(\n-                                Restrictions.eq(\"a.schema.name\",\n-                                schema.getName()),\n-                                getCriterion(\n-                                leafCond.getAttributeCond().getType(),\n-                                attrValue));\n-                    } catch (ValidationException e) {\n-                        LOG.error(\"Could not validate expression '\"\n-                                + leafCond.getAttributeCond().\n-                                getExpression() + \"'\", e);\n-                    }\n-                }\n+        if (cond.getRoleId() != null) {\n+            criterion = Restrictions.eq(\"r.id\", cond.getRoleId());\n+        }\n+        if (cond.getRoleName() != null) {\n+            criterion = Restrictions.eq(\"r.name\", cond.getRoleName());\n+        }\n \n-                break;\n+        if (nodeCondType == NodeCond.Type.NOT_LEAF) {\n+            criterion = Restrictions.not(criterion);\n+        }\n \n-            case NOT_LEAF:\n-                \n-                final AttributeCond attributeCondition =\n-                        leafCond.getAttributeCond();\n-\n-                if (attributeCondition != null) {\n-                    if (schema == null) {\n-                        LOG.warn(\"Ignoring invalid schema '\"\n-                                + leafCond.getAttributeCond().getSchema()\n-                                + \"'\");\n-                    } else {\n-                        UAttrValue attributeValue = new UAttrValue();\n-                        try {\n-                            if (leafCond.getAttributeCond().getType()\n-                                    == AttributeCond.Type.LIKE) {\n-\n-                                attributeValue.setStringValue(\n-                                        leafCond.getAttributeCond().\n-                                        getExpression());\n-                            } else {\n-                                attributeValue =\n-                                        schema.getValidator().\n-                                        getValue(\n-                                        leafCond.getAttributeCond().\n-                                        getExpression(),\n-                                        attributeValue);\n-                            }\n-\n-                            criterion = Restrictions.and(\n-                                    Restrictions.eq(\"a.schema.name\",\n-                                    leafCond.getAttributeCond().getSchema()),\n-                                    Restrictions.not(getCriterion(\n-                                    leafCond.getAttributeCond().getType(),\n-                                    attributeValue)));\n-\n-                            // if user doesn't have the attribute it won't be returned\n-\n-                        } catch (ValidationException e) {\n-                            LOG.error(\"Could not validate expression '\"\n-                                    + leafCond.getAttributeCond().\n-                                    getExpression() + \"'\", e);\n-                        }\n-                    }\n-                } else {\n-                    leafCond.setType(NodeCond.Type.LEAF);\n-                    criterion = Restrictions.not(\n-                            getCriterion(schema, leafCond));\n-                }\n-                break;\n+        return criterion;\n+    }\n \n-            default:\n+    private Criterion getCriterion(final AttributeCond cond,\n+            final NodeCond.Type nodeCondType, final USchema schema) {\n+\n+        Criterion criterion = null;\n+\n+        UAttrValue attrValue = new UAttrValue();\n+        try {\n+            if (cond.getType() == AttributeCond.Type.LIKE) {\n+                attrValue.setStringValue(cond.getExpression());\n+            } else {\n+                attrValue = schema.getValidator().\n+                        getValue(cond.getExpression(), attrValue);\n+            }\n+\n+            criterion = Restrictions.and(\n+                    Restrictions.eq(\"a.schema.name\", schema.getName()),\n+                    nodeCondType == NodeCond.Type.LEAF\n+                    ? getCriterion(cond.getType(), attrValue)\n+                    : Restrictions.not(\n+                    getCriterion(cond.getType(), attrValue)));\n+        } catch (ValidationException e) {\n+            LOG.error(\"Could not validate expression '\"\n+                    + cond.getExpression() + \"'\", e);\n         }\n \n         return criterion;"},{"sha":"c4a1d3a53c08e5cbf63a520a0422b792a695fe9d","filename":"core/src/test/java/org/syncope/core/persistence/dao/AttributeTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributeTest.java?ref=67f4126a754f97cb64bfe1a5708c9af061d65dfd","patch":"@@ -46,7 +46,7 @@ public class AttributeTest extends AbstractTest {\n     public final void findAll() {\n         List<UAttr> list = attributeDAO.findAll(UAttr.class);\n         assertEquals(\"did not get expected number of attributes \",\n-                7, list.size());\n+                8, list.size());\n     }\n \n     @Test"},{"sha":"1e00f2d90555d9a76a8f20c97b0b80aa40dc9432","filename":"core/src/test/java/org/syncope/core/persistence/dao/RoleTest.java","status":"renamed","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=67f4126a754f97cb64bfe1a5708c9af061d65dfd","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -21,11 +21,10 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n-public class SyncopeRoleTest extends AbstractTest {\n+public class RoleTest extends AbstractTest {\n \n     @Autowired\n     private SyncopeRoleDAO syncopeRoleDAO;","previous_filename":"core/src/test/java/org/syncope/core/persistence/dao/SyncopeRoleTest.java"},{"sha":"5f0534fdc37266dca9985e8298bcefcaa10834de","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"renamed","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=67f4126a754f97cb64bfe1a5708c9af061d65dfd","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,9 +14,11 @@\n  */\n package org.syncope.core.persistence.dao;\n \n+import java.util.HashSet;\n import static org.junit.Assert.*;\n \n import java.util.List;\n+import java.util.Set;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -28,7 +30,7 @@\n import org.syncope.core.persistence.beans.user.UAttrValue;\n \n @Transactional\n-public class SyncopeUserTest extends AbstractTest {\n+public class UserTest extends AbstractTest {\n \n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n@@ -141,9 +143,13 @@ public final void searchWithNotCondition() {\n \n         final List<SyncopeUser> users = syncopeUserDAO.search(cond);\n         assertNotNull(users);\n-        assertEquals(1, users.size());\n+        assertEquals(2, users.size());\n \n-        assertEquals(Long.valueOf(1L), users.get(0).getId());\n+        Set<Long> ids = new HashSet<Long>(2);\n+        ids.add(users.get(0).getId());\n+        ids.add(users.get(1).getId());\n+        assertTrue(ids.contains(1L));\n+        assertTrue(ids.contains(4L));\n     }\n \n     @Test","previous_filename":"core/src/test/java/org/syncope/core/persistence/dao/SyncopeUserTest.java"},{"sha":"748aa2f2c11d3d32ebc1f32d6b563564d6f81ae5","filename":"core/src/test/java/org/syncope/core/persistence/relationships/UserTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FUserTest.java?ref=67f4126a754f97cb64bfe1a5708c9af061d65dfd","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -34,12 +34,16 @@ public class UserTest extends AbstractTest {\n \n     @Autowired\n     private SyncopeUserDAO syncopeUserDAO;\n+\n     @Autowired\n     private SyncopeRoleDAO syncopeRoleDAO;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n+\n     @Autowired\n     private AttributeDAO attributeDAO;\n+\n     @Autowired\n     private AttributeValueDAO attributeValueDAO;\n "},{"sha":"dc587d7bfa7060c052de33501e9f486517156535","filename":"core/src/test/resources/content.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f4126a754f97cb64bfe1a5708c9af061d65dfd/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=67f4126a754f97cb64bfe1a5708c9af061d65dfd","patch":"@@ -107,6 +107,7 @@\n     <UAttr id=\"500\" owner_id=\"3\" schema_name=\"surname\"/>\n     <UAttr id=\"550\" owner_id=\"4\" schema_name=\"loginDate\"/>\n     <UAttr id=\"560\" owner_id=\"4\" schema_name=\"cool\"/>\n+    <UAttr id=\"570\" owner_id=\"4\" schema_name=\"username\"/>\n \n     <RAttr id=\"600\" owner_id=\"1\" schema_name=\"icon\"/>\n     <RAttr id=\"700\" owner_id=\"2\" schema_name=\"icon\"/>\n@@ -117,7 +118,8 @@\n     <MAttr id=\"1000\" owner_id=\"4\" schema_name=\"subscriptionDate\"/>\n \n     <UAttrUniqueValue id=\"10\" attribute_id=\"100\" schema_name=\"username\" stringValue=\"chicchiricco\"/>\n-    <UAttrUniqueValue id=\"11\"  attribute_id=\"300\" schema_name=\"username\" stringValue=\"fabio.martelli\"/>\n+    <UAttrUniqueValue id=\"11\" attribute_id=\"300\" schema_name=\"username\" stringValue=\"fabio.martelli\"/>\n+    <UAttrUniqueValue id=\"12\" attribute_id=\"570\" schema_name=\"username\" stringValue=\"john.doe\"/>\n \n     <UAttrValue attribute_id=\"200\" id=\"20\" dateValue=\"2009-05-26\"/>\n     <UAttrValue attribute_id=\"200\" id=\"21\" dateValue=\"2010-05-26 15:40:04\"/>"}]}