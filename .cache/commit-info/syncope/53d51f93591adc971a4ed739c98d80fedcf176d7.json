{"sha":"53d51f93591adc971a4ed739c98d80fedcf176d7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUzZDUxZjkzNTkxYWRjOTcxYTRlZDczOWM5OGQ4MGZlZGNmMTc2ZDc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-13T14:02:22Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-13T14:02:22Z"},"message":"Update issue 238\nWorking with PostgreSQL, MySQL and Oracle\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/0_8_X_ASL@1247327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5ff091d803406c87678a6c01fa474b22852210e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a5ff091d803406c87678a6c01fa474b22852210e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/53d51f93591adc971a4ed739c98d80fedcf176d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/53d51f93591adc971a4ed739c98d80fedcf176d7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/53d51f93591adc971a4ed739c98d80fedcf176d7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/53d51f93591adc971a4ed739c98d80fedcf176d7/comments","author":null,"committer":null,"parents":[{"sha":"62f92761823c1587808687364b4d8e7ab2b3238c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62f92761823c1587808687364b4d8e7ab2b3238c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62f92761823c1587808687364b4d8e7ab2b3238c"}],"stats":{"total":216,"additions":167,"deletions":49},"files":[{"sha":"fdcc98351b27bf346d5428a622a78a9e8db84172","filename":"TODO","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/TODO","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/TODO","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/TODO?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -4,13 +4,10 @@\n \n =core=\n \n-* postgres-it\n-* mysql-it\n-* oracle-it\n-* notification test\n * redirect OpenJPA plugin log somewhere\n * verify Clob behavior on PostgreSQL (requires external deploy and restart)\n * 2nd level cache\n * statistics?\n * WARNING: javax.persistence.cache.retrieveMode\" is not a supported query hint. May be you meant \"javax.persistence.lock.timeout\"?\n * WARN   [pool-2-thread-1] openjpa.Runtime - An error occurred while registering a ClassTransformer with PersistenceUnitInfo: name 'syncopePersistenceUnit', root URL [file:/home/ilgrosso/work/syncope-ASL/core/target/cargo/configurations/tomcat7x/webapps/syncope/WEB-INF/classes/]. The error has been consumed. To see it, set your openjpa.Runtime log level to TRACE. Load-time class transformation will not be available.\n+* WARN   [pool-2-thread-1] openjpa.Runtime - An error occurred while registering a ClassTransformer with PersistenceUnitInfo: name 'syncopePersistenceUnit', root URL [file:/home/ilgrosso/work/syncope-ASL/core/target/cargo/configurations/tomcat7x/webapps/syncope/WEB-INF/classes/]. The error has been consumed. To see it, set your openjpa.Runtime log level to TRACE. Load-time class transformation will not be available."},{"sha":"923601f161169e97a4fda9a5d1763306969af544","filename":"client/src/main/java/org/syncope/client/SyncopeConstants.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2FSyncopeConstants.java?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -19,7 +19,9 @@ public class SyncopeConstants {\n         \"yyyy-MM-dd'T'HH:mm:ssZ\",\n         \"EEE, dd MMM yyyy HH:mm:ss z\",\n         \"yyyy-MM-dd'T'HH:mm:ssz\",\n-        \"yyyy-MM-dd HH:mm:ss\"};\n+        \"yyyy-MM-dd HH:mm:ss\",\n+        \"yyyy-MM-dd\"};\n \n     public static String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n+\n }"},{"sha":"757df4a97e67c6caae2cc5f5e5525bffe3beb640","filename":"core/src/main/java/org/syncope/core/util/ImportExport.java","status":"modified","additions":157,"deletions":33,"changes":190,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FImportExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FImportExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Futil%2FImportExport.java?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -21,25 +21,33 @@\n import java.sql.ResultSet;\n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.text.ParseException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n+import javax.persistence.TemporalType;\n import javax.sql.DataSource;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.TransformerConfigurationException;\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n+import org.apache.commons.lang.time.DateUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.stereotype.Component;\n+import org.syncope.client.SyncopeConstants;\n import org.syncope.core.util.multiparent.CycleInMultiParentTreeException;\n import org.syncope.core.util.multiparent.MultiParentNode;\n import org.syncope.core.util.multiparent.MultiParentNodeOp;\n@@ -65,6 +73,150 @@ public class ImportExport extends DefaultHandler {\n     @Autowired\n     private DataSource dataSource;\n \n+    private String readSchema() {\n+        String schema = null;\n+\n+        InputStream dbPropsStream = null;\n+        try {\n+            dbPropsStream = getClass().getResourceAsStream(\n+                    \"/persistence.properties\");\n+            Properties dbProps = new Properties();\n+            dbProps.load(dbPropsStream);\n+            schema = dbProps.getProperty(\"database.schema\");\n+        } catch (Throwable t) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Could not find persistence.properties\", t);\n+            } else {\n+                LOG.error(\"Could not find persistence.properties\");\n+            }\n+        } finally {\n+            if (dbPropsStream != null) {\n+                try {\n+                    dbPropsStream.close();\n+                } catch (IOException e) {\n+                    LOG.error(\"While trying to read persistence.properties\", e);\n+                }\n+            }\n+        }\n+\n+        return schema;\n+    }\n+\n+    private void setParameters(final String tableName, final Attributes atts,\n+            final Query query) {\n+\n+        Map<String, Integer> colTypes = new HashMap<String, Integer>();\n+\n+        Connection conn = DataSourceUtils.getConnection(dataSource);\n+        ResultSet rs = null;\n+        Statement stmt = null;\n+        try {\n+            stmt = conn.createStatement();\n+            rs = stmt.executeQuery(\"SELECT * FROM \" + tableName);\n+            for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {\n+                colTypes.put(\n+                        rs.getMetaData().getColumnName(i + 1).toUpperCase(),\n+                        rs.getMetaData().getColumnType(i + 1));\n+            }\n+        } catch (SQLException e) {\n+            LOG.error(\"While\", e);\n+        } finally {\n+            if (stmt != null) {\n+                try {\n+                    stmt.close();\n+                } catch (SQLException e) {\n+                    LOG.error(\"While closing statement\", e);\n+                }\n+            }\n+            if (rs != null) {\n+                try {\n+                    rs.close();\n+                } catch (SQLException e) {\n+                    LOG.error(\"While closing result set\", e);\n+                }\n+            }\n+            DataSourceUtils.releaseConnection(conn, dataSource);\n+        }\n+\n+        for (int i = 0; i < atts.getLength(); i++) {\n+            Integer colType = colTypes.get(atts.getQName(i).toUpperCase());\n+            if (colType == null) {\n+                LOG.warn(\"No column type found for {}\",\n+                        atts.getQName(i).toUpperCase());\n+                colType = Types.VARCHAR;\n+            }\n+\n+            switch (colType) {\n+                case Types.NUMERIC:\n+                case Types.REAL:\n+                case Types.INTEGER:\n+                case Types.TINYINT:\n+                    try {\n+                        query.setParameter(i + 1,\n+                                Integer.valueOf(atts.getValue(i)));\n+                    } catch (NumberFormatException e) {\n+                        LOG.error(\"Unparsable Integer '{}'\", atts.getValue(i));\n+                        query.setParameter(i + 1, atts.getValue(i));\n+                    }\n+                    break;\n+\n+                case Types.DECIMAL:\n+                case Types.BIGINT:\n+                    try {\n+                        query.setParameter(i + 1,\n+                                Long.valueOf(atts.getValue(i)));\n+                    } catch (NumberFormatException e) {\n+                        LOG.error(\"Unparsable Long '{}'\", atts.getValue(i));\n+                        query.setParameter(i + 1, atts.getValue(i));\n+                    }\n+                    break;\n+\n+                case Types.DOUBLE:\n+                    try {\n+                        query.setParameter(i + 1,\n+                                Double.valueOf(atts.getValue(i)));\n+                    } catch (NumberFormatException e) {\n+                        LOG.error(\"Unparsable Double '{}'\", atts.getValue(i));\n+                        query.setParameter(i + 1, atts.getValue(i));\n+                    }\n+                    break;\n+\n+                case Types.FLOAT:\n+                    try {\n+                        query.setParameter(i + 1,\n+                                Float.valueOf(atts.getValue(i)));\n+                    } catch (NumberFormatException e) {\n+                        LOG.error(\"Unparsable Float '{}'\", atts.getValue(i));\n+                        query.setParameter(i + 1, atts.getValue(i));\n+                    }\n+                    break;\n+\n+                case Types.DATE:\n+                case Types.TIME:\n+                case Types.TIMESTAMP:\n+                    try {\n+                        query.setParameter(i + 1,\n+                                DateUtils.parseDate(atts.getValue(i),\n+                                SyncopeConstants.DATE_PATTERNS),\n+                                TemporalType.TIMESTAMP);\n+                    } catch (ParseException e) {\n+                        LOG.error(\"Unparsable Date '{}'\", atts.getValue(i));\n+                        query.setParameter(i + 1, atts.getValue(i));\n+                    }\n+                    break;\n+\n+                case Types.BIT:\n+                case Types.BOOLEAN:\n+                    query.setParameter(i + 1, \"1\".equals(atts.getValue(i))\n+                            ? Boolean.TRUE : Boolean.FALSE);\n+                    break;\n+\n+                default:\n+                    query.setParameter(i + 1, atts.getValue(i));\n+            }\n+        }\n+    }\n+\n     @Override\n     public void startElement(final String uri, final String localName,\n             final String qName, final Attributes atts)\n@@ -91,9 +243,7 @@ public void startElement(final String uri, final String localName,\n         queryString.append(\") VALUES (\").append(values).append(')');\n \n         Query query = entityManager.createNativeQuery(queryString.toString());\n-        for (int i = 0; i < atts.getLength(); i++) {\n-            query.setParameter(i + 1, atts.getValue(i));\n-        }\n+        setParameters(qName, atts, query);\n         query.executeUpdate();\n     }\n \n@@ -142,7 +292,7 @@ private void doExportTable(final TransformerHandler handler,\n     }\n \n     private List<String> sortByForeignKeys(final Connection conn,\n-            final String schema, final Set<String> tableNames)\n+            final Set<String> tableNames)\n             throws SQLException, CycleInMultiParentTreeException {\n \n         MultiParentNode<String> root =\n@@ -156,11 +306,10 @@ private List<String> sortByForeignKeys(final Connection conn,\n                 root.addChild(node);\n             }\n \n-            // manca lo schema - per Oracle\n             ResultSet rs = null;\n             try {\n-                rs = conn.getMetaData().\n-                        getExportedKeys(conn.getCatalog(), schema, tableName);\n+                rs = conn.getMetaData().getExportedKeys(\n+                        conn.getCatalog(), readSchema(), tableName);\n                 while (rs.next()) {\n                     String fkTableName = rs.getString(\"FKTABLE_NAME\");\n                     if (!tableName.equals(fkTableName)) {\n@@ -196,31 +345,6 @@ public void export(final OutputStream os)\n             throws SAXException, TransformerConfigurationException,\n             CycleInMultiParentTreeException {\n \n-        // 0. read persistence.properties (for database schema)\n-        InputStream dbPropsStream = null;\n-        String dbSchema = null;\n-        try {\n-            dbPropsStream = getClass().getResourceAsStream(\n-                    \"/persistence.properties\");\n-            Properties dbProps = new Properties();\n-            dbProps.load(dbPropsStream);\n-            dbSchema = dbProps.getProperty(\"database.schema\");\n-        } catch (Throwable t) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Could not find persistence.properties\", t);\n-            } else {\n-                LOG.error(\"Could not find persistence.properties\");\n-            }\n-        } finally {\n-            if (dbPropsStream != null) {\n-                try {\n-                    dbPropsStream.close();\n-                } catch (IOException e) {\n-                    LOG.error(\"While trying to read persistence.properties\", e);\n-                }\n-            }\n-        }\n-\n         StreamResult streamResult = new StreamResult(os);\n         SAXTransformerFactory transformerFactory =\n                 (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n@@ -251,7 +375,7 @@ public void export(final OutputStream os)\n             }\n             // then sort tables based on foreign keys and dump\n             for (String tableName :\n-                    sortByForeignKeys(conn, dbSchema, tableNames)) {\n+                    sortByForeignKeys(conn, tableNames)) {\n \n                 doExportTable(handler, conn, tableName);\n             }"},{"sha":"e643f3b028c6cfb546898dbdf88eeae13301c70f","filename":"core/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -10,15 +10,9 @@\n #  See the License for the specific language governing permissions and\n #  limitations under the License.\n jpa.driverClassName=org.postgresql.Driver\n-#jpa.driverClassName=oracle.jdbc.driver.OracleDriver\n jpa.url=jdbc:postgresql://localhost:5432/syncope\n-#jpa.url=jdbc:oracle:thin:@localhost:1521:orcl\n jpa.username=syncope\n jpa.password=syncope\n-jpa.dialect=org.hibernate.dialect.PostgreSQLDialect\n-#jpa.dialect=org.hibernate.dialect.Oracle10gDialect\n+jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n-#quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n quartz.sql=tables_postgres.sql\n-#quartz.sql=tables_oracle.sql\n-#database.schema=SYNCOPE"},{"sha":"6a99ff9ab2b71c3f6f4e443557813fc281b5464b","filename":"core/src/test/notifications/java/org/syncope/core/notification/NotificationTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fnotifications%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -272,6 +272,7 @@ public void notifyByMail() {\n         }\n \n         confDAO.flush();\n+        confDAO.clear();\n \n         // 3. create user\n         UserTO userTO = getSampleTO(mailAddress);"},{"sha":"4f420e8a3171151494cf0df0ce4777408ad81971","filename":"core/src/test/resources/mysql/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fmysql%2Fpersistence.properties?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -13,6 +13,6 @@ jpa.driverClassName=com.mysql.jdbc.Driver\n jpa.url=jdbc:mysql://localhost:3306/syncope?characterEncoding=UTF-8\n jpa.username=syncope\n jpa.password=syncope\n-jpa.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\n+jpa.dialect=org.apache.openjpa.jdbc.sql.MySQLDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n quartz.sql=tables_mysql_innodb.sql"},{"sha":"1ea50d40f330b9e4f0eb43ad36783f5c01e56d18","filename":"core/src/test/resources/oracle/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Foracle%2Fpersistence.properties?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -13,7 +13,7 @@ jpa.driverClassName=oracle.jdbc.driver.OracleDriver\n jpa.url=jdbc:oracle:thin:@pioppo:1521:orcl\n jpa.username=syncope\n jpa.password=syncope\n-jpa.dialect=org.hibernate.dialect.Oracle10gDialect\n+jpa.dialect=org.apache.openjpa.jdbc.sql.OracleDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n quartz.sql=tables_oracle.sql\n database.schema=SYNCOPE"},{"sha":"e643f3b028c6cfb546898dbdf88eeae13301c70f","filename":"core/src/test/resources/postgres/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fpostgres%2Fpersistence.properties?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -13,6 +13,6 @@ jpa.driverClassName=org.postgresql.Driver\n jpa.url=jdbc:postgresql://localhost:5432/syncope\n jpa.username=syncope\n jpa.password=syncope\n-jpa.dialect=org.hibernate.dialect.PostgreSQLDialect\n+jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n quartz.sql=tables_postgres.sql"},{"sha":"0d46a816daa86a3551d10cf295d64d13341fd6e0","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/53d51f93591adc971a4ed739c98d80fedcf176d7/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/53d51f93591adc971a4ed739c98d80fedcf176d7/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=53d51f93591adc971a4ed739c98d80fedcf176d7","patch":"@@ -77,7 +77,7 @@\n         \n         <connid.version>1.3.1</connid.version>\n         <connid.soap.version>1.1</connid.soap.version>\n-        <connid.db.table.version>2.0</connid.db.table.version>\n+        <connid.db.table.version>2.1</connid.db.table.version>\n         <connid.csvdir.version>0.1</connid.csvdir.version>\n         <connid.ldap.version>1.2</connid.ldap.version>\n "}]}