{"sha":"4115c57b93135ec0881cd99aa317440d0ae3f5c8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQxMTVjNTdiOTMxMzVlYzA4ODFjZDk5YWEzMTc0NDBkMGFlM2Y1Yzg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-21T07:43:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-04-21T07:43:54Z"},"message":"[SYNCOPE-119] Merge from master","tree":{"sha":"aab11c1186e294fc2c658f90227faff6359d49de","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/aab11c1186e294fc2c658f90227faff6359d49de"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4115c57b93135ec0881cd99aa317440d0ae3f5c8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4115c57b93135ec0881cd99aa317440d0ae3f5c8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4115c57b93135ec0881cd99aa317440d0ae3f5c8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4115c57b93135ec0881cd99aa317440d0ae3f5c8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"65d652af618a54292bb8dcf5cf93147bb6b83c52","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/65d652af618a54292bb8dcf5cf93147bb6b83c52","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/65d652af618a54292bb8dcf5cf93147bb6b83c52"},{"sha":"bfa7172ec6ccb4fa8d748c3dd36947675565c938","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bfa7172ec6ccb4fa8d748c3dd36947675565c938","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bfa7172ec6ccb4fa8d748c3dd36947675565c938"}],"stats":{"total":406,"additions":292,"deletions":114},"files":[{"sha":"d334c300a634a57540033e9e0cf07fb28548f480","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -76,17 +76,17 @@ else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n     }\n \n     private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n-        List<Object> exTypesInHeaders = response.getHeaders().get(RESTHeaders.ERROR_CODE);\n+        List<String> exTypesInHeaders = response.getStringHeaders().get(RESTHeaders.ERROR_CODE);\n         if (exTypesInHeaders == null) {\n             LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n             return null;\n         }\n+        List<String> exInfos = response.getStringHeaders().get(RESTHeaders.ERROR_INFO);\n \n         final SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n \n-        final Set<String> handledExceptions = new HashSet<String>();\n-        for (Object exceptionTypeValue : exTypesInHeaders) {\n-            final String exTypeAsString = (String) exceptionTypeValue;\n+        Set<String> handledExceptions = new HashSet<>();\n+        for (String exTypeAsString : exTypesInHeaders) {\n             ClientExceptionType exceptionType = null;\n             try {\n                 exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n@@ -98,13 +98,10 @@ private SyncopeClientCompositeException checkSyncopeClientCompositeException(fin\n \n                 final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n \n-                if (response.getHeaders().get(RESTHeaders.ERROR_INFO) != null\n-                        && !response.getHeaders().get(RESTHeaders.ERROR_INFO).isEmpty()) {\n-\n-                    for (Object value : response.getHeaders().get(RESTHeaders.ERROR_INFO)) {\n-                        final String element = value.toString();\n+                if (exInfos != null && !exInfos.isEmpty()) {\n+                    for (String element : exInfos) {\n                         if (element.startsWith(exceptionType.getHeaderValue())) {\n-                            clientException.getElements().add(StringUtils.substringAfter(value.toString(), \":\"));\n+                            clientException.getElements().add(StringUtils.substringAfter(element, \":\"));\n                         }\n                     }\n                 }"},{"sha":"f7a00df975082e287e31f22e084606c8fd7e308a","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientFactoryBean.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -62,6 +62,8 @@ public <T> T createServiceInstance(\n         setServiceClass(serviceClass);\n         final T serviceInstance = create(serviceClass);\n         WebClient.client(serviceInstance).type(mediaType).accept(mediaType);\n+        WebClient.getConfig(WebClient.client(serviceInstance)).\n+                getRequestContext().put(\"org.apache.cxf.http.header.split\", true);\n         return serviceInstance;\n     }\n }"},{"sha":"c921272e0a679180afbe5f96b8fe71ad46f34259","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -121,7 +121,7 @@ public Pair<Map<Entitlement, Set<String>>, UserTO> self() {\n         try {\n             return new ImmutablePair<>(\n                     (Map<Entitlement, Set<String>>) new ObjectMapper().readValue(\n-                            response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS),\n+                            response.getHeaderString(RESTHeaders.OWNED_ENTITLEMENTS).replaceAll(\"%2C\", \",\"),\n                             new TypeReference<HashMap<Entitlement, Set<String>>>() {\n                             }),\n                     response.readEntity(UserTO.class));"},{"sha":"a20cb5997ba5d4d9f6c4cbf52367d69024d22efc","filename":"client/lib/src/test/java/org/apache/syncope/client/lib/ConcurrencyTest.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -54,7 +54,11 @@ public void run() {\n                     }\n                 }\n             };\n-            execution.start();\n+\t    try {\n+\t\texecution.start();\n+\t    } catch(OutOfMemoryError e) {\n+\t\t// ignore\n+\t    }\n         }\n \n         Thread.sleep(THREAD_NUMBER);"},{"sha":"10a365043a921b860cf298930820e85ce06ff2c3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -140,7 +140,7 @@ public UserTO transform(final User input) {\n     @Transactional(readOnly = true)\n     public Pair<String, UserTO> readSelf() {\n         return ImmutablePair.of(\n-                POJOHelper.serialize(AuthContextUtils.getAuthorizations()),\n+                POJOHelper.serialize(AuthContextUtils.getAuthorizations()).replaceAll(\",\", \"%2C\"),\n                 binder.getAuthenticatedUserTO());\n     }\n "},{"sha":"74c0b41b0500082ff67aa78d201c3f573bf77c67","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":34,"deletions":39,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -94,9 +94,6 @@ public class ConnObjectUtils {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtils.class);\n \n-    @Autowired\n-    private PolicyDAO policyDAO;\n-\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -246,69 +243,67 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n \n         // 1. fill with data from connector object\n         subjectTO.setRealm(syncTask.getDestinatioRealm().getFullPath());\n-        for (MappingItem item : attrUtils.getUidToMappingItems(\n-                syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)) {\n+        for (MappingItem item : attrUtils.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)) {\n+            Attribute attr = obj.getAttributeByName(item.getExtAttrName());\n \n-            Attribute attribute = obj.getAttributeByName(item.getExtAttrName());\n-\n-            AttrTO attributeTO;\n+            AttrTO attrTO;\n             switch (item.getIntMappingType()) {\n                 case UserId:\n                 case GroupId:\n                     break;\n \n                 case Password:\n-                    if (subjectTO instanceof UserTO && attribute != null && attribute.getValue() != null\n-                            && !attribute.getValue().isEmpty()) {\n+                    if (subjectTO instanceof UserTO && attr != null && attr.getValue() != null\n+                            && !attr.getValue().isEmpty()) {\n \n-                        ((UserTO) subjectTO).setPassword(getPassword(attribute.getValue().get(0)));\n+                        ((UserTO) subjectTO).setPassword(getPassword(attr.getValue().get(0)));\n                     }\n                     break;\n \n                 case Username:\n                     if (subjectTO instanceof UserTO) {\n-                        ((UserTO) subjectTO).setUsername(attribute == null || attribute.getValue().isEmpty()\n-                                || attribute.getValue().get(0) == null\n+                        ((UserTO) subjectTO).setUsername(attr == null || attr.getValue().isEmpty()\n+                                || attr.getValue().get(0) == null\n                                         ? null\n-                                        : attribute.getValue().get(0).toString());\n+                                        : attr.getValue().get(0).toString());\n                     }\n                     break;\n \n                 case GroupName:\n                     if (subjectTO instanceof GroupTO) {\n-                        ((GroupTO) subjectTO).setName(attribute == null || attribute.getValue().isEmpty()\n-                                || attribute.getValue().get(0) == null\n+                        ((GroupTO) subjectTO).setName(attr == null || attr.getValue().isEmpty()\n+                                || attr.getValue().get(0) == null\n                                         ? null\n-                                        : attribute.getValue().get(0).toString());\n+                                        : attr.getValue().get(0).toString());\n                     }\n                     break;\n \n                 case GroupOwnerSchema:\n-                    if (subjectTO instanceof GroupTO && attribute != null) {\n+                    if (subjectTO instanceof GroupTO && attr != null) {\n                         // using a special attribute (with schema \"\", that will be ignored) for carrying the\n                         // GroupOwnerSchema value\n-                        attributeTO = new AttrTO();\n-                        attributeTO.setSchema(StringUtils.EMPTY);\n-                        if (attribute.getValue().isEmpty() || attribute.getValue().get(0) == null) {\n-                            attributeTO.getValues().add(StringUtils.EMPTY);\n+                        attrTO = new AttrTO();\n+                        attrTO.setSchema(StringUtils.EMPTY);\n+                        if (attr.getValue().isEmpty() || attr.getValue().get(0) == null) {\n+                            attrTO.getValues().add(StringUtils.EMPTY);\n                         } else {\n-                            attributeTO.getValues().add(attribute.getValue().get(0).toString());\n+                            attrTO.getValues().add(attr.getValue().get(0).toString());\n                         }\n \n-                        ((GroupTO) subjectTO).getPlainAttrs().add(attributeTO);\n+                        ((GroupTO) subjectTO).getPlainAttrs().add(attrTO);\n                     }\n                     break;\n \n                 case UserPlainSchema:\n                 case GroupPlainSchema:\n-                    attributeTO = new AttrTO();\n-                    attributeTO.setSchema(item.getIntAttrName());\n+                    attrTO = new AttrTO();\n+                    attrTO.setSchema(item.getIntAttrName());\n \n                     PlainSchema schema = plainSchemaDAO.find(item.getIntAttrName(), attrUtils.plainSchemaClass());\n \n-                    for (Object value : attribute == null || attribute.getValue() == null\n+                    for (Object value : attr == null || attr.getValue() == null\n                             ? Collections.emptyList()\n-                            : attribute.getValue()) {\n+                            : attr.getValue()) {\n \n                         AttrSchemaType schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                         if (value != null) {\n@@ -332,35 +327,35 @@ private <T extends AbstractSubjectTO> T getSubjectTOFromConnObject(final Connect\n                                     }\n                                     break;\n                             }\n-                            attributeTO.getValues().add(attrValue.getValueAsString(schemaType));\n+                            attrTO.getValues().add(attrValue.getValueAsString(schemaType));\n                         }\n                     }\n \n-                    subjectTO.getPlainAttrs().add(attributeTO);\n+                    subjectTO.getPlainAttrs().add(attrTO);\n                     break;\n \n                 case UserDerivedSchema:\n                 case GroupDerivedSchema:\n-                    attributeTO = new AttrTO();\n-                    attributeTO.setSchema(item.getIntAttrName());\n-                    subjectTO.getDerAttrs().add(attributeTO);\n+                    attrTO = new AttrTO();\n+                    attrTO.setSchema(item.getIntAttrName());\n+                    subjectTO.getDerAttrs().add(attrTO);\n                     break;\n \n                 case UserVirtualSchema:\n                 case GroupVirtualSchema:\n-                    attributeTO = new AttrTO();\n-                    attributeTO.setSchema(item.getIntAttrName());\n+                    attrTO = new AttrTO();\n+                    attrTO.setSchema(item.getIntAttrName());\n \n-                    for (Object value : attribute == null || attribute.getValue() == null\n+                    for (Object value : attr == null || attr.getValue() == null\n                             ? Collections.emptyList()\n-                            : attribute.getValue()) {\n+                            : attr.getValue()) {\n \n                         if (value != null) {\n-                            attributeTO.getValues().add(value.toString());\n+                            attrTO.getValues().add(value.toString());\n                         }\n                     }\n \n-                    subjectTO.getVirAttrs().add(attributeTO);\n+                    subjectTO.getVirAttrs().add(attrTO);\n                     break;\n \n                 default:"},{"sha":"535597a2633633c327391f247d587d17b878b14e","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -84,9 +84,6 @@\n \n public final class MappingUtils {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(MappingUtils.class);\n \n     private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n@@ -222,7 +219,7 @@ public static Pair<String, Set<Attribute>> prepareAttributes(\n             attributes.remove(accountIdExtAttr);\n             attributes.add(AttributeBuilder.build(attrUtils.getAccountIdItem(resource).getExtAttrName(), accountId));\n         }\n-        attributes.add(MappingUtils.evaluateNAME(subject, resource, accountId));\n+        attributes.add(evaluateNAME(subject, resource, accountId));\n \n         if (enable != null) {\n             attributes.add(AttributeBuilder.buildEnabled(enable));\n@@ -304,17 +301,17 @@ private static Pair<String, Attribute> prepareAttr(\n             case GroupPlainSchema:\n             case MembershipPlainSchema:\n                 final PlainSchemaDAO plainSchemaDAO = context.getBean(PlainSchemaDAO.class);\n-                schema = plainSchemaDAO.find(mapItem.getIntAttrName(),\n-                        MappingUtils.getIntMappingTypeClass(mapItem.getIntMappingType()));\n+                schema = plainSchemaDAO.find(\n+                        mapItem.getIntAttrName(), getIntMappingTypeClass(mapItem.getIntMappingType()));\n                 schemaType = schema == null ? AttrSchemaType.String : schema.getType();\n                 break;\n \n             case UserVirtualSchema:\n             case GroupVirtualSchema:\n             case MembershipVirtualSchema:\n                 VirSchemaDAO virSchemaDAO = context.getBean(VirSchemaDAO.class);\n-                VirSchema virSchema = virSchemaDAO.find(mapItem.getIntAttrName(),\n-                        MappingUtils.getIntMappingTypeClass(mapItem.getIntMappingType()));\n+                VirSchema virSchema = virSchemaDAO.find(\n+                        mapItem.getIntAttrName(), getIntMappingTypeClass(mapItem.getIntMappingType()));\n                 readOnlyVirSchema = (virSchema != null && virSchema.isReadonly());\n                 schemaType = AttrSchemaType.String;\n                 break;"},{"sha":"4c5551312b5bc5ecb72fe8a448a5fa0f7b4d3ade","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/Encryptor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FEncryptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FEncryptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FEncryptor.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -46,7 +46,7 @@ public final class Encryptor {\n \n     private static final Logger LOG = LoggerFactory.getLogger(Encryptor.class);\n \n-    private static final Map<String, Encryptor> INSTANCES = new ConcurrentHashMap<String, Encryptor>();\n+    private static final Map<String, Encryptor> INSTANCES = new ConcurrentHashMap<>();\n \n     private static final String DEFAULT_SECRET_KEY = \"1abcdefghilmnopqrstuvz2!\";\n "},{"sha":"953960422cf4d7f880470ad6e2c71e7737a93e2a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AttributableUtils.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributableUtils.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -75,8 +75,6 @@ public interface AttributableUtils {\n \n     <T extends MappingItem> List<T> getMappingItems(ExternalResource resource, MappingPurpose purpose);\n \n-    <T extends MappingItem> List<T> getUidToMappingItems(ExternalResource resource, MappingPurpose purpose);\n-\n     IntMappingType plainIntMappingType();\n \n     IntMappingType derIntMappingType();"},{"sha":"2fe1ae9b67140e8c64c993c6906de78026da63c5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAttributableUtils.java","status":"modified","additions":0,"deletions":17,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAttributableUtils.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -82,8 +82,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUVirSchema;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.apache.syncope.core.misc.spring.BeanUtils;\n-import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.LoggerFactory;\n \n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n@@ -723,21 +721,6 @@ public <T extends MappingItem> List<T> getMappingItems(\n         return result;\n     }\n \n-    @Override\n-    public <T extends MappingItem> List<T> getUidToMappingItems(\n-            final ExternalResource resource, final MappingPurpose purpose) {\n-\n-        List<T> items = getMappingItems(resource, purpose);\n-\n-        MappingItem uidItem = type == AttributableType.USER ? new JPAUMappingItem() : new JPAGMappingItem();\n-        BeanUtils.copyProperties(getAccountIdItem(resource), uidItem);\n-        uidItem.setExtAttrName(Uid.NAME);\n-        uidItem.setAccountid(false);\n-        items.add((T) uidItem);\n-\n-        return items;\n-    }\n-\n     @Override\n     public IntMappingType plainIntMappingType() {\n         IntMappingType result = null;"},{"sha":"42678151547cc1d1a8194601df19cc908c022a24","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/PolicyTest.java","status":"modified","additions":0,"deletions":14,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FPolicyTest.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.SyncPolicy;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n@@ -76,19 +75,6 @@ public void saveInvalidPolicy() {\n         policyDAO.save(policy);\n     }\n \n-    @Test(expected = InvalidEntityException.class)\n-    public void saveSecondPasswordPolicy() {\n-        PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n-        passwordPolicy.setMaxLength(8);\n-        passwordPolicy.setMinLength(6);\n-\n-        PasswordPolicy policy = entityFactory.newEntity(PasswordPolicy.class);\n-        policy.setSpecification(passwordPolicy);\n-        policy.setDescription(\"global password policy\");\n-\n-        policyDAO.save(policy);\n-    }\n-\n     @Test\n     public void create() {\n         SyncPolicy policy = entityFactory.newEntity(SyncPolicy.class);"},{"sha":"e5e55fe81d8eae0cf9188cbb50623823f60db2d3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/RealmTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRealmTest.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -120,16 +120,16 @@ public void save() {\n         assertEquals(\"last\", actual.getName());\n         assertEquals(\"/even/two/last\", actual.getFullPath());\n         assertEquals(realmDAO.find(\"/even/two\"), actual.getParent());\n-        assertNull(realm.getAccountPolicy());\n-        assertNull(realm.getPasswordPolicy());\n+        assertEquals(5L, realm.getAccountPolicy().getKey(), 0);\n+        assertEquals(2L, realm.getPasswordPolicy().getKey(), 0);\n \n         realm = actual;\n         realm.setAccountPolicy((AccountPolicy) policyDAO.find(6L));\n         realm.setPasswordPolicy((PasswordPolicy) policyDAO.find(4L));\n \n         actual = realmDAO.save(realm);\n-        assertNotNull(actual.getAccountPolicy());\n-        assertNotNull(actual.getPasswordPolicy());\n+        assertEquals(6L, actual.getAccountPolicy().getKey(), 0);\n+        assertEquals(4L, actual.getPasswordPolicy().getKey(), 0);\n     }\n \n     @Test"},{"sha":"d606dac9ffd865525ef317d5eb472fb48767a86c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -188,7 +188,7 @@ public void issue237() {\n         user.setRealm(realmDAO.find(\"/even/two\"));\n         user.setCreationDate(new Date());\n \n-        user.setPassword(\"password\", CipherAlgorithm.AES);\n+        user.setPassword(\"password123\", CipherAlgorithm.AES);\n \n         User actual = userDAO.save(user);\n         assertNotNull(actual);"},{"sha":"66522eb10aaea48483a8a4b714cbfa1ce67ce9ad","filename":"core/rest-cxf/pom.xml","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fpom.xml?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -48,7 +48,11 @@ under the License.\n       <groupId>org.apache.geronimo.specs</groupId>\n       <artifactId>geronimo-jpa_2.0_spec</artifactId>\n     </dependency>\n-    \n+\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context</artifactId>\n+    </dependency>    \n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-orm</artifactId>"},{"sha":"92b93a2ed67e58212297988c0fb4dbfc48e10199","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":44,"deletions":9,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -18,7 +18,9 @@\n  */\n package org.apache.syncope.core.rest.cxf;\n \n+import java.sql.SQLException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -33,6 +35,7 @@\n import javax.ws.rs.core.Response.ResponseBuilder;\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n import org.apache.cxf.jaxrs.validation.ValidationExceptionMapper;\n@@ -53,11 +56,17 @@\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.env.Environment;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.orm.jpa.JpaSystemException;\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.transaction.TransactionSystemException;\n \n+@Configuration\n+@PropertySource(\"classpath:errorMessages.properties\")\n @Provider\n public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n \n@@ -67,6 +76,19 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, R\n \n     private final ValidationExceptionMapper validationEM = new ValidationExceptionMapper();\n \n+    @Autowired\n+    private Environment env;\n+\n+    private static final Map<String, String> EXCEPTION_CODE_MAP = new HashMap<String, String>() {\n+\n+        private static final long serialVersionUID = -7688359318035249200L;\n+\n+        {\n+            put(\"23000\", \"UniqueConstraintViolation\");\n+            put(\"23505\", \"UniqueConstraintViolation\");\n+        }\n+    };\n+\n     @Override\n     public Response toResponse(final Exception ex) {\n         LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\n@@ -93,11 +115,11 @@ public Response toResponse(final Exception ex) {\n         } else if (ex instanceof UnauthorizedException) {\n             builder = builder(ClientExceptionType.Unauthorized, getExMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {\n-            builder = builder(ClientExceptionType.EntityExists, getExMessage(ex));\n-        } else if (ex instanceof DataIntegrityViolationException) {\n-            builder = builder(ClientExceptionType.DataIntegrityViolation, getExMessage(ex));\n+            builder = builder(ClientExceptionType.EntityExists, getJPAMessage(ex));\n+        } else if (ex instanceof DataIntegrityViolationException || ex instanceof JpaSystemException) {\n+            builder = builder(ClientExceptionType.DataIntegrityViolation, getJPAMessage(ex));\n         } else if (ex instanceof ConnectorException) {\n-            builder = builder(ClientExceptionType.ConnectorException, getExMessage(ex));            \n+            builder = builder(ClientExceptionType.ConnectorException, getExMessage(ex));\n         } else {\n             builder = processNotFoundExceptions(ex);\n             if (builder == null) {\n@@ -174,7 +196,7 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n             error.setType(sce.getType());\n \n             for (String element : sce.getElements()) {\n-                builder.header(RESTHeaders.ERROR_INFO, ex.getType().getInfoHeaderValue(element));\n+                builder.header(RESTHeaders.ERROR_INFO, sce.getType().getInfoHeaderValue(element));\n                 error.getElements().add(element);\n             }\n \n@@ -205,10 +227,9 @@ private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n         }\n \n         if (iee != null) {\n-            ClientExceptionType exType =\n-                    iee.getEntityClassSimpleName().endsWith(\"Policy\")\n-                            ? ClientExceptionType.InvalidPolicy\n-                            : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n+            ClientExceptionType exType = iee.getEntityClassSimpleName().endsWith(\"Policy\")\n+                    ? ClientExceptionType.InvalidPolicy\n+                    : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n \n             ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n             builder.header(RESTHeaders.ERROR_CODE, exType.getHeaderValue());\n@@ -288,4 +309,18 @@ private String getMessage(final Throwable ex, final String msg) {\n     private String getExMessage(final Throwable ex) {\n         return (ex.getCause() == null) ? ex.getMessage() : ex.getCause().getMessage();\n     }\n+\n+    private String getJPAMessage(final Throwable ex) {\n+        Throwable throwable = ExceptionUtils.getRootCause(ex);\n+        String message = null;\n+        if (throwable instanceof SQLException) {\n+            String SQLState = ((SQLException) throwable).getSQLState();\n+            String messageKey = EXCEPTION_CODE_MAP.get(SQLState);\n+            if (messageKey != null) {\n+                message = env.getProperty(\"errMessage.\" + messageKey);\n+            }\n+        }\n+\n+        return message == null ? getExMessage(ex) : message;\n+    }\n }"},{"sha":"4e942db888873896d31e4479123dfbf76983d397","filename":"core/rest-cxf/src/main/resources/errorMessages.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FerrorMessages.properties?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+errMessage.UniqueConstraintViolation=A violation of the constraint imposed by a unique index or a unique constraint occurred"},{"sha":"7f83b459e192815bee04c3940232feb61fbb621b","filename":"fit/core-reference/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -344,6 +344,13 @@ under the License.\n         <directory>src/test/resources</directory>\n         <filtering>true</filtering>\n       </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../core/rest-cxf/src/main/resources</directory>\n+        <includes>\n+          <include>errorMessages.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </testResource>\n     </testResources>\n   </build>\n   "},{"sha":"79aa0780a4bb1508ec8282cd560c2a24bf68c006","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConnectorITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConnectorITCase.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -537,7 +537,7 @@ public void getSchemaNames() {\n         schemaNames = connectorService.getSchemaNames(conn.getKey(), conn, false);\n \n         assertNotNull(schemaNames);\n-        assertEquals(0, schemaNames.size());\n+        assertEquals(1, schemaNames.size());\n \n         conn = connectorService.read(104L);\n "},{"sha":"6a42f5ae541f01b1390e2a50b3567e4b6f5ce83e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ExceptionMapperITCase.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FExceptionMapperITCase.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class ExceptionMapperITCase extends AbstractITCase {\n+\n+    private static final Properties ERROR_MESSAGES = new Properties();\n+\n+    @BeforeClass\n+    public static void setUpErrorMessages() throws IOException {\n+        InputStream propStream = null;\n+        try {\n+            propStream = ExceptionMapperITCase.class.getResourceAsStream(\"/errorMessages.properties\");\n+            ERROR_MESSAGES.load(propStream);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load /errorMessages.properties\", e);\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+    }\n+\n+    @Test\n+    public void uniqueSchemaConstraint() {\n+        // 1. create an user schema with unique constraint\n+        PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        String schemaUID = getUUIDString();\n+        schemaTO.setKey(\"unique\" + schemaUID);\n+        schemaTO.setType(AttrSchemaType.String);\n+        schemaTO.setUniqueConstraint(true);\n+        createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+\n+        // 2. create an user with mandatory attributes and unique\n+        UserTO userTO1 = new UserTO();\n+        userTO1.setRealm(SyncopeConstants.ROOT_REALM);\n+        String userId1 = getUUIDString() + \"issue654_1@syncope.apache.org\";\n+        userTO1.setUsername(userId1);\n+        userTO1.setPassword(\"password123\");\n+\n+        userTO1.getPlainAttrs().add(attrTO(\"userId\", userId1));\n+        userTO1.getPlainAttrs().add(attrTO(\"fullname\", userId1));\n+        userTO1.getPlainAttrs().add(attrTO(\"surname\", userId1));\n+        userTO1.getPlainAttrs().add(attrTO(\"unique\" + schemaUID, \"unique\" + schemaUID));\n+\n+        createUser(userTO1);\n+\n+        // 3. create an other user with mandatory attributes and unique with the same value of userTO1\n+        UserTO userTO2 = new UserTO();\n+        userTO2.setRealm(SyncopeConstants.ROOT_REALM);\n+        String userId2 = getUUIDString() + \"issue654_2@syncope.apache.org\";\n+        userTO2.setUsername(userId2);\n+        userTO2.setPassword(\"password123\");\n+\n+        userTO2.getPlainAttrs().add(attrTO(\"userId\", userId2));\n+        userTO2.getPlainAttrs().add(attrTO(\"fullname\", userId2));\n+        userTO2.getPlainAttrs().add(attrTO(\"surname\", userId2));\n+        userTO2.getPlainAttrs().add(attrTO(\"unique\" + schemaUID, \"unique\" + schemaUID));\n+\n+        try {\n+            createUser(userTO2);\n+            fail();\n+        } catch (Exception e) {\n+            String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");\n+            assertEquals(e.getMessage(), \"DataIntegrityViolation [\" + message + \"]\");\n+        }\n+    }\n+\n+    @Test\n+    public void sameRoleName() {\n+        // Create the first role\n+        RoleTO roleTO1 = new RoleTO();\n+        String roleUUID = getUUIDString();\n+        roleTO1.setName(\"child1\" + roleUUID);\n+        createRole(roleTO1);\n+\n+        // Create the second role, with the same parent and the same role of roleTO1\n+        RoleTO roleTO2 = new RoleTO();\n+        roleTO2.setName(\"child1\" + roleUUID);\n+        try {\n+            createRole(roleTO2);\n+            fail();\n+        } catch (Exception e) {\n+            String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");\n+            assertEquals(e.getMessage(), \"DataIntegrityViolation [\" + message + \"]\");\n+        }\n+    }\n+\n+    @Test\n+    public void headersMultiValue() {\n+        UserTO userTO = new UserTO();\n+        userTO.setRealm(SyncopeConstants.ROOT_REALM);\n+        String userId = getUUIDString() + \"issue654@syncope.apache.org\";\n+        userTO.setUsername(userId);\n+        userTO.setPassword(\"password123\");\n+\n+        userTO.getPlainAttrs().add(attrTO(\"userId\", \"issue654\"));\n+        userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+        userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+\n+        try {\n+            createUser(userTO);\n+            fail();\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(2, e.getExceptions().size());\n+        }\n+    }\n+}"},{"sha":"f0e9920fc872d79f2318a235cda0360cc1be121c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -30,6 +30,8 @@\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.StatusMod;\n@@ -183,7 +185,15 @@ public void sync() throws Exception {\n             assertTrue(userTO.getMemberships().get(0).getPlainAttrMap().containsKey(\"subscriptionDate\"));\n \n             // Unmatching --> Assign (link)\n+            // SYNCOPE-658\n             assertTrue(userTO.getResources().contains(RESOURCE_NAME_CSV));\n+            assertEquals(1, CollectionUtils.countMatches(userTO.getDerAttrs(), new Predicate<AttrTO>() {\n+\n+                @Override\n+                public boolean evaluate(final AttrTO attributeTO) {\n+                    return \"csvuserid\".equals(attributeTO.getSchema());\n+                }\n+            }));\n \n             userTO = readUser(\"test8\");\n             assertNotNull(userTO);"},{"sha":"0c34a768f8b5546367c4573361d656f11808fbfb","filename":"pom.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4115c57b93135ec0881cd99aa317440d0ae3f5c8/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4115c57b93135ec0881cd99aa317440d0ae3f5c8/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=4115c57b93135ec0881cd99aa317440d0ae3f5c8","patch":"@@ -321,7 +321,7 @@ under the License.\n \n     <connid.version>1.4.1.0</connid.version>\n     <connid.soap.version>1.3.0</connid.soap.version>\n-    <connid.db.table.version>2.2.1</connid.db.table.version>\n+    <connid.db.table.version>2.2.2-SNAPSHOT</connid.db.table.version>\n     <connid.csvdir.version>0.8.2</connid.csvdir.version>\n     <connid.ldap.version>1.4.0</connid.ldap.version>\n     <connid.ad.version>1.2.2</connid.ad.version>\n@@ -360,7 +360,7 @@ under the License.\n     <commons-collection.version>4.0</commons-collection.version>\n     <commons-logging.version>1.1.3</commons-logging.version>\n \n-    <h2.version>1.4.186</h2.version>\n+    <h2.version>1.4.187</h2.version>\n \n     <junit.version>4.12</junit.version>\n     <selenium.version>2.45.0</selenium.version>\n@@ -1054,7 +1054,7 @@ under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-javadoc-plugin</artifactId>\n-          <version>2.10.2</version>          \n+          <version>2.10.3</version>          \n         </plugin>\n         \n         <plugin>\n@@ -1496,7 +1496,7 @@ under the License.\n                 <plugin>\n                   <groupId>org.apache.maven.plugins</groupId>\n                   <artifactId>maven-javadoc-plugin</artifactId>\n-                  <version>2.10.2</version>\n+                  <version>2.10.3</version>\n                   <configuration>\n                     <destDir>apidocs/2.0</destDir>\n                     <detectLinks>true</detectLinks>"}]}