{"sha":"83531c9af77d484229581dd28f9cc1ec6914ae69","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgzNTMxYzlhZjc3ZDQ4NDIyOTU4MWRkMjhmOWNjMWVjNjkxNGFlNjk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-07T13:57:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-03-07T15:27:09Z"},"message":"[SYNCOPE-1280] Jobs are now only attempted to graceful stop, no hard Thread#interrupt any more","tree":{"sha":"e6a8eedcd676e6e04e52b267cfd0804da4977620","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e6a8eedcd676e6e04e52b267cfd0804da4977620"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/83531c9af77d484229581dd28f9cc1ec6914ae69","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/83531c9af77d484229581dd28f9cc1ec6914ae69","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/83531c9af77d484229581dd28f9cc1ec6914ae69","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/83531c9af77d484229581dd28f9cc1ec6914ae69/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"320438f751d5a6a04be06a97f3284ab07d3586c7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/320438f751d5a6a04be06a97f3284ab07d3586c7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/320438f751d5a6a04be06a97f3284ab07d3586c7"}],"stats":{"total":298,"additions":174,"deletions":124},"files":[{"sha":"25c5b2aed6dae4676a32c630b8f44039eca346ce","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -117,14 +117,6 @@ under the License.\n   <CPlainAttrValue id=\"162dd874-0417-4bb9-9724-db1ff2952dd1\"\n                    attribute_id=\"9891c0a7-27ee-4215-9eea-ca32e580b4e4\" booleanValue=\"1\"/>\n \n-  <SyncopeSchema id=\"tasks.interruptMaxRetries\"/>\n-  <PlainSchema id=\"tasks.interruptMaxRetries\" type=\"Long\"\n-               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CPlainAttr id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\"\n-              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"tasks.interruptMaxRetries\"/>\n-  <CPlainAttrValue id=\"5dc3f4e3-ff9f-4558-a9ac-15336b63a2ad\"\n-                   attribute_id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\" longValue=\"20\"/>\n-  \n   <!-- Return hashed password values when reading users -->\n   <SyncopeSchema id=\"return.password.value\"/>\n   <PlainSchema id=\"return.password.value\" type=\"Boolean\""},{"sha":"8901016cff002bd6c16dc936f59e175321ec0a03","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -52,7 +52,7 @@ public class PlainSchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<PlainSchema> schemas = plainSchemaDAO.findAll();\n-        assertEquals(43, schemas.size());\n+        assertEquals(42, schemas.size());\n     }\n \n     @Test"},{"sha":"a7e447861a2ab77ab4920738a1dbc771c3559d4d","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -117,14 +117,6 @@ under the License.\n   <CPlainAttrValue id=\"162dd874-0417-4bb9-9724-db1ff2952dd1\"\n                    attribute_id=\"9891c0a7-27ee-4215-9eea-ca32e580b4e4\" booleanValue=\"1\"/>\n \n-  <SyncopeSchema id=\"tasks.interruptMaxRetries\"/>\n-  <PlainSchema id=\"tasks.interruptMaxRetries\" type=\"Long\"\n-               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CPlainAttr id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\"\n-              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"tasks.interruptMaxRetries\"/>\n-  <CPlainAttrValue id=\"5dc3f4e3-ff9f-4558-a9ac-15336b63a2ad\"\n-                   attribute_id=\"c2b9ca96-c6ef-433d-8287-0e0cfd0ad0db\" longValue=\"20\"/>\n-  \n   <!-- Return hashed password values when reading users -->\n   <SyncopeSchema id=\"return.password.value\"/>\n   <PlainSchema id=\"return.password.value\" type=\"Boolean\""},{"sha":"1124fb52ae33abd9b91b6e8edbc7ef169e79cdaf","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobDelegate.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -24,4 +24,8 @@\n public interface JobDelegate {\n \n     String currentStatus();\n+\n+    void interrupt();\n+\n+    boolean isInterrupted();\n }"},{"sha":"7c36ecbd90182dc6075d1d0f3bf0c07328267936","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobManager.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -31,8 +31,6 @@ public interface JobManager {\n \n     String DOMAIN_KEY = \"domain\";\n \n-    String INTERRUPT_MAX_RETRIES_KEY = \"interruptMaxRetries\";\n-\n     JobKey NOTIFICATION_JOB = new JobKey(\"notificationJob\", Scheduler.DEFAULT_GROUP);\n \n     boolean isRunning(JobKey jobKey) throws SchedulerException;"},{"sha":"f0cc908b185b163a586ec8efe0b2bee94c8dcb33","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopePullExecutor.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopePullExecutor.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -27,4 +27,8 @@ public interface SyncopePullExecutor {\n     void setLatestSyncToken(ObjectClass objectClass, SyncToken latestSyncToken);\n \n     void reportHandled(ObjectClass objectClass, Name name);\n+\n+    boolean wasInterruptRequested();\n+\n+    void setInterrupted();\n }"},{"sha":"b2314c5907a4ae1fb808b73f8ddfd595da02be7d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractInterruptableJob.java","status":"modified","additions":12,"deletions":46,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -18,72 +18,38 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n-import java.util.Date;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.core.provisioning.api.job.JobDelegate;\n-import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n-import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.InterruptableJob;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n import org.quartz.UnableToInterruptJobException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @DisallowConcurrentExecution\n public abstract class AbstractInterruptableJob implements InterruptableJob {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AbstractInterruptableJob.class);\n-\n-    /**\n-     * The current running thread containing the task to be executed.\n-     */\n-    private final AtomicReference<Thread> runningThread = new AtomicReference<>();\n-\n     private final JobDelegate embeddedDelegate = new JobDelegate() {\n \n         @Override\n         public String currentStatus() {\n-            return \"RUNNING THREAD: \" + runningThread.get();\n+            return \"RUNNING\";\n         }\n-    };\n \n-    private long interruptMaxRetries = 1;\n+        @Override\n+        public void interrupt() {\n+        }\n+\n+        @Override\n+        public boolean isInterrupted() {\n+            return false;\n+        }\n+\n+    };\n \n     public JobDelegate getDelegate() {\n         return embeddedDelegate;\n     }\n \n-    @Override\n-    public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        runningThread.set(Thread.currentThread());\n-        try {\n-            interruptMaxRetries = context.getMergedJobDataMap().getLong(JobManager.INTERRUPT_MAX_RETRIES_KEY);\n-        } catch (Exception e) {\n-            LOG.debug(\"Could not set {}, defaults to {}\", JobManager.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries, e);\n-        }\n-    }\n-\n     @Override\n     public void interrupt() throws UnableToInterruptJobException {\n-        Thread thread = runningThread.getAndSet(null);\n-        if (thread == null) {\n-            LOG.warn(\"Unable to retrieve the thread of the current job execution\");\n-        } else {\n-            LOG.info(\"Interrupting job from thread {} at {} \", thread.getId(), FormatUtils.format(new Date()));\n-\n-            if (interruptMaxRetries < 1) {\n-                interruptMaxRetries = 1;\n-            }\n-            for (int i = 0; i < interruptMaxRetries && thread.isAlive(); i++) {\n-                thread.interrupt();\n-            }\n-            // if the thread is still alive, it should be available in the next stop\n-            if (thread.isAlive()) {\n-                runningThread.set(thread);\n-            }\n-        }\n+        getDelegate().interrupt();\n     }\n-\n }"},{"sha":"3f7e2801478df35621845dbff4612582603f2402","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -75,11 +75,25 @@ public abstract class AbstractSchedTaskJobDelegate implements SchedTaskJobDelega\n \n     protected final AtomicReference<String> status = new AtomicReference<>();\n \n+    protected boolean interrupt;\n+\n+    protected boolean interrupted;\n+\n     @Override\n     public String currentStatus() {\n         return status.get();\n     }\n \n+    @Override\n+    public void interrupt() {\n+        interrupt = true;\n+    }\n+\n+    @Override\n+    public boolean isInterrupted() {\n+        return interrupted;\n+    }\n+\n     @Transactional\n     @Override\n     public void execute(final String taskKey, final boolean dryRun, final JobExecutionContext context)"},{"sha":"c22bc8530dcadfb977afa67e1fb64b51595bd769","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AfterHandlingJob.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAfterHandlingJob.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.util.Map;\n-import java.util.UUID;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n@@ -49,11 +50,13 @@ public class AfterHandlingJob extends AbstractInterruptableJob {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AfterHandlingJob.class);\n \n+    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n+\n     public static void schedule(final SchedulerFactoryBean scheduler, final Map<String, Object> jobMap) {\n         @SuppressWarnings(\"unchecked\")\n         AfterHandlingJob jobInstance = (AfterHandlingJob) ApplicationContextProvider.getBeanFactory().\n                 createBean(AfterHandlingJob.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        String jobName = AfterHandlingJob.class.getName() + UUID.randomUUID();\n+        String jobName = AfterHandlingJob.class.getName() + UUID_GENERATOR.generate();\n \n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n \n@@ -82,8 +85,6 @@ public static void schedule(final SchedulerFactoryBean scheduler, final Map<Stri\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        super.execute(context);\n-\n         try {\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n                     () -> {"},{"sha":"10d48b9e88a218c5c0110463ac710d04edc8ca8f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"modified","additions":21,"deletions":8,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -91,12 +91,13 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         status.set(\"About to \"\n                 + (actionType == BulkMembersActionType.DEPROVISION ? \"de\" : \"\") + \"provision \"\n                 + users.size() + \" users from \" + groupResourceKeys);\n-        for (User user : users) {\n+\n+        for (int i = 0; i < users.size() && !interrupt; i++) {\n             List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n-                    ? userProvisioningManager.deprovision(user.getKey(), groupResourceKeys, false)\n-                    : userProvisioningManager.provision(user.getKey(), true, null, groupResourceKeys, false);\n+                    ? userProvisioningManager.deprovision(users.get(i).getKey(), groupResourceKeys, false)\n+                    : userProvisioningManager.provision(users.get(i).getKey(), true, null, groupResourceKeys, false);\n             for (PropagationStatus propagationStatus : statuses) {\n-                result.append(\"User \").append(user.getKey()).append('\\t').\n+                result.append(\"User \").append(users.get(i).getKey()).append('\\t').\n                         append(\"Resource \").append(propagationStatus.getResource()).append('\\t').\n                         append(propagationStatus.getStatus());\n                 if (StringUtils.isNotBlank(propagationStatus.getFailureReason())) {\n@@ -106,20 +107,27 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             }\n             result.append(\"\\n\");\n         }\n+        if (interrupt) {\n+            LOG.debug(\"Group assignment interrupted\");\n+            interrupted = true;\n+            return result.append(\"\\n*** Group assignment interrupted ***\\n\").toString();\n+        }\n \n         membershipCond = new MembershipCond();\n         membershipCond.setGroup(groupKey);\n         List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeafCond(membershipCond), AnyTypeKind.ANY_OBJECT);\n         status.set(\"About to \"\n                 + (actionType == BulkMembersActionType.DEPROVISION ? \"de\" : \"\") + \"provision \"\n                 + anyObjects.size() + \" any objects from \" + groupResourceKeys);\n-        for (AnyObject anyObject : anyObjects) {\n+\n+        for (int i = 0; i < anyObjects.size() && !interrupt; i++) {\n             List<PropagationStatus> statuses = actionType == BulkMembersActionType.DEPROVISION\n-                    ? anyObjectProvisioningManager.deprovision(anyObject.getKey(), groupResourceKeys, false)\n-                    : anyObjectProvisioningManager.provision(anyObject.getKey(), groupResourceKeys, false);\n+                    ? anyObjectProvisioningManager.deprovision(anyObjects.get(i).getKey(), groupResourceKeys, false)\n+                    : anyObjectProvisioningManager.provision(anyObjects.get(i).getKey(), groupResourceKeys, false);\n \n             for (PropagationStatus propagationStatus : statuses) {\n-                result.append(anyObject.getType().getKey()).append(' ').append(anyObject.getKey()).append('\\t').\n+                result.append(anyObjects.get(i).getType().getKey()).append(' ').\n+                        append(anyObjects.get(i).getKey()).append('\\t').\n                         append(\"Resource \").append(propagationStatus.getResource()).append('\\t').\n                         append(propagationStatus.getStatus());\n                 if (StringUtils.isNotBlank(propagationStatus.getFailureReason())) {\n@@ -129,6 +137,11 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             }\n             result.append(\"\\n\");\n         }\n+        if (interrupt) {\n+            LOG.debug(\"Group assignment interrupted\");\n+            interrupted = true;\n+            result.append(\"\\n*** Group assignment interrupted ***\\n\");\n+        }\n \n         return result.toString();\n     }"},{"sha":"bd837e4d5ceb97ffa9d1616e7af548ccddd1f6d0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/IdentityRecertification.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -18,6 +18,7 @@\n  */\r\n package org.apache.syncope.core.provisioning.java.job;\r\n \r\n+import java.util.List;\r\n import java.util.Optional;\r\n import org.apache.commons.lang3.StringUtils;\r\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\r\n@@ -95,19 +96,24 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\r\n \r\n         long now = System.currentTimeMillis();\r\n-        for (int page = 1; page <= pages; page++) {\r\n+        for (int page = 1; page <= pages && !interrupt; page++) {\r\n             status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\r\n \r\n-            for (User user : userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE)) {\r\n-                LOG.debug(\"Processing user: {}\", user.getUsername());\r\n+            List<User> users = userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE);\r\n+            for (int i = 0; i < users.size() && !interrupt; i++) {\r\n+                LOG.debug(\"Processing user: {}\", users.get(i).getUsername());\r\n \r\n-                if (StringUtils.isNotBlank(user.getWorkflowId()) && isToBeRecertified(user, now)) {\r\n-                    uwfAdapter.requestCertify(user);\r\n+                if (StringUtils.isNotBlank(users.get(i).getWorkflowId()) && isToBeRecertified(users.get(i), now)) {\r\n+                    uwfAdapter.requestCertify(users.get(i));\r\n                 } else {\r\n-                    LOG.warn(\"Workflow for {} is null or empty\", user);\r\n+                    LOG.warn(\"Workflow for {} is null or empty\", users.get(i));\r\n                 }\r\n             }\r\n         }\r\n+        if (interrupt) {\r\n+            interrupted = true;\r\n+            return \"Identity recertification interrupted\";\r\n+        }\r\n \r\n         return \"SUCCESS\";\r\n     }\r"},{"sha":"274153ef84422ed6eb2625aef75ea06288c73120","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -243,7 +243,6 @@ public Map<String, Object> register(final SchedTask task, final Date startAt, fi\n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n         jobMap.put(TaskJob.DELEGATE_IMPLEMENTATION, jobDelegate.getKey());\n-        jobMap.put(JobManager.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n \n         registerJob(\n                 JobNamer.getJobKey(task).getName(),\n@@ -263,7 +262,6 @@ public void register(final Report report, final Date startAt, final long interru\n \n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n-        jobMap.put(JobManager.INTERRUPT_MAX_RETRIES_KEY, interruptMaxRetries);\n \n         registerJob(JobNamer.getJobKey(report).getName(), job, report.getCronExpression(), startAt, jobMap);\n     }\n@@ -371,7 +369,6 @@ public void load() {\n \n         Map<String, Object> jobMap = new HashMap<>();\n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n-        jobMap.put(JobManager.INTERRUPT_MAX_RETRIES_KEY, conf.getRight());\n \n         // 3. NotificationJob\n         if (StringUtils.isBlank(conf.getLeft())) {"},{"sha":"5cb8e113482d6b745e70b5bb5c72e259ae6a3e65","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SetUMembershipsJob.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSetUMembershipsJob.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -47,8 +47,6 @@ public class SetUMembershipsJob extends AbstractInterruptableJob {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        super.execute(context);\n-\n         try {\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n                     () -> {"},{"sha":"dc50398bdb7dbba14892aa70765d29b60265d5db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SystemLoadReporterJob.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSystemLoadReporterJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSystemLoadReporterJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSystemLoadReporterJob.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -39,8 +39,6 @@ public class SystemLoadReporterJob extends AbstractInterruptableJob {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        super.execute(context);\n-\n         SystemInfo.LoadInstant instant = new SystemInfo.LoadInstant();\n \n         instant.setSystemLoadAverage(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage());"},{"sha":"d5fe4dc148b3a771471be2e9c46e4f458b1d342e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/TaskJob.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FTaskJob.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -72,8 +72,6 @@ public JobDelegate getDelegate() {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        super.execute(context);\n-\n         try {\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n                     () -> {"},{"sha":"8279bd2d57f88167f3eb63e948cba3fdc5a932d1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -75,6 +75,10 @@ public class DefaultNotificationJobDelegate implements InitializingBean, Notific\n \n     private final AtomicReference<String> status = new AtomicReference<>();\n \n+    private boolean interrupt;\n+\n+    private boolean interrupted;\n+\n     @Override\n     public void afterPropertiesSet() throws Exception {\n         if (mailSender instanceof JavaMailSenderImpl) {\n@@ -110,6 +114,16 @@ public String currentStatus() {\n         return status.get();\n     }\n \n+    @Override\n+    public void interrupt() {\n+        interrupt = true;\n+    }\n+\n+    @Override\n+    public boolean isInterrupted() {\n+        return interrupted;\n+    }\n+\n     @Transactional\n     @Override\n     public TaskExec executeSingle(final NotificationTask task) {\n@@ -238,10 +252,14 @@ public void execute() throws JobExecutionException {\n \n         status.set(\"Sending out \" + tasks.size() + \" notifications\");\n \n-        for (NotificationTask task : tasks) {\n-            LOG.debug(\"Found notification task {} to be executed: starting...\", task);\n-            executeSingle(task);\n-            LOG.debug(\"Notification task {} executed\", task);\n+        for (int i = 0; i < tasks.size() && !interrupt; i++) {\n+            LOG.debug(\"Found notification task {} to be executed: starting...\", tasks.get(i));\n+            executeSingle(tasks.get(i));\n+            LOG.debug(\"Notification task {} executed\", tasks.get(i));\n+        }\n+        if (interrupt) {\n+            LOG.debug(\"Notification job interrupted\");\n+            interrupted = true;\n         }\n     }\n "},{"sha":"7fdd2989cfcf58417530c081ceaff087389b0ca3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJob.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJob.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -62,8 +62,6 @@ public JobDelegate getDelegate() {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        super.execute(context);\n-\n         LOG.debug(\"Waking up...\");\n \n         for (String domain : domainsHolder.getDomains().keySet()) {"},{"sha":"1d8cd4f1e32b5ad2fc4d6f62d5fa764a83855033","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"modified","additions":21,"deletions":4,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.spring.ImplementationManager;\n@@ -73,11 +72,25 @@ public class DefaultReportJobDelegate implements ReportJobDelegate {\n \n     private final AtomicReference<String> status = new AtomicReference<>();\n \n+    private boolean interrupt;\n+\n+    private boolean interrupted;\n+\n     @Override\n     public String currentStatus() {\n         return status.get();\n     }\n \n+    @Override\n+    public void interrupt() {\n+        interrupt = true;\n+    }\n+\n+    @Override\n+    public boolean isInterrupted() {\n+        return interrupted;\n+    }\n+\n     @Transactional\n     @Override\n     public void execute(final String reportKey) throws JobExecutionException {\n@@ -141,11 +154,11 @@ public void execute(final String reportKey) throws JobExecutionException {\n             status.set(\"Generating report header\");\n \n             // iterate over reportlet instances defined for this report\n-            for (Implementation impl : report.getReportlets()) {\n-                Optional<Reportlet> reportlet = ImplementationManager.buildReportlet(impl);\n+            for (int i = 0; i < report.getReportlets().size() && !interrupt; i++) {\n+                Optional<Reportlet> reportlet = ImplementationManager.buildReportlet(report.getReportlets().get(i));\n                 if (reportlet.isPresent()) {\n                     try {\n-                        status.set(\"Invoking reportlet \" + impl.getKey());\n+                        status.set(\"Invoking reportlet \" + report.getReportlets().get(i).getKey());\n                         reportlet.get().extract(handler, status);\n                     } catch (Throwable t) {\n                         LOG.error(\"While executing reportlet {} for report {}\", reportlet, reportKey, t);\n@@ -161,6 +174,10 @@ public void execute(final String reportKey) throws JobExecutionException {\n                     }\n                 }\n             }\n+            if (interrupt) {\n+                LOG.debug(\"Report job {} interrupted\", reportKey);\n+                interrupted = true;\n+            }\n \n             // report footer\n             status.set(\"Generating report footer\");"},{"sha":"f81d3c9979ee0535b4bd9c3c6470fdf22eb400b2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReportJob.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReportJob.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -60,8 +60,6 @@ public JobDelegate getDelegate() {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n-        super.execute(context);\n-\n         try {\n             AuthContextUtils.execWithAuthContext(context.getMergedJobDataMap().getString(JobManager.DOMAIN_KEY),\n                     () -> {"},{"sha":"64fbdbfaf919b9246127cd91c1b1ed56a6bcdb7f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractProvisioningJobDelegate.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractProvisioningJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -42,8 +42,7 @@\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n \n-public abstract class AbstractProvisioningJobDelegate<T extends ProvisioningTask>\n-        extends AbstractSchedTaskJobDelegate {\n+public abstract class AbstractProvisioningJobDelegate<T extends ProvisioningTask> extends AbstractSchedTaskJobDelegate {\n \n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n@@ -90,7 +89,10 @@ protected String createReport(\n         StringBuilder report = new StringBuilder();\n \n         if (dryRun) {\n-            report.append(\"==>Dry run only, no modifications were made<==\\n\\n\");\n+            report.append(\"==> Dry run only, no modifications were made <==\\n\\n\");\n+        }\n+        if (interrupted) {\n+            report.append(\"==> Execution was interrupted <==\\n\\n\");\n         }\n \n         List<ProvisioningReport> rSuccCreate = new ArrayList<>();"},{"sha":"2832cb548d597dfa6577c3a89ae248fe8b6a886a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -135,6 +135,11 @@ public boolean handle(final SyncDelta delta) {\n             LOG.debug(\"Successfully handled {}\", delta);\n \n             if (profile.getTask().getPullMode() != PullMode.INCREMENTAL) {\n+                if (executor.wasInterruptRequested()) {\n+                    LOG.debug(\"Pull interrupted\");\n+                    executor.setInterrupted();\n+                    return false;\n+                }\n                 return true;\n             }\n \n@@ -146,6 +151,11 @@ public boolean handle(final SyncDelta delta) {\n             if (shouldContinue) {\n                 executor.setLatestSyncToken(delta.getObjectClass(), delta.getToken());\n             }\n+            if (executor.wasInterruptRequested()) {\n+                LOG.debug(\"Pull interrupted\");\n+                executor.setInterrupted();\n+                return false;\n+            }\n             return shouldContinue;\n         } catch (IgnoreProvisionException e) {\n             ProvisioningReport ignoreResult = new ProvisioningReport();"},{"sha":"0f44bb5ea0b7e27d7fe515d70a0da6bdba537f08","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -104,6 +104,16 @@ public void reportHandled(final ObjectClass objectClass, final Name name) {\n         pair.setRight(name.getNameValue());\n     }\n \n+    @Override\n+    public boolean wasInterruptRequested() {\n+        return interrupt;\n+    }\n+\n+    @Override\n+    public void setInterrupted() {\n+        this.interrupted = true;\n+    }\n+\n     @Override\n     public String currentStatus() {\n         synchronized (status) {\n@@ -112,7 +122,7 @@ public String currentStatus() {\n                 handled.forEach((key, value) -> {\n                     builder.append(' ').append(value.getLeft()).append('\\t').\n                             append(key.getObjectClassValue()).\n-                            append(\"\\t/ latest: \").append(value.getRight()).\n+                            append(\" / latest: \").append(value.getRight()).\n                             append('\\n');\n                 });\n                 status.set(builder.toString());"},{"sha":"b813e717a0b0ec844bbf2ec49f78bc6d17e30d49","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":17,"deletions":13,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -116,7 +116,7 @@ public String currentStatus() {\n                 handled.forEach((key, value) -> {\n                     builder.append(' ').append(value.getLeft()).append('\\t').\n                             append(key).\n-                            append(\"\\t/ latest: \").append(value.getRight()).\n+                            append(\" / latest: \").append(value.getRight()).\n                             append('\\n');\n                 });\n                 status.set(builder.toString());\n@@ -150,19 +150,19 @@ protected void doHandle(\n             final ExternalResource resource)\n             throws JobExecutionException {\n \n-        for (Any<?> any : anys) {\n+        for (int i = 0; i < anys.size() && !interrupt; i++) {\n             try {\n-                handler.handle(any.getKey());\n+                handler.handle(anys.get(i).getKey());\n                 reportHandled(\n-                        any.getType().getKey(),\n-                        (any instanceof User\n-                                ? ((User) any).getUsername()\n-                                : any instanceof Group\n-                                        ? ((Group) any).getName()\n-                                        : ((AnyObject) any).getName()));\n+                        anys.get(i).getType().getKey(),\n+                        (anys.get(i) instanceof User\n+                        ? ((User) anys.get(i)).getUsername()\n+                        : anys.get(i) instanceof Group\n+                        ? ((Group) anys.get(i)).getName()\n+                        : ((AnyObject) anys.get(i)).getName()));\n             } catch (Exception e) {\n-                LOG.warn(\"Failure pushing '{}' on '{}'\", any, resource, e);\n-                throw new JobExecutionException(\"While pushing \" + any + \" on \" + resource, e);\n+                LOG.warn(\"Failure pushing '{}' on '{}'\", anys.get(i), resource, e);\n+                throw new JobExecutionException(\"While pushing \" + anys.get(i) + \" on \" + resource, e);\n             }\n         }\n     }\n@@ -286,7 +286,7 @@ protected String doExecuteProvisioning(\n                         Collections.singleton(profile.getTask().getSourceRealm().getFullPath()),\n                         cond,\n                         provision.getAnyType().getKind());\n-                for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1 && !interrupt; page++) {\n                     List<? extends Any<?>> anys = searchDAO.search(\n                             Collections.singleton(profile.getTask().getSourceRealm().getFullPath()),\n                             cond,\n@@ -299,12 +299,16 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n-        if (!profile.isDryRun()) {\n+        if (!profile.isDryRun() && !interrupt) {\n             for (PushActions action : actions) {\n                 action.afterAll(profile);\n             }\n         }\n \n+        if (interrupt) {\n+            interrupted = true;\n+        }\n+\n         status.set(\"Push done\");\n \n         String result = createReport(profile.getResults(), pushTask.getResource(), dryRun);"},{"sha":"4320b9abb75bcdd73ee2c069dbb8db8b0290c8ac","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SchedulingPullActions.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSchedulingPullActions.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.util.Map;\n-import java.util.UUID;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n@@ -43,6 +44,8 @@\n  */\n public abstract class SchedulingPullActions implements PullActions {\n \n+    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n+\n     @Autowired\n     protected SchedulerFactoryBean scheduler;\n \n@@ -52,7 +55,7 @@ protected <T extends Job> void schedule(final Class<T> reference, final Map<Stri\n         @SuppressWarnings(\"unchecked\")\n         T jobInstance = (T) ApplicationContextProvider.getBeanFactory().\n                 createBean(reference, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        String jobName = getClass().getName() + UUID.randomUUID();\n+        String jobName = getClass().getName() + UUID_GENERATOR.generate();\n \n         jobMap.put(JobManager.DOMAIN_KEY, AuthContextUtils.getDomain());\n "},{"sha":"ce6d940923589a309326f1247a9e8af128f07552","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSampleJobDelegate.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJobDelegate.java?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -48,8 +48,18 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n                 : \"\") + \"RUNNING\";\n     }\n \n+    @Override\n+    public void interrupt() {\n+    }\n+\n+    @Override\n+    public boolean isInterrupted() {\n+        return false;\n+    }\n+\n     @Override\n     protected boolean hasToBeRegistered(final TaskExec execution) {\n         return true;\n     }\n+\n }"},{"sha":"6a8a468c4d5d1c9724b788b10afc61d0d40d441e","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/configurationparameters.adoc","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/83531c9af77d484229581dd28f9cc1ec6914ae69/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fconfigurationparameters.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/83531c9af77d484229581dd28f9cc1ec6914ae69/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fconfigurationparameters.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fconfigurationparameters.adoc?ref=83531c9af77d484229581dd28f9cc1ec6914ae69","patch":"@@ -49,7 +49,6 @@ mechanism to work properly;\n [WARNING]\n Suspended Users are anyway not allowed to authenticate.\n * `log.lastlogindate` - whether the system updates the `lastLoginDate` field of users upon authentication;\n-* `tasks.interruptMaxRetries` - how many attempts shall be made when interrupting a running <<task,task>>;\n * `return.password.value` - whether the hashed password value shall be returned when reading users;\n * `identity.recertification.day.interval` - number of days between\n <<identity-recertification,identity recertifications>>;"}]}