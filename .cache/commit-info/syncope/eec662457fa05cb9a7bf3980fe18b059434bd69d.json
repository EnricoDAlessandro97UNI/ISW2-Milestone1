{"sha":"eec662457fa05cb9a7bf3980fe18b059434bd69d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmVlYzY2MjQ1N2ZhMDVjYjlhN2JmMzk4MGZlMThiMDU5NDM0YmQ2OWQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-06T10:00:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-06T10:00:19Z"},"message":"[SYNCOPE-725] Refactoring completed","tree":{"sha":"2e667b9ed210094d17fcd35cae01c1e8d52b6075","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2e667b9ed210094d17fcd35cae01c1e8d52b6075"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/eec662457fa05cb9a7bf3980fe18b059434bd69d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eec662457fa05cb9a7bf3980fe18b059434bd69d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/eec662457fa05cb9a7bf3980fe18b059434bd69d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/eec662457fa05cb9a7bf3980fe18b059434bd69d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b845cf52cf5fbb16fe14e9c517d21e5e1669f713","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b845cf52cf5fbb16fe14e9c517d21e5e1669f713","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b845cf52cf5fbb16fe14e9c517d21e5e1669f713"}],"stats":{"total":2480,"additions":683,"deletions":1797},"files":[{"sha":"f7cd2e892adac642e5250e68869a8c0d08bdc58b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":4,"deletions":30,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -136,33 +136,11 @@ public void execute(final String schema) {\n             }\n         }\n \n-        // 4. derived attributes\n-        updatedAttrs = updated.getDerAttrMap();\n-        originalAttrs = original.getDerAttrMap();\n-\n-        result.getDerAttrs().clear();\n-\n-        if (!incremental) {\n-            for (String schema : CollectionUtils.subtract(originalAttrs.keySet(), updatedAttrs.keySet())) {\n-                result.getDerAttrs().add(new AttrPatch.Builder().\n-                        operation(PatchOperation.DELETE).\n-                        attrTO(new AttrTO.Builder().schema(schema).build()).\n-                        build());\n-            }\n-        }\n-\n-        for (String schema : CollectionUtils.subtract(updatedAttrs.keySet(), originalAttrs.keySet())) {\n-            result.getDerAttrs().add(new AttrPatch.Builder().\n-                    operation(PatchOperation.ADD_REPLACE).\n-                    attrTO(new AttrTO.Builder().schema(schema).build()).\n-                    build());\n-        }\n-\n-        // 5. virtual attributes\n+        // 4. virtual attributes\n         result.getVirAttrs().clear();\n         result.getVirAttrs().addAll(updated.getVirAttrs());\n \n-        // 6. resources\n+        // 5. resources\n         result.getResources().clear();\n \n         if (!incremental) {\n@@ -431,15 +409,11 @@ private static <T extends AnyTO, K extends AnyPatch> void patch(final T to, fina\n         result.getPlainAttrs().clear();\n         result.getPlainAttrs().addAll(AnyOperations.patch(to.getPlainAttrMap(), patch.getPlainAttrs()));\n \n-        // 3. derived attributes\n-        result.getDerAttrs().clear();\n-        result.getDerAttrs().addAll(AnyOperations.patch(to.getDerAttrMap(), patch.getDerAttrs()));\n-\n-        // 4. virtual attributes\n+        // 3. virtual attributes\n         result.getVirAttrs().clear();\n         result.getVirAttrs().addAll(patch.getVirAttrs());\n \n-        // 5. resources\n+        // 4. resources\n         for (StringPatchItem resourcePatch : patch.getResources()) {\n             switch (resourcePatch.getOperation()) {\n                 case ADD_REPLACE:"},{"sha":"48d7778ca5c78acf9c52241b295370cb02807c4b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/AnyPatch.java","status":"modified","additions":4,"deletions":11,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FAnyPatch.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -42,8 +42,6 @@ public abstract class AnyPatch extends AbstractBaseBean {\n \n     private final Set<AttrPatch> plainAttrs = new HashSet<>();\n \n-    private final Set<AttrPatch> derAttrs = new HashSet<>();\n-\n     private final Set<AttrTO> virAttrs = new HashSet<>();\n \n     private final Set<StringPatchItem> resources = new HashSet<>();\n@@ -79,13 +77,6 @@ public Set<AttrPatch> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n-    @XmlElementWrapper(name = \"derAttrs\")\n-    @XmlElement(name = \"attribute\")\n-    @JsonProperty(\"derAttrs\")\n-    public Set<AttrPatch> getDerAttrs() {\n-        return derAttrs;\n-    }\n-\n     @XmlElementWrapper(name = \"virAttrs\")\n     @XmlElement(name = \"attribute\")\n     @JsonProperty(\"virAttrs\")\n@@ -105,7 +96,9 @@ public Set<StringPatchItem> getResources() {\n      */\n     @JsonIgnore\n     public boolean isEmpty() {\n-        return realm == null && auxClasses.isEmpty() && plainAttrs.isEmpty() && derAttrs.isEmpty()\n-                && virAttrs.isEmpty() && resources.isEmpty();\n+        return realm == null\n+                && auxClasses.isEmpty()\n+                && plainAttrs.isEmpty() && virAttrs.isEmpty()\n+                && resources.isEmpty();\n     }\n }"},{"sha":"9d6770ff3d25be322247efada5d9155b60c28228","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -67,7 +67,6 @@ public enum ClientExceptionType {\n     GroupOwnership(Response.Status.BAD_REQUEST),\n     Scheduling(Response.Status.BAD_REQUEST),\n     DelegatedAdministration(Response.Status.FORBIDDEN),\n-    UnallowedSchemas(Response.Status.BAD_REQUEST),\n     Unknown(Response.Status.BAD_REQUEST),\n     Workflow(Response.Status.BAD_REQUEST);\n "},{"sha":"e0f80936e97d30a51bd1cd29435ba464d4a25940","filename":"common/lib/src/test/java/org/apache/syncope/common/lib/JSONTest.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJSONTest.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -24,13 +24,11 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n import java.io.StringWriter;\n-import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.LongPatchItem;\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n@@ -82,10 +80,6 @@ public void patch() throws IOException {\n                 build());\n         assertNotNull(patch.getPassword().getValue());\n         patch.getRoles().add(new LongPatchItem.Builder().operation(PatchOperation.DELETE).value(7L).build());\n-        patch.getDerAttrs().add(new AttrPatch.Builder().\n-                operation(PatchOperation.ADD_REPLACE).\n-                attrTO(new AttrTO.Builder().schema(\"derived\").build()).\n-                build());\n \n         ObjectMapper mapper = new ObjectMapper();\n "},{"sha":"b4795f6ddde4da38a1316f992794ac2bf321c590","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -218,7 +218,7 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n         Triple<ExternalResource, AnyType, Provision> init = connObjectInit(key, anyTypeKey);\n \n         // 1. find any\n-        Any<?, ?> any = init.getMiddle().getKind() == AnyTypeKind.USER\n+        Any<?> any = init.getMiddle().getKind() == AnyTypeKind.USER\n                 ? userDAO.find(anyKey)\n                 : init.getMiddle().getKind() == AnyTypeKind.ANY_OBJECT\n                         ? anyObjectDAO.find(anyKey)"},{"sha":"986adf4aa87ea1736d1e7d8e13b8408e35054c3f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/jexl/JexlUtils.java","status":"modified","additions":15,"deletions":43,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fjexl%2FJexlUtils.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -25,6 +25,7 @@\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;\n import org.apache.commons.jexl2.Expression;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.JexlEngine;\n@@ -34,10 +35,12 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -139,7 +142,7 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n         }\n \n         if (object instanceof Any) {\n-            Any<?, ?> any = (Any<?, ?>) object;\n+            Any<?> any = (Any<?>) object;\n             if (any.getRealm() != null) {\n                 context.set(\"realm\", any.getRealm().getName());\n             }\n@@ -148,12 +151,8 @@ public static JexlContext addFieldsToContext(final Object object, final JexlCont\n         return context;\n     }\n \n-    public static JexlContext addPlainAttrsToContext(final Collection<? extends PlainAttr<?>> attrs,\n-            final JexlContext jexlContext) {\n-\n-        JexlContext context = jexlContext == null\n-                ? new MapContext()\n-                : jexlContext;\n+    public static void addPlainAttrsToContext(\n+            final Collection<? extends PlainAttr<?>> attrs, final JexlContext jexlContext) {\n \n         for (PlainAttr<?> attr : attrs) {\n             if (attr.getSchema() != null) {\n@@ -164,55 +163,28 @@ public static JexlContext addPlainAttrsToContext(final Collection<? extends Plai\n \n                 LOG.debug(\"Add attribute {} with value {}\", attr.getSchema().getKey(), expressionValue);\n \n-                context.set(attr.getSchema().getKey(), expressionValue);\n+                jexlContext.set(attr.getSchema().getKey(), expressionValue);\n             }\n         }\n-\n-        return context;\n     }\n \n-    public static JexlContext addDerAttrsToContext(final Collection<? extends DerAttr> derAttrs,\n-            final Collection<? extends PlainAttr<?>> attrs, final JexlContext jexlContext) {\n-\n-        JexlContext context = jexlContext == null\n-                ? new MapContext()\n-                : jexlContext;\n-\n-        for (DerAttr<?> derAttr : derAttrs) {\n-            if (derAttr.getSchema() != null) {\n-                String expressionValue = derAttr.getValue(attrs);\n-                if (expressionValue == null) {\n-                    expressionValue = StringUtils.EMPTY;\n-                }\n-\n-                LOG.debug(\"Add derived attribute {} with value {}\", derAttr.getSchema().getKey(), expressionValue);\n+    public static void addDerAttrsToContext(final Any<?> any, final JexlContext jexlContext) {\n+        Map<DerSchema, String> derAttrs =\n+                ApplicationContextProvider.getBeanFactory().getBean(DerAttrHandler.class).getValues(any);\n \n-                context.set(derAttr.getSchema().getKey(), expressionValue);\n-            }\n+        for (Map.Entry<DerSchema, String> entry : derAttrs.entrySet()) {\n+            jexlContext.set(entry.getKey().getKey(), entry.getValue());\n         }\n-\n-        return context;\n     }\n \n-    public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?, ?> any) {\n+    public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?> any) {\n         JexlContext jexlContext = new MapContext();\n         addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n-        addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n+        addDerAttrsToContext(any, jexlContext);\n \n         return Boolean.parseBoolean(evaluate(mandatoryCondition, jexlContext));\n     }\n \n-    public static String evaluate(final String expression,\n-            final Any<?, ?> any, final Collection<? extends PlainAttr<?>> attributes) {\n-\n-        JexlContext jexlContext = new MapContext();\n-        JexlUtils.addPlainAttrsToContext(attributes, jexlContext);\n-        JexlUtils.addFieldsToContext(any, jexlContext);\n-\n-        // Evaluate expression using the context prepared before\n-        return evaluate(expression, jexlContext);\n-    }\n-\n     public static String evaluate(final String expression, final AnyTO anyTO) {\n         final JexlContext context = new MapContext();\n "},{"sha":"288623160c4e1ddfcddc19806194b4aa34970eac","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/utils/MappingUtils.java","status":"modified","additions":54,"deletions":44,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Futils%2FMappingUtils.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -44,7 +44,6 @@\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -60,15 +59,18 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n import org.identityconnectors.framework.common.FrameworkUtil;\n@@ -94,18 +96,24 @@ public class MappingUtils {\n \n     private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n-    @Autowired\n-    private UserDAO userDAO;\n-\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private DerAttrHandler derAttrHandler;\n+\n     @Autowired\n     private VirAttrHandler virAttrHandler;\n \n@@ -204,7 +212,7 @@ public static List<MappingItem> getSyncMappingItems(final Provision provision) {\n      * @param connObjectKey connector object key\n      * @return the value to be propagated as __NAME__\n      */\n-    public static Name evaluateNAME(final Any<?, ?> any, final Provision provision, final String connObjectKey) {\n+    public static Name evaluateNAME(final Any<?> any, final Provision provision, final String connObjectKey) {\n         if (StringUtils.isBlank(connObjectKey)) {\n             // LOG error but avoid to throw exception: leave it to the external resource\n             LOG.error(\"Missing ConnObjectKey for '{}': \", provision.getResource());\n@@ -219,7 +227,7 @@ public static Name evaluateNAME(final Any<?, ?> any, final Provision provision,\n             JexlContext jexlContext = new MapContext();\n             JexlUtils.addFieldsToContext(any, jexlContext);\n             JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n-            JexlUtils.addDerAttrsToContext(any.getDerAttrs(), any.getPlainAttrs(), jexlContext);\n+            JexlUtils.addDerAttrsToContext(any, jexlContext);\n             evalConnObjectLink = JexlUtils.evaluate(connObjectLink, jexlContext);\n         }\n \n@@ -299,7 +307,7 @@ public static OperationOptions buildOperationOptions(final Iterator<? extends Ma\n      */\n     @Transactional(readOnly = true)\n     public Pair<String, Set<Attribute>> prepareAttrs(\n-            final Any<?, ?> any,\n+            final Any<?> any,\n             final String password,\n             final boolean changePwd,\n             final Boolean enable,\n@@ -371,9 +379,9 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n      * @return connObjectLink + prepared attribute\n      */\n     private Pair<String, Attribute> prepareAttr(\n-            final Provision provision, final MappingItem mapItem, final Any<?, ?> any, final String password) {\n+            final Provision provision, final MappingItem mapItem, final Any<?> any, final String password) {\n \n-        List<Any<?, ?>> anys = new ArrayList<>();\n+        List<Any<?>> anys = new ArrayList<>();\n \n         switch (mapItem.getIntMappingType().getAnyTypeKind()) {\n             case USER:\n@@ -480,26 +488,24 @@ private Pair<String, Attribute> prepareAttr(\n                     result = new ImmutablePair<>(\n                             null, AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n                 }\n-            } else {\n-                if ((schema != null && schema.isMultivalue())\n-                        || anyUtilsFactory.getInstance(any).getAnyTypeKind()\n-                        != mapItem.getIntMappingType().getAnyTypeKind()) {\n+            } else if ((schema != null && schema.isMultivalue())\n+                    || anyUtilsFactory.getInstance(any).getAnyTypeKind()\n+                    != mapItem.getIntMappingType().getAnyTypeKind()) {\n \n-                    result = new ImmutablePair<>(\n-                            null, AttributeBuilder.build(extAttrName, objValues));\n-                } else {\n-                    result = new ImmutablePair<>(\n-                            null, objValues.isEmpty()\n-                                    ? AttributeBuilder.build(extAttrName)\n-                                    : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n-                }\n+                result = new ImmutablePair<>(\n+                        null, AttributeBuilder.build(extAttrName, objValues));\n+            } else {\n+                result = new ImmutablePair<>(\n+                        null, objValues.isEmpty()\n+                                ? AttributeBuilder.build(extAttrName)\n+                                : AttributeBuilder.build(extAttrName, objValues.iterator().next()));\n             }\n         }\n \n         return result;\n     }\n \n-    private String getGroupOwnerValue(final Provision provision, final Any<?, ?> any) {\n+    private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n         Pair<String, Attribute> preparedAttr = prepareAttr(provision, getConnObjectKeyItem(provision), any, null);\n         String connObjectKey = preparedAttr.getKey();\n \n@@ -516,7 +522,7 @@ private String getGroupOwnerValue(final Provision provision, final Any<?, ?> any\n      */\n     @Transactional(readOnly = true)\n     public List<PlainAttrValue> getIntValues(final Provision provision,\n-            final MappingItem mappingItem, final List<Any<?, ?>> anys) {\n+            final MappingItem mappingItem, final List<Any<?>> anys) {\n \n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", anys, mappingItem.getIntMappingType());\n \n@@ -527,7 +533,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n             case UserPlainSchema:\n             case GroupPlainSchema:\n             case AnyObjectPlainSchema:\n-                for (Any<?, ?> any : anys) {\n+                for (Any<?> any : anys) {\n                     PlainAttr<?> attr = any.getPlainAttr(mappingItem.getIntAttrName());\n                     if (attr != null) {\n                         if (attr.getUniqueValue() != null) {\n@@ -555,20 +561,24 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n             case UserDerivedSchema:\n             case GroupDerivedSchema:\n             case AnyObjectDerivedSchema:\n-                for (Any<?, ?> any : anys) {\n-                    AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-                    DerAttr<?> attr = any.getDerAttr(mappingItem.getIntAttrName());\n-                    if (attr != null) {\n-                        PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n-                        attrValue.setStringValue(attr.getValue(any.getPlainAttrs()));\n-                        values.add(attrValue);\n-                    }\n+                DerSchema derSchema = derSchemaDAO.find(mappingItem.getIntAttrName());\n+                if (derSchema != null) {\n+                    for (Any<?> any : anys) {\n+                        String value = derAttrHandler.getValue(any, derSchema);\n+                        if (value != null) {\n+                            AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+                            PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n+                            attrValue.setStringValue(value);\n+                            values.add(attrValue);\n \n-                    LOG.debug(\"Retrieved attribute {}\"\n-                            + \"\\n* IntAttrName {}\"\n-                            + \"\\n* IntMappingType {}\"\n-                            + \"\\n* Attribute values {}\",\n-                            attr, mappingItem.getIntAttrName(), mappingItem.getIntMappingType(), values);\n+                            LOG.debug(\"Retrieved values for {}\"\n+                                    + \"\\n* IntAttrName {}\"\n+                                    + \"\\n* IntMappingType {}\"\n+                                    + \"\\n* Attribute values {}\",\n+                                    derSchema.getKey(), mappingItem.getIntAttrName(), mappingItem.getIntMappingType(),\n+                                    values);\n+                        }\n+                    }\n                 }\n                 break;\n \n@@ -580,7 +590,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n \n                 VirSchema virSchema = virSchemaDAO.find(mappingItem.getIntAttrName());\n                 if (virSchema != null) {\n-                    for (Any<?, ?> any : anys) {\n+                    for (Any<?> any : anys) {\n                         LOG.debug(\"Expire entry cache {}-{}\", any.getKey(), mappingItem.getIntAttrName());\n                         virAttrCache.expire(any.getType().getKey(), any.getKey(), mappingItem.getIntAttrName());\n \n@@ -604,7 +614,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n             case UserKey:\n             case GroupKey:\n             case AnyObjectKey:\n-                for (Any<?, ?> any : anys) {\n+                for (Any<?> any : anys) {\n                     AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n                     PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n                     attrValue.setStringValue(any.getKey().toString());\n@@ -613,7 +623,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                 break;\n \n             case Username:\n-                for (Any<?, ?> any : anys) {\n+                for (Any<?> any : anys) {\n                     if (any instanceof User) {\n                         UPlainAttrValue attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n                         attrValue.setStringValue(((User) any).getUsername());\n@@ -623,7 +633,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                 break;\n \n             case GroupName:\n-                for (Any<?, ?> any : anys) {\n+                for (Any<?> any : anys) {\n                     if (any instanceof Group) {\n                         GPlainAttrValue attrValue = entityFactory.newEntity(GPlainAttrValue.class);\n                         attrValue.setStringValue(((Group) any).getName());\n@@ -640,7 +650,7 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n                         ? null\n                         : provision.getMapping();\n \n-                for (Any<?, ?> any : anys) {\n+                for (Any<?> any : anys) {\n                     if (any instanceof Group) {\n                         Group group = (Group) any;\n                         String groupOwnerValue = null;\n@@ -686,9 +696,9 @@ public List<PlainAttrValue> getIntValues(final Provision provision,\n      * @return connObjectKey internal value\n      */\n     @Transactional(readOnly = true)\n-    public String getConnObjectKeyValue(final Any<?, ?> any, final Provision provision) {\n+    public String getConnObjectKeyValue(final Any<?> any, final Provision provision) {\n         List<PlainAttrValue> values = getIntValues(provision, provision.getMapping().getConnObjectKeyItem(),\n-                Collections.<Any<?, ?>>singletonList(any));\n+                Collections.<Any<?>>singletonList(any));\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();"},{"sha":"3d8162b5964f041d102e353495627b99b672a92a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,14 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n \n-public interface AnyDAO<A extends Any<?, ?>> extends DAO<A, Long> {\n+public interface AnyDAO<A extends Any<?>> extends DAO<A, Long> {\n \n     A authFind(Long key);\n \n@@ -55,6 +57,8 @@\n \n     List<A> findAll(Set<String> adminRealms, int page, int itemsPerPage, List<OrderByClause> orderBy);\n \n+    <S extends Schema> Collection<S> findAllowedSchemas(A any, Class<S> reference);\n+\n     int count(Set<String> adminRealms);\n \n     A save(A any);"},{"sha":"a44289030a3ee7003b28be3104e52cb9eddb2ea7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnySearchDAO.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n \n-public interface AnySearchDAO extends DAO<Any<?, ?>, Long> {\n+public interface AnySearchDAO extends DAO<Any<?>, Long> {\n \n     /**\n      * @param adminRealms realms for which the caller owns the proper entitlement(s)\n@@ -42,7 +42,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition\n      */\n-    <T extends Any<?, ?>> List<T> search(\n+    <T extends Any<?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n \n     /**\n@@ -53,7 +53,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition\n      */\n-    <T extends Any<?, ?>> List<T> search(\n+    <T extends Any<?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, List<OrderByClause> orderBy, AnyTypeKind kind);\n \n     /**\n@@ -66,7 +66,7 @@ public interface AnySearchDAO extends DAO<Any<?, ?>, Long> {\n      * @param <T> any\n      * @return the list of any objects matching the given search condition (in the given page)\n      */\n-    <T extends Any<?, ?>> List<T> search(\n+    <T extends Any<?>> List<T> search(\n             Set<String> adminRealms, SearchCond searchCondition, int page, int itemsPerPage,\n             List<OrderByClause> orderBy, AnyTypeKind kind);\n \n@@ -79,5 +79,5 @@ public interface AnySearchDAO extends DAO<Any<?, ?>, Long> {\n      * @param <T> any\n      * @return true if any matches searchCondition\n      */\n-    <T extends Any<?, ?>> boolean matches(T any, SearchCond searchCondition, AnyTypeKind kind);\n+    <T extends Any<?>> boolean matches(T any, SearchCond searchCondition, AnyTypeKind kind);\n }"},{"sha":"ddf0fb5d0175253226e791dc49a599e08f222afa","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DerSchemaDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,9 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n \n-public interface DerSchemaDAO extends SchemaDAO<DerSchema, DerAttr<?>> {\n+public interface DerSchemaDAO extends SchemaDAO<DerSchema> {\n \n }"},{"sha":"c832cdccd838a7eadb6e1f8038ea0a9f27ad8187","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,9 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n-public interface PlainSchemaDAO extends SchemaDAO<PlainSchema, PlainAttr<?>> {\n+public interface PlainSchemaDAO extends SchemaDAO<PlainSchema> {\n+\n+    <T extends PlainAttr<?>> List<T> findAttrs(PlainSchema schema, Class<T> reference);\n \n }"},{"sha":"9e350fb7922a5c143636c59d8d4d3717a46cc4c0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -20,19 +20,16 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n \n-public interface SchemaDAO<S extends Schema, A extends Attr<S, ?>> extends DAO<S, String> {\n+public interface SchemaDAO<S extends Schema> extends DAO<S, String> {\n \n     S find(String name);\n \n     List<S> findByAnyTypeClass(AnyTypeClass anyTypeClass);\n \n     List<S> findAll();\n \n-    <T extends A> List<T> findAttrs(S schema, Class<T> reference);\n-\n     S save(S derSchema);\n \n     void delete(String key);"},{"sha":"1cf64752835d9e02b9f0c2c0223e31e226d386d7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -19,11 +19,10 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n \n-public interface VirSchemaDAO extends SchemaDAO<VirSchema, Attr<VirSchema, ?>> {\n+public interface VirSchemaDAO extends SchemaDAO<VirSchema> {\n \n     List<VirSchema> findByProvision(Provision provision);\n }"},{"sha":"d14d3b0de02dd0b08d9540d585672489df4f4502","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -20,9 +20,8 @@\n \n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import java.util.List;\n-import java.util.Set;\n \n-public interface Any<P extends PlainAttr<?>, D extends DerAttr<?>> extends AnnotatedEntity<Long> {\n+public interface Any<P extends PlainAttr<?>> extends AnnotatedEntity<Long> {\n \n     AnyType getType();\n \n@@ -48,14 +47,6 @@\n \n     List<? extends P> getPlainAttrs();\n \n-    boolean add(D derAttr);\n-\n-    boolean remove(D derAttr);\n-\n-    D getDerAttr(String derSchemaName);\n-\n-    List<? extends D> getDerAttrs();\n-\n     boolean add(ExternalResource resource);\n \n     boolean remove(ExternalResource resource);\n@@ -69,10 +60,4 @@\n     boolean remove(AnyTypeClass auxClass);\n \n     List<? extends AnyTypeClass> getAuxClasses();\n-\n-    Set<PlainSchema> getAllowedPlainSchemas();\n-\n-    Set<DerSchema> getAllowedDerSchemas();\n-\n-    Set<VirSchema> getAllowedVirSchemas();\n }"},{"sha":"377f7fe400d9b5b1ff904bea5fa37ed1c3734f93","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtils.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtils.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,15 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import java.util.Set;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n \n public interface AnyUtils {\n \n     AnyTypeKind getAnyTypeKind();\n \n-    <T extends Any<?, ?>> Class<T> anyClass();\n+    <T extends Any<?>> Class<T> anyClass();\n \n     <T extends PlainAttr<?>> Class<T> plainAttrClass();\n \n@@ -40,15 +42,15 @@ public interface AnyUtils {\n \n     <T extends PlainAttrValue> T newPlainAttrUniqueValue();\n \n-    <T extends DerAttr<?>> Class<T> derAttrClass();\n-\n-    <T extends DerAttr<?>> T newDerAttr();\n-\n     IntMappingType plainIntMappingType();\n \n     IntMappingType derIntMappingType();\n \n     IntMappingType virIntMappingType();\n \n     <T extends AnyTO> T newAnyTO();\n+\n+    Set<ExternalResource> getAllResources(Any<?> any);\n+\n+    <S extends Schema> Set<S> getAllowedSchemas(Any<?> any, Class<S> reference);\n }"},{"sha":"d3cbfb6f956f2c8526cfa76b9cb40b2bebe24aca","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtilsFactory.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -24,7 +24,5 @@ public interface AnyUtilsFactory {\n \n     AnyUtils getInstance(AnyTypeKind anyTypeKind);\n \n-    AnyUtils getInstance(String anyTypeKind);\n-\n-    AnyUtils getInstance(Any<?, ?> any);\n+    AnyUtils getInstance(Any<?> any);\n }"},{"sha":"500b8359994a097ad89f9a3eaa95ede3e795938b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Attr.java","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,30 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-public interface Attr<S extends Schema, O extends Any<?, ?>> extends Entity<Long> {\n-\n-    O getOwner();\n-\n-    void setOwner(O owner);\n-\n-    S getSchema();\n-\n-    void setSchema(S schema);\n-}"},{"sha":"ff15a4a66e2311349c22e84e7617599fd408d820","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DerAttr.java","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDerAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,26 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity;\n-\n-import java.util.Collection;\n-\n-public interface DerAttr<O extends Any<?, ?>> extends Attr<DerSchema, O> {\n-\n-    String getValue(Collection<? extends PlainAttr<?>> attrs);\n-}"},{"sha":"cae2ad0cfb8bdada4bb0e5ac62d4b416ed52d4f1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynGroupMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n-public interface DynGroupMembership<A extends Any<?, ?>> extends DynMembership<A> {\n+public interface DynGroupMembership<A extends Any<?>> extends DynMembership<A> {\n \n     Group getGroup();\n "},{"sha":"2ad2425b3559adb152c632b930b50ae5a2b9c26e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n \n-public interface DynMembership<A extends Any<?, ?>> extends Entity<Long> {\n+public interface DynMembership<A extends Any<?>> extends Entity<Long> {\n \n     String getFIQLCond();\n "},{"sha":"aae422f6331a0be3d24a7b86886435e148394b84","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Membership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FMembership.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n-public interface Membership<L extends Any<?, ?>> extends Relationship<L, Group> {\n+public interface Membership<L extends Any<?>> extends Relationship<L, Group> {\n \n     @Override\n     MembershipType getType();"},{"sha":"5107f54d8ba22fc46220c3a956aaf87184ba1b33","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/PlainAttr.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FPlainAttr.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -20,7 +20,15 @@\n \n import java.util.List;\n \n-public interface PlainAttr<O extends Any<?, ?>> extends Attr<PlainSchema, O> {\n+public interface PlainAttr<A extends Any<?>> extends Entity<Long> {\n+\n+    A getOwner();\n+\n+    void setOwner(A owner);\n+\n+    PlainSchema getSchema();\n+\n+    void setSchema(PlainSchema schema);\n \n     void add(String value, AnyUtils anyUtils);\n "},{"sha":"0114908890f6ccd6235392b8aeca69f28d77dea0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Relationship.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRelationship.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-public interface Relationship<L extends Any<?, ?>, R extends Any<?, ?>> extends Entity<Long> {\n+public interface Relationship<L extends Any<?>, R extends Any<?>> extends Entity<Long> {\n \n     RelationshipType getType();\n "},{"sha":"ca5854a4affbfc81cfc4354276d8cbcc7898aa24","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/ADerAttr.java","status":"removed","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FADerAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,24 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.anyobject;\n-\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-\n-public interface ADerAttr extends DerAttr<AnyObject> {\n-}"},{"sha":"666b82c0df26ca2879016a0fed9658b9f63b89d8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/anyobject/AnyObject.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fanyobject%2FAnyObject.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n \n-public interface AnyObject extends Any<APlainAttr, ADerAttr> {\n+public interface AnyObject extends Any<APlainAttr> {\n \n     boolean add(ARelationship relationship);\n "},{"sha":"f31b21a369e701b35c38a0646b9e650b57826c46","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/conf/Conf.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fconf%2FConf.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -20,9 +20,8 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n \n-public interface Conf extends Any<CPlainAttr, DerAttr<?>> {\n+public interface Conf extends Any<CPlainAttr> {\n \n     void setKey(Long key);\n "},{"sha":"04d1f852aee6623e5e6a2892157632f3e448abf8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/GDerAttr.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGDerAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.group;\n-\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-\n-public interface GDerAttr extends DerAttr<Group> {\n-\n-}"},{"sha":"56fe5db32cb68af39ea4373d24958d713cf55e30","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n-public interface Group extends Any<GPlainAttr, GDerAttr> {\n+public interface Group extends Any<GPlainAttr> {\n \n     String getName();\n \n@@ -51,18 +51,6 @@ public interface Group extends Any<GPlainAttr, GDerAttr> {\n     @Override\n     List<? extends GPlainAttr> getPlainAttrs();\n \n-    @Override\n-    boolean add(GDerAttr attr);\n-\n-    @Override\n-    boolean remove(GDerAttr derAttr);\n-\n-    @Override\n-    GDerAttr getDerAttr(String derSchemaName);\n-\n-    @Override\n-    List<? extends GDerAttr> getDerAttrs();\n-\n     ADynGroupMembership getADynMembership();\n \n     void setADynMembership(ADynGroupMembership aDynMembership);"},{"sha":"b3ebdecfc6ceabed4a4e04c01b864242dd079ce1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/UDerAttr.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUDerAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,25 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.api.entity.user;\n-\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-\n-public interface UDerAttr extends DerAttr<User> {\n-\n-}"},{"sha":"cbec1c90ebded1ebe1dd2820bbf146c489074567","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n \n-public interface User extends Any<UPlainAttr, UDerAttr> {\n+public interface User extends Any<UPlainAttr> {\n \n     String getUsername();\n \n@@ -104,18 +104,6 @@ public interface User extends Any<UPlainAttr, UDerAttr> {\n     @Override\n     List<? extends UPlainAttr> getPlainAttrs();\n \n-    @Override\n-    boolean add(UDerAttr attr);\n-\n-    @Override\n-    boolean remove(UDerAttr derAttr);\n-\n-    @Override\n-    UDerAttr getDerAttr(String derSchemaName);\n-\n-    @Override\n-    List<? extends UDerAttr> getDerAttrs();\n-\n     boolean add(Role role);\n \n     boolean remove(Role role);"},{"sha":"c70c7c7d5a34a8108bd90f459087c149e3dd63fd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -54,15 +54,13 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n import org.apache.syncope.core.persistence.jpa.entity.JPAReportExec;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n@@ -85,9 +83,7 @@ public class XMLContentExporter extends AbstractContentDealer implements Content\n             new HashSet<>(Arrays.asList(new String[] {\n                 \"QRTZ_\", \"LOGGING\", JPAReportExec.TABLE, JPATaskExec.TABLE,\n                 JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE, JPAUPlainAttrUniqueValue.TABLE,\n-                JPAUDerAttr.TABLE,\n                 JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n-                JPAADerAttr.TABLE,\n                 JPAARelationship.TABLE, JPAAMembership.TABLE, JPAURelationship.TABLE, JPAUMembership.TABLE\n             }));\n "},{"sha":"30fcf2f7a45f412c5efe04164ceac7ad0ac7f847","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":46,"deletions":1,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -20,6 +20,7 @@\n \n import java.io.StringReader;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashSet;\n@@ -43,17 +44,25 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n-public abstract class AbstractAnyDAO<A extends Any<?, ?>> extends AbstractDAO<A, Long> implements AnyDAO<A> {\n+public abstract class AbstractAnyDAO<A extends Any<?>> extends AbstractDAO<A, Long> implements AnyDAO<A> {\n \n     @Autowired\n     protected PlainSchemaDAO plainSchemaDAO;\n@@ -407,6 +416,42 @@ public List<A> findAll(final Set<String> adminRealms,\n                 getAnyUtils().getAnyTypeKind());\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <S extends Schema> Collection<S> findAllowedSchemas(final A any, final Class<S> reference) {\n+        Set<AnyTypeClass> classes = new HashSet<>();\n+        classes.addAll(any.getType().getClasses());\n+        classes.addAll(any.getAuxClasses());\n+        if (any instanceof User) {\n+            for (UMembership memb : ((User) any).getMemberships()) {\n+                for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n+                    classes.addAll(typeExtension.getAuxClasses());\n+                }\n+            }\n+        } else if (any instanceof AnyObject) {\n+            for (AMembership memb : ((AnyObject) any).getMemberships()) {\n+                for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n+                    classes.addAll(typeExtension.getAuxClasses());\n+                }\n+            }\n+        }\n+\n+        Set<S> result = new HashSet<>();\n+\n+        for (AnyTypeClass typeClass : classes) {\n+            if (reference.equals(PlainSchema.class)) {\n+                result.addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n+            } else if (reference.equals(DerSchema.class)) {\n+                result.addAll((Collection<? extends S>) typeClass.getDerSchemas());\n+            } else if (reference.equals(VirSchema.class)) {\n+                result.addAll((Collection<? extends S>) typeClass.getVirSchemas());\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n     @Override\n     public final int count(final Set<String> adminRealms) {\n         return searchDAO.count(adminRealms, getAllMatchingCond(), getAnyUtils().getAnyTypeKind());"},{"sha":"7b1df89061316fa2d95e50a161a59480446f4e31","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -67,7 +67,7 @@\n import org.springframework.util.ReflectionUtils;\n \n @Repository\n-public class JPAAnySearchDAO extends AbstractDAO<Any<?, ?>, Long> implements AnySearchDAO {\n+public class JPAAnySearchDAO extends AbstractDAO<Any<?>, Long> implements AnySearchDAO {\n \n     private static final String EMPTY_ATTR_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n \n@@ -150,22 +150,22 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n     }\n \n     @Override\n-    public <T extends Any<?, ?>> List<T> search(\n+    public <T extends Any<?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n \n         return search(adminRealms, searchCondition, Collections.<OrderByClause>emptyList(), typeKind);\n     }\n \n     @Override\n-    public <T extends Any<?, ?>> List<T> search(\n+    public <T extends Any<?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final List<OrderByClause> orderBy,\n             final AnyTypeKind typeKind) {\n \n         return search(adminRealms, searchCondition, -1, -1, orderBy, typeKind);\n     }\n \n     @Override\n-    public <T extends Any<?, ?>> List<T> search(\n+    public <T extends Any<?>> List<T> search(\n             final Set<String> adminRealms, final SearchCond searchCondition, final int page, final int itemsPerPage,\n             final List<OrderByClause> orderBy, final AnyTypeKind typeKind) {\n \n@@ -189,7 +189,7 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n     }\n \n     @Override\n-    public <T extends Any<?, ?>> boolean matches(\n+    public <T extends Any<?>> boolean matches(\n             final T any, final SearchCond searchCondition, final AnyTypeKind typeKind) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<>());\n@@ -347,7 +347,7 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T extends Any<?, ?>> List<T> doSearch(final Set<String> adminRealms,\n+    private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n             final SearchCond nodeCond, final int page, final int itemsPerPage, final List<OrderByClause> orderBy,\n             final AnyTypeKind typeKind) {\n "},{"sha":"99b90144a734612b9dedd30b7afdfa4c6c75685f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerAttrDAO.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerAttrDAO.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,86 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import java.util.List;\n-import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.ADerAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n-import org.springframework.stereotype.Repository;\n-\n-@Repository\n-public class JPADerAttrDAO extends AbstractDAO<DerAttr<?>, Long> implements DerAttrDAO {\n-\n-    public <T extends DerAttr<?>> Class<? extends AbstractDerAttr<?>> getJPAEntityReference(\n-            final Class<T> reference) {\n-\n-        return GDerAttr.class.isAssignableFrom(reference)\n-                ? JPAGDerAttr.class\n-                : ADerAttr.class.isAssignableFrom(reference)\n-                        ? JPAADerAttr.class\n-                        : UDerAttr.class.isAssignableFrom(reference)\n-                                ? JPAUDerAttr.class\n-                                : null;\n-    }\n-\n-    @Override\n-    public <T extends DerAttr<?>> T find(final Long key, final Class<T> reference) {\n-        return reference.cast(entityManager().find(getJPAEntityReference(reference), key));\n-    }\n-\n-    @Override\n-    public <T extends DerAttr<?>> List<T> findAll(final Class<T> reference) {\n-        TypedQuery<T> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + getJPAEntityReference(reference).getSimpleName() + \" e\", reference);\n-        return query.getResultList();\n-    }\n-\n-    @Override\n-    public <T extends DerAttr<?>> T save(final T derAttr) {\n-        return entityManager().merge(derAttr);\n-    }\n-\n-    @Override\n-    public <T extends DerAttr<?>> void delete(final Long key, final Class<T> reference) {\n-        T derAttr = find(key, reference);\n-        if (derAttr == null) {\n-            return;\n-        }\n-\n-        delete(derAttr);\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends DerAttr<?>> void delete(final T derAttr) {\n-        if (derAttr.getOwner() != null) {\n-            ((Any<?, T>) derAttr.getOwner()).remove(derAttr);\n-        }\n-\n-        entityManager().remove(derAttr);\n-    }\n-}"},{"sha":"822149372d9044aa092a3fa7bc8f33d9da12f086","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":1,"deletions":25,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -21,13 +21,10 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPADerSchema;\n@@ -37,9 +34,6 @@\n @Repository\n public class JPADerSchemaDAO extends AbstractDAO<DerSchema, String> implements DerSchemaDAO {\n \n-    @Autowired\n-    private DerAttrDAO derAttrDAO;\n-\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n@@ -67,18 +61,6 @@ public List<DerSchema> findAll() {\n         return query.getResultList();\n     }\n \n-    @Override\n-    public <T extends DerAttr<?>> List<T> findAttrs(final DerSchema schema, final Class<T> reference) {\n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(((JPADerAttrDAO) derAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n-                append(\" e WHERE e.schema=:schema\");\n-\n-        TypedQuery<T> query = entityManager().createQuery(queryString.toString(), reference);\n-        query.setParameter(\"schema\", schema);\n-\n-        return query.getResultList();\n-    }\n-\n     @Override\n     public DerSchema save(final DerSchema derSchema) {\n         return entityManager().merge(derSchema);\n@@ -93,13 +75,7 @@ public void delete(final String key) {\n \n         AnyUtilsFactory anyUtilsFactory = new JPAAnyUtilsFactory();\n         for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n-            AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n-\n-            for (DerAttr<?> attr : findAttrs(schema, anyUtils.derAttrClass())) {\n-                derAttrDAO.delete(attr.getKey(), anyUtils.derAttrClass());\n-            }\n-\n-            resourceDAO.deleteMapping(key, anyUtils.derIntMappingType());\n+            resourceDAO.deleteMapping(key, anyUtilsFactory.getInstance(anyTypeKind).derIntMappingType());\n         }\n \n         if (schema.getAnyTypeClass() != null) {"},{"sha":"66f7290c6fe6d65663334b84505e7df2c8aded99","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -203,7 +203,7 @@ public void delete(final Group group) {\n     }\n \n     private void populateTransitiveResources(\n-            final Group group, final Any<?, ?> any, final Map<Long, PropagationByResource> result) {\n+            final Group group, final Any<?> any, final Map<Long, PropagationByResource> result) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n         for (ExternalResource resource : group.getResources()) {"},{"sha":"975b6e970cf7baef6acb9838f168ab9f9be6ad89","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainAttrDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainAttrDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -68,7 +68,7 @@ public <T extends PlainAttr<?>> void delete(final Long key, final Class<T> refer\n     @SuppressWarnings(\"unchecked\")\n     public <T extends PlainAttr<?>> void delete(final T plainAttr) {\n         if (plainAttr.getOwner() != null) {\n-            ((Any<T, ?>) plainAttr.getOwner()).remove(plainAttr);\n+            ((Any<T>) plainAttr.getOwner()).remove(plainAttr);\n         }\n \n         entityManager().remove(plainAttr);"},{"sha":"aa38d77ef6086118e7c77dc3b0db2788a8e0cae2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n-import java.util.Collections;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -27,7 +26,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n@@ -77,11 +75,6 @@ public List<VirSchema> findAll() {\n         return query.getResultList();\n     }\n \n-    @Override\n-    public <T extends Attr<VirSchema, ?>> List<T> findAttrs(final VirSchema schema, final Class<T> reference) {\n-        return Collections.emptyList();\n-    }\n-\n     @Override\n     public VirSchema save(final VirSchema virSchema) {\n         return entityManager().merge(virSchema);"},{"sha":"ba02c4516a49ca6f6f45b69c4ac3df8dce83d6b8","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAny.java","status":"modified","additions":4,"deletions":83,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAny.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Column;\n@@ -34,23 +33,19 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.AnyCheck;\n \n+@AnyCheck\n @MappedSuperclass\n-public abstract class AbstractAny<P extends PlainAttr<?>, D extends DerAttr<?>>\n+public abstract class AbstractAny<P extends PlainAttr<?>>\n         extends AbstractAnnotatedEntity<Long>\n-        implements Any<P, D> {\n+        implements Any<P> {\n \n     private static final long serialVersionUID = -2666540708092702810L;\n \n@@ -114,18 +109,6 @@ public boolean evaluate(final P plainAttr) {\n         });\n     }\n \n-    @Override\n-    public D getDerAttr(final String derSchemaName) {\n-        return CollectionUtils.find(getDerAttrs(), new Predicate<D>() {\n-\n-            @Override\n-            public boolean evaluate(final D derAttr) {\n-                return derAttr != null && derAttr.getSchema() != null\n-                        && derSchemaName.equals(derAttr.getSchema().getKey());\n-            }\n-        });\n-    }\n-\n     protected abstract List<JPAExternalResource> internalGetResources();\n \n     @Override\n@@ -159,70 +142,8 @@ public List<? extends ExternalResource> getResources() {\n     private void populateAllowedSchemas(final Collection<? extends AnyTypeClass> anyTypeClasses) {\n         for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n             allowedPlainSchemas.addAll(anyTypeClass.getPlainSchemas());\n-        }\n-\n-        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n             allowedDerSchemas.addAll(anyTypeClass.getDerSchemas());\n-        }\n-\n-        for (AnyTypeClass anyTypeClass : anyTypeClasses) {\n             allowedVirSchemas.addAll(anyTypeClass.getVirSchemas());\n         }\n     }\n-\n-    private void populateAllowedSchemas() {\n-        synchronized (this) {\n-            if (allowedPlainSchemas == null) {\n-                allowedPlainSchemas = new HashSet<>();\n-            } else {\n-                allowedPlainSchemas.clear();\n-            }\n-            if (allowedDerSchemas == null) {\n-                allowedDerSchemas = new HashSet<>();\n-            } else {\n-                allowedDerSchemas.clear();\n-            }\n-            if (allowedVirSchemas == null) {\n-                allowedVirSchemas = new HashSet<>();\n-            } else {\n-                allowedVirSchemas.clear();\n-            }\n-\n-            populateAllowedSchemas(getType().getClasses());\n-            populateAllowedSchemas(getAuxClasses());\n-            if (this instanceof User) {\n-                for (UMembership memb : ((User) this).getMemberships()) {\n-                    for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n-                        populateAllowedSchemas(typeExtension.getAuxClasses());\n-                    }\n-                }\n-            }\n-            if (this instanceof AnyObject) {\n-                for (AMembership memb : ((AnyObject) this).getMemberships()) {\n-                    for (TypeExtension typeExtension : memb.getRightEnd().getTypeExtensions()) {\n-                        populateAllowedSchemas(typeExtension.getAuxClasses());\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public Set<PlainSchema> getAllowedPlainSchemas() {\n-        populateAllowedSchemas();\n-        return allowedPlainSchemas;\n-    }\n-\n-    @Override\n-    public Set<DerSchema> getAllowedDerSchemas() {\n-        populateAllowedSchemas();\n-        return allowedDerSchemas;\n-    }\n-\n-    @Override\n-    public Set<VirSchema> getAllowedVirSchemas() {\n-        populateAllowedSchemas();\n-        return allowedVirSchemas;\n-    }\n-\n }"},{"sha":"694b18f47bfbbbe8ec5aad5a0c8536a336b76302","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractAttr.java","status":"removed","additions":0,"deletions":60,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.Collections;\n-import java.util.Set;\n-import org.apache.syncope.core.persistence.api.dao.UnallowedSchemaException;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.Attr;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.Schema;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-\n-public abstract class AbstractAttr<S extends Schema, O extends Any<?, ?>>\n-        extends AbstractEntity<Long> implements Attr<S, O> {\n-\n-    private static final long serialVersionUID = -7722134717360731874L;\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private Set<S> getAllowedSchemas(final O any) {\n-        Set<S> result = Collections.emptySet();\n-\n-        if (getSchema() instanceof PlainSchema) {\n-            result = (Set<S>) any.getAllowedPlainSchemas();\n-        } else if (getSchema() instanceof DerSchema) {\n-            result = (Set<S>) any.getAllowedDerSchemas();\n-        } else if (getSchema() instanceof VirSchema) {\n-            result = (Set<S>) any.getAllowedVirSchemas();\n-        }\n-\n-        return result;\n-    }\n-\n-    protected void checkSchema(final S schema) {\n-        if (schema == null || getOwner() == null) {\n-            throw new IllegalStateException(\"First set owner then schema and finally add values\");\n-        }\n-\n-        if (!getAllowedSchemas(getOwner()).contains(schema)) {\n-            throw new UnallowedSchemaException(schema.getKey());\n-        }\n-    }\n-}"},{"sha":"59f390dfc8edf38f1b01f490252f7baec253f801","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDerAttr.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDerAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import java.util.Collection;\n-import javax.persistence.Column;\n-import javax.persistence.FetchType;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.misc.jexl.JexlUtils;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-\n-@MappedSuperclass\n-public abstract class AbstractDerAttr<O extends Any<?, ?>>\n-        extends AbstractAttr<DerSchema, O> implements DerAttr<O> {\n-\n-    private static final long serialVersionUID = 4740924251090424771L;\n-\n-    @ManyToOne(fetch = FetchType.EAGER)\n-    @Column(name = \"schema_name\")\n-    private JPADerSchema schema;\n-\n-    @Override\n-    public DerSchema getSchema() {\n-        return schema;\n-    }\n-\n-    @Override\n-    public void setSchema(final DerSchema schema) {\n-        checkType(schema, JPADerSchema.class);\n-        this.schema = (JPADerSchema) schema;\n-        checkSchema(this.schema);\n-    }\n-\n-    /**\n-     * @param attributes the set of attributes against which evaluate this derived attribute\n-     * @return the value of this derived attribute\n-     */\n-    @Override\n-    public String getValue(final Collection<? extends PlainAttr<?>> attributes) {\n-        return JexlUtils.evaluate(getSchema().getExpression(), getOwner(), attributes);\n-    }\n-}"},{"sha":"0b77dacd0662e24e1954f3dd844430c946f5acd2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDynMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -24,7 +24,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynMembership;\n \n @MappedSuperclass\n-public abstract class AbstractDynMembership<A extends Any<?, ?>>\n+public abstract class AbstractDynMembership<A extends Any<?>>\n         extends AbstractEntity<Long> implements DynMembership<A> {\n \n     private static final long serialVersionUID = 921821654690948787L;"},{"sha":"f892a8d5e3142d32ff5716c5f6e5a18756f6e1af","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -25,6 +25,7 @@\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -37,11 +38,11 @@\n \n @MappedSuperclass\n @PlainAttrCheck\n-public abstract class AbstractPlainAttr<O extends Any<?, ?>>\n-        extends AbstractAttr<PlainSchema, O> implements PlainAttr<O> {\n+public abstract class AbstractPlainAttr<O extends Any<?>> extends AbstractEntity<Long> implements PlainAttr<O> {\n \n     private static final long serialVersionUID = -9115431608821806124L;\n \n+    @NotNull\n     @ManyToOne(fetch = FetchType.EAGER)\n     @Column(name = \"schema_name\")\n     protected JPAPlainSchema schema;\n@@ -55,13 +56,20 @@ public PlainSchema getSchema() {\n     public void setSchema(final PlainSchema schema) {\n         checkType(schema, JPAPlainSchema.class);\n         this.schema = (JPAPlainSchema) schema;\n-        checkSchema(this.schema);\n     }\n \n     protected abstract boolean addForMultiValue(PlainAttrValue attrValue);\n \n+    private void checkNonNullSchema() {\n+        if (schema == null) {\n+            throw new IllegalStateException(\"First set owner then schema and finally add values\");\n+        }\n+    }\n+\n     @Override\n     public void add(final String value, final PlainAttrValue attrValue) {\n+        checkNonNullSchema();\n+\n         attrValue.setAttr(this);\n         getSchema().getValidator().validate(value, attrValue);\n \n@@ -77,6 +85,8 @@ public void add(final String value, final PlainAttrValue attrValue) {\n \n     @Override\n     public void add(final String value, final AnyUtils anyUtils) {\n+        checkNonNullSchema();\n+\n         PlainAttrValue attrValue;\n         if (getSchema().isUniqueConstraint()) {\n             attrValue = anyUtils.newPlainAttrUniqueValue();"},{"sha":"22c632ac384aebf8d7e4c6a5d63a5819230c23ad","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":54,"deletions":51,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,38 +18,55 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n public class JPAAnyUtils implements AnyUtils {\n \n     private final AnyTypeKind anyTypeKind;\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     protected JPAAnyUtils(final AnyTypeKind typeKind) {\n         this.anyTypeKind = typeKind;\n     }\n@@ -60,7 +77,7 @@ public AnyTypeKind getAnyTypeKind() {\n     }\n \n     @Override\n-    public <T extends Any<?, ?>> Class<T> anyClass() {\n+    public <T extends Any<?>> Class<T> anyClass() {\n         Class result;\n \n         switch (anyTypeKind) {\n@@ -215,52 +232,6 @@ public <T extends PlainAttrValue> T newPlainAttrUniqueValue() {\n         return result;\n     }\n \n-    @Override\n-    public <T extends DerAttr<?>> Class<T> derAttrClass() {\n-        Class result = null;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = JPAUDerAttr.class;\n-                break;\n-\n-            case GROUP:\n-                result = JPAGDerAttr.class;\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = JPAADerAttr.class;\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public <T extends DerAttr<?>> T newDerAttr() {\n-        T result = null;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = (T) new JPAUDerAttr();\n-                break;\n-\n-            case GROUP:\n-                result = (T) new JPAGDerAttr();\n-                break;\n-\n-            case ANY_OBJECT:\n-                result = (T) new JPAADerAttr();\n-                break;\n-\n-            default:\n-        }\n-\n-        return result;\n-    }\n-\n     @Override\n     public IntMappingType plainIntMappingType() {\n         IntMappingType result = null;\n@@ -352,4 +323,36 @@ public <T extends AnyTO> T newAnyTO() {\n \n         return result;\n     }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Set<ExternalResource> getAllResources(final Any<?> any) {\n+        Set<ExternalResource> resources = new HashSet<>();\n+\n+        if (any instanceof User) {\n+            resources.addAll(userDAO.findAllResources((User) any));\n+        } else if (any instanceof Group) {\n+            resources.addAll(((Group) any).getResources());\n+        } else if (any instanceof AnyObject) {\n+            resources.addAll(anyObjectDAO.findAllResources((AnyObject) any));\n+        }\n+\n+        return resources;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public <S extends Schema> Set<S> getAllowedSchemas(final Any<?> any, final Class<S> reference) {\n+        Set<S> schemas = new HashSet<>();\n+\n+        if (any instanceof User) {\n+            schemas.addAll(userDAO.findAllowedSchemas((User) any, reference));\n+        } else if (any instanceof Group) {\n+            schemas.addAll(groupDAO.findAllowedSchemas((Group) any, reference));\n+        } else if (any instanceof AnyObject) {\n+            schemas.addAll(anyObjectDAO.findAllowedSchemas((AnyObject) any, reference));\n+        }\n+\n+        return schemas;\n+    }\n }"},{"sha":"6aaf62d6c65d6494b009efb3e03c83f2ad2fb5bb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,7 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n@@ -30,18 +33,25 @@\n @Component\n public class JPAAnyUtilsFactory implements AnyUtilsFactory {\n \n+    private final Map<AnyTypeKind, AnyUtils> instances = new HashMap<>(3);\n+\n     @Override\n     public AnyUtils getInstance(final AnyTypeKind anyTypeKind) {\n-        return new JPAAnyUtils(anyTypeKind);\n-    }\n+        AnyUtils instance;\n+        synchronized (instances) {\n+            instance = instances.get(anyTypeKind);\n+            if (instance == null) {\n+                instance = new JPAAnyUtils(anyTypeKind);\n+                ApplicationContextProvider.getBeanFactory().autowireBean(instance);\n+                instances.put(anyTypeKind, instance);\n+            }\n+        }\n \n-    @Override\n-    public AnyUtils getInstance(final String anyTypeKind) {\n-        return new JPAAnyUtils(AnyTypeKind.valueOf(anyTypeKind));\n+        return instance;\n     }\n \n     @Override\n-    public AnyUtils getInstance(final Any<?, ?> any) {\n+    public AnyUtils getInstance(final Any<?> any) {\n         AnyTypeKind type = null;\n         if (any instanceof User) {\n             type = AnyTypeKind.USER;\n@@ -55,7 +65,7 @@ public AnyUtils getInstance(final Any<?, ?> any) {\n             throw new IllegalArgumentException(\"Any type not supported: \" + any.getClass().getName());\n         }\n \n-        return new JPAAnyUtils(type);\n+        return getInstance(type);\n     }\n \n }"},{"sha":"a31392f31eb6de0a34d56724f6818aea267c1fff","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -60,7 +60,6 @@\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n@@ -77,7 +76,6 @@\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n@@ -96,7 +94,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n-import org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n@@ -112,7 +109,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASchedTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPASyncTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPATaskExec;\n-import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttr;\n@@ -194,8 +190,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAUPlainAttrUniqueValue();\n         } else if (reference.equals(DerSchema.class)) {\n             result = (T) new JPADerSchema();\n-        } else if (reference.equals(UDerAttr.class)) {\n-            result = (T) new JPAUDerAttr();\n         } else if (reference.equals(VirSchema.class)) {\n             result = (T) new JPAVirSchema();\n         } else if (reference.equals(Mapping.class)) {\n@@ -208,8 +202,6 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAGPlainAttrValue();\n         } else if (reference.equals(GPlainAttrUniqueValue.class)) {\n             result = (T) new JPAGPlainAttrUniqueValue();\n-        } else if (reference.equals(GDerAttr.class)) {\n-            result = (T) new JPAGDerAttr();\n         } else if (reference.equals(CPlainAttr.class)) {\n             result = (T) new JPACPlainAttr();\n         } else if (reference.equals(CPlainAttrValue.class)) {"},{"sha":"1525de9554ef48f54d0554d463c6f6cfa5e33d61","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAADerAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAADerAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.anyobject;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.ADerAttr;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttr;\n-\n-@Entity\n-@Table(name = JPAADerAttr.TABLE)\n-public class JPAADerAttr extends AbstractDerAttr<AnyObject> implements ADerAttr {\n-\n-    private static final long serialVersionUID = 5828533701103533330L;\n-\n-    public static final String TABLE = \"ADerAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAAnyObject owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public AnyObject getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final AnyObject owner) {\n-        checkType(owner, JPAAnyObject.class);\n-        this.owner = (JPAAnyObject) owner;\n-    }\n-\n-}"},{"sha":"10ba2fb5f122f5862a3ccbe72290e85babafd4fb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":3,"deletions":23,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -33,12 +33,12 @@\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.ADerAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n@@ -51,7 +51,7 @@\n @Entity\n @Table(name = JPAAnyObject.TABLE)\n @Cacheable\n-public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr> implements AnyObject {\n+public class JPAAnyObject extends AbstractAny<APlainAttr> implements AnyObject {\n \n     private static final long serialVersionUID = 9063766472970643492L;\n \n@@ -60,17 +60,14 @@ public class JPAAnyObject extends AbstractAny<APlainAttr, ADerAttr> implements A\n     @Id\n     private Long id;\n \n+    @NotNull\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private JPAAnyType type;\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n     private List<JPAAPlainAttr> plainAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAADerAttr> derAttrs = new ArrayList<>();\n-\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"anyObject_id\"),\n@@ -126,23 +123,6 @@ public List<? extends APlainAttr> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n-    @Override\n-    public boolean add(final ADerAttr attr) {\n-        checkType(attr, JPAADerAttr.class);\n-        return derAttrs.add((JPAADerAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final ADerAttr attr) {\n-        checkType(attr, JPAADerAttr.class);\n-        return derAttrs.remove((JPAADerAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends ADerAttr> getDerAttrs() {\n-        return derAttrs;\n-    }\n-\n     @Override\n     protected List<JPAExternalResource> internalGetResources() {\n         return resources;"},{"sha":"b481fb0289eb5f2a9accf717550d8a1bc523936f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/conf/JPAConf.java","status":"modified","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fconf%2FJPAConf.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n@@ -33,11 +32,7 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -98,26 +93,6 @@ public List<? extends CPlainAttr> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n-    @Override\n-    public boolean add(final DerAttr<?> attr) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean remove(final DerAttr<?> derAttr) {\n-        return false;\n-    }\n-\n-    @Override\n-    public DerAttr<?> getDerAttr(final String derSchemaName) {\n-        return null;\n-    }\n-\n-    @Override\n-    public List<? extends DerAttr<?>> getDerAttrs() {\n-        return Collections.emptyList();\n-    }\n-\n     @Override\n     public boolean add(final ExternalResource resource) {\n         return false;\n@@ -192,19 +167,4 @@ public AnyType getType() {\n     public void setType(final AnyType type) {\n         // nothing to do\n     }\n-\n-    @Override\n-    public Set<PlainSchema> getAllowedPlainSchemas() {\n-        return Collections.emptySet();\n-    }\n-\n-    @Override\n-    public Set<DerSchema> getAllowedDerSchemas() {\n-        return Collections.emptySet();\n-    }\n-\n-    @Override\n-    public Set<VirSchema> getAllowedVirSchemas() {\n-        return Collections.emptySet();\n-    }\n }"},{"sha":"73911f847b6cec23684cc4bba8a5e39d143898be","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGDerAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGDerAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.group;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttr;\n-\n-@Entity\n-@Table(name = JPAGDerAttr.TABLE)\n-public class JPAGDerAttr extends AbstractDerAttr<Group> implements GDerAttr {\n-\n-    private static final long serialVersionUID = 8007080005675899946L;\n-\n-    public static final String TABLE = \"GDerAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAGroup owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public Group getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final Group owner) {\n-        checkType(owner, JPAGroup.class);\n-        this.owner = (JPAGroup) owner;\n-    }\n-\n-}"},{"sha":"d41ef3a3d348bdf63f9c88b0269d354d9fbd8831","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n@@ -60,7 +59,7 @@\n @Table(name = JPAGroup.TABLE)\n @Cacheable\n @GroupCheck\n-public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr> implements Group {\n+public class JPAGroup extends AbstractAny<GPlainAttr> implements Group {\n \n     private static final long serialVersionUID = -5281258853142421875L;\n \n@@ -83,10 +82,6 @@ public class JPAGroup extends AbstractAny<GPlainAttr, GDerAttr> implements Group\n     @Valid\n     private List<JPAGPlainAttr> plainAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAGDerAttr> derAttrs = new ArrayList<>();\n-\n     @ManyToMany(fetch = FetchType.EAGER)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"group_id\"),\n@@ -182,23 +177,6 @@ public List<? extends GPlainAttr> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n-    @Override\n-    public boolean add(final GDerAttr attr) {\n-        checkType(attr, JPAGDerAttr.class);\n-        return derAttrs.add((JPAGDerAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final GDerAttr attr) {\n-        checkType(attr, JPAGDerAttr.class);\n-        return derAttrs.remove((JPAGDerAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends GDerAttr> getDerAttrs() {\n-        return derAttrs;\n-    }\n-\n     @Override\n     public ADynGroupMembership getADynMembership() {\n         return aDynMembership;"},{"sha":"754fd59286fd4178a1d5e6845350cbf4d5f4495b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDerAttr.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDerAttr.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity.user;\n-\n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n-import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.entity.AbstractDerAttr;\n-\n-@Entity\n-@Table(name = JPAUDerAttr.TABLE)\n-public class JPAUDerAttr extends AbstractDerAttr<User> implements UDerAttr {\n-\n-    private static final long serialVersionUID = 4723044452807292060L;\n-\n-    public static final String TABLE = \"UDerAttr\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPAUser owner;\n-\n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public User getOwner() {\n-        return owner;\n-    }\n-\n-    @Override\n-    public void setOwner(final User owner) {\n-        checkType(owner, JPAUser.class);\n-        this.owner = (JPAUser) owner;\n-    }\n-\n-}"},{"sha":"26fd229e9c15dc5e3c2a6c6e5288f64dd14e2857","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":1,"deletions":23,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -52,7 +52,6 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n@@ -74,7 +73,7 @@\n @Entity\n @Table(name = JPAUser.TABLE)\n @Cacheable\n-public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr> implements User {\n+public class JPAUser extends AbstractAny<UPlainAttr> implements User {\n \n     private static final long serialVersionUID = -3905046855521446823L;\n \n@@ -100,10 +99,6 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr> implements User {\n     @Valid\n     private List<JPAUPlainAttr> plainAttrs = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n-    @Valid\n-    private List<JPAUDerAttr> derAttrs = new ArrayList<>();\n-\n     private String workflowId;\n \n     @Column(nullable = true)\n@@ -299,23 +294,6 @@ public List<? extends UPlainAttr> getPlainAttrs() {\n         return plainAttrs;\n     }\n \n-    @Override\n-    public boolean add(final UDerAttr attr) {\n-        checkType(attr, JPAUDerAttr.class);\n-        return derAttrs.add((JPAUDerAttr) attr);\n-    }\n-\n-    @Override\n-    public boolean remove(final UDerAttr attr) {\n-        checkType(attr, JPAUDerAttr.class);\n-        return derAttrs.remove((JPAUDerAttr) attr);\n-    }\n-\n-    @Override\n-    public List<? extends UDerAttr> getDerAttrs() {\n-        return derAttrs;\n-    }\n-\n     @Override\n     public String getWorkflowId() {\n         return workflowId;"},{"sha":"57a84e771953ac7c0479737b714aa10d6ef5d2d0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyCheck.java","status":"renamed","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyCheck.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -16,20 +16,26 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao;\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n \n-public interface DerAttrDAO extends DAO<DerAttr<?>, Long> {\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n \n-    <T extends DerAttr<?>> T find(Long key, Class<T> reference);\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = AnyValidator.class)\n+@Documented\n+public @interface AnyCheck {\n \n-    <T extends DerAttr<?>> List<T> findAll(Class<T> reference);\n+    String message() default \"{org.apache.syncope.core.persistence.validation.any}\";\n \n-    <T extends DerAttr<?>> T save(T derAttr);\n+    Class<?>[] groups() default {};\n \n-    <T extends DerAttr<?>> void delete(Long key, Class<T> reference);\n-\n-    <T extends DerAttr<?>> void delete(T derAttr);\n+    Class<? extends Payload>[] payload() default {};\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DerAttrDAO.java"},{"sha":"fb28c4e3acfd883c980ad1491414c38f6bba4456","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyValidator.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyValidator.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.util.Collection;\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n+\n+@SuppressWarnings(\"rawtypes\")\n+public class AnyValidator extends AbstractValidator<AnyCheck, Any> {\n+\n+    @Override\n+    public boolean isValid(final Any any, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        if (!(any instanceof Conf)) {\n+            Collection<String> allowedPlainSchemas = CollectionUtils.collect(new JPAAnyUtilsFactory().\n+                    getInstance(any.getType().getKind()).getAllowedSchemas(any, PlainSchema.class),\n+                    new Transformer<PlainSchema, String>() {\n+\n+                @Override\n+                public String transform(final PlainSchema schema) {\n+                    return schema.getKey();\n+                }\n+            });\n+\n+            for (PlainAttr<?> attr : ((Any<?>) any).getPlainAttrs()) {\n+                if (attr != null && !allowedPlainSchemas.contains(attr.getSchema().getKey())) {\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidPlainSchema,\n+                                    attr.getSchema().getKey() + \" not allowed for this instance\")).\n+                            addPropertyNode(\"plainAttrs\").addConstraintViolation();\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+}"},{"sha":"0b60c5e5e77446bbc4355701cc787441ac8faadd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.AnnotatedEntity;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.Attr;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n@@ -59,7 +58,6 @@ public void validate(final Object object) {\n                 if (!Entity.class.equals(interf)\n                         && !AnnotatedEntity.class.equals(interf)\n                         && !Schema.class.equals(interf)\n-                        && !Attr.class.equals(interf)\n                         && !Task.class.equals(interf)\n                         && !Policy.class.equals(interf)\n                         && !Any.class.equals(interf)"},{"sha":"d328eacb563322e3ed1b84bcf8b81a83581622f9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -66,6 +66,20 @@ private boolean isValid(final MappingItem item, final ConstraintValidatorContext\n             return false;\n         }\n \n+        if (item.getIntMappingType() == IntMappingType.AnyObjectDerivedSchema\n+                || item.getIntMappingType() == IntMappingType.GroupDerivedSchema\n+                || item.getIntMappingType() == IntMappingType.UserDerivedSchema) {\n+\n+            if (item.getPurpose() != MappingPurpose.PROPAGATION) {\n+                context.buildConstraintViolationWithTemplate(\n+                        getTemplate(EntityViolationType.InvalidMapping,\n+                                \" - only \" + MappingPurpose.PROPAGATION.name() + \" allowed for derived\")).\n+                        addPropertyNode(\"purpose\").addConstraintViolation();\n+\n+                return false;\n+            }\n+        }\n+\n         if (item.getIntMappingType() == IntMappingType.AnyObjectVirtualSchema\n                 || item.getIntMappingType() == IntMappingType.GroupVirtualSchema\n                 || item.getIntMappingType() == IntMappingType.UserVirtualSchema) {"},{"sha":"15ff3aa32623d1aca5b760523cd96d2abca8eaf0","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -312,31 +312,6 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_ADerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_ADerAttr\" pk-column-value=\"SEQ_ADerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UDerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UDerAttr\" pk-column-value=\"SEQ_UDerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GDerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GDerAttr\" pk-column-value=\"SEQ_GDerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"15ff3aa32623d1aca5b760523cd96d2abca8eaf0","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -312,31 +312,6 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_ADerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_ADerAttr\" pk-column-value=\"SEQ_ADerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UDerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UDerAttr\" pk-column-value=\"SEQ_UDerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GDerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GDerAttr\" pk-column-value=\"SEQ_GDerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"aeb24ee2f5ae57e58472e519f7df908109a4724c","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -359,31 +359,6 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n-\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_ADerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_ADerAttr\" pk-column-value=\"SEQ_ADerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUDerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_UDerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_UDerAttr\" pk-column-value=\"SEQ_UDerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGDerAttr\">\n-    <attributes>\n-      <id name=\"id\">\n-        <generated-value generator=\"SEQ_GDerAttr\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_GDerAttr\" pk-column-value=\"SEQ_GDerAttr\" initial-value=\"1000\"/>\n-      </id>\n-    </attributes>\n-  </entity>\n   \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>"},{"sha":"3807b35345df99d1169995de502a6152e1e83761","filename":"core/persistence-jpa/src/main/resources/indexes.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -64,9 +64,5 @@ under the License.\n   <entry key=\"GPlainAttr_owner_id_index\">CREATE INDEX GPlainAttr_owner_id_index on GPlainAttr(owner_id)</entry>\n   <entry key=\"APlainAttr_owner_id_index\">CREATE INDEX APlainAttr_owner_id_index on APlainAttr(owner_id)</entry>\n \n-  <entry key=\"UDerAttr_owner_id_index\">CREATE INDEX UDerAttr_owner_id_index on UDerAttr(owner_id)</entry>\n-  <entry key=\"GDerAttr_owner_id_index\">CREATE INDEX GDerAttr_owner_id_index on GDerAttr(owner_id)</entry>\n-  <entry key=\"ADerAttr_owner_id_index\">CREATE INDEX ADerAttr_owner_id_index on ADerAttr(owner_id)</entry>\n-\n   <entry key=\"Task_executedIndex\">CREATE INDEX Task_executedIndex ON Task(executed)</entry>\n </properties>"},{"sha":"c361614020073e935fbfb929de29c051bd22d9a4","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConfTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConfTest.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -83,6 +83,7 @@ public void setAndDelete() {\n \n         // 2. create conf\n         CPlainAttr newConf = entityFactory.newEntity(CPlainAttr.class);\n+        newConf.setOwner(confDAO.get());\n         newConf.setSchema(useless);\n         add(newConf, \"2014-06-20\");\n         confDAO.save(newConf);"},{"sha":"3fb15b747ebdbb183793b566c04bf031cafaeca2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerAttrTest.java","status":"removed","additions":0,"deletions":220,"changes":220,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b845cf52cf5fbb16fe14e9c517d21e5e1669f713/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerAttrTest.java?ref=b845cf52cf5fbb16fe14e9c517d21e5e1669f713","patch":"@@ -1,220 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.inner;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.util.List;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n-import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.GDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.persistence.jpa.AbstractTest;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-@Transactional(\"Master\")\n-public class DerAttrTest extends AbstractTest {\n-\n-    @Autowired\n-    private DerAttrDAO derAttrDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private GroupDAO groupDAO;\n-\n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n-\n-    @Test\n-    public void findAll() {\n-        List<UDerAttr> list = derAttrDAO.findAll(UDerAttr.class);\n-        assertEquals(\"did not get expected number of derived attributes \", 2, list.size());\n-    }\n-\n-    @Test\n-    public void findById() {\n-        UDerAttr attribute = derAttrDAO.find(100L, UDerAttr.class);\n-        assertNotNull(\"did not find expected attribute schema\", attribute);\n-    }\n-\n-    @Test\n-    public void saveUDerAttribute() {\n-        DerSchema cnSchema = derSchemaDAO.find(\"cn\");\n-        assertNotNull(cnSchema);\n-\n-        User owner = userDAO.find(3L);\n-        assertNotNull(\"did not get expected user\", owner);\n-\n-        UDerAttr derAttr = entityFactory.newEntity(UDerAttr.class);\n-        derAttr.setOwner(owner);\n-        derAttr.setSchema(cnSchema);\n-\n-        derAttr = derAttrDAO.save(derAttr);\n-\n-        UDerAttr actual = derAttrDAO.find(derAttr.getKey(), UDerAttr.class);\n-        assertNotNull(\"expected save to work\", actual);\n-        assertEquals(derAttr, actual);\n-\n-        UPlainAttrValue firstname = owner.getPlainAttr(\"firstname\").getValues().iterator().next();\n-        UPlainAttrValue surname = owner.getPlainAttr(\"surname\").getValues().iterator().next();\n-\n-        assertEquals(surname.getValue() + \", \" + firstname.getValue(), derAttr.getValue(owner.getPlainAttrs()));\n-    }\n-\n-    @Test\n-    public void saveGDerAttribute() {\n-        DerSchema schema = derSchemaDAO.find(\"rderiveddata\");\n-        assertNotNull(schema);\n-\n-        Group owner = groupDAO.find(1L);\n-        assertNotNull(\"did not get expected user\", owner);\n-\n-        GDerAttr derAttr = entityFactory.newEntity(GDerAttr.class);\n-        derAttr.setOwner(owner);\n-        derAttr.setSchema(schema);\n-\n-        derAttr = derAttrDAO.save(derAttr);\n-\n-        GDerAttr actual = derAttrDAO.find(derAttr.getKey(), GDerAttr.class);\n-        assertNotNull(\"expected save to work\", actual);\n-        assertEquals(derAttr, actual);\n-\n-        GPlainAttrValue sx = owner.getPlainAttr(\"rderived_sx\").getValues().iterator().next();\n-        GPlainAttrValue dx = owner.getPlainAttr(\"rderived_dx\").getValues().iterator().next();\n-\n-        assertEquals(sx.getValue() + \"-\" + dx.getValue(), derAttr.getValue(owner.getPlainAttrs()));\n-    }\n-\n-    @Test\n-    public void delete() {\n-        UDerAttr attribute = derAttrDAO.find(100L, UDerAttr.class);\n-        String schemaName = attribute.getSchema().getKey();\n-\n-        derAttrDAO.delete(attribute.getKey(), UDerAttr.class);\n-\n-        UDerAttr actual = derAttrDAO.find(100L, UDerAttr.class);\n-        assertNull(\"delete did not work\", actual);\n-\n-        DerSchema attributeSchema = derSchemaDAO.find(schemaName);\n-        assertNotNull(\"user derived attribute schema deleted when deleting values\", attributeSchema);\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE134User() {\n-        AnyTypeClass other = anyTypeClassDAO.find(\"other\");\n-\n-        DerSchema sderived = entityFactory.newEntity(DerSchema.class);\n-        sderived.setKey(\"sderived\");\n-        sderived.setExpression(\"status + ' - ' + username + ' - ' + creationDate + '[' + failedLogins + ']'\");\n-\n-        sderived = derSchemaDAO.save(sderived);\n-\n-        derSchemaDAO.flush();\n-\n-        other.add(sderived);\n-        sderived.setAnyTypeClass(other);\n-\n-        derSchemaDAO.flush();\n-\n-        sderived = derSchemaDAO.find(\"sderived\");\n-        assertNotNull(\"expected save to work\", sderived);\n-        assertEquals(other, sderived.getAnyTypeClass());\n-\n-        User owner = userDAO.find(3L);\n-        assertNotNull(\"did not get expected user\", owner);\n-        owner.add(other);\n-\n-        UDerAttr derAttr = entityFactory.newEntity(UDerAttr.class);\n-        derAttr.setOwner(owner);\n-        derAttr.setSchema(sderived);\n-\n-        derAttr = derAttrDAO.save(derAttr);\n-        derAttrDAO.flush();\n-\n-        derAttr = derAttrDAO.find(derAttr.getKey(), UDerAttr.class);\n-        assertNotNull(\"expected save to work\", derAttr);\n-\n-        String value = derAttr.getValue(owner.getPlainAttrs());\n-        assertNotNull(value);\n-        assertFalse(value.isEmpty());\n-        assertTrue(value.startsWith(\"active - vivaldi - 2010-10-20\"));\n-        assertTrue(value.endsWith(\"[0]\"));\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE134Group() {\n-        AnyTypeClass genericMembership = anyTypeClassDAO.find(\"generic membership\");\n-\n-        DerSchema sderived = entityFactory.newEntity(DerSchema.class);\n-        sderived.setKey(\"sderived\");\n-        sderived.setExpression(\"name\");\n-\n-        sderived = derSchemaDAO.save(sderived);\n-\n-        derSchemaDAO.flush();\n-\n-        genericMembership.add(sderived);\n-        sderived.setAnyTypeClass(genericMembership);\n-\n-        derSchemaDAO.flush();\n-\n-        sderived = derSchemaDAO.find(\"sderived\");\n-        assertNotNull(\"expected save to work\", sderived);\n-        assertEquals(genericMembership, sderived.getAnyTypeClass());\n-\n-        Group owner = groupDAO.find(7L);\n-        assertNotNull(\"did not get expected group\", owner);\n-        owner.add(genericMembership);\n-\n-        GDerAttr derAttr = entityFactory.newEntity(GDerAttr.class);\n-        derAttr.setOwner(owner);\n-        derAttr.setSchema(sderived);\n-\n-        derAttr = derAttrDAO.save(derAttr);\n-        derAttrDAO.flush();\n-\n-        derAttr = derAttrDAO.find(derAttr.getKey(), GDerAttr.class);\n-        assertNotNull(\"expected save to work\", derAttr);\n-\n-        String value = derAttr.getValue(owner.getPlainAttrs());\n-        assertNotNull(value);\n-        assertFalse(value.isEmpty());\n-        assertTrue(value.startsWith(\"managingDirector\"));\n-    }\n-}"},{"sha":"7907381e76e7b7767098ccd61d6cb71ef7fc5c87","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FDerSchemaTest.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -43,7 +43,7 @@ public class DerSchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<DerSchema> list = derSchemaDAO.findAll();\n-        assertEquals(9, list.size());\n+        assertEquals(10, list.size());\n     }\n \n     @Test"},{"sha":"3cc3efa78cb40d4e8c87054dba32f5ead7ed6a01","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FResourceTest.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -338,7 +338,7 @@ public void saveWithGroupMappingType() {\n         item.setIntAttrName(\"mderiveddata\");\n         item.setExtAttrName(\"mderiveddata\");\n         item.setIntMappingType(IntMappingType.AnyObjectDerivedSchema);\n-        item.setPurpose(MappingPurpose.BOTH);\n+        item.setPurpose(MappingPurpose.PROPAGATION);\n         mapping.add(item);\n \n         // save the resource"},{"sha":"331c4ca75fbb9bac8af08cd9464b3e141fd1bd12","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainAttrTest.java","status":"modified","additions":0,"deletions":113,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainAttrTest.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -19,29 +19,12 @@\n package org.apache.syncope.core.persistence.jpa.outer;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n \n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n-import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n-import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n-import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -53,24 +36,9 @@ public class PlainAttrTest extends AbstractTest {\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n-    @Autowired\n-    private DerAttrDAO derAttrDAO;\n-\n     @Autowired\n     private PlainAttrValueDAO plainAttrValueDAO;\n \n-    @Autowired\n-    private PlainSchemaDAO plainSchemaDAO;\n-\n-    @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    @Autowired\n-    private AnyTypeClassDAO anyTypeClassDAO;\n-\n     @Test\n     public void deleteAttribute() {\n         plainAttrDAO.delete(117L, UPlainAttr.class);\n@@ -95,85 +63,4 @@ public void deleteAttributeValue() {\n         UPlainAttr attribute = plainAttrDAO.find(104L, UPlainAttr.class);\n         assertEquals(attribute.getValues().size(), attributeValueNumber - 1);\n     }\n-\n-    @Test\n-    public void checkForEnumType() {\n-        User user = userDAO.find(1L);\n-        user.setPassword(\"password123\", CipherAlgorithm.SHA);\n-        assertNotNull(user);\n-\n-        AnyTypeClass other = anyTypeClassDAO.find(\"other\");\n-\n-        PlainSchema color = entityFactory.newEntity(PlainSchema.class);\n-        color.setType(AttrSchemaType.Enum);\n-        color.setKey(\"color\");\n-        color.setEnumerationValues(\"red\" + SyncopeConstants.ENUM_VALUES_SEPARATOR + \"yellow\");\n-\n-        color = plainSchemaDAO.save(color);\n-\n-        other.add(color);\n-        color.setAnyTypeClass(other);\n-\n-        plainSchemaDAO.flush();\n-\n-        color = plainSchemaDAO.find(\"color\");\n-        assertNotNull(\"expected save to work\", color);\n-        assertEquals(other, color.getAnyTypeClass());\n-\n-        UPlainAttr attr = entityFactory.newEntity(UPlainAttr.class);\n-        attr.setOwner(user);\n-        attr.setSchema(color);\n-        attr.add(\"yellow\", anyUtilsFactory.getInstance(AnyTypeKind.USER));\n-        user.add(attr);\n-\n-        userDAO.save(user);\n-        userDAO.flush();\n-\n-        user = userDAO.find(1L);\n-        assertNotNull(user);\n-        assertNotNull(user.getPlainAttr(color.getKey()));\n-        assertNotNull(user.getPlainAttr(color.getKey()).getValues());\n-        assertEquals(user.getPlainAttr(color.getKey()).getValues().size(), 1);\n-    }\n-\n-    @Test\n-    public void derAttrFromSpecialAttrs() {\n-        AnyTypeClass other = anyTypeClassDAO.find(\"other\");\n-\n-        DerSchema sderived = entityFactory.newEntity(DerSchema.class);\n-        sderived.setKey(\"sderived\");\n-        sderived.setExpression(\"username + ' - ' + creationDate + '[' + failedLogins + ']'\");\n-\n-        sderived = derSchemaDAO.save(sderived);\n-\n-        derSchemaDAO.flush();\n-\n-        other.add(sderived);\n-        sderived.setAnyTypeClass(other);\n-\n-        derSchemaDAO.flush();\n-\n-        sderived = derSchemaDAO.find(\"sderived\");\n-        assertNotNull(\"expected save to work\", sderived);\n-        assertEquals(other, sderived.getAnyTypeClass());\n-\n-        User owner = userDAO.find(3L);\n-        assertNotNull(\"did not get expected user\", owner);\n-\n-        UDerAttr derAttr = entityFactory.newEntity(UDerAttr.class);\n-        derAttr.setOwner(owner);\n-        derAttr.setSchema(sderived);\n-\n-        derAttr = derAttrDAO.save(derAttr);\n-        derAttrDAO.flush();\n-\n-        derAttr = derAttrDAO.find(derAttr.getKey(), UDerAttr.class);\n-        assertNotNull(\"expected save to work\", derAttr);\n-\n-        String value = derAttr.getValue(owner.getPlainAttrs());\n-        assertNotNull(value);\n-        assertFalse(value.isEmpty());\n-        assertTrue(value.startsWith(\"vivaldi - 2010-10-20\"));\n-        assertTrue(value.endsWith(\"[0]\"));\n-    }\n }"},{"sha":"7e71cfd7d5a7000d17eb7f74dccf01c7084629f4","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":14,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -331,6 +331,7 @@ under the License.\n   <DerSchema name=\"csvuserid\" expression=\"firstname + ',' + surname\" anyTypeClass_name=\"csv\"/>\n   <DerSchema name=\"cn\" expression=\"surname + ', ' + firstname\" anyTypeClass_name=\"minimal user\"/>\n   <DerSchema name=\"noschema\" expression=\"surname + ', ' + notfound\" anyTypeClass_name=\"other\"/>\n+  <DerSchema name=\"info\" expression=\"username + ' - ' + creationDate + '[' + failedLogins + ']'\" anyTypeClass_name=\"minimal user\"/>\n \n   <PlainSchema name=\"icon\" type=\"String\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>                \n@@ -443,10 +444,7 @@ under the License.\n   <UPlainAttrValue id=\"36\" attribute_id=\"125\" stringValue=\"vivaldi@syncope.org\"/>\n   <UPlainAttr id=\"126\" owner_id=\"3\" schema_name=\"type\"/>\n   <UPlainAttrValue id=\"37\" attribute_id=\"126\" stringValue=\"F\"/>\n-  \n-  <UDerAttr id=\"100\" schema_name=\"cn\" owner_id=\"3\"/>\n-  <UDerAttr id=\"101\" schema_name=\"cn\" owner_id=\"1\"/>\n-\n+   \n   <GPlainAttr id=\"600\" owner_id=\"1\" schema_name=\"icon\"/>\n   <GPlainAttrValue attribute_id=\"600\" id=\"40\" stringValue=\"niceIcon\"/>\n \n@@ -474,14 +472,6 @@ under the License.\n   <GPlainAttr id=\"995\" owner_id=\"13\" schema_name=\"title\"/>\n   <GPlainAttrValue attribute_id=\"995\" id=\"95\" stringValue=\"r13\"/>\n \n-  <GDerAttr id=\"100\" owner_id=\"1\" schema_name=\"rderiveddata\"/>\n-    \n-  <GDerAttr id=\"101\" owner_id=\"1\" schema_name=\"displayProperty\"/>\n-  \n-  <GDerAttr id=\"102\" owner_id=\"4\" schema_name=\"displayProperty\"/>\n-\n-  <GDerAttr id=\"103\" owner_id=\"1\" schema_name=\"rderToBePropagated\"/>    \n-\n   <ConnInstance id=\"100\" displayName=\"ConnInstance100\"\n                 location=\"${connid.location}\"\n                 bundleName=\"net.tirasa.connid.bundles.soap\"\n@@ -765,7 +755,7 @@ under the License.\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"111\" extAttrName=\"fullname\" mapping_id=\"1\"\n                intAttrName=\"cn\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n-               connObjectKey=\"0\" password=\"0\" purpose=\"BOTH\"/>\n+               connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>\n     \n   <Provision id=\"2\" resource_name=\"ws-target-resource-update\" anyType_name=\"USER\" objectClass=\"__ACCOUNT__\"/>\n   <Mapping id=\"2\" provision_id=\"2\"/>\n@@ -846,7 +836,7 @@ under the License.\n                connObjectKey=\"0\" password=\"0\" purpose=\"SYNCHRONIZATION\"/>\n   <MappingItem id=\"207\" extAttrName=\"__NAME__\" mapping_id=\"9\"\n                intAttrName=\"csvuserid\" intMappingType=\"UserDerivedSchema\" mandatoryCondition=\"true\"\n-               connObjectKey=\"1\" password=\"0\" purpose=\"BOTH\"/>\n+               connObjectKey=\"1\" password=\"0\" purpose=\"PROPAGATION\"/>\n   <MappingItem id=\"208\" extAttrName=\"theirgroup\" mapping_id=\"9\"\n                intAttrName=\"rderToBePropagated\" intMappingType=\"GroupDerivedSchema\" mandatoryCondition=\"false\"\n                connObjectKey=\"0\" password=\"0\" purpose=\"PROPAGATION\"/>"},{"sha":"bc70fb8c3d8773b79a8158453d21c5f89c766d05","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/DerAttrHandler.java","status":"renamed","additions":20,"deletions":6,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FDerAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FDerAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FDerAttrHandler.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -16,14 +16,28 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.dao;\n+package org.apache.syncope.core.provisioning.api;\n \n-public class UnallowedSchemaException extends RuntimeException {\n+import java.util.Map;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n \n-    private static final long serialVersionUID = -9206535191442808016L;\n+public interface DerAttrHandler {\n \n-    public UnallowedSchemaException(final String schemaName) {\n-        super(schemaName + \" not allowed\");\n-    }\n+    /**\n+     * Calculates derived attribute value associated to the given any, for the given derived schema.\n+     *\n+     * @param any any object\n+     * @param schema derived schema\n+     * @return derived attribute value\n+     */\n+    String getValue(Any<?> any, DerSchema schema);\n \n+    /**\n+     * Calculates derived attributes values associated to the given any.\n+     *\n+     * @param any any object\n+     * @return derived attribute values, either for local cache or external resources\n+     */\n+    Map<DerSchema, String> getValues(Any<?> any);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UnallowedSchemaException.java"},{"sha":"0b8d60f7cd25b3fe4001f5637fe2c9f6bad66e86","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/VirAttrHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -34,7 +34,7 @@ public interface VirAttrHandler {\n      * @return virtual attribute values, either for local cache or external resource, if resource is owned by the given\n      * any and associated to the given virtual schema; empty list otherwise.\n      */\n-    List<String> getValues(Any<?, ?> any, VirSchema schema);\n+    List<String> getValues(Any<?> any, VirSchema schema);\n \n     /**\n      * Query external resources (or cache, if configured) associated to the given any for values associated to all\n@@ -44,6 +44,6 @@ public interface VirAttrHandler {\n      * @param any any object\n      * @return virtual attribute values, either for local cache or external resources\n      */\n-    Map<VirSchema, List<String>> getValues(Any<?, ?> any);\n+    Map<VirSchema, List<String>> getValues(Any<?> any);\n \n }"},{"sha":"9a3c15bb26c78f20bc49ed340c64a2c848323fc1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/PushActions.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -37,7 +37,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> A beforeAssign(\n+    <A extends Any<?>> A beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -50,7 +50,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> A beforeProvision(\n+    <A extends Any<?>> A beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -63,7 +63,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> A beforeUpdate(\n+    <A extends Any<?>> A beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -76,7 +76,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> A beforeLink(\n+    <A extends Any<?>> A beforeLink(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -89,7 +89,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> A beforeUnlink(\n+    <A extends Any<?>> A beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -102,7 +102,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> A beforeUnassign(\n+    <A extends Any<?>> A beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -115,7 +115,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> A beforeDeprovision(\n+    <A extends Any<?>> A beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -128,7 +128,7 @@ public interface PushActions extends ProvisioningActions {\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> A beforeDelete(\n+    <A extends Any<?>> A beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n             A any) throws JobExecutionException;\n \n@@ -142,7 +142,7 @@ public interface PushActions extends ProvisioningActions {\n      * @param error error being reported\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> void onError(\n+    <A extends Any<?>> void onError(\n             ProvisioningProfile<?, ?> profile,\n             A any,\n             ProvisioningReport result,\n@@ -157,7 +157,7 @@ public interface PushActions extends ProvisioningActions {\n      * @param result operation result.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <A extends Any<?, ?>> void after(\n+    <A extends Any<?>> void after(\n             ProvisioningProfile<?, ?> profile,\n             A any,\n             ProvisioningReport result) throws JobExecutionException;"},{"sha":"2711fc09bc2253d78e2a4209d7b625c748dc74fd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DerAttrHandlerImpl.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrHandlerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.MapContext;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class DerAttrHandlerImpl implements DerAttrHandler {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DerAttrHandler.class);\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    private Map<DerSchema, String> getValues(final Any<?> any, final Set<DerSchema> schemas) {\n+        Map<DerSchema, String> result = new HashMap<>(schemas.size());\n+\n+        for (DerSchema schema : schemas) {\n+            JexlContext jexlContext = new MapContext();\n+            JexlUtils.addPlainAttrsToContext(any.getPlainAttrs(), jexlContext);\n+            JexlUtils.addFieldsToContext(any, jexlContext);\n+\n+            result.put(schema, JexlUtils.evaluate(schema.getExpression(), jexlContext));\n+        }\n+\n+        return result;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public String getValue(final Any<?> any, final DerSchema schema) {\n+        if (!anyUtilsFactory.getInstance(any).getAllowedSchemas(any, DerSchema.class).contains(schema)) {\n+            LOG.debug(\"{} not allowed for {}\", schema, any);\n+            return null;\n+        }\n+\n+        return getValues(any, Collections.singleton(schema)).get(schema);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Map<DerSchema, String> getValues(final Any<?> any) {\n+        return getValues(any, anyUtilsFactory.getInstance(any).getAllowedSchemas(any, DerSchema.class));\n+    }\n+\n+}"},{"sha":"ca5063595df59afda46153b6c9e5481bf66536d1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":11,"deletions":28,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n@@ -29,18 +28,15 @@\n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.core.misc.utils.MappingUtils;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCacheValue;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -57,33 +53,20 @@ public class VirAttrHandlerImpl implements VirAttrHandler {\n \n     private static final Logger LOG = LoggerFactory.getLogger(VirAttrHandler.class);\n \n-    @Autowired\n-    private AnyObjectDAO anyObjectDAO;\n-\n-    @Autowired\n-    private UserDAO userDAO;\n-\n     @Autowired\n     private ConnectorFactory connFactory;\n \n-    /**\n-     * Virtual attribute cache.\n-     */\n     @Autowired\n     private VirAttrCache virAttrCache;\n \n     @Autowired\n     private MappingUtils mappingUtils;\n \n-    private Map<VirSchema, List<String>> getValues(final Any<?, ?> any, final Set<VirSchema> schemas) {\n-        Collection<? extends ExternalResource> ownedResources;\n-        if (any instanceof User) {\n-            ownedResources = userDAO.findAllResources((User) any);\n-        } else if (any instanceof AnyObject) {\n-            ownedResources = anyObjectDAO.findAllResources((AnyObject) any);\n-        } else {\n-            ownedResources = ((Group) any).getResources();\n-        }\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSchema> schemas) {\n+        Collection<? extends ExternalResource> ownedResources = anyUtilsFactory.getInstance(any).getAllResources(any);\n \n         Map<VirSchema, List<String>> result = new HashMap<>();\n \n@@ -159,8 +142,8 @@ private Map<VirSchema, List<String>> getValues(final Any<?, ?> any, final Set<Vi\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<String> getValues(final Any<?, ?> any, final VirSchema schema) {\n-        if (!any.getAllowedVirSchemas().contains(schema)) {\n+    public List<String> getValues(final Any<?> any, final VirSchema schema) {\n+        if (!anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).contains(schema)) {\n             LOG.debug(\"{} not allowed for {}\", schema, any);\n             return Collections.emptyList();\n         }\n@@ -170,7 +153,7 @@ public List<String> getValues(final Any<?, ?> any, final VirSchema schema) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Map<VirSchema, List<String>> getValues(final Any<?, ?> any) {\n-        return getValues(any, any.getAllowedVirSchemas());\n+    public Map<VirSchema, List<String>> getValues(final Any<?> any) {\n+        return getValues(any, anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class));\n     }\n }"},{"sha":"281fc69c7b04d256860fa65953cffd911eb05103","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":34,"deletions":116,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -22,7 +22,6 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -42,10 +41,8 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n-import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n@@ -55,7 +52,6 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -84,6 +80,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -125,9 +122,6 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected PlainAttrDAO plainAttrDAO;\n \n-    @Autowired\n-    protected DerAttrDAO derAttrDAO;\n-\n     @Autowired\n     protected PlainAttrValueDAO plainAttrValueDAO;\n \n@@ -146,6 +140,9 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n+    @Autowired\n+    protected DerAttrHandler derAttrHandler;\n+\n     @Autowired\n     protected VirAttrHandler virAttrHander;\n \n@@ -155,7 +152,7 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected void setRealm(final Any<?, ?> any, final AnyPatch anyPatch) {\n+    protected void setRealm(final Any<?> any, final AnyPatch anyPatch) {\n         if (anyPatch.getRealm() != null && StringUtils.isNotBlank(anyPatch.getRealm().getValue())) {\n             Realm newRealm = realmDAO.find(anyPatch.getRealm().getValue());\n             if (newRealm == null) {\n@@ -221,7 +218,7 @@ private void fillAttr(final List<String> values, final AnyUtils anyUtils,\n         }\n     }\n \n-    private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?, ?> any) {\n+    private List<String> evaluateMandatoryCondition(final Provision provision, final Any<?> any) {\n         List<String> missingAttrNames = new ArrayList<>();\n \n         if (provision != null) {\n@@ -231,7 +228,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n                         || item.getPurpose() == MappingPurpose.BOTH)) {\n \n                     List<PlainAttrValue> values = mappingUtils.getIntValues(\n-                            provision, item, Collections.<Any<?, ?>>singletonList(any));\n+                            provision, item, Collections.<Any<?>>singletonList(any));\n                     if (values.isEmpty() && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any)) {\n                         missingAttrNames.add(item.getIntAttrName());\n                     }\n@@ -243,7 +240,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n     }\n \n     private SyncopeClientException checkMandatoryOnResources(\n-            final Any<?, ?> any, final Set<ExternalResource> resources) {\n+            final Any<?> any, final Set<ExternalResource> resources) {\n \n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n@@ -262,14 +259,14 @@ private SyncopeClientException checkMandatoryOnResources(\n         return reqValMissing;\n     }\n \n-    private SyncopeClientException checkMandatory(final Any<?, ?> any) {\n+    private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils anyUtils) {\n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n-        for (PlainSchema schema : any.getAllowedPlainSchemas()) {\n+        for (PlainSchema schema : anyUtils.getAllowedSchemas(any, PlainSchema.class)) {\n             if (any.getPlainAttr(schema.getKey()) == null\n                     && !schema.isReadonly()\n-                    && (JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any))) {\n+                    && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)) {\n \n                 LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n \n@@ -280,20 +277,6 @@ private SyncopeClientException checkMandatory(final Any<?, ?> any) {\n         return reqValMissing;\n     }\n \n-    private Set<ExternalResource> getAllResources(final Any<?, ?> any) {\n-        Set<ExternalResource> resources = new HashSet<>();\n-\n-        if (any instanceof User) {\n-            resources.addAll(userDAO.findAllResources((User) any));\n-        } else if (any instanceof Group) {\n-            resources.addAll(((Group) any).getResources());\n-        } else if (any instanceof AnyObject) {\n-            resources.addAll(anyObjectDAO.findAllResources((AnyObject) any));\n-        }\n-\n-        return resources;\n-    }\n-\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     private void processAttrPatch(final Any any, final AttrPatch patch, final PlainSchema schema,\n             final AnyUtils anyUtils, final Set<ExternalResource> resources, final PropagationByResource propByRes,\n@@ -331,11 +314,11 @@ private void processAttrPatch(final Any any, final AttrPatch patch, final PlainS\n                     Collection<Long> valuesToBeRemoved = CollectionUtils.collect(attr.getValues(),\n                             new Transformer<PlainAttrValue, Long>() {\n \n-                                @Override\n-                                public Long transform(final PlainAttrValue input) {\n-                                    return input.getKey();\n-                                }\n-                            });\n+                        @Override\n+                        public Long transform(final PlainAttrValue input) {\n+                            return input.getKey();\n+                        }\n+                    });\n                     for (Long attrValueKey : valuesToBeRemoved) {\n                         plainAttrValueDAO.delete(attrValueKey, anyUtils.plainAttrValueClass());\n                     }\n@@ -377,48 +360,7 @@ public Long transform(final PlainAttrValue input) {\n         }\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    private void processAttrPatch(final Any any, final AttrPatch patch, final DerSchema schema,\n-            final AnyUtils anyUtils, final Set<ExternalResource> resources, final PropagationByResource propByRes) {\n-\n-        DerAttr<?> attr = any.getDerAttr(schema.getKey());\n-        if (attr == null) {\n-            LOG.debug(\"No plain attribute found for schema {}\", schema);\n-\n-            switch (patch.getOperation()) {\n-                case ADD_REPLACE:\n-                    attr = anyUtils.newDerAttr();\n-                    ((DerAttr) attr).setOwner(any);\n-                    attr.setSchema(schema);\n-                    any.add(attr);\n-                    break;\n-\n-                case DELETE:\n-                default:\n-                    return;\n-            }\n-        }\n-\n-        if (patch.getOperation() == PatchOperation.DELETE) {\n-            derAttrDAO.delete(attr);\n-        }\n-\n-        for (ExternalResource resource : resources) {\n-            for (MappingItem mapItem : MappingUtils.getPropagationMappingItems(resource.getProvision(any.getType()))) {\n-                if (schema.getKey().equals(mapItem.getIntAttrName())\n-                        && mapItem.getIntMappingType() == anyUtils.derIntMappingType()) {\n-\n-                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-\n-                    if (mapItem.isConnObjectKey() && !attr.getValue(any.getPlainAttrs()).isEmpty()) {\n-                        propByRes.addOldConnObjectKey(resource.getKey(), attr.getValue(any.getPlainAttrs()));\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    protected PropagationByResource fill(final Any<?, ?> any, final AnyPatch anyPatch, final AnyUtils anyUtils,\n+    protected PropagationByResource fill(final Any<?> any, final AnyPatch anyPatch, final AnyUtils anyUtils,\n             final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n@@ -461,7 +403,7 @@ protected PropagationByResource fill(final Any<?, ?> any, final AnyPatch anyPatc\n             }\n         }\n \n-        Set<ExternalResource> resources = getAllResources(any);\n+        Set<ExternalResource> resources = anyUtils.getAllResources(any);\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // 3. plain attributes\n@@ -480,20 +422,7 @@ protected PropagationByResource fill(final Any<?, ?> any, final AnyPatch anyPatc\n             scce.addException(invalidValues);\n         }\n \n-        // 4. derived attributes\n-        for (AttrPatch patch : anyPatch.getDerAttrs()) {\n-            if (patch.getAttrTO() != null) {\n-                DerSchema schema = getDerSchema(patch.getAttrTO().getSchema());\n-                if (schema == null) {\n-                    LOG.debug(\"Invalid \" + DerSchema.class.getSimpleName()\n-                            + \"{}, ignoring...\", patch.getAttrTO().getSchema());\n-                } else {\n-                    processAttrPatch(any, patch, schema, anyUtils, resources, propByRes);\n-                }\n-            }\n-        }\n-\n-        SyncopeClientException requiredValuesMissing = checkMandatory(any);\n+        SyncopeClientException requiredValuesMissing = checkMandatory(any, anyUtils);\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n@@ -554,23 +483,12 @@ protected void fill(\n             scce.addException(invalidValues);\n         }\n \n-        // 2. derived attributes\n-        for (AttrTO attributeTO : anyTO.getDerAttrs()) {\n-            DerSchema derSchema = getDerSchema(attributeTO.getSchema());\n-            if (derSchema != null) {\n-                DerAttr derAttr = anyUtils.newDerAttr();\n-                derAttr.setOwner(any);\n-                derAttr.setSchema(derSchema);\n-                any.add(derAttr);\n-            }\n-        }\n-\n-        SyncopeClientException requiredValuesMissing = checkMandatory(any);\n+        SyncopeClientException requiredValuesMissing = checkMandatory(any, anyUtils);\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n \n-        // 3. realm & resources\n+        // 2. realm & resources\n         Realm realm = realmDAO.find(anyTO.getRealm());\n         if (realm == null) {\n             SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n@@ -588,7 +506,7 @@ protected void fill(\n             }\n         }\n \n-        requiredValuesMissing = checkMandatoryOnResources(any, getAllResources(any));\n+        requiredValuesMissing = checkMandatoryOnResources(any, anyUtils.getAllResources(any));\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n@@ -602,8 +520,8 @@ protected void fill(\n     protected void fillTO(final AnyTO anyTO,\n             final String realmFullPath,\n             final Collection<? extends AnyTypeClass> auxClasses,\n-            final Collection<? extends PlainAttr<?>> attrs,\n-            final Collection<? extends DerAttr<?>> derAttrs,\n+            final Collection<? extends PlainAttr<?>> plainAttrs,\n+            final Map<DerSchema, String> derAttrs,\n             final Map<VirSchema, List<String>> virAttrs,\n             final Collection<? extends ExternalResource> resources) {\n \n@@ -617,19 +535,19 @@ public String transform(final AnyTypeClass role) {\n             }\n         }, anyTO.getAuxClasses());\n \n-        for (PlainAttr<?> attr : attrs) {\n+        for (PlainAttr<?> plainAttr : plainAttrs) {\n             AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(attr.getSchema().getKey());\n-            attrTO.getValues().addAll(attr.getValuesAsStrings());\n-            attrTO.setReadonly(attr.getSchema().isReadonly());\n+            attrTO.setSchema(plainAttr.getSchema().getKey());\n+            attrTO.getValues().addAll(plainAttr.getValuesAsStrings());\n+            attrTO.setReadonly(plainAttr.getSchema().isReadonly());\n \n             anyTO.getPlainAttrs().add(attrTO);\n         }\n \n-        for (DerAttr<?> derAttr : derAttrs) {\n+        for (Map.Entry<DerSchema, String> entry : derAttrs.entrySet()) {\n             AttrTO attrTO = new AttrTO();\n-            attrTO.setSchema(derAttr.getSchema().getKey());\n-            attrTO.getValues().add(derAttr.getValue(attrs));\n+            attrTO.setSchema(entry.getKey().getKey());\n+            attrTO.getValues().add(entry.getValue());\n             attrTO.setReadonly(true);\n \n             anyTO.getDerAttrs().add(attrTO);\n@@ -649,21 +567,21 @@ public String transform(final AnyTypeClass role) {\n         }\n     }\n \n-    protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?, ?>, AnyObject> relationship) {\n+    protected RelationshipTO getRelationshipTO(final Relationship<? extends Any<?>, AnyObject> relationship) {\n         return new RelationshipTO.Builder().\n                 left(relationship.getLeftEnd().getType().getKey(), relationship.getLeftEnd().getKey()).\n                 right(relationship.getRightEnd().getType().getKey(), relationship.getRightEnd().getKey()).\n                 build();\n     }\n \n-    protected MembershipTO getMembershipTO(final Membership<? extends Any<?, ?>> membership) {\n+    protected MembershipTO getMembershipTO(final Membership<? extends Any<?>> membership) {\n         return new MembershipTO.Builder().\n                 left(membership.getLeftEnd().getType().getKey(), membership.getLeftEnd().getKey()).\n                 group(membership.getRightEnd().getKey(), membership.getRightEnd().getName()).\n                 build();\n     }\n \n-    protected Map<String, String> getConnObjectKeys(final Any<?, ?> any) {\n+    protected Map<String, String> getConnObjectKeys(final Any<?> any) {\n         Map<String, String> connObjectKeys = new HashMap<>();\n \n         Iterable<? extends ExternalResource> iterable = any instanceof User"},{"sha":"a8ebe0c21ff7f919b16878de486324623c9514ce","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n@@ -78,13 +79,12 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n \n         BeanUtils.copyProperties(anyObject, anyObjectTO, IGNORE_PROPERTIES);\n \n+        Map<DerSchema, String> derAttrValues = derAttrHandler.getValues(anyObject);\n         Map<VirSchema, List<String>> virAttrValues = details\n                 ? virAttrHander.getValues(anyObject)\n                 : Collections.<VirSchema, List<String>>emptyMap();\n-\n         fillTO(anyObjectTO, anyObject.getRealm().getFullPath(), anyObject.getAuxClasses(),\n-                anyObject.getPlainAttrs(), anyObject.getDerAttrs(), virAttrValues,\n-                anyObjectDAO.findAllResources(anyObject));\n+                anyObject.getPlainAttrs(), derAttrValues, virAttrValues, anyObjectDAO.findAllResources(anyObject));\n \n         if (details) {\n             // relationships"},{"sha":"680cf4ab69ab6fe4b93d40ca258d94049ff5c9b6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n@@ -206,12 +207,12 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n             groupTO.setGroupOwner(group.getGroupOwner().getKey());\n         }\n \n+        Map<DerSchema, String> derAttrValues = derAttrHandler.getValues(group);\n         Map<VirSchema, List<String>> virAttrValues = details\n                 ? virAttrHander.getValues(group)\n                 : Collections.<VirSchema, List<String>>emptyMap();\n-\n         fillTO(groupTO, group.getRealm().getFullPath(), group.getAuxClasses(),\n-                group.getPlainAttrs(), group.getDerAttrs(), virAttrValues, group.getResources());\n+                group.getPlainAttrs(), derAttrValues, virAttrValues, group.getResources());\n \n         if (group.getADynMembership() != null) {\n             groupTO.setADynMembershipCond(group.getADynMembership().getFIQLCond());"},{"sha":"5bf13c5f15e3007a61ffe382bf59a9ebdb9bdf44","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -57,6 +57,7 @@\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n@@ -442,12 +443,12 @@ public UserTO getUserTO(final User user, final boolean details) {\n             userTO.setSecurityQuestion(user.getSecurityQuestion().getKey());\n         }\n \n+        Map<DerSchema, String> derAttrValues = derAttrHandler.getValues(user);\n         Map<VirSchema, List<String>> virAttrValues = details\n                 ? virAttrHander.getValues(user)\n                 : Collections.<VirSchema, List<String>>emptyMap();\n-\n         fillTO(userTO, user.getRealm().getFullPath(), user.getAuxClasses(),\n-                user.getPlainAttrs(), user.getDerAttrs(), virAttrValues, userDAO.findAllResources(user));\n+                user.getPlainAttrs(), derAttrValues, virAttrValues, userDAO.findAllResources(user));\n \n         if (details) {\n             // roles"},{"sha":"820c5f34d39f4404ab1bcd102222340ea252644a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -49,19 +49,21 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.velocity.VelocityContext;\n import org.apache.velocity.app.VelocityEngine;\n@@ -86,6 +88,9 @@ public class NotificationManagerImpl implements NotificationManager {\n \n     public static final String MAIL_TEMPLATE_TEXT_SUFFIX = \".txt.vm\";\n \n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n@@ -143,6 +148,9 @@ public class NotificationManagerImpl implements NotificationManager {\n     @Autowired\n     private ToolManager velocityToolManager;\n \n+    @Autowired\n+    private DerAttrHandler derAttrHander;\n+\n     @Autowired\n     private VirAttrHandler virAttrHander;\n \n@@ -171,7 +179,7 @@ public long getMaxRetries() {\n      */\n     private NotificationTask getNotificationTask(\n             final Notification notification,\n-            final Any<?, ?> any,\n+            final Any<?> any,\n             final Map<String, Object> model) {\n \n         if (any != null) {\n@@ -269,7 +277,7 @@ public List<NotificationTask> createTasks(\n             final Object output,\n             final Object... input) {\n \n-        Any<?, ?> any = null;\n+        Any<?> any = null;\n \n         if (before instanceof UserTO) {\n             any = userDAO.find(((UserTO) before).getKey());\n@@ -358,18 +366,20 @@ private String getRecipientEmail(\n                 break;\n \n             case UserDerivedSchema:\n-                UDerAttr derAttr = user.getDerAttr(recipientAttrName);\n-                if (derAttr != null) {\n-                    email = derAttr.getValue(user.getPlainAttrs());\n+                DerSchema schema = derSchemaDAO.find(recipientAttrName);\n+                if (schema == null) {\n+                    LOG.warn(\"Ignoring non existing {} {}\", DerSchema.class.getSimpleName(), recipientAttrName);\n+                } else {\n+                    email = derAttrHander.getValue(user, schema);\n                 }\n                 break;\n \n             case UserVirtualSchema:\n-                VirSchema schema = virSchemaDAO.find(recipientAttrName);\n-                if (schema == null) {\n+                VirSchema virSchema = virSchemaDAO.find(recipientAttrName);\n+                if (virSchema == null) {\n                     LOG.warn(\"Ignoring non existing {} {}\", VirSchema.class.getSimpleName(), recipientAttrName);\n                 } else {\n-                    List<String> virAttrValues = virAttrHander.getValues(user, schema);\n+                    List<String> virAttrValues = virAttrHander.getValues(user, virSchema);\n                     email = virAttrValues.isEmpty() ? null : virAttrValues.get(0);\n                 }\n                 break;"},{"sha":"37dc851460b2c63b0967409952b8890a015411b1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -266,8 +266,8 @@ protected void createOrUpdate(\n         }\n     }\n \n-    protected Any<?, ?> getAny(final PropagationTask task) {\n-        Any<?, ?> any = null;\n+    protected Any<?> getAny(final PropagationTask task) {\n+        Any<?> any = null;\n \n         if (task.getAnyKey() != null) {\n             switch (task.getAnyTypeKind()) {\n@@ -325,7 +325,7 @@ protected void delete(\n              * update, this any object used to have the current resource assigned by more than one mean (for example,\n              * two different memberships with the same resource).\n              */\n-            Any<?, ?> any = getAny(task);\n+            Any<?> any = getAny(task);\n             Collection<String> resources = any instanceof User\n                     ? userDAO.findAllResourceNames((User) any)\n                     : any instanceof AnyObject"},{"sha":"0ab0e25ea92c802dc1b727881cff5ee47e2aafd6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -86,7 +86,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                         JexlContext jexlContext = new MapContext();\n                         JexlUtils.addFieldsToContext(group, jexlContext);\n                         JexlUtils.addPlainAttrsToContext(group.getPlainAttrs(), jexlContext);\n-                        JexlUtils.addDerAttrsToContext(group.getDerAttrs(), group.getPlainAttrs(), jexlContext);\n+                        JexlUtils.addDerAttrsToContext(group, jexlContext);\n \n                         String groupConnObjectLinkLink =\n                                 JexlUtils.evaluate(provision.getMapping().getConnObjectLink(), jexlContext);"},{"sha":"f81622813562334997d1ad2d13e8f05f2f67f5a5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":28,"deletions":26,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -109,8 +110,11 @@ public class PropagationManagerImpl implements PropagationManager {\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected Any<?, ?> find(final AnyTypeKind kind, final Long key) {\n-        AnyDAO<? extends Any<?, ?>> dao;\n+    @Autowired\n+    protected AnyUtilsFactory anyUtilsFactory;\n+\n+    protected Any<?> find(final AnyTypeKind kind, final Long key) {\n+        AnyDAO<? extends Any<?>> dao;\n         switch (kind) {\n             case ANY_OBJECT:\n                 dao = anyObjectDAO;\n@@ -152,7 +156,7 @@ public List<PropagationTask> getUserCreateTasks(\n     }\n \n     protected List<PropagationTask> getCreateTasks(\n-            final Any<?, ?> any,\n+            final Any<?> any,\n             final String password,\n             final Boolean enable,\n             final PropagationByResource propByRes,\n@@ -227,11 +231,11 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPa\n                 toBeExcluded.addAll(CollectionUtils.collect(userPatch.getResources(),\n                         new Transformer<StringPatchItem, String>() {\n \n-                            @Override\n-                            public String transform(final StringPatchItem input) {\n-                                return input.getValue();\n-                            }\n-                        }));\n+                    @Override\n+                    public String transform(final StringPatchItem input) {\n+                        return input.getValue();\n+                    }\n+                }));\n                 toBeExcluded.removeAll(pwdResourceNames);\n                 tasks.addAll(getUserUpdateTasks(wfResult, true, toBeExcluded));\n             }\n@@ -249,7 +253,7 @@ public String transform(final StringPatchItem input) {\n     }\n \n     protected List<PropagationTask> getUpdateTasks(\n-            final Any<?, ?> any,\n+            final Any<?> any,\n             final String password,\n             final boolean changePwd,\n             final Boolean enable,\n@@ -271,7 +275,7 @@ public List<PropagationTask> getDeleteTasks(\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames) {\n \n-        Any<?, ?> any = find(kind, key);\n+        Any<?> any = find(kind, key);\n \n         PropagationByResource localPropByRes = new PropagationByResource();\n \n@@ -289,7 +293,7 @@ public List<PropagationTask> getDeleteTasks(\n     }\n \n     protected List<PropagationTask> getDeleteTasks(\n-            final Any<?, ?> any,\n+            final Any<?> any,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames) {\n \n@@ -308,7 +312,7 @@ protected List<PropagationTask> getDeleteTasks(\n      * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks created\n      */\n-    protected List<PropagationTask> createTasks(final Any<?, ?> any,\n+    protected List<PropagationTask> createTasks(final Any<?> any,\n             final String password, final boolean changePwd,\n             final Boolean enable, final boolean deleteOnResource, final PropagationByResource propByRes,\n             final Collection<AttrTO> vAttrs) {\n@@ -338,22 +342,20 @@ protected List<PropagationTask> createTasks(final Any<?, ?> any,\n                 LOG.warn(\"Ignoring invalid {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n             } else if (schema.isReadonly()) {\n                 LOG.warn(\"Ignoring read-only {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n-            } else {\n-                if (any.getAllowedVirSchemas().contains(schema)\n-                        && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n+            } else if (anyUtilsFactory.getInstance(any).getAllowedSchemas(any, VirSchema.class).contains(schema)\n+                    && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n \n-                    Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());\n-                    if (values == null) {\n-                        values = new HashSet<>();\n-                        vAttrMap.put(schema.getProvision().getResource().getKey(), values);\n-                    }\n-                    values.add(AttributeBuilder.build(schema.getExtAttrName(), vAttr.getValues()));\n-\n-                    propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());\n-                } else {\n-                    LOG.warn(\"{} not owned by or {} not allowed for {}\",\n-                            schema.getProvision().getResource(), schema, any);\n+                Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());\n+                if (values == null) {\n+                    values = new HashSet<>();\n+                    vAttrMap.put(schema.getProvision().getResource().getKey(), values);\n                 }\n+                values.add(AttributeBuilder.build(schema.getExtAttrName(), vAttr.getValues()));\n+\n+                propByRes.add(ResourceOperation.UPDATE, schema.getProvision().getResource().getKey());\n+            } else {\n+                LOG.warn(\"{} not owned by or {} not allowed for {}\",\n+                        schema.getProvision().getResource(), schema, any);\n             }\n         }\n         LOG.debug(\"With virtual attributes {}:\\n{}\\n{}\", any, propByRes, vAttrMap);"},{"sha":"fa3d332b77f77cd48f0bee4c2f8364bdc6827c7d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -61,9 +61,9 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected MappingUtils mappingUtils;\n \n-    protected abstract String getName(Any<?, ?> any);\n+    protected abstract String getName(Any<?> any);\n \n-    protected void deprovision(final Any<?, ?> any) {\n+    protected void deprovision(final Any<?> any) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -76,7 +76,7 @@ protected void deprovision(final Any<?, ?> any) {\n                 noPropResources));\n     }\n \n-    protected void provision(final Any<?, ?> any, final Boolean enabled) {\n+    protected void provision(final Any<?> any, final Boolean enabled) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -94,7 +94,7 @@ protected void provision(final Any<?, ?> any, final Boolean enabled) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void link(final Any<?, ?> any, final Boolean unlink) {\n+    protected void link(final Any<?> any, final Boolean unlink) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n@@ -104,7 +104,7 @@ protected void link(final Any<?, ?> any, final Boolean unlink) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void unassign(final Any<?, ?> any) {\n+    protected void unassign(final Any<?> any) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.DELETE).\n@@ -115,7 +115,7 @@ protected void unassign(final Any<?, ?> any) {\n         deprovision(any);\n     }\n \n-    protected void assign(final Any<?, ?> any, final Boolean enabled) {\n+    protected void assign(final Any<?> any, final Boolean enabled) {\n         AnyPatch patch = newPatch(any.getKey());\n         patch.getResources().add(new StringPatchItem.Builder().\n                 operation(PatchOperation.ADD_REPLACE).\n@@ -148,7 +148,7 @@ protected ConnectorObject getRemoteObject(final String connObjectKey, final Obje\n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n     public boolean handle(final long anyKey) {\n-        Any<?, ?> any = null;\n+        Any<?> any = null;\n         try {\n             any = getAny(anyKey);\n             doHandle(any);\n@@ -169,7 +169,7 @@ public boolean handle(final long anyKey) {\n         }\n     }\n \n-    protected final void doHandle(final Any<?, ?> any) throws JobExecutionException {\n+    protected final void doHandle(final Any<?> any) throws JobExecutionException {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n         ProvisioningReport result = new ProvisioningReport();\n@@ -399,7 +399,7 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    protected Any<?, ?> update(final Any<?, ?> any, final Boolean enabled) {\n+    protected Any<?> update(final Any<?> any, final Boolean enabled) {\n         boolean changepwd;\n         Collection<String> resourceNames;\n         if (any instanceof User) {"},{"sha":"4e6f2ebdf58072bc6ca6ecb9d796484780e67662","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -137,7 +137,7 @@\n \n     protected abstract AnyTO getAnyTO(long key);\n \n-    protected abstract Any<?, ?> getAny(long key);\n+    protected abstract Any<?> getAny(long key);\n \n     protected abstract AnyPatch newPatch(final long key);\n "},{"sha":"f9546cccb381e456e5c524c1ef05115c9b97ef8c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectPushResultHandlerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -36,12 +36,12 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?> any) {\n+    protected String getName(final Any<?> any) {\n         return StringUtils.EMPTY;\n     }\n \n     @Override\n-    protected Any<?, ?> getAny(final long key) {\n+    protected Any<?> getAny(final long key) {\n         try {\n             return anyObjectDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"d194a25fe6f5c5e742ab9a5a911c416df84754fb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -54,7 +54,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?> getAny(final long key) {\n+    protected Any<?> getAny(final long key) {\n         try {\n             return anyObjectDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"a0054936d66ee1db9dd4e329dd55c8e7b9f47bf3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultPushActions.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -34,57 +34,57 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <A extends Any<?, ?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n+    public <A extends Any<?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <A extends Any<?, ?>> void onError(\n+    public <A extends Any<?>> void onError(\n             final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningReport result,\n             final Exception error) throws JobExecutionException {\n \n         // do nothing\n     }\n \n     @Override\n-    public <A extends Any<?, ?>> void after(\n+    public <A extends Any<?>> void after(\n             final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningReport result)\n             throws JobExecutionException {\n "},{"sha":"571fc47121225aebe4074e2476f929f9681bf2d5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupPushResultHandlerImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -36,12 +36,12 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?> any) {\n+    protected String getName(final Any<?> any) {\n         return Group.class.cast(any).getName();\n     }\n \n     @Override\n-    protected Any<?, ?> getAny(final long key) {\n+    protected Any<?> getAny(final long key) {\n         try {\n             return groupDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"c3c63fb4199513fb1d6296f612b1ccf91ad6d888","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -63,7 +63,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?> getAny(final long key) {\n+    protected Any<?> getAny(final long key) {\n         try {\n             return groupDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"65b0cf7fe02a6bbd7d9735c99276810e07b5cde2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PushJobDelegate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPushJobDelegate.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -145,13 +145,13 @@ protected String doExecuteProvisioning(\n \n                 int count = anyDAO.count(SyncopeConstants.FULL_ADMIN_REALMS);\n                 for (int page = 1; page <= (count / PAGE_SIZE) + 1; page++) {\n-                    List<? extends Any<?, ?>> localAnys = StringUtils.isBlank(filter)\n+                    List<? extends Any<?>> localAnys = StringUtils.isBlank(filter)\n                             ? anyDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE)\n                             : searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n                                     SearchCondConverter.convert(filter),\n                                     Collections.<OrderByClause>emptyList(), provision.getAnyType().getKind());\n \n-                    for (Any<?, ?> any : localAnys) {\n+                    for (Any<?> any : localAnys) {\n                         SyncopePushResultHandler handler;\n                         switch (provision.getAnyType().getKind()) {\n                             case USER:"},{"sha":"1c01497313037218316d5066b13c03d37ceb12b4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -199,9 +199,9 @@ private List<Long> findByConnObjectKeyItem(\n                     }\n                 }\n \n-                List<? extends Any<?, ?>> anys =\n+                List<? extends Any<?>> anys =\n                         getAnyDAO(connObjectKeyItem).findByAttrValue(connObjectKeyItem.getIntAttrName(), value);\n-                for (Any<?, ?> any : anys) {\n+                for (Any<?> any : anys) {\n                     result.add(any.getKey());\n                 }\n                 break;\n@@ -210,15 +210,15 @@ private List<Long> findByConnObjectKeyItem(\n             case GroupDerivedSchema:\n             case AnyObjectDerivedSchema:\n                 anys = getAnyDAO(connObjectKeyItem).findByDerAttrValue(connObjectKeyItem.getIntAttrName(), transfUid);\n-                for (Any<?, ?> any : anys) {\n+                for (Any<?> any : anys) {\n                     result.add(any.getKey());\n                 }\n                 break;\n \n             case UserKey:\n             case GroupKey:\n             case AnyObjectKey:\n-                Any<?, ?> any = getAnyDAO(connObjectKeyItem).find(Long.parseLong(transfUid));\n+                Any<?> any = getAnyDAO(connObjectKeyItem).find(Long.parseLong(transfUid));\n                 if (any != null) {\n                     result.add(any.getKey());\n                 }\n@@ -249,7 +249,7 @@ private List<Long> findByCorrelationRule(\n             final ConnectorObject connObj, final SyncCorrelationRule rule, final AnyTypeKind type) {\n \n         List<Long> result = new ArrayList<>();\n-        for (Any<?, ?> any : searchDAO.search(\n+        for (Any<?> any : searchDAO.search(\n                 SyncopeConstants.FULL_ADMIN_REALMS,\n                 rule.getSearchCond(connObj),\n                 Collections.<OrderByClause>emptyList(),"},{"sha":"03865d781d8e8d30a90dc6b10aca852714f7af47","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserPushResultHandlerImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -41,7 +41,7 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected void provision(final Any<?, ?> any, final Boolean enabled) {\n+    protected void provision(final Any<?> any, final Boolean enabled) {\n         AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n@@ -60,12 +60,12 @@ protected void provision(final Any<?, ?> any, final Boolean enabled) {\n     }\n \n     @Override\n-    protected String getName(final Any<?, ?> any) {\n+    protected String getName(final Any<?> any) {\n         return User.class.cast(any).getUsername();\n     }\n \n     @Override\n-    protected Any<?, ?> getAny(final long key) {\n+    protected Any<?> getAny(final long key) {\n         try {\n             return userDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"2a222d0839d485198e4c8115696d9ac20ffe60f7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -54,7 +54,7 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected Any<?, ?> getAny(final long key) {\n+    protected Any<?> getAny(final long key) {\n         try {\n             return userDAO.authFind(key);\n         } catch (Exception e) {"},{"sha":"076d7bcd6ab7b8184e93b3586c27d4143fcb3f71","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/DerAttrTest.java","status":"renamed","additions":23,"deletions":19,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDerAttrTest.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -16,42 +16,46 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.outer;\n+package org.apache.syncope.core.provisioning.java;\n \n-import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n-import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n-import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n-import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n-public class DerSchemaTest extends AbstractTest {\n+public class DerAttrTest extends AbstractTest {\n \n     @Autowired\n-    private UserDAO userDAO;\n+    private DerSchemaDAO derSchemaDAO;\n \n     @Autowired\n-    private DerSchemaDAO derSchemaDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n-    private DerAttrDAO derAttrDAO;\n+    private DerAttrHandler derAttrHandler;\n \n     @Test\n-    public void test() {\n-        DerSchema schema = derSchemaDAO.find(\"cn\");\n-\n-        derSchemaDAO.delete(schema.getKey());\n-\n-        derSchemaDAO.flush();\n-\n-        assertNull(derSchemaDAO.find(schema.getKey()));\n-        assertNull(derAttrDAO.find(100L, UDerAttr.class));\n-        assertNull(userDAO.find(3L).getDerAttr(schema.getKey()));\n+    public void derAttrFromSpecialAttrs() {\n+        DerSchema info = derSchemaDAO.find(\"info\");\n+        assertEquals(\"username + ' - ' + creationDate + '[' + failedLogins + ']'\", info.getExpression());\n+\n+        User user = userDAO.find(3L);\n+        assertNotNull(\"did not get expected user\", user);\n+\n+        String value = derAttrHandler.getValue(user, info);\n+        assertNotNull(value);\n+        assertFalse(value.isEmpty());\n+        assertTrue(value.startsWith(\"vivaldi - 2010-10-20\"));\n+        assertTrue(value.endsWith(\"[0]\"));\n     }\n }","previous_filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/DerSchemaTest.java"},{"sha":"87770a60ef97e66fe6f9857ed29ce89955f93ff2","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -51,7 +51,6 @@\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n-import org.apache.syncope.core.persistence.api.dao.UnallowedSchemaException;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n@@ -114,8 +113,6 @@ public Response toResponse(final Exception ex) {\n                     header(RESTHeaders.ERROR_INFO, ex.getMessage());\n         } else if (ex instanceof DelegatedAdministrationException) {\n             builder = builder(ClientExceptionType.DelegatedAdministration, ExceptionUtils.getRootCauseMessage(ex));\n-        } else if (ex instanceof UnallowedSchemaException) {\n-            builder = builder(ClientExceptionType.UnallowedSchemas, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {\n             builder = builder(ClientExceptionType.EntityExists, getJPAMessage(ex));\n         } else if (ex instanceof DataIntegrityViolationException || ex instanceof JpaSystemException) {\n@@ -134,7 +131,7 @@ public Response toResponse(final Exception ex) {\n                     builder = builder(validationEM.toResponse((ValidationException) ex)).\n                             header(RESTHeaders.ERROR_CODE, ClientExceptionType.RESTValidation.name()).\n                             header(RESTHeaders.ERROR_INFO, ClientExceptionType.RESTValidation.getInfoHeaderValue(\n-                                            ExceptionUtils.getRootCauseMessage(ex)));\n+                                    ExceptionUtils.getRootCauseMessage(ex)));\n \n                     ErrorTO error = new ErrorTO();\n                     error.setStatus(ClientExceptionType.RESTValidation.getResponseStatus().getStatusCode());\n@@ -147,7 +144,7 @@ public Response toResponse(final Exception ex) {\n                 if (builder == null) {\n                     builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR).\n                             header(RESTHeaders.ERROR_INFO, ClientExceptionType.Unknown.getInfoHeaderValue(\n-                                            ExceptionUtils.getRootCauseMessage(ex)));\n+                                    ExceptionUtils.getRootCauseMessage(ex)));\n \n                     ErrorTO error = new ErrorTO();\n                     error.setStatus(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode());"},{"sha":"07dba6e1674ba8a7f3ffe8a3efd8f80e6e6f94c6","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -181,17 +181,16 @@ private void addUpdateOrReplaceAttr(\n         P patch = newPatch(key);\n \n         switch (schemaType) {\n-            case DERIVED:\n-                patch.getDerAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n-                break;\n-\n             case VIRTUAL:\n                 patch.getVirAttrs().add(attrTO);\n                 break;\n \n             case PLAIN:\n-            default:\n                 patch.getPlainAttrs().add(new AttrPatch.Builder().operation(operation).attrTO(attrTO).build());\n+                break;\n+\n+            case DERIVED:\n+            default:\n         }\n \n         update(patch);"},{"sha":"eb22c06eb32323d3436bed2cf8402396da3c2825","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/Create.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FCreate.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -39,8 +39,7 @@ public class Create extends AbstractActivitiServiceTask {\n     protected void doExecute(final String executionId) {\n         UserTO userTO = engine.getRuntimeService().\n                 getVariable(executionId, ActivitiUserWorkflowAdapter.USER_TO, UserTO.class);\n-        Boolean storePassword =\n-                engine.getRuntimeService().\n+        Boolean storePassword = engine.getRuntimeService().\n                 getVariable(executionId, ActivitiUserWorkflowAdapter.STORE_PASSWORD, Boolean.class);\n         // create and set workflow id\n         User user = entityFactory.newEntity(User.class);"},{"sha":"d580152bd5a8ea71f707108e641563ebaee8f1e2","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":7,"deletions":27,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -51,7 +51,6 @@\n import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -222,33 +221,13 @@ public void update() {\n \n         assertEquals(modName, groupTO.getName());\n         assertEquals(2, groupTO.getPlainAttrs().size());\n-        \n-        groupTO.getPlainAttrMap().get(\"show\").getValues().clear();\n-        \n-        groupTO = groupService.update(groupTO).readEntity(new GenericType<ProvisioningResult<GroupTO>>(){}).getAny();\n-        \n-        assertFalse(groupTO.getPlainAttrMap().containsKey(\"show\"));\n-    }\n-\n-    @Test\n-    public void updateRemovingDerAttribute() {\n-        GroupTO groupTO = getBasicSampleTO(\"withderived\" + getUUIDString());\n-        groupTO.getDerAttrs().add(attrTO(\"rderivedschema\", null));\n \n-        groupTO = createGroup(groupTO).getAny();\n-\n-        assertNotNull(groupTO);\n-        assertEquals(1, groupTO.getDerAttrs().size());\n+        groupTO.getPlainAttrMap().get(\"show\").getValues().clear();\n \n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(groupTO.getKey());\n-        groupPatch.getDerAttrs().add(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n-                attrTO(new AttrTO.Builder().schema(\"rderivedschema\").build()).\n-                build());\n+        groupTO = groupService.update(groupTO).readEntity(new GenericType<ProvisioningResult<GroupTO>>() {\n+        }).getAny();\n \n-        groupTO = updateGroup(groupPatch).getAny();\n-        assertNotNull(groupTO);\n-        assertTrue(groupTO.getDerAttrs().isEmpty());\n+        assertFalse(groupTO.getPlainAttrMap().containsKey(\"show\"));\n     }\n \n     @Test\n@@ -680,7 +659,7 @@ public void capabilitiesOverride() {\n             assertEquals(RESOURCE_NAME_LDAP, result.getPropagationStatuses().get(0).getResource());\n             assertEquals(PropagationTaskExecStatus.SUCCESS, result.getPropagationStatuses().get(0).getStatus());\n             group = result.getAny();\n-            \n+\n             // 3. set capability override with only search allowed, but not enable\n             ldap.getCapabilitiesOverride().add(ConnectorCapability.SEARCH);\n             resourceService.update(ldap);\n@@ -748,6 +727,7 @@ public void issueSYNCOPE632() {\n             MappingItemTO connObjectKey = mapping.getConnObjectKeyItem();\n             connObjectKey.setIntMappingType(IntMappingType.GroupDerivedSchema);\n             connObjectKey.setIntAttrName(\"displayProperty\");\n+            connObjectKey.setPurpose(MappingPurpose.PROPAGATION);\n             mapping.setConnObjectKeyItem(connObjectKey);\n             mapping.setConnObjectLink(\"'cn=' + displayProperty + ',ou=groups,o=isp'\");\n \n@@ -873,5 +853,5 @@ public void issueSYNCOPE717() {\n         assertNotNull(groupTO);\n         assertEquals(\"11.23\", groupTO.getPlainAttrMap().get(doubleSchemaName).getValues().get(0));\n     }\n-    \n+\n }"},{"sha":"c502ed1be870a0c6f946bc6e25978c6983c7ece1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":27,"deletions":25,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/eec662457fa05cb9a7bf3980fe18b059434bd69d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/eec662457fa05cb9a7bf3980fe18b059434bd69d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=eec662457fa05cb9a7bf3980fe18b059434bd69d","patch":"@@ -272,23 +272,27 @@ public void enforceMandatoryConditionOnDerived() {\n         resourceTO = getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(resourceTO);\n \n-        UserTO userTO = getUniqueSampleTO(\"syncope222@apache.org\");\n-        userTO.getResources().add(resourceTO.getKey());\n-        userTO.setPassword(\"newPassword12\");\n-\n         try {\n-            userTO = createUser(userTO).getAny();\n-            fail();\n-        } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n-        }\n+            UserTO userTO = getUniqueSampleTO(\"syncope222@apache.org\");\n+            userTO.getResources().add(resourceTO.getKey());\n+            userTO.setPassword(\"newPassword12\");\n \n-        userTO.getAuxClasses().add(\"csv\");\n-        userTO.getDerAttrs().add(attrTO(\"csvuserid\", null));\n+            try {\n+                userTO = createUser(userTO).getAny();\n+                fail();\n+            } catch (SyncopeClientException e) {\n+                assertEquals(ClientExceptionType.RequiredValuesMissing, e.getType());\n+            }\n \n-        userTO = createUser(userTO).getAny();\n-        assertNotNull(userTO);\n-        assertEquals(Collections.singleton(\"resource-csv-enforcing\"), userTO.getResources());\n+            userTO.getAuxClasses().add(\"csv\");\n+            userTO.getDerAttrs().add(new AttrTO.Builder().schema(\"csvuserid\").build());\n+\n+            userTO = createUser(userTO).getAny();\n+            assertNotNull(userTO);\n+            assertEquals(Collections.singleton(resourceTO.getKey()), userTO.getResources());\n+        } finally {\n+            resourceService.delete(resourceTO.getKey());\n+        }\n     }\n \n     @Test\n@@ -590,7 +594,7 @@ public void readWithMailAddressAsUserName() {\n     }\n \n     @Test\n-    public void updateWithouPassword() {\n+    public void updateWithoutPassword() {\n         UserTO userTO = getUniqueSampleTO(\"updatewithout@password.com\");\n \n         userTO = createUser(userTO).getAny();\n@@ -599,15 +603,15 @@ public void updateWithouPassword() {\n \n         UserPatch userPatch = new UserPatch();\n         userPatch.setKey(userTO.getKey());\n-        userPatch.getDerAttrs().add(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n-                attrTO(new AttrTO.Builder().schema(\"cn\").build()).\n+        userPatch.getPlainAttrs().add(new AttrPatch.Builder().operation(PatchOperation.DELETE).\n+                attrTO(new AttrTO.Builder().schema(\"type\").build()).\n                 build());\n \n         userTO = updateUser(userPatch).getAny();\n \n         assertNotNull(userTO);\n         assertNotNull(userTO.getDerAttrMap());\n-        assertFalse(userTO.getDerAttrMap().containsKey(\"cn\"));\n+        assertFalse(userTO.getPlainAttrMap().containsKey(\"type\"));\n     }\n \n     @Test(expected = SyncopeClientException.class)\n@@ -660,8 +664,6 @@ public void update() {\n         String newFullName = getUUIDString() + \"g.h@t.com\";\n         userPatch.getPlainAttrs().add(attrAddReplacePatch(\"fullname\", newFullName));\n \n-        userPatch.getDerAttrs().add(new AttrPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n-                attrTO(new AttrTO.Builder().schema(\"cn\").build()).build());\n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n                 membershipTO(new MembershipTO.Builder().group(8L).build()).build());\n         userPatch.getMemberships().add(new MembershipPatch.Builder().operation(PatchOperation.ADD_REPLACE).\n@@ -972,9 +974,9 @@ public String transform(final PropagationStatus status) {\n         });\n         assertEquals(PropagationTaskExecStatus.SUCCESS, byResource.get(RESOURCE_NAME_LDAP).getStatus());\n         assertTrue(byResource.get(RESOURCE_NAME_TESTDB).getStatus() == PropagationTaskExecStatus.CREATED\n-\t\t   || byResource.get(RESOURCE_NAME_TESTDB).getStatus() == PropagationTaskExecStatus.SUCCESS);\n+                || byResource.get(RESOURCE_NAME_TESTDB).getStatus() == PropagationTaskExecStatus.SUCCESS);\n         assertTrue(byResource.get(RESOURCE_NAME_TESTDB2).getStatus() == PropagationTaskExecStatus.CREATED\n-\t\t   || byResource.get(RESOURCE_NAME_TESTDB2).getStatus() == PropagationTaskExecStatus.SUCCESS);\n+                || byResource.get(RESOURCE_NAME_TESTDB2).getStatus() == PropagationTaskExecStatus.SUCCESS);\n     }\n \n     @Test\n@@ -989,7 +991,7 @@ public void async() {\n \n         ProvisioningResult<UserTO> result = asyncService.create(user).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n-                });\n+        });\n         assertNotNull(result);\n         verifyAsyncResult(result.getPropagationStatuses());\n \n@@ -1001,13 +1003,13 @@ public void async() {\n \n         result = asyncService.update(userPatch).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n-                });\n+        });\n         assertNotNull(result);\n         verifyAsyncResult(result.getPropagationStatuses());\n \n         result = asyncService.delete(result.getAny().getKey()).readEntity(\n                 new GenericType<ProvisioningResult<UserTO>>() {\n-                });\n+        });\n         assertNotNull(result);\n         verifyAsyncResult(result.getPropagationStatuses());\n     }"}]}