{"sha":"b41675a335a7d6b4d297f0cd332738c21a6c29ba","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI0MTY3NWEzMzVhN2Q2YjRkMjk3ZjBjZDMzMjczOGMyMWE2YzI5YmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-28T08:02:10Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-28T11:22:44Z"},"message":"[SYNCOPE-1174] More robust conf params' default value management\n\nThis reverts commit 6634daaeebbe95fea9e1c104bc64d7b2e0d45e4b.","tree":{"sha":"291fe9e415849a2c6040a459115670d76ebf00f5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/291fe9e415849a2c6040a459115670d76ebf00f5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b41675a335a7d6b4d297f0cd332738c21a6c29ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b41675a335a7d6b4d297f0cd332738c21a6c29ba","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b41675a335a7d6b4d297f0cd332738c21a6c29ba","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b41675a335a7d6b4d297f0cd332738c21a6c29ba/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0e4eed03e565107d7aa2801bc892aa099926fd82","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0e4eed03e565107d7aa2801bc892aa099926fd82","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0e4eed03e565107d7aa2801bc892aa099926fd82"}],"stats":{"total":123,"additions":41,"deletions":82},"files":[{"sha":"8098de0fff788937a25d868ef3f97d121ac74f23","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -431,7 +431,7 @@ public ExecTO bulkMembersAction(final String key, final BulkMembersActionType ac\n             Map<String, Object> jobDataMap = jobManager.register(\n                     task,\n                     null,\n-                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n+                    confDAO.find(\"tasks.interruptMaxRetries\", 1L));\n \n             jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, false);\n             jobDataMap.put(GroupMemberProvisionTaskJobDelegate.GROUP_KEY_JOBDETAIL_KEY, key);"},{"sha":"52432771e4942a683023674e0c742e8d47d1bffb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -97,7 +97,7 @@ public ReportTO create(final ReportTO reportTO) {\n             jobManager.register(\n                     report,\n                     null,\n-                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n+                    confDAO.find(\"tasks.interruptMaxRetries\", 1L));\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -123,7 +123,7 @@ public ReportTO update(final ReportTO reportTO) {\n             jobManager.register(\n                     report,\n                     null,\n-                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n+                    confDAO.find(\"tasks.interruptMaxRetries\", 1L));\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getKey(), e);\n \n@@ -173,7 +173,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n             jobManager.register(\n                     report,\n                     startAt,\n-                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n+                    confDAO.find(\"tasks.interruptMaxRetries\", 1L));\n \n             scheduler.getScheduler().triggerJob(JobNamer.getJobKey(report));\n         } catch (Exception e) {"},{"sha":"6b603b9318b9a031ff341793d37e1e19b489edf5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -181,15 +181,15 @@ public class SyncopeLogic extends AbstractLogic<AbstractBaseBean> {\n     private ImplementationLookup implLookup;\n \n     public boolean isSelfRegAllowed() {\n-        return confDAO.find(\"selfRegistration.allowed\", \"false\").getValues().get(0).getBooleanValue();\n+        return confDAO.find(\"selfRegistration.allowed\", false);\n     }\n \n     public boolean isPwdResetAllowed() {\n-        return confDAO.find(\"passwordReset.allowed\", \"false\").getValues().get(0).getBooleanValue();\n+        return confDAO.find(\"passwordReset.allowed\", false);\n     }\n \n     public boolean isPwdResetRequiringSecurityQuestions() {\n-        return confDAO.find(\"passwordReset.securityQuestion\", \"true\").getValues().get(0).getBooleanValue();\n+        return confDAO.find(\"passwordReset.securityQuestion\", true);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")"},{"sha":"06e38d20a91e3b843acf4f1b3975371a1273fd17","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -105,7 +105,7 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n             jobManager.register(\n                     task,\n                     task.getStartAt(),\n-                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n+                    confDAO.find(\"tasks.interruptMaxRetries\", 1L));\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n \n@@ -133,7 +133,7 @@ public <T extends SchedTaskTO> T updateSchedTask(final SchedTaskTO taskTO) {\n             jobManager.register(\n                     task,\n                     task.getStartAt(),\n-                    confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n+                    confDAO.find(\"tasks.interruptMaxRetries\", 1L));\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getKey(), e);\n \n@@ -228,7 +228,7 @@ public ExecTO execute(final String key, final Date startAt, final boolean dryRun\n                     Map<String, Object> jobDataMap = jobManager.register(\n                             (SchedTask) task,\n                             startAt,\n-                            confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue());\n+                            confDAO.find(\"tasks.interruptMaxRetries\", 1L));\n \n                     jobDataMap.put(TaskJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n "},{"sha":"b6fe304a55ea78e888bbbaf832611f72d8be31fe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ConfDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FConfDAO.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -25,7 +25,7 @@ public interface ConfDAO extends DAO<Conf> {\n \n     CPlainAttr find(String key);\n \n-    CPlainAttr find(String key, String defaultValue);\n+    <T> T find(String key, T defaultValue);\n \n     Conf get();\n "},{"sha":"3f11fea7fb2486be047c0627e1b0d525c2c6f397","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAConfDAO.java","status":"modified","additions":7,"deletions":37,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAConfDAO.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -19,17 +19,9 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.Conf;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n-import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPAConf;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -38,17 +30,6 @@ public class JPAConfDAO extends AbstractDAO<Conf> implements ConfDAO {\n \n     private static final String KEY = \"cd64d66f-6fff-4008-b966-a06b1cc1436d\";\n \n-    private PlainSchemaDAO schemaDAO;\n-\n-    private PlainSchemaDAO schemaDAO() {\n-        synchronized (this) {\n-            if (schemaDAO == null) {\n-                schemaDAO = ApplicationContextProvider.getApplicationContext().getBean(PlainSchemaDAO.class);\n-            }\n-        }\n-        return schemaDAO;\n-    }\n-\n     @Override\n     public Conf get() {\n         Conf instance = entityManager().find(JPAConf.class, KEY);\n@@ -70,28 +51,17 @@ public CPlainAttr find(final String key) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public CPlainAttr find(final String key, final String defaultValue) {\n+    public <T> T find(final String key, final T defaultValue) {\n         CPlainAttr result = find(key);\n         if (result == null) {\n-            PlainSchema schema = schemaDAO().find(key);\n-            if (schema != null) {\n-                JPACPlainAttr newAttr = new JPACPlainAttr();\n-                newAttr.setSchema(schema);\n-\n-                PlainAttrValue attrValue;\n-                if (newAttr.getSchema().isUniqueConstraint()) {\n-                    attrValue = new JPACPlainAttrUniqueValue();\n-                    ((PlainAttrUniqueValue) attrValue).setSchema(newAttr.getSchema());\n-                } else {\n-                    attrValue = new JPACPlainAttrValue();\n-                }\n-                newAttr.add(defaultValue, attrValue);\n-\n-                result = newAttr;\n-            }\n+            return defaultValue;\n         }\n \n-        return result;\n+        return result.getUniqueValue() == null\n+                ? result.getValues().isEmpty()\n+                ? null\n+                : result.getValues().get(0).<T>getValue()\n+                : result.getUniqueValue().<T>getValue();\n     }\n \n     @Override"},{"sha":"065f5f7c567b2dc8bc8da339130a4a8a39a3d2e5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AccessTokenDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -27,7 +27,7 @@\n \n public interface AccessTokenDataBinder {\n \n-    Triple<String, String, Date> generateJWT(String subject, int duration, Map<String, Object> claims);\n+    Triple<String, String, Date> generateJWT(String subject, long duration, Map<String, Object> claims);\n \n     Pair<String, Date> create(String subject, Map<String, Object> claims, boolean replaceExisting);\n "},{"sha":"f30562df5a4f9643c82b37719e99c5925fa970e1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.spring.BeanUtils;\n@@ -84,7 +83,7 @@ public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n \n     @Override\n     public Triple<String, String, Date> generateJWT(\n-            final String subject, final int duration, final Map<String, Object> claims) {\n+            final String subject, final long duration, final Map<String, Object> claims) {\n \n         credentialChecker.checkIsDefaultJWSKeyInUse();\n \n@@ -125,17 +124,9 @@ public Pair<String, Date> create(\n         }\n \n         if (replaceExisting || body == null) {\n-            int duration = 120;\n-            CPlainAttr jwtLifetimeMins = confDAO.find(\"jwt.lifetime.minutes\", \"120\");\n-            if (jwtLifetimeMins != null) {\n-                duration = jwtLifetimeMins.getValues().get(0).getLongValue().intValue();\n-            } else {\n-                LOG.warn(\"No schema found for 'jwt.lifetime.minutes'. Using default value of '120'\");\n-            }\n-\n             Triple<String, String, Date> created = generateJWT(\n                     subject,\n-                    duration,\n+                    confDAO.find(\"jwt.lifetime.minutes\", 120L),\n                     claims);\n \n             body = created.getMiddle();\n@@ -174,7 +165,7 @@ public Pair<String, Date> update(final AccessToken accessToken) {\n         credentialChecker.checkIsDefaultJWSKeyInUse();\n \n         Date now = new Date();\n-        int duration = confDAO.find(\"jwt.lifetime.minutes\", \"120\").getValues().get(0).getLongValue().intValue();\n+        long duration = confDAO.find(\"jwt.lifetime.minutes\", 120L);\n         Date expiry = new Date(now.getTime() + 60L * 1000L * duration);\n         consumer.getJwtClaims().setExpiryTime(expiry.getTime());\n "},{"sha":"0fc31f7ba7d4d8cd6c7935b4b80f938cd82f7490","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -140,7 +140,7 @@ public ConnInstance update(final ConnInstanceTO connInstanceTO) {\n \n         // 2. ensure the maximum history size is not exceeded\n         List<ConnInstanceHistoryConf> history = connInstanceHistoryConfDAO.findByEntity(connInstance);\n-        long maxHistorySize = confDAO.find(\"connector.conf.history.size\", \"10\").getValues().get(0).getLongValue();\n+        long maxHistorySize = confDAO.find(\"connector.conf.history.size\", 10L);\n         if (maxHistorySize < history.size()) {\n             // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n             for (int i = 0; i < history.size() - maxHistorySize; i++) {"},{"sha":"b21a6055e0e8283ff4211ecc21ebc30820ff2e68","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -127,7 +127,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n             // 2. ensure the maximum history size is not exceeded\n             List<ExternalResourceHistoryConf> history = resourceHistoryConfDAO.findByEntity(resource);\n-            long maxHistorySize = confDAO.find(\"resource.conf.history.size\", \"10\").getValues().get(0).getLongValue();\n+            long maxHistorySize = confDAO.find(\"resource.conf.history.size\", 10L);\n             if (maxHistorySize < history.size()) {\n                 // always remove the last item since history was obtained  by a query with ORDER BY creation DESC\n                 for (int i = 0; i < history.size() - maxHistorySize; i++) {"},{"sha":"7c291c06f7a16dfa98f7c8d179932db45ce6f476","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -116,7 +116,7 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO returnUserTO(final UserTO userTO) {\n-        if (!confDAO.find(\"return.password.value\", \"false\").getValues().get(0).getBooleanValue()) {\n+        if (!confDAO.find(\"return.password.value\", false)) {\n             userTO.setPassword(null);\n         }\n         return userTO;\n@@ -158,8 +158,7 @@ public boolean verifyPassword(final User user, final String password) {\n \n     private void setPassword(final User user, final String password, final SyncopeClientCompositeException scce) {\n         try {\n-            String algorithm = confDAO.find(\n-                    \"password.cipher.algorithm\", CipherAlgorithm.AES.name()).getValues().get(0).getStringValue();\n+            String algorithm = confDAO.find(\"password.cipher.algorithm\", CipherAlgorithm.AES.name());\n             CipherAlgorithm predefined = CipherAlgorithm.valueOf(algorithm);\n             user.setPassword(password, predefined);\n         } catch (IllegalArgumentException e) {\n@@ -642,8 +641,8 @@ public MembershipTO transform(final UMembership membership) {\n                 @Override\n                 public MembershipTO transform(final Group group) {\n                     MembershipTO membershipTO = new MembershipTO.Builder().\n-                        group(group.getKey(), group.getName()).\n-                        build();\n+                            group(group.getKey(), group.getName()).\n+                            build();\n                     return membershipTO;\n \n                 }"},{"sha":"1af62c55f262755ac98c4f4ed617cca8381bea10","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobManagerImpl.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobManagerImpl.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -30,7 +30,6 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -307,16 +306,16 @@ public void load() {\n             public Pair<String, Long> exec() {\n                 String notificationJobCronExpression = StringUtils.EMPTY;\n \n-                CPlainAttr notificationJobCronExp =\n-                        confDAO.find(\"notificationjob.cronExpression\", NotificationJob.DEFAULT_CRON_EXP);\n-                if (!notificationJobCronExp.getValuesAsStrings().isEmpty()) {\n+                CPlainAttr notificationJobCronExp = confDAO.find(\"notificationjob.cronExpression\");\n+                if (notificationJobCronExp == null) {\n+                    notificationJobCronExpression = NotificationJob.DEFAULT_CRON_EXP;\n+                } else if (!notificationJobCronExp.getValuesAsStrings().isEmpty()) {\n                     notificationJobCronExpression = notificationJobCronExp.getValuesAsStrings().get(0);\n                 }\n \n-                long interruptMaxRetries =\n-                        confDAO.find(\"tasks.interruptMaxRetries\", \"1\").getValues().get(0).getLongValue();\n+                long interruptMaxRetries = confDAO.find(\"tasks.interruptMaxRetries\", 1L);\n \n-                return ImmutablePair.of(notificationJobCronExpression, interruptMaxRetries);\n+                return Pair.of(notificationJobCronExpression, interruptMaxRetries);\n             }\n         });\n "},{"sha":"5438cee6240a7fa84d165367e6bc56455393289b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/NotificationManagerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FNotificationManagerImpl.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -162,7 +162,7 @@ public class NotificationManagerImpl implements NotificationManager {\n     @Transactional(readOnly = true)\n     @Override\n     public long getMaxRetries() {\n-        return confDAO.find(\"notification.maxRetries\", \"0\").getValues().get(0).getLongValue();\n+        return confDAO.find(\"notification.maxRetries\", 0L);\n     }\n \n     /**"},{"sha":"63e1cf10ab7a1ef0c3e54885ff461713ab37c509","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -221,7 +221,7 @@ public Pair<User, Boolean> authenticate(final Authentication authentication) {\n             boolean userModified = false;\n             authenticated = AuthDataAccessor.this.authenticate(user, authentication.getCredentials().toString());\n             if (authenticated) {\n-                if (confDAO.find(\"log.lastlogindate\", Boolean.toString(true)).getValues().get(0).getBooleanValue()) {\n+                if (confDAO.find(\"log.lastlogindate\", true)) {\n                     user.setLastLoginDate(new Date());\n                     userModified = true;\n                 }"},{"sha":"a5e70e50c5f839c0e16053a0a27ff3c046ee6381","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/task/GenerateToken.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2Ftask%2FGenerateToken.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -36,8 +36,8 @@ protected void doExecute(final String executionId) {\n                 getVariable(executionId, ActivitiUserWorkflowAdapter.USER, User.class);\n \n         user.generateToken(\n-                confDAO.find(\"token.length\", \"256\").getValues().get(0).getLongValue().intValue(),\n-                confDAO.find(\"token.expireTime\", \"60\").getValues().get(0).getLongValue().intValue());\n+                confDAO.find(\"token.length\", 256L).intValue(),\n+                confDAO.find(\"token.expireTime\", 60L).intValue());\n \n         engine.getRuntimeService().setVariable(executionId, ActivitiUserWorkflowAdapter.USER, user);\n     }"},{"sha":"429a2ce9294a29b21fb7598b6908972b69b2a439","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -127,8 +127,8 @@ protected WorkflowResult<String> doReactivate(final User user) {\n     @Override\n     protected void doRequestPasswordReset(final User user) {\n         user.generateToken(\n-                confDAO.find(\"token.length\", \"256\").getValues().get(0).getLongValue().intValue(),\n-                confDAO.find(\"token.expireTime\", \"60\").getValues().get(0).getLongValue().intValue());\n+                confDAO.find(\"token.length\", 256L).intValue(),\n+                confDAO.find(\"token.expireTime\", 60L).intValue());\n         userDAO.save(user);\n     }\n "},{"sha":"ab999d913694b1d2617d8145fea474560214cb7a","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41675a335a7d6b4d297f0cd332738c21a6c29ba/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41675a335a7d6b4d297f0cd332738c21a6c29ba/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=b41675a335a7d6b4d297f0cd332738c21a6c29ba","patch":"@@ -123,7 +123,7 @@\n @Component\n public class SAML2SPLogic extends AbstractSAML2Logic<AbstractBaseBean> {\n \n-    private static final Integer JWT_RELAY_STATE_DURATION = 5;\n+    private static final long JWT_RELAY_STATE_DURATION = 5L;\n \n     private static final String JWT_CLAIM_IDP_DEFLATE = \"IDP_DEFLATE\";\n "}]}