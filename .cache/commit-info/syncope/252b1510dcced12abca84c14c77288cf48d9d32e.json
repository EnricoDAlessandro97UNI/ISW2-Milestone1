{"sha":"252b1510dcced12abca84c14c77288cf48d9d32e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI1MmIxNTEwZGNjZWQxMmFiY2E4NGMxNGM3NzI4OGNmNDhkOWQzMmU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-07-17T10:05:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-13T15:16:50Z"},"message":"[SYNCOPE-652] Preliminary work (still struggling with OpenJPA slices)","tree":{"sha":"f92f1270360cd34094491b8a2dc7093c44a68c8a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f92f1270360cd34094491b8a2dc7093c44a68c8a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/252b1510dcced12abca84c14c77288cf48d9d32e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/252b1510dcced12abca84c14c77288cf48d9d32e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/252b1510dcced12abca84c14c77288cf48d9d32e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/252b1510dcced12abca84c14c77288cf48d9d32e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba7f1a5ce9f852e9783853b7397a64a66ac4826c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ba7f1a5ce9f852e9783853b7397a64a66ac4826c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ba7f1a5ce9f852e9783853b7397a64a66ac4826c"}],"stats":{"total":1388,"additions":1280,"deletions":108},"files":[{"sha":"e17fd2c471e0ff75b937afc627ccee1bb4ac0101","filename":".travis.yml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -19,6 +19,7 @@ jdk:\n # default install is mvn install --quiet -DskipTests=true\n install: mvn --show-version --quiet -P all,skipTests\n #invoker.streamLogs: we cannot access to log files through Travis web ui, so display everything in the console\n-script: mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n+#script: mvn --show-version --quiet clean install -Dinvoker.streamLogs=true\n+script: mvn --show-version --quiet -PskipTests -Dinvoker.streamLogs=true\n notifications:\n   webhooks: http://rovere.tirasa.net/cgi-bin/travis.cgi"},{"sha":"a3a271c14d14d5778004070ccd29f7549eeba483","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":24,"deletions":8,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -20,6 +20,7 @@\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -31,6 +32,7 @@\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n import org.apache.cxf.staxutils.DocumentDepthProperties;\n import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n  * Factory bean for creating instances of {@link SyncopeClient}.\n@@ -62,30 +64,31 @@ public static ContentType fromString(final String value) {\n \n     private JacksonJaxbJsonProvider jsonProvider;\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private JAXBElementProvider jaxbProvider;\n+    private JAXBElementProvider<?> jaxbProvider;\n \n     private RestClientExceptionMapper exceptionMapper;\n \n     private String address;\n \n     private ContentType contentType;\n \n+    private String domain;\n+\n     private RestClientFactoryBean restClientFactoryBean;\n \n     protected JacksonJaxbJsonProvider defaultJsonProvider() {\n         return new JacksonJaxbJsonProvider();\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    protected JAXBElementProvider defaultJAXBProvider() {\n-        JAXBElementProvider defaultJAXBProvider = new JAXBElementProvider();\n+    @SuppressWarnings({ \"rawtypes\" })\n+    protected JAXBElementProvider<?> defaultJAXBProvider() {\n+        JAXBElementProvider<?> defaultJAXBProvider = new JAXBElementProvider();\n \n         DocumentDepthProperties depthProperties = new DocumentDepthProperties();\n         depthProperties.setInnerElementCountThreshold(500);\n         defaultJAXBProvider.setDepthProperties(depthProperties);\n \n-        Map marshallerProperties = new HashMap();\n+        Map<String, Object> marshallerProperties = new HashMap<>();\n         marshallerProperties.put(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n         defaultJAXBProvider.setMarshallerProperties(marshallerProperties);\n \n@@ -108,6 +111,10 @@ protected RestClientFactoryBean defaultRestClientFactoryBean() {\n         }\n         defaultRestClientFactoryBean.setAddress(address);\n \n+        if (StringUtils.isNotBlank(domain)) {\n+            defaultRestClientFactoryBean.setHeaders(Collections.singletonMap(RESTHeaders.DOMAIN, domain));\n+        }\n+\n         defaultRestClientFactoryBean.setThreadSafe(true);\n         defaultRestClientFactoryBean.setInheritHeaders(true);\n \n@@ -134,13 +141,13 @@ public void setJsonProvider(final JacksonJaxbJsonProvider jsonProvider) {\n         this.jsonProvider = jsonProvider;\n     }\n \n-    public JAXBElementProvider getJaxbProvider() {\n+    public JAXBElementProvider<?> getJaxbProvider() {\n         return jaxbProvider == null\n                 ? defaultJAXBProvider()\n                 : jaxbProvider;\n     }\n \n-    public SyncopeClientFactoryBean setJaxbProvider(final JAXBElementProvider jaxbProvider) {\n+    public SyncopeClientFactoryBean setJaxbProvider(final JAXBElementProvider<?> jaxbProvider) {\n         this.jaxbProvider = jaxbProvider;\n         return this;\n     }\n@@ -181,6 +188,15 @@ public SyncopeClientFactoryBean setContentType(final String contentType) {\n         return this;\n     }\n \n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    public SyncopeClientFactoryBean setDomain(final String domain) {\n+        this.domain = domain;\n+        return this;\n+    }\n+\n     public RestClientFactoryBean getRestClientFactoryBean() {\n         return restClientFactoryBean == null\n                 ? defaultRestClientFactoryBean()"},{"sha":"dbce5dec02287f82f870bfec85ba33f3e2dbd6d2","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -27,6 +27,8 @@ public final class SyncopeConstants {\n \n     public static final String NAMESPACE = \"http://syncope.apache.org/2.0\";\n \n+    public static final String MASTER_DOMAIN = \"Master\";\n+\n     public static final String ROOT_REALM = \"/\";\n \n     public static final Set<String> FULL_ADMIN_REALMS = Collections.singleton(\"/\");"},{"sha":"a04b95df5c4a9f39596a817242e11ffeaf763913","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/jaxb/package-info.java","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fjaxb%2Fpackage-info.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+@XmlSchema(namespace = SyncopeConstants.NAMESPACE)\n+package org.apache.syncope.common.lib.jaxb;\n+\n+import javax.xml.bind.annotation.XmlSchema;\n+import org.apache.syncope.common.lib.SyncopeConstants;"},{"sha":"3f05e19b27091e5705179e776efd61f67c60b66b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/DomainTO.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FDomainTO.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+\n+@XmlRootElement(name = \"domain\")\n+@XmlType\n+public class DomainTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -7938075259986084934L;\n+\n+    private String key;\n+\n+    private String adminPwd;\n+\n+    private CipherAlgorithm adminCipherAlgorithm;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getAdminPwd() {\n+        return adminPwd;\n+    }\n+\n+    public void setAdminPwd(final String adminPwd) {\n+        this.adminPwd = adminPwd;\n+    }\n+\n+    public CipherAlgorithm getAdminCipherAlgorithm() {\n+        return adminCipherAlgorithm;\n+    }\n+\n+    public void setAdminCipherAlgorithm(final CipherAlgorithm adminCipherAlgorithm) {\n+        this.adminCipherAlgorithm = adminCipherAlgorithm;\n+    }\n+\n+}"},{"sha":"85befc6da0e08a133a3613eaf8c4e76d6324a2ff","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -28,6 +28,16 @@ public final class Entitlement {\n \n     public static final String ANONYMOUS = \"ANONYMOUS\";\n \n+    public static final String DOMAIN_LIST = \"DOMAIN_LIST\";\n+\n+    public static final String DOMAIN_CREATE = \"DOMAIN_CREATE\";\n+\n+    public static final String DOMAIN_READ = \"DOMAIN_READ\";\n+\n+    public static final String DOMAIN_UPDATE = \"DOMAIN_UPDATE\";\n+\n+    public static final String DOMAIN_DELETE = \"DOMAIN_DELETE\";\n+\n     public static final String REALM_LIST = \"REALM_LIST\";\n \n     public static final String REALM_CREATE = \"REALM_CREATE\";"},{"sha":"13b30df62196d883386a121da1e13085049f4b13","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -23,6 +23,8 @@\n  */\n public final class RESTHeaders {\n \n+    public static final String DOMAIN = \"X-Syncope-Domain\";\n+\n     public static final String USER_KEY = \"X-Syncope-User-Key\";\n \n     public static final String USERNAME = \"X-Syncope-Username\";"},{"sha":"4076dc1a395e62a2a037e7a536cc96d97ab08e77","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/DomainService.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FDomainService.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.model.wadl.Description;\n+import org.apache.cxf.jaxrs.model.wadl.Descriptions;\n+import org.apache.cxf.jaxrs.model.wadl.DocTarget;\n+import org.apache.syncope.common.lib.to.DomainTO;\n+\n+/**\n+ * REST operations for domains.\n+ */\n+@Path(\"domains\")\n+public interface DomainService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all domains.\n+     *\n+     * @return list of all domains.\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<DomainTO> list();\n+\n+    /**\n+     * Returns domain with matching key.\n+     *\n+     * @param key domain key to be read\n+     * @return domain with matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    DomainTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates a new domain.\n+     *\n+     * @param domainTO domain to be created\n+     * @return <tt>Response</tt> object featuring <tt>Location</tt> header of created domain\n+     */\n+    @Descriptions({\n+        @Description(target = DocTarget.RESPONSE,\n+                value = \"Featuring <tt>Location</tt> header of created domain\")\n+    })\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response create(@NotNull DomainTO domainTO);\n+\n+    /**\n+     * Updates the domain matching the provided key.\n+     *\n+     * @param domainTO domain to be stored\n+     */\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    void update(@NotNull DomainTO domainTO);\n+\n+    /**\n+     * Deletes the domain matching the provided key.\n+     *\n+     * @param key domain key to be deleted\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"6aa375c9985d27a039834ad3cfcce8093ea43a10","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractLogic.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractLogic.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -31,9 +31,6 @@\n  */\n abstract class AbstractLogic<T extends AbstractBaseBean> {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractLogic.class);\n \n     /**"},{"sha":"1743370d018255f1a2963d0d4c9f1d6ec4b3b5d8","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeClassLogic.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -42,11 +42,11 @@ public class AnyTypeClassLogic extends AbstractTransactionalLogic<AnyTypeClassTO\n     private AnyTypeClassDataBinder binder;\n \n     @Autowired\n-    private AnyTypeClassDAO anyTypeDAO;\n+    private AnyTypeClassDAO anyTypeClassDAO;\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_READ + \"')\")\n     public AnyTypeClassTO read(final String key) {\n-        AnyTypeClass anyType = anyTypeDAO.find(key);\n+        AnyTypeClass anyType = anyTypeClassDAO.find(key);\n         if (anyType == null) {\n             LOG.error(\"Could not find anyType '\" + key + \"'\");\n \n@@ -58,7 +58,7 @@ public AnyTypeClassTO read(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_LIST + \"')\")\n     public List<AnyTypeClassTO> list() {\n-        return CollectionUtils.collect(anyTypeDAO.findAll(), new Transformer<AnyTypeClass, AnyTypeClassTO>() {\n+        return CollectionUtils.collect(anyTypeClassDAO.findAll(), new Transformer<AnyTypeClass, AnyTypeClassTO>() {\n \n             @Override\n             public AnyTypeClassTO transform(final AnyTypeClass input) {\n@@ -68,35 +68,35 @@ public AnyTypeClassTO transform(final AnyTypeClass input) {\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_CREATE + \"')\")\n-    public AnyTypeClassTO create(final AnyTypeClassTO anyTypeTO) {\n-        return binder.getAnyTypeClassTO(anyTypeDAO.save(binder.create(anyTypeTO)));\n+    public AnyTypeClassTO create(final AnyTypeClassTO anyTypeClassTO) {\n+        return binder.getAnyTypeClassTO(anyTypeClassDAO.save(binder.create(anyTypeClassTO)));\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_UPDATE + \"')\")\n-    public AnyTypeClassTO update(final AnyTypeClassTO anyTypeTO) {\n-        AnyTypeClass anyType = anyTypeDAO.find(anyTypeTO.getKey());\n+    public AnyTypeClassTO update(final AnyTypeClassTO anyTypeClassTO) {\n+        AnyTypeClass anyType = anyTypeClassDAO.find(anyTypeClassTO.getKey());\n         if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + anyTypeTO.getKey() + \"'\");\n-            throw new NotFoundException(String.valueOf(anyTypeTO.getKey()));\n+            LOG.error(\"Could not find anyTypeClass '\" + anyTypeClassTO.getKey() + \"'\");\n+            throw new NotFoundException(String.valueOf(anyTypeClassTO.getKey()));\n         }\n \n-        binder.update(anyType, anyTypeTO);\n-        anyType = anyTypeDAO.save(anyType);\n+        binder.update(anyType, anyTypeClassTO);\n+        anyType = anyTypeClassDAO.save(anyType);\n \n         return binder.getAnyTypeClassTO(anyType);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANYTYPECLASS_DELETE + \"')\")\n     public AnyTypeClassTO delete(final String key) {\n-        AnyTypeClass anyType = anyTypeDAO.find(key);\n-        if (anyType == null) {\n-            LOG.error(\"Could not find anyType '\" + key + \"'\");\n+        AnyTypeClass anyTypeClass = anyTypeClassDAO.find(key);\n+        if (anyTypeClass == null) {\n+            LOG.error(\"Could not find anyTypeClass '\" + key + \"'\");\n \n             throw new NotFoundException(String.valueOf(key));\n         }\n \n-        AnyTypeClassTO deleted = binder.getAnyTypeClassTO(anyType);\n-        anyTypeDAO.delete(key);\n+        AnyTypeClassTO deleted = binder.getAnyTypeClassTO(anyTypeClass);\n+        anyTypeClassDAO.delete(key);\n         return deleted;\n     }\n \n@@ -108,7 +108,7 @@ protected AnyTypeClassTO resolveReference(final Method method, final Object... a\n \n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof Long) {\n+                if (args[i] instanceof String) {\n                     key = (String) args[i];\n                 } else if (args[i] instanceof AnyTypeClassTO) {\n                     key = ((AnyTypeClassTO) args[i]).getKey();\n@@ -118,7 +118,7 @@ protected AnyTypeClassTO resolveReference(final Method method, final Object... a\n \n         if (StringUtils.isNotBlank(key)) {\n             try {\n-                return binder.getAnyTypeClassTO(anyTypeDAO.find(key));\n+                return binder.getAnyTypeClassTO(anyTypeClassDAO.find(key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);"},{"sha":"1ff60c79f947ce4d3fc6582a92a85b6cd16e3ab6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyTypeLogic.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -116,7 +116,7 @@ protected AnyTypeTO resolveReference(final Method method, final Object... args)\n \n         if (ArrayUtils.isNotEmpty(args)) {\n             for (int i = 0; key == null && i < args.length; i++) {\n-                if (args[i] instanceof Long) {\n+                if (args[i] instanceof String) {\n                     key = (String) args[i];\n                 } else if (args[i] instanceof AnyTypeTO) {\n                     key = ((AnyTypeTO) args[i]).getKey();"},{"sha":"58f717d0763ebc575fd0140830d6bd287dc31627","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.DomainTO;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.provisioning.api.data.DomainDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DomainLogic extends AbstractTransactionalLogic<DomainTO> {\n+\n+    @Autowired\n+    private DomainDataBinder binder;\n+\n+    @Autowired\n+    private DomainDAO domainDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_READ + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    public DomainTO read(final String key) {\n+        Domain domain = domainDAO.find(key);\n+        if (domain == null) {\n+            LOG.error(\"Could not find domain '\" + key + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(key));\n+        }\n+\n+        return binder.getDomainTO(domain);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_LIST + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    public List<DomainTO> list() {\n+        return CollectionUtils.collect(domainDAO.findAll(), new Transformer<Domain, DomainTO>() {\n+\n+            @Override\n+            public DomainTO transform(final Domain input) {\n+                return binder.getDomainTO(input);\n+            }\n+        }, new ArrayList<DomainTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_CREATE + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    public DomainTO create(final DomainTO domainTO) {\n+        return binder.getDomainTO(domainDAO.save(binder.create(domainTO)));\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_UPDATE + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    public DomainTO update(final DomainTO domainTO) {\n+        Domain domain = domainDAO.find(domainTO.getKey());\n+        if (domain == null) {\n+            LOG.error(\"Could not find domain '\" + domainTO.getKey() + \"'\");\n+            throw new NotFoundException(String.valueOf(domainTO.getKey()));\n+        }\n+\n+        binder.update(domain, domainTO);\n+        domain = domainDAO.save(domain);\n+\n+        return binder.getDomainTO(domain);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.DOMAIN_DELETE + \"') and authentication.details.domain == \"\n+            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n+    public DomainTO delete(final String key) {\n+        Domain domain = domainDAO.find(key);\n+        if (domain == null) {\n+            LOG.error(\"Could not find domain '\" + key + \"'\");\n+\n+            throw new NotFoundException(String.valueOf(key));\n+        }\n+\n+        DomainTO deleted = binder.getDomainTO(domain);\n+        domainDAO.delete(key);\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected DomainTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof DomainTO) {\n+                    key = ((DomainTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (StringUtils.isNotBlank(key)) {\n+            try {\n+                return binder.getDomainTO(domainDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"f476210c78b22f8b2d8935260d5be98fb0c139a1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -103,7 +103,7 @@ public GroupTO read(final Long groupKey) {\n     @Transactional(readOnly = true)\n     public List<GroupTO> own() {\n         return CollectionUtils.collect(\n-                userDAO.findAllGroups(userDAO.find(AuthContextUtils.getAuthenticatedUsername())),\n+                userDAO.findAllGroups(userDAO.find(AuthContextUtils.getUsername())),\n                 new Transformer<Group, GroupTO>() {\n \n                     @Override"},{"sha":"d9c60496c43dfc1269be8574d5825769880514e3","filename":"core/misc/pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fpom.xml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -100,11 +100,16 @@ under the License.\n       <groupId>org.springframework.security</groupId>\n       <artifactId>spring-security-web</artifactId>\n     </dependency>\n-        \n+\n     <dependency>\n       <groupId>org.apache.syncope.core</groupId>\n       <artifactId>syncope-core-provisioning-api</artifactId>\n       <version>${project.version}</version>\n+    </dependency>        \n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-rest-api</artifactId>\n+      <version>${project.version}</version>\n     </dependency>\n     \n     <!-- TEST -->"},{"sha":"932627d624f7a157c5d57b585e1c8877d9a83e9c","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthContextUtils.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthContextUtils.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -22,6 +22,7 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections4.MapUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n@@ -32,24 +33,25 @@\n \n public final class AuthContextUtils {\n \n-    public static String getAuthenticatedUsername() {\n+    public static String getUsername() {\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n         return authentication == null ? SyncopeConstants.UNAUTHENTICATED : authentication.getName();\n     }\n \n-    public static void updateAuthenticatedUsername(final String newUsername) {\n+    public static void updateUsername(final String newUsername) {\n         Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n \n-        Authentication newAuth = new UsernamePasswordAuthenticationToken(\n+        UsernamePasswordAuthenticationToken newAuth = new UsernamePasswordAuthenticationToken(\n                 new User(newUsername, \"FAKE_PASSWORD\", auth.getAuthorities()),\n                 auth.getCredentials(), auth.getAuthorities());\n+        newAuth.setDetails(auth.getDetails());\n         SecurityContextHolder.getContext().setAuthentication(newAuth);\n     }\n \n     public static Map<String, Set<String>> getAuthorizations() {\n         Map<String, Set<String>> result = null;\n \n-        final SecurityContext ctx = SecurityContextHolder.getContext();\n+        SecurityContext ctx = SecurityContextHolder.getContext();\n         if (ctx != null && ctx.getAuthentication() != null && ctx.getAuthentication().getAuthorities() != null) {\n             result = new HashMap<>();\n             for (GrantedAuthority authority : ctx.getAuthentication().getAuthorities()) {\n@@ -64,6 +66,19 @@ public static Map<String, Set<String>> getAuthorizations() {\n         return MapUtils.emptyIfNull(result);\n     }\n \n+    public static String getDomain() {\n+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n+\n+        String domainKey = auth != null && auth.getDetails() instanceof SyncopeAuthenticationDetails\n+                ? SyncopeAuthenticationDetails.class.cast(auth.getDetails()).getDomain()\n+                : null;\n+        if (StringUtils.isBlank(domainKey)) {\n+            domainKey = SyncopeConstants.MASTER_DOMAIN;\n+        }\n+\n+        return domainKey;\n+    }\n+\n     /**\n      * Private default constructor, for static-only classes.\n      */"},{"sha":"68b27f47f80266bbd0d804d64dc866de59be1e77","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationDetails.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationDetails.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.io.Serializable;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+public class SyncopeAuthenticationDetails implements Serializable {\n+\n+    private static final long serialVersionUID = -5899959397393502897L;\n+\n+    private final String remoteAddress;\n+\n+    private final String sessionId;\n+\n+    private String domain;\n+\n+    public SyncopeAuthenticationDetails(final HttpServletRequest request) {\n+        this.remoteAddress = request.getRemoteAddr();\n+\n+        HttpSession session = request.getSession(false);\n+        this.sessionId = session == null ? null : session.getId();\n+\n+        this.domain = request.getHeader(RESTHeaders.DOMAIN);\n+    }\n+\n+    public SyncopeAuthenticationDetails(final String domain) {\n+        this.remoteAddress = null;\n+        this.sessionId = null;\n+        this.domain = domain;\n+    }\n+\n+    public String getRemoteAddress() {\n+        return remoteAddress;\n+    }\n+\n+    public String getSessionId() {\n+        return sessionId;\n+    }\n+\n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    public void setDomain(final String domain) {\n+        this.domain = domain;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+\n+}"},{"sha":"b943edf80ea198ca564cd3a194b845e3633fab9f","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationDetailsSource.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationDetailsSource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationDetailsSource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationDetailsSource.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import org.springframework.security.authentication.AuthenticationDetailsSource;\n+\n+public class SyncopeAuthenticationDetailsSource\n+        implements AuthenticationDetailsSource<HttpServletRequest, SyncopeAuthenticationDetails> {\n+\n+    @Override\n+    public SyncopeAuthenticationDetails buildDetails(final HttpServletRequest context) {\n+        return new SyncopeAuthenticationDetails(context);\n+    }\n+\n+}"},{"sha":"01abb9394f1da1afbbc1bcb2726229177350fba2","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":35,"deletions":16,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -23,14 +23,14 @@\n import java.util.Set;\n import javax.annotation.Resource;\n import org.apache.commons.collections4.SetUtils;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n@@ -39,7 +39,10 @@\n import org.apache.syncope.core.misc.AuditManager;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n@@ -57,14 +60,14 @@\n @Configurable\n public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n \n-    /**\n-     * Logger.\n-     */\n     protected static final Logger LOG = LoggerFactory.getLogger(SyncopeAuthenticationProvider.class);\n \n     @Autowired\n     protected AuditManager auditManager;\n \n+    @Autowired\n+    protected DomainDAO domainDAO;\n+\n     @Autowired\n     protected ConfDAO confDAO;\n \n@@ -131,18 +134,36 @@ public void setUserDetailsService(final UserDetailsService syncopeUserDetailsSer\n     @Transactional(noRollbackFor = { BadCredentialsException.class, DisabledException.class })\n     public Authentication authenticate(final Authentication authentication) {\n         boolean authenticated = false;\n-        User user = null;\n \n-        String username = authentication.getName();\n-        if (anonymousUser.equals(username)) {\n+        String domainKey = authentication.getDetails() instanceof SyncopeAuthenticationDetails\n+                ? SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain()\n+                : null;\n+        if (StringUtils.isBlank(domainKey)) {\n+            domainKey = SyncopeConstants.MASTER_DOMAIN;\n+        }\n+        SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).setDomain(domainKey);\n+\n+        if (anonymousUser.equals(authentication.getName())) {\n             authenticated = authentication.getCredentials().toString().equals(anonymousKey);\n-        } else if (adminUser.equals(username)) {\n-            authenticated = encryptor.verify(\n-                    authentication.getCredentials().toString(),\n-                    CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n-                    adminPassword);\n+        } else if (adminUser.equals(authentication.getName())) {\n+            if (SyncopeConstants.MASTER_DOMAIN.equals(domainKey)) {\n+                authenticated = encryptor.verify(\n+                        authentication.getCredentials().toString(),\n+                        CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n+                        adminPassword);\n+            } else {\n+                Domain domain = domainDAO.find(domainKey);\n+                if (domain == null) {\n+                    throw new NotFoundException(\"Could not find domain \" + domainKey);\n+                }\n+\n+                authenticated = encryptor.verify(\n+                        authentication.getCredentials().toString(),\n+                        domain.getAdminCipherAlgorithm(),\n+                        domain.getAdminPwd());\n+            }\n         } else {\n-            user = userDAO.find(username);\n+            User user = userDAO.find(authentication.getName());\n \n             if (user != null) {\n                 if (user.isSuspended() != null && user.isSuspended()) {\n@@ -166,7 +187,6 @@ public Authentication authenticate(final Authentication authentication) {\n                     authentication.getPrincipal(),\n                     null,\n                     userDetailsService.loadUserByUsername(authentication.getPrincipal().toString()).getAuthorities());\n-\n             token.setDetails(authentication.getDetails());\n \n             auditManager.audit(\n@@ -257,7 +277,6 @@ protected boolean authenticate(final User user, final String password) {\n         boolean authenticated = encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n         LOG.debug(\"{} authenticated on internal storage: {}\", user.getUsername(), authenticated);\n \n-        AnyUtils attrUtils = attrUtilsFactory.getInstance(AnyTypeKind.USER);\n         for (Iterator<? extends ExternalResource> itor = getPassthroughResources(user).iterator();\n                 itor.hasNext() && !authenticated;) {\n "},{"sha":"57b19803f0e251ff0740b1704cb776662a11676a","filename":"core/misc/src/main/resources/securityContext.xml","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -49,9 +49,12 @@ under the License.\n     <constructor-arg ref=\"securityContextRepository\"/>\n   </bean>\n \n+  <bean id=\"syncopeAuthenticationDetailsSource\"\n+        class=\"org.apache.syncope.core.misc.security.SyncopeAuthenticationDetailsSource\"/>\n+\n   <security:http security-context-repository-ref=\"securityContextRepository\" realm=\"Apache Syncope authentication\" \n                  use-expressions=\"false\" disable-url-rewriting=\"false\">\n-    <security:http-basic/>\n+    <security:http-basic authentication-details-source-ref=\"syncopeAuthenticationDetailsSource\"/>\n     <security:anonymous username=\"${anonymousUser}\"/>\n     <security:intercept-url pattern=\"/**\"/>\n     "},{"sha":"eb00a0db94ebcbf2450e6d9d81ef5079f93f517a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDAO.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -22,6 +22,8 @@\n \n public interface DAO<E extends Entity<KEY>, KEY> {\n \n+    String getDomain(E entity);\n+\n     void refresh(E entity);\n \n     void detach(E entity);"},{"sha":"ece1b16989b2551fbe04617b3484d7c9ecdd3011","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DomainDAO.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDomainDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDomainDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDomainDAO.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+\n+public interface DomainDAO extends DAO<Domain, String> {\n+\n+    Domain find(String key);\n+\n+    List<Domain> findAll();\n+\n+    Domain save(Domain domain);\n+\n+    void delete(String key);\n+}"},{"sha":"7c496f01ffb58a3b816b9d8f9c18c87131544cf1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Domain.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDomain.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+\n+public interface Domain extends Entity<String> {\n+\n+    void setKey(String name);\n+\n+    String getAdminPwd();\n+\n+    CipherAlgorithm getAdminCipherAlgorithm();\n+\n+    void setPassword(String password, CipherAlgorithm cipherAlgoritm);\n+}"},{"sha":"0ab9e82ecac8ae481eab755c4036dd3ae68e1422","filename":"core/persistence-jpa/pom.xml","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fpom.xml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -55,7 +55,11 @@ under the License.\n       <groupId>org.apache.openjpa</groupId>\n       <artifactId>openjpa-persistence-jdbc</artifactId>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>org.apache.openjpa</groupId>\n+      <artifactId>openjpa-slice</artifactId>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-dbcp2</artifactId>\n@@ -105,6 +109,11 @@ under the License.\n     </dependency>\n         \n     <!-- TEST -->\n+    <dependency> \n+      <groupId>javax.servlet</groupId> \n+      <artifactId>javax.servlet-api</artifactId> \n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-simple</artifactId>"},{"sha":"c2d5ae67f4956235928768fb9c9de7e9fc556be1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractDAO.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -25,6 +25,8 @@\n import javax.persistence.PersistenceContext;\n import javax.persistence.PersistenceContextType;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.openjpa.slice.SlicePersistence;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.core.persistence.api.dao.DAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n@@ -92,6 +94,16 @@ protected String toOrderByStatement(final Class<? extends Entity<KEY>> beanClass\n         return statement.toString();\n     }\n \n+    @Override\n+    public String getDomain(final E entity) {\n+        try {\n+            return SlicePersistence.getSlice(entity);\n+        } catch (Exception e) {\n+            LOG.debug(\"While fetching slice for {}\", entity, e);\n+            return SyncopeConstants.MASTER_DOMAIN;\n+        }\n+    }\n+\n     @Override\n     public void refresh(final E entity) {\n         entityManager.refresh(entity);"},{"sha":"e0eae6a6469c3f0bb9d93cfbe0f0cb263d314e4b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -387,12 +387,9 @@ private OrderBySupport parseOrderBy(final AnyTypeKind type, final SearchSupport\n         List<T> result = new ArrayList<>();\n \n         for (Object anyKey : query.getResultList()) {\n-            long actualKey;\n-            if (anyKey instanceof Object[]) {\n-                actualKey = ((Number) ((Object[]) anyKey)[0]).longValue();\n-            } else {\n-                actualKey = ((Number) anyKey).longValue();\n-            }\n+            long actualKey = anyKey instanceof Object[]\n+                    ? ((Number) ((Object[]) anyKey)[0]).longValue()\n+                    : ((Number) anyKey).longValue();\n \n             T any = typeKind == AnyTypeKind.USER\n                     ? (T) userDAO.find(actualKey)"},{"sha":"37a4cd27a324cb625046184c007fe2c3f3418f7d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADomainDAO.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADomainDAO.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.DomainDAO;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADomain;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public class JPADomainDAO extends AbstractDAO<Domain, String> implements DomainDAO {\n+\n+    @Override\n+    public Domain find(final String key) {\n+        return entityManager.find(JPADomain.class, key);\n+    }\n+\n+    @Override\n+    public List<Domain> findAll() {\n+        TypedQuery<Domain> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPADomain.class.getSimpleName() + \" e \", Domain.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Domain save(final Domain anyTypeClass) {\n+        return entityManager.merge(anyTypeClass);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        Domain domain = find(key);\n+        if (domain == null) {\n+            return;\n+        }\n+\n+        entityManager.remove(domain);\n+    }\n+}"},{"sha":"3b413c0368a684e21bc1dd5006b5ffacda64da70","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -74,8 +74,8 @@ protected AnyUtils init() {\n     protected void securityChecks(final User user) {\n         // Allows anonymous (during self-registration) and self (during self-update) to read own user,\n         // otherwise goes through security checks to see if required entitlements are owned\n-        if (!AuthContextUtils.getAuthenticatedUsername().equals(anonymousUser)\n-                && !AuthContextUtils.getAuthenticatedUsername().equals(user.getUsername())) {\n+        if (!AuthContextUtils.getUsername().equals(anonymousUser)\n+                && !AuthContextUtils.getUsername().equals(user.getUsername())) {\n \n             Set<String> authRealms = AuthContextUtils.getAuthorizations().get(Entitlement.USER_READ);\n             boolean authorized = CollectionUtils.exists(authRealms, new Predicate<String>() {"},{"sha":"4e8044d168577c5ef42c8bb3cd9e46f59bd5b6fc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AnnotatedEntityListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -33,7 +33,7 @@ public class AnnotatedEntityListener {\n     @PrePersist\n     @PreUpdate\n     public void setSysInfo(final AnnotatedEntity<?> entity) {\n-        final String username = AuthContextUtils.getAuthenticatedUsername();\n+        final String username = AuthContextUtils.getUsername();\n         LOG.debug(\"Set system properties for '{}'\", entity);\n \n         final Date now = new Date();"},{"sha":"3e9169ee365880c6c78745a7b40cc0b46822cfb9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADomain.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADomain.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.misc.security.Encryptor;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.DomainCheck;\n+\n+@Entity\n+@Table(name = JPADomain.TABLE)\n+@DomainCheck\n+public class JPADomain extends AbstractEntity<String> implements Domain {\n+\n+    private static final long serialVersionUID = -5891241943464285840L;\n+\n+    public static final String TABLE = \"SyncopeDomain\";\n+\n+    @Id\n+    private String name;\n+\n+    private String adminPwd;\n+\n+    @Enumerated(EnumType.STRING)\n+    private CipherAlgorithm adminCipherAlgorithm;\n+\n+    @Override\n+    public String getKey() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setKey(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getAdminPwd() {\n+        return adminPwd;\n+    }\n+\n+    @Override\n+    public CipherAlgorithm getAdminCipherAlgorithm() {\n+        return adminCipherAlgorithm;\n+    }\n+\n+    @Override\n+    public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+        try {\n+            this.adminPwd = Encryptor.getInstance().encode(password, cipherAlgoritm);\n+            this.adminCipherAlgorithm = cipherAlgoritm;\n+        } catch (Exception e) {\n+            LOG.error(\"Could not encode password\", e);\n+            this.adminPwd = null;\n+        }\n+    }\n+\n+}"},{"sha":"41d3f748709240f32cdd327088ff41b698331d76","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.user.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -129,7 +130,9 @@ public class JPAEntityFactory implements EntityFactory {\n     public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n         T result;\n \n-        if (reference.equals(Realm.class)) {\n+        if (reference.equals(Domain.class)) {\n+            result = (T) new JPADomain();\n+        } else if (reference.equals(Realm.class)) {\n             result = (T) new JPARealm();\n         } else if (reference.equals(AccountPolicy.class)) {\n             result = (T) new JPAAccountPolicy();"},{"sha":"2e61b06711db1bffb76d89aa7abbe203fbc77423","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/slice/DomainDistributionPolicy.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainDistributionPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainDistributionPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainDistributionPolicy.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.slice;\n+\n+import java.util.List;\n+import org.apache.openjpa.slice.DistributionPolicy;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+\n+public class DomainDistributionPolicy implements DistributionPolicy {\n+\n+    @Override\n+    public String distribute(final Object pc, final List<String> slices, final Object context) {\n+        return (pc instanceof Domain)\n+                ? SyncopeConstants.MASTER_DOMAIN\n+                : AuthContextUtils.getDomain();\n+    }\n+\n+}"},{"sha":"c6cad6e4af32d7191782da047f179ed150f16df7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/slice/DomainFinderTargetPolicy.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainFinderTargetPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainFinderTargetPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainFinderTargetPolicy.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.slice;\n+\n+import java.util.List;\n+import org.apache.openjpa.slice.FinderTargetPolicy;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADomain;\n+\n+public class DomainFinderTargetPolicy implements FinderTargetPolicy {\n+\n+    @Override\n+    public String[] getTargets(final Class<?> cls, final Object oid, final List<String> slices, final Object context) {\n+        return new String[] {\n+            JPADomain.class.equals(cls)\n+            ? SyncopeConstants.MASTER_DOMAIN\n+            : AuthContextUtils.getDomain()\n+        };\n+    }\n+\n+}"},{"sha":"193ef2b567de190851e1f3f1a50a5666cc32ff5a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/slice/DomainQueryTargetPolicy.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainQueryTargetPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainQueryTargetPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fslice%2FDomainQueryTargetPolicy.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.slice;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.openjpa.slice.QueryTargetPolicy;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADomain;\n+\n+public class DomainQueryTargetPolicy implements QueryTargetPolicy {\n+\n+    @Override\n+    public String[] getTargets(final String query, final Map<Object, Object> params, final String language,\n+            final List<String> slices, final Object context) {\n+\n+        return new String[] {\n+            query.contains(JPADomain.class.getSimpleName())\n+            ? SyncopeConstants.MASTER_DOMAIN\n+            : AuthContextUtils.getDomain()\n+        };\n+    }\n+\n+}"},{"sha":"f40c37e4aa10acc8452ca4467647dc61f9d21c38","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/DomainCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainCheck.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = DomainValidator.class)\n+@Documented\n+public @interface DomainCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.domain}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"2e585e4f80a89b0aaed4585f756e65ab80b8fb3c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/DomainValidator.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FDomainValidator.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+\n+public class DomainValidator extends AbstractValidator<DomainCheck, Domain> {\n+\n+    @Override\n+    public boolean isValid(final Domain object, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid = !SyncopeConstants.MASTER_DOMAIN.equals(object.getKey());\n+\n+        if (!isValid) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Reserved: \" + SyncopeConstants.MASTER_DOMAIN)).\n+                    addPropertyNode(\"name\").addConstraintViolation();\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"054808dbbe931a3d670597501a174a4411a18f7a","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -22,8 +22,8 @@ jpa.password=syncope\n jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\n jpa.pool.validationQuery=SELECT 1\n jpa.orm=META-INF/spring-orm.xml\n-#note: other connection pool settings can also be configured here, see persistenceContext.xml\n+# note: other connection pool settings can also be configured here, see persistenceContext.xml\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n quartz.sql=tables_postgres.sql\n audit.sql=audit.sql\n-database.schema=\n+database.schema=\n\\ No newline at end of file"},{"sha":"d3a7e45fe69c3fa0b11ff6fa180e54373cee15ea","filename":"core/persistence-jpa/src/main/resources/persistenceContextEMFactory.xml","status":"modified","additions":27,"deletions":5,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -21,7 +21,7 @@ under the License.\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n-\n+  \n   <bean id=\"entityManagerFactory\"\n         class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n     <property name=\"packagesToScan\" value=\"org.apache.syncope.core.persistence.jpa.entity\"/>\n@@ -47,19 +47,41 @@ under the License.\n     </property>\n     <property name=\"jpaPropertyMap\">\n       <map>\n+        <entry key=\"openjpa.Log\" value=\"DefaultLevel=INFO, Runtime=TRACE, Tool=TRACE, SQL=TRACE\"/>\n+        \n         <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>\n         <entry key=\"openjpa.ConnectionFactoryProperties\" \n         value=\"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n-                                \n+        \n         <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n         <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>\n \n         <entry key=\"openjpa.jdbc.SchemaFactory\" value=\"native(ForeignKeys=true)\"/>\n-        <entry key=\"openjpa.jdbc.MappingDefaults\" value=\"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict\"/>\n-                \n+        <entry key=\"openjpa.jdbc.MappingDefaults\" \n+               value=\"ForeignKeyDeleteAction=restrict, JoinForeignKeyDeleteAction=restrict\"/>\n+                        \n         <entry key=\"openjpa.DataCache\" value=\"true\"/>\n-        <entry key=\"openjpa.QueryCache\" value=\"true\"/>\n+        <entry key=\"openjpa.QueryCache\" value=\"false\"/>\n+        <entry key=\"openjpa.QueryCompilationCache\" value=\"false\"/>\n         <entry key=\"openjpa.RemoteCommitProvider\" value=\"sjvm\"/>\n+        \n+        <entry key=\"openjpa.BrokerFactory\" value=\"slice\"/>       \n+        <entry key=\"openjpa.BrokerImpl\" value=\"org.apache.openjpa.slice.DistributedBrokerImpl\"/> \n+        <entry key=\"openjpa.slice.Lenient\" value=\"false\"/>\n+        \n+        <entry key=\"openjpa.slice.DistributionPolicy\" \n+               value=\"org.apache.syncope.core.persistence.jpa.slice.DomainDistributionPolicy\"/>\n+        <entry key=\"openjpa.slice.QueryTargetPolicy\" \n+               value=\"org.apache.syncope.core.persistence.jpa.slice.DomainQueryTargetPolicy\"/>\n+        <entry key=\"openjpa.slice.FinderTargetPolicy\" \n+               value=\"org.apache.syncope.core.persistence.jpa.slice.DomainFinderTargetPolicy\"/>\n+\n+        <entry key=\"openjpa.slice.Names\" value=\"Master\"/>        \n+        <entry key=\"openjpa.slice.Master\"  value=\"Master\"/>\n+        <entry key=\"openjpa.slice.Lenient\" value=\"false\"/>\n+        \n+        <entry key=\"openjpa.slice.Master.ConnectionFactory\" value-ref=\"dataSource\"/>\n+        <entry key=\"openjpa.slice.Master.jdbc.DBDictionary\" value=\"${jpa.dialect}\"/>\n       </map>\n     </property>\n   </bean>"},{"sha":"a709638c8b7c93b57066642844cdbd3aa2e44d40","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -54,7 +54,7 @@ public class UserTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<User> list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n-        assertEquals(\"did not get expected number of users \", 5, list.size());\n+        assertEquals(\"did not get expected number of users\", 5, list.size());\n     }\n \n     @Test\n@@ -68,25 +68,25 @@ public void count() {\n     public void findAllByPageAndSize() {\n         // get first page\n         List<User> list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 2);\n-        assertEquals(\"did not get expected number of users \", 2, list.size());\n+        assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get second page\n         list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 2);\n-        assertEquals(\"did not get expected number of users \", 2, list.size());\n+        assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get second page with uncomplete set\n         list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 2, 3);\n-        assertEquals(\"did not get expected number of users \", 2, list.size());\n+        assertEquals(\"did not get expected number of users\", 2, list.size());\n \n         // get unexistent page\n         list = userDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 3, 2);\n-        assertEquals(\"did not get expected number of users \", 1, list.size());\n+        assertEquals(\"did not get expected number of users\", 1, list.size());\n     }\n \n     @Test\n     public void findByDerAttributeValue() {\n         final List<User> list = userDAO.findByDerAttrValue(\"cn\", \"Vivaldi, Antonio\");\n-        assertEquals(\"did not get expected number of users \", 1, list.size());\n+        assertEquals(\"did not get expected number of users\", 1, list.size());\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n@@ -105,7 +105,7 @@ public void findByAttributeValue() {\n         fullnameValue.setStringValue(\"Gioacchino Rossini\");\n \n         final List<User> list = userDAO.findByAttrValue(\"fullname\", fullnameValue);\n-        assertEquals(\"did not get expected number of users \", 1, list.size());\n+        assertEquals(\"did not get expected number of users\", 1, list.size());\n     }\n \n     @Test\n@@ -114,7 +114,7 @@ public void findByAttributeBooleanValue() {\n         coolValue.setBooleanValue(true);\n \n         final List<User> list = userDAO.findByAttrValue(\"cool\", coolValue);\n-        assertEquals(\"did not get expected number of users \", 1, list.size());\n+        assertEquals(\"did not get expected number of users\", 1, list.size());\n     }\n \n     @Test"},{"sha":"6993a0bfe4c6723b30272836f95bf5200454287d","filename":"core/persistence-jpa/src/test/resources/persistence.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fpersistence.properties?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -22,9 +22,9 @@ jpa.password=\n jpa.dialect=org.apache.openjpa.jdbc.sql.H2Dictionary\n jpa.pool.validationQuery=SELECT 1\n jpa.orm=META-INF/spring-orm.xml\n-#note: other connection pool settings can also be configured here, see persistenceContext.xml\n+# note: other connection pool settings can also be configured here, see persistenceContext.xml\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n quartz.scheduler.idleWaitTime=5000\n quartz.sql=tables_h2.sql\n audit.sql=audit.sql\n-database.schema=\n+database.schema=\n\\ No newline at end of file"},{"sha":"0b85441ef166b8a9bd723ce5aabd45f6bf961acb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/DomainDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FDomainDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FDomainDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FDomainDataBinder.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.DomainTO;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+\n+public interface DomainDataBinder {\n+\n+    Domain create(DomainTO domainTO);\n+\n+    void update(Domain domain, DomainTO domainTO);\n+\n+    DomainTO getDomainTO(Domain domain);\n+}"},{"sha":"a1dc161772a6536ff5444395fd41146e793179c3","filename":"core/provisioning-java/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -38,6 +38,12 @@ under the License.\n   </properties>\n \n   <dependencies>\n+    <dependency> \n+      <groupId>javax.servlet</groupId> \n+      <artifactId>javax.servlet-api</artifactId> \n+      <scope>provided</scope>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context-support</artifactId>"},{"sha":"4ef408ce7f1885f4b54d9a93e7e6ca3323de5aca","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DomainDataBinderImpl.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDomainDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDomainDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDomainDataBinderImpl.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.DomainTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.Domain;\n+import org.apache.syncope.core.provisioning.api.data.DomainDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DomainDataBinderImpl implements DomainDataBinder {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public Domain create(final DomainTO domainTO) {\n+        Domain domain = entityFactory.newEntity(Domain.class);\n+        update(domain, domainTO);\n+        return domain;\n+    }\n+\n+    @Override\n+    public void update(final Domain domain, final DomainTO domainTO) {\n+        if (domain.getKey() == null) {\n+            domain.setKey(domainTO.getKey());\n+        }\n+\n+        if (StringUtils.isBlank(domainTO.getAdminPwd()) || domainTO.getAdminCipherAlgorithm() == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n+            sce.getElements().add(\"Actual password value and / or cipher algorithm\");\n+        }\n+\n+        domain.setPassword(domainTO.getAdminPwd(), domainTO.getAdminCipherAlgorithm());\n+    }\n+\n+    @Override\n+    public DomainTO getDomainTO(final Domain domain) {\n+        DomainTO domainTO = new DomainTO();\n+\n+        domainTO.setKey(domain.getKey());\n+\n+        domainTO.setAdminCipherAlgorithm(domain.getAdminCipherAlgorithm());\n+        domainTO.setAdminPwd(domainTO.getAdminPwd());\n+\n+        return domainTO;\n+    }\n+\n+}"},{"sha":"f52b94125b291a58d4603702ac16bd18beaa7f60","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -88,7 +88,7 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     public UserTO getAuthenticatedUserTO() {\n         final UserTO authUserTO;\n \n-        final String authUsername = AuthContextUtils.getAuthenticatedUsername();\n+        final String authUsername = AuthContextUtils.getUsername();\n         if (anonymousUser.equals(authUsername)) {\n             authUserTO = new UserTO();\n             authUserTO.setKey(-2);\n@@ -244,8 +244,12 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n         if (userMod.getUsername() != null && !userMod.getUsername().equals(user.getUsername())) {\n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n \n+            String oldUsername = user.getUsername();\n             user.setUsername(userMod.getUsername());\n-            AuthContextUtils.updateAuthenticatedUsername(userMod.getUsername());\n+\n+            if (oldUsername.equals(AuthContextUtils.getUsername())) {\n+                AuthContextUtils.updateUsername(userMod.getUsername());\n+            }\n         }\n \n         // security question / answer:"},{"sha":"34ca299da5903c159cfb6d99c084f5ae6b6bccac","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractProvisioningJob.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractProvisioningJob.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -24,11 +24,13 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n+import javax.annotation.Resource;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.syncope.core.misc.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.misc.security.SyncopeGrantedAuthority;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -49,7 +51,6 @@\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.User;\n-import org.springframework.security.core.userdetails.UserDetails;\n \n /**\n  * Job for executing synchronization tasks.\n@@ -61,6 +62,9 @@\n public abstract class AbstractProvisioningJob<T extends ProvisioningTask, A extends ProvisioningActions>\n         extends AbstractTaskJob {\n \n+    @Resource(name = \"adminUser\")\n+    protected String adminUser;\n+\n     /**\n      * ConnInstance loader.\n      */\n@@ -404,27 +408,25 @@ public GrantedAuthority transform(final String entitlement) {\n                     }\n                 }, new ArrayList<GrantedAuthority>());\n \n-        UserDetails userDetails = new User(\"admin\", \"FAKE_PASSWORD\", authorities);\n-\n-        SecurityContextHolder.getContext().setAuthentication(\n-                new UsernamePasswordAuthenticationToken(userDetails, \"FAKE_PASSWORD\", authorities));\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new User(adminUser, \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(taskDAO.getDomain(task)));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n \n         try {\n             Class<T> clazz = getTaskClassReference();\n             if (!clazz.isAssignableFrom(task.getClass())) {\n                 throw new JobExecutionException(\"Task \" + taskId + \" isn't a SyncTask\");\n             }\n \n-            T provisioningTask = clazz.cast(this.task);\n+            T provisioningTask = clazz.cast(task);\n \n             Connector connector;\n             try {\n                 connector = connFactory.getConnector(provisioningTask.getResource());\n             } catch (Exception e) {\n-                final String msg = String.\n-                        format(\"Connector instance bean for resource %s and connInstance %s not found\",\n-                                provisioningTask.getResource(), provisioningTask.getResource().getConnector());\n-\n+                String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n+                        provisioningTask.getResource(), provisioningTask.getResource().getConnector());\n                 throw new JobExecutionException(msg, e);\n             }\n "},{"sha":"1ae087a7b992561c45e72850ece94dcb9fed61d9","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddDomainFilter.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddDomainFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddDomainFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddDomainFilter.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf;\n+\n+import java.io.IOException;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.ext.Provider;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.core.misc.security.AuthContextUtils;\n+\n+/**\n+ * Adds the domain header to all responses.\n+ */\n+@Provider\n+public class AddDomainFilter implements ContainerResponseFilter {\n+\n+    @Override\n+    public void filter(final ContainerRequestContext reqCtx, final ContainerResponseContext resCtx) throws IOException {\n+        resCtx.getHeaders().add(RESTHeaders.DOMAIN, AuthContextUtils.getDomain());\n+    }\n+}"},{"sha":"31c4d69be5cb13063c4f9c7a1f72cb1d7c214415","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/AddETagFilter.java","status":"renamed","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FAddETagFilter.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.rest.cxf.service;\n+package org.apache.syncope.core.rest.cxf;\n \n import java.io.IOException;\n import javax.ws.rs.container.ContainerRequestContext;\n@@ -29,10 +29,8 @@\n import org.apache.syncope.common.lib.to.AbstractAnnotatedBean;\n \n /**\n- * Adds the <tt>ETag</tt> filter to any response containing an instance of <tt>AbstractSysInfoTO</tt> as entity.\n+ * Adds the <tt>ETag</tt> header to any response containing an instance of {@link AbstractAnnotatedBean} as entity.\n  * The actual ETag value is computed on the basis of last change date (or creation date if not available).\n- *\n- * @see AbstractSysInfoTO\n  */\n @Provider\n public class AddETagFilter implements ContainerResponseFilter {","previous_filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AddETagFilter.java"},{"sha":"6632424f609a3f411ca3de6ba2bb30631f656dcf","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/DomainServiceImpl.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDomainServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDomainServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FDomainServiceImpl.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.DomainTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.DomainService;\n+import org.apache.syncope.core.logic.DomainLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class DomainServiceImpl extends AbstractServiceImpl implements DomainService {\n+\n+    @Autowired\n+    private DomainLogic logic;\n+\n+    @Override\n+    public List<DomainTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public DomainTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response create(final DomainTO anyTypeTO) {\n+        DomainTO created = logic.create(anyTypeTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(String.valueOf(created.getKey())).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final DomainTO anyTypeTO) {\n+        logic.update(anyTypeTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"58184221206336df4a59469fcc3f752e3d92ce21","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -88,9 +88,10 @@ under the License.\n     <property name=\"javaDocPath\" value=\"/WEB-INF/lib/syncope-common-rest-api-${syncope.version}-javadoc.jar\"/>\n   </bean>\n   \n-  <bean id=\"addETagFilter\" class=\"org.apache.syncope.core.rest.cxf.service.AddETagFilter\"/>\n+  <bean id=\"addDomainFilter\" class=\"org.apache.syncope.core.rest.cxf.AddDomainFilter\"/>\n+  <bean id=\"addETagFilter\" class=\"org.apache.syncope.core.rest.cxf.AddETagFilter\"/>\n   \n-  <jaxrs:server id=\"restContainer\" address=\"/\" \n+  <jaxrs:server id=\"restContainer\" address=\"/\"\n                 basePackages=\"org.apache.syncope.common.rest.api.service, org.apache.syncope.core.rest.cxf.service\" \n                 staticSubresourceResolution=\"true\">\n     <jaxrs:properties> \n@@ -108,6 +109,7 @@ under the License.\n       <ref bean=\"exceptionMapper\"/>\n       <ref bean=\"searchContextProvider\"/>\n       <ref bean=\"wadlGenerator\"/>\n+      <ref bean=\"addDomainFilter\"/>\n       <ref bean=\"addETagFilter\"/>\n     </jaxrs:providers>\n     <jaxrs:extensionMappings>"},{"sha":"c124c057905027d52df2f5d230c8361b8086b41e","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -252,7 +252,7 @@ public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boo\n             final Boolean enabled, final boolean storePassword) {\n \n         Map<String, Object> variables = new HashMap<>();\n-        variables.put(WF_EXECUTOR, AuthContextUtils.getAuthenticatedUsername());\n+        variables.put(WF_EXECUTOR, AuthContextUtils.getUsername());\n         variables.put(USER_TO, userTO);\n         variables.put(ENABLED, enabled);\n         variables.put(STORE_PASSWORD, storePassword);\n@@ -299,7 +299,7 @@ protected Set<String> doExecuteTask(final User user, final String task, final Ma\n         Set<String> preTasks = getPerformedTasks(user);\n \n         final Map<String, Object> variables = new HashMap<>();\n-        variables.put(WF_EXECUTOR, AuthContextUtils.getAuthenticatedUsername());\n+        variables.put(WF_EXECUTOR, AuthContextUtils.getUsername());\n         variables.put(TASK, task);\n \n         // using BeanUtils to access all user's properties and trigger lazy loading - we are about to\n@@ -674,7 +674,7 @@ protected WorkflowFormTO getFormTO(\n     public List<WorkflowFormTO> getForms() {\n         List<WorkflowFormTO> forms = new ArrayList<>();\n \n-        final String authUser = AuthContextUtils.getAuthenticatedUsername();\n+        final String authUser = AuthContextUtils.getUsername();\n         if (adminUser.equals(authUser)) {\n             forms.addAll(getForms(taskService.createTaskQuery().\n                     taskVariableValueEquals(TASK_IS_FORM, Boolean.TRUE)));\n@@ -788,7 +788,7 @@ protected Pair<Task, TaskFormData> checkTask(final String taskId, final String a\n     @Transactional\n     @Override\n     public WorkflowFormTO claimForm(final String taskId) {\n-        final String authUser = AuthContextUtils.getAuthenticatedUsername();\n+        final String authUser = AuthContextUtils.getUsername();\n         Pair<Task, TaskFormData> checked = checkTask(taskId, authUser);\n \n         if (!adminUser.equals(authUser)) {\n@@ -813,7 +813,7 @@ public WorkflowFormTO claimForm(final String taskId) {\n     @Transactional\n     @Override\n     public WorkflowResult<UserMod> submitForm(final WorkflowFormTO form) {\n-        final String authUser = AuthContextUtils.getAuthenticatedUsername();\n+        final String authUser = AuthContextUtils.getUsername();\n         Pair<Task, TaskFormData> checked = checkTask(form.getTaskId(), authUser);\n \n         if (!checked.getKey().getOwner().equals(authUser)) {"},{"sha":"166a3948117e54a792c3cce12585c2a9ff096c0b","filename":"fit/core-reference/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -261,7 +261,7 @@ under the License.\n             </deployable>\n             <deployable>\n               <location>${project.build.directory}/${project.build.finalName}</location>\n-              <pingURL>http://localhost:${cargo.servlet.port}/syncope/cacheStats.jsp</pingURL>\n+              <pingURL>http://localhost:${cargo.servlet.port}/syncope/db.jsp</pingURL>\n               <pingTimeout>60000</pingTimeout>\n               <properties>\n                 <context>syncope</context>"},{"sha":"7d722b3e04838c530928a450a99d084a344c1804","filename":"pom.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252b1510dcced12abca84c14c77288cf48d9d32e/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252b1510dcced12abca84c14c77288cf48d9d32e/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=252b1510dcced12abca84c14c77288cf48d9d32e","patch":"@@ -335,7 +335,7 @@ under the License.\n     <spring.version>4.1.7.RELEASE</spring.version>\n     <spring-security.version>4.0.2.RELEASE</spring-security.version>\n \n-    <openjpa.version>2.4.0</openjpa.version>\n+    <openjpa.version>2.4.1-SNAPSHOT</openjpa.version>\n     <commons-dbcp.version>2.1</commons-dbcp.version>\n     <hibernate-validator.version>5.2.1.Final</hibernate-validator.version>\n \n@@ -533,7 +533,12 @@ under the License.\n         <artifactId>openjpa-persistence-jdbc</artifactId>\n         <version>${openjpa.version}</version>\n       </dependency>\n-\n+      <dependency>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-slice</artifactId>\n+        <version>${openjpa.version}</version>\n+      </dependency>\n+    \n       <dependency>\n         <groupId>org.apache.commons</groupId>\n         <artifactId>commons-dbcp2</artifactId>"}]}