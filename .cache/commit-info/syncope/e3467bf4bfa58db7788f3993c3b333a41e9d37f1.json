{"sha":"e3467bf4bfa58db7788f3993c3b333a41e9d37f1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmUzNDY3YmY0YmZhNThkYjc3ODhmMzk5M2MzYjMzM2E0MWU5ZDM3ZjE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-03T07:08:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-03T07:10:42Z"},"message":"White noise: format","tree":{"sha":"a1d24b37f16f7da1d39763e5f440853298fb0af1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a1d24b37f16f7da1d39763e5f440853298fb0af1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e3467bf4bfa58db7788f3993c3b333a41e9d37f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3467bf4bfa58db7788f3993c3b333a41e9d37f1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e3467bf4bfa58db7788f3993c3b333a41e9d37f1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"acf98a478a15b6ec32d8e0c084236d5523f3118c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/acf98a478a15b6ec32d8e0c084236d5523f3118c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/acf98a478a15b6ec32d8e0c084236d5523f3118c"}],"stats":{"total":180,"additions":76,"deletions":104},"files":[{"sha":"1ffdfb27ecd715d38744d8915159881e68f76f92","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2CallbackHandler.java","status":"modified","additions":24,"deletions":25,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2CallbackHandler.java?ref=e3467bf4bfa58db7788f3993c3b333a41e9d37f1","patch":"@@ -1,31 +1,28 @@\n-/**\n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n+ * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n+ * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n+ * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.fit.core;\n \n import java.io.IOException;\n import java.util.Collections;\n-\n import javax.security.auth.callback.Callback;\n import javax.security.auth.callback.CallbackHandler;\n import javax.security.auth.callback.UnsupportedCallbackException;\n-\n import org.apache.wss4j.common.saml.SAMLCallback;\n import org.apache.wss4j.common.saml.bean.AuthenticationStatementBean;\n import org.apache.wss4j.common.saml.bean.ConditionsBean;\n@@ -38,35 +35,37 @@\n  * A Callback Handler implementation for a SAML 2 assertion.\n  */\n public class SAML2CallbackHandler implements CallbackHandler {\n+\n     private String subjectName = \"uid=joe,ou=people,ou=saml-demo,o=example.com\";\n+\n     private String subjectQualifier = \"www.example.com\";\n+\n     private String issuer;\n+\n     private ConditionsBean conditions;\n+\n     private SubjectConfirmationDataBean subjectConfirmationData;\n+\n     private String subjectConfirmationMethod = SAML2Constants.CONF_BEARER;\n \n-    public void handle(Callback[] callbacks)\n-        throws IOException, UnsupportedCallbackException {\n-        for (int i = 0; i < callbacks.length; i++) {\n-            if (callbacks[i] instanceof SAMLCallback) {\n-                SAMLCallback callback = (SAMLCallback) callbacks[i];\n-                callback.setSamlVersion(Version.SAML_20);\n-                callback.setIssuer(issuer);\n+    @Override\n+    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n+        for (Callback callback : callbacks) {\n+            if (callback instanceof SAMLCallback) {\n+                SAMLCallback samlCallback = (SAMLCallback) callback;\n+                samlCallback.setSamlVersion(Version.SAML_20);\n+                samlCallback.setIssuer(issuer);\n                 if (conditions != null) {\n-                    callback.setConditions(conditions);\n+                    samlCallback.setConditions(conditions);\n                 }\n-\n-                SubjectBean subjectBean =\n-                    new SubjectBean(\n-                        subjectName, subjectQualifier, subjectConfirmationMethod\n-                    );\n+                SubjectBean subjectBean = new SubjectBean(subjectName, subjectQualifier, subjectConfirmationMethod);\n                 subjectBean.setSubjectConfirmationData(subjectConfirmationData);\n-                callback.setSubject(subjectBean);\n+                samlCallback.setSubject(subjectBean);\n                 AuthenticationStatementBean authBean = new AuthenticationStatementBean();\n                 authBean.setAuthenticationMethod(\"Password\");\n-                callback.setAuthenticationStatementData(Collections.singletonList(authBean));\n+                samlCallback.setAuthenticationStatementData(Collections.singletonList(authBean));\n             } else {\n-                throw new UnsupportedCallbackException(callbacks[i], \"Unrecognized Callback\");\n+                throw new UnsupportedCallbackException(callback, \"Unrecognized Callback\");\n             }\n         }\n     }"},{"sha":"68626d04896c832e0b336040c48719e79120a217","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":24,"deletions":30,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=e3467bf4bfa58db7788f3993c3b333a41e9d37f1","patch":"@@ -31,10 +31,8 @@\n import java.security.KeyStore;\n import java.util.Collections;\n import java.util.Optional;\n-\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n import org.apache.commons.codec.binary.Base64;\n import org.apache.cxf.helpers.DOMUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n@@ -82,13 +80,13 @@ public class SAML2ITCase extends AbstractITCase {\n     private static SyncopeClient anonymous;\n \n     @BeforeClass\n-    public static void setupAnonymousClient() {\n+    public static void setup() {\n         anonymous = new SyncopeClientFactoryBean().\n                 setAddress(ADDRESS).\n                 create(new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY));\n \n         WSSConfig.init();\n-        OpenSAMLUtil.initSamlEngine();\n+        OpenSAMLUtil.initSamlEngine(false);\n     }\n \n     @BeforeClass\n@@ -198,7 +196,7 @@ public void validateLoginResponse() throws Exception {\n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n         SAML2RequestTO loginRequest =\n-            saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+                saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n         assertNotNull(loginRequest);\n \n         assertEquals(\"https://localhost:8443/fediz-idp/saml/up\", loginRequest.getIdpServiceAddress());\n@@ -229,7 +227,7 @@ public void validateLoginResponse() throws Exception {\n         JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n         String inResponseTo = relayState.getJwtClaims().getSubject();\n \n-        org.opensaml.saml.saml2.core.Response samlResponse = createResponse(doc, inResponseTo);\n+        org.opensaml.saml.saml2.core.Response samlResponse = createResponse(inResponseTo);\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n         String responseStr = DOM2Writer.nodeToString(responseElement);\n \n@@ -248,7 +246,7 @@ public void testUnsignedAssertionInLoginResponse() throws Exception {\n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n         SAML2RequestTO loginRequest =\n-            saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+                saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n         assertNotNull(loginRequest);\n \n         SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n@@ -260,7 +258,7 @@ public void testUnsignedAssertionInLoginResponse() throws Exception {\n         String inResponseTo = relayState.getJwtClaims().getSubject();\n \n         org.opensaml.saml.saml2.core.Response samlResponse =\n-            createResponse(doc, inResponseTo, false, SAML2Constants.CONF_SENDER_VOUCHES);\n+                createResponse(inResponseTo, false, SAML2Constants.CONF_SENDER_VOUCHES);\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n         String responseStr = DOM2Writer.nodeToString(responseElement);\n \n@@ -282,7 +280,7 @@ public void testLoginResponseWrappingAttack() throws Exception {\n         // Get a valid login request for the Fediz realm\n         SAML2SPService saml2Service = anonymous.getService(SAML2SPService.class);\n         SAML2RequestTO loginRequest =\n-            saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n+                saml2Service.createLoginRequest(ADDRESS, \"urn:org:apache:cxf:fediz:idp:realm-A\");\n         assertNotNull(loginRequest);\n \n         SAML2ReceivedResponseTO response = new SAML2ReceivedResponseTO();\n@@ -293,32 +291,32 @@ public void testLoginResponseWrappingAttack() throws Exception {\n         JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(response.getRelayState());\n         String inResponseTo = relayState.getJwtClaims().getSubject();\n \n-        org.opensaml.saml.saml2.core.Response samlResponse = createResponse(doc, inResponseTo);\n+        org.opensaml.saml.saml2.core.Response samlResponse = createResponse(inResponseTo);\n         Element responseElement = OpenSAMLUtil.toDom(samlResponse, doc);\n \n         doc.appendChild(responseElement);\n         assertNotNull(responseElement);\n \n         // Get Assertion Element\n         Element assertionElement =\n-            (Element)responseElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"Assertion\").item(0);\n+                (Element) responseElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"Assertion\").item(0);\n         assertNotNull(assertionElement);\n \n         // Clone it, strip the Signature, modify the Subject, change Subj Conf\n-        Element clonedAssertion = (Element)assertionElement.cloneNode(true);\n+        Element clonedAssertion = (Element) assertionElement.cloneNode(true);\n         clonedAssertion.setAttributeNS(null, \"ID\", \"_12345623562\");\n         Element sigElement =\n-            (Element)clonedAssertion.getElementsByTagNameNS(WSConstants.SIG_NS, \"Signature\").item(0);\n+                (Element) clonedAssertion.getElementsByTagNameNS(WSConstants.SIG_NS, \"Signature\").item(0);\n         clonedAssertion.removeChild(sigElement);\n \n         Element subjElement =\n-            (Element)clonedAssertion.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"Subject\").item(0);\n+                (Element) clonedAssertion.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"Subject\").item(0);\n         Element subjNameIdElement =\n-            (Element)subjElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"NameID\").item(0);\n+                (Element) subjElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"NameID\").item(0);\n         subjNameIdElement.setTextContent(\"verdi\");\n \n         Element subjConfElement =\n-            (Element)subjElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"SubjectConfirmation\").item(0);\n+                (Element) subjElement.getElementsByTagNameNS(SAMLConstants.SAML20_NS, \"SubjectConfirmation\").item(0);\n         subjConfElement.setAttributeNS(null, \"Method\", SAML2Constants.CONF_SENDER_VOUCHES);\n \n         // Now insert the modified cloned Assertion into the Response after the other assertion\n@@ -333,20 +331,18 @@ public void testLoginResponseWrappingAttack() throws Exception {\n         assertEquals(\"puccini\", loginResponse.getNameID());\n     }\n \n-    private org.opensaml.saml.saml2.core.Response createResponse(Document doc, String inResponseTo) throws Exception {\n-        return createResponse(doc, inResponseTo, true, SAML2Constants.CONF_BEARER);\n+    private org.opensaml.saml.saml2.core.Response createResponse(final String inResponseTo) throws Exception {\n+        return createResponse(inResponseTo, true, SAML2Constants.CONF_BEARER);\n     }\n \n-    private org.opensaml.saml.saml2.core.Response createResponse(Document doc, String inResponseTo,\n-                                                                 boolean signAssertion, String subjectConfMethod) throws Exception {\n-        Status status =\n-            SAML2PResponseComponentBuilder.createStatus(\n-                SAMLProtocolResponseValidator.SAML2_STATUSCODE_SUCCESS, null\n-            );\n+    private org.opensaml.saml.saml2.core.Response createResponse(\n+            final String inResponseTo, final boolean signAssertion, final String subjectConfMethod) throws Exception {\n+\n+        Status status = SAML2PResponseComponentBuilder.createStatus(\n+                SAMLProtocolResponseValidator.SAML2_STATUSCODE_SUCCESS, null);\n         org.opensaml.saml.saml2.core.Response response =\n-            SAML2PResponseComponentBuilder.createSAMLResponse(\n-                inResponseTo, \"urn:org:apache:cxf:fediz:idp:realm-A\", status\n-            );\n+                SAML2PResponseComponentBuilder.createSAMLResponse(\n+                        inResponseTo, \"urn:org:apache:cxf:fediz:idp:realm-A\", status);\n         response.setDestination(\"http://recipient.apache.org\");\n \n         // Create an AuthenticationAssertion\n@@ -381,7 +377,7 @@ private org.opensaml.saml.saml2.core.Response createResponse(Document doc, Strin\n             ClassLoader loader = Loader.getClassLoader(SAML2ITCase.class);\n             InputStream input = Merlin.loadInputStream(loader, \"stsrealm_a.jks\");\n             keyStore.load(input, \"storepass\".toCharArray());\n-            ((Merlin)issuerCrypto).setKeyStore(keyStore);\n+            ((Merlin) issuerCrypto).setKeyStore(keyStore);\n \n             assertion.signAssertion(\"realma\", \"realma\", issuerCrypto, false);\n         }\n@@ -390,6 +386,4 @@ private org.opensaml.saml.saml2.core.Response createResponse(Document doc, Strin\n \n         return response;\n     }\n-\n-\n }"},{"sha":"f83d372ecc35333941320a72877b206c89c633d6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2PResponseComponentBuilder.java","status":"modified","additions":28,"deletions":49,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e3467bf4bfa58db7788f3993c3b333a41e9d37f1/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2PResponseComponentBuilder.java?ref=e3467bf4bfa58db7788f3993c3b333a41e9d37f1","patch":"@@ -1,29 +1,25 @@\n-/**\n+/*\n  * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements. See the NOTICE file\n+ * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n- * regarding copyright ownership. The ASF licenses this file\n+ * regarding copyright ownership.  The ASF licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at\n+ * with the License.  You may obtain a copy of the License at\n  *\n- * http://www.apache.org/licenses/LICENSE-2.0\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the\n+ * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-\n package org.apache.syncope.fit.core;\n \n import java.util.UUID;\n-\n import org.joda.time.DateTime;\n-import org.opensaml.core.xml.XMLObjectBuilderFactory;\n-import org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport;\n import org.opensaml.saml.common.SAMLObjectBuilder;\n import org.opensaml.saml.common.SAMLVersion;\n import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n@@ -32,10 +28,16 @@\n import org.opensaml.saml.saml2.core.Status;\n import org.opensaml.saml.saml2.core.StatusCode;\n import org.opensaml.saml.saml2.core.StatusMessage;\n+import org.opensaml.saml.saml2.core.impl.AuthnContextClassRefBuilder;\n+import org.opensaml.saml.saml2.core.impl.IssuerBuilder;\n+import org.opensaml.saml.saml2.core.impl.ResponseBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusCodeBuilder;\n+import org.opensaml.saml.saml2.core.impl.StatusMessageBuilder;\n \n /**\n-* A (basic) set of utility methods to construct SAML 2.0 Protocol Response statements\n-*/\n+ * A (basic) set of utility methods to construct SAML 2.0 Protocol Response statements.\n+ */\n public final class SAML2PResponseComponentBuilder {\n \n     private static SAMLObjectBuilder<Response> responseBuilder;\n@@ -50,22 +52,9 @@ public final class SAML2PResponseComponentBuilder {\n \n     private static SAMLObjectBuilder<AuthnContextClassRef> authnContextClassRefBuilder;\n \n-    private static XMLObjectBuilderFactory builderFactory =\n-        XMLObjectProviderRegistrySupport.getBuilderFactory();\n-\n-    private SAML2PResponseComponentBuilder() {\n-\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static Response createSAMLResponse(\n-        String inResponseTo,\n-        String issuer,\n-        Status status\n-    ) {\n+    public static Response createSAMLResponse(final String inResponseTo, final String issuer, final Status status) {\n         if (responseBuilder == null) {\n-            responseBuilder = (SAMLObjectBuilder<Response>)\n-                builderFactory.getBuilder(Response.DEFAULT_ELEMENT_NAME);\n+            responseBuilder = new ResponseBuilder();\n         }\n         Response response = responseBuilder.buildObject();\n \n@@ -79,36 +68,25 @@ public static Response createSAMLResponse(\n         return response;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public static Issuer createIssuer(\n-        String issuerValue\n-    ) {\n+    public static Issuer createIssuer(final String issuerValue) {\n         if (issuerBuilder == null) {\n-            issuerBuilder = (SAMLObjectBuilder<Issuer>)\n-                builderFactory.getBuilder(Issuer.DEFAULT_ELEMENT_NAME);\n+            issuerBuilder = new IssuerBuilder();\n         }\n         Issuer issuer = issuerBuilder.buildObject();\n         issuer.setValue(issuerValue);\n \n         return issuer;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public static Status createStatus(\n-        String statusCodeValue,\n-        String statusMessage\n-    ) {\n+    public static Status createStatus(final String statusCodeValue, final String statusMessage) {\n         if (statusBuilder == null) {\n-            statusBuilder = (SAMLObjectBuilder<Status>)\n-                builderFactory.getBuilder(Status.DEFAULT_ELEMENT_NAME);\n+            statusBuilder = new StatusBuilder();\n         }\n         if (statusCodeBuilder == null) {\n-            statusCodeBuilder = (SAMLObjectBuilder<StatusCode>)\n-                builderFactory.getBuilder(StatusCode.DEFAULT_ELEMENT_NAME);\n+            statusCodeBuilder = new StatusCodeBuilder();\n         }\n         if (statusMessageBuilder == null) {\n-            statusMessageBuilder = (SAMLObjectBuilder<StatusMessage>)\n-                builderFactory.getBuilder(StatusMessage.DEFAULT_ELEMENT_NAME);\n+            statusMessageBuilder = new StatusMessageBuilder();\n         }\n \n         Status status = statusBuilder.buildObject();\n@@ -126,11 +104,9 @@ public static Status createStatus(\n         return status;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public static AuthnContextClassRef createAuthnContextClassRef(String newAuthnContextClassRef) {\n+    public static AuthnContextClassRef createAuthnContextClassRef(final String newAuthnContextClassRef) {\n         if (authnContextClassRefBuilder == null) {\n-            authnContextClassRefBuilder = (SAMLObjectBuilder<AuthnContextClassRef>)\n-                builderFactory.getBuilder(AuthnContextClassRef.DEFAULT_ELEMENT_NAME);\n+            authnContextClassRefBuilder = new AuthnContextClassRefBuilder();\n         }\n \n         AuthnContextClassRef authnContextClassRef = authnContextClassRefBuilder.buildObject();\n@@ -139,4 +115,7 @@ public static AuthnContextClassRef createAuthnContextClassRef(String newAuthnCon\n         return authnContextClassRef;\n     }\n \n-}\n\\ No newline at end of file\n+    private SAML2PResponseComponentBuilder() {\n+        // private constructor for static utility class\n+    }\n+}"}]}