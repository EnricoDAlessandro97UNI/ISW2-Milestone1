{"sha":"10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEwZDhiMTU0OWZmYzQ0YzhlZTNkNzZhYzM2ZGQ2ZDY3NDkxNmUxZjg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-21T16:42:05Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-21T16:43:55Z"},"message":"[SYNCOPE-957] Ensuring the correct password value is propagated","tree":{"sha":"8db49cc8ab97912113c240110c6dd9c8df974179","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8db49cc8ab97912113c240110c6dd9c8df974179"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8556c3ead6da9780809f7c51d59794f924f37b98","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8556c3ead6da9780809f7c51d59794f924f37b98","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8556c3ead6da9780809f7c51d59794f924f37b98"}],"stats":{"total":308,"additions":270,"deletions":38},"files":[{"sha":"026f209b3da8952d48365edd6442ecdc732cc489","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -181,7 +181,8 @@ private ConnObjectTO getOnSyncope(\n             final MappingItem connObjectKeyItem,\n             final Provision provision) {\n \n-        Pair<String, Set<Attribute>> prepared = mappingManager.prepareAttrs(any, null, false, true, provision);\n+        Pair<String, Set<Attribute>> prepared = mappingManager.prepareAttrsFromAny(\n+                any, null, false, true, provision);\n         return getOnSyncope(connObjectKeyItem, prepared.getLeft(), prepared.getRight());\n     }\n \n@@ -190,7 +191,8 @@ private ConnObjectTO getOnSyncope(\n             final MappingItem connObjectKeyItem,\n             final Provision provision) {\n \n-        Set<Attribute> attrs = mappingManager.prepareAttrs(account.getOwner(), account, null, false, provision);\n+        Set<Attribute> attrs = mappingManager.prepareAttrsFromLinkedAccount(\n+                account.getOwner(), account, null, false, provision);\n         return getOnSyncope(connObjectKeyItem, account.getConnObjectKeyValue(), attrs);\n     }\n "},{"sha":"df6c43ffa35949c30752204f7010838db8b3437f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -106,20 +106,20 @@ Pair<String, Attribute> prepareAttr(\n      * @param provision provision information\n      * @return connObjectLink + prepared attributes\n      */\n-    Pair<String, Set<Attribute>> prepareAttrs(\n+    Pair<String, Set<Attribute>> prepareAttrsFromAny(\n             Any<?> any, String password, boolean changePwd, Boolean enable, Provision provision);\n \n     /**\n      * Prepare attributes for sending to a connector instance.\n      *\n      * @param user given user\n      * @param account linked account\n-     * @param password clear-text password\n+     * @param password user's clear-text password, to use as default value in case\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param provision provision information\n      * @return prepared attributes\n      */\n-    Set<Attribute> prepareAttrs(\n+    Set<Attribute> prepareAttrsFromLinkedAccount(\n             User user, LinkedAccount account, String password, boolean changePwd, Provision provision);\n \n     /**\n@@ -129,7 +129,7 @@ Set<Attribute> prepareAttrs(\n      * @param orgUnit provision information\n      * @return connObjectLink + prepared attributes\n      */\n-    Pair<String, Set<Attribute>> prepareAttrs(Realm realm, OrgUnit orgUnit);\n+    Pair<String, Set<Attribute>> prepareAttrsFromRealm(Realm realm, OrgUnit orgUnit);\n \n     /**\n      * Set attribute values, according to the given {@link Item}, to any object from attribute received from"},{"sha":"7e70f84bcf45bcf8347da1c2387d153d861fdc9b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":43,"deletions":21,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -270,7 +270,7 @@ private Name evaluateNAME(final Realm realm, final OrgUnit orgUnit, final String\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Pair<String, Set<Attribute>> prepareAttrs(\n+    public Pair<String, Set<Attribute>> prepareAttrsFromAny(\n             final Any<?> any,\n             final String password,\n             final boolean changePwd,\n@@ -335,7 +335,7 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Set<Attribute> prepareAttrs(\n+    public Set<Attribute> prepareAttrsFromLinkedAccount(\n             final User user,\n             final LinkedAccount account,\n             final String password,\n@@ -396,6 +396,12 @@ public Set<Attribute> prepareAttrs(\n         if (account.isSuspended() != null) {\n             attributes.add(AttributeBuilder.buildEnabled(!BooleanUtils.negate(account.isSuspended())));\n         }\n+        if (!changePwd) {\n+            Attribute pwdAttr = AttributeUtil.find(OperationalAttributes.PASSWORD_NAME, attributes);\n+            if (pwdAttr != null) {\n+                attributes.remove(pwdAttr);\n+            }\n+        }\n \n         return attributes;\n     }\n@@ -422,7 +428,7 @@ private String getIntValue(final Realm realm, final Item orgUnitItem) {\n     }\n \n     @Override\n-    public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUnit orgUnit) {\n+    public Pair<String, Set<Attribute>> prepareAttrsFromRealm(final Realm realm, final OrgUnit orgUnit) {\n         LOG.debug(\"Preparing resource attributes for {} with orgUnit {}\", realm, orgUnit);\n \n         Set<Attribute> attributes = new HashSet<>();\n@@ -470,21 +476,38 @@ public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUni\n         return Pair.of(connObjectKeyValue[0], attributes);\n     }\n \n+    protected String decodePassword(final Account account) {\n+        try {\n+            return ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n+        } catch (Exception e) {\n+            LOG.error(\"Could not decode password for {}\", account, e);\n+            return null;\n+        }\n+    }\n+\n     protected String getPasswordAttrValue(final Provision provision, final Account account, final String defaultValue) {\n-        String passwordAttrValue = defaultValue;\n-        if (StringUtils.isBlank(passwordAttrValue)) {\n-            if (account.canDecodePassword()) {\n-                try {\n-                    passwordAttrValue = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n-                } catch (Exception e) {\n-                    LOG.error(\"Could not decode password for {}\", account, e);\n-                }\n-            } else if (provision.getResource().isRandomPwdIfNotProvided()) {\n-                try {\n-                    passwordAttrValue = passwordGenerator.generate(provision.getResource());\n-                } catch (InvalidPasswordRuleConf e) {\n-                    LOG.error(\"Could not generate policy-compliant random password for {}\", account, e);\n-                }\n+        String passwordAttrValue;\n+        if (account instanceof LinkedAccount) {\n+            if (((LinkedAccount) account).getPassword() != null) {\n+                passwordAttrValue = decodePassword(account);\n+            } else {\n+                passwordAttrValue = defaultValue;\n+            }\n+        } else {\n+            if (StringUtils.isNotBlank(defaultValue)) {\n+                passwordAttrValue = defaultValue;\n+            } else if (account.canDecodePassword()) {\n+                passwordAttrValue = decodePassword(account);\n+            } else {\n+                passwordAttrValue = null;\n+            }\n+        }\n+\n+        if (passwordAttrValue == null && provision.getResource().isRandomPwdIfNotProvided()) {\n+            try {\n+                passwordAttrValue = passwordGenerator.generate(provision.getResource());\n+            } catch (InvalidPasswordRuleConf e) {\n+                LOG.error(\"Could not generate policy-compliant random password for {}\", account, e);\n             }\n         }\n \n@@ -853,8 +876,8 @@ private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n     public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision provision) {\n         Optional<? extends MappingItem> connObjectKeyItem = provision.getMapping().getConnObjectKeyItem();\n         if (connObjectKeyItem.isEmpty()) {\n-             LOG.error(\"Unable to locate conn object key item for \" + provision.getMapping().getKey());\n-             return Optional.empty();\n+            LOG.error(\"Unable to locate conn object key item for \" + provision.getMapping().getKey());\n+            return Optional.empty();\n         }\n         MappingItem mapItem = connObjectKeyItem.get();\n         Pair<AttrSchemaType, List<PlainAttrValue>> intValues;\n@@ -883,8 +906,7 @@ public Optional<String> getConnObjectKeyValue(final Realm realm, final OrgUnit o\n             LOG.error(\"Unable to locate conn object key item for \" + orgUnit.getKey());\n             return Optional.empty();\n         }\n-        OrgUnitItem orgUnitItem = connObjectKeyItem.get();\n-        return Optional.ofNullable(getIntValue(realm, orgUnitItem));\n+        return Optional.ofNullable(getIntValue(realm, connObjectKeyItem.get()));\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"27e1a0a4896a88fe5a0b18d5554d22e4b207457b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -303,7 +303,7 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n                     } else {\n                         // 3. found but misaligned?\n                         Pair<String, Set<Attribute>> preparedAttrs =\n-                                mappingManager.prepareAttrs(any, null, false, null, provision);\n+                                mappingManager.prepareAttrsFromAny(any, null, false, null, provision);\n                         preparedAttrs.getRight().add(AttributeBuilder.build(\n                                 Uid.NAME, preparedAttrs.getLeft()));\n                         preparedAttrs.getRight().add(AttributeBuilder.build("},{"sha":"8d603c6778d6b32aeeee67024813d1713f85c68a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -516,7 +516,7 @@ protected List<PropagationTaskInfo> createTasks(\n                         any.getType(), resource);\n             } else {\n                 Pair<String, Set<Attribute>> preparedAttrs =\n-                        mappingManager.prepareAttrs(any, password, changePwd, enable, provision);\n+                        mappingManager.prepareAttrsFromAny(any, password, changePwd, enable, provision);\n                 if (vAttrMap.containsKey(resourceKey)) {\n                     preparedAttrs.getRight().addAll(vAttrMap.get(resourceKey));\n                 }\n@@ -574,7 +574,8 @@ protected List<PropagationTaskInfo> createTasks(\n                             deleteOnResource,\n                             mappingItems,\n                             Pair.of(account.getConnObjectKeyValue(),\n-                                    mappingManager.prepareAttrs(user, account, password, changePwd, provision)));\n+                                    mappingManager.prepareAttrsFromLinkedAccount(\n+                                            user, account, password, true, provision)));\n                     tasks.add(accountTask);\n \n                     LOG.debug(\"PropagationTask created for Linked Account {}: {}\",\n@@ -622,7 +623,7 @@ public List<PropagationTaskInfo> createTasks(\n                 task.setOperation(operation);\n                 task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n-                Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(realm, orgUnit);\n+                Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromRealm(realm, orgUnit);\n                 task.setConnObjectKey(preparedAttrs.getLeft());\n                 task.setAttributes(POJOHelper.serialize(preparedAttrs.getRight()));\n "},{"sha":"918c2a5775c89ae11e81917737376d45648e01f5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamAnyObjectPushResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamAnyObjectPushResultHandler.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -52,7 +52,8 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n \n         Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n \n-        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(any, null, false, enabled, provision);\n+        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromAny(\n+                any, null, false, enabled, provision);\n \n         PropagationTaskInfo propagationTask = propagationManager.newTask(\n                 derAttrHandler,"},{"sha":"ad169fddd196c47e5108b58d16197bffcb656aa4","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamGroupPushResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamGroupPushResultHandler.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -52,7 +52,8 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n \n         Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n \n-        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(any, null, false, enabled, provision);\n+        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromAny(\n+                any, null, false, enabled, provision);\n \n         PropagationTaskInfo propagationTask = propagationManager.newTask(\n                 derAttrHandler,"},{"sha":"e2b3446f225ef7ab594be84187b810b801e72cc8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamUserPushResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamUserPushResultHandler.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -52,7 +52,8 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n \n         Stream<? extends Item> items = MappingUtils.getPropagationItems(provision.getMapping().getItems().stream());\n \n-        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrs(any, null, false, enabled, provision);\n+        Pair<String, Set<Attribute>> preparedAttrs = mappingManager.prepareAttrsFromAny(\n+                any, null, false, enabled, provision);\n \n         PropagationTaskInfo propagationTask = propagationManager.newTask(\n                 derAttrHandler,"},{"sha":"40a1b5c1f35e9c1a1b610c3bcfb16af22e31e2f1","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/ConnectorManagerTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManagerTest.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -33,14 +33,14 @@\n @Transactional(\"Master\")\n public class ConnectorManagerTest extends AbstractTest {\n \n-    private ConnectorManager connManager;\n-\n     @Autowired\n     private ConnIdBundleManager connIdBundleManager;\n \n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    private ConnectorManager connManager;\n+\n     @BeforeEach\n     public void before() {\n         connManager = new ConnectorManager();\n@@ -60,7 +60,6 @@ public void load() {\n                 filter(resource -> resource.getConnector().getLocation().startsWith(\"file\")).count();\n \n         assertEquals(expected,\n-                ApplicationContextProvider.getBeanFactory().\n-                        getBeanNamesForType(Connector.class, false, true).length);\n+                ApplicationContextProvider.getBeanFactory().getBeanNamesForType(Connector.class, false, true).length);\n     }\n }"},{"sha":"efedfaf10209d909bccd7b1c14306cb3f594b396","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/MappingManagerImplTest.java","status":"added","additions":205,"deletions":0,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImplTest.java?ref=10d8b1549ffc44c8ee3d76ac36dd6d674916e1f8","patch":"@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.identityconnectors.common.security.SecurityUtil;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class MappingManagerImplTest extends AbstractTest {\n+\n+    @Autowired\n+    private MappingManager mappingManager;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Test\n+    public void prepareAttrsForUser() {\n+        User bellini = userDAO.findByUsername(\"bellini\");\n+        ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n+        Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n+\n+        assertNotEquals(CipherAlgorithm.AES, bellini.getCipherAlgorithm());\n+\n+        // 1. with clear-text password\n+        Pair<String, Set<Attribute>> attrs = mappingManager.prepareAttrsFromAny(\n+                bellini,\n+                \"Password123\",\n+                true,\n+                Boolean.TRUE,\n+                provision);\n+        assertEquals(\"bellini\", attrs.getLeft());\n+        assertEquals(\n+                \"uid=bellini,ou=people,o=isp\",\n+                AttributeUtil.getNameFromAttributes(attrs.getRight()).getNameValue());\n+        assertEquals(\"Password123\", SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs.getRight())));\n+\n+        // 2. with changePwd == false\n+        attrs = mappingManager.prepareAttrsFromAny(\n+                bellini,\n+                \"Password123\",\n+                false,\n+                Boolean.TRUE,\n+                provision);\n+        assertNull(AttributeUtil.getPasswordValue(attrs.getRight()));\n+\n+        // 3. with no clear-text password but random password generation enabled\n+        ldap.setRandomPwdIfNotProvided(true);\n+        ldap = resourceDAO.save(ldap);\n+        entityManager().flush();\n+\n+        String encPassword = bellini.getPassword();\n+        attrs = mappingManager.prepareAttrsFromAny(\n+                bellini,\n+                null,\n+                true,\n+                Boolean.TRUE,\n+                provision);\n+        assertNotEquals(encPassword, SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs.getRight())));\n+\n+        // 4. with no clear-text password and random password generation disabled\n+        ldap.setRandomPwdIfNotProvided(false);\n+        resourceDAO.save(ldap);\n+        entityManager().flush();\n+\n+        attrs = mappingManager.prepareAttrsFromAny(\n+                bellini,\n+                null,\n+                true,\n+                Boolean.TRUE,\n+                provision);\n+        assertNull(AttributeUtil.getPasswordValue(attrs.getRight()));\n+\n+        // 5. with no clear-text password, random password generation disabled but AES\n+        bellini.setPassword(\"newPassword123\", CipherAlgorithm.AES);\n+        userDAO.save(bellini);\n+        entityManager().flush();\n+\n+        assertEquals(CipherAlgorithm.AES, bellini.getCipherAlgorithm());\n+\n+        attrs = mappingManager.prepareAttrsFromAny(\n+                bellini,\n+                null,\n+                true,\n+                Boolean.TRUE,\n+                provision);\n+        assertEquals(\"newPassword123\", SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs.getRight())));\n+    }\n+\n+    @Test\n+    public void prepareAttrsForLinkedAccount() {\n+        User vivaldi = userDAO.findByUsername(\"vivaldi\");\n+        ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n+        Provision provision = ldap.getProvision(AnyTypeKind.USER.name()).get();\n+\n+        LinkedAccount account = entityFactory.newEntity(LinkedAccount.class);\n+        account.setConnObjectKeyValue(\"admin\");\n+        account.setResource(ldap);\n+        account.setOwner(vivaldi);\n+        account.setPassword(\"Password321\", CipherAlgorithm.AES);\n+        vivaldi.add(account);\n+\n+        vivaldi = userDAO.save(vivaldi);\n+        entityManager().flush();\n+\n+        // 1. with account password and clear-text default password\n+        Set<Attribute> attrs = mappingManager.prepareAttrsFromLinkedAccount(\n+                vivaldi,\n+                account,\n+                \"Password123\",\n+                true,\n+                provision);\n+        assertEquals(\"admin\", AttributeUtil.getStringValue(AttributeUtil.find(\"cn\", attrs)));\n+        assertEquals(\"Password321\", SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs)));\n+\n+        // 2. without account password and clear-text default password\n+        account.setEncodedPassword(null, null);\n+\n+        attrs = mappingManager.prepareAttrsFromLinkedAccount(\n+                vivaldi,\n+                account,\n+                \"Password123\",\n+                true,\n+                provision);\n+        assertEquals(\"Password123\", SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs)));\n+\n+        // 3. with changePwd == false\n+        attrs = mappingManager.prepareAttrsFromLinkedAccount(\n+                vivaldi,\n+                account,\n+                \"Password123\",\n+                false,\n+                provision);\n+        assertNull(AttributeUtil.getPasswordValue(attrs));\n+\n+        // 4. without account password, no clear-text password but random password generation enabled\n+        ldap.setRandomPwdIfNotProvided(true);\n+        ldap = resourceDAO.save(ldap);\n+        entityManager().flush();\n+\n+        String encPassword = vivaldi.getPassword();\n+        attrs = mappingManager.prepareAttrsFromLinkedAccount(\n+                vivaldi,\n+                account,\n+                null,\n+                true,\n+                provision);\n+        assertNotEquals(encPassword, SecurityUtil.decrypt(AttributeUtil.getPasswordValue(attrs)));\n+\n+        // 5. without account password, no clear-text password and random password generation disabled\n+        ldap.setRandomPwdIfNotProvided(false);\n+        resourceDAO.save(ldap);\n+        entityManager().flush();\n+\n+        attrs = mappingManager.prepareAttrsFromLinkedAccount(\n+                vivaldi,\n+                account,\n+                null,\n+                true,\n+                provision);\n+        assertNull(AttributeUtil.getPasswordValue(attrs));\n+    }\n+}"}]}