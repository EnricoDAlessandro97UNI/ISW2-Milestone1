{"sha":"8f95f612da211f8929b1be09c3516b361e4e82d5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhmOTVmNjEyZGEyMTFmODkyOWIxYmUwOWMzNTE2YjM2MWU0ZTgyZDU=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2020-04-14T10:34:31Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-04-14T10:34:31Z"},"message":"SYNCOPE-1552: Allow WA audit events to be stored in core (#174)\n\n* SYNCOPE-1552: Allow WA audit events to be stored in core\r\n\r\n* SYNCOPE-1552: quiet logs\r\n\r\n* SYNCOPE-1552: quiet logs\r\n\r\n* SYNCOPE-1552: quiet logs\r\n\r\n* SYNCOPE-1552: address review + fix test","tree":{"sha":"93c21efc404044aa4d8f180dc94d70672c9f9569","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/93c21efc404044aa4d8f180dc94d70672c9f9569"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8f95f612da211f8929b1be09c3516b361e4e82d5","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelZG3CRBK7hj4Ov3rIwAAdHIIAEs/9eKhesV/Nmslbqlk23dm\nuh3jPXH3eOpM9HUYfjBv21JXUp6YZPyHVwnqURxrElRGkJ0o30lQtmBUx13n/l3h\n3WUbOLOUmPgPwrvSVPiawAg1NVOW9nRvKT28UyfLQwhB5ChQPbb7OLPWDf3xhHeJ\nPVxfcKQoRPWIUHizg1q535Mmsob3dmsI8lboVDLyASikT3NoCJFhN3qP6XEEa3lc\nJ2fMzRQ9Mn+8K+fmRpQYj38HrYGPfX6Gt25Q7zstanGMzdVm3ZiEc6DaR6edWXha\nZgd5ZzVAcSWjmpzEbVttNF51lO/A5mEu2utwzl1iZ2ZeVjQwagLqcQZxW+tSkxo=\n=pBge\n-----END PGP SIGNATURE-----\n","payload":"tree 93c21efc404044aa4d8f180dc94d70672c9f9569\nparent 9237af47df51dba0b6930ed60e0f417d0e926958\nauthor Misagh Moayyed <mm1844@gmail.com> 1586860471 +0430\ncommitter GitHub <noreply@github.com> 1586860471 +0430\n\nSYNCOPE-1552: Allow WA audit events to be stored in core (#174)\n\n* SYNCOPE-1552: Allow WA audit events to be stored in core\r\n\r\n* SYNCOPE-1552: quiet logs\r\n\r\n* SYNCOPE-1552: quiet logs\r\n\r\n* SYNCOPE-1552: quiet logs\r\n\r\n* SYNCOPE-1552: address review + fix test"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8f95f612da211f8929b1be09c3516b361e4e82d5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8f95f612da211f8929b1be09c3516b361e4e82d5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8f95f612da211f8929b1be09c3516b361e4e82d5/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"9237af47df51dba0b6930ed60e0f417d0e926958","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9237af47df51dba0b6930ed60e0f417d0e926958","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9237af47df51dba0b6930ed60e0f417d0e926958"}],"stats":{"total":236,"additions":221,"deletions":15},"files":[{"sha":"9bf34eba498f10c3e5feab2991c283b26defd37f","filename":".travis.yml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -71,7 +71,7 @@ jobs:\n       ######################################################\n     - stage: fit\n       name: \"Full Integration Tests: Apache Tomcat / H2 / JSON Content-Type\"\n-      script: mvn -f fit/core-reference/pom.xml verify -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n+      script: travis_wait 55 mvn -f fit/core-reference/pom.xml verify --quiet -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n       after_failure:\n        - cat fit/core-reference/target/log/*\n        - cat fit/core-reference/target/failsafe-reports/org.apache.syncope.fit.*-output.txt"},{"sha":"aefccb9925da930e18ff9b44b2972fa06ed543f6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -57,7 +57,7 @@ public static List<LogStatement> getLastLogStatements(final String appender, fin\n \n         return result;\n     }\n-\n+    \n     public static List<LoggerTO> listLogs() {\n         List<LoggerTO> logs = getService(LoggerService.class).list(LoggerType.LOG);\n         logs.sort(Comparator.comparing(LoggerTO::getKey));"},{"sha":"e1116bd72b7391fc77f1fb40e33b219df1ceedae","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AuditElements.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditElements.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -33,6 +33,7 @@ public final class AuditElements implements Serializable {\n     public enum EventCategoryType {\n \n         LOGIC(\"LOGIC\"),\n+        WA(\"WA\"),\n         TASK(\"TASK\"),\n         PROPAGATION(\"PropagationTask\"),\n         PULL(\"PullTask\"),"},{"sha":"2fdec6bb5a5a75804e3ad057ced175db5d362c04","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoEntitlement.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -212,6 +212,8 @@ public final class IdRepoEntitlement {\n \n     public static final String AUDIT_READ = \"AUDIT_READ\";\n \n+    public static final String AUDIT_CREATE = \"AUDIT_CREATE\";\n+\n     public static final String AUDIT_ENABLE = \"AUDIT_ENABLE\";\n \n     public static final String AUDIT_DISABLE = \"AUDIT_DISABLE\";"},{"sha":"d54f69071dd631584dd4bc0ea926c5b7a61ab494","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -32,6 +32,7 @@\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n@@ -99,6 +100,16 @@ public interface LoggerService extends JAXRSService {\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<AuditEntry> search(@BeanParam AuditQuery auditQuery);\n \n+    /**\n+     * Create an audit entry.\n+     *\n+     * @param auditEntry audit entry to persist.\n+     */\n+    @POST\n+    @Path(\"AUDIT/entries\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void create(@NotNull AuditEntry auditEntry);\n+    \n     /**\n      * Returns logger with matching type and name.\n      *"},{"sha":"c450ce51ddfdc2ff577f4565f5acfd85787b8571","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -59,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n+import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -98,6 +99,9 @@ public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n     @Autowired\n     private LoggerDataBinder binder;\n \n+    @Autowired\n+    private AuditManager auditManager;\n+    \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n             + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n     @Transactional(readOnly = true)\n@@ -409,12 +413,33 @@ public Pair<Integer, List<AuditEntry>> search(\n             final AuditElements.Result result,\n             final List<OrderByClause> orderByClauses) {\n \n-        int count = loggerDAO.countAuditEntries(entityKey);\n+        int count = loggerDAO.countAuditEntries(entityKey, type, category, subcategory, events, result);\n         List<AuditEntry> matching = loggerDAO.findAuditEntries(\n                 entityKey, page, size, type, category, subcategory, events, result, orderByClauses);\n         return Pair.of(count, matching);\n     }\n \n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_CREATE + \"')\")\n+    public void create(final AuditEntry auditEntry) {\n+        boolean auditRequested = auditManager.auditRequested(auditEntry.getWho(),\n+            auditEntry.getLogger().getType(),\n+            auditEntry.getLogger().getCategory(),\n+            auditEntry.getLogger().getSubcategory(),\n+            auditEntry.getLogger().getEvent());\n+\n+        if (auditRequested) {\n+            auditManager.audit(auditEntry.getWho(),\n+                auditEntry.getLogger().getType(),\n+                auditEntry.getLogger().getCategory(),\n+                auditEntry.getLogger().getSubcategory(),\n+                auditEntry.getLogger().getEvent(),\n+                auditEntry.getLogger().getResult(),\n+                auditEntry.getBefore(),\n+                auditEntry.getOutput(),\n+                auditEntry.getInputs());\n+        }\n+    }\n+\n     @Override\n     protected EntityTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {"},{"sha":"9367c9db3ac0a8dc06112cfeb2262f0e7f49635a","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -52,6 +52,11 @@ public List<LogAppender> memoryAppenders() {\n     public List<LogStatement> getLastLogStatements(final String memoryAppender) {\n         return logic.getLastLogStatements(memoryAppender);\n     }\n+    \n+    @Override\n+    public void create(final AuditEntry auditEntry) {\n+        logic.create(auditEntry);\n+    }\n \n     @Override\n     public void delete(final LoggerType type, final String name) {"},{"sha":"e7e1b43dd20bc527f5250f476b70c89c299e947c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/LoggerDAO.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FLoggerDAO.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -52,5 +52,10 @@ List<AuditEntry> findAuditEntries(\n             AuditElements.Result result,\n             List<OrderByClause> orderByClauses);\n \n-    int countAuditEntries(String entityKey);\n+    int countAuditEntries(String entityKey,\n+                          AuditElements.EventCategoryType type,\n+                          String category,\n+                          String subcategory,\n+                          List<String> events,\n+                          AuditElements.Result result);\n }"},{"sha":"b987957e9dce4559f13869ef09a040d17f96d54f","filename":"core/persistence-jpa-json/src/main/resources/domains/MasterContent.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -20,8 +20,6 @@ under the License.\n <dataset>\n   <Realm id=\"ea696a4f-e77a-4ef1-be67-8f8093bc8686\" name=\"/\"/>  \n \n-<<<<<<< HEAD\n-=======\n   <SyncopeSchema id=\"password.cipher.algorithm\"/>\n   <PlainSchema id=\"password.cipher.algorithm\" type=\"String\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>"},{"sha":"cced9687d50b44a5c06c3c925e91c903351b64e1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPALoggerDAO.java","status":"modified","additions":18,"deletions":3,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPALoggerDAO.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -44,8 +44,12 @@ protected static class MessageCriteriaBuilder {\n         protected final StringBuilder query = new StringBuilder();\n \n         protected MessageCriteriaBuilder entityKey(final String entityKey) {\n-            query.append(' ').append(AUDIT_MESSAGE_COLUMN).\n+            if (entityKey != null) {\n+                query.append(' ').append(AUDIT_MESSAGE_COLUMN).\n                     append(\" LIKE '%key%\").append(entityKey).append(\"%'\");\n+            } else {\n+                query.append(\" 1=1\");\n+            }\n             return this;\n         }\n \n@@ -139,9 +143,20 @@ protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey)\n     }\n \n     @Override\n-    public int countAuditEntries(final String entityKey) {\n+    public int countAuditEntries(final String entityKey,\n+                                 final AuditElements.EventCategoryType type,\n+                                 final String category,\n+                                 final String subcategory,\n+                                 final List<String> events,\n+                                 final AuditElements.Result result) {\n         String queryString = \"SELECT COUNT(0) FROM \" + AUDIT_TABLE\n-                + \" WHERE \" + messageCriteriaBuilder(entityKey).build();\n+            + \" WHERE \" + messageCriteriaBuilder(entityKey).\n+            type(type).\n+            category(category).\n+            subcategory(subcategory).\n+            result(result).\n+            events(events).\n+            build();\n         Query countQuery = entityManager().createNativeQuery(queryString);\n \n         return ((Number) countQuery.getSingleResult()).intValue();"},{"sha":"dc7369d59eed3e1b1993bdb1930bca68134367a2","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -2472,6 +2472,8 @@ $$ }&#10;\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n+  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AUTHENTICATION]:[validate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n "},{"sha":"fea40c9cc9cd4212bdb39a8434f4cc2637af63ef","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -23,6 +23,7 @@\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n \n import java.io.File;\n import java.io.IOException;\n@@ -33,18 +34,23 @@\n import java.nio.file.Paths;\n import java.nio.file.StandardOpenOption;\n import java.text.ParseException;\n+import java.util.Date;\n import java.util.List;\n import java.util.Properties;\n+import java.util.UUID;\n+\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n import org.apache.syncope.common.lib.log.EventCategory;\n import org.apache.syncope.common.lib.log.LogAppender;\n import org.apache.syncope.common.lib.log.LogStatement;\n import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -57,6 +63,7 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.rest.api.LoggerWrapper;\n+import org.apache.syncope.common.rest.api.beans.AuditQuery;\n import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.apache.syncope.core.logic.ConnectorLogic;\n import org.apache.syncope.core.logic.ReportLogic;\n@@ -267,6 +274,31 @@ private static boolean logFileContains(final Path path, final String message, fi\n         return messagePresent;\n     }\n \n+    @Test\n+    public void saveAuditEvent() {\n+        AuditLoggerName logger = new AuditLoggerName(EventCategoryType.WA, \"LoggerLogic\",\n+            AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(), \"validate\",\n+            AuditElements.Result.SUCCESS);\n+        AuditEntry auditEntry = new AuditEntry();\n+        String who = \"syncope-user \" + UUID.randomUUID().toString();\n+        auditEntry.setWho(who);\n+        auditEntry.setLogger(logger);\n+        auditEntry.setDate(new Date());\n+        auditEntry.setBefore(UUID.randomUUID().toString());\n+        auditEntry.setOutput(UUID.randomUUID().toString());\n+        assertDoesNotThrow(() -> loggerService.create(auditEntry));\n+\n+        AuditQuery query = new AuditQuery();\n+        query.setSize(1);\n+        query.setType(auditEntry.getLogger().getType());\n+        query.setResult(auditEntry.getLogger().getResult());\n+        query.setCategory(auditEntry.getLogger().getCategory());\n+        query.setEvents(List.of(auditEntry.getLogger().getEvent()));\n+        PagedResult<AuditEntry> events = loggerService.search(query);\n+        assertNotNull(events);\n+        assertEquals(1, events.getSize());\n+    }\n+\n     @Test\n     public void customAuditAppender() throws IOException, InterruptedException {\n         AuditLoggerName auditLoggerResUpd = new AuditLoggerName("},{"sha":"dd80e72341e20172ecd4c0c60ee5574348613f84","filename":"pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -1583,6 +1583,11 @@ under the License.\n         <artifactId>cas-server-support-radius-mfa</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-core-audit-api</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apereo.cas</groupId>\n         <artifactId>cas-server-support-saml-idp</artifactId>"},{"sha":"5d0fe8aa192bb3413b2ce26ffa4696604790325c","filename":"wa/starter/pom.xml","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -43,13 +43,11 @@ under the License.\n       <artifactId>syncope-wa-bootstrap</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-\n     <dependency>\n       <groupId>org.apache.syncope.common.keymaster</groupId>\n       <artifactId>syncope-common-keymaster-client-api</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n-\n     <dependency>\n       <groupId>org.apache.syncope.client.am</groupId>\n       <artifactId>syncope-client-am-lib</artifactId>\n@@ -72,6 +70,10 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-configuration</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-core-audit-api</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-core-cookie</artifactId>"},{"sha":"7dbd561d9625b332a72ac7fae6e31dc7dbc523e5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAAuditTrailManager.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAAuditTrailManager.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter;\n+\n+import org.apereo.cas.audit.spi.AbstractAuditTrailManager;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.wa.WARestClient;\n+import org.apereo.inspektr.audit.AuditActionContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDate;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class SyncopeWAAuditTrailManager extends AbstractAuditTrailManager {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAAuditTrailManager.class);\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    private final WARestClient restClient;\n+\n+    SyncopeWAAuditTrailManager(final WARestClient restClient) {\n+        super(true);\n+        this.restClient = restClient;\n+    }\n+\n+    @Override\n+    protected void saveAuditRecord(final AuditActionContext audit) {\n+        if (!WARestClient.isReady()) {\n+            LOG.debug(\"Syncope client is not yet ready to store audit record\");\n+            return;\n+        }\n+\n+        LOG.info(\"Loading application definitions\");\n+        LoggerService loggerService = restClient.getSyncopeClient().\n+            getService(LoggerService.class);\n+\n+        try {             \n+            String output = OBJECT_MAPPER.writeValueAsString(Map.of(\"resource\", audit.getResourceOperatedUpon(),\n+                \"clientIpAddress\", audit.getClientIpAddress(),\n+                \"serverIpAddress\", audit.getServerIpAddress()));\n+\n+            AuditEntry auditEntry = new AuditEntry();\n+            auditEntry.setWho(audit.getPrincipal());\n+            auditEntry.setDate(audit.getWhenActionWasPerformed());\n+            auditEntry.setOutput(output);\n+            AuditElements.Result result = StringUtils.containsIgnoreCase(audit.getActionPerformed(), \"fail\")\n+                ? AuditElements.Result.FAILURE\n+                : AuditElements.Result.SUCCESS;\n+\n+            AuditLoggerName auditLogger = new AuditLoggerName(AuditElements.EventCategoryType.WA,\n+                \"LoggerLogic\", AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n+                audit.getActionPerformed(), result);\n+\n+            auditEntry.setLogger(auditLogger);\n+            loggerService.create(auditEntry);\n+        } catch (Exception e) {\n+            LOG.error(\"During serialization\", e);\n+        }\n+    }\n+\n+    @Override\n+    public Set<? extends AuditActionContext> getAuditRecordsSince(final LocalDate sinceDate) {\n+        throw new UnsupportedOperationException(\"Fetching audit events from WA is not supported\");\n+    }\n+\n+    @Override\n+    public void removeAll() {\n+        throw new UnsupportedOperationException(\"Removing audit events from WA is not supported\");\n+    }\n+}"},{"sha":"8b61f584b80cf35f5c2ba6e2f043ba8cd594f3b5","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/SyncopeWAConfiguration.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8f95f612da211f8929b1be09c3516b361e4e82d5/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8f95f612da211f8929b1be09c3516b361e4e82d5/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAConfiguration.java?ref=8f95f612da211f8929b1be09c3516b361e4e82d5","patch":"@@ -18,19 +18,22 @@\n  */\n package org.apache.syncope.wa.starter;\n \n-import java.util.Collection;\n+import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n+import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n+import org.apereo.cas.services.ServiceRegistryListener;\n+\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStart;\n import org.apache.syncope.common.keymaster.client.api.startstop.KeymasterStop;\n import org.apache.syncope.wa.WARestClient;\n-import org.apereo.cas.services.ServiceRegistryExecutionPlanConfigurer;\n-import org.apereo.cas.services.ServiceRegistryListener;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n+import java.util.Collection;\n+\n @Configuration\n public class SyncopeWAConfiguration {\n \n@@ -45,10 +48,16 @@ public class SyncopeWAConfiguration {\n     @Bean\n     public ServiceRegistryExecutionPlanConfigurer syncopeServiceRegistryConfigurer(final WARestClient restClient) {\n         SyncopeServiceRegistry registry =\n-                new SyncopeServiceRegistry(restClient, applicationContext, serviceRegistryListeners);\n+            new SyncopeServiceRegistry(restClient, applicationContext, serviceRegistryListeners);\n         return plan -> plan.registerServiceRegistry(registry);\n     }\n \n+    @Bean\n+    @Autowired\n+    public AuditTrailExecutionPlanConfigurer auditConfigurer(final WARestClient restClient) {\n+        return plan -> plan.registerAuditTrailManager(new SyncopeWAAuditTrailManager(restClient));\n+    }\n+\n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);"}]}