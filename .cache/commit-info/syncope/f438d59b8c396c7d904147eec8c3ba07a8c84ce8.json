{"sha":"f438d59b8c396c7d904147eec8c3ba07a8c84ce8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY0MzhkNTliOGMzOTZjN2Q5MDQxNDdlZWM4YzNiYTA3YThjODRjZTg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-20T12:28:23Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-20T12:28:23Z"},"message":"Merge from trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/0_8_X_ASL@1247364 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9ec18b9601e2a2fe88ff7cf3b4148157855a3a50","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/9ec18b9601e2a2fe88ff7cf3b4148157855a3a50"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f438d59b8c396c7d904147eec8c3ba07a8c84ce8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f438d59b8c396c7d904147eec8c3ba07a8c84ce8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f438d59b8c396c7d904147eec8c3ba07a8c84ce8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/comments","author":null,"committer":null,"parents":[{"sha":"df58538b67512d207d6e1955cffe6452db4cd420","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/df58538b67512d207d6e1955cffe6452db4cd420","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/df58538b67512d207d6e1955cffe6452db4cd420"}],"stats":{"total":602,"additions":462,"deletions":140},"files":[{"sha":"afb5bf4df3c5ad01405d27a1ce172cd71eb0d65b","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"modified","additions":1,"deletions":32,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -21,16 +21,13 @@\n import java.util.Map;\n import java.util.Set;\n import org.codehaus.jackson.annotate.JsonIgnore;\n-import org.syncope.client.AbstractBaseBean;\n \n-public abstract class AbstractAttributableTO extends AbstractBaseBean {\n+public abstract class AbstractAttributableTO extends ConnObjectTO {\n \n     private static final long serialVersionUID = 4083884098736820255L;\n \n     private long id;\n \n-    private List<AttributeTO> attributes;\n-\n     private List<AttributeTO> derivedAttributes;\n \n     private List<AttributeTO> virtualAttributes;\n@@ -40,7 +37,6 @@ public abstract class AbstractAttributableTO extends AbstractBaseBean {\n     protected AbstractAttributableTO() {\n         super();\n \n-        attributes = new ArrayList<AttributeTO>();\n         derivedAttributes = new ArrayList<AttributeTO>();\n         virtualAttributes = new ArrayList<AttributeTO>();\n         resources = new HashSet<String>();\n@@ -54,33 +50,6 @@ public void setId(final long id) {\n         this.id = id;\n     }\n \n-    public boolean addAttribute(final AttributeTO attribute) {\n-        return attributes.add(attribute);\n-    }\n-\n-    public boolean removeAttribute(final AttributeTO attribute) {\n-        return attributes.remove(attribute);\n-    }\n-\n-    public List<AttributeTO> getAttributes() {\n-        return attributes;\n-    }\n-\n-    public void setAttributes(final List<AttributeTO> attributes) {\n-        this.attributes = attributes;\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, AttributeTO> getAttributeMap() {\n-        Map<String, AttributeTO> result =\n-                new HashMap<String, AttributeTO>(attributes.size());\n-        for (AttributeTO attributeTO : attributes) {\n-            result.put(attributeTO.getSchema(), attributeTO);\n-        }\n-\n-        return result;\n-    }\n-\n     @JsonIgnore\n     public Map<String, AttributeTO> getDerivedAttributeMap() {\n         Map<String, AttributeTO> result ="},{"sha":"eab3375980c02001f46bad9fab567023f4899e84","filename":"client/src/main/java/org/syncope/client/to/ConnObjectTO.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConnObjectTO.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -0,0 +1,62 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.codehaus.jackson.annotate.JsonIgnore;\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class ConnObjectTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 5139554911265442497L;\n+\n+    private List<AttributeTO> attributes;\n+\n+    public ConnObjectTO() {\n+        super();\n+\n+        attributes = new ArrayList<AttributeTO>();\n+    }\n+\n+    public boolean addAttribute(final AttributeTO attribute) {\n+        return attributes.add(attribute);\n+    }\n+\n+    public boolean removeAttribute(final AttributeTO attribute) {\n+        return attributes.remove(attribute);\n+    }\n+\n+    public List<AttributeTO> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public void setAttributes(final List<AttributeTO> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, AttributeTO> getAttributeMap() {\n+        Map<String, AttributeTO> result =\n+                new HashMap<String, AttributeTO>(attributes.size());\n+        for (AttributeTO attributeTO : attributes) {\n+            result.put(attributeTO.getSchema(), attributeTO);\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"d4fb84ede5256b76ef078e9224de8718f4b87a8e","filename":"core/src/main/java/org/syncope/core/propagation/PropagationManager.java","status":"modified","additions":100,"deletions":42,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -169,18 +169,19 @@ public List<PropagationTask> getCreateTaskIds(\n      * Create the user on every associated resource.\n      *\n      * @param wfResult user to be propagated (and info associated), as per\n-     * result from workflow\n-     * @param password to be set\n-     * @param vAttrs virtual attributes to be set\n-     * @param syncResourceName name of external resource performing sync, hence\n-     * not to be considered for propagation\n-     * @return list of propagation tasks\n-     * @throws NotFoundException if userId is not found\n+     * result from workflow.\n+     * @param password to be set.\n+     * @param vAttrs virtual attributes to be set.\n+     * @param syncResourceNames external resources performing sync, hence\n+     * not to be considered for propagation.\n+     * @return list of propagation tasks.\n+     * @throws NotFoundException if userId is not found.\n      */\n     public List<PropagationTask> getCreateTaskIds(\n             final WorkflowResult<Map.Entry<Long, Boolean>> wfResult,\n-            final String password, final List<AttributeTO> vAttrs,\n-            final String syncResourceName)\n+            final String password,\n+            final List<AttributeTO> vAttrs,\n+            final Set<String> syncResourceNames)\n             throws NotFoundException {\n \n         SyncopeUser user = getSyncopeUser(wfResult.getResult().getKey());\n@@ -193,28 +194,59 @@ public List<PropagationTask> getCreateTaskIds(\n             return Collections.EMPTY_LIST;\n         }\n \n-        if (syncResourceName != null) {\n-            propByRes.get(PropagationOperation.CREATE).remove(syncResourceName);\n+        if (syncResourceNames != null) {\n+            propByRes.get(PropagationOperation.CREATE).\n+                    removeAll(syncResourceNames);\n         }\n \n-        return provision(user, password,\n-                wfResult.getResult().getValue(), propByRes);\n+        return provision(\n+                user, password, wfResult.getResult().getValue(), propByRes);\n+    }\n+\n+    /**\n+     * Performs update on each resource associated to the user excluding the \n+     * specified into 'resourceNames' parameter.\n+     *\n+     * @param user to be propagated.\n+     * @param enable wether user must be enabled or not.\n+     * @param syncResourceNames external resource names not to be considered \n+     * for propagation. Use this during sync and disable/enable actions limited\n+     * to the external resources only.\n+     * @return list of propagation tasks\n+     * @throws NotFoundException if userId is not found\n+     */\n+    public List<PropagationTask> getUpdateTaskIds(\n+            final SyncopeUser user,\n+            final Boolean enable,\n+            final Set<String> syncResourceNames)\n+            throws NotFoundException {\n+\n+        return getUpdateTaskIds(\n+                user, // SyncopeUser to be updated on external resources\n+                null, // no propagation by resources\n+                null, // no password\n+                null, // no virtual attributes to be managed\n+                null, // no virtual attributes to be managed\n+                enable, // status to be propagated\n+                syncResourceNames);\n     }\n \n     /**\n      * Performs update on each resource associated to the user.\n      *\n      * @param wfResult user to be propagated (and info associated), as per\n-     * result from workflow\n-     * @param enable wether user must be enabled or not\n+     * result from workflow.\n+     * @param enable wether user must be enabled or not.\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n      */\n     public List<PropagationTask> getUpdateTaskIds(\n-            final WorkflowResult<Long> wfResult, final Boolean enable)\n+            final WorkflowResult<Long> wfResult,\n+            final Boolean enable)\n             throws NotFoundException {\n \n-        return getUpdateTaskIds(wfResult, null, null, null, enable, null);\n+        return getUpdateTaskIds(\n+                wfResult, null, null, null, enable, null);\n     }\n \n     /**\n@@ -231,8 +263,10 @@ public List<PropagationTask> getUpdateTaskIds(\n      */\n     public List<PropagationTask> getUpdateTaskIds(\n             final WorkflowResult<Long> wfResult,\n-            final String password, final Set<String> vAttrsToBeRemoved,\n-            final Set<AttributeMod> vAttrsToBeUpdated, final Boolean enable)\n+            final String password,\n+            final Set<String> vAttrsToBeRemoved,\n+            final Set<AttributeMod> vAttrsToBeUpdated,\n+            final Boolean enable)\n             throws NotFoundException {\n \n         return getUpdateTaskIds(wfResult, password, vAttrsToBeRemoved,\n@@ -248,42 +282,65 @@ public List<PropagationTask> getUpdateTaskIds(\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @param enable wether user must be enabled or not\n-     * @param syncResourceName name of external resource performing sync, hence\n-     * not to be considered for propagation\n+     * @param syncResourceNames external resource names not to be considered \n+     * for propagation. Use this during sync and disable/enable actions limited\n+     * to the external resources only.\n      * @return list of propagation tasks\n      * @throws NotFoundException if userId is not found\n      */\n     public List<PropagationTask> getUpdateTaskIds(\n             final WorkflowResult<Long> wfResult,\n-            final String password, final Set<String> vAttrsToBeRemoved,\n-            final Set<AttributeMod> vAttrsToBeUpdated, final Boolean enable,\n-            final String syncResourceName)\n+            final String password,\n+            final Set<String> vAttrsToBeRemoved,\n+            final Set<AttributeMod> vAttrsToBeUpdated,\n+            final Boolean enable,\n+            final Set<String> syncResourceNames)\n             throws NotFoundException {\n \n         SyncopeUser user = getSyncopeUser(wfResult.getResult());\n \n-        PropagationByResource localPropByRes = userDataBinder.fillVirtual(user,\n+        return getUpdateTaskIds(\n+                user,\n+                wfResult.getPropByRes(),\n+                password,\n+                vAttrsToBeRemoved,\n+                vAttrsToBeUpdated,\n+                enable,\n+                syncResourceNames);\n+    }\n+\n+    private List<PropagationTask> getUpdateTaskIds(\n+            final SyncopeUser user,\n+            final PropagationByResource propByRes,\n+            final String password,\n+            final Set<String> vAttrsToBeRemoved,\n+            final Set<AttributeMod> vAttrsToBeUpdated,\n+            final Boolean enable,\n+            final Set<String> syncResourceNames)\n+            throws NotFoundException {\n+\n+        PropagationByResource localPropByRes = userDataBinder.fillVirtual(\n+                user,\n                 vAttrsToBeRemoved == null\n                 ? Collections.EMPTY_SET : vAttrsToBeRemoved,\n                 vAttrsToBeUpdated == null\n                 ? Collections.EMPTY_SET : vAttrsToBeUpdated,\n                 AttributableUtil.USER);\n \n-        if (wfResult.getPropByRes() != null\n-                && !wfResult.getPropByRes().isEmpty()) {\n-\n-            localPropByRes.merge(wfResult.getPropByRes());\n+        if (propByRes != null && !propByRes.isEmpty()) {\n+            localPropByRes.merge(propByRes);\n         } else {\n-            localPropByRes.addAll(PropagationOperation.UPDATE,\n-                    user.getResourceNames());\n+            localPropByRes.addAll(\n+                    PropagationOperation.UPDATE, user.getResourceNames());\n         }\n-        if (syncResourceName != null) {\n-            localPropByRes.get(PropagationOperation.CREATE).\n-                    remove(syncResourceName);\n-            localPropByRes.get(PropagationOperation.UPDATE).\n-                    remove(syncResourceName);\n-            localPropByRes.get(PropagationOperation.DELETE).\n-                    remove(syncResourceName);\n+\n+        if (syncResourceNames != null) {\n+            localPropByRes.get(\n+                    PropagationOperation.CREATE).removeAll(syncResourceNames);\n+            localPropByRes.get(\n+                    PropagationOperation.UPDATE).removeAll(syncResourceNames);\n+            localPropByRes.get(\n+                    PropagationOperation.DELETE).removeAll(syncResourceNames);\n         }\n \n         return provision(user, password, enable, localPropByRes);\n@@ -326,8 +383,7 @@ public List<PropagationTask> getDeleteTaskIds(final Long userId,\n         SyncopeUser user = getSyncopeUser(userId);\n \n         final PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(PropagationOperation.DELETE,\n-                user.getResourceNames());\n+        propByRes.set(PropagationOperation.DELETE, user.getResourceNames());\n         if (syncResourceName != null) {\n             propByRes.get(PropagationOperation.DELETE).remove(syncResourceName);\n         }\n@@ -622,8 +678,10 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(\n      * @param propByRes operation to be performed per resource\n      * @return list of propagation tasks created\n      */\n-    protected List<PropagationTask> provision(final SyncopeUser user,\n-            final String password, final Boolean enable,\n+    protected List<PropagationTask> provision(\n+            final SyncopeUser user,\n+            final String password,\n+            final Boolean enable,\n             final PropagationByResource propByRes) {\n \n         LOG.debug(\"Provisioning with user {}:\\n{}\", user, propByRes);"},{"sha":"85ef1ae31a8895f78fbc92dd5484988f8fc9fdcd","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -24,19 +24,29 @@\n import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.ConnObjectTO;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -53,6 +63,9 @@ public class ResourceController extends AbstractController {\n     @Autowired\n     private ResourceDataBinder binder;\n \n+    @Autowired\n+    private ConnInstanceLoader connLoader;\n+\n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n@@ -241,4 +254,57 @@ public List<SchemaMappingTO> getRoleResourcesMapping(\n \n         return roleMappings;\n     }\n+\n+    @PreAuthorize(\"hasRole('RESOURCE_GETOBJECT')\")\n+    @Transactional(readOnly = true)\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{resourceName}/read/{objectId}\")\n+    public ConnObjectTO getObject(final HttpServletResponse response,\n+            @PathVariable(\"resourceName\") String resourceName,\n+            @PathVariable(\"objectId\") final String objectId)\n+            throws NotFoundException {\n+\n+        ExternalResource resource = resourceDAO.find(resourceName);\n+        if (resource == null) {\n+            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n+            throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n+        }\n+\n+        final ConnectorFacadeProxy connector = connLoader.getConnector(resource);\n+\n+        final ConnectorObject connectorObject =\n+                connector.getObject(ObjectClass.ACCOUNT, new Uid(objectId), null);\n+\n+        if (connectorObject == null) {\n+            throw new NotFoundException(\n+                    \"Object \" + objectId + \" not found on resource \" + resourceName);\n+        }\n+\n+        final Set<Attribute> attributes = connectorObject.getAttributes();\n+\n+        if (AttributeUtil.find(Uid.NAME, attributes) == null) {\n+            attributes.add(connectorObject.getUid());\n+        }\n+\n+        if (AttributeUtil.find(Name.NAME, attributes) == null) {\n+            attributes.add(connectorObject.getName());\n+        }\n+\n+        final ConnObjectTO connObjectTO = new ConnObjectTO();\n+\n+        for (Attribute attr : attributes) {\n+            AttributeTO attrTO = new AttributeTO();\n+            attrTO.setSchema(attr.getName());\n+\n+            if (attr.getValue() != null) {\n+                for (Object value : attr.getValue()) {\n+                    attrTO.addValue(value.toString());\n+                }\n+            }\n+\n+            connObjectTO.addAttribute(attrTO);\n+        }\n+\n+        return connObjectTO;\n+    }\n }"},{"sha":"8f00c0bc0aa1e2869a087e23eb6950e96f9e8a19","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":97,"deletions":51,"changes":148,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -281,29 +281,6 @@ public UserTO create(final HttpServletResponse response,\n         return savedTO;\n     }\n \n-    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/activate\")\n-    public UserTO activate(@RequestBody final UserTO userTO)\n-            throws WorkflowException, NotFoundException,\n-            UnauthorizedRoleException, PropagationException {\n-\n-        WorkflowResult<Long> updated =\n-                wfAdapter.activate(userTO.getId(), userTO.getToken());\n-\n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated, Boolean.TRUE);\n-        propagationManager.execute(tasks);\n-\n-        notificationManager.createTasks(updated);\n-\n-        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n-\n-        LOG.debug(\"About to return activated user\\n{}\", savedTO);\n-\n-        return savedTO;\n-    }\n-\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n@@ -331,52 +308,71 @@ public UserTO update(@RequestBody final UserMod userMod)\n         return updatedTO;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/activate\")\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n+    public UserTO activate(\n+            @RequestBody final UserTO userTO,\n+            @RequestParam(required = false) final Set<String> resourceNames,\n+            @RequestParam(required = false, defaultValue = \"true\")\n+            final Boolean performLocal)\n+            throws WorkflowException, NotFoundException,\n+            UnauthorizedRoleException, PropagationException {\n+\n+        LOG.debug(\"About to activate \" + userTO.getId());\n+\n+\n+        SyncopeUser user = userDAO.find(userTO.getId());\n+        if (user == null) {\n+            throw new NotFoundException(\"User \" + userTO.getId());\n+        }\n+\n+        return setStatus(user, resourceNames, performLocal, true, \"activate\");\n+    }\n+\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/suspend/{userId}\")\n-    public UserTO suspend(@PathVariable(\"userId\") final Long userId)\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO suspend(\n+            @PathVariable(\"userId\") final Long userId,\n+            @RequestParam(required = false) final Set<String> resourceNames,\n+            @RequestParam(required = false, defaultValue = \"true\")\n+            final Boolean performLocal)\n             throws NotFoundException, WorkflowException,\n             UnauthorizedRoleException, PropagationException {\n \n         LOG.debug(\"About to suspend \" + userId);\n \n-        WorkflowResult<Long> updated = wfAdapter.suspend(userId);\n-\n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated, Boolean.FALSE);\n-        propagationManager.execute(tasks);\n-\n-        notificationManager.createTasks(updated);\n-\n-        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n \n-        LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n+        SyncopeUser user = userDAO.find(userId);\n+        if (user == null) {\n+            throw new NotFoundException(\"User \" + userId);\n+        }\n \n-        return savedTO;\n+        return setStatus(user, resourceNames, performLocal, false, \"suspend\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/reactivate/{userId}\")\n-    public UserTO reactivate(final @PathVariable(\"userId\") Long userId)\n+    @Transactional(rollbackFor = {Throwable.class})\n+    public UserTO reactivate(final @PathVariable(\"userId\") Long userId,\n+            @RequestParam(required = false) final Set<String> resourceNames,\n+            @RequestParam(required = false, defaultValue = \"true\")\n+            final Boolean performLocal)\n             throws NotFoundException, WorkflowException,\n             UnauthorizedRoleException, PropagationException {\n \n         LOG.debug(\"About to reactivate \" + userId);\n \n-        WorkflowResult<Long> updated = wfAdapter.reactivate(userId);\n-\n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated, Boolean.TRUE);\n-        propagationManager.execute(tasks);\n-\n-        notificationManager.createTasks(updated);\n-\n-        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n-\n-        LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n+        SyncopeUser user = userDAO.find(userId);\n+        if (user == null) {\n+            throw new NotFoundException(\"User \" + userId);\n+        }\n \n-        return savedTO;\n+        return setStatus(user, resourceNames, performLocal, true, \"reactivate\");\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n@@ -408,7 +404,8 @@ public void delete(@PathVariable(\"userId\") final Long userId)\n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/execute/workflow/{taskId}\")\n-    public UserTO executeWorkflow(@RequestBody final UserTO userTO,\n+    public UserTO executeWorkflow(\n+            @RequestBody final UserTO userTO,\n             @PathVariable(\"taskId\") final String taskId)\n             throws WorkflowException, NotFoundException,\n             UnauthorizedRoleException, PropagationException {\n@@ -417,8 +414,9 @@ public UserTO executeWorkflow(@RequestBody final UserTO userTO,\n \n         WorkflowResult<Long> updated = wfAdapter.execute(userTO, taskId);\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(\n-                updated, null);\n+        List<PropagationTask> tasks =\n+                propagationManager.getUpdateTaskIds(updated, null);\n+\n         propagationManager.execute(tasks);\n \n         notificationManager.createTasks(updated);\n@@ -490,4 +488,52 @@ public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n \n         return savedTO;\n     }\n+\n+    private UserTO setStatus(\n+            final SyncopeUser user,\n+            final Set<String> resourceNames,\n+            final boolean performLocal,\n+            final boolean status,\n+            final String performedTask)\n+            throws NotFoundException, WorkflowException,\n+            UnauthorizedRoleException, PropagationException {\n+\n+        LOG.debug(\"About to suspend \" + user.getId());\n+\n+        List<PropagationTask> tasks = null;\n+        WorkflowResult<Long> updated = null;\n+\n+        if (performLocal) {\n+            // perform local changes\n+\n+            if (\"suspend\".equals(performedTask)) {\n+                updated = wfAdapter.suspend(user.getId());\n+            } else if (\"reactivate\".equals(performedTask)) {\n+                updated = wfAdapter.reactivate(user.getId());\n+            } else {\n+                updated = wfAdapter.activate(user.getId(), user.getToken());\n+            }\n+        } else {\n+            // do not perform local changes\n+            updated = new WorkflowResult<Long>(user.getId(), null, performedTask);\n+        }\n+\n+        // Resources to exclude from propagation.\n+        Set<String> resources = new HashSet<String>();\n+        if (resourceNames != null) {\n+            resources.addAll(user.getResourceNames());\n+            resources.removeAll(resourceNames);\n+        }\n+\n+        tasks = propagationManager.getUpdateTaskIds(user, status, resources);\n+\n+        propagationManager.execute(tasks);\n+        notificationManager.createTasks(updated);\n+\n+        final UserTO savedTO = dataBinder.getUserTO(updated.getResult());\n+\n+        LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n+\n+        return savedTO;\n+    }\n }"},{"sha":"b2155c4de43f759f0bd18eefaeda1884d1e4b881","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -34,9 +34,9 @@\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttrValue;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.beans.AbstractSchema;\n@@ -690,7 +690,8 @@ protected PropagationByResource fill(\n         return propByRes;\n     }\n \n-    public void fillVirtual(final AbstractAttributable attributable,\n+    public void fillVirtual(\n+            final AbstractAttributable attributable,\n             final List<AttributeTO> vAttrs,\n             final AttributableUtil attributableUtil) {\n \n@@ -710,7 +711,8 @@ public void fillVirtual(final AbstractAttributable attributable,\n         }\n     }\n \n-    protected void fill(final AbstractAttributable attributable,\n+    protected void fill(\n+            final AbstractAttributable attributable,\n             final AbstractAttributableTO attributableTO,\n             final AttributableUtil attributableUtil,\n             final SyncopeClientCompositeErrorException compositeErrorException)"},{"sha":"1aa4a86e3d185acc6d1e6719780f1f66bdc837b5","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -633,7 +633,8 @@ private SyncResult createUser(final SyncDelta delta, final boolean dryRun)\n                 List<PropagationTask> tasks =\n                         propagationManager.getCreateTaskIds(\n                         created, userTO.getPassword(), null,\n-                        ((SyncTask) this.task).getResource().getName());\n+                        Collections.singleton(\n+                        ((SyncTask) this.task).getResource().getName()));\n                 propagationManager.execute(tasks);\n \n                 userTO = userDataBinder.getUserTO(\n@@ -695,7 +696,8 @@ private void updateUsers(final SyncDelta delta,\n                                 updated,\n                                 userMod.getPassword(),\n                                 null, null, null,\n-                                ((SyncTask) this.task).getResource().getName());\n+                                Collections.singleton(\n+                                ((SyncTask) this.task).getResource().getName()));\n \n                         propagationManager.execute(tasks);\n "},{"sha":"c074249b65d81870f7311e5081f03969db835ec9","filename":"core/src/main/java/org/syncope/core/workflow/AbstractUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -75,7 +75,7 @@ public WorkflowResult<Long> suspend(final Long userId)\n             throws UnauthorizedRoleException, NotFoundException,\n             WorkflowException {\n \n-        return doSuspend(dataBinder.getUserFromId(userId));\n+        return suspend(dataBinder.getUserFromId(userId));\n     }\n \n     @Override"},{"sha":"fc735c35e04c0bae367c56ec4f2ad5e9323879c4","filename":"core/src/main/java/org/syncope/core/workflow/WorkflowResult.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -29,15 +29,18 @@\n \n     private Set<String> performedTasks;\n \n-    public WorkflowResult(final T result,\n-            final PropagationByResource propByRes, final String performedTask) {\n+    public WorkflowResult(\n+            final T result,\n+            final PropagationByResource propByRes, \n+            final String performedTask) {\n \n         this.result = result;\n         this.propByRes = propByRes;\n         this.performedTasks = Collections.singleton(performedTask);\n     }\n \n-    public WorkflowResult(final T result,\n+    public WorkflowResult(\n+            final T result,\n             final PropagationByResource propByRes,\n             final Set<String> performedTasks) {\n "},{"sha":"4fde1c955d3655c522c6d6fdd7be9f4ae43c9591","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -62,6 +62,7 @@\n     <Entitlement name=\"RESOURCE_READ\"/>\n     <Entitlement name=\"RESOURCE_UPDATE\"/>\n     <Entitlement name=\"RESOURCE_DELETE\"/>\n+    <Entitlement name=\"RESOURCE_GETOBJECT\"/>\n     <Entitlement name=\"REPORT_LIST\"/>\n     <Entitlement name=\"CONNECTOR_LIST\"/>\n     <Entitlement name=\"CONNECTOR_CREATE\"/>"},{"sha":"3d56ba854d7582e39377b9ad1aa5c562e6c96186","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -36,7 +36,7 @@ public final void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n         // 59 real entitlements + 9 role entitlements\n         assertEquals(\"did not get expected number of entitlements \",\n-                68, list.size());\n+                69, list.size());\n     }\n \n     @Test"},{"sha":"e7c98d80730eb61d319da49fa69eaa1ba56f9f11","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":117,"deletions":5,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -27,6 +27,7 @@\n import java.util.Set;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.junit.Test;\n import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.http.HttpStatus;\n@@ -42,9 +43,11 @@\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.search.ResourceCond;\n+import org.syncope.client.to.ConnObjectTO;\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n import org.syncope.client.to.PropagationTaskTO;\n+import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowFormPropertyTO;\n import org.syncope.client.to.WorkflowFormTO;\n@@ -1355,6 +1358,100 @@ public void suspendReactivate() {\n         assertEquals(\"active\", userTO.getStatus());\n     }\n \n+    @Test\n+    public void suspendReactivateOnResource() {\n+        UserTO userTO = getSampleTO(\"suspreactonresource@syncope-idm.org\");\n+\n+        userTO.getMemberships().clear();\n+        userTO.getResources().clear();\n+\n+        ResourceTO dbTable = restTemplate.getForObject(\n+                BASE_URL + \"/resource/read/{resourceName}.json\",\n+                ResourceTO.class, \"resource-testdb\");\n+\n+        assertNotNull(dbTable);\n+        userTO.addResource(dbTable.getName());\n+\n+        ResourceTO ldap = restTemplate.getForObject(\n+                BASE_URL + \"/resource/read/{resourceName}.json\",\n+                ResourceTO.class, \"resource-ldap\");\n+\n+        assertNotNull(ldap);\n+        userTO.addResource(ldap.getName());\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        String query = \"?resourceNames=\" + dbTable.getName()\n+                + \"&resourceNames=\" + ldap.getName()\n+                + \"&performLocal=true\"; // check also performLocal\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/suspend/\" + userTO.getId() + query,\n+                UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        String dbTableUID = String.valueOf(userTO.getId());\n+        assertNotNull(dbTableUID);\n+\n+        ConnObjectTO connObjectTO = restTemplate.getForObject(\n+                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n+                ConnObjectTO.class, dbTable.getName(), dbTableUID);\n+\n+        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().\n+                get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n+\n+        String ldapUID = userTO.getUsername();\n+        assertNotNull(ldapUID);\n+\n+        connObjectTO = restTemplate.getForObject(\n+                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n+                ConnObjectTO.class, ldap.getName(), ldapUID);\n+\n+        assertNotNull(connObjectTO);\n+\n+        query = \"?resourceNames=\" + ldap.getName()\n+                + \"&performLocal=false\"; // check also performLocal\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/reactivate/\" + userTO.getId() + query,\n+                UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        connObjectTO = restTemplate.getForObject(\n+                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n+                ConnObjectTO.class, dbTable.getName(), dbTableUID);\n+\n+        assertFalse(Boolean.parseBoolean(connObjectTO.getAttributeMap().\n+                get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n+\n+        query = \"?resourceNames=\" + dbTable.getName()\n+                + \"&performLocal=true\"; // check also performLocal\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/reactivate/\" + userTO.getId() + query,\n+                UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        connObjectTO = restTemplate.getForObject(\n+                BASE_URL + \"/resource/{resourceName}/read/{objectId}.json\",\n+                ConnObjectTO.class, dbTable.getName(), dbTableUID);\n+\n+        assertTrue(Boolean.parseBoolean(connObjectTO.getAttributeMap().\n+                get(OperationalAttributes.ENABLE_NAME).getValues().get(0)));\n+\n+\n+    }\n+\n     @Test(expected = EmptyResultDataAccessException.class)\n     public void issue213() {\n         UserTO userTO = getSampleTO(\"issue213@syncope-idm.org\");\n@@ -1365,16 +1462,21 @@ public void issue213() {\n         assertNotNull(userTO);\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+\n         int id = jdbcTemplate.queryForInt(\n                 \"SELECT id FROM test WHERE id=?\", userTO.getId());\n+\n         assertEquals(userTO.getId(), id);\n \n         UserMod userMod = new UserMod();\n+\n         userMod.setId(userTO.getId());\n-        userMod.addResourceToBeRemoved(\"resource-testdb\");\n+        userMod.addResourceToBeRemoved(\n+                \"resource-testdb\");\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n                 userMod, UserTO.class);\n+\n         assertTrue(userTO.getResources().isEmpty());\n \n         jdbcTemplate.queryForInt(\n@@ -1391,13 +1493,18 @@ public void issue234() {\n         assertNotNull(userTO);\n \n         UserMod userMod = new UserMod();\n+\n         userMod.setId(userTO.getId());\n-        userMod.setUsername(\"1\" + userTO.getUsername());\n+        userMod.setUsername(\n+                \"1\" + userTO.getUsername());\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/update\",\n                 userMod, UserTO.class);\n+\n         assertNotNull(userTO);\n-        assertEquals(\"1issue234@syncope-idm.org\", userTO.getUsername());\n+\n+        assertEquals(\n+                \"1issue234@syncope-idm.org\", userTO.getUsername());\n     }\n \n     @Test\n@@ -1411,15 +1518,19 @@ public void issue270() {\n                 BASE_URL + \"user/create\", original, UserTO.class);\n \n         assertNotNull(original);\n+\n         assertTrue(original.getVirtualAttributes().isEmpty());\n \n         UserTO toBeUpdated = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, original.getId());\n \n         AttributeTO virtual = new AttributeTO();\n-        virtual.setSchema(\"virtualdata\");\n-        virtual.addValue(\"virtualvalue\");\n+\n+        virtual.setSchema(\n+                \"virtualdata\");\n+        virtual.addValue(\n+                \"virtualvalue\");\n \n         toBeUpdated.addVirtualAttribute(virtual);\n \n@@ -1432,6 +1543,7 @@ public void issue270() {\n                 BASE_URL + \"user/update\", userMod, UserTO.class);\n \n         assertNotNull(toBeUpdated);\n+\n         assertFalse(toBeUpdated.getVirtualAttributes().isEmpty());\n         assertNotNull(toBeUpdated.getVirtualAttributes().get(0));\n "},{"sha":"7feda0335a53be0d29db3836a6daf26a54a98f34","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f438d59b8c396c7d904147eec8c3ba07a8c84ce8/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=f438d59b8c396c7d904147eec8c3ba07a8c84ce8","patch":"@@ -486,6 +486,7 @@\n     <Entitlement name=\"RESOURCE_READ\"/>\n     <Entitlement name=\"RESOURCE_UPDATE\"/>\n     <Entitlement name=\"RESOURCE_DELETE\"/>\n+    <Entitlement name=\"RESOURCE_GETOBJECT\"/>\n     <Entitlement name=\"REPORT_LIST\"/>\n     <Entitlement name=\"CONNECTOR_LIST\"/>\n     <Entitlement name=\"CONNECTOR_CREATE\"/>"}]}