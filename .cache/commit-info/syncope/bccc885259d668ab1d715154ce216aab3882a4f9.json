{"sha":"bccc885259d668ab1d715154ce216aab3882a4f9","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJjY2M4ODUyNTlkNjY4YWIxZDcxNTE1NGNlMjE2YWFiMzg4MmE0Zjk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-14T16:44:20Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-14T16:44:20Z"},"message":"Fixes after deeper sync verification with AD\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247256 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1b5ba0c5b88c6b1354745619af10aba219459819","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/1b5ba0c5b88c6b1354745619af10aba219459819"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bccc885259d668ab1d715154ce216aab3882a4f9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bccc885259d668ab1d715154ce216aab3882a4f9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bccc885259d668ab1d715154ce216aab3882a4f9","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bccc885259d668ab1d715154ce216aab3882a4f9/comments","author":null,"committer":null,"parents":[{"sha":"60e7169a726a800ceb709c1c9943f7c4de36595e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/60e7169a726a800ceb709c1c9943f7c4de36595e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/60e7169a726a800ceb709c1c9943f7c4de36595e"}],"stats":{"total":86,"additions":58,"deletions":28},"files":[{"sha":"42cbfaece3b2cfe0bb45f1246c1ae0d7103d8c1a","filename":"core/src/main/java/org/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -14,10 +14,8 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n@@ -92,11 +90,14 @@ public class ExternalResource extends AbstractBaseBean {\n \n     /**\n      * Attribute mappings.\n+     * \n+     * List type canno be used. Please, take a look at \n+     * https://hibernate.onjira.com/browse/HHH-1718\n      */\n     @OneToMany(cascade = {CascadeType.MERGE, CascadeType.REMOVE},\n     orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"resource\")\n     @Valid\n-    private List<SchemaMapping> mappings;\n+    private Set<SchemaMapping> mappings;\n \n     /**\n      * A JEXL expression for determining how to link user account id in\n@@ -171,7 +172,7 @@ public ExternalResource() {\n         forceMandatoryConstraint = getBooleanAsInteger(false);\n         users = new HashSet<SyncopeUser>();\n         roles = new HashSet<SyncopeRole>();\n-        mappings = new ArrayList<SchemaMapping>();\n+        mappings = new HashSet<SchemaMapping>();\n         propagationPrimary = 0;\n         propagationPriority = 0;\n         propagationMode = PropagationMode.TWO_PHASES;\n@@ -225,14 +226,14 @@ public void setPropagationMode(PropagationMode propagationMode) {\n         this.propagationMode = propagationMode;\n     }\n \n-    public List<SchemaMapping> getMappings() {\n+    public Set<SchemaMapping> getMappings() {\n         return mappings;\n     }\n \n-    public List<SchemaMapping> getMappings(final String intAttrName,\n+    public Set<SchemaMapping> getMappings(final String intAttrName,\n             final IntMappingType intMappingType) {\n \n-        List<SchemaMapping> result = new ArrayList<SchemaMapping>();\n+        Set<SchemaMapping> result = new HashSet<SchemaMapping>();\n         for (SchemaMapping mapping : mappings) {\n             if (intAttrName.equals(mapping.getIntAttrName())\n                     && mapping.getIntMappingType() == intMappingType) {\n@@ -264,7 +265,7 @@ public boolean addMapping(SchemaMapping mapping) {\n         return mappings.contains(mapping) || mappings.add(mapping);\n     }\n \n-    public void setMappings(List<SchemaMapping> mappings) {\n+    public void setMappings(Set<SchemaMapping> mappings) {\n         for (SchemaMapping mapping : this.mappings) {\n             mapping.setResource(null);\n         }"},{"sha":"deaa402dbbbfedbfee7276a536ef98f97c536b87","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.Query;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.ExternalResource;\n@@ -75,7 +76,17 @@ public List<ExternalResource> findAllByPriority() {\n         return query.getResultList();\n     }\n \n+    /**\n+     * This method has an explicit @Transactional annotation because it is \n+     * called by SyncJob.\n+     * \n+     * @see org.syncope.core.scheduling.SyncJob\n+     * \n+     * @param execution entity to be merged\n+     * @return the same entity, updated\n+     */\n     @Override\n+    @Transactional(rollbackFor = {Throwable.class})\n     public ExternalResource save(final ExternalResource resource) {\n         ExternalResource merged = entityManager.merge(resource);\n         try {"},{"sha":"35b2d605701d9eda5903e9467f9571de0af66029","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskExecDAOImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -21,7 +21,6 @@\n import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.dao.TaskExecDAO;\n-import org.syncope.core.scheduling.AbstractJob;\n \n @Repository\n public class TaskExecDAOImpl extends AbstractDAOImpl\n@@ -69,10 +68,10 @@ public <T extends Task> List<TaskExec> findAll(Class<T> reference) {\n     }\n \n     /**\n-     * This method has an explicit @Transactional annotation because it is called\n-     * by AbstractJob.\n+     * This method has an explicit @Transactional annotation because it is \n+     * called by AbstractJob.\n      * \n-     * @see AbstractJob\n+     * @see org.syncope.core.scheduling.AbstractJob\n      * \n      * @param execution entity to be merged\n      * @return the same entity, updated"},{"sha":"bc9cfcf4c571ba17553de7d6683e50ad9e163608","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -226,7 +226,7 @@ public List<SchemaMappingTO> getRoleResourcesMapping(\n         for (ExternalResource resource : resources) {\n             LOG.debug(\"Ask for the mappings of {}\", resource);\n \n-            List<SchemaMapping> schemaMappings = resource.getMappings();\n+            Set<SchemaMapping> schemaMappings = resource.getMappings();\n             LOG.debug(\"The mappings of {} are {}\",\n                     resource, schemaMappings);\n "},{"sha":"0f867ea30f3c7add82357d6de45e56ec179fbc48","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -224,7 +224,7 @@ private boolean evaluateMandatoryCondition(\n             final String intAttrName,\n             final AttributableUtil attributableUtil) {\n \n-        List<SchemaMapping> mappings = resource.getMappings(intAttrName,\n+        Set<SchemaMapping> mappings = resource.getMappings(intAttrName,\n                 attributableUtil.intMappingType());\n \n         boolean result = false;"},{"sha":"cdccef216bfe625b58e5a8fcb4d88f1039171649","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -18,6 +18,7 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n@@ -200,15 +201,14 @@ public ResourceTO getResourceTO(ExternalResource resource) {\n         return resourceTO;\n     }\n \n-    private List<SchemaMapping> getSchemaMappings(\n+    private Set<SchemaMapping> getSchemaMappings(\n             ExternalResource resource, List<SchemaMappingTO> mappings) {\n \n         if (mappings == null) {\n             return null;\n         }\n \n-        final List<SchemaMapping> schemaMappings =\n-                new ArrayList<SchemaMapping>();\n+        final Set<SchemaMapping> schemaMappings = new HashSet<SchemaMapping>();\n \n         SchemaMapping schemaMapping;\n         for (SchemaMappingTO mapping : mappings) {"},{"sha":"cd81e8fbb8e97fe5a3a99dd099c084c98fe122e0","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":27,"deletions":9,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -25,9 +25,9 @@\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.OperationalAttributes;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.quartz.JobExecutionException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n@@ -47,6 +47,7 @@\n import org.syncope.client.to.UserTO;\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.PropagationTask;\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.SyncPolicy;\n@@ -240,7 +241,7 @@ private UserTO getUserTO(final ConnectorObject obj) {\n         for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n             Attribute attribute;\n             if (mapping.isAccountid()) {\n-                attribute = obj.getAttributeByName(Name.NAME);\n+                attribute = obj.getAttributeByName(Uid.NAME);\n             } else if (mapping.isPassword()) {\n                 attribute = obj.getAttributeByName(\n                         OperationalAttributes.PASSWORD_NAME);\n@@ -362,8 +363,17 @@ private UserMod getUserMod(final Long userId,\n         userMod.setId(userId);\n \n         for (SchemaMapping mapping : syncTask.getResource().getMappings()) {\n-            Attribute attribute = obj.getAttributeByName(\n-                    mapping.getExtAttrName());\n+            Attribute attribute;\n+\n+            if (mapping.isAccountid()) {\n+                attribute = obj.getAttributeByName(Uid.NAME);\n+            } else if (mapping.isPassword()) {\n+                attribute = obj.getAttributeByName(\n+                        OperationalAttributes.PASSWORD_NAME);\n+            } else {\n+                attribute = obj.getAttributeByName(mapping.getExtAttrName());\n+            }\n+\n             List<Object> values = attribute == null\n                     ? Collections.EMPTY_LIST : attribute.getValue();\n \n@@ -666,6 +676,7 @@ private void updateUsers(final SyncDelta delta,\n             try {\n                 UserTO userTO = userDataBinder.getUserTO(userId);\n                 try {\n+\n                     final UserMod userMod =\n                             getUserMod(userId, delta.getObject());\n                     actions.beforeUpdate(delta, userTO, userMod);\n@@ -677,12 +688,14 @@ private void updateUsers(final SyncDelta delta,\n                     if (!dryRun) {\n                         WorkflowResult<Long> updated =\n                                 wfAdapter.update(userMod);\n+\n                         List<PropagationTask> tasks =\n                                 propagationManager.getUpdateTaskIds(\n                                 updated,\n                                 userMod.getPassword(),\n                                 null, null, null,\n                                 ((SyncTask) this.task).getResource().getName());\n+\n                         propagationManager.execute(tasks);\n \n                         userTO = userDataBinder.getUserTO(\n@@ -937,6 +950,7 @@ protected String doExecute(final boolean dryRun)\n \n         final SchemaMapping accountIdMap =\n                 syncTask.getResource().getAccountIdMapping();\n+\n         if (accountIdMap == null) {\n             throw new JobExecutionException(\n                     \"Invalid account id mapping for resource \"\n@@ -1031,15 +1045,19 @@ protected String doExecute(final boolean dryRun)\n \n         actions.afterAll(deltas, results);\n \n-        final String result = createReport(results, syncTask.getResource().\n-                getSyncTraceLevel(), dryRun);\n+        final String result = createReport(\n+                results, syncTask.getResource().getSyncTraceLevel(), dryRun);\n+\n         LOG.debug(\"Sync result: {}\", result);\n \n         if (!dryRun) {\n             try {\n-                syncTask.getResource().setSyncToken(\n-                        connector.getLatestSyncToken());\n-                resourceDAO.save(syncTask.getResource());\n+                ExternalResource resource =\n+                        resourceDAO.find(syncTask.getResource().getName());\n+\n+                resource.setSyncToken(connector.getLatestSyncToken());\n+                resourceDAO.save(resource);\n+\n             } catch (Throwable t) {\n                 throw new JobExecutionException(\"While updating SyncToken\", t);\n             }"},{"sha":"6fae7c3816ba1364e7f60ace8bbfcfb7cdee9033","filename":"core/src/test/java/org/syncope/core/persistence/dao/ResourceTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FResourceTest.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -17,6 +17,7 @@\n import static org.junit.Assert.*;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n import org.connid.bundles.soap.WebServiceConnector;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -56,7 +57,7 @@ public final void findById() {\n         assertEquals(\"invalid bundle version\",\n                 connidSoapVersion, connector.getVersion());\n \n-        List<SchemaMapping> mappings = resource.getMappings();\n+        Set<SchemaMapping> mappings = resource.getMappings();\n \n         assertNotNull(\"mappings not found\", mappings);\n "},{"sha":"abd5a5a67d4800af4d056934610d309363b43afc","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bccc885259d668ab1d715154ce216aab3882a4f9/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FResourceTest.java?ref=bccc885259d668ab1d715154ce216aab3882a4f9","patch":"@@ -243,7 +243,7 @@ public final void save()\n         assertTrue(resource.getConnector().equals(connector));\n \n         // check mappings\n-        List<SchemaMapping> schemaMappings = resource.getMappings();\n+        Set<SchemaMapping> schemaMappings = resource.getMappings();\n \n         assertNotNull(schemaMappings);\n         assertEquals(5, schemaMappings.size());"}]}