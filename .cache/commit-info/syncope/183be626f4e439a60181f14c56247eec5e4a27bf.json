{"sha":"183be626f4e439a60181f14c56247eec5e4a27bf","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE4M2JlNjI2ZjRlNDM5YTYwMTgxZjE0YzU2MjQ3ZWVjNWU0YTI3YmY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-23T11:47:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-23T11:47:04Z"},"message":"[SYNCOPE-938] Base64 encoder (not MIME encoder) is required for cookies","tree":{"sha":"22f1f5f85589e18d16ca8226aedfdc4fda81e1b6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/22f1f5f85589e18d16ca8226aedfdc4fda81e1b6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/183be626f4e439a60181f14c56247eec5e4a27bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/183be626f4e439a60181f14c56247eec5e4a27bf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/183be626f4e439a60181f14c56247eec5e4a27bf","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/183be626f4e439a60181f14c56247eec5e4a27bf/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4759ad8ea33a44885645ecc9ddb7834eea9aaba4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4759ad8ea33a44885645ecc9ddb7834eea9aaba4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4759ad8ea33a44885645ecc9ddb7834eea9aaba4"}],"stats":{"total":16,"additions":8,"deletions":8},"files":[{"sha":"473e024a9b234bec8e1542111d4844fea78f0a05","filename":"client/console/src/main/java/org/apache/syncope/client/console/PreferenceManager.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/183be626f4e439a60181f14c56247eec5e4a27bf/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/183be626f4e439a60181f14c56247eec5e4a27bf/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java?ref=183be626f4e439a60181f14c56247eec5e4a27bf","patch":"@@ -25,6 +25,7 @@\n import java.io.StringWriter;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Base64;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -34,7 +35,6 @@\n import org.apache.wicket.request.Response;\n import org.apache.wicket.util.cookies.CookieDefaults;\n import org.apache.wicket.util.cookies.CookieUtils;\n-import org.apache.wicket.util.crypt.Base64;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -95,7 +95,7 @@ public String get(final Request request, final String key) {\n \n         String prefString = COOKIE_UTILS.load(COOKIE_NAME);\n         if (prefString != null) {\n-            final Map<String, String> prefs = getPrefs(new String(Base64.decodeBase64(prefString.getBytes())));\n+            Map<String, String> prefs = getPrefs(new String(Base64.getDecoder().decode(prefString.getBytes())));\n             result = prefs.get(key);\n         }\n \n@@ -131,16 +131,16 @@ public void set(final Request request, final Response response, final Map<String\n \n         String prefString = COOKIE_UTILS.load(COOKIE_NAME);\n         if (prefString != null) {\n-            current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n+            current.putAll(getPrefs(new String(Base64.getDecoder().decode(prefString.getBytes()))));\n         }\n \n         // after retrieved previous setting in order to overwrite the key ...\n-        for (Map.Entry<String, List<String>> entry : prefs.entrySet()) {\n+        prefs.entrySet().forEach(entry -> {\n             current.put(entry.getKey(), StringUtils.join(entry.getValue(), \";\"));\n-        }\n+        });\n \n         try {\n-            COOKIE_UTILS.save(COOKIE_NAME, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+            COOKIE_UTILS.save(COOKIE_NAME, Base64.getEncoder().encodeToString(setPrefs(current).getBytes()));\n         } catch (IOException e) {\n             LOG.error(\"Could not save {} info: {}\", getClass().getSimpleName(), current, e);\n         }\n@@ -151,14 +151,14 @@ public void set(final Request request, final Response response, final String key\n \n         final Map<String, String> current = new HashMap<>();\n         if (prefString != null) {\n-            current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n+            current.putAll(getPrefs(new String(Base64.getDecoder().decode(prefString.getBytes()))));\n         }\n \n         // after retrieved previous setting in order to overwrite the key ...\n         current.put(key, value);\n \n         try {\n-            COOKIE_UTILS.save(COOKIE_NAME, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+            COOKIE_UTILS.save(COOKIE_NAME, Base64.getEncoder().encodeToString(setPrefs(current).getBytes()));\n         } catch (IOException e) {\n             LOG.error(\"Could not save {} info: {}\", getClass().getSimpleName(), current, e);\n         }"}]}