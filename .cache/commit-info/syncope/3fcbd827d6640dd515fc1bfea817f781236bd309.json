{"sha":"3fcbd827d6640dd515fc1bfea817f781236bd309","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNmY2JkODI3ZDY2NDBkZDUxNWZjMWJmZWE4MTdmNzgxMjM2YmQzMDk=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-08T13:50:19Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-06-08T13:50:19Z"},"message":"(Fixes issue #5) (Fixes issue #4)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1245974 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ab1ba0ced8d9d72f0758f74c6a9bc7a6b8865a8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7ab1ba0ced8d9d72f0758f74c6a9bc7a6b8865a8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3fcbd827d6640dd515fc1bfea817f781236bd309","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3fcbd827d6640dd515fc1bfea817f781236bd309","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3fcbd827d6640dd515fc1bfea817f781236bd309","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3fcbd827d6640dd515fc1bfea817f781236bd309/comments","author":null,"committer":null,"parents":[{"sha":"9762d53520390f3a4be3655f4e2d25ef273ee126","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9762d53520390f3a4be3655f4e2d25ef273ee126","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9762d53520390f3a4be3655f4e2d25ef273ee126"}],"stats":{"total":1872,"additions":853,"deletions":1019},"files":[{"sha":"d9c46f52ddd7b8cd17230ab919f57766fe945c62","filename":"core/pom.xml","status":"modified","additions":17,"deletions":6,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -51,20 +51,31 @@\n             <groupId>opensymphony</groupId>\n             <artifactId>osworkflow</artifactId>\n         </dependency>\n-\n+        \n         <dependency>\n             <groupId>org.springframework</groupId>\n-            <artifactId>spring</artifactId>\n+            <artifactId>spring-core</artifactId>\n         </dependency>\n-\n         <dependency>\n-            <groupId>org.hibernate</groupId>\n-            <artifactId>hibernate-entitymanager</artifactId>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-context</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-tx</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-jdbc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-orm</artifactId>\n         </dependency>\n \n         <dependency>\n             <groupId>org.hibernate</groupId>\n-            <artifactId>hibernate-annotations</artifactId>\n+            <artifactId>hibernate-entitymanager</artifactId>\n         </dependency>\n \n         <dependency>"},{"sha":"55ce0c44aabaa10ae304901b7747fba41778b04f","filename":"pom.xml","status":"modified","additions":48,"deletions":44,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -98,16 +98,16 @@\n \n         <osworkflow.version>2.8.0</osworkflow.version>\n \n-        <spring.version>2.5.6.SEC01</spring.version>\n+        <org.springframework.version>3.0.2.RELEASE</org.springframework.version>\n+        <jackson.version>1.5.2</jackson.version>\n+        <xstream.version>1.3.1</xstream.version>\n \n-        <hibernate.version>3.4.0.GA</hibernate.version>\n+        <hibernate.version>3.5.1-Final</hibernate.version>\n \n         <postgresql.jdbc-driver.version>8.1-408.jdbc3</postgresql.jdbc-driver.version>\n \n         <wicket.version>1.4.7</wicket.version>\n \n-        <jersey.version>1.2</jersey.version>\n-\n         <log4j.version>1.2.16</log4j.version>\n \n         <slf4j.version>1.5.2</slf4j.version>\n@@ -159,19 +159,12 @@\n                 <version>${osworkflow.version}</version>\n             </dependency>\n \n-            <!-- Hibernate -->\n             <dependency>\n                 <groupId>org.hibernate</groupId>\n                 <artifactId>hibernate-entitymanager</artifactId>\n                 <version>${hibernate.version}</version>\n             </dependency>\n-            <dependency>\n-                <groupId>org.hibernate</groupId>\n-                <artifactId>hibernate-annotations</artifactId>\n-                <version>${hibernate.version}</version>\n-            </dependency>\n-            <!-- /Hibernate -->\n-\n+            \n             <dependency>\n                 <groupId>postgresql</groupId>\n                 <artifactId>postgresql</artifactId>\n@@ -181,34 +174,58 @@\n             <!-- Spring -->\n             <dependency>\n                 <groupId>org.springframework</groupId>\n-                <artifactId>spring</artifactId>\n-                <version>${spring.version}</version>\n+                <artifactId>spring-core</artifactId>\n+                <version>${org.springframework.version}</version>\n             </dependency>\n-            <!-- /Spring -->\n-\n             <dependency>\n-                <groupId>org.apache.wicket</groupId>\n-                <artifactId>wicket</artifactId>\n-                <version>${wicket.version}</version>\n+                <groupId>org.springframework</groupId>\n+                <artifactId>spring-context</artifactId>\n+                <version>${org.springframework.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.springframework</groupId>\n+                <artifactId>spring-jdbc</artifactId>\n+                <version>${org.springframework.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.springframework</groupId>\n+                <artifactId>spring-orm</artifactId>\n+                <version>${org.springframework.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.springframework</groupId>\n+                <artifactId>spring-webmvc</artifactId>\n+                <version>${org.springframework.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.springframework</groupId>\n+                <artifactId>spring-oxm</artifactId>\n+                <version>${org.springframework.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.springframework</groupId>\n+                <artifactId>spring-tx</artifactId>\n+                <version>${org.springframework.version}</version>\n+            </dependency>\n+            <!-- /Spring -->\n \n-            <!-- Jersey -->\n             <dependency>\n-                <groupId>com.sun.jersey</groupId>\n-                <artifactId>jersey-server</artifactId>\n-                <version>${jersey.version}</version>\n+                <groupId>org.codehaus.jackson</groupId>\n+                <artifactId>jackson-mapper-lgpl</artifactId>\n+                <version>${jackson.version}</version>\n             </dependency>\n+\n             <dependency>\n-                <groupId>com.sun.jersey</groupId>\n-                <artifactId>jersey-json</artifactId>\n-                <version>${jersey.version}</version>\n+                <groupId>com.thoughtworks.xstream</groupId>\n+                <artifactId>xstream</artifactId>\n+                <version>${xstream.version}</version>\n             </dependency>\n+\n             <dependency>\n-                <groupId>com.sun.jersey.contribs</groupId>\n-                <artifactId>jersey-spring</artifactId>\n-                <version>${jersey.version}</version>\n+                <groupId>org.apache.wicket</groupId>\n+                <artifactId>wicket</artifactId>\n+                <version>${wicket.version}</version>\n             </dependency>\n-            <!-- /Jersey -->\n \n             <dependency>\n                 <groupId>log4j</groupId>\n@@ -228,12 +245,6 @@\n                 <version>${junit.version}</version>\n                 <scope>test</scope>\n             </dependency>\n-            <dependency>\n-                <groupId>com.sun.jersey</groupId>\n-                <artifactId>jersey-client</artifactId>\n-                <version>${jersey.version}</version>\n-                <scope>test</scope>\n-            </dependency>\n             <dependency>\n                 <groupId>hsqldb</groupId>\n                 <artifactId>hsqldb</artifactId>\n@@ -243,7 +254,7 @@\n             <dependency>\n                 <groupId>org.springframework</groupId>\n                 <artifactId>spring-test</artifactId>\n-                <version>${spring.version}</version>\n+                <version>${org.springframework.version}</version>\n                 <scope>test</scope>\n             </dependency>\n             <dependency>\n@@ -281,13 +292,6 @@\n             <url>https://maven.atlassian.com/3rdparty/</url>\n         </repository>\n \n-        <repository>\n-            <id>maven2-repository.dev.java.net</id>\n-            <name>Java.net Maven 2 Repository</name>\n-            <url>http://download.java.net/maven/2/</url>\n-            <layout>default</layout>\n-        </repository>\n-\n     </repositories>\n \n     <build>"},{"sha":"30fdba0d576b209bc412c39e03c1c4abc8e35d14","filename":"rest/pom.xml","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fpom.xml?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -45,6 +45,12 @@\n             <version>${parent.version}</version>\n         </dependency>\n \n+        <dependency>\n+            <groupId>javax.servlet</groupId>\n+            <artifactId>servlet-api</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n         <dependency>\n             <groupId>log4j</groupId>\n             <artifactId>log4j</artifactId>\n@@ -55,16 +61,26 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>com.sun.jersey</groupId>\n-            <artifactId>jersey-server</artifactId>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-webmvc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-oxm</artifactId>\n         </dependency>\n         <dependency>\n-            <groupId>com.sun.jersey</groupId>\n-            <artifactId>jersey-json</artifactId>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-tx</artifactId>\n         </dependency>\n+\n+        <dependency>\n+            <groupId>org.codehaus.jackson</groupId>\n+            <artifactId>jackson-mapper-lgpl</artifactId>\n+        </dependency>\n+\n         <dependency>\n-            <groupId>com.sun.jersey.contribs</groupId>\n-            <artifactId>jersey-spring</artifactId>\n+            <groupId>com.thoughtworks.xstream</groupId>\n+            <artifactId>xstream</artifactId>\n         </dependency>\n \n         <!-- TEST -->\n@@ -74,8 +90,8 @@\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n-            <groupId>com.sun.jersey</groupId>\n-            <artifactId>jersey-client</artifactId>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-test</artifactId>\n             <scope>test</scope>\n         </dependency>\n         <dependency>\n@@ -126,7 +142,7 @@\n                         <id>start-jetty</id>\n                         <phase>pre-integration-test</phase>\n                         <goals>\n-                            <goal>run</goal>\n+                            <goal>run-war</goal>\n                         </goals>\n                         <configuration>\n                             <scanIntervalSeconds>0</scanIntervalSeconds>"},{"sha":"3cf19ea99c451b8709941b246e614d56341422dd","filename":"rest/src/main/java/org/syncope/rest/controller/UserController.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fcontroller%2FUserController.java?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -0,0 +1,147 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.rest.controller;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.servlet.http.HttpServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.syncope.rest.to.AttributeTO;\n+import org.syncope.rest.to.SearchParameters;\n+import org.syncope.rest.to.UserTO;\n+\n+/**\n+ * TODO: call syncope-core\n+ */\n+@Controller\n+@RequestMapping(\"/user\")\n+public class UserController {\n+\n+    private static final Logger log = LoggerFactory.getLogger(UserController.class);\n+\n+    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n+    public UserTO create(HttpServletResponse response,\n+            @RequestBody UserTO userTO) throws IOException {\n+\n+        log.info(\"create called with parameter \" + userTO);\n+\n+        return userTO;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{userId}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"userId\") Long userId) throws IOException {\n+\n+        log.info(\"delete called with parameter \" + userId);\n+\n+        if (userId == 0) {\n+            response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+        }\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n+    public ModelAndView read(@PathVariable(\"userId\") Long userId)\n+            throws IOException {\n+\n+        log.info(\"read called with parameter \" + userId);\n+\n+        Set<String> usernameValues = new HashSet<String>();\n+        usernameValues.add(\"chicchiricco\");\n+        usernameValues.add(\"fabio.martelli\");\n+\n+        AttributeTO usernameAttribute = new AttributeTO();\n+        usernameAttribute.setName(\"username\");\n+        usernameAttribute.setValues(usernameValues);\n+\n+        Set<String> surnameValues = new HashSet<String>();\n+        surnameValues.add(\"Chicchiriccò\");\n+        surnameValues.add(\"Martelli\");\n+\n+        AttributeTO surnameAttribute = new AttributeTO();\n+        surnameAttribute.setName(\"surname\");\n+        surnameAttribute.setValues(surnameValues);\n+\n+        Set<AttributeTO> attributes = new HashSet<AttributeTO>();\n+        attributes.add(usernameAttribute);\n+        attributes.add(surnameAttribute);\n+\n+        UserTO userTO = new UserTO();\n+        userTO.setId(userId);\n+        userTO.setAttributes(attributes);\n+\n+        ModelAndView mav = new ModelAndView();\n+        mav.addObject(userTO);\n+        return mav;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/passwordReset/{userId}\")\n+    public ModelAndView getPasswordResetToken(\n+            @PathVariable(\"userId\") Long userId,\n+            @RequestParam(\"passwordResetFormURL\") String passwordResetFormURL,\n+            @RequestParam(\"gotoURL\") String gotoURL)\n+            throws IOException {\n+\n+        log.info(\"passwordReset (GET) called with parameters \"\n+                + userId + \", \" + passwordResetFormURL + \", \" + gotoURL);\n+\n+        String passwordResetToken = \"token\";\n+\n+        ModelAndView mav = new ModelAndView();\n+        mav.addObject(passwordResetToken);\n+        return mav;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.PUT, value = \"/passwordReset/{userId}\")\n+    public void passwordReset(\n+            @PathVariable(\"userId\") Long userId,\n+            @RequestParam(\"tokenId\") String tokenId,\n+            @RequestParam(\"newPassword\") String newPassword)\n+            throws IOException {\n+\n+        log.info(\"passwordReset (POST) called with parameters \"\n+                + userId + \", \" + tokenId + \", \" + newPassword);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n+    public List<UserTO> search(HttpServletResponse response,\n+            @RequestBody SearchParameters searchParameters) throws IOException {\n+\n+        log.info(\"search called with parameter \" + searchParameters);\n+\n+        List<UserTO> searchResult = new ArrayList<UserTO>();\n+\n+        return searchResult;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n+    public UserTO update(HttpServletResponse response,\n+            @RequestBody UserTO userTO) throws IOException {\n+\n+        log.info(\"update called with parameter \" + userTO);\n+\n+        return userTO;\n+    }\n+}"},{"sha":"72e4f8e124d0744642712bb5767442fe9013916a","filename":"rest/src/main/java/org/syncope/rest/jackson/UnwrappedObjectMapper.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fjackson%2FUnwrappedObjectMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fjackson%2FUnwrappedObjectMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fjackson%2FUnwrappedObjectMapper.java?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -0,0 +1,101 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.rest.jackson;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import java.util.Map;\n+import org.codehaus.jackson.JsonGenerationException;\n+import org.codehaus.jackson.JsonGenerator;\n+import org.codehaus.jackson.map.JsonMappingException;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.codehaus.jackson.map.SerializationConfig;\n+\n+/**\n+ * TODO: there should be a simpler way to achieve this!\n+ */\n+public class UnwrappedObjectMapper extends ObjectMapper {\n+\n+    /**\n+     * Unwraps the given value if it implements the Map interface and contains\n+     * only a single entry. Otherwise the value is returned unmodified.\n+     *\n+     * @param value\n+     *          the potential Map to unwrap\n+     * @return the unwrapped map or the original value\n+     */\n+    private Object unwrapMap(Object value) {\n+        if (value instanceof Map) {\n+            Map<?, ?> map = (Map<?, ?>) value;\n+            if (map.size() == 1) {\n+                return map.values().iterator().next();\n+            }\n+        }\n+\n+        return value;\n+    }\n+\n+    @Override\n+    public void writeValue(JsonGenerator jgen, Object value)\n+            throws IOException, JsonGenerationException, JsonMappingException {\n+\n+        super.writeValue(jgen, unwrapMap(value));\n+    }\n+\n+    @Override\n+    public void writeValue(JsonGenerator jgen, Object value,\n+            SerializationConfig config)\n+            throws IOException, JsonGenerationException, JsonMappingException {\n+\n+        super.writeValue(jgen, unwrapMap(value), config);\n+    }\n+\n+    @Override\n+    public void writeValue(File resultFile, Object value)\n+            throws IOException, JsonGenerationException, JsonMappingException {\n+\n+        super.writeValue(resultFile, unwrapMap(value));\n+    }\n+\n+    @Override\n+    public void writeValue(OutputStream out, Object value)\n+            throws IOException, JsonGenerationException, JsonMappingException {\n+\n+        super.writeValue(out, unwrapMap(value));\n+    }\n+\n+    @Override\n+    public void writeValue(Writer w, Object value)\n+            throws IOException, JsonGenerationException, JsonMappingException {\n+\n+        super.writeValue(w, unwrapMap(value));\n+    }\n+\n+    @Override\n+    public byte[] writeValueAsBytes(Object value)\n+            throws IOException, JsonGenerationException, JsonMappingException {\n+\n+        return super.writeValueAsBytes(unwrapMap(value));\n+    }\n+\n+    @Override\n+    public String writeValueAsString(Object value)\n+            throws IOException, JsonGenerationException, JsonMappingException {\n+\n+        return super.writeValueAsString(unwrapMap(value));\n+    }\n+}"},{"sha":"27f489f1135f338bb396df97b969909c0a87e884","filename":"rest/src/main/java/org/syncope/rest/to/AttributeTO.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FAttributeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FAttributeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FAttributeTO.java?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -0,0 +1,78 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.rest.to;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+public class AttributeTO implements Serializable {\n+\n+    private String name;\n+    private Set<String> values;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<String> getValues() {\n+        return values;\n+    }\n+\n+    public void setValues(Set<String> values) {\n+        this.values = values;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final AttributeTO other = (AttributeTO) obj;\n+        if ((this.name == null)\n+                ? (other.name != null) : !this.name.equals(other.name)) {\n+\n+            return false;\n+        }\n+        if (this.values != other.values\n+                && (this.values == null || !this.values.equals(other.values))) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 13 * hash + (this.name != null ? this.name.hashCode() : 0);\n+        hash = 13 * hash + (this.values != null ? this.values.hashCode() : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"name=\" + name + \",\"\n+                + \"values\" + values\n+                + \")\";\n+    }\n+}"},{"sha":"6d360a6028bafca2ce9cd5c75fa5e415105e7488","filename":"rest/src/main/java/org/syncope/rest/to/Comparator.java","status":"renamed","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FComparator.java?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -2,23 +2,19 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.rest.user.jaxb;\n+package org.syncope.rest.to;\n \n-import javax.xml.bind.annotation.XmlRootElement;\n+public enum Comparator {\n \n-/**\n- * TODO: implement\n- */\n-@XmlRootElement\n-public class SearchParameters {\n+    EQUAL, LIKE, NOT_EQUAL, NOT_LIKE\n }","previous_filename":"rest/src/main/java/org/syncope/rest/user/jaxb/SearchParameters.java"},{"sha":"be0bc2927412656c6a674a744573b14135215ff0","filename":"rest/src/main/java/org/syncope/rest/to/SearchCondition.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FSearchCondition.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FSearchCondition.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FSearchCondition.java?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -0,0 +1,46 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.rest.to;\n+\n+public class SearchCondition {\n+\n+    private String attributeName;\n+    private SearchCondition condition;\n+    private String referenceValue;\n+\n+    public String getAttributeName() {\n+        return attributeName;\n+    }\n+\n+    public void setAttributeName(String attributeName) {\n+        this.attributeName = attributeName;\n+    }\n+\n+    public SearchCondition getCondition() {\n+        return condition;\n+    }\n+\n+    public void setCondition(SearchCondition condition) {\n+        this.condition = condition;\n+    }\n+\n+    public String getReferenceValue() {\n+        return referenceValue;\n+    }\n+\n+    public void setReferenceValue(String referenceValue) {\n+        this.referenceValue = referenceValue;\n+    }\n+}"},{"sha":"27f30d247af4165c67fefbc395d0273abb92e747","filename":"rest/src/main/java/org/syncope/rest/to/SearchParameters.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FSearchParameters.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FSearchParameters.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FSearchParameters.java?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -0,0 +1,36 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.rest.to;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SearchParameters implements Serializable {\n+\n+    Set<SearchCondition> conditions = new HashSet<SearchCondition>();\n+\n+    public SearchParameters() {\n+       conditions = new HashSet<SearchCondition>();\n+    }\n+\n+    public Set<SearchCondition> getConditions() {\n+        return conditions;\n+    }\n+\n+    public void setConditions(Set<SearchCondition> conditions) {\n+        this.conditions = conditions;\n+    }\n+}"},{"sha":"307e7b091e44019beaf7514689c78371f4996203","filename":"rest/src/main/java/org/syncope/rest/to/UserTO.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fto%2FUserTO.java?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -0,0 +1,104 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.rest.to;\n+\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class UserTO implements Serializable {\n+\n+    private Long id;\n+    private Set<AttributeTO> attributes;\n+    private Set<AttributeTO> derivedAttributes;\n+\n+    public UserTO() {\n+        attributes = new HashSet<AttributeTO>();\n+        derivedAttributes = new HashSet<AttributeTO>();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long Id) {\n+        this.id = Id;\n+    }\n+\n+    public Set<AttributeTO> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public void setAttributes(Set<AttributeTO> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    public Set<AttributeTO> getDerivedAttributes() {\n+        return derivedAttributes;\n+    }\n+\n+    public void setDerivedAttributes(Set<AttributeTO> derivedAttributes) {\n+        this.derivedAttributes = derivedAttributes;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final UserTO other = (UserTO) obj;\n+        if (this.id != other.id\n+                && (this.id == null || !this.id.equals(other.id))) {\n+\n+            return false;\n+        }\n+        if (this.attributes != other.attributes\n+                && (this.attributes == null\n+                || !this.attributes.equals(other.attributes))) {\n+\n+            return false;\n+        }\n+        if (this.derivedAttributes != other.derivedAttributes\n+                && (this.derivedAttributes == null\n+                || !this.derivedAttributes.equals(other.derivedAttributes))) {\n+\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 5;\n+        hash = 23 * hash + (this.id != null ? this.id.hashCode() : 0);\n+        hash = 23 * hash + (this.attributes != null\n+                ? this.attributes.hashCode() : 0);\n+        hash = 23 * hash + (this.derivedAttributes != null\n+                ? this.derivedAttributes.hashCode() : 0);\n+        return hash;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\"\n+                + \"id=\" + id + \",\"\n+                + \"attributes=\" + attributes + \",\"\n+                + \"derivedAttributes=\" + derivedAttributes\n+                + \")\";\n+    }\n+}"},{"sha":"74c23380f1152b77703d5a13adf9bd03b0f20a19","filename":"rest/src/main/java/org/syncope/rest/user/Create.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FCreate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FCreate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FCreate.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,56 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user;\n-\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.PUT;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.MediaType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n-import org.syncope.rest.user.jaxb.Attributes;\n-\n-@Path(\"/user/create/{userId}\")\n-@Component\n-@Scope(\"request\")\n-public class Create {\n-\n-    private static final Logger log = LoggerFactory.getLogger(Create.class);\n-\n-    /**\n-     * TODO: call syncope-core\n-     */\n-    @PUT\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.TEXT_PLAIN)\n-    public String createUser(@PathParam(\"userId\") String userId,\n-            Attributes userAttributes,\n-            @DefaultValue(\"FALSE\") @QueryParam(\"test\") boolean test) {\n-\n-        if (test) {\n-            return userId;\n-        }\n-\n-        log.info(\"createUser() called with attributes \" + userAttributes);\n-\n-        return \"userId\";\n-    }\n-}"},{"sha":"0190269d70424999d096408022474b5b69118d60","filename":"rest/src/main/java/org/syncope/rest/user/Delete.java","status":"removed","additions":0,"deletions":58,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FDelete.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FDelete.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FDelete.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,58 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user;\n-\n-import javax.ws.rs.DELETE;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.MediaType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n-\n-@Path(\"/user/delete/{userId}\")\n-@Component\n-@Scope(\"request\")\n-public class Delete {\n-\n-    private static final Logger log = LoggerFactory.getLogger(Delete.class);\n-\n-    /**\n-     * TODO: call syncope-core\n-     */\n-    @DELETE\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public String deleteUser(@PathParam(\"userId\") String userId,\n-            @DefaultValue(\"FALSE\") @QueryParam(\"test\") boolean test) {\n-\n-        if (\"error\".equals(userId)) {\n-            throw new WebApplicationException(\n-                    new Exception(\"Wrong userId: \" + userId));\n-        }\n-\n-        if (test) {\n-            return Boolean.TRUE.toString();\n-        }\n-\n-        log.info(\"deleteUser() called for \" + userId);\n-\n-        return Boolean.TRUE.toString();\n-    }\n-}"},{"sha":"43d4ceae0bbe0325475d76915a3221428245a9f0","filename":"rest/src/main/java/org/syncope/rest/user/PasswordReset.java","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FPasswordReset.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,93 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user;\n-\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.MediaType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n-\n-@Path(\"/user/passwordReset/{userId}\")\n-@Component\n-@Scope(\"request\")\n-public class PasswordReset {\n-\n-    private static final Logger log = LoggerFactory.getLogger(PasswordReset.class);\n-\n-    public static String getTestValue() {\n-        return \"passwordResetTokenId\";\n-    }\n-\n-    /**\n-     * TODO: call syncope-core\n-     */\n-    @GET\n-    @Produces(MediaType.TEXT_PLAIN)\n-    public String getPasswordResetToken(@PathParam(\"userId\") String userId,\n-            @QueryParam(\"passwordResetFormURL\") String passwordResetFormURL,\n-            @QueryParam(\"passwordResetFormURL\") String gotoURL,\n-            @DefaultValue(\"FALSE\") @QueryParam(\"test\") boolean test) {\n-\n-        if (\"error\".equals(userId)) {\n-            log.warn(\"Entered in the error condition, going ahead...\");\n-\n-            throw new WebApplicationException(\n-                    new Exception(\"Wrong userId: \" + userId));\n-        }\n-\n-        if (test) {\n-            return getTestValue();\n-        }\n-\n-        log.info(\"getPasswordResetToken called: \" + passwordResetFormURL);\n-\n-        return \"passwordResetTokenId\";\n-    }\n-\n-    /**\n-     * TODO: call syncope-core\n-     */\n-    @POST\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public String passwordReset(@QueryParam(\"tokenId\") String tokenId,\n-            @PathParam(\"userId\") String userId,\n-            @QueryParam(\"newPassword\") String newPassword,\n-            @DefaultValue(\"FALSE\") @QueryParam(\"test\") boolean test) {\n-\n-        if (\"error\".equals(userId)) {\n-            log.warn(\"Entered in the error condition, going ahead...\");\n-\n-            throw new WebApplicationException(\n-                    new Exception(\"Wrong userId: \" + userId));\n-        }\n-\n-        if (test) {\n-            return Boolean.valueOf(tokenId.equals(getTestValue())).toString();\n-        }\n-\n-        log.info(\"passwordReset called: \" + tokenId + \" / \" + newPassword);\n-\n-        return Boolean.TRUE.toString();\n-    }\n-}"},{"sha":"e8554c92ab8f1f10eab98dfcb5f939eb97aea7f5","filename":"rest/src/main/java/org/syncope/rest/user/Read.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FRead.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,86 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user;\n-\n-import java.util.Collections;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.MediaType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n-import org.syncope.rest.user.jaxb.AttributeValues;\n-import org.syncope.rest.user.jaxb.Attributes;\n-\n-@Path(\"/user/read/{userId}\")\n-@Component\n-@Scope(\"request\")\n-public class Read {\n-\n-    private static final Logger log = LoggerFactory.getLogger(Read.class);\n-\n-    public static Attributes getTestValue(String userId) {\n-        Attributes attributes = new Attributes();\n-\n-        attributes.addUserAttribute(\"userId\",\n-                new AttributeValues(Collections.singleton(userId)));\n-\n-        return attributes;\n-    }\n-\n-    /**\n-     * TODO: read actual values for the corresponding userId via syncope-core\n-     */\n-    @GET\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public Attributes readUser(@PathParam(\"userId\") String userId,\n-            @DefaultValue(\"FALSE\") @QueryParam(\"test\") boolean test) {\n-\n-        if (\"error\".equals(userId)) {\n-            log.warn(\"Entered in the error condition, going ahead...\");\n-\n-            throw new WebApplicationException(\n-                    new Exception(\"Wrong userId: \" + userId));\n-        }\n-\n-        if (test) {\n-            return getTestValue(userId);\n-        }\n-\n-        log.info(\"readUser called\");\n-\n-        Attributes attributes = new Attributes();\n-\n-        attributes.addUserAttribute(\"userId\",\n-                new AttributeValues(Collections.singleton(userId)));\n-\n-        AttributeValues values1 = new AttributeValues(\"attribute1\");\n-        values1.addAttributeValue(\"value1.1\");\n-        values1.addAttributeValue(\"value1.2\");\n-        attributes.addUserAttribute(\"attribute1\", values1);\n-\n-        AttributeValues values2 = new AttributeValues(\"attribute2\");\n-        values2.addAttributeValue(\"value2.1\");\n-        attributes.addUserAttribute(\"attribute2\", values2);\n-\n-        return attributes;\n-    }\n-}"},{"sha":"87c4fae5a6e0c9288a2b561256dae7f3eae53ec6","filename":"rest/src/main/java/org/syncope/rest/user/Search.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FSearch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FSearch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FSearch.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,69 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user;\n-\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.core.MediaType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n-import org.syncope.rest.user.jaxb.SearchParameters;\n-import org.syncope.rest.user.jaxb.SearchResults;\n-\n-@Path(\"/user/search\")\n-@Component\n-@Scope(\"request\")\n-public class Search {\n-\n-    private static final Logger log = LoggerFactory.getLogger(Search.class);\n-\n-    public static SearchResults getTestValue() {\n-        SearchResults searchResults = new SearchResults();\n-        searchResults.addResult(\"user1\");\n-        searchResults.addResult(\"user2\");\n-        searchResults.addResult(\"user3\");\n-\n-        return searchResults;\n-    }\n-\n-    /**\n-     * TODO: call syncope-core\n-     */\n-    @POST\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public SearchResults searchUser(SearchParameters searchParameters,\n-            @DefaultValue(\"FALSE\") @QueryParam(\"test\") boolean test) {\n-\n-        log.info(\"searchUser() called with parameters \" + searchParameters);\n-\n-        if (test) {\n-            return getTestValue();\n-        }\n-\n-        SearchResults searchResults = new SearchResults();\n-        searchResults.addResult(\"user1\");\n-        searchResults.addResult(\"user2\");\n-        searchResults.addResult(\"user3\");\n-\n-        return searchResults;\n-    }\n-}"},{"sha":"636fcfa63584fcb53855363a099f3608c8e7aeee","filename":"rest/src/main/java/org/syncope/rest/user/Update.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2FUpdate.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,63 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user;\n-\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.QueryParam;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.MediaType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Component;\n-import org.syncope.rest.user.jaxb.Attributes;\n-\n-@Path(\"/user/update/{userId}\")\n-@Component\n-@Scope(\"request\")\n-public class Update {\n-\n-    private static final Logger log = LoggerFactory.getLogger(Update.class);\n-\n-    /**\n-     * TODO: call syncope-core\n-     */\n-    @POST\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public String updateUser(@PathParam(\"userId\") String userId,\n-            Attributes userAttributes,\n-            @DefaultValue(\"FALSE\") @QueryParam(\"test\") boolean test) {\n-\n-        if (\"error\".equals(userId)) {\n-            throw new WebApplicationException(\n-                    new Exception(\"Wrong userId: \" + userId));\n-        }\n-\n-        if (test) {\n-            return Boolean.TRUE.toString();\n-        }\n-\n-        log.info(\"searchUser() called with userId \" + userId\n-                + \" and attributes \" + userAttributes);\n-\n-        return Boolean.TRUE.toString();\n-    }\n-}"},{"sha":"dba166495f0fb4a66fcf04e0aeff10e625ccd1e9","filename":"rest/src/main/java/org/syncope/rest/user/config/JAXBContextResolver.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fconfig%2FJAXBContextResolver.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fconfig%2FJAXBContextResolver.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fconfig%2FJAXBContextResolver.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,48 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user.config;\n-\n-import com.sun.jersey.api.json.JSONConfiguration;\n-import com.sun.jersey.api.json.JSONJAXBContext;\n-import java.util.Arrays;\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.ws.rs.ext.ContextResolver;\n-import javax.ws.rs.ext.Provider;\n-import javax.xml.bind.JAXBContext;\n-import org.syncope.rest.user.jaxb.AttributeValues;\n-import org.syncope.rest.user.jaxb.Attributes;\n-import org.syncope.rest.user.jaxb.SearchParameters;\n-import org.syncope.rest.user.jaxb.SearchResults;\n-\n-@Provider\n-public final class JAXBContextResolver implements ContextResolver<JAXBContext> {\n-\n-    private final JAXBContext context;\n-    private final Set<Class> types;\n-    private final Class[] cTypes = {AttributeValues.class,\n-        Attributes.class, SearchParameters.class, SearchResults.class};\n-\n-    public JAXBContextResolver() throws Exception {\n-        this.types = new HashSet(Arrays.asList(cTypes));\n-        this.context = new JSONJAXBContext(\n-                JSONConfiguration.natural().build(), cTypes);\n-    }\n-\n-    public JAXBContext getContext(Class<?> objectType) {\n-        return (types.contains(objectType)) ? context : null;\n-    }\n-}\n-"},{"sha":"5feae253f3ab6dc2a68f203cb15fd6ecdfc0d8e3","filename":"rest/src/main/java/org/syncope/rest/user/jaxb/AttributeValues.java","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributeValues.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributeValues.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributeValues.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,74 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user.jaxb;\n-\n-import java.util.Collection;\n-import java.util.HashSet;\n-import java.util.Set;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlRootElement;\n-\n-@XmlRootElement(name = \"values\")\n-public class AttributeValues {\n-\n-    @XmlElement(name = \"value\")\n-    private Set<String> elements;\n-\n-    public AttributeValues() {\n-        elements = new HashSet<String>();\n-    }\n-\n-    public AttributeValues(String value) {\n-        this();\n-        elements.add(value);\n-    }\n-\n-    public AttributeValues(Collection<String> values) {\n-        this();\n-        elements.addAll(values);\n-    }\n-\n-    public void addAttributeValue(String value) {\n-        elements.add(value);\n-    }\n-\n-    public boolean removeAttributeValue(String value) {\n-        return elements.remove(value);\n-    }\n-\n-    public void setElements(Set<String> elements) {\n-        this.elements = elements;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return elements.toString();\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof AttributeValues)) {\n-            return false;\n-        }\n-\n-        AttributeValues other = (AttributeValues) obj;\n-        return elements.equals(other.elements);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return elements.hashCode();\n-    }\n-}"},{"sha":"77885c79f2ea32bf5f62fac7a43ccece6320386a","filename":"rest/src/main/java/org/syncope/rest/user/jaxb/AttributeXmlAdapter.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributeXmlAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributeXmlAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributeXmlAdapter.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,88 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user.jaxb;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import javax.xml.bind.annotation.XmlAttribute;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.adapters.XmlAdapter;\n-\n-class AttributeXmlAdapter extends XmlAdapter<Temp, Map<String, AttributeValues>> {\n-\n-    @Override\n-    public Map<String, AttributeValues> unmarshal(Temp v) throws Exception {\n-        Map<String, AttributeValues> result = new HashMap<String, AttributeValues>();\n-\n-        for (Item item : v.getEntry()) {\n-            result.put(item.getKey(), item.getValue());\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public Temp marshal(Map<String, AttributeValues> v) throws Exception {\n-        Temp result = new Temp();\n-\n-        for (String key : v.keySet()) {\n-            result.addItem(new Item(key, v.get(key)));\n-        }\n-\n-        return result;\n-    }\n-}\n-\n-class Temp {\n-\n-    @XmlElement(name = \"attribute\")\n-    private List<Item> entry = new ArrayList<Item>();\n-\n-    public List<Item> getEntry() {\n-        return entry;\n-    }\n-\n-    public void addItem(Item item) {\n-        entry.add(item);\n-    }\n-}\n-\n-class Item {\n-\n-    @XmlAttribute(name = \"name\")\n-    private String key;\n-    @XmlElement\n-    private AttributeValues values;\n-\n-    public Item() {\n-        key = new String();\n-        values = new AttributeValues();\n-    }\n-\n-    public Item(String key, AttributeValues value) {\n-        this.key = key;\n-        this.values = value;\n-    }\n-\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    public AttributeValues getValue() {\n-        return values;\n-    }\n-}"},{"sha":"33365aa447640a8f714a5d05b40d2dfd0fa4bb0c","filename":"rest/src/main/java/org/syncope/rest/user/jaxb/Attributes.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributes.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributes.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FAttributes.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,69 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user.jaxb;\n-\n-import java.util.HashMap;\n-import java.util.Set;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n-\n-@XmlRootElement(name = \"userAttributes\")\n-public class Attributes {\n-\n-    @XmlJavaTypeAdapter(AttributeXmlAdapter.class)\n-    @XmlElement(name = \"attributes\")\n-    private HashMap<String, AttributeValues> elements;\n-\n-    public Attributes() {\n-        elements = new HashMap<String, AttributeValues>();\n-    }\n-\n-    public void addUserAttribute(String name, String value) {\n-        elements.put(name, new AttributeValues(value));\n-    }\n-\n-    public void addUserAttribute(String name, Set<String> values) {\n-        elements.put(name, new AttributeValues(values));\n-    }\n-\n-    public void addUserAttribute(String name, AttributeValues values) {\n-        elements.put(name, values);\n-    }\n-\n-    public AttributeValues getAttributeValues(String name) {\n-        return elements.get(name);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return elements.toString();\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof Attributes)) {\n-            return false;\n-        }\n-\n-        Attributes other = (Attributes) obj;\n-        return elements.equals(other.elements);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return elements.hashCode();\n-    }\n-}"},{"sha":"acdd9013403f9d240e29310186fe3496531e0afc","filename":"rest/src/main/java/org/syncope/rest/user/jaxb/SearchResults.java","status":"removed","additions":0,"deletions":59,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FSearchResults.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FSearchResults.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Frest%2Fuser%2Fjaxb%2FSearchResults.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,59 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.user.jaxb;\n-\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Set;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlRootElement;\n-\n-/**\n- * TODO: implement\n- */\n-@XmlRootElement\n-public class SearchResults implements Iterable<String> {\n-\n-    @XmlElement(name = \"result\")\n-    private Set<String> elements;\n-\n-    public SearchResults() {\n-        elements = new HashSet<String>();\n-    }\n-\n-    public void addResult(String result) {\n-        elements.add(result);\n-    }\n-\n-    @Override\n-    public Iterator<String> iterator() {\n-        return elements.iterator();\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (!(obj instanceof SearchResults)) {\n-            return false;\n-        }\n-\n-        SearchResults other = (SearchResults) obj;\n-        return elements.equals(other.elements);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return elements.hashCode();\n-    }\n-}"},{"sha":"3973991958c7ae7ba3fde77f0dc87a322d57ff1b","filename":"rest/src/main/resources/applicationContext.xml","status":"modified","additions":72,"deletions":4,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -1,11 +1,79 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:p=\"http://www.springframework.org/schema/p\"\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xsi:schemaLocation=\"\n-       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n-       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n+       xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n+       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+       http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://www.springframework.org/schema/context\n+       http://www.springframework.org/schema/context/spring-context.xsd\n+       http://www.springframework.org/schema/oxm\n+       http://www.springframework.org/schema/oxm/spring-oxm.xsd\n+       http://www.springframework.org/schema/tx\n+       http://www.springframework.org/schema/tx/spring-tx.xsd\">\n \n-    <context:component-scan base-package=\"org.syncope.rest\"/>\n+    <tx:annotation-driven/>\n+\n+    <context:component-scan base-package=\"org.syncope.rest.controller\"/>\n+\n+    <bean id=\"jacksonObjectMapper\" class=\"org.syncope.rest.jackson.UnwrappedObjectMapper\"/>\n+    \n+    <bean id=\"mappingJacksonHttpMessageConverter\"\n+          class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n+        <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n+    </bean>\n+\n+    <bean class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\"/>\n+    <bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n+        <property name=\"messageConverters\">\n+            <list>\n+                <ref bean=\"mappingJacksonHttpMessageConverter\"/>\n+            </list>\n+        </property>\n+    </bean>\n+\n+    <bean id=\"jsonMediaType\" class=\"org.springframework.http.MediaType\">\n+        <constructor-arg value=\"application\"/>\n+        <constructor-arg value=\"json\"/>\n+    </bean>\n+\n+    <bean class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">\n+        <property name=\"mediaTypes\">\n+            <map>\n+                <entry key=\"json\" value=\"application/json\"/>\n+                <entry key=\"xml\" value=\"application/xml\"/>\n+            </map>\n+        </property>\n+        <property name=\"defaultViews\">\n+            <list>\n+                <bean class=\"org.springframework.web.servlet.view.json.MappingJacksonJsonView\">\n+                    <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n+                </bean>\n+                <bean class=\"org.springframework.web.servlet.view.xml.MarshallingView\">\n+                    <constructor-arg>\n+                        <bean class=\"org.springframework.oxm.xstream.XStreamMarshaller\"\n+                              p:autodetectAnnotations=\"false\" p:encoding=\"UTF-8\">\n+                            <property name=\"aliases\">\n+                                <props>\n+                                    <prop key=\"user\">org.syncope.rest.to.UserTO</prop>\n+                                    <prop key=\"attribute\">org.syncope.rest.to.AttributeTO</prop>\n+                                    <prop key=\"searchParameters\">org.syncope.rest.to.SearchParameters</prop>\n+                                </props>\n+                            </property>\n+                        </bean>\n+                    </constructor-arg>\n+                </bean>\n+\n+            </list>\n+        </property>\n+        <property name=\"defaultContentType\" ref=\"jsonMediaType\"/>\n+        <property name=\"ignoreAcceptHeader\" value=\"false\"/>\n+    </bean>\n+\n+    <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n+        <property name=\"messageConverters\" ref=\"mappingJacksonHttpMessageConverter\"/>\n+    </bean>\n \n </beans>\n\\ No newline at end of file"},{"sha":"72bbde387fe4681014fc17d94aefbf29ec186f3e","filename":"rest/src/main/webapp/WEB-INF/sun-web.xml","status":"added","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsun-web.xml?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE sun-web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Application Server 9.0 Servlet 2.5//EN\" \"http://www.sun.com/software/appserver/dtds/sun-web-app_2_5-0.dtd\">\n+<sun-web-app error-url=\"\">\n+  <context-root>/syncope-rest</context-root>\n+  <class-loader delegate=\"false\"/>\n+  <jsp-config>\n+    <property name=\"keepgenerated\" value=\"true\">\n+      <description>Keep a copy of the generated servlet class' java code.</description>\n+    </property>\n+  </jsp-config>\n+</sun-web-app>"},{"sha":"f8ff97e8ee550f80a23d805bc5a3dbdf53b4da17","filename":"rest/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":39,"deletions":27,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -1,36 +1,48 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-  Licensed under the Apache License, Version 2.0 (the \"License\");\n-  you may not use this file except in compliance with the License.\n-  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing, software\n-  distributed under the License is distributed on an \"AS IS\" BASIS,\n-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-  See the License for the specific language governing permissions and\n-  limitations under the License.\n--->\n-<web-app version=\"2.5\" xmlns=\"http://java.sun.com/xml/ns/javaee\"\n+<web-app id=\"WebApp_ID\" version=\"2.4\"\n+         xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\n+         xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\">\n+\n+    <display-name>Syncope REST</display-name>\n+\n     <context-param>\n-        <param-name>contextConfigLocation</param-name>\n-        <param-value>classpath:applicationContext.xml</param-value>\n+        <param-name>log4jConfigLocation</param-name>\n+        <param-value>/WEB-INF/classes/log4j.xml</param-value>\n     </context-param>\n-    <listener>\n-        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n-    </listener>\n-    <listener>\n-        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>\n-    </listener>\n+\n     <servlet>\n-        <servlet-name>Syncope RESTful interface</servlet-name>\n-        <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>\n+        <servlet-name>syncope-rest</servlet-name>\n+        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n+        <init-param>\n+            <param-name>contextConfigLocation</param-name>\n+            <param-value>/WEB-INF/classes/applicationContext.xml</param-value>\n+        </init-param>\n+\n+        <load-on-startup>1</load-on-startup>\n     </servlet>\n+\n     <servlet-mapping>\n-        <servlet-name>Syncope RESTful interface</servlet-name>\n+        <servlet-name>syncope-rest</servlet-name>\n         <url-pattern>/*</url-pattern>\n     </servlet-mapping>\n-</web-app>\n\\ No newline at end of file\n+\n+    <filter>\n+        <filter-name>encodingFilter</filter-name>\n+        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n+        <init-param>\n+            <param-name>encoding</param-name>\n+            <param-value>UTF-8</param-value>\n+        </init-param>\n+        <init-param>\n+            <param-name>forceEncoding</param-name>\n+            <param-value>true</param-value>\n+        </init-param>\n+    </filter>\n+\n+    <filter-mapping>\n+        <filter-name>encodingFilter</filter-name>\n+        <url-pattern>/*</url-pattern>\n+    </filter-mapping>\n+\n+</web-app>"},{"sha":"93bdbad48a5848168e52a4b8dd1155b735b0ca82","filename":"rest/src/test/java/org/syncope/rest/test/RestUserTestITCase.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Frest%2Ftest%2FRestUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3fcbd827d6640dd515fc1bfea817f781236bd309/rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Frest%2Ftest%2FRestUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Frest%2Ftest%2FRestUserTestITCase.java?ref=3fcbd827d6640dd515fc1bfea817f781236bd309","patch":"@@ -0,0 +1,124 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.rest.test;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.springframework.web.client.RestTemplate;\n+import org.syncope.rest.to.AttributeTO;\n+import org.syncope.rest.to.SearchParameters;\n+import org.syncope.rest.to.UserTO;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\"classpath:applicationContext.xml\"})\n+public class RestUserTestITCase {\n+\n+    private static final Logger log = LoggerFactory.getLogger(RestUserTestITCase.class);\n+    private static final String BASE_URL = \"http://localhost:8080/syncope-rest/user/\";\n+    @Autowired\n+    private RestTemplate restTemplate;\n+\n+    @Test\n+    public void create() {\n+        AttributeTO attribute = new AttributeTO();\n+        attribute.setName(\"attr1\");\n+        attribute.setValues(Collections.singleton(\"value1\"));\n+\n+        UserTO newUserTO = new UserTO();\n+        newUserTO.setId(0L);\n+        newUserTO.setAttributes(Collections.singleton(attribute));\n+\n+        UserTO userTO = restTemplate.postForObject(BASE_URL + \"create\",\n+                newUserTO, UserTO.class);\n+\n+        assertEquals(newUserTO, userTO);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        try {\n+            restTemplate.delete(BASE_URL + \"delete/{userId}\", \"0\");\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        UserTO userTO = restTemplate.getForObject(BASE_URL + \"read/{userId}.json\",\n+                UserTO.class, \"0\");\n+\n+        assertNotNull(userTO);\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(userTO.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void passwordReset() {\n+        String tokenId = restTemplate.getForObject(BASE_URL\n+                + \"passwordReset/{userId}.json\"\n+                + \"?passwordResetFormURL={passwordResetFormURL}\"\n+                + \"&gotoURL={gotoURL}\",\n+                String.class, \"0\",\n+                \"http://www.google.it/passwordResetForm\",\n+                \"http://www.google.it/gotoURL\");\n+\n+        assertNotNull(tokenId);\n+\n+        restTemplate.put(BASE_URL + \"passwordReset/{userId}.json\"\n+                + \"?tokenId={tokenId}&newPassword={newPassword}\",\n+                null, \"0\", tokenId, \"newPassword\");\n+    }\n+\n+    @Test\n+    public void search() {\n+        SearchParameters searchParameters = new SearchParameters();\n+\n+        List<UserTO> matchedUsers = restTemplate.postForObject(\n+                BASE_URL + \"search\",\n+                searchParameters, List.class);\n+\n+        assertNotNull(matchedUsers);\n+    }\n+\n+    @Test\n+    public void update() {\n+        AttributeTO attribute = new AttributeTO();\n+        attribute.setName(\"attr1\");\n+        attribute.setValues(Collections.singleton(\"value1\"));\n+\n+        UserTO newUserTO = new UserTO();\n+        newUserTO.setId(0L);\n+        newUserTO.setAttributes(Collections.singleton(attribute));\n+\n+        UserTO userTO = restTemplate.postForObject(BASE_URL + \"update\",\n+                newUserTO, UserTO.class);\n+\n+        assertEquals(newUserTO, userTO);\n+    }\n+}"},{"sha":"2f95a2f7987d6802d12eb4affaded3481fd1f6e2","filename":"rest/src/test/java/org/syncope/rest/test/user/ConnectionTestITCase.java","status":"removed","additions":0,"deletions":157,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Frest%2Ftest%2Fuser%2FConnectionTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9762d53520390f3a4be3655f4e2d25ef273ee126/rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Frest%2Ftest%2Fuser%2FConnectionTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/rest%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Frest%2Ftest%2Fuser%2FConnectionTestITCase.java?ref=9762d53520390f3a4be3655f4e2d25ef273ee126","patch":"@@ -1,157 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- * \n- *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.rest.test.user;\n-\n-import static org.junit.Assert.*;\n-import com.sun.jersey.api.client.Client;\n-import com.sun.jersey.api.client.WebResource;\n-import com.sun.jersey.core.util.MultivaluedMapImpl;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.util.Collections;\n-import java.util.Properties;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.MultivaluedMap;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.syncope.rest.user.PasswordReset;\n-import org.syncope.rest.user.Read;\n-import org.syncope.rest.user.Search;\n-import org.syncope.rest.user.jaxb.Attributes;\n-import org.syncope.rest.user.jaxb.SearchParameters;\n-import org.syncope.rest.user.jaxb.SearchResults;\n-\n-public class ConnectionTestITCase {\n-\n-    private static final Logger log = LoggerFactory.getLogger(ConnectionTestITCase.class);\n-    final private static String userId = \"test\";\n-    private static String BASE_URL;\n-    private static Client jerseyClient;\n-\n-    static {\n-        URL fromMavenPropertiesURL =\n-                ConnectionTestITCase.class.getClassLoader().getResource(\"from_maven.properties\");\n-        Properties fromMavenProperties = new Properties();\n-        try {\n-            fromMavenProperties.load(fromMavenPropertiesURL.openStream());\n-        } catch (IOException e) {\n-            log.error(\"When reading properties file\", e);\n-        }\n-\n-        String jettyPort = fromMavenProperties.getProperty(\"jetty.port\", \"8080\");\n-        BASE_URL = \"http://localhost:\" + jettyPort + \"/syncope-rest/user/\";\n-    }\n-\n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        jerseyClient = Client.create();\n-    }\n-\n-    @AfterClass\n-    public static void tearDown() {\n-        jerseyClient.destroy();\n-    }\n-\n-    @Test\n-    public void create() {\n-        WebResource webResource = jerseyClient.resource(\n-                BASE_URL + \"create/\" + userId + \"?test=TRUE\");\n-\n-        Attributes userAttributes = new Attributes();\n-        userAttributes.addUserAttribute(\"userId\", Collections.singleton(userId));\n-\n-        String result = webResource.type(MediaType.APPLICATION_JSON).put(\n-                String.class, userAttributes);\n-\n-        assertEquals(userId, result);\n-    }\n-\n-    @Test\n-    public void delete() {\n-        WebResource webResource = jerseyClient.resource(\n-                BASE_URL + \"delete/\" + userId + \"?test=TRUE\");\n-\n-        String result = webResource.delete(String.class);\n-\n-        assertTrue(Boolean.valueOf(result));\n-    }\n-\n-    @Test\n-    public void passwordReset() {\n-        WebResource webResource = jerseyClient.resource(\n-                BASE_URL + \"passwordReset/\" + userId\n-                + \"?passwordResetFormURL=http%3A%2F%2Fcode.google.com\"\n-                + \"%2Fp%2Fsyncope%2F&gotoURL=http%3A%2F%2Fwww.google.com&test=TRUE\");\n-\n-        String reference1 = PasswordReset.getTestValue();\n-        String result1 = webResource.get(String.class);\n-\n-        assertEquals(reference1, result1);\n-\n-        MultivaluedMap formData = new MultivaluedMapImpl();\n-        formData.add(\"tokenId\", result1);\n-        formData.add(\"newPassword\", \"newPassword\");\n-        formData.add(\"test\", \"TRUE\");\n-\n-        webResource = jerseyClient.resource(\n-                BASE_URL + \"passwordReset/\" + userId);\n-\n-        String result2 = webResource.type(\n-                MediaType.APPLICATION_FORM_URLENCODED).post(\n-                String.class, formData);\n-\n-        assertTrue(Boolean.valueOf(result2));\n-    }\n-\n-    @Test\n-    public void read() {\n-        WebResource webResource = jerseyClient.resource(\n-                BASE_URL + \"read/\" + userId + \"?test=TRUE\");\n-\n-        Attributes reference = Read.getTestValue(userId);\n-        Attributes result = webResource.get(Attributes.class);\n-\n-        assertEquals(reference, result);\n-    }\n-\n-    @Test\n-    public void search() {\n-        WebResource webResource = jerseyClient.resource(\n-                BASE_URL + \"search/?test=TRUE\");\n-\n-        SearchResults reference = Search.getTestValue();\n-        SearchResults result = webResource.type(MediaType.APPLICATION_JSON).post(\n-                SearchResults.class, new SearchParameters());\n-\n-        assertEquals(reference, result);\n-    }\n-\n-    @Test\n-    public void update() {\n-        WebResource webResource = jerseyClient.resource(\n-                BASE_URL + \"update/\" + userId + \"?test=TRUE\");\n-\n-        Attributes userAttributes = new Attributes();\n-        userAttributes.addUserAttribute(\"userId\", Collections.singleton(userId));\n-\n-        String result = webResource.type(MediaType.APPLICATION_JSON).post(\n-                String.class, userAttributes);\n-\n-        assertTrue(Boolean.valueOf(result));\n-    }\n-}"}]}