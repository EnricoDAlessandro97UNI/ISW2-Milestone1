{"sha":"d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ2OTYxNmNlYjVmY2ZlNTU5N2ZlZWY2Yzk0Yzg0YjRhNWQyYjY2ODk=","commit":{"author":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-24T12:07:22Z"},"committer":{"name":"Andrei Shakirin","email":"ashakirin@apache.org","date":"2013-01-24T12:07:22Z"},"message":"[SYNCOPE-289] Prepared client configuration and abstract test class\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1437970 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ca9697222f05aeecfe8ca4535f0f5c706867acbc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ca9697222f05aeecfe8ca4535f0f5c706867acbc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/comments","author":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"committer":{"login":"ashakirin-apache","id":77056600,"node_id":"MDQ6VXNlcjc3MDU2NjAw","avatar_url":"https://avatars.githubusercontent.com/u/77056600?v=4","gravatar_id":"","url":"https://api.github.com/users/ashakirin-apache","html_url":"https://github.com/ashakirin-apache","followers_url":"https://api.github.com/users/ashakirin-apache/followers","following_url":"https://api.github.com/users/ashakirin-apache/following{/other_user}","gists_url":"https://api.github.com/users/ashakirin-apache/gists{/gist_id}","starred_url":"https://api.github.com/users/ashakirin-apache/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashakirin-apache/subscriptions","organizations_url":"https://api.github.com/users/ashakirin-apache/orgs","repos_url":"https://api.github.com/users/ashakirin-apache/repos","events_url":"https://api.github.com/users/ashakirin-apache/events{/privacy}","received_events_url":"https://api.github.com/users/ashakirin-apache/received_events","type":"User","site_admin":false},"parents":[{"sha":"750dbdf92ee7958eb7f5029b0d7675121fcc7df1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/750dbdf92ee7958eb7f5029b0d7675121fcc7df1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/750dbdf92ee7958eb7f5029b0d7675121fcc7df1"}],"stats":{"total":361,"additions":264,"deletions":97},"files":[{"sha":"d57ae57ee73aac5a9ae69e5e124d8e30ad09f194","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -186,7 +186,10 @@ private Response processNotFoundExceptions(Exception ex) {\n         Response response = null;\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.NOT_FOUND);\r\n \r\n-        if (ex instanceof NotFoundException) {\r\n+        if (ex instanceof javax.ws.rs.NotFoundException) {\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, ex, null);\r\n+\r\n+        } else if (ex instanceof NotFoundException) {\r\n             response = buildResponse(responseBuilder, SyncopeClientExceptionType.NotFound, ex, null);\r\n \r\n         } else if (ex instanceof MissingConfKeyException) {\r\n@@ -201,7 +204,10 @@ private Response processBadRequestExceptions(Exception ex) {\n         Response response = null;\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.BAD_REQUEST);\r\n \r\n-        if (ex instanceof InvalidEntityException) {\r\n+        if (ex instanceof javax.ws.rs.BadRequestException) {\r\n+            response = buildResponse(responseBuilder, SyncopeClientExceptionType.Unknown, ex, null);\r\n+        \r\n+        } else if (ex instanceof InvalidEntityException) {\r\n             SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\"Invalid\"\r\n                     + ((InvalidEntityException) ex).getEntityClassSimpleName());\r\n \r"},{"sha":"46fb4179b7a36120a2c5965a1350eb5bdf442518","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":129,"deletions":21,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -21,10 +21,16 @@\n import static org.junit.Assert.assertNotNull;\n \n import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.UUID;\n \n import javax.sql.DataSource;\n+import javax.ws.rs.core.MediaType;\n \n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n+import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n@@ -48,6 +54,7 @@\n import org.apache.syncope.common.services.EntitlementService;\n import org.apache.syncope.common.services.LoggerService;\n import org.apache.syncope.common.services.NotificationService;\n+import org.apache.syncope.common.services.PolicyService;\n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.services.RoleService;\n@@ -59,14 +66,16 @@\n import org.apache.syncope.common.to.AttributeTO;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.test.context.TestContextManager;\n import org.springframework.web.client.RestTemplate;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n+@RunWith(Parameterized.class)\n @ContextConfiguration(locations = {\"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\"})\n public abstract class AbstractTest {\n \n@@ -81,9 +90,18 @@ public abstract class AbstractTest {\n \n     protected static final String ADMIN_PWD = \"password\";\n \n+    protected boolean activatedCXF;\n+    \n     @Autowired\n     private RestTemplate restTemplate;\n \n+    protected String contentType;\n+    \n+    private TestContextManager testContextManager;\n+    \n+    @Autowired\n+    protected JAXRSClientFactoryBean restClientFactory;\n+\n     @Autowired\n     protected DataSource testDataSource;\n \n@@ -113,26 +131,28 @@ public abstract class AbstractTest {\n \n     protected UserRequestService userRequestService;\n \n-    protected PolicyServiceProxy policyService;\n-\n-    protected static String getUUIDString() {\n-        return UUID.randomUUID().toString().substring(0, 8);\n+    protected PolicyService policyService;\n+    \n+    private void setupContext() throws Exception {\n+        this.testContextManager = new TestContextManager(getClass());\n+        this.testContextManager.prepareTestInstance(this);\n     }\n \n-    protected static AttributeTO attributeTO(final String schema, final String value) {\n-        AttributeTO attr = new AttributeTO();\n-        attr.setSchema(schema);\n-        attr.addValue(value);\n-        return attr;\n+    protected void activateCXF() {\n+        activatedCXF = true;\n     }\n-\n-    protected static AttributeMod attributeMod(final String schema, final String valueToBeAdded) {\n-        AttributeMod attr = new AttributeMod();\n-        attr.setSchema(schema);\n-        attr.addValueToBeAdded(valueToBeAdded);\n-        return attr;\n+    \n+    @Before\n+    public void setup() throws Exception {\n+        setupContext();\n+        if (!activatedCXF) {\n+            resetRestTemplate(); \n+        } else {\n+            setupCXFServices();\n+        }\n     }\n-\n+    \n+    // BEGIN Spring MVC Initialization\n     protected void setupRestTemplate(final String uid, final String pwd) {\n         PreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n                 .getRequestFactory());\n@@ -145,8 +165,7 @@ protected RestTemplate anonymousRestTemplate() {\n         return new RestTemplate();\n     }\n \n-    @Before\n-    public void resetRestTemplate() {\n+    protected void resetRestTemplate() {\n         setupRestTemplate(ADMIN_UID, ADMIN_PWD);\n         userService = new UserServiceProxy(BASE_URL, restTemplate);\n         roleService = new RoleServiceProxy(BASE_URL, restTemplate);\n@@ -163,9 +182,98 @@ public void resetRestTemplate() {\n         schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n         userRequestService = new UserRequestServiceProxy(BASE_URL, restTemplate);\n     }\n+    // END Spring MVC Initialization\n+\n+    // BEGIN CXF Initialization\n+    public void setupCXFServices() throws Exception { \n+        setupContext();\n+        restClientFactory.setUsername(ADMIN_UID);\n+        userService = createServiceInstance(UserService.class);\n+        roleService = createServiceInstance(RoleService.class);\n+        resourceService = createServiceInstance(ResourceService.class);\n+        entitlementService = createServiceInstance(EntitlementService.class);\n+        configurationService = createServiceInstance(ConfigurationService.class);\n+        connectorService = createServiceInstance(ConnectorService.class);\n+        loggerService = createServiceInstance(LoggerService.class);\n+        reportService = createServiceInstance(ReportService.class);\n+        taskService = createServiceInstance(TaskService.class);\n+        policyService = createServiceInstance(PolicyService.class);\n+        workflowService = createServiceInstance(WorkflowService.class);\n+        notificationService = createServiceInstance(NotificationService.class);\n+        schemaService = createServiceInstance(SchemaService.class);\n+        userRequestService = createServiceInstance(UserRequestService.class);\n+    }\n+\n+    public void setupConentType(Client restClient) {\n+        restClient.type(contentType).accept(contentType);\n+    }\n+\n+    protected <T> T createServiceInstance(Class<T> serviceClass) {\n+        return createServiceInstance(serviceClass, ADMIN_UID);\n+    }\n+    \n+    protected <T> T createServiceInstance(Class<T> serviceClass, String username) {\n+        return createServiceInstance(serviceClass, username, null);\n+    }\n+\n+    protected <T> T createServiceInstance(Class<T> serviceClass, String username, String password) {\n+        restClientFactory.setUsername(username);\n+        restClientFactory.setPassword(password);\n+        restClientFactory.setServiceClass(serviceClass);\n+        T serviceProxy = restClientFactory.create(serviceClass);\n+        setupConentType(WebClient.client(serviceProxy));\n+        return serviceProxy;\n+    }\n+\n+    public WebClient createWebClient(String path) {\n+        WebClient wc = restClientFactory.createWebClient().to(BASE_URL, false);\n+        wc.accept(MediaType.APPLICATION_JSON_TYPE).type(MediaType.APPLICATION_JSON_TYPE);\n+        wc.path(path);\n+        return wc;\n+    }\n+    // END CXF Initialization\n+\n+    public <T> T getObject(final URI location, final Class<T> type, final Object serviceProxy) {\n+        if (!activatedCXF) {\n+            return getObjectSpring(location, type);\n+        } else {\n+            return resolveObjectCXF(location, type, serviceProxy);\n+        }\n+    }\n \n-    public <T> T getObject(final URI location, final Class<T> type) {\n+    public <T> T getObjectSpring(final URI location, final Class<T> type) {\n         assertNotNull(location);\n         return restTemplate.getForEntity(location, type).getBody();\n     }\n+    \n+    public static <T> T resolveObjectCXF(final URI location, final Class<T> type, final Object serviceProxy) {\n+        WebClient webClient = WebClient.fromClient(WebClient.client(serviceProxy));\n+        webClient.to(location.toString(), false);\n+\n+        return webClient.get(type);\n+    }\n+\n+    protected static String getUUIDString() {\n+        return UUID.randomUUID().toString().substring(0, 8);\n+    }\n+\n+    protected static AttributeTO attributeTO(final String schema, final String value) {\n+        AttributeTO attr = new AttributeTO();\n+        attr.setSchema(schema);\n+        attr.addValue(value);\n+        return attr;\n+    }\n+\n+    protected static AttributeMod attributeMod(final String schema, final String valueToBeAdded) {\n+        AttributeMod attr = new AttributeMod();\n+        attr.setSchema(schema);\n+        attr.addValueToBeAdded(valueToBeAdded);\n+        return attr;\n+    }\n+\n+    @Parameters\n+    public static Collection<Object[]> data() {\n+      Object[][] data = new Object[][]{};\n+      return Arrays.asList(data);\n+    }\n }"},{"sha":"faf8dfb59d09a8ce823a29afcc1f7fe62d8d8ae3","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.SchemaService;\n import org.apache.syncope.common.to.AttributeTO;\n-import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.to.EntitlementTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.RoleTO;\n@@ -88,7 +87,7 @@ public void testUserSchemaAuthorization() {\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(response);\n-        SchemaTO newSchemaTO = getObject(response.getLocation(), SchemaTO.class);\n+        SchemaTO newSchemaTO = getObject(response.getLocation(), SchemaTO.class, entitlementService);\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)"},{"sha":"8030eceadc5cfe2b04ca933d53970fafdd8ae2c8","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -20,15 +20,13 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n \n import java.io.UnsupportedEncodingException;\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n \n import org.apache.syncope.common.to.ConfigurationTO;\n-import org.apache.syncope.common.to.ConnInstanceTO;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -47,7 +45,7 @@ public void create() {\n         Response response = configurationService.create(configurationTO);\n         assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationTO.class);\n+        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationTO.class, configurationService);\n         assertEquals(configurationTO, newConfigurationTO);\n     }\n \n@@ -72,7 +70,7 @@ public void delete() throws UnsupportedEncodingException {\n         Response response = configurationService.create(tokenLengthTO);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n         assertNotNull(response);\n-        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationTO.class);\n+        ConfigurationTO newConfigurationTO = getObject(response.getLocation(), ConfigurationTO.class, configurationService);\n         assertEquals(tokenLengthTO, newConfigurationTO);\n     }\n "},{"sha":"94490f85d8a2f6d8960a645665d9d3e63a05e5a3","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -135,7 +135,7 @@ public void create() {\n \n         Response response = connectorService.create(connectorTO);\n         assertNotNull(response);\n-        ConnInstanceTO actual = getObject(response.getLocation(), ConnInstanceTO.class);\n+        ConnInstanceTO actual = getObject(response.getLocation(), ConnInstanceTO.class, connectorService);\n \n         assertNotNull(actual);\n \n@@ -271,7 +271,7 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         Response response = connectorService.create(connInstanceTO);\n         assertNotNull(response);\n-        connInstanceTO = getObject(response.getLocation(), ConnInstanceTO.class);\n+        connInstanceTO = getObject(response.getLocation(), ConnInstanceTO.class, connectorService);\n \n         assertNotNull(connInstanceTO);\n         assertTrue(connInstanceTO.getCapabilities().isEmpty());\n@@ -581,7 +581,7 @@ public void issueSYNCOPE112() {\n \n             Response response = connectorService.create(connectorTO);\n             assertNotNull(response);\n-            connectorTO = getObject(response.getLocation(), ConnInstanceTO.class);\n+            connectorTO = getObject(response.getLocation(), ConnInstanceTO.class, configurationService);\n             assertNotNull(connectorTO);\n             // ----------------------------------------\n "},{"sha":"f8a04d6deee6daa02b573eb996f56ced4cfb8bd5","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -65,7 +65,7 @@ public void create() {\n \n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.DERIVED, schema);\n         assertNotNull(response);\n-        DerivedSchemaTO actual = getObject(response.getLocation(), DerivedSchemaTO.class);\n+        DerivedSchemaTO actual = getObject(response.getLocation(), DerivedSchemaTO.class, schemaService);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.DERIVED, actual.getName());"},{"sha":"3c6e659f7e07d988724479dd7491062ffbd79755","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -29,7 +29,6 @@\n \n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.PolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n import org.apache.syncope.common.types.PolicyType;\n@@ -113,7 +112,7 @@ public void create() {\n \n         Response response = policyService.create(PolicyType.SYNC, policy);\n         assertNotNull(response);\n-        SyncPolicyTO policyTO = getObject(response.getLocation(), SyncPolicyTO.class);\n+        SyncPolicyTO policyTO = getObject(response.getLocation(), SyncPolicyTO.class, policyService);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n@@ -131,7 +130,7 @@ public void update() {\n         // create a new password policy using global password as a template\n         Response response = policyService.create(PolicyType.PASSWORD, policy);\n         assertNotNull(response);\n-        policy = getObject(response.getLocation(), PasswordPolicyTO.class);\n+        policy = getObject(response.getLocation(), PasswordPolicyTO.class, policyService);\n \n         // read new password policy\n         policy = policyService.read(PolicyType.PASSWORD, policy.getId());\n@@ -157,7 +156,7 @@ public void delete() {\n         SyncPolicyTO policy = buildSyncPolicyTO();\n         Response response = policyService.create(PolicyType.SYNC, policy);\n         assertNotNull(response);\n-        SyncPolicyTO policyTO = getObject(response.getLocation(), SyncPolicyTO.class);\n+        SyncPolicyTO policyTO = getObject(response.getLocation(), SyncPolicyTO.class, policyService);\n         assertNotNull(policyTO);\n \n         policyService.delete(PolicyType.SYNC, policyTO.getId());"},{"sha":"24a80f4f1cd6e65c26c1a83c2d00d49f220ad7f2","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -59,14 +59,14 @@ public void create() {\n         assertNotNull(response);\n         assertNotNull(response.getLocation());\n \n-        SchemaTO newSchemaTO = getObject(response.getLocation(), SchemaTO.class);\n+        SchemaTO newSchemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n         assertEquals(schemaTO, newSchemaTO);\n \n         response = schemaService.create(AttributableType.MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(response);\n         assertNotNull(response.getLocation());\n \n-        newSchemaTO = getObject(response.getLocation(), SchemaTO.class);\n+        newSchemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n@@ -194,7 +194,7 @@ public void issue258() {\n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(response);\n         assertNotNull(response.getLocation());\n-        schemaTO = getObject(response.getLocation(), SchemaTO.class);\n+        schemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue258@syncope.apache.org\");\n@@ -221,7 +221,7 @@ public void issue259() {\n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(response);\n         assertNotNull(response.getLocation());\n-        schemaTO = getObject(response.getLocation(), SchemaTO.class);\n+        schemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue259@syncope.apache.org\");\n@@ -248,7 +248,7 @@ public void issue260() {\n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(response);\n         assertNotNull(response.getLocation());\n-        schemaTO = getObject(response.getLocation(), SchemaTO.class);\n+        schemaTO = getObject(response.getLocation(), SchemaTO.class, schemaService);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"issue260@syncope.apache.org\");"},{"sha":"4813acd353a8a65150e6cd60696cdee5ecddf5fb","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -56,7 +56,7 @@ public void create() {\n         Response response = configurationService.create(configurationTO);\n         assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        configurationTO = getObject(response.getLocation(), ConfigurationTO.class);\n+        configurationTO = getObject(response.getLocation(), ConfigurationTO.class, configurationService);\n         assertNotNull(configurationTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfcreate@syncope.apache.org\");\n@@ -77,7 +77,7 @@ public void create() {\n         response = configurationService.create(configurationTO);\n         assertNotNull(response);\n         assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        configurationTO = getObject(response.getLocation(), ConfigurationTO.class);\n+        configurationTO = getObject(response.getLocation(), ConfigurationTO.class, configurationService);\n         assertNotNull(configurationTO);\n \n         // 4. as anonymous, request user create works"},{"sha":"7c6d479b0c37d36d5c039504f11e3915823b9dff","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -182,7 +182,7 @@ public void issue172() {\n             for (PasswordPolicyTO policyTO : policies) {\n                 Response response = policyService.create(PolicyType.GLOBAL_PASSWORD, policyTO);\n                 assertNotNull(response);\n-                PolicyTO cPolicyTO = getObject(response.getLocation(), PasswordPolicyTO.class);\n+                PolicyTO cPolicyTO = getObject(response.getLocation(), PasswordPolicyTO.class, policyService);\n                 assertNotNull(cPolicyTO);\n             }\n         }"},{"sha":"94902ed4aea3cd3b73a06b6602500195c41f563d","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -62,7 +62,7 @@ public void create() {\n         Response response = schemaService.create(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, schema);\n         assertNotNull(response);\n         assertNotNull(response.getLocation());\n-        VirtualSchemaTO actual = getObject(response.getLocation(), VirtualSchemaTO.class);\n+        VirtualSchemaTO actual = getObject(response.getLocation(), VirtualSchemaTO.class, schemaService);\n         assertNotNull(actual);\n \n         actual = schemaService.read(AttributableType.USER, SchemaService.SchemaType.VIRTUAL, actual.getName());"},{"sha":"233e5f7537a294eb7e5b3191ff023733e9c15ab8","filename":"core/src/test/resources/restClientContext.xml","status":"modified","additions":108,"deletions":51,"changes":159,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d69616ceb5fcfe5597feef6c94c84b4a5d2b6689/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml?ref=d69616ceb5fcfe5597feef6c94c84b4a5d2b6689","patch":"@@ -18,60 +18,117 @@ specific language governing permissions and limitations\n under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:jaxrs=\"http://cxf.apache.org/jaxrs\"\n+\txmlns:util=\"http://www.springframework.org/schema/util\"\n+\txmlns:cxf=\"http://cxf.apache.org/core\"\n+\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+        http://www.springframework.org/schema/beans/spring-beans.xsd\n+        http://cxf.apache.org/jaxrs\n+        http://cxf.apache.org/schemas/jaxrs.xsd\n+        http://cxf.apache.org/core \n+        http://cxf.apache.org/schemas/core.xsd\n+        http://www.springframework.org/schema/util \n+        http://www.springframework.org/schema/util/spring-util.xsd\">\n \n-  <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.PoolingClientConnectionManager\"/>\n+\t<bean id=\"httpClientConnManager\"\n+\t\tclass=\"org.apache.http.impl.conn.PoolingClientConnectionManager\" />\n \n-  <bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n-    <property name=\"parameterMap\">\n-      <map key-type=\"java.lang.String\">\n-        <entry>\n-          <key>\n-            <value>http.protocol.handle-authentication</value>\n-          </key>\n-          <value type=\"java.lang.Boolean\">\n-            false\n-          </value>\n-        </entry>\n-      </map>\n-    </property>\n-  </bean>\n+\t<bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n+\t\t<property name=\"parameterMap\">\n+\t\t\t<map key-type=\"java.lang.String\">\n+\t\t\t\t<entry>\n+\t\t\t\t\t<key>\n+\t\t\t\t\t\t<value>http.protocol.handle-authentication</value>\n+\t\t\t\t\t</key>\n+\t\t\t\t\t<value type=\"java.lang.Boolean\">\n+\t\t\t\t\t\tfalse\n+\t\t\t\t\t</value>\n+\t\t\t\t</entry>\n+\t\t\t</map>\n+\t\t</property>\n+\t</bean>\n \n-  <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n-    <constructor-arg value=\"localhost\"/>\n-    <constructor-arg value=\"9080\"/>\n-    <constructor-arg value=\"http\"/>\n-    <constructor-arg ref=\"httpClientConnManager\"/>\n-    <constructor-arg ref=\"httpClientParams\"/>\n-  </bean>\n+\t<bean id=\"httpClientFactory\"\n+\t\tclass=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n+\t\t<constructor-arg value=\"localhost\" />\n+\t\t<constructor-arg value=\"9080\" />\n+\t\t<constructor-arg value=\"http\" />\n+\t\t<constructor-arg ref=\"httpClientConnManager\" />\n+\t\t<constructor-arg ref=\"httpClientParams\" />\n+\t</bean>\n \n-  <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n-    <constructor-arg ref=\"httpClientFactory\"/>\n-    <property name=\"messageConverters\">\n-      <list>\n-        <ref bean=\"mappingJacksonHttpMessageConverter\"/>\n-        <ref bean=\"mappingXstreamHttpMessageConverter\"/>\n-      </list>\n-    </property>\n-    <property name=\"errorHandler\">\n-      <bean id=\"syncopeClientErrorHandler\" class=\"org.apache.syncope.common.validation.SyncopeClientErrorHandler\"/>\n-    </property>\n-  </bean>\n-   \n-  <!-- JSON (via Jackson) -->\n-  <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\"/>\n-  <bean id=\"mappingJacksonHttpMessageConverter\" class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n-    <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n-  </bean>\n-   \n-  <!-- XML (via XStream) -->\n-  <bean id=\"xStreamXmlMarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n-    <property name=\"autodetectAnnotations\" value=\"true\"/>\n-  </bean>\n-  <bean id=\"mappingXstreamHttpMessageConverter\" class=\"org.springframework.http.converter.xml.MarshallingHttpMessageConverter\">\n-    <constructor-arg ref=\"xStreamXmlMarshaller\"/>\n-  </bean>\n+\t<bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n+\t\t<constructor-arg ref=\"httpClientFactory\" />\n+\t\t<property name=\"messageConverters\">\n+\t\t\t<list>\n+\t\t\t\t<ref bean=\"mappingJacksonHttpMessageConverter\" />\n+\t\t\t\t<ref bean=\"mappingXstreamHttpMessageConverter\" />\n+\t\t\t</list>\n+\t\t</property>\n+\t\t<property name=\"errorHandler\">\n+\t\t\t<bean id=\"syncopeClientErrorHandler\"\n+\t\t\t\tclass=\"org.apache.syncope.common.validation.SyncopeClientErrorHandler\" />\n+\t\t</property>\n+\t</bean>\n+\n+\t<!-- JSON (via Jackson) -->\n+\t<bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\" />\n+\t<bean id=\"mappingJacksonHttpMessageConverter\"\n+\t\tclass=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n+\t\t<property name=\"objectMapper\" ref=\"jacksonObjectMapper\" />\n+\t</bean>\n+\n+\t<!-- XML (via XStream) -->\n+\t<bean id=\"xStreamXmlMarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n+\t\t<property name=\"autodetectAnnotations\" value=\"true\" />\n+\t</bean>\n+\t<bean id=\"mappingXstreamHttpMessageConverter\"\n+\t\tclass=\"org.springframework.http.converter.xml.MarshallingHttpMessageConverter\">\n+\t\t<constructor-arg ref=\"xStreamXmlMarshaller\" />\n+\t</bean>\n+\n+\t<!-- CXF Configuration - BEGIN -->\n+\t<bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n+\t\t<property name=\"depthProperties\">\n+\t\t\t<bean id=\"depthProperties\" class=\"org.apache.cxf.staxutils.DocumentDepthProperties\">\n+\t\t\t\t<property name=\"innerElementCountThreshold\" value=\"500\" />\n+\t\t\t</bean>\n+\t\t</property>\n+\t\t<property name=\"marshallerProperties\">\n+\t\t\t<map>\n+\t\t\t\t<entry key=\"jaxb.formatted.output\">\n+\t\t\t\t\t<value type=\"java.lang.Boolean\">true</value>\n+\t\t\t\t</entry>\n+\t\t\t</map>\n+\t\t</property>\n+\t</bean>\n+\n+\t<bean id=\"jsonProvider\" class=\"org.codehaus.jackson.jaxrs.JacksonJaxbJsonProvider\">\n+\t\t<property name=\"mapper\" ref=\"jacksonObjectMapper\" />\n+\t</bean>\n+\n+   <bean id=\"exceptionMapper\" class=\"org.apache.syncope.client.rest.utils.RestClientExceptionMapper\" />\n+\n+   <bean id=\"restClientFactory\" class=\"org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean\">\n+      <property name=\"address\" value=\"http://localhost:9080/syncope/cxf\" />\n+      <property name=\"threadSafe\" value=\"true\" />\n+      <property name=\"username\" value=\"admin\" />\n+      <property name=\"password\" value=\"password\" />\n+      <property name=\"inheritHeaders\" value=\"true\" />\n+      <property name=\"features\">\n+         <list>\n+            <cxf:logging/>\n+         </list>\n+      </property>\n+      <property name=\"providers\">\n+         <list>\n+            <ref bean=\"jaxbProvider\" />\n+            <ref bean=\"jsonProvider\" />\n+            <ref bean=\"exceptionMapper\" />\n+         </list>\n+      </property>\n+   </bean>\n+  <!-- CXF Configuration - END -->\n \n </beans>"}]}