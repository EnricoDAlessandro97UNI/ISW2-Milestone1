{"sha":"ebe6b251114223aa3db055be51b84218ae64da2a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmViZTZiMjUxMTE0MjIzYWEzZGIwNTViZTUxYjg0MjE4YWU2NGRhMmE=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-02T15:37:37Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-02T15:37:37Z"},"message":"[SYNCOPE-259]\nIntroduces RoleService Interface and RoleServiceProxy which is used for Integration-Tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1427826 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3a1c8b5da0b786174fdf312d2559d25bba8a48e2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3a1c8b5da0b786174fdf312d2559d25bba8a48e2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ebe6b251114223aa3db055be51b84218ae64da2a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ebe6b251114223aa3db055be51b84218ae64da2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ebe6b251114223aa3db055be51b84218ae64da2a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ebe6b251114223aa3db055be51b84218ae64da2a/comments","author":null,"committer":null,"parents":[{"sha":"bbdc5986db8d284e6e9cabb8c28169386cb5ee79","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bbdc5986db8d284e6e9cabb8c28169386cb5ee79","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bbdc5986db8d284e6e9cabb8c28169386cb5ee79"}],"stats":{"total":1166,"additions":757,"deletions":409},"files":[{"sha":"55e8305b0c559e893ab8a8afd303eeb127080bcf","filename":"client/src/main/java/org/apache/syncope/client/mod/StatusMod.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebe6b251114223aa3db055be51b84218ae64da2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fmod%2FStatusMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebe6b251114223aa3db055be51b84218ae64da2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fmod%2FStatusMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fmod%2FStatusMod.java?ref=ebe6b251114223aa3db055be51b84218ae64da2a","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.mod;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.client.AbstractBaseBean;\r\n+\r\n+@XmlType\r\n+@XmlRootElement\r\n+public class StatusMod extends AbstractBaseBean {\r\n+\r\n+    public enum Status {\r\n+        ACTIVATE, REACTIVATE, SUSPEND;\r\n+    }\r\n+\r\n+    public StatusMod(long id, Status status) {\r\n+        this.id = id;\r\n+        this.status = status;\r\n+    }\r\n+\r\n+    public StatusMod() {\r\n+    }\r\n+\r\n+    private Status status;\r\n+\r\n+    private String token;\r\n+\r\n+    private static final long serialVersionUID = 1338094801957616986L;\r\n+\r\n+    private long id;\r\n+\r\n+    private boolean updateInternal = true;\r\n+\r\n+    private boolean updateRemote = true;\r\n+\r\n+    private final Set<String> excludeResources = new HashSet<String>();\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public boolean isUpdateInternal() {\r\n+        return updateInternal;\r\n+    }\r\n+\r\n+    public void setUpdateInternal(boolean updateInternal) {\r\n+        this.updateInternal = updateInternal;\r\n+    }\r\n+\r\n+    public boolean isUpdateRemote() {\r\n+        return updateRemote;\r\n+    }\r\n+\r\n+    public void setUpdateRemote(boolean updateRemote) {\r\n+        this.updateRemote = updateRemote;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"excludeResources\")\r\n+    @XmlElement(name = \"resource\")\r\n+    public Set<String> getExcludeResources() {\r\n+        return excludeResources;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the status\r\n+     */\r\n+    public Status getStatus() {\r\n+        return status;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param status\r\n+     *            the status to set\r\n+     */\r\n+    public void setStatus(Status status) {\r\n+        this.status = status;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the token\r\n+     */\r\n+    public String getToken() {\r\n+        return token;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param token\r\n+     *            the token to set\r\n+     */\r\n+    public void setToken(String token) {\r\n+        this.token = token;\r\n+    }\r\n+\r\n+}\r"},{"sha":"cd735a0e70608a8ce395b26de8a2de1d5a620436","filename":"client/src/main/java/org/apache/syncope/services/RoleService.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebe6b251114223aa3db055be51b84218ae64da2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebe6b251114223aa3db055be51b84218ae64da2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java?ref=ebe6b251114223aa3db055be51b84218ae64da2a","patch":"@@ -0,0 +1,93 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.POST;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+\r\n+import org.apache.syncope.client.mod.RoleMod;\r\n+import org.apache.syncope.client.search.NodeCond;\r\n+import org.apache.syncope.client.to.RoleTO;\r\n+import org.springframework.web.bind.annotation.PathVariable;\r\n+import org.springframework.web.bind.annotation.RequestBody;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+import org.springframework.web.bind.annotation.RequestMethod;\r\n+\r\n+@Path(\"/role\")\r\n+@RequestMapping(\"/role\")\r\n+public interface RoleService {\r\n+\r\n+\t@GET\r\n+    @Path(\"/{roleId}/children\")\r\n+\t@RequestMapping(method = RequestMethod.GET, value = \"/children/{roleId}\")\r\n+\tList<RoleTO> children(@PathParam(\"roleId\") @PathVariable(\"roleId\") final Long roleId);\r\n+\r\n+\t@POST\r\n+    @Path(\"/\")\r\n+\t@RequestMapping(method = RequestMethod.POST, value = \"/create\")\r\n+\tRoleTO create(@RequestBody final RoleTO roleTO);\r\n+\r\n+\t@DELETE\r\n+    @Path(\"/{roleId}\")\r\n+\t@RequestMapping(method = RequestMethod.GET, value = \"/delete/{roleId}\")\r\n+\tRoleTO delete(@PathParam(\"roleId\") @PathVariable(\"roleId\") final Long roleId);\r\n+\r\n+\t@GET\r\n+\t@RequestMapping(method = RequestMethod.GET, value = \"/list\")\r\n+\tList<RoleTO> list();\r\n+\r\n+\t@GET\r\n+    @Path(\"/{roleId}/parent\")\r\n+\t@RequestMapping(method = RequestMethod.GET, value = \"/parent/{roleId}\")\r\n+\tRoleTO parent(@PathParam(\"roleId\") @PathVariable(\"roleId\") final Long roleId);\r\n+\r\n+\t@GET\r\n+\t@Path(\"/{roleId}\")\r\n+\t@RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\r\n+\tRoleTO read(@PathParam(\"roleId\") @PathVariable(\"roleId\") final Long roleId);\r\n+\r\n+\t\r\n+\t@RequestMapping(method = RequestMethod.POST, value = \"/search\")\r\n+\tList<RoleTO> search(@RequestBody final NodeCond searchCondition);\r\n+\r\n+\t@RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\r\n+\tList<RoleTO> search(@RequestBody final NodeCond searchCondition,\r\n+\t\t\t@PathVariable(\"page\") final int page,\r\n+\t\t\t@PathVariable(\"size\") final int size);\r\n+\r\n+\t@RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\r\n+\tint searchCount(@RequestBody final NodeCond searchCondition);\r\n+\r\n+\t/**\r\n+\t * @deprecated Authentication checks should not depend on the method called\r\n+\t */\r\n+\t@Deprecated\r\n+\t@RequestMapping(method = RequestMethod.GET, value = \"/selfRead/{roleId}\")\r\n+\tRoleTO selfRead(@PathVariable(\"roleId\") final Long roleId);\r\n+\r\n+\t@POST\r\n+    @Path(\"/{roleId}\")\r\n+\t@RequestMapping(method = RequestMethod.POST, value = \"/update\")\r\n+\tRoleTO update(@PathParam(\"roleId\") final Long roleId, @RequestBody final RoleMod roleMod);\r\n+}\n\\ No newline at end of file"},{"sha":"18bf60201f934ccb0c680e01a89d141ea129966a","filename":"client/src/main/java/org/apache/syncope/services/RoleServiceProxy.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebe6b251114223aa3db055be51b84218ae64da2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebe6b251114223aa3db055be51b84218ae64da2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleServiceProxy.java?ref=ebe6b251114223aa3db055be51b84218ae64da2a","patch":"@@ -0,0 +1,105 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.services;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.client.mod.RoleMod;\r\n+import org.apache.syncope.client.search.NodeCond;\r\n+import org.apache.syncope.client.to.RoleTO;\r\n+import org.springframework.web.client.RestTemplate;\r\n+\r\n+public class RoleServiceProxy implements RoleService {\r\n+\r\n+\tRestTemplate restTemplate;\r\n+\tprivate String baseUrl;\r\n+\r\n+\tpublic RoleServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n+\t\tthis.baseUrl = baseUrl;\r\n+\t\tthis.restTemplate = restTemplate;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic List<RoleTO> children(Long roleId) {\r\n+\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n+\t\t\t\t+ \"role/children/{roleId}.json\", RoleTO[].class, roleId));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic RoleTO create(RoleTO roleTO) {\r\n+\t\treturn restTemplate.postForObject(baseUrl + \"role/create\", roleTO,\r\n+\t\t\t\tRoleTO.class);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic RoleTO delete(Long roleId) {\r\n+\t\treturn restTemplate.getForObject(baseUrl + \"role/delete/{roleId}\",\r\n+\t\t\t\tRoleTO.class, roleId);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic List<RoleTO> list() {\r\n+\t\treturn Arrays.asList(restTemplate.getForObject(baseUrl\r\n+\t\t\t\t+ \"role/list.json\", RoleTO[].class));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic RoleTO parent(Long roleId) {\r\n+\t\treturn restTemplate.getForObject(baseUrl + \"role/parent/{roleId}.json\",\r\n+\t\t\t\tRoleTO.class, roleId);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic RoleTO read(Long roleId) {\r\n+\t\treturn restTemplate.getForObject(baseUrl + \"role/read/{roleId}.json\",\r\n+\t\t\t\tRoleTO.class, roleId);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic List<RoleTO> search(NodeCond searchCondition) {\r\n+\t\treturn Arrays.asList(restTemplate.postForObject(\r\n+\t\t\t\tbaseUrl + \"role/search\", searchCondition, RoleTO[].class));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic List<RoleTO> search(NodeCond searchCondition, int page, int size) {\r\n+\t\treturn Arrays.asList(restTemplate.postForObject(\r\n+\t\t\t\tbaseUrl + \"role/search/{page}/{size}\", searchCondition, RoleTO[].class, page, size));\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic int searchCount(NodeCond searchCondition) {\r\n+\t\treturn restTemplate.postForObject(baseUrl + \"role/search/count.json\",\r\n+\t\t\t\tsearchCondition, Integer.class);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic RoleTO selfRead(Long roleId) {\r\n+\t\treturn restTemplate.getForObject(baseUrl + \"role/selfRead/{roleId}\",\r\n+\t\t\t\tRoleTO.class, roleId);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic RoleTO update(Long roleId, RoleMod roleMod) {\r\n+\t\treturn restTemplate.postForObject(baseUrl + \"role/update\", roleMod,\r\n+\t\t\t\tRoleTO.class);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"7ad41aac8e5c5c57e014e7917a5046fcd3677dbe","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":54,"deletions":43,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebe6b251114223aa3db055be51b84218ae64da2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebe6b251114223aa3db055be51b84218ae64da2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=ebe6b251114223aa3db055be51b84218ae64da2a","patch":"@@ -19,11 +19,13 @@\n package org.apache.syncope.core.rest;\n \n import javax.sql.DataSource;\n+\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n+import org.apache.syncope.services.RoleServiceProxy;\n import org.apache.syncope.services.UserService;\n import org.apache.syncope.services.UserServiceProxy;\n import org.junit.Before;\n@@ -36,57 +38,66 @@\n import org.springframework.web.client.RestTemplate;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\"})\n+@ContextConfiguration(locations = { \"classpath:restClientContext.xml\",\n+\t\t\"classpath:testJDBCContext.xml\" })\n public abstract class AbstractTest {\n \n-    protected static AttributeTO attributeTO(final String schema, final String value) {\n-        AttributeTO attr = new AttributeTO();\n-        attr.setSchema(schema);\n-        attr.addValue(value);\n-        return attr;\n-    }\n+\tprotected static AttributeTO attributeTO(final String schema,\n+\t\t\tfinal String value) {\n+\t\tAttributeTO attr = new AttributeTO();\n+\t\tattr.setSchema(schema);\n+\t\tattr.addValue(value);\n+\t\treturn attr;\n+\t}\n \n-    protected static AttributeMod attributeMod(final String schema, final String valueToBeAdded) {\n-        AttributeMod attr = new AttributeMod();\n-        attr.setSchema(schema);\n-        attr.addValueToBeAdded(valueToBeAdded);\n-        return attr;\n-    }\n+\tprotected static AttributeMod attributeMod(final String schema,\n+\t\t\tfinal String valueToBeAdded) {\n+\t\tAttributeMod attr = new AttributeMod();\n+\t\tattr.setSchema(schema);\n+\t\tattr.addValueToBeAdded(valueToBeAdded);\n+\t\treturn attr;\n+\t}\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractTest.class);\n+\t/**\n+\t * Logger.\n+\t */\n+\tprotected static final Logger LOG = LoggerFactory\n+\t\t\t.getLogger(AbstractTest.class);\n \n-    protected static final String BASE_URL = \"http://localhost:9080/syncope/rest/\";\n+\tprotected static final String BASE_URL = \"http://localhost:9080/syncope/rest/\";\n \n-    public static final String ADMIN_UID = \"admin\";\n+\tpublic static final String ADMIN_UID = \"admin\";\n \n-    public static final String ADMIN_PWD = \"password\";\n+\tpublic static final String ADMIN_PWD = \"password\";\n \n-    @Autowired\n-    protected RestTemplate restTemplate;\n+\t@Autowired\n+\tprotected RestTemplate restTemplate;\n \n \tprotected UserService userService;\n-    \n-    @Autowired\n-    protected DataSource testDataSource;\n-\n-    protected RestTemplate anonymousRestTemplate() {\n-        return new RestTemplate();\n-    }\n-\n-    public void setupRestTemplate(final String uid, final String pwd) {\n-        PreemptiveAuthHttpRequestFactory requestFactory =\n-                ((PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory());\n-\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(uid, pwd));\n-    }\n-\n-    @Before\n-    public void resetRestTemplate() {\n-        setupRestTemplate(ADMIN_UID, ADMIN_PWD);\n-        userService = new UserServiceProxy(BASE_URL, restTemplate);\n-    }\n+\t\n+\tprotected RoleServiceProxy roleService;\n+\n+\t@Autowired\n+\tprotected DataSource testDataSource;\n+\n+\tprotected RestTemplate anonymousRestTemplate() {\n+\t\treturn new RestTemplate();\n+\t}\n+\n+\tpublic void setupRestTemplate(final String uid, final String pwd) {\n+\t\tPreemptiveAuthHttpRequestFactory requestFactory = ((PreemptiveAuthHttpRequestFactory) restTemplate\n+\t\t\t\t.getRequestFactory());\n+\n+\t\t((DefaultHttpClient) requestFactory.getHttpClient())\n+\t\t\t\t.getCredentialsProvider().setCredentials(\n+\t\t\t\t\t\trequestFactory.getAuthScope(),\n+\t\t\t\t\t\tnew UsernamePasswordCredentials(uid, pwd));\n+\t}\n+\n+\t@Before\n+\tpublic void resetRestTemplate() {\n+\t\tsetupRestTemplate(ADMIN_UID, ADMIN_PWD);\n+\t\tuserService = new UserServiceProxy(BASE_URL, restTemplate);\n+\t\troleService = new RoleServiceProxy(BASE_URL, restTemplate);\n+\t}\n }"},{"sha":"67d194a77f7227299d62255b2cd444e329083a90","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":375,"deletions":356,"changes":731,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebe6b251114223aa3db055be51b84218ae64da2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebe6b251114223aa3db055be51b84218ae64da2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=ebe6b251114223aa3db055be51b84218ae64da2a","patch":"@@ -18,11 +18,16 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n+\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n@@ -42,358 +47,372 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class RoleTestITCase extends AbstractTest {\n \n-    @Test\n-    public void createWithException() {\n-        RoleTO newRoleTO = new RoleTO();\n-        newRoleTO.addAttribute(attributeTO(\"attr1\", \"value1\"));\n-\n-        Throwable t = null;\n-        try {\n-            restTemplate.postForObject(BASE_URL + \"role/create\", newRoleTO, RoleTO.class);\n-            fail();\n-        } catch (SyncopeClientCompositeErrorException sccee) {\n-            t = sccee.getException(SyncopeClientExceptionType.InvalidSyncopeRole);\n-        }\n-        assertNotNull(t);\n-    }\n-\n-    @Test\n-    public void create() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"lastRole\");\n-        roleTO.setParent(8L);\n-\n-        // verify inheritance password and account policies\n-        roleTO.setInheritAccountPolicy(false);\n-        // not inherited so setter execution shouldn't be ignored\n-        roleTO.setAccountPolicy(6L);\n-\n-        roleTO.setInheritPasswordPolicy(true);\n-        // inherited so setter execution should be ignored\n-        roleTO.setPasswordPolicy(2L);\n-\n-        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-\n-        roleTO.addDerivedAttribute(attributeTO(\"ownerDN\", null));\n-\n-        roleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", \"rvirtualvalue\"));\n-\n-        roleTO.setRoleOwner(8L);\n-\n-        roleTO.addResource(\"resource-ldap\");\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n-        assertNotNull(roleTO);\n-\n-        assertNotNull(roleTO.getVirtualAttributeMap());\n-        assertNotNull(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues());\n-        assertFalse(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues().isEmpty());\n-        assertEquals(\"rvirtualvalue\", roleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues().get(0));\n-\n-        assertNotNull(roleTO.getAccountPolicy());\n-        assertEquals(6L, (long) roleTO.getAccountPolicy());\n-\n-        assertNotNull(roleTO.getPasswordPolicy());\n-        assertEquals(4L, (long) roleTO.getPasswordPolicy());\n-\n-        assertTrue(roleTO.getResources().contains(\"resource-ldap\"));\n-\n-        ConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n-                + \"/resource/resource-ldap/read/ROLE/lastRole.json\", ConnObjectTO.class);\n-        assertNotNull(connObjectTO);\n-        assertNotNull(connObjectTO.getAttributeMap().get(\"owner\"));\n-    }\n-\n-    @Test\n-    public void createWithPasswordPolicy() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"roleWithPassword\");\n-        roleTO.setParent(8L);\n-        roleTO.setPasswordPolicy(4L);\n-\n-        RoleTO actual = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n-        assertNotNull(actual);\n-\n-        actual = restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\", RoleTO.class, actual.getId());\n-        assertNotNull(actual);\n-        assertNotNull(actual.getPasswordPolicy());\n-        assertEquals(4L, (long) actual.getPasswordPolicy());\n-    }\n-\n-    @Test\n-    public void delete() {\n-        try {\n-            restTemplate.getForObject(BASE_URL + \"role/delete/{roleId}\", RoleTO.class, 0);\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n-        }\n-\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"toBeDeleted\");\n-        roleTO.setParent(8L);\n-\n-        roleTO.addResource(\"resource-ldap\");\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n-        assertNotNull(roleTO);\n-\n-        RoleTO deletedRole = restTemplate.getForObject(BASE_URL + \"role/delete/{roleId}\", RoleTO.class, roleTO.getId());\n-        assertNotNull(deletedRole);\n-\n-        try {\n-            restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\", RoleTO.class, deletedRole.getId());\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n-        }\n-    }\n-\n-    @Test\n-    public void list() {\n-        List<RoleTO> roleTOs = Arrays.asList(restTemplate.getForObject(BASE_URL + \"role/list.json\", RoleTO[].class));\n-        assertNotNull(roleTOs);\n-        assertTrue(roleTOs.size() >= 8);\n-        for (RoleTO roleTO : roleTOs) {\n-            assertNotNull(roleTO);\n-        }\n-    }\n-\n-    @Test\n-    public void parent() {\n-        RoleTO roleTO = restTemplate.getForObject(BASE_URL + \"role/parent/{roleId}.json\", RoleTO.class, 7);\n-\n-        assertNotNull(roleTO);\n-        assertEquals(roleTO.getId(), 6L);\n-    }\n-\n-    @Test\n-    public void read() {\n-        RoleTO roleTO = restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\", RoleTO.class, 1);\n-\n-        assertNotNull(roleTO);\n-        assertNotNull(roleTO.getAttributes());\n-        assertFalse(roleTO.getAttributes().isEmpty());\n-    }\n-\n-    @Test\n-    public void selfRead() {\n-        UserTO userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}\", UserTO.class, 1);\n-        assertNotNull(userTO);\n-\n-        assertTrue(userTO.getMembershipMap().containsKey(1L));\n-        assertFalse(userTO.getMembershipMap().containsKey(3L));\n-\n-        PreemptiveAuthHttpRequestFactory requestFactory =\n-                (PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory();\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user1\", \"password\"));\n-\n-        SyncopeClientException exception = null;\n-        try {\n-            restTemplate.getForObject(BASE_URL + \"role/selfRead/{roleId}\", RoleTO.class, 3);\n-            fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n-        }\n-        assertNotNull(exception);\n-\n-        RoleTO roleTO = restTemplate.getForObject(BASE_URL + \"role/selfRead/{roleId}\", RoleTO.class, 1);\n-        assertNotNull(roleTO);\n-        assertNotNull(roleTO.getAttributes());\n-        assertFalse(roleTO.getAttributes().isEmpty());\n-\n-        // restore admin authentication\n-        super.resetRestTemplate();\n-    }\n-\n-    @Test\n-    public void update() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"latestRole\");\n-        roleTO.setParent(8L);\n-\n-        // verify inheritance password and account policies\n-        roleTO.setInheritAccountPolicy(false);\n-        // not inherited so setter execution shouldn't be ignored\n-        roleTO.setAccountPolicy(6L);\n-\n-        roleTO.setInheritPasswordPolicy(true);\n-        // inherited so setter execution should be ignored\n-        roleTO.setPasswordPolicy(2L);\n-\n-        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-\n-        roleTO.addResource(\"resource-ldap\");\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n-\n-        assertEquals(1, roleTO.getAttributes().size());\n-\n-        assertNotNull(roleTO.getAccountPolicy());\n-        assertEquals(Long.valueOf(6), roleTO.getAccountPolicy());\n-\n-        assertNotNull(roleTO.getPasswordPolicy());\n-        assertEquals(Long.valueOf(4), roleTO.getPasswordPolicy());\n-\n-        RoleMod roleMod = new RoleMod();\n-        roleMod.setId(roleTO.getId());\n-        roleMod.setName(\"finalRole\");\n-        roleMod.addAttributeToBeUpdated(attributeMod(\"show\", \"FALSE\"));\n-\n-        // change password policy inheritance\n-        roleMod.setInheritPasswordPolicy(Boolean.FALSE);\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n-\n-        assertEquals(\"finalRole\", roleTO.getName());\n-        assertEquals(2, roleTO.getAttributes().size());\n-\n-        // changes ignored because not requested (null ReferenceMod)\n-        assertNotNull(roleTO.getAccountPolicy());\n-        assertEquals(6L, (long) roleTO.getAccountPolicy());\n-\n-        // password policy null because not inherited\n-        assertNull(roleTO.getPasswordPolicy());\n-    }\n-\n-    @Test\n-    public void updateRemovingVirAttribute() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"withvirtual\");\n-        roleTO.setParent(8L);\n-        roleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", null));\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n-\n-        assertNotNull(roleTO);\n-        assertEquals(1, roleTO.getVirtualAttributes().size());\n-\n-        final RoleMod roleMod = new RoleMod();\n-        roleMod.setId(roleTO.getId());\n-        roleMod.addVirtualAttributeToBeRemoved(\"rvirtualdata\");\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n-\n-        assertNotNull(roleTO);\n-        assertTrue(roleTO.getVirtualAttributes().isEmpty());\n-    }\n-\n-    @Test\n-    public void updateRemovingDerAttribute() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"withderived\");\n-        roleTO.setParent(8L);\n-        roleTO.addDerivedAttribute(attributeTO(\"rderivedschema\", null));\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n-\n-        assertNotNull(roleTO);\n-        assertEquals(1, roleTO.getDerivedAttributes().size());\n-\n-        final RoleMod roleMod = new RoleMod();\n-        roleMod.setId(roleTO.getId());\n-        roleMod.addDerivedAttributeToBeRemoved(\"rderivedschema\");\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n-\n-        assertNotNull(roleTO);\n-        assertTrue(roleTO.getDerivedAttributes().isEmpty());\n-    }\n-\n-    @Test\n-    public void updateAsRoleOwner() {\n-        // 1. read role as admin\n-        RoleTO roleTO = restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\", RoleTO.class, 7);\n-\n-        // 2. prepare update\n-        RoleMod roleMod = new RoleMod();\n-        roleMod.setId(roleTO.getId());\n-        roleMod.setName(\"Managing Director\");\n-\n-        // 3. try to update as user3, not owner of role 7 - fail\n-        PreemptiveAuthHttpRequestFactory requestFactory =\n-                (PreemptiveAuthHttpRequestFactory) restTemplate.getRequestFactory();\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user2\", \"password\"));\n-\n-        try {\n-            restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n-            fail();\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n-        }\n-\n-        // 4. update as user5, owner of role 7 because owner of role 6 with inheritance - success\n-        ((DefaultHttpClient) requestFactory.getHttpClient()).getCredentialsProvider().setCredentials(\n-                requestFactory.getAuthScope(), new UsernamePasswordCredentials(\"user5\", \"password\"));\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n-        assertEquals(\"Managing Director\", roleTO.getName());\n-\n-        // restore admin authentication\n-        super.resetRestTemplate();\n-    }\n-\n-    /**\n-     * Role rename used to fail in case of parent null.\n-     *\n-     * http://code.google.com/p/syncope/issues/detail?id=178\n-     */\n-    @Test\n-    public void issue178() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"torename\");\n-\n-        RoleTO actual = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n-\n-        assertNotNull(actual);\n-        assertEquals(\"torename\", actual.getName());\n-        assertEquals(0L, actual.getParent());\n-\n-        RoleMod roleMod = new RoleMod();\n-        roleMod.setId(actual.getId());\n-        roleMod.setName(\"renamed\");\n-\n-        actual = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n-\n-        assertNotNull(actual);\n-        assertEquals(\"renamed\", actual.getName());\n-        assertEquals(0L, actual.getParent());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE228() {\n-        RoleTO roleTO = new RoleTO();\n-        roleTO.setName(\"issueSYNCOPE228\");\n-        roleTO.setParent(8L);\n-        roleTO.setInheritAccountPolicy(false);\n-        roleTO.setAccountPolicy(6L);\n-        roleTO.setInheritPasswordPolicy(true);\n-        roleTO.setPasswordPolicy(2L);\n-        roleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n-        roleTO.addEntitlement(\"USER_READ\");\n-        roleTO.addEntitlement(\"SCHEMA_READ\");\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/create\", roleTO, RoleTO.class);\n-        assertNotNull(roleTO);\n-        assertNotNull(roleTO.getEntitlements());\n-        assertFalse(roleTO.getEntitlements().isEmpty());\n-\n-        List<String> entitlements = roleTO.getEntitlements();\n-\n-        RoleMod roleMod = new RoleMod();\n-        roleMod.setId(roleTO.getId());\n-        roleMod.setInheritDerivedAttributes(Boolean.TRUE);\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n-        assertNotNull(roleTO);\n-        assertEquals(entitlements, roleTO.getEntitlements());\n-\n-        roleMod = new RoleMod();\n-        roleMod.setId(roleTO.getId());\n-        roleMod.setEntitlements(new ArrayList<String>());\n-\n-        roleTO = restTemplate.postForObject(BASE_URL + \"role/update\", roleMod, RoleTO.class);\n-        assertNotNull(roleTO);\n-        assertTrue(roleTO.getEntitlements().isEmpty());\n-    }\n+\t@Test\n+\tpublic void createWithException() {\n+\t\tRoleTO newRoleTO = new RoleTO();\n+\t\tnewRoleTO.addAttribute(attributeTO(\"attr1\", \"value1\"));\n+\n+\t\tThrowable t = null;\n+\t\ttry {\n+\t\t\troleService.create(newRoleTO);\n+\t\t\tfail();\n+\t\t} catch (SyncopeClientCompositeErrorException sccee) {\n+\t\t\tt = sccee\n+\t\t\t\t\t.getException(SyncopeClientExceptionType.InvalidSyncopeRole);\n+\t\t}\n+\t\tassertNotNull(t);\n+\t}\n+\n+\t@Test\n+\tpublic void create() {\n+\t\tRoleTO roleTO = new RoleTO();\n+\t\troleTO.setName(\"lastRole\");\n+\t\troleTO.setParent(8L);\n+\n+\t\t// verify inheritance password and account policies\n+\t\troleTO.setInheritAccountPolicy(false);\n+\t\t// not inherited so setter execution shouldn't be ignored\n+\t\troleTO.setAccountPolicy(6L);\n+\n+\t\troleTO.setInheritPasswordPolicy(true);\n+\t\t// inherited so setter execution should be ignored\n+\t\troleTO.setPasswordPolicy(2L);\n+\n+\t\troleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+\n+\t\troleTO.addDerivedAttribute(attributeTO(\"ownerDN\", null));\n+\n+\t\troleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", \"rvirtualvalue\"));\n+\n+\t\troleTO.setRoleOwner(8L);\n+\n+\t\troleTO.addResource(\"resource-ldap\");\n+\n+\t\troleTO = roleService.create(roleTO);\n+\t\tassertNotNull(roleTO);\n+\n+\t\tassertNotNull(roleTO.getVirtualAttributeMap());\n+\t\tassertNotNull(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\")\n+\t\t\t\t.getValues());\n+\t\tassertFalse(roleTO.getVirtualAttributeMap().get(\"rvirtualdata\")\n+\t\t\t\t.getValues().isEmpty());\n+\t\tassertEquals(\"rvirtualvalue\",\n+\t\t\t\troleTO.getVirtualAttributeMap().get(\"rvirtualdata\").getValues()\n+\t\t\t\t\t\t.get(0));\n+\n+\t\tassertNotNull(roleTO.getAccountPolicy());\n+\t\tassertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+\t\tassertNotNull(roleTO.getPasswordPolicy());\n+\t\tassertEquals(4L, (long) roleTO.getPasswordPolicy());\n+\n+\t\tassertTrue(roleTO.getResources().contains(\"resource-ldap\"));\n+\n+\t\tConnObjectTO connObjectTO = restTemplate.getForObject(BASE_URL\n+\t\t\t\t+ \"/resource/resource-ldap/read/ROLE/lastRole.json\",\n+\t\t\t\tConnObjectTO.class);\n+\t\tassertNotNull(connObjectTO);\n+\t\tassertNotNull(connObjectTO.getAttributeMap().get(\"owner\"));\n+\t}\n+\n+\t@Test\n+\tpublic void createWithPasswordPolicy() {\n+\t\tRoleTO roleTO = new RoleTO();\n+\t\troleTO.setName(\"roleWithPassword\");\n+\t\troleTO.setParent(8L);\n+\t\troleTO.setPasswordPolicy(4L);\n+\n+\t\tRoleTO actual = roleService.create(roleTO);\n+\t\tassertNotNull(actual);\n+\n+\t\tactual = roleService.read(actual.getId());\n+\t\tassertNotNull(actual);\n+\t\tassertNotNull(actual.getPasswordPolicy());\n+\t\tassertEquals(4L, (long) actual.getPasswordPolicy());\n+\t}\n+\n+\t@Test\n+\tpublic void delete() {\n+\t\ttry {\n+\t\t\troleService.delete(0L);\n+\t\t} catch (HttpStatusCodeException e) {\n+\t\t\tassertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+\t\t}\n+\n+\t\tRoleTO roleTO = new RoleTO();\n+\t\troleTO.setName(\"toBeDeleted\");\n+\t\troleTO.setParent(8L);\n+\n+\t\troleTO.addResource(\"resource-ldap\");\n+\n+\t\troleTO = roleService.create(roleTO);\n+\t\tassertNotNull(roleTO);\n+\n+\t\tRoleTO deletedRole = roleService.delete(roleTO.getId());\n+\t\tassertNotNull(deletedRole);\n+\n+\t\ttry {\n+\t\t\troleService.read(deletedRole.getId());\n+\t\t} catch (HttpStatusCodeException e) {\n+\t\t\tassertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void list() {\n+\t\tList<RoleTO> roleTOs = roleService.list();\n+\t\tassertNotNull(roleTOs);\n+\t\tassertTrue(roleTOs.size() >= 8);\n+\t\tfor (RoleTO roleTO : roleTOs) {\n+\t\t\tassertNotNull(roleTO);\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void parent() {\n+\t\tRoleTO roleTO = roleService.parent(7L);\n+\n+\t\tassertNotNull(roleTO);\n+\t\tassertEquals(roleTO.getId(), 6L);\n+\t}\n+\n+\t@Test\n+\tpublic void read() {\n+\t\tRoleTO roleTO = roleService.read(1L);\n+\n+\t\tassertNotNull(roleTO);\n+\t\tassertNotNull(roleTO.getAttributes());\n+\t\tassertFalse(roleTO.getAttributes().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void selfRead() {\n+\t\tUserTO userTO = userService.read(1L);\n+\t\tassertNotNull(userTO);\n+\n+\t\tassertTrue(userTO.getMembershipMap().containsKey(1L));\n+\t\tassertFalse(userTO.getMembershipMap().containsKey(3L));\n+\n+\t\tPreemptiveAuthHttpRequestFactory requestFactory = (PreemptiveAuthHttpRequestFactory) restTemplate\n+\t\t\t\t.getRequestFactory();\n+\t\t((DefaultHttpClient) requestFactory.getHttpClient())\n+\t\t\t\t.getCredentialsProvider().setCredentials(\n+\t\t\t\t\t\trequestFactory.getAuthScope(),\n+\t\t\t\t\t\tnew UsernamePasswordCredentials(\"user1\", \"password\"));\n+\n+\t\tSyncopeClientException exception = null;\n+\t\ttry {\n+\t\t\troleService.selfRead(3L);\n+\t\t\tfail();\n+\t\t} catch (SyncopeClientCompositeErrorException e) {\n+\t\t\texception = e\n+\t\t\t\t\t.getException(SyncopeClientExceptionType.UnauthorizedRole);\n+\t\t}\n+\t\tassertNotNull(exception);\n+\n+\t\tRoleTO roleTO = roleService.selfRead(1L);\n+\t\tassertNotNull(roleTO);\n+\t\tassertNotNull(roleTO.getAttributes());\n+\t\tassertFalse(roleTO.getAttributes().isEmpty());\n+\n+\t\t// restore admin authentication\n+\t\tsuper.resetRestTemplate();\n+\t}\n+\n+\t@Test\n+\tpublic void update() {\n+\t\tRoleTO roleTO = new RoleTO();\n+\t\troleTO.setName(\"latestRole\");\n+\t\troleTO.setParent(8L);\n+\n+\t\t// verify inheritance password and account policies\n+\t\troleTO.setInheritAccountPolicy(false);\n+\t\t// not inherited so setter execution shouldn't be ignored\n+\t\troleTO.setAccountPolicy(6L);\n+\n+\t\troleTO.setInheritPasswordPolicy(true);\n+\t\t// inherited so setter execution should be ignored\n+\t\troleTO.setPasswordPolicy(2L);\n+\n+\t\troleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+\n+\t\troleTO.addResource(\"resource-ldap\");\n+\n+\t\troleTO = roleService.create(roleTO);\n+\n+\t\tassertEquals(1, roleTO.getAttributes().size());\n+\n+\t\tassertNotNull(roleTO.getAccountPolicy());\n+\t\tassertEquals(Long.valueOf(6), roleTO.getAccountPolicy());\n+\n+\t\tassertNotNull(roleTO.getPasswordPolicy());\n+\t\tassertEquals(Long.valueOf(4), roleTO.getPasswordPolicy());\n+\n+\t\tRoleMod roleMod = new RoleMod();\n+\t\troleMod.setId(roleTO.getId());\n+\t\troleMod.setName(\"finalRole\");\n+\t\troleMod.addAttributeToBeUpdated(attributeMod(\"show\", \"FALSE\"));\n+\n+\t\t// change password policy inheritance\n+\t\troleMod.setInheritPasswordPolicy(Boolean.FALSE);\n+\n+\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n+\n+\t\tassertEquals(\"finalRole\", roleTO.getName());\n+\t\tassertEquals(2, roleTO.getAttributes().size());\n+\n+\t\t// changes ignored because not requested (null ReferenceMod)\n+\t\tassertNotNull(roleTO.getAccountPolicy());\n+\t\tassertEquals(6L, (long) roleTO.getAccountPolicy());\n+\n+\t\t// password policy null because not inherited\n+\t\tassertNull(roleTO.getPasswordPolicy());\n+\t}\n+\n+\t@Test\n+\tpublic void updateRemovingVirAttribute() {\n+\t\tRoleTO roleTO = new RoleTO();\n+\t\troleTO.setName(\"withvirtual\");\n+\t\troleTO.setParent(8L);\n+\t\troleTO.addVirtualAttribute(attributeTO(\"rvirtualdata\", null));\n+\n+\t\troleTO = roleService.create(roleTO);\n+\n+\t\tassertNotNull(roleTO);\n+\t\tassertEquals(1, roleTO.getVirtualAttributes().size());\n+\n+\t\tfinal RoleMod roleMod = new RoleMod();\n+\t\troleMod.setId(roleTO.getId());\n+\t\troleMod.addVirtualAttributeToBeRemoved(\"rvirtualdata\");\n+\n+\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n+\n+\t\tassertNotNull(roleTO);\n+\t\tassertTrue(roleTO.getVirtualAttributes().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void updateRemovingDerAttribute() {\n+\t\tRoleTO roleTO = new RoleTO();\n+\t\troleTO.setName(\"withderived\");\n+\t\troleTO.setParent(8L);\n+\t\troleTO.addDerivedAttribute(attributeTO(\"rderivedschema\", null));\n+\n+\t\troleTO = roleService.create(roleTO);\n+\n+\t\tassertNotNull(roleTO);\n+\t\tassertEquals(1, roleTO.getDerivedAttributes().size());\n+\n+\t\tfinal RoleMod roleMod = new RoleMod();\n+\t\troleMod.setId(roleTO.getId());\n+\t\troleMod.addDerivedAttributeToBeRemoved(\"rderivedschema\");\n+\n+\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n+\n+\t\tassertNotNull(roleTO);\n+\t\tassertTrue(roleTO.getDerivedAttributes().isEmpty());\n+\t}\n+\n+\t@Test\n+\tpublic void updateAsRoleOwner() {\n+\t\t// 1. read role as admin\n+\t\tRoleTO roleTO = roleService.read(7L);\n+\n+\t\t// 2. prepare update\n+\t\tRoleMod roleMod = new RoleMod();\n+\t\troleMod.setId(roleTO.getId());\n+\t\troleMod.setName(\"Managing Director\");\n+\n+\t\t// 3. try to update as user3, not owner of role 7 - fail\n+\t\tPreemptiveAuthHttpRequestFactory requestFactory = (PreemptiveAuthHttpRequestFactory) restTemplate\n+\t\t\t\t.getRequestFactory();\n+\t\t((DefaultHttpClient) requestFactory.getHttpClient())\n+\t\t\t\t.getCredentialsProvider().setCredentials(\n+\t\t\t\t\t\trequestFactory.getAuthScope(),\n+\t\t\t\t\t\tnew UsernamePasswordCredentials(\"user2\", \"password\"));\n+\n+\t\ttry {\n+\t\t\troleService.update(roleMod.getId(), roleMod);\n+\t\t\tfail();\n+\t\t} catch (HttpStatusCodeException e) {\n+\t\t\tassertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n+\t\t}\n+\n+\t\t// 4. update as user5, owner of role 7 because owner of role 6 with\n+\t\t// inheritance - success\n+\t\t((DefaultHttpClient) requestFactory.getHttpClient())\n+\t\t\t\t.getCredentialsProvider().setCredentials(\n+\t\t\t\t\t\trequestFactory.getAuthScope(),\n+\t\t\t\t\t\tnew UsernamePasswordCredentials(\"user5\", \"password\"));\n+\n+\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n+\t\tassertEquals(\"Managing Director\", roleTO.getName());\n+\n+\t\t// restore admin authentication\n+\t\tsuper.resetRestTemplate();\n+\t}\n+\n+\t/**\n+\t * Role rename used to fail in case of parent null.\n+\t * \n+\t * http://code.google.com/p/syncope/issues/detail?id=178\n+\t */\n+\t@Test\n+\tpublic void issue178() {\n+\t\tRoleTO roleTO = new RoleTO();\n+\t\troleTO.setName(\"torename\");\n+\n+\t\tRoleTO actual = roleService.create(roleTO);\n+\n+\t\tassertNotNull(actual);\n+\t\tassertEquals(\"torename\", actual.getName());\n+\t\tassertEquals(0L, actual.getParent());\n+\n+\t\tRoleMod roleMod = new RoleMod();\n+\t\troleMod.setId(actual.getId());\n+\t\troleMod.setName(\"renamed\");\n+\n+\t\tactual = roleService.update(roleMod.getId(), roleMod);;\n+\n+\t\tassertNotNull(actual);\n+\t\tassertEquals(\"renamed\", actual.getName());\n+\t\tassertEquals(0L, actual.getParent());\n+\t}\n+\n+\t@Test\n+\tpublic void issueSYNCOPE228() {\n+\t\tRoleTO roleTO = new RoleTO();\n+\t\troleTO.setName(\"issueSYNCOPE228\");\n+\t\troleTO.setParent(8L);\n+\t\troleTO.setInheritAccountPolicy(false);\n+\t\troleTO.setAccountPolicy(6L);\n+\t\troleTO.setInheritPasswordPolicy(true);\n+\t\troleTO.setPasswordPolicy(2L);\n+\t\troleTO.addAttribute(attributeTO(\"icon\", \"anIcon\"));\n+\t\troleTO.addEntitlement(\"USER_READ\");\n+\t\troleTO.addEntitlement(\"SCHEMA_READ\");\n+\n+\t\troleTO = roleService.create(roleTO);\n+\t\tassertNotNull(roleTO);\n+\t\tassertNotNull(roleTO.getEntitlements());\n+\t\tassertFalse(roleTO.getEntitlements().isEmpty());\n+\n+\t\tList<String> entitlements = roleTO.getEntitlements();\n+\n+\t\tRoleMod roleMod = new RoleMod();\n+\t\troleMod.setId(roleTO.getId());\n+\t\troleMod.setInheritDerivedAttributes(Boolean.TRUE);\n+\n+\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n+\t\tassertNotNull(roleTO);\n+\t\tassertEquals(entitlements, roleTO.getEntitlements());\n+\n+\t\troleMod = new RoleMod();\n+\t\troleMod.setId(roleTO.getId());\n+\t\troleMod.setEntitlements(new ArrayList<String>());\n+\n+\t\troleTO = roleService.update(roleMod.getId(), roleMod);\n+\t\tassertNotNull(roleTO);\n+\t\tassertTrue(roleTO.getEntitlements().isEmpty());\n+\t}\n }"},{"sha":"0c015fc37bd3260a61893c8f6a1e35c15e715eb1","filename":"core/src/test/java/org/apache/syncope/core/rest/SearchTestITCase.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ebe6b251114223aa3db055be51b84218ae64da2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ebe6b251114223aa3db055be51b84218ae64da2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSearchTestITCase.java?ref=ebe6b251114223aa3db055be51b84218ae64da2a","patch":"@@ -18,12 +18,15 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n-import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n import org.apache.syncope.client.search.AttributableCond;\n import org.apache.syncope.client.search.AttributeCond;\n import org.apache.syncope.client.search.EntitlementCond;\n@@ -117,8 +120,7 @@ public void searchByRolenameAndId() {\n \n         assertTrue(searchCondition.isValid());\n \n-        final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n-                searchCondition, RoleTO[].class));\n+        final List<RoleTO> matchingRoles = roleService.search(searchCondition);\n \n         assertNotNull(matchingRoles);\n         assertEquals(1, matchingRoles.size());\n@@ -210,8 +212,7 @@ public void searchByBooleanAttributableCond() {\n \n         final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n \n-        final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n-                searchCondition, RoleTO[].class));\n+        final List<RoleTO> matchingRoles = roleService.search(searchCondition);\n         assertNotNull(matchingRoles);\n         assertFalse(matchingRoles.isEmpty());\n     }\n@@ -228,8 +229,7 @@ public void searchByEntitlement() {\n                 NodeCond.getLeafCond(userReadcond));\n         assertTrue(searchCondition.isValid());\n \n-        final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n-                searchCondition, RoleTO[].class));\n+        final List<RoleTO> matchingRoles = roleService.search(searchCondition);\n         assertNotNull(matchingRoles);\n         assertFalse(matchingRoles.isEmpty());\n     }\n@@ -248,8 +248,7 @@ public void searchByRelationshipAttributableCond() {\n \n         assertTrue(searchCondition.isValid());\n \n-        final List<RoleTO> matchingRoles = Arrays.asList(restTemplate.postForObject(BASE_URL + \"role/search\",\n-                searchCondition, RoleTO[].class));\n+        final List<RoleTO> matchingRoles = roleService.search(searchCondition);\n \n         assertNotNull(matchingRoles);\n         assertEquals(1, matchingRoles.size());"}]}