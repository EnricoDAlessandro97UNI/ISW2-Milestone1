{"sha":"6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZkMTIwZWJkNmIxY2JmNTc1NWJhNWQ0ZjU4YWQ2ZGNhMzgyZWVmNmU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-26T12:15:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-09-26T15:56:51Z"},"message":"[SYNCOPE-957] Initial implementation (propagation only)","tree":{"sha":"315bb3f36fec16f21f67510879ef7f29c950d2b5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/315bb3f36fec16f21f67510879ef7f29c950d2b5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4e3e48ac6656b3fbd39ac55ccf04001a774bb35f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4e3e48ac6656b3fbd39ac55ccf04001a774bb35f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4e3e48ac6656b3fbd39ac55ccf04001a774bb35f"}],"stats":{"total":4600,"additions":3621,"deletions":979},"files":[{"sha":"8926d21273f0dd275922a80e5263698d435c64f3","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyAccountRule.groovy","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyAccountRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyAccountRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyAccountRule.groovy?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -18,6 +18,7 @@\n  */\n import groovy.transform.CompileStatic\n import org.apache.syncope.core.persistence.api.dao.AccountRule\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount\n import org.apache.syncope.core.persistence.api.entity.user.User\n \n @CompileStatic\n@@ -26,4 +27,6 @@ class MyAccountRule implements AccountRule {\n   void enforce(User user) {\n   }\n \n+  void enforce(LinkedAccount account) {\n+  }\n }"},{"sha":"0bb15dbed0d3927069b71df59649e18cb1a910f9","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/implementations/MyPasswordRule.groovy","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPasswordRule.groovy","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPasswordRule.groovy","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fimplementations%2FMyPasswordRule.groovy?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -18,11 +18,15 @@\n  */\n import groovy.transform.CompileStatic\n import org.apache.syncope.core.persistence.api.dao.PasswordRule\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount\n import org.apache.syncope.core.persistence.api.entity.user.User\n \n @CompileStatic\n class MyPasswordRule implements PasswordRule {\n   \n   void enforce(User user) {\n   }\n+\n+  void enforce(LinkedAccount account) {\n+  }\n }"},{"sha":"08364aecadb653c20527f50204900f605403bb90","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":89,"deletions":55,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n import org.apache.syncope.common.lib.request.GroupUR;\n+import org.apache.syncope.common.lib.request.LinkedAccountUR;\n import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.RelationshipUR;\n@@ -42,6 +43,7 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -321,6 +323,29 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n                             .operation(PatchOperation.DELETE).build()));\n         }\n \n+        // 7. linked accounts\n+        Map<Pair<String, String>, LinkedAccountTO> updatedAccounts =\n+                EntityTOUtils.buildLinkedAccountMap(updated.getLinkedAccounts());\n+        Map<Pair<String, String>, LinkedAccountTO> originalAccounts =\n+                EntityTOUtils.buildLinkedAccountMap(original.getLinkedAccounts());\n+\n+        updatedAccounts.entrySet().stream().\n+                filter(entry -> (!originalAccounts.containsKey(entry.getKey()))).\n+                forEachOrdered(entry -> {\n+                    result.getLinkedAccounts().add(new LinkedAccountUR.Builder().\n+                            operation(PatchOperation.ADD_REPLACE).\n+                            linkedAccountTO(entry.getValue()).build());\n+                });\n+\n+        if (!incremental) {\n+            originalAccounts.keySet().stream().filter(account -> !updatedAccounts.containsKey(account)).\n+                    forEach(key -> {\n+                        result.getLinkedAccounts().add(new LinkedAccountUR.Builder().\n+                                operation(PatchOperation.DELETE).\n+                                linkedAccountTO(originalAccounts.get(key)).build());\n+                    });\n+        }\n+\n         return result;\n     }\n \n@@ -391,8 +416,8 @@ private static <T extends AnyTO, K extends AnyUR> void patch(final T to, final K\n         // check same key\n         if (to.getKey() == null || !to.getKey().equals(req.getKey())) {\n             throw new IllegalArgumentException(\n-                    to.getClass().getSimpleName() + \" and \" + req.getClass().getSimpleName()\n-                    + \" keys must be the same\");\n+                    to.getClass().getSimpleName() + \" and \"\n+                    + req.getClass().getSimpleName() + \" keys must be the same\");\n         }\n \n         // 0. realm\n@@ -492,27 +517,26 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectUR\n                 });\n \n         // 2. memberships\n-        anyObjectUR.getMemberships().\n-                forEach(membPatch -> {\n-                    if (membPatch.getGroup() == null) {\n-                        LOG.warn(\"Invalid {} specified: {}\", MembershipUR.class.getName(), membPatch);\n-                    } else {\n-                        result.getMemberships().stream().\n-                                filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).\n-                                findFirst().ifPresent(memb -> result.getMemberships().remove(memb));\n-\n-                        if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                            MembershipTO newMembershipTO = new MembershipTO.Builder(membPatch.getGroup()).\n-                                    // 3. plain attributes\n-                                    plainAttrs(membPatch.getPlainAttrs()).\n-                                    // 4. virtual attributes\n-                                    virAttrs(membPatch.getVirAttrs()).\n-                                    build();\n-\n-                            result.getMemberships().add(newMembershipTO);\n-                        }\n-                    }\n-                });\n+        anyObjectUR.getMemberships().forEach(membPatch -> {\n+            if (membPatch.getGroup() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", MembershipUR.class.getName(), membPatch);\n+            } else {\n+                result.getMemberships().stream().\n+                        filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).\n+                        findFirst().ifPresent(memb -> result.getMemberships().remove(memb));\n+\n+                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    MembershipTO newMembershipTO = new MembershipTO.Builder(membPatch.getGroup()).\n+                            // 3. plain attributes\n+                            plainAttrs(membPatch.getPlainAttrs()).\n+                            // 4. virtual attributes\n+                            virAttrs(membPatch.getVirAttrs()).\n+                            build();\n+\n+                    result.getMemberships().add(newMembershipTO);\n+                }\n+            }\n+        });\n \n         return result;\n     }\n@@ -532,40 +556,38 @@ public static UserTO patch(final UserTO userTO, final UserUR userUR) {\n         }\n \n         // 3. relationships\n-        userUR.getRelationships().\n-                forEach(relPatch -> {\n-                    if (relPatch.getRelationshipTO() == null) {\n-                        LOG.warn(\"Invalid {} specified: {}\", RelationshipUR.class.getName(), relPatch);\n-                    } else {\n-                        result.getRelationships().remove(relPatch.getRelationshipTO());\n-                        if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                            result.getRelationships().add(relPatch.getRelationshipTO());\n-                        }\n-                    }\n-                });\n+        userUR.getRelationships().forEach(relPatch -> {\n+            if (relPatch.getRelationshipTO() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", RelationshipUR.class.getName(), relPatch);\n+            } else {\n+                result.getRelationships().remove(relPatch.getRelationshipTO());\n+                if (relPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    result.getRelationships().add(relPatch.getRelationshipTO());\n+                }\n+            }\n+        });\n \n         // 4. memberships\n-        userUR.getMemberships().\n-                forEach(membPatch -> {\n-                    if (membPatch.getGroup() == null) {\n-                        LOG.warn(\"Invalid {} specified: {}\", MembershipUR.class.getName(), membPatch);\n-                    } else {\n-                        result.getMemberships().stream().\n-                                filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).\n-                                findFirst().ifPresent(memb -> result.getMemberships().remove(memb));\n-\n-                        if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                            MembershipTO newMembershipTO = new MembershipTO.Builder(membPatch.getGroup()).\n-                                    // 3. plain attributes\n-                                    plainAttrs(membPatch.getPlainAttrs()).\n-                                    // 4. virtual attributes\n-                                    virAttrs(membPatch.getVirAttrs()).\n-                                    build();\n-\n-                            result.getMemberships().add(newMembershipTO);\n-                        }\n-                    }\n-                });\n+        userUR.getMemberships().forEach(membPatch -> {\n+            if (membPatch.getGroup() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", MembershipUR.class.getName(), membPatch);\n+            } else {\n+                result.getMemberships().stream().\n+                        filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).\n+                        findFirst().ifPresent(memb -> result.getMemberships().remove(memb));\n+\n+                if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    MembershipTO newMembershipTO = new MembershipTO.Builder(membPatch.getGroup()).\n+                            // 3. plain attributes\n+                            plainAttrs(membPatch.getPlainAttrs()).\n+                            // 4. virtual attributes\n+                            virAttrs(membPatch.getVirAttrs()).\n+                            build();\n+\n+                    result.getMemberships().add(newMembershipTO);\n+                }\n+            }\n+        });\n \n         // 5. roles\n         for (StringPatchItem rolePatch : userUR.getRoles()) {\n@@ -580,6 +602,18 @@ public static UserTO patch(final UserTO userTO, final UserUR userUR) {\n             }\n         }\n \n+        // 6. linked accounts\n+        userUR.getLinkedAccounts().forEach(accountPatch -> {\n+            if (accountPatch.getLinkedAccountTO() == null) {\n+                LOG.warn(\"Invalid {} specified: {}\", LinkedAccountUR.class.getName(), accountPatch);\n+            } else {\n+                result.getLinkedAccounts().remove(accountPatch.getLinkedAccountTO());\n+                if (accountPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                    result.getLinkedAccounts().add(accountPatch.getLinkedAccountTO());\n+                }\n+            }\n+        });\n+\n         return result;\n     }\n "},{"sha":"7c004dbc2d29efed39bc8eea5ffba60cf1c6cf4e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/EntityTOUtils.java","status":"modified","additions":17,"deletions":13,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FEntityTOUtils.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -19,9 +19,9 @@\n package org.apache.syncope.common.lib;\n \n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n@@ -30,33 +30,37 @@\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n \n public final class EntityTOUtils {\n \n     public static Map<String, Attr> buildAttrMap(final Collection<Attr> attrs) {\n-        Map<String, Attr> result = new HashMap<>(attrs.size());\n-        attrs.forEach(attrTO -> result.put(attrTO.getSchema(), attrTO));\n-\n-        return Collections.unmodifiableMap(result);\n+        return attrs.stream().collect(Collectors.toUnmodifiableMap(\n+                Attr::getSchema, Function.identity(), (exist, repl) -> repl));\n     }\n \n     public static Map<Pair<String, String>, RelationshipTO> buildRelationshipMap(\n             final Collection<RelationshipTO> relationships) {\n \n-        Map<Pair<String, String>, RelationshipTO> result = new HashMap<>(relationships.size());\n-        relationships.forEach(rel -> result.put(Pair.of(rel.getType(), rel.getOtherEndKey()), rel));\n-\n-        return Collections.unmodifiableMap(result);\n+        return relationships.stream().collect(Collectors.toUnmodifiableMap(\n+                rel -> Pair.of(rel.getType(), rel.getOtherEndKey()), Function.identity(), (exist, repl) -> repl));\n     }\n \n     public static Map<String, MembershipTO> buildMembershipMap(final Collection<MembershipTO> memberships) {\n-        Map<String, MembershipTO> result = new HashMap<>(memberships.size());\n-        memberships.forEach(memb -> result.put(memb.getGroupKey(), memb));\n+        return memberships.stream().collect(Collectors.toUnmodifiableMap(\n+                MembershipTO::getGroupKey, Function.identity(), (exist, repl) -> repl));\n+    }\n+\n+    public static Map<Pair<String, String>, LinkedAccountTO> buildLinkedAccountMap(\n+            final Collection<LinkedAccountTO> accounts) {\n \n-        return Collections.unmodifiableMap(result);\n+        return accounts.stream().collect(Collectors.toUnmodifiableMap(\n+                account -> Pair.of(account.getResource(), account.getConnObjectName()),\n+                Function.identity(),\n+                (exist, repl) -> repl));\n     }\n \n     public static <A extends AnyTO, C extends AnyCR> void toAnyCR(final A anyTO, final C anyCR) {"},{"sha":"2ccb596cf2609b7e2eefda1e431065259013777e","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/LinkedAccountUR.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FLinkedAccountUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FLinkedAccountUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FLinkedAccountUR.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.request;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.to.LinkedAccountTO;\n+\n+@XmlRootElement(name = \"linkedAccountPatch\")\n+@XmlType\n+public class LinkedAccountUR extends AbstractPatch {\n+\n+    private static final long serialVersionUID = 7848357705991620487L;\n+\n+    public static class Builder extends AbstractPatch.Builder<LinkedAccountUR, Builder> {\n+\n+        @Override\n+        protected LinkedAccountUR newInstance() {\n+            return new LinkedAccountUR();\n+        }\n+\n+        public Builder linkedAccountTO(final LinkedAccountTO linkedAccountTO) {\n+            getInstance().setLinkedAccountTO(linkedAccountTO);\n+            return this;\n+        }\n+    }\n+\n+    private LinkedAccountTO linkedAccountTO;\n+\n+    public LinkedAccountTO getLinkedAccountTO() {\n+        return linkedAccountTO;\n+    }\n+\n+    public void setLinkedAccountTO(final LinkedAccountTO linkedAccountTO) {\n+        this.linkedAccountTO = linkedAccountTO;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(linkedAccountTO).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final LinkedAccountUR other = (LinkedAccountUR) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(linkedAccountTO, other.linkedAccountTO).\n+                build();\n+    }\n+}"},{"sha":"0ce2eee17d7ee869aed6d092e83f130b682de04c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/UserCR.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserCR.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -35,6 +35,7 @@\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n+import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n \n@@ -127,6 +128,21 @@ public Builder roles(final Collection<String> roles) {\n             getInstance().getRoles().addAll(roles);\n             return this;\n         }\n+\n+        public Builder linkedAccount(final LinkedAccountTO linkedAccount) {\n+            getInstance().getLinkedAccounts().add(linkedAccount);\n+            return this;\n+        }\n+\n+        public Builder linkedAccounts(final LinkedAccountTO... linkedAccounts) {\n+            getInstance().getLinkedAccounts().addAll(List.of(linkedAccounts));\n+            return this;\n+        }\n+\n+        public Builder linkedAccounts(final Collection<LinkedAccountTO> linkedAccounts) {\n+            getInstance().getLinkedAccounts().addAll(linkedAccounts);\n+            return this;\n+        }\n     }\n \n     private String username;\n@@ -147,6 +163,8 @@ public Builder roles(final Collection<String> roles) {\n \n     private final Set<String> roles = new HashSet<>();\n \n+    private final List<LinkedAccountTO> linkedAccounts = new ArrayList<>();\n+\n     @JsonProperty(\"@class\")\n     @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.UserCR\")\n     @Override\n@@ -246,6 +264,13 @@ public Set<String> getRoles() {\n         return roles;\n     }\n \n+    @XmlElementWrapper(name = \"linkedAccounts\")\n+    @XmlElement(name = \"linkedAccount\")\n+    @JsonProperty(\"linkedAccounts\")\n+    public List<LinkedAccountTO> getLinkedAccounts() {\n+        return linkedAccounts;\n+    }\n+\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n@@ -257,6 +282,7 @@ public int hashCode() {\n                 append(mustChangePassword).\n                 append(relationships).\n                 append(memberships).\n+                append(linkedAccounts).\n                 build();\n     }\n \n@@ -281,6 +307,7 @@ public boolean equals(final Object obj) {\n                 append(mustChangePassword, other.mustChangePassword).\n                 append(relationships, other.relationships).\n                 append(memberships, other.memberships).\n+                append(linkedAccounts, other.linkedAccounts).\n                 build();\n     }\n }"},{"sha":"a9689fbc5c42caeb87e46aaa0104166fafe795e0","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/request/UserUR.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Frequest%2FUserUR.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -20,8 +20,8 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n-\n import java.util.Collection;\n+import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -137,6 +137,8 @@ public Builder roles(final Collection<StringPatchItem> roles) {\n \n     private final Set<StringPatchItem> roles = new HashSet<>();\n \n+    private final List<LinkedAccountUR> linkedAccounts = new ArrayList<>();\n+\n     @JsonProperty(\"@class\")\n     @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.request.UserUR\")\n     @Override\n@@ -205,11 +207,19 @@ public Set<StringPatchItem> getRoles() {\n         return roles;\n     }\n \n+    @XmlElementWrapper(name = \"linkedAccounts\")\n+    @XmlElement(name = \"linkedAccount\")\n+    @JsonProperty(\"linkedAccounts\")\n+    public List<LinkedAccountUR> getLinkedAccounts() {\n+        return linkedAccounts;\n+    }\n+\n     @Override\n     public boolean isEmpty() {\n         return super.isEmpty()\n                 && username == null && password == null && securityQuestion == null && securityAnswer == null\n-                && mustChangePassword == null && relationships.isEmpty() && memberships.isEmpty() && roles.isEmpty();\n+                && mustChangePassword == null && relationships.isEmpty() && memberships.isEmpty() && roles.isEmpty()\n+                && linkedAccounts.isEmpty();\n     }\n \n     @Override\n@@ -224,6 +234,7 @@ public int hashCode() {\n                 append(relationships).\n                 append(memberships).\n                 append(roles).\n+                append(linkedAccounts).\n                 build();\n     }\n \n@@ -248,6 +259,7 @@ public boolean equals(final Object obj) {\n                 append(relationships, other.relationships).\n                 append(memberships, other.memberships).\n                 append(roles, other.roles).\n+                append(linkedAccounts, other.linkedAccounts).\n                 build();\n     }\n }"},{"sha":"af61e8364b2956eeac13146d7d075e99d228e3c8","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/LinkedAccountTO.java","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLinkedAccountTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLinkedAccountTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FLinkedAccountTO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.io.Serializable;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.Attr;\n+\n+@XmlRootElement(name = \"linkedAccount\")\n+@XmlType\n+public class LinkedAccountTO implements Serializable {\n+\n+    private static final long serialVersionUID = 7396929732310559535L;\n+\n+    public static class Builder {\n+\n+        private final LinkedAccountTO instance = new LinkedAccountTO();\n+\n+        public Builder connObjectName(final String connObjectName) {\n+            instance.setConnObjectName(connObjectName);\n+            return this;\n+        }\n+\n+        public Builder resource(final String resource) {\n+            instance.setResource(resource);\n+            return this;\n+        }\n+\n+        public Builder username(final String username) {\n+            instance.setUsername(username);\n+            return this;\n+        }\n+\n+        public Builder password(final String password) {\n+            instance.setPassword(password);\n+            return this;\n+        }\n+\n+        public Builder suspended(final boolean suspended) {\n+            instance.setSuspended(suspended);\n+            return this;\n+        }\n+\n+        public LinkedAccountTO build() {\n+            return instance;\n+        }\n+    }\n+\n+    private String connObjectName;\n+\n+    private String resource;\n+\n+    private String username;\n+\n+    private String password;\n+\n+    private boolean suspended;\n+\n+    private final Set<Attr> plainAttrs = new HashSet<>();\n+\n+    private final Set<String> privileges = new HashSet<>();\n+\n+    public String getConnObjectName() {\n+        return connObjectName;\n+    }\n+\n+    public void setConnObjectName(final String connObjectName) {\n+        this.connObjectName = connObjectName;\n+    }\n+\n+    public String getResource() {\n+        return resource;\n+    }\n+\n+    public void setResource(final String resource) {\n+        this.resource = resource;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n+\n+    public boolean isSuspended() {\n+        return suspended;\n+    }\n+\n+    public void setSuspended(final boolean suspended) {\n+        this.suspended = suspended;\n+    }\n+\n+    @XmlElementWrapper(name = \"plainAttrs\")\n+    @XmlElement(name = \"attribute\")\n+    @JsonProperty(\"plainAttrs\")\n+    public Set<Attr> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @JsonIgnore\n+    public Optional<Attr> getPlainAttr(final String schema) {\n+        return plainAttrs.stream().filter(attr -> attr.getSchema().equals(schema)).findFirst();\n+    }\n+\n+    @XmlElementWrapper(name = \"privileges\")\n+    @XmlElement(name = \"privilege\")\n+    @JsonProperty(\"privileges\")\n+    public Set<String> getPrivileges() {\n+        return privileges;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(connObjectName).\n+                append(resource).\n+                append(username).\n+                append(suspended).\n+                append(plainAttrs).\n+                append(privileges).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final LinkedAccountTO other = (LinkedAccountTO) obj;\n+        return new EqualsBuilder().\n+                append(connObjectName, other.connObjectName).\n+                append(resource, other.resource).\n+                append(username, other.username).\n+                append(suspended, other.suspended).\n+                append(plainAttrs, other.plainAttrs).\n+                append(privileges, other.privileges).\n+                build();\n+    }\n+}"},{"sha":"f7e823b2ed5a3ef9cb731bb49e5d8fd14f22217a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -76,6 +76,8 @@ public class UserTO extends AnyTO implements GroupableRelatableTO {\n \n     private final Set<String> privileges = new HashSet<>();\n \n+    private final List<LinkedAccountTO> linkedAccounts = new ArrayList<>();\n+\n     @JsonProperty(\"@class\")\n     @Schema(name = \"@class\", required = true, example = \"org.apache.syncope.common.lib.to.UserTO\")\n     @Override\n@@ -263,6 +265,13 @@ public Set<String> getPrivileges() {\n         return privileges;\n     }\n \n+    @XmlElementWrapper(name = \"linkedAccounts\")\n+    @XmlElement(name = \"linkedAccount\")\n+    @JsonProperty(\"linkedAccounts\")\n+    public List<LinkedAccountTO> getLinkedAccounts() {\n+        return linkedAccounts;\n+    }\n+\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().\n@@ -283,6 +292,7 @@ public int hashCode() {\n                 append(relationships).\n                 append(memberships).\n                 append(dynMemberships).\n+                append(linkedAccounts).\n                 build();\n     }\n \n@@ -316,6 +326,7 @@ public boolean equals(final Object obj) {\n                 append(relationships, other.relationships).\n                 append(memberships, other.memberships).\n                 append(dynMemberships, other.dynMemberships).\n+                append(linkedAccounts, other.linkedAccounts).\n                 build();\n     }\n }"},{"sha":"2076fbbace3129efc2634aae85e5136dc66e87f8","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -32,10 +32,7 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.ConnObjectTOListQuery;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n-import org.apache.syncope.core.logic.AnyObjectLogic;\n import org.apache.syncope.core.logic.ResourceLogic;\n-import org.apache.syncope.core.logic.GroupLogic;\n-import org.apache.syncope.core.logic.UserLogic;\n import org.identityconnectors.framework.common.objects.SearchResult;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -46,15 +43,6 @@ public class ResourceServiceImpl extends AbstractServiceImpl implements Resource\n     @Autowired\n     private ResourceLogic logic;\n \n-    @Autowired\n-    private AnyObjectLogic anyObjectLogic;\n-\n-    @Autowired\n-    private UserLogic userLogic;\n-\n-    @Autowired\n-    private GroupLogic groupLogic;\n-\n     @Override\n     public Response create(final ResourceTO resourceTO) {\n         ResourceTO created = logic.create(resourceTO);"},{"sha":"a93a75742697ce0588b8c53a5ae3991329f5b488","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -118,7 +118,7 @@ public ProvisioningResult<RealmTO> create(final String parentPath, final RealmTO\n \n         Realm realm = realmDAO.save(binder.create(parent, realmTO));\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());\n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false);\n@@ -139,7 +139,7 @@ public ProvisioningResult<RealmTO> update(final RealmTO realmTO) {\n             throw new NotFoundException(realmTO.getFullPath());\n         }\n \n-        PropagationByResource propByRes = binder.update(realm, realmTO);\n+        PropagationByResource<String> propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n@@ -181,7 +181,7 @@ public ProvisioningResult<RealmTO> delete(final String fullPath) {\n             throw containedAnys;\n         }\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, false);"},{"sha":"1679b4eab9b0a414bd0f74d00eb1aa1168a5b17a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -19,16 +19,18 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n /**\n  * Interface for enforcing a given account rule to user.\n  */\n-@FunctionalInterface\n public interface AccountRule {\n \n     default void setConf(AccountRuleConf conf) {\n     }\n \n     void enforce(User user);\n+\n+    void enforce(LinkedAccount accout);\n }"},{"sha":"24903707e30f7e5458f202a82c189c15c832fedf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -19,12 +19,12 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n /**\n  * Interface for enforcing a given password rule to user.\n  */\n-@FunctionalInterface\n public interface PasswordRule {\n \n     default PasswordRuleConf getConf() {\n@@ -35,4 +35,6 @@ default void setConf(PasswordRuleConf conf) {\n     }\n \n     void enforce(User user);\n+\n+    void enforce(LinkedAccount account);\n }"},{"sha":"5ecd95b2fd33f56faf3e7f9615a365492034dccf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -21,11 +21,14 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -58,6 +61,14 @@ public interface UserDAO extends AnyDAO<User> {\n \n     Collection<ExternalResource> findAllResources(User user);\n \n+    Optional<LinkedAccount> findLinkedAccountByConnObjectName(String connObjectName);\n+\n+    List<LinkedAccount> findLinkedAccounts(String userKey);\n+\n+    List<LinkedAccount> findLinkedAccountsByResource(ExternalResource resource);\n+\n+    List<LinkedAccount> findLinkedAccountsByPrivilege(Privilege privilege);\n+\n     Pair<Boolean, Boolean> enforcePolicies(User user);\n \n     Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(User user);"},{"sha":"523f561dcd89adfb0a6d50e306f74b3d6b2144af","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Any.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAny.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -20,9 +20,8 @@\n \n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import java.util.List;\n-import java.util.Optional;\n \n-public interface Any<P extends PlainAttr<?>> extends AnnotatedEntity {\n+public interface Any<P extends PlainAttr<?>> extends Attributable<P>, AnnotatedEntity {\n \n     AnyType getType();\n \n@@ -36,14 +35,6 @@\n \n     void setStatus(String status);\n \n-    boolean add(P attr);\n-\n-    boolean remove(P attr);\n-\n-    Optional<? extends P> getPlainAttr(String plainSchema);\n-\n-    List<? extends P> getPlainAttrs();\n-\n     boolean add(ExternalResource resource);\n \n     List<? extends ExternalResource> getResources();"},{"sha":"ea373440346b46b7f754ab6d4f9d12a9963d5bb8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyUtilsFactory.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyUtilsFactory.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -25,4 +25,6 @@ public interface AnyUtilsFactory {\n     AnyUtils getInstance(AnyTypeKind anyTypeKind);\n \n     AnyUtils getInstance(Any<?> any);\n+\n+    AnyUtils getLinkedAccountInstance();\n }"},{"sha":"7e6def86584ba9a5063471631442e03f3bbf6ce3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Attributable.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAttributable.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public interface Attributable<P extends PlainAttr<?>> extends Entity {\n+\n+    boolean add(P attr);\n+\n+    boolean remove(P attr);\n+\n+    /**\n+     * Returns the plain attribute for this instance and the given schema name.s\n+     *\n+     * @param plainSchema plain schema name\n+     * @return plain attribute for this instance and the given schema name\n+     */\n+    Optional<? extends P> getPlainAttr(String plainSchema);\n+\n+    /**\n+     * Returns the plain attributes for this instance.\n+     *\n+     * @return plain attribute for this instance\n+     */\n+    List<? extends P> getPlainAttrs();\n+}"},{"sha":"780463eafc72feeb11861e9fdfef60140b9dd965","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GroupableRelatable.java","status":"modified","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FGroupableRelatable.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -29,22 +29,6 @@\n         R extends Any<?>,\n         REL extends Relationship<L, R>> extends Any<P> {\n \n-    @Override\n-    boolean add(P attr);\n-\n-    @Override\n-    boolean remove(P attr);\n-\n-    /**\n-     * Returns the plain attribute for this instance and the given schema name - if found, {@code NULL} otherwise.\n-     * <b>IMPORTANT:</b> This method won't return any attribute related to memberships.\n-     *\n-     * @param plainSchema plain schema name\n-     * @return plain attribute for this instance and the given schema name\n-     */\n-    @Override\n-    Optional<? extends P> getPlainAttr(String plainSchema);\n-\n     /**\n      * Returns the plain attribute for this instance, the given schema name and the given membership -\n      * if found, {@code NULL} otherwise.\n@@ -55,15 +39,6 @@\n      */\n     Optional<? extends P> getPlainAttr(String plainSchema, Membership<?> membership);\n \n-    /**\n-     * Returns the plain attributes for this instance.\n-     * <b>IMPORTANT:</b> This method won't return any attribute related to memberships.\n-     *\n-     * @return plain attribute for this instance\n-     */\n-    @Override\n-    List<? extends P> getPlainAttrs();\n-\n     /**\n      * Returns the list of plain attributes for this instance and the given schema name (including membeship attributes,\n      * as opposite to {@link Any#getPlainAttr(java.lang.String)})."},{"sha":"bde389046727516a20d9227d6b114adce574cb19","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -40,15 +40,6 @@ public interface Group extends Any<GPlainAttr> {\n \n     void setUserOwner(User userOwner);\n \n-    @Override\n-    boolean add(GPlainAttr attr);\n-\n-    @Override\n-    Optional<? extends GPlainAttr> getPlainAttr(String plainSchema);\n-\n-    @Override\n-    List<? extends GPlainAttr> getPlainAttrs();\n-\n     UDynGroupMembership getUDynMembership();\n \n     void setUDynMembership(UDynGroupMembership uDynMembership);"},{"sha":"bbfe93eacf3cee17042a237e7423358346bbb661","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/Account.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FAccount.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.user;\n+\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+\n+public interface Account {\n+\n+    String getUsername();\n+\n+    void setUsername(String username);\n+\n+    CipherAlgorithm getCipherAlgorithm();\n+\n+    boolean canDecodePassword();\n+\n+    String getPassword();\n+\n+    void setEncodedPassword(String password, CipherAlgorithm cipherAlgoritm);\n+\n+    void setPassword(String password, CipherAlgorithm cipherAlgoritm);\n+\n+    Boolean isSuspended();\n+\n+    void setSuspended(Boolean suspended);\n+}"},{"sha":"1b335e25223db61a81d75077dd2434a1cb0b9c32","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/LAPlainAttr.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttr.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.user;\n+\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+\n+public interface LAPlainAttr extends PlainAttr<User> {\n+\n+    LinkedAccount getAccount();\n+\n+    void setAccount(LinkedAccount account);\n+}"},{"sha":"2261954f441e4a53bd78c05c1d81e0700b458bcb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/LAPlainAttrUniqueValue.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttrUniqueValue.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.user;\n+\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+\n+public interface LAPlainAttrUniqueValue extends PlainAttrUniqueValue {\n+\n+    @Override\n+    LAPlainAttr getAttr();\n+}"},{"sha":"dfb62d623146574c0fc0bf6e69177f015ea77361","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/LAPlainAttrValue.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLAPlainAttrValue.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.user;\n+\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+\n+public interface LAPlainAttrValue extends PlainAttrValue {\n+\n+    @Override\n+    LAPlainAttr getAttr();\n+}"},{"sha":"455bf79288a8d4420e23f25b51831cf0791380f0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/LinkedAccount.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FLinkedAccount.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.user;\n+\n+import java.util.Set;\n+import org.apache.syncope.core.persistence.api.entity.Attributable;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+\n+public interface LinkedAccount extends Account, Attributable<LAPlainAttr> {\n+\n+    String getConnObjectName();\n+\n+    void setConnObjectName(String connObjectName);\n+\n+    User getOwner();\n+\n+    void setOwner(User owner);\n+\n+    ExternalResource getResource();\n+\n+    void setResource(ExternalResource resource);\n+\n+    boolean add(Privilege privilege);\n+\n+    Set<? extends Privilege> getPrivileges();\n+}"},{"sha":"91372946c71b3b163079731aa2427bfaf6ea7c2e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":10,"deletions":23,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -20,17 +20,12 @@\n \n import java.util.Date;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import java.util.Optional;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n \n-public interface User extends\n-        GroupableRelatable<User, UMembership, UPlainAttr, AnyObject, URelationship> {\n-\n-    String getUsername();\n-\n-    void setUsername(String username);\n+public interface User extends Account, GroupableRelatable<User, UMembership, UPlainAttr, AnyObject, URelationship> {\n \n     String getToken();\n \n@@ -44,23 +39,13 @@ public interface User extends\n \n     boolean hasTokenExpired();\n \n-    Date getChangePwdDate();\n-\n-    void setChangePwdDate(Date changePwdDate);\n-\n-    CipherAlgorithm getCipherAlgorithm();\n-\n-    boolean canDecodePassword();\n-\n     String getClearPassword();\n \n     void removeClearPassword();\n \n-    String getPassword();\n-\n-    void setEncodedPassword(String password, CipherAlgorithm cipherAlgoritm);\n+    Date getChangePwdDate();\n \n-    void setPassword(String password, CipherAlgorithm cipherAlgoritm);\n+    void setChangePwdDate(Date changePwdDate);\n \n     List<String> getPasswordHistory();\n \n@@ -80,15 +65,17 @@ public interface User extends\n \n     void setLastLoginDate(Date lastLoginDate);\n \n-    Boolean isSuspended();\n-\n-    void setSuspended(Boolean suspended);\n-\n     boolean isMustChangePassword();\n \n     void setMustChangePassword(boolean mustChangePassword);\n \n     boolean add(Role role);\n \n     List<? extends Role> getRoles();\n+\n+    boolean add(LinkedAccount account);\n+\n+    Optional<? extends LinkedAccount> getLinkedAccount(String resource, String connObjectName);\n+\n+    List<? extends LinkedAccount> getLinkedAccounts();\n }"},{"sha":"4da044b13683d592f58abfc7a593d95e63627c50","filename":"core/persistence-jpa-json/pom.xml","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fpom.xml?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -128,6 +128,64 @@ under the License.\n   </build>\n \n   <profiles>\n+    <profile>\n+      <id>sqlgen</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>sqlgen</id>\n+                <phase>process-classes</phase>\n+                <goals>\n+                  <goal>sql</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+    </profile>\n+    \n+    <profile>\n+      <id>schemagen</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>schemagen</id>\n+                <phase>process-classes</phase>\n+                <goals>\n+                  <goal>schema</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+    </profile>\n+\n     <profile>\n       <id>postgres</id>\n       "},{"sha":"5f3b6a3e5ef3f88cd3030c0a6ce7fc3817e51909","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/api/entity/JSONAttributable.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJSONAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJSONAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJSONAttributable.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -20,7 +20,7 @@\n \n import java.util.List;\n \n-public interface JSONAny<A extends Any<?>> {\n+public interface JSONAttributable<A extends Any<?>> {\n \n     String getPlainAttrsJSON();\n ","previous_filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/api/entity/JSONAny.java"},{"sha":"56dae7de61551a98e8fa4837a43b5dac908cbab4","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/api/entity/JSONLAPlainAttr.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJSONLAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJSONLAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJSONLAPlainAttr.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+\n+public interface JSONLAPlainAttr extends JSONPlainAttr<User>, LAPlainAttr {\n+}"},{"sha":"96ef09792b6119ac4ad2b3f5d06800525940d785","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAJSONEntityFactory.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityFactory.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -28,6 +28,10 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n@@ -40,6 +44,10 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAJSONGroup;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONLAPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONLAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONLAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONLinkedAccount;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUPlainAttrUniqueValue;\n@@ -63,6 +71,9 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n         if (reference.equals(User.class)) {\n             result = (E) new JPAJSONUser();\n             ((JPAJSONUser) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n+        } else if (reference.equals(LinkedAccount.class)) {\n+            result = (E) new JPAJSONLinkedAccount();\n+            ((JPAJSONLinkedAccount) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n         } else if (reference.equals(Group.class)) {\n             result = (E) new JPAJSONGroup();\n             ((JPAJSONGroup) result).setKey(SecureRandomUtils.generateRandomUUID().toString());\n@@ -87,6 +98,12 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAJSONUPlainAttrValue();\n         } else if (reference.equals(UPlainAttrUniqueValue.class)) {\n             result = (E) new JPAJSONUPlainAttrUniqueValue();\n+        } else if (reference.equals(LAPlainAttr.class)) {\n+            result = (E) new JPAJSONLAPlainAttr();\n+        } else if (reference.equals(LAPlainAttrValue.class)) {\n+            result = (E) new JPAJSONLAPlainAttrValue();\n+        } else if (reference.equals(LAPlainAttrUniqueValue.class)) {\n+            result = (E) new JPAJSONLAPlainAttrUniqueValue();\n         } else {\n             result = super.newEntity(reference);\n         }"},{"sha":"10b8e776fcfb004529bf3a0aa8a2d045339b98f5","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAJSONEntityListener.java","status":"modified","additions":18,"deletions":12,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -20,33 +20,39 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.JSONAny;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n \n public abstract class JPAJSONEntityListener<A extends Any<?>> {\n \n     protected abstract List<? extends JSONPlainAttr<A>> getValues(String plainAttrsJSON);\n \n     @SuppressWarnings(\"unchecked\")\n-    protected void json2list(final JSONAny<A> entity, final boolean clearFirst) {\n+    protected void json2list(final JSONAttributable<A> entity, final boolean clearFirst) {\n         if (clearFirst) {\n             entity.getPlainAttrList().clear();\n         }\n         if (entity.getPlainAttrsJSON() != null) {\n-            getValues(entity.getPlainAttrsJSON()).stream().filter(attr -> attr.getSchema() != null).\n-                    map(attr -> {\n-                        attr.setOwner((A) entity);\n-                        attr.getValues().forEach(value -> value.setAttr(attr));\n-                        if (attr.getUniqueValue() != null) {\n-                            attr.getUniqueValue().setAttr(attr);\n-                        }\n-                        return attr;\n-                    }).forEach(entity::add);\n+            getValues(entity.getPlainAttrsJSON()).stream().filter(attr -> attr.getSchema() != null).map(attr -> {\n+                if (entity instanceof Any) {\n+                    attr.setOwner((A) entity);\n+                } else if (entity instanceof LinkedAccount) {\n+                    attr.setOwner((A) ((LinkedAccount) entity).getOwner());\n+                    ((LAPlainAttr) attr).setAccount((LinkedAccount) entity);\n+                }\n+                attr.getValues().forEach(value -> value.setAttr(attr));\n+                if (attr.getUniqueValue() != null) {\n+                    attr.getUniqueValue().setAttr(attr);\n+                }\n+                return attr;\n+            }).forEach(attr -> entity.add(attr));\n         }\n     }\n \n-    protected void list2json(final JSONAny<A> entity) {\n+    protected void list2json(final JSONAttributable<A> entity) {\n         entity.setPlainAttrsJSON(entity.getPlainAttrList().isEmpty()\n                 ? \"[{}]\"\n                 : POJOHelper.serialize(entity.getPlainAttrList()));"},{"sha":"841e61363235cc8f779f8febcef3a82096b5dc99","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAJSONAnyObject.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAJSONAnyObject.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -32,14 +32,14 @@\n import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.JSONAny;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.JPAJSONAnyCheck;\n+import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.JPAJSONAttributableCheck;\n \n @Entity\n @Table(name = JPAAnyObject.TABLE)\n @EntityListeners({ JPAJSONAnyObjectListener.class })\n-@JPAJSONAnyCheck\n-public class JPAJSONAnyObject extends JPAAnyObject implements JSONAny<AnyObject>, AnyObject {\n+@JPAJSONAttributableCheck\n+public class JPAJSONAnyObject extends JPAAnyObject implements JSONAttributable<AnyObject>, AnyObject {\n \n     private static final long serialVersionUID = -8543654943709531885L;\n "},{"sha":"f70bb9d5ee5de2e8473336c578e37c53528baada","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAJSONGroup.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAJSONGroup.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -28,14 +28,14 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.JSONAny;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.JPAJSONAnyCheck;\n+import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.JPAJSONAttributableCheck;\n \n @Entity\n @Table(name = JPAGroup.TABLE)\n @EntityListeners({ JPAJSONGroupListener.class })\n-@JPAJSONAnyCheck\n-public class JPAJSONGroup extends JPAGroup implements JSONAny<Group>, Group {\n+@JPAJSONAttributableCheck\n+public class JPAJSONGroup extends JPAGroup implements JSONAttributable<Group>, Group {\n \n     private static final long serialVersionUID = -8543654943709531885L;\n "},{"sha":"3021a027c65e7aa87dc8df5678af7fb3228e246b","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONLAPlainAttr.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttr.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonSetter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.JSONLAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+\n+@JsonIgnoreProperties(\"valuesAsStrings\")\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class JPAJSONLAPlainAttr extends AbstractPlainAttr<User> implements JSONLAPlainAttr {\n+\n+    private static final long serialVersionUID = -7712812886044037467L;\n+\n+    /**\n+     * The owner of this attribute.\n+     */\n+    @JsonIgnore\n+    private JPAJSONUser owner;\n+\n+    @JsonIgnore\n+    private JPAJSONLinkedAccount account;\n+\n+    @JsonProperty\n+    private String schema;\n+\n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n+    private final List<JPAJSONLAPlainAttrValue> values = new ArrayList<>();\n+\n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n+    @JsonProperty\n+    private JPAJSONLAPlainAttrUniqueValue uniqueValue;\n+\n+    @Override\n+    public User getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final User owner) {\n+        checkType(owner, JPAJSONUser.class);\n+        this.owner = (JPAJSONUser) owner;\n+    }\n+\n+    @Override\n+    public LinkedAccount getAccount() {\n+        return account;\n+    }\n+\n+    @Override\n+    public void setAccount(final LinkedAccount account) {\n+        checkType(account, JPAJSONLinkedAccount.class);\n+        this.account = (JPAJSONLinkedAccount) account;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public String getSchemaKey() {\n+        return schema;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public JPAPlainSchema getSchema() {\n+        return (JPAPlainSchema) ApplicationContextProvider.getBeanFactory().getBean(PlainSchemaDAO.class).find(schema);\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        if (schema != null) {\n+            this.schema = schema.getKey();\n+        }\n+    }\n+\n+    @JsonSetter(\"schema\")\n+    public void setSchema(final String schema) {\n+        this.schema = schema;\n+    }\n+\n+    @Override\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPAJSONLAPlainAttrValue.class);\n+        return values.add((JPAJSONLAPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public boolean add(final PlainAttrValue value) {\n+        return addForMultiValue(value);\n+    }\n+\n+    @Override\n+    public List<? extends LAPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @JsonIgnore\n+    public List<JPAJSONLAPlainAttrValue> getPGValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public JPAJSONLAPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(uniqueValue, JPAJSONLAPlainAttrUniqueValue.class);\n+        this.uniqueValue = (JPAJSONLAPlainAttrUniqueValue) uniqueValue;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(schema).\n+                append(account).\n+                append(values).\n+                append(uniqueValue).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final JPAJSONLAPlainAttr other = (JPAJSONLAPlainAttr) obj;\n+        return new EqualsBuilder().\n+                append(schema, other.schema).\n+                append(account, other.account).\n+                append(values, other.values).\n+                append(uniqueValue, other.uniqueValue).\n+                build();\n+    }\n+}"},{"sha":"eba787c6e98ba50c510ee5bd4b273ec7cab4d76c","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONLAPlainAttrUniqueValue.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttrUniqueValue.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class JPAJSONLAPlainAttrUniqueValue extends AbstractPlainAttrValue implements LAPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = 4005916774320343497L;\n+\n+    @JsonIgnore\n+    private JPAJSONLAPlainAttr attr;\n+\n+    @Override\n+    public LAPlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, JPAJSONLAPlainAttr.class);\n+        this.attr = (JPAJSONLAPlainAttr) attr;\n+    }\n+\n+    @JsonIgnore\n+    @Override\n+    public PlainSchema getSchema() {\n+        return getAttr() == null ? null : getAttr().getSchema();\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        // nothing to do\n+    }\n+}"},{"sha":"7a3c299bf4d0ce93cbc148e54ed01f21055dfdaf","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONLAPlainAttrValue.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLAPlainAttrValue.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@JsonIgnoreProperties({ \"valueAsString\", \"value\" })\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class JPAJSONLAPlainAttrValue extends AbstractPlainAttrValue implements LAPlainAttrValue {\n+\n+    private static final long serialVersionUID = -7049546275798013346L;\n+\n+    @JsonIgnore\n+    private JPAJSONLAPlainAttr attr;\n+\n+    @Override\n+    public LAPlainAttr getAttr() {\n+        return attr;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, JPAJSONLAPlainAttr.class);\n+        this.attr = (JPAJSONLAPlainAttr) attr;\n+    }\n+}"},{"sha":"3864fb9eb120d103872f8d30d5344aece5e50a93","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONLinkedAccount.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccount.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityListeners;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.Transient;\n+import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n+import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.JPAJSONAttributableCheck;\n+\n+@Entity\n+@Table(name = JPALinkedAccount.TABLE)\n+@EntityListeners({ JPAJSONLinkedAccountListener.class })\n+@JPAJSONAttributableCheck\n+public class JPAJSONLinkedAccount extends JPALinkedAccount implements JSONAttributable<User>, LinkedAccount {\n+\n+    private static final long serialVersionUID = 7495284980208765032L;\n+\n+    @Lob\n+    private String plainAttrs;\n+\n+    @Transient\n+    private final List<JPAJSONLAPlainAttr> plainAttrList = new ArrayList<>();\n+\n+    @Override\n+    public String getPlainAttrsJSON() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public void setPlainAttrsJSON(final String plainAttrs) {\n+        this.plainAttrs = plainAttrs;\n+    }\n+\n+    @Override\n+    public List<JPAJSONLAPlainAttr> getPlainAttrList() {\n+        return plainAttrList;\n+    }\n+\n+    @Override\n+    public boolean add(final JSONPlainAttr<User> attr) {\n+        return add((LAPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean add(final LAPlainAttr attr) {\n+        checkType(attr, JPAJSONLAPlainAttr.class);\n+        return plainAttrList.add((JPAJSONLAPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final LAPlainAttr attr) {\n+        return plainAttrList.removeIf(jsonAttr -> jsonAttr.getSchemaKey().equals(attr.getSchema().getKey()));\n+    }\n+\n+    @Override\n+    public List<? extends LAPlainAttr> getPlainAttrs() {\n+        return plainAttrList.stream().collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Optional<? extends LAPlainAttr> getPlainAttr(final String plainSchema) {\n+        return plainAttrList.stream().\n+                filter(attr -> attr.getSchemaKey() != null && attr.getSchemaKey().equals(plainSchema)).\n+                findFirst();\n+    }\n+}"},{"sha":"3a71a95e63e245d86d00e5d8a2fe4b51852606c8","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONLinkedAccountListener.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONLinkedAccountListener.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.util.List;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n+import org.apache.syncope.core.persistence.api.entity.JSONLAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAJSONEntityListener;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+\n+public class JPAJSONLinkedAccountListener extends JPAJSONEntityListener<User> {\n+\n+    @Override\n+    protected List<? extends JSONLAPlainAttr> getValues(final String plainAttrsJSON) {\n+        return POJOHelper.deserialize(plainAttrsJSON, new TypeReference<List<JPAJSONLAPlainAttr>>() {\n+        });\n+    }\n+\n+    @PostLoad\n+    public void read(final JPAJSONLinkedAccount account) {\n+        super.json2list(account, false);\n+    }\n+\n+    @PrePersist\n+    @PreUpdate\n+    public void save(final JPAJSONLinkedAccount account) {\n+        super.list2json(account);\n+    }\n+\n+    @PostPersist\n+    @PostUpdate\n+    public void readAfterSave(final JPAJSONLinkedAccount account) {\n+        super.json2list(account, true);\n+    }\n+}"},{"sha":"ab346dc4dbc20e9bdef4b73d331be9eb2c92b21c","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAJSONUser.java","status":"modified","additions":32,"deletions":4,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAJSONUser.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -23,24 +23,28 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.EntityListeners;\n import javax.persistence.Lob;\n+import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n+import javax.validation.Valid;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.JSONAny;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.JPAJSONAnyCheck;\n+import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.JPAJSONAttributableCheck;\n \n @Entity\n @Table(name = JPAUser.TABLE)\n @EntityListeners({ JPAJSONUserListener.class })\n-@JPAJSONAnyCheck\n-public class JPAJSONUser extends JPAUser implements JSONAny<User>, User {\n+@JPAJSONAttributableCheck\n+public class JPAJSONUser extends JPAUser implements JSONAttributable<User>, User {\n \n     private static final long serialVersionUID = -8543654943709531885L;\n \n@@ -50,6 +54,10 @@ public class JPAJSONUser extends JPAUser implements JSONAny<User>, User {\n     @Transient\n     private final List<JPAJSONUPlainAttr> plainAttrList = new ArrayList<>();\n \n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPAJSONLinkedAccount> linkedAccounts = new ArrayList<>();\n+\n     @Override\n     public String getPlainAttrsJSON() {\n         return plainAttrs;\n@@ -116,4 +124,24 @@ public boolean remove(final UMembership membership) {\n                 && attr.getMembershipKey().equals(membership.getKey()));\n         return super.remove(membership);\n     }\n+\n+    @Override\n+    public boolean add(final LinkedAccount account) {\n+        checkType(account, JPALinkedAccount.class);\n+        return linkedAccounts.contains((JPAJSONLinkedAccount) account)\n+                || linkedAccounts.add((JPAJSONLinkedAccount) account);\n+    }\n+\n+    @Override\n+    public Optional<? extends LinkedAccount> getLinkedAccount(final String resource, final String connObjectName) {\n+        return linkedAccounts.stream().\n+                filter(account -> account.getResource().getKey().equals(resource)\n+                && account.getConnObjectName().equals(connObjectName)).\n+                findFirst();\n+    }\n+\n+    @Override\n+    public List<? extends LinkedAccount> getLinkedAccounts() {\n+        return linkedAccounts;\n+    }\n }"},{"sha":"6921c3255f3aa41fd57610f82b323222c1ae475e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/JPAJSONAttributableCheck.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableCheck.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -29,9 +29,9 @@\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = JPAJSONAnyValidator.class)\n+@Constraint(validatedBy = JPAJSONAttributableValidator.class)\n @Documented\n-public @interface JPAJSONAnyCheck {\n+public @interface JPAJSONAttributableCheck {\n \n     String message() default \"{org.apache.syncope.core.persistence.validation.any}\";\n ","previous_filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/JPAJSONAnyCheck.java"},{"sha":"94fb108ca2fcc91dc10928f59f23d86d8d5513a3","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/JPAJSONAttributableValidator.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FJPAJSONAttributableValidator.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -21,12 +21,12 @@\n import java.util.concurrent.atomic.AtomicReference;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.JSONAny;\n+import org.apache.syncope.core.persistence.api.entity.JSONAttributable;\n \n-public class JPAJSONAnyValidator extends AbstractValidator<JPAJSONAnyCheck, JSONAny<?>> {\n+public class JPAJSONAttributableValidator extends AbstractValidator<JPAJSONAttributableCheck, JSONAttributable<?>> {\n \n     @Override\n-    public boolean isValid(final JSONAny<?> entity, final ConstraintValidatorContext context) {\n+    public boolean isValid(final JSONAttributable<?> entity, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n         PlainAttrValidator attrValidator = new PlainAttrValidator();","previous_filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/JPAJSONAnyValidator.java"},{"sha":"ec73b4b348ac00112ac8a9238836d6689e7a9e7d","filename":"core/persistence-jpa-json/src/main/resources/META-INF/spring-orm-myjson.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-myjson.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-myjson.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-myjson.xml?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -61,7 +61,7 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.conf.JPAJSONConf\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONLinkedAccount\">\n     <attributes>\n       <basic name=\"plainAttrs\">\n         <column column-definition=\"json\"/>"},{"sha":"2a9df30d9b3b77285d64a6edad434febbf0b6285","filename":"core/persistence-jpa-json/src/main/resources/META-INF/spring-orm-pgjsonb.xml","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-pgjsonb.xml?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -61,6 +61,15 @@ under the License.\n     </attributes>\n   </entity>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONLinkedAccount\">\n+    <attributes>\n+      <basic name=\"plainAttrs\">\n+        <column column-definition=\"jsonb\"/>\n+        <lob/>\n+      </basic>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n     <attributes>\n       <many-to-one name=\"userOwner\" target-entity=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAJSONUser\"/>"},{"sha":"438ba5daed6a06e40bab30a88b6f04025f41ba05","filename":"core/persistence-jpa-json/src/main/resources/myjson/persistence.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -23,5 +23,4 @@ any.search.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAnySearchDAO\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"c8f9dbe74505f74b0435230f129f65dc714c62b2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -115,6 +115,7 @@ protected String findKey(final String name, final String table) {\n         return key;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected List<String> findAllKeys(final String table, final int page, final int itemsPerPage) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT id FROM \" + table + \" ORDER BY id\", String.class);"},{"sha":"78cad7848c31afbef58c25442f9efce78e31dab7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -29,7 +29,9 @@\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRuleConfClass;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.provisioning.api.AccountGetter;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.PlainAttrGetter;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n import org.identityconnectors.framework.common.objects.filter.FilterBuilder;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -59,7 +61,8 @@ public Filter getFilter(final Any<?> any, final Provision provision) {\n         provision.getMapping().getItems().stream().filter(\n                 item -> item.getPurpose() == MappingPurpose.PROPAGATION || item.getPurpose() == MappingPurpose.BOTH).\n                 forEach(item -> {\n-                    Pair<String, Attribute> attr = mappingManager.prepareAttr(provision, item, any, null);\n+                    Pair<String, Attribute> attr = mappingManager.prepareAttr(\n+                            provision, item, any, null, AccountGetter.DEFAULT, PlainAttrGetter.DEFAULT);\n                     if (attr != null && attr.getRight() != null && conf.getSchemas().contains(item.getIntAttrName())) {\n                         filters.add(provision.isIgnoreCaseMatch()\n                                 ? FilterBuilder.equalsIgnoreCase(attr.getRight())"},{"sha":"ab225eef2cb4d283a3d64f331eb646ff9821c750","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAApplicationDAO.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Application;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.jpa.entity.JPAApplication;\n@@ -35,6 +36,9 @@ public class JPAApplicationDAO extends AbstractDAO<Application> implements Appli\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n     @Override\n     public Application find(final String key) {\n         return entityManager().find(JPAApplication.class, key);\n@@ -60,7 +64,10 @@ public Application save(final Application application) {\n     @Override\n     public void delete(final Application application) {\n         application.getPrivileges().forEach(privilege -> {\n-            roleDAO.findByPrivilege(privilege).forEach(role -> role.getPrivileges().remove(privilege));\n+            roleDAO.findByPrivilege(privilege).\n+                    forEach(role -> role.getPrivileges().remove(privilege));\n+            userDAO.findLinkedAccountsByPrivilege(privilege).\n+                    forEach(account -> account.getPrivileges().remove(privilege));\n \n             privilege.setApplication(null);\n         });\n@@ -78,5 +85,4 @@ public void delete(final String key) {\n \n         delete(application);\n     }\n-\n }"},{"sha":"c2554d0f19382c782134d4aa7d6ea48b1a1c4684","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPABatchDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPABatchDAO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -54,8 +54,7 @@ public void delete(final String key) {\n     @Override\n     public int deleteExpired() {\n         Query query = entityManager().createQuery(\n-                \"DELETE FROM \" + JPABatch.class.getSimpleName() + \" e \"\n-                + \"WHERE e.expiryTime < :now\");\n+                \"DELETE FROM \" + JPABatch.class.getSimpleName() + \" e WHERE e.expiryTime < :now\");\n         query.setParameter(\"now\", new Date());\n         return query.executeUpdate();\n     }"},{"sha":"21da9ce26d0e09ef0edb60239eb386c62ed760e2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -79,6 +79,7 @@ public DynRealm save(final DynRealm dynRealm) {\n         return entityManager().merge(dynRealm);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private List<String> clearDynMembers(final DynRealm dynRealm) {\n         Query find = entityManager().createNativeQuery(\n                 \"SELECT any_id FROM \" + DYNMEMB_TABLE + \" WHERE dynRealm_id=?\");"},{"sha":"a0de7ad5ff48abd9f920e834b2421549c6c38ab0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -242,6 +242,10 @@ public void delete(final String name) {\n                 forEach(realm -> realm.getResources().remove(resource));\n         anyObjectDAO.findByResource(resource).\n                 forEach(anyObject -> anyObject.getResources().remove(resource));\n+        userDAO.findLinkedAccountsByResource(resource).forEach(account -> {\n+            account.getOwner().getLinkedAccounts().remove(account);\n+            account.setOwner(null);\n+        });\n         userDAO.findByResource(resource).\n                 forEach(user -> user.getResources().remove(resource));\n         groupDAO.findByResource(resource)."},{"sha":"6860f96ad7e81e8d7916cb7d2b4f36a13793059c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -192,9 +192,7 @@ private void findDescendants(final List<Realm> result, final Realm realm) {\n         result.add(realm);\n         List<Realm> children = findChildren(realm);\n         if (children != null) {\n-            for (Realm child : children) {\n-                findDescendants(result, child);\n-            }\n+            children.forEach(child -> findDescendants(result, child));\n         }\n     }\n "},{"sha":"12fda009d6d228a09ac59ea573ff33f373448d8a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":68,"deletions":7,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -34,7 +34,6 @@\n import javax.persistence.PersistenceException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -45,7 +44,6 @@\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n-import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n@@ -54,15 +52,18 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALinkedAccount;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n@@ -294,7 +295,13 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 }\n \n                 for (Implementation impl : policy.getRules()) {\n-                    ImplementationManager.buildPasswordRule(impl).ifPresent(rule -> rule.enforce(user));\n+                    ImplementationManager.buildPasswordRule(impl).ifPresent(rule -> {\n+                        rule.enforce(user);\n+\n+                        user.getLinkedAccounts().stream().\n+                                filter(account -> account.getPassword() != null).\n+                                forEach(account -> rule.enforce(account));\n+                    });\n                 }\n \n                 boolean matching = false;\n@@ -354,13 +361,25 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n             }\n \n             if (!USERNAME_PATTERN.matcher(user.getUsername()).matches()) {\n-                throw new AccountPolicyException(\"Character(s) not allowed\");\n+                throw new AccountPolicyException(\"Character(s) not allowed: \" + user.getUsername());\n             }\n+            user.getLinkedAccounts().stream().\n+                    filter(account -> account.getUsername() != null).\n+                    forEach(account -> {\n+                        if (!USERNAME_PATTERN.matcher(account.getUsername()).matches()) {\n+                            throw new AccountPolicyException(\"Character(s) not allowed: \" + account.getUsername());\n+                        }\n+                    });\n \n             for (AccountPolicy policy : getAccountPolicies(user)) {\n                 for (Implementation impl : policy.getRules()) {\n-                    Optional<AccountRule> rule = ImplementationManager.buildAccountRule(impl);\n-                    rule.ifPresent(accountRule -> accountRule.enforce(user));\n+                    ImplementationManager.buildAccountRule(impl).ifPresent(rule -> {\n+                        rule.enforce(user);\n+\n+                        user.getLinkedAccounts().stream().\n+                                filter(account -> account.getUsername() != null).\n+                                forEach(account -> rule.enforce(account));\n+                    });\n                 }\n \n                 suspend |= user.getFailedLogins() != null && policy.getMaxAuthenticationAttempts() > 0\n@@ -374,7 +393,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n             throw new InvalidEntityException(User.class, EntityViolationType.InvalidUsername, e.getMessage());\n         }\n \n-        return ImmutablePair.of(suspend, propagateSuspension);\n+        return Pair.of(suspend, propagateSuspension);\n     }\n \n     protected Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n@@ -524,4 +543,46 @@ public Collection<ExternalResource> findAllResources(final User user) {\n     public Collection<String> findAllResourceKeys(final String key) {\n         return findAllResources(authFind(key)).stream().map(Entity::getKey).collect(Collectors.toList());\n     }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<LinkedAccount> findLinkedAccounts(final String userKey) {\n+        TypedQuery<LinkedAccount> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPALinkedAccount.class.getSimpleName() + \" e \"\n+                + \"WHERE e.owner.id=:userKey\", LinkedAccount.class);\n+        query.setParameter(\"userKey\", userKey);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<LinkedAccount> findLinkedAccountsByPrivilege(final Privilege privilege) {\n+        TypedQuery<LinkedAccount> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPALinkedAccount.class.getSimpleName() + \" e \"\n+                + \"WHERE :privilege MEMBER OF e.privileges\", LinkedAccount.class);\n+        query.setParameter(\"privilege\", privilege);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public Optional<LinkedAccount> findLinkedAccountByConnObjectName(final String connObjectName) {\n+        TypedQuery<LinkedAccount> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPALinkedAccount.class.getSimpleName() + \" e \"\n+                + \"WHERE e.connObjectName=:connObjectName\", LinkedAccount.class);\n+        query.setParameter(\"connObjectName\", connObjectName);\n+\n+        List<LinkedAccount> result = query.getResultList();\n+        return result.isEmpty()\n+                ? Optional.empty()\n+                : Optional.of(result.get(0));\n+    }\n+\n+    @Override\n+    public List<LinkedAccount> findLinkedAccountsByResource(final ExternalResource resource) {\n+        TypedQuery<LinkedAccount> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPALinkedAccount.class.getSimpleName() + \" e \"\n+                + \"WHERE e.resource=:resource\", LinkedAccount.class);\n+        query.setParameter(\"resource\", resource);\n+\n+        return query.getResultList();\n+    }\n }"},{"sha":"0b921aaddff39546924448ad1cedc37035bb2eb1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtils.java","status":"modified","additions":21,"deletions":5,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtils.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -62,6 +62,9 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n@@ -118,6 +121,8 @@ public static boolean matchesFieldName(final String candidate) {\n \n     private final AnyTypeKind anyTypeKind;\n \n+    private final boolean linkedAccount;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -130,8 +135,13 @@ public static boolean matchesFieldName(final String candidate) {\n     @Autowired\n     private EntityFactory entityFactory;\n \n-    protected JPAAnyUtils(final AnyTypeKind typeKind) {\n-        this.anyTypeKind = typeKind;\n+    protected JPAAnyUtils(final AnyTypeKind anyTypeKind) {\n+        this(anyTypeKind, false);\n+    }\n+\n+    protected JPAAnyUtils(final AnyTypeKind anyTypeKind, final boolean linkedAccount) {\n+        this.anyTypeKind = anyTypeKind;\n+        this.linkedAccount = linkedAccount;\n     }\n \n     @Override\n@@ -194,7 +204,9 @@ public <T extends PlainAttr<?>> T newPlainAttr() {\n \n         switch (anyTypeKind) {\n             case USER:\n-                result = (T) entityFactory.newEntity(UPlainAttr.class);\n+                result = linkedAccount\n+                        ? (T) entityFactory.newEntity(LAPlainAttr.class)\n+                        : (T) entityFactory.newEntity(UPlainAttr.class);\n                 break;\n \n             case GROUP:\n@@ -223,7 +235,9 @@ public <T extends PlainAttrValue> T newPlainAttrValue() {\n \n         switch (anyTypeKind) {\n             case USER:\n-                result = (T) entityFactory.newEntity(UPlainAttrValue.class);\n+                result = linkedAccount\n+                        ? (T) entityFactory.newEntity(LAPlainAttrValue.class)\n+                        : (T) entityFactory.newEntity(UPlainAttrValue.class);\n                 break;\n \n             case GROUP:\n@@ -252,7 +266,9 @@ public <T extends PlainAttrValue> T newPlainAttrUniqueValue() {\n \n         switch (anyTypeKind) {\n             case USER:\n-                result = (T) entityFactory.newEntity(UPlainAttrUniqueValue.class);\n+                result = linkedAccount\n+                        ? (T) entityFactory.newEntity(LAPlainAttrUniqueValue.class)\n+                        : (T) entityFactory.newEntity(UPlainAttrUniqueValue.class);\n                 break;\n \n             case GROUP:"},{"sha":"8c43a7e6fe1813999c36f24613c24fb28245e0f5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyUtilsFactory.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyUtilsFactory.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -35,6 +35,8 @@ public class JPAAnyUtilsFactory implements AnyUtilsFactory {\n \n     private final Map<AnyTypeKind, AnyUtils> instances = new HashMap<>(3);\n \n+    private AnyUtils linkedAccountInstance;\n+\n     @Override\n     public AnyUtils getInstance(final AnyTypeKind anyTypeKind) {\n         AnyUtils instance;\n@@ -67,4 +69,15 @@ public AnyUtils getInstance(final Any<?> any) {\n \n         return getInstance(type);\n     }\n+\n+    @Override\n+    public AnyUtils getLinkedAccountInstance() {\n+        synchronized (this) {\n+            if (linkedAccountInstance == null) {\n+                linkedAccountInstance = new JPAAnyUtils(AnyTypeKind.USER, true);\n+                ApplicationContextProvider.getBeanFactory().autowireBean(linkedAccountInstance);\n+            }\n+        }\n+        return linkedAccountInstance;\n+    }\n }"},{"sha":"d4c8fbb5201f88a139e3b90dce5a6a25df1bb4b2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -133,8 +133,16 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAOrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.policy.PullCorrelationRuleEntity;\n import org.apache.syncope.core.persistence.api.entity.policy.PushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.jpa.dao.JPAAnySearchDAO;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPushCorrelationRuleEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALinkedAccount;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n \n public class JPAEntityFactory implements EntityFactory {\n@@ -192,6 +200,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAMembership();\n         } else if (reference.equals(UMembership.class)) {\n             result = (E) new JPAUMembership();\n+        } else if (reference.equals(LinkedAccount.class)) {\n+            result = (E) new JPALinkedAccount();\n         } else if (reference.equals(AnyAbout.class)) {\n             result = (E) new JPAAnyAbout();\n         } else if (reference.equals(MailTemplate.class)) {\n@@ -226,6 +236,12 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAUPlainAttrValue();\n         } else if (reference.equals(UPlainAttrUniqueValue.class)) {\n             result = (E) new JPAUPlainAttrUniqueValue();\n+        } else if (reference.equals(LAPlainAttr.class)) {\n+            result = (E) new JPALAPlainAttr();\n+        } else if (reference.equals(LAPlainAttrValue.class)) {\n+            result = (E) new JPALAPlainAttrValue();\n+        } else if (reference.equals(LAPlainAttrUniqueValue.class)) {\n+            result = (E) new JPALAPlainAttrUniqueValue();\n         } else if (reference.equals(DerSchema.class)) {\n             result = (E) new JPADerSchema();\n         } else if (reference.equals(VirSchema.class)) {"},{"sha":"0364c57d3b6efbe3e1e75fc47bf5807274b61751","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPALAPlainAttr.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttr.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.validation.Valid;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttr;\n+\n+@Entity\n+@Table(name = JPALAPlainAttr.TABLE)\n+public class JPALAPlainAttr extends AbstractPlainAttr<User> implements LAPlainAttr {\n+\n+    private static final long serialVersionUID = 7827533741035423694L;\n+\n+    public static final String TABLE = \"LAPlainAttr\";\n+\n+    /**\n+     * The owner of this attribute.\n+     */\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAUser owner;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPALinkedAccount account;\n+\n+    /**\n+     * Values of this attribute (if schema is not UNIQUE).\n+     */\n+    @OneToMany(cascade = CascadeType.MERGE, orphanRemoval = true, mappedBy = \"attribute\")\n+    @Valid\n+    private List<JPALAPlainAttrValue> values = new ArrayList<>();\n+\n+    /**\n+     * Value of this attribute (if schema is UNIQUE).\n+     */\n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"attribute\")\n+    @Valid\n+    private JPALAPlainAttrUniqueValue uniqueValue;\n+\n+    @Override\n+    public User getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final User owner) {\n+        checkType(owner, JPAUser.class);\n+        this.owner = (JPAUser) owner;\n+    }\n+\n+    @Override\n+    public LinkedAccount getAccount() {\n+        return account;\n+    }\n+\n+    @Override\n+    public void setAccount(final LinkedAccount account) {\n+        checkType(account, JPALinkedAccount.class);\n+        this.account = (JPALinkedAccount) account;\n+    }\n+\n+    @Override\n+    protected boolean addForMultiValue(final PlainAttrValue attrValue) {\n+        checkType(attrValue, JPALAPlainAttrValue.class);\n+        return values.add((JPALAPlainAttrValue) attrValue);\n+    }\n+\n+    @Override\n+    public List<? extends LAPlainAttrValue> getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public LAPlainAttrUniqueValue getUniqueValue() {\n+        return uniqueValue;\n+    }\n+\n+    @Override\n+    public void setUniqueValue(final PlainAttrUniqueValue uniqueValue) {\n+        checkType(uniqueValue, JPALAPlainAttrUniqueValue.class);\n+        this.uniqueValue = (JPALAPlainAttrUniqueValue) uniqueValue;\n+    }\n+}"},{"sha":"2b30506b92a0d3993178701e72b45de9b909d8c2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPALAPlainAttrUniqueValue.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttrUniqueValue.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+\n+@Entity\n+@Table(name = JPALAPlainAttrUniqueValue.TABLE)\n+public class JPALAPlainAttrUniqueValue extends AbstractPlainAttrValue implements LAPlainAttrUniqueValue {\n+\n+    private static final long serialVersionUID = 1200617357906733442L;\n+\n+    public static final String TABLE = \"LAPlainAttrUniqueValue\";\n+\n+    @OneToOne(optional = false)\n+    private JPALAPlainAttr attribute;\n+\n+    @ManyToOne(optional = false)\n+    @JoinColumn(name = \"schema_id\")\n+    private JPAPlainSchema schema;\n+\n+    @Override\n+    public LAPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, JPALAPlainAttr.class);\n+        this.attribute = (JPALAPlainAttr) attr;\n+    }\n+\n+    @Override\n+    public PlainSchema getSchema() {\n+        return schema;\n+    }\n+\n+    @Override\n+    public void setSchema(final PlainSchema schema) {\n+        checkType(schema, JPAPlainSchema.class);\n+        this.schema = (JPAPlainSchema) schema;\n+    }\n+}"},{"sha":"29ea455f7677d5dbcc06a15744fffa60cc5d10dd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPALAPlainAttrValue.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALAPlainAttrValue.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+\n+@Entity\n+@Table(name = JPALAPlainAttrValue.TABLE)\n+public class JPALAPlainAttrValue extends AbstractPlainAttrValue implements LAPlainAttrValue {\n+\n+    private static final long serialVersionUID = 6237793413044604262L;\n+\n+    public static final String TABLE = \"LAPlainAttrValue\";\n+\n+    @ManyToOne\n+    @NotNull\n+    private JPALAPlainAttr attribute;\n+\n+    @Override\n+    public LAPlainAttr getAttr() {\n+        return attribute;\n+    }\n+\n+    @Override\n+    public void setAttr(final PlainAttr<?> attr) {\n+        checkType(attr, JPALAPlainAttr.class);\n+        this.attribute = (JPALAPlainAttr) attr;\n+    }\n+}"},{"sha":"9175c7375bf32c2ef4ef04967ea31200679798be","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPALinkedAccount.java","status":"added","additions":214,"deletions":0,"changes":214,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPALinkedAccount.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.user;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n+import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPrivilege;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+\n+@Entity\n+@Table(name = JPALinkedAccount.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"connObjectName\", \"resource_id\" }))\n+public class JPALinkedAccount extends AbstractGeneratedKeyEntity implements LinkedAccount {\n+\n+    private static final long serialVersionUID = -5141654998687601522L;\n+\n+    public static final String TABLE = \"LinkedAccount\";\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n+    @NotNull\n+    private String connObjectName;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAUser owner;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAExternalResource resource;\n+\n+    private String username;\n+\n+    @Enumerated(EnumType.STRING)\n+    private CipherAlgorithm cipherAlgorithm;\n+\n+    @Column(nullable = true)\n+    private String password;\n+\n+    private Boolean suspended = false;\n+\n+    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"account\")\n+    @Valid\n+    private List<JPALAPlainAttr> plainAttrs = new ArrayList<>();\n+\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"linked_account_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"privilege_id\"),\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"linked_account_id\", \"privilege_id\" }))\n+    @Valid\n+    private Set<JPAPrivilege> privileges = new HashSet<>();\n+\n+    @Override\n+    public String getConnObjectName() {\n+        return connObjectName;\n+    }\n+\n+    @Override\n+    public void setConnObjectName(final String connObjectName) {\n+        this.connObjectName = connObjectName;\n+    }\n+\n+    @Override\n+    public User getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final User owner) {\n+        checkType(owner, JPAUser.class);\n+        this.owner = (JPAUser) owner;\n+    }\n+\n+    @Override\n+    public ExternalResource getResource() {\n+        return resource;\n+    }\n+\n+    @Override\n+    public void setResource(final ExternalResource resource) {\n+        checkType(resource, JPAExternalResource.class);\n+        this.resource = (JPAExternalResource) resource;\n+    }\n+\n+    @Override\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    @Override\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    @Override\n+    public CipherAlgorithm getCipherAlgorithm() {\n+        return cipherAlgorithm;\n+    }\n+\n+    @Override\n+    public boolean canDecodePassword() {\n+        return this.cipherAlgorithm != null && this.cipherAlgorithm.isInvertible();\n+    }\n+\n+    @Override\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    @Override\n+    public void setEncodedPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+        this.password = password;\n+        this.cipherAlgorithm = cipherAlgoritm;\n+    }\n+\n+    @Override\n+    public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n+        try {\n+            this.password = ENCRYPTOR.encode(password, cipherAlgoritm);\n+            this.cipherAlgorithm = cipherAlgoritm;\n+        } catch (Exception e) {\n+            LOG.error(\"Could not encode password\", e);\n+            this.password = null;\n+        }\n+    }\n+\n+    @Override\n+    public void setSuspended(final Boolean suspended) {\n+        this.suspended = suspended;\n+    }\n+\n+    @Override\n+    public Boolean isSuspended() {\n+        return suspended;\n+    }\n+\n+    @Override\n+    public boolean add(final LAPlainAttr attr) {\n+        checkType(attr, JPALAPlainAttr.class);\n+        return plainAttrs.add((JPALAPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public boolean remove(final LAPlainAttr attr) {\n+        checkType(attr, JPALAPlainAttr.class);\n+        return getPlainAttrs().remove((JPALAPlainAttr) attr);\n+    }\n+\n+    @Override\n+    public Optional<? extends LAPlainAttr> getPlainAttr(final String plainSchema) {\n+        return getPlainAttrs().stream().filter(plainAttr\n+                -> plainAttr != null && plainAttr.getSchema() != null\n+                && plainSchema.equals(plainAttr.getSchema().getKey())).findFirst();\n+    }\n+\n+    @Override\n+    public List<? extends LAPlainAttr> getPlainAttrs() {\n+        return plainAttrs;\n+    }\n+\n+    @Override\n+    public boolean add(final Privilege privilege) {\n+        checkType(privilege, JPAPrivilege.class);\n+        return privileges.add((JPAPrivilege) privilege);\n+    }\n+\n+    @Override\n+    public Set<? extends Privilege> getPrivileges() {\n+        return privileges;\n+    }\n+}"},{"sha":"3be472878701006dbabf2ede5e49f344b61ba588","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":30,"deletions":3,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -60,6 +60,7 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractGroupableRelatable;\n@@ -90,7 +91,8 @@\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"role_id\"),\n-            uniqueConstraints = @UniqueConstraint(columnNames = { \"user_id\", \"role_id\" }))\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"user_id\", \"role_id\" }))\n     private List<JPARole> roles = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n@@ -155,15 +157,17 @@\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"resource_id\"),\n-            uniqueConstraints = @UniqueConstraint(columnNames = { \"user_id\", \"resource_id\" }))\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"user_id\", \"resource_id\" }))\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n     @ManyToMany(fetch = FetchType.LAZY)\n     @JoinTable(joinColumns =\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"anyTypeClass_id\"),\n-            uniqueConstraints = @UniqueConstraint(columnNames = { \"user_id\", \"anyTypeClass_id\" }))\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"user_id\", \"anyTypeClass_id\" }))\n     private List<JPAAnyTypeClass> auxClasses = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"leftEnd\")\n@@ -180,6 +184,10 @@\n     @Column(nullable = true)\n     private String securityAnswer;\n \n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"owner\")\n+    @Valid\n+    private List<JPALinkedAccount> linkedAccounts = new ArrayList<>();\n+\n     @Override\n     public AnyType getType() {\n         return ApplicationContextProvider.getBeanFactory().getBean(AnyTypeDAO.class).findUser();\n@@ -456,4 +464,23 @@ public boolean remove(final UMembership membership) {\n     public List<? extends UMembership> getMemberships() {\n         return memberships;\n     }\n+\n+    @Override\n+    public boolean add(final LinkedAccount account) {\n+        checkType(account, JPALinkedAccount.class);\n+        return linkedAccounts.contains((JPALinkedAccount) account) || linkedAccounts.add((JPALinkedAccount) account);\n+    }\n+\n+    @Override\n+    public Optional<? extends LinkedAccount> getLinkedAccount(final String resource, final String connObjectName) {\n+        return linkedAccounts.stream().\n+                filter(account -> account.getResource().getKey().equals(resource)\n+                && account.getConnObjectName().equals(connObjectName)).\n+                findFirst();\n+    }\n+\n+    @Override\n+    public List<? extends LinkedAccount> getLinkedAccounts() {\n+        return linkedAccounts;\n+    }\n }"},{"sha":"1192a92ae9ee94e23fa6b7afa08efb58d2f48711","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/UserTest.java","status":"modified","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FUserTest.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -27,22 +27,35 @@\n \n import java.util.Date;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n import java.util.UUID;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RelationshipTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALAPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPALinkedAccount;\n+import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -68,6 +81,12 @@ public class UserTest extends AbstractTest {\n     @Autowired\n     private DerSchemaDAO derSchemaDAO;\n \n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ApplicationDAO applicationDAO;\n+\n     @Test\n     public void delete() {\n         List<UMembership> memberships = groupDAO.findUMemberships(groupDAO.findByName(\"managingDirector\"));\n@@ -213,6 +232,96 @@ public void membershipWithAttr() {\n         assertTrue(user.getPlainAttrs(\"obscure\").stream().anyMatch(plainAttr -> newM.equals(plainAttr.getMembership())));\n     }\n \n+    private LinkedAccount newLinkedAccount(final String connObjectName) {\n+        User user = userDAO.findByUsername(\"vivaldi\");\n+        user.getLinkedAccounts().stream().filter(Objects::nonNull).forEach(account -> account.setOwner(null));\n+        user.getLinkedAccounts().clear();\n+\n+        LinkedAccount account = entityFactory.newEntity(LinkedAccount.class);\n+        account.setOwner(user);\n+        user.add(account);\n+\n+        account.setConnObjectName(connObjectName);\n+        account.setResource(resourceDAO.find(\"resource-ldap\"));\n+        account.add(applicationDAO.findPrivilege(\"getMighty\"));\n+\n+        account.setUsername(UUID.randomUUID().toString());\n+        account.setPassword(\"Password123\", CipherAlgorithm.AES);\n+\n+        AnyUtils anyUtils = anyUtilsFactory.getLinkedAccountInstance();\n+        LAPlainAttr attr = anyUtils.newPlainAttr();\n+        attr.setOwner(user);\n+        attr.setAccount(account);\n+        account.add(attr);\n+        attr.setSchema(plainSchemaDAO.find(\"obscure\"));\n+        attr.add(\"testvalue\", anyUtils);\n+\n+        user = userDAO.save(user);\n+        entityManager().flush();\n+\n+        assertEquals(1, user.getLinkedAccounts().size());\n+\n+        return user.getLinkedAccounts().get(0);\n+    }\n+\n+    @Test\n+    public void findLinkedAccount() {\n+        LinkedAccount account = newLinkedAccount(\"findLinkedAccount\");\n+        assertNotNull(account.getKey());\n+        assertEquals(1, account.getPlainAttrs().size());\n+        assertTrue(account.getPlainAttr(\"obscure\").isPresent());\n+        assertEquals(account.getOwner(), account.getPlainAttr(\"obscure\").get().getOwner());\n+\n+        Optional<LinkedAccount> found = userDAO.findLinkedAccountByConnObjectName(account.getConnObjectName());\n+        assertTrue(found.isPresent());\n+        assertEquals(account, found.get());\n+\n+        List<LinkedAccount> accounts = userDAO.findLinkedAccountsByResource(resourceDAO.find(\"resource-ldap\"));\n+        assertEquals(1, accounts.size());\n+        assertEquals(account, accounts.get(0));\n+\n+        accounts = userDAO.findLinkedAccountsByPrivilege(applicationDAO.findPrivilege(\"getMighty\"));\n+        assertEquals(1, accounts.size());\n+        assertEquals(account, accounts.get(0));\n+    }\n+\n+    @Tag(\"plainAttrTable\")\n+    @Test\n+    public void deleteLinkedAccountUserCascade() {\n+        LinkedAccount account = newLinkedAccount(\"deleteLinkedAccountUserCascade\");\n+        assertNotNull(account.getKey());\n+\n+        LAPlainAttr plainAttr = account.getPlainAttrs().get(0);\n+        assertNotNull(entityManager().find(JPALAPlainAttr.class, plainAttr.getKey()));\n+\n+        PlainAttrValue plainAttrValue = account.getPlainAttrs().get(0).getValues().get(0);\n+        assertNotNull(entityManager().find(JPALAPlainAttrValue.class, plainAttrValue.getKey()));\n+\n+        LinkedAccount found = entityManager().find(JPALinkedAccount.class, account.getKey());\n+        assertEquals(account, found);\n+\n+        userDAO.delete(account.getOwner());\n+        entityManager().flush();\n+\n+        assertNull(entityManager().find(JPALinkedAccount.class, account.getKey()));\n+        assertNull(entityManager().find(JPALAPlainAttr.class, plainAttr.getKey()));\n+        assertNull(entityManager().find(JPALAPlainAttrValue.class, plainAttrValue.getKey()));\n+    }\n+\n+    @Test\n+    public void deleteLinkedAccountResourceCascade() {\n+        LinkedAccount account = newLinkedAccount(\"deleteLinkedAccountResourceCascade\");\n+        assertNotNull(account.getKey());\n+\n+        LinkedAccount found = entityManager().find(JPALinkedAccount.class, account.getKey());\n+        assertEquals(account, found);\n+\n+        resourceDAO.delete(account.getResource().getKey());\n+        entityManager().flush();\n+\n+        assertNull(entityManager().find(JPALinkedAccount.class, account.getKey()));\n+    }\n+\n     /**\n      * Search by derived attribute.\n      */"},{"sha":"c4ff0984f995464b5ca591011d8caabf82e865f5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AccountGetter.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FAccountGetter.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import java.util.function.Function;\n+import org.apache.syncope.core.persistence.api.entity.user.Account;\n+\n+public interface AccountGetter extends Function<Account, Account> {\n+\n+    AccountGetter DEFAULT = account -> account;\n+\n+}"},{"sha":"e5660f74452caa33cf59285f3e93d3f8ebea0d58","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/MappingManager.java","status":"modified","additions":32,"deletions":2,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FMappingManager.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -31,6 +31,8 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n public interface MappingManager {\n@@ -61,10 +63,18 @@ public interface MappingManager {\n      * @param intAttrName int attr name\n      * @param schemaType schema type\n      * @param any any object\n+     * @param accountGetter function to get actual account instance\n+     * @param plainAttrGetter function to get PlainAttr instances\n      * @return attribute values and their type\n      */\n     Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n-            Provision provision, Item mapItem, IntAttrName intAttrName, AttrSchemaType schemaType, Any<?> any);\n+            Provision provision,\n+            Item mapItem,\n+            IntAttrName intAttrName,\n+            AttrSchemaType schemaType,\n+            Any<?> any,\n+            AccountGetter accountGetter,\n+            PlainAttrGetter plainAttrGetter);\n \n     /**\n      * Prepare attribute for sending to a connector instance.\n@@ -73,9 +83,16 @@ Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n      * @param item mapping item\n      * @param any given any object\n      * @param password clear-text password\n+     * @param accountGetter function to get actual account instance\n+     * @param plainAttrGetter function to get PlainAttr instances\n      * @return connObjectLink (if it is the case) + prepared attribute\n      */\n-    Pair<String, Attribute> prepareAttr(Provision provision, Item item, Any<?> any, String password);\n+    Pair<String, Attribute> prepareAttr(\n+            Provision provision,\n+            Item item, Any<?> any,\n+            String password,\n+            AccountGetter accountGetter,\n+            PlainAttrGetter plainAttrGetter);\n \n     /**\n      * Prepare attributes for sending to a connector instance.\n@@ -90,6 +107,19 @@ Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n     Pair<String, Set<Attribute>> prepareAttrs(\n             Any<?> any, String password, boolean changePwd, Boolean enable, Provision provision);\n \n+    /**\n+     * Prepare attributes for sending to a connector instance.\n+     *\n+     * @param user given user\n+     * @param account linked account\n+     * @param password clear-text password\n+     * @param changePwd whether password should be included for propagation attributes or not\n+     * @param provision provision information\n+     * @return prepared attributes\n+     */\n+    Set<Attribute> prepareAttrs(\n+            User user, LinkedAccount account, String password, boolean changePwd, Provision provision);\n+\n     /**\n      * Prepare attributes for sending to a connector instance.\n      *"},{"sha":"763ad1002dcffcb26060f672ac63b1609be09d5c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PlainAttrGetter.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPlainAttrGetter.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import java.util.function.BiFunction;\n+import org.apache.syncope.core.persistence.api.entity.Attributable;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+\n+public interface PlainAttrGetter extends BiFunction<Attributable<? extends PlainAttr<?>>, String, PlainAttr<?>> {\n+\n+    PlainAttrGetter DEFAULT = (attributable, schema) -> attributable.getPlainAttr(schema).orElse(null);\n+\n+}"},{"sha":"31b67f6d626da9e2cb1a89b1b77f264691ec4048","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PropagationByResource.java","status":"modified","additions":41,"deletions":39,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -29,25 +29,27 @@\n \n /**\n  * Encapsulates operations to be performed on various resources.\n+ *\n+ * @param <T> key for propagation: could be simple resource or pair (resource, connObjectName) for linked accounts\n  */\n-public class PropagationByResource implements Serializable {\n+public class PropagationByResource<T extends Serializable> implements Serializable {\n \n     private static final long serialVersionUID = -5699740428104336636L;\n \n     /**\n      * Resources for creation.\n      */\n-    private final Set<String> toBeCreated;\n+    private final Set<T> toBeCreated;\n \n     /**\n      * Resources for update.\n      */\n-    private final Set<String> toBeUpdated;\n+    private final Set<T> toBeUpdated;\n \n     /**\n      * Resources for deletion.\n      */\n-    private final Set<String> toBeDeleted;\n+    private final Set<T> toBeDeleted;\n \n     /**\n      * Mapping target resource names to old ConnObjectKeys (when applicable).\n@@ -80,11 +82,11 @@ public final void purge() {\n      * Add an element.\n      *\n      * @param type resource operation type\n-     * @param resourceKey target resource\n+     * @param key target resource\n      * @return whether the operation was successful or not\n      */\n-    public final boolean add(final ResourceOperation type, final String resourceKey) {\n-        Set<String> set;\n+    public final boolean add(final ResourceOperation type, final T key) {\n+        Set<T> set;\n         switch (type) {\n             case CREATE:\n                 set = toBeCreated;\n@@ -100,18 +102,18 @@ public final boolean add(final ResourceOperation type, final String resourceKey)\n                 break;\n         }\n \n-        return set.add(resourceKey);\n+        return set.add(key);\n     }\n \n     /**\n      * Add some elements.\n      *\n      * @param type resource operation type\n-     * @param resourceKeys target resources\n+     * @param keys target resources\n      * @return whether the operation was successful or not\n      */\n-    public boolean addAll(final ResourceOperation type, final Collection<String> resourceKeys) {\n-        Set<String> set;\n+    public boolean addAll(final ResourceOperation type, final Collection<T> keys) {\n+        Set<T> set;\n         switch (type) {\n             case CREATE:\n                 set = toBeCreated;\n@@ -127,30 +129,30 @@ public boolean addAll(final ResourceOperation type, final Collection<String> res\n                 break;\n         }\n \n-        return set.addAll(resourceKeys);\n+        return set.addAll(keys);\n     }\n \n     /**\n      * Remove an element.\n      *\n      * @param type resource operation type\n-     * @param resourceKey target resource\n+     * @param key target resource\n      * @return whether the operation was successful or not\n      */\n-    public final boolean remove(final ResourceOperation type, final String resourceKey) {\n+    public final boolean remove(final ResourceOperation type, final T key) {\n         boolean result = false;\n \n         switch (type) {\n             case CREATE:\n-                result = toBeCreated.remove(resourceKey);\n+                result = toBeCreated.remove(key);\n                 break;\n \n             case UPDATE:\n-                result = toBeUpdated.remove(resourceKey);\n+                result = toBeUpdated.remove(key);\n                 break;\n \n             case DELETE:\n-                result = toBeDeleted.remove(resourceKey);\n+                result = toBeDeleted.remove(key);\n                 break;\n \n             default:\n@@ -163,11 +165,11 @@ public final boolean remove(final ResourceOperation type, final String resourceK\n      * Remove some elements.\n      *\n      * @param type resource operation type\n-     * @param resourceKeys target resources\n+     * @param keys target resources\n      * @return whether the operation was successful or not\n      */\n-    public boolean removeAll(final ResourceOperation type, final Set<String> resourceKeys) {\n-        Set<String> set;\n+    public boolean removeAll(final ResourceOperation type, final Set<T> keys) {\n+        Set<T> set;\n         switch (type) {\n             case CREATE:\n                 set = toBeCreated;\n@@ -183,7 +185,7 @@ public boolean removeAll(final ResourceOperation type, final Set<String> resourc\n                 break;\n         }\n \n-        return set.removeAll(resourceKeys);\n+        return set.removeAll(keys);\n     }\n \n     /**\n@@ -214,20 +216,20 @@ public boolean retainAll(final Collection<String> resourceKeys) {\n                 | toBeDeleted.retainAll(resourceKeys);\n     }\n \n-    public boolean contains(final ResourceOperation type, final String resourceKey) {\n+    public boolean contains(final ResourceOperation type, final T key) {\n         boolean result = false;\n \n         switch (type) {\n             case CREATE:\n-                result = toBeCreated.contains(resourceKey);\n+                result = toBeCreated.contains(key);\n                 break;\n \n             case UPDATE:\n-                result = toBeUpdated.contains(resourceKey);\n+                result = toBeUpdated.contains(key);\n                 break;\n \n             case DELETE:\n-                result = toBeDeleted.contains(resourceKey);\n+                result = toBeDeleted.contains(key);\n                 break;\n \n             default:\n@@ -236,10 +238,10 @@ public boolean contains(final ResourceOperation type, final String resourceKey)\n         return result;\n     }\n \n-    public boolean contains(final String resourceKey) {\n-        return toBeCreated.contains(resourceKey)\n-                || toBeUpdated.contains(resourceKey)\n-                || toBeDeleted.contains(resourceKey);\n+    public boolean contains(final T key) {\n+        return toBeCreated.contains(key)\n+                || toBeUpdated.contains(key)\n+                || toBeDeleted.contains(key);\n     }\n \n     /**\n@@ -248,8 +250,8 @@ public boolean contains(final String resourceKey) {\n      * @param type resource operation type\n      * @return resource matching the given type\n      */\n-    public final Set<String> get(final ResourceOperation type) {\n-        Set<String> result = Set.of();\n+    public final Set<T> get(final ResourceOperation type) {\n+        Set<T> result = Set.of();\n \n         switch (type) {\n             case CREATE:\n@@ -270,8 +272,8 @@ public final Set<String> get(final ResourceOperation type) {\n         return result;\n     }\n \n-    public Map<String, ResourceOperation> asMap() {\n-        Map<String, ResourceOperation> result = new HashMap<>();\n+    public Map<T, ResourceOperation> asMap() {\n+        Map<T, ResourceOperation> result = new HashMap<>();\n         Stream.of(ResourceOperation.values()).\n                 forEach(operation -> get(operation).forEach(resource -> result.put(resource, operation)));\n \n@@ -282,24 +284,24 @@ public Map<String, ResourceOperation> asMap() {\n      * Set resources for a given resource operation type.\n      *\n      * @param type resource operation type\n-     * @param resourceKeys to be set\n+     * @param keys to be set\n      */\n-    public final void set(final ResourceOperation type, final Collection<String> resourceKeys) {\n+    public final void set(final ResourceOperation type, final Collection<T> keys) {\n \n         switch (type) {\n             case CREATE:\n                 toBeCreated.clear();\n-                toBeCreated.addAll(resourceKeys);\n+                toBeCreated.addAll(keys);\n                 break;\n \n             case UPDATE:\n                 toBeUpdated.clear();\n-                toBeUpdated.addAll(resourceKeys);\n+                toBeUpdated.addAll(keys);\n                 break;\n \n             case DELETE:\n                 toBeDeleted.clear();\n-                toBeDeleted.addAll(resourceKeys);\n+                toBeDeleted.addAll(keys);\n                 break;\n \n             default:\n@@ -311,7 +313,7 @@ public final void set(final ResourceOperation type, final Collection<String> res\n      *\n      * @param propByRes to be merged\n      */\n-    public final void merge(final PropagationByResource propByRes) {\n+    public final void merge(final PropagationByResource<T> propByRes) {\n         if (propByRes != null) {\n             toBeCreated.addAll(propByRes.get(ResourceOperation.CREATE));\n             toBeUpdated.addAll(propByRes.get(ResourceOperation.UPDATE));"},{"sha":"80c97d35ebd38f154de1b2721daa4fea476bce97","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/UserWorkflowResult.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserWorkflowResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserWorkflowResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FUserWorkflowResult.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api;\n+\n+import java.util.Set;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+public class UserWorkflowResult<T> extends WorkflowResult<T> {\n+\n+    private final PropagationByResource<Pair<String, String>> propByLinkedAccount;\n+\n+    public UserWorkflowResult(\n+            final T result,\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n+            final String performedTask) {\n+\n+        super(result, propByRes, performedTask);\n+        this.propByLinkedAccount = propByLinkedAccount;\n+    }\n+\n+    public UserWorkflowResult(\n+            final T result,\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n+            final Set<String> performedTasks) {\n+\n+        super(result, propByRes, performedTasks);\n+        this.propByLinkedAccount = propByLinkedAccount;\n+    }\n+\n+    public PropagationByResource<Pair<String, String>> getPropByLinkedAccount() {\n+        return propByLinkedAccount;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(propByLinkedAccount).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        final UserWorkflowResult<T> other = (UserWorkflowResult<T>) obj;\n+        return new EqualsBuilder().\n+                appendSuper(true).\n+                append(propByLinkedAccount, other.propByLinkedAccount).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this).\n+                appendSuper(super.toString()).\n+                append(propByLinkedAccount).\n+                build();\n+    }\n+}"},{"sha":"335b0fb2ddf014683b8d0753ff22574536bcf196","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/WorkflowResult.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FWorkflowResult.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -28,17 +28,25 @@\n \n     private T result;\n \n-    private PropagationByResource propByRes;\n+    private PropagationByResource<String> propByRes;\n \n     private final Set<String> performedTasks = new HashSet<>();\n \n-    public WorkflowResult(final T result, final PropagationByResource propByRes, final String performedTask) {\n+    public WorkflowResult(\n+            final T result,\n+            final PropagationByResource<String> propByRes,\n+            final String performedTask) {\n+\n         this.result = result;\n         this.propByRes = propByRes;\n         this.performedTasks.add(performedTask);\n     }\n \n-    public WorkflowResult(final T result, final PropagationByResource propByRes, final Set<String> performedTasks) {\n+    public WorkflowResult(\n+            final T result,\n+            final PropagationByResource<String> propByRes,\n+            final Set<String> performedTasks) {\n+\n         this.result = result;\n         this.propByRes = propByRes;\n         this.performedTasks.addAll(performedTasks);\n@@ -56,14 +64,10 @@ public Set<String> getPerformedTasks() {\n         return performedTasks;\n     }\n \n-    public PropagationByResource getPropByRes() {\n+    public PropagationByResource<String> getPropByRes() {\n         return propByRes;\n     }\n \n-    public void setPropByRes(final PropagationByResource propByRes) {\n-        this.propByRes = propByRes;\n-    }\n-\n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder()."},{"sha":"2238a6ee0acdd5cd1065fea98ebe2071fa6fdae8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AnyObjectDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAnyObjectDataBinder.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -32,5 +32,5 @@ public interface AnyObjectDataBinder {\n \n     void create(AnyObject anyObject, AnyObjectCR anyObjectCR);\n \n-    PropagationByResource update(AnyObject toBeUpdated, AnyObjectUR anyObjectUR);\n+    PropagationByResource<String> update(AnyObject toBeUpdated, AnyObjectUR anyObjectUR);\n }"},{"sha":"1dea26b6b4408f56a03dbbe3de0872c8160212aa","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/GroupDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -37,7 +37,7 @@ public interface GroupDataBinder {\n \n     void create(Group group, GroupCR groupCR);\n \n-    PropagationByResource update(Group group, GroupUR groupUR);\n+    PropagationByResource<String> update(Group group, GroupUR groupUR);\n \n     /**\n      * Finds any objects having resources assigned exclusively because of memberships of the given group.\n@@ -46,7 +46,7 @@ public interface GroupDataBinder {\n      * @return map containing pairs with any object key and operations to be performed on those resources (DELETE,\n      * typically).\n      */\n-    Map<String, PropagationByResource> findAnyObjectsWithTransitiveResources(String groupKey);\n+    Map<String, PropagationByResource<String>> findAnyObjectsWithTransitiveResources(String groupKey);\n \n     /**\n      * Finds users having resources assigned exclusively because of memberships of the given group.\n@@ -55,5 +55,5 @@ public interface GroupDataBinder {\n      * @return map containing pairs with user key and operations to be performed on those resources (DELETE,\n      * typically).\n      */\n-    Map<String, PropagationByResource> findUsersWithTransitiveResources(String groupKey);\n+    Map<String, PropagationByResource<String>> findUsersWithTransitiveResources(String groupKey);\n }"},{"sha":"59d2b2a187f1c287b3948e61fd465b90b1e5e5b8","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RealmDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRealmDataBinder.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -26,8 +26,7 @@ public interface RealmDataBinder {\n \n     Realm create(Realm parent, RealmTO realmTO);\n \n-    PropagationByResource update(Realm realm, RealmTO realmTO);\n+    PropagationByResource<String> update(Realm realm, RealmTO realmTO);\n \n     RealmTO getRealmTO(Realm realm, boolean admin);\n-\n }"},{"sha":"a293dd770f49eaa3aa4eca7acaacf122fd8907ea","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -44,5 +45,6 @@ public interface UserDataBinder {\n      * @return updated user + propagation by resource\n      * @see PropagationByResource\n      */\n-    PropagationByResource update(User toBeUpdated, UserUR userUR);\n+    Pair<PropagationByResource<String>, PropagationByResource<Pair<String, String>>> update(\n+            User toBeUpdated, UserUR userUR);\n }"},{"sha":"ebabaa1b487989850650786d25260b50db65520f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":25,"deletions":8,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n \n public interface PropagationManager {\n \n@@ -45,7 +45,7 @@ List<PropagationTaskInfo> getCreateTasks(\n             AnyTypeKind kind,\n             String key,\n             Boolean enable,\n-            PropagationByResource propByRes,\n+            PropagationByResource<String> propByRes,\n             Collection<Attr> vAttrs,\n             Collection<String> noPropResourceKeys);\n \n@@ -56,6 +56,7 @@ List<PropagationTaskInfo> getCreateTasks(\n      * @param password to be set\n      * @param enable whether user must be enabled or not\n      * @param propByRes operation to be performed per resource\n+     * @param propByLinkedAccount operation to be performed for linked accounts\n      * @param vAttrs virtual attributes to be set\n      * @param noPropResourceKeys external resources not to be considered for propagation\n      * @return list of propagation tasks\n@@ -64,7 +65,8 @@ List<PropagationTaskInfo> getUserCreateTasks(\n             String key,\n             String password,\n             Boolean enable,\n-            PropagationByResource propByRes,\n+            PropagationByResource<String> propByRes,\n+            PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             Collection<Attr> vAttrs,\n             Collection<String> noPropResourceKeys);\n \n@@ -85,7 +87,7 @@ List<PropagationTaskInfo> getUpdateTasks(\n             String key,\n             boolean changePwd,\n             Boolean enable,\n-            PropagationByResource propByRes,\n+            PropagationByResource<String> propByRes,\n             Collection<Attr> vAttrs,\n             Collection<String> noPropResourceKeys);\n \n@@ -98,7 +100,7 @@ List<PropagationTaskInfo> getUpdateTasks(\n      * @return list of propagation tasks\n      */\n     List<PropagationTaskInfo> getUserUpdateTasks(\n-            WorkflowResult<Pair<UserUR, Boolean>> wfResult,\n+            UserWorkflowResult<Pair<UserUR, Boolean>> wfResult,\n             boolean changePwd,\n             Collection<String> noPropResourceKeys);\n \n@@ -109,7 +111,7 @@ List<PropagationTaskInfo> getUserUpdateTasks(\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @return list of propagation tasks\n      */\n-    List<PropagationTaskInfo> getUserUpdateTasks(WorkflowResult<Pair<UserUR, Boolean>> wfResult);\n+    List<PropagationTaskInfo> getUserUpdateTasks(UserWorkflowResult<Pair<UserUR, Boolean>> wfResult);\n \n     /**\n      * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceKeys}.\n@@ -123,7 +125,22 @@ List<PropagationTaskInfo> getUserUpdateTasks(\n     List<PropagationTaskInfo> getDeleteTasks(\n             AnyTypeKind kind,\n             String key,\n-            PropagationByResource propByRes,\n+            PropagationByResource<String> propByRes,\n+            Collection<String> noPropResourceKeys);\n+\n+    /**\n+     * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceKeys}.\n+     *\n+     * @param key any object key\n+     * @param propByRes operation to be performed per resource\n+     * @param propByLinkedAccount operation to be performed for linked accounts\n+     * @param noPropResourceKeys external resource keys not to be considered for propagation\n+     * @return list of propagation tasks\n+     */\n+    List<PropagationTaskInfo> getUserDeleteTasks(\n+            String key,\n+            PropagationByResource<String> propByRes,\n+            PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             Collection<String> noPropResourceKeys);\n \n     /**\n@@ -136,6 +153,6 @@ List<PropagationTaskInfo> getDeleteTasks(\n      */\n     List<PropagationTaskInfo> createTasks(\n             Realm realm,\n-            PropagationByResource propByRes,\n+            PropagationByResource<String> propByRes,\n             Collection<String> noPropResourceKeys);\n }"},{"sha":"20460fa57ef825133b85b0adcddfa1b32419541d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -123,7 +123,7 @@ public List<PropagationStatus> delete(final String key, final boolean nullPriori\n     public List<PropagationStatus> delete(\n             final String key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.DELETE, anyObjectDAO.findAllResourceKeys(key));\n \n         // Note here that we can only notify about \"delete\", not any other\n@@ -161,7 +161,7 @@ public String link(final AnyObjectUR anyObjectUR) {\n     public List<PropagationStatus> provision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n@@ -181,7 +181,7 @@ public List<PropagationStatus> provision(\n     public List<PropagationStatus> deprovision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks("},{"sha":"24fbe1c56c2d9a9d1dd61fab48eb218d55802c62","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -185,7 +185,7 @@ public String unlink(final GroupUR groupUR) {\n     public List<PropagationStatus> provision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n@@ -205,7 +205,7 @@ public List<PropagationStatus> provision(\n     public List<PropagationStatus> deprovision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, resources);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks("},{"sha":"7f4e9cdb78ee69412a0d48ac9553c90a0fbb6054","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":38,"deletions":28,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -23,7 +23,6 @@\n import java.util.List;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StatusR;\n@@ -36,7 +35,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.StatusRType;\n@@ -87,13 +86,14 @@ public Pair<String, List<PropagationStatus>> create(\n             final Set<String> excludedResources,\n             final boolean nullPriorityAsync) {\n \n-        WorkflowResult<Pair<String, Boolean>> created = uwfAdapter.create(userCR, disablePwdPolicyCheck, enabled);\n+        UserWorkflowResult<Pair<String, Boolean>> created = uwfAdapter.create(userCR, disablePwdPolicyCheck, enabled);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserCreateTasks(\n                 created.getResult().getLeft(),\n                 userCR.getPassword(),\n                 created.getResult().getRight(),\n                 created.getPropByRes(),\n+                created.getPropByLinkedAccount(),\n                 userCR.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n@@ -103,7 +103,7 @@ public Pair<String, List<PropagationStatus>> create(\n \n     @Override\n     public Pair<UserUR, List<PropagationStatus>> update(final UserUR userUR, final boolean nullPriorityAsync) {\n-        WorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.update(userUR);\n+        UserWorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.update(userUR);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n@@ -127,7 +127,7 @@ public Pair<UserUR, List<PropagationStatus>> update(\n             final Set<String> excludedResources,\n             final boolean nullPriorityAsync) {\n \n-        WorkflowResult<Pair<UserUR, Boolean>> updated;\n+        UserWorkflowResult<Pair<UserUR, Boolean>> updated;\n         try {\n             updated = uwfAdapter.update(userUR);\n         } catch (Exception e) {\n@@ -137,15 +137,17 @@ public Pair<UserUR, List<PropagationStatus>> update(\n             result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to pull status anyway (if configured)\\n\" + e.getMessage());\n \n-            updated = new WorkflowResult<>(\n-                    Pair.of(userUR, false), new PropagationByResource(),\n+            updated = new UserWorkflowResult<>(\n+                    Pair.of(userUR, false),\n+                    new PropagationByResource<>(),\n+                    new PropagationByResource<>(),\n                     new HashSet<>());\n         }\n \n         if (enabled != null) {\n             User user = userDAO.find(userUR.getKey());\n \n-            WorkflowResult<String> enableUpdate = null;\n+            UserWorkflowResult<String> enableUpdate = null;\n             if (user.isSuspended() == null) {\n                 enableUpdate = uwfAdapter.activate(userUR.getKey(), null);\n             } else if (enabled && user.isSuspended()) {\n@@ -180,18 +182,23 @@ public List<PropagationStatus> delete(final String key, final boolean nullPriori\n     public List<PropagationStatus> delete(\n             final String key, final Set<String> excludedResources, final boolean nullPriorityAsync) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceKeys(key));\n \n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        userDAO.findLinkedAccounts(key).forEach(account -> propByLinkedAccount.add(\n+                ResourceOperation.DELETE,\n+                Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+\n         // Note here that we can only notify about \"delete\", not any other\n         // task defined in workflow process definition: this because this\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n-                AnyTypeKind.USER,\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserDeleteTasks(\n                 key,\n                 propByRes,\n+                propByLinkedAccount,\n                 excludedResources);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n \n@@ -206,7 +213,7 @@ public List<PropagationStatus> delete(\n \n     @Override\n     public String unlink(final UserUR userUR) {\n-        WorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.update(userUR);\n+        UserWorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.update(userUR);\n         return updated.getResult().getLeft().getKey();\n     }\n \n@@ -217,35 +224,36 @@ public String link(final UserUR userUR) {\n \n     @Override\n     public Pair<String, List<PropagationStatus>> activate(final StatusR statusR, final boolean nullPriorityAsync) {\n-        WorkflowResult<String> updated = statusR.isOnSyncope()\n+        UserWorkflowResult<String> updated = statusR.isOnSyncope()\n                 ? uwfAdapter.activate(statusR.getKey(), statusR.getToken())\n-                : new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n+                : new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n \n         return Pair.of(updated.getResult(), propagateStatus(statusR, nullPriorityAsync));\n     }\n \n     @Override\n     public Pair<String, List<PropagationStatus>> reactivate(final StatusR statusR, final boolean nullPriorityAsync) {\n-        WorkflowResult<String> updated = statusR.isOnSyncope()\n+        UserWorkflowResult<String> updated = statusR.isOnSyncope()\n                 ? uwfAdapter.reactivate(statusR.getKey())\n-                : new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n+                : new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n \n         return Pair.of(updated.getResult(), propagateStatus(statusR, nullPriorityAsync));\n     }\n \n     @Override\n     public Pair<String, List<PropagationStatus>> suspend(final StatusR statusR, final boolean nullPriorityAsync) {\n-        WorkflowResult<String> updated = statusR.isOnSyncope()\n+        UserWorkflowResult<String> updated = statusR.isOnSyncope()\n                 ? uwfAdapter.suspend(statusR.getKey())\n-                : new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n+                : new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n \n         return Pair.of(updated.getResult(), propagateStatus(statusR, nullPriorityAsync));\n     }\n \n     protected List<PropagationStatus> propagateStatus(final StatusR statusR, final boolean nullPriorityAsync) {\n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.UPDATE, statusR.getResources());\n-        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(AnyTypeKind.USER,\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUpdateTasks(\n+                AnyTypeKind.USER,\n                 statusR.getKey(),\n                 false,\n                 statusR.getType() != StatusRType.SUSPEND,\n@@ -259,16 +267,18 @@ protected List<PropagationStatus> propagateStatus(final StatusR statusR, final b\n \n     @Override\n     public void internalSuspend(final String key) {\n-        Pair<WorkflowResult<String>, Boolean> updated = uwfAdapter.internalSuspend(key);\n+        Pair<UserWorkflowResult<String>, Boolean> updated = uwfAdapter.internalSuspend(key);\n \n         // propagate suspension if and only if it is required by policy\n         if (updated != null && updated.getRight()) {\n             UserUR userUR = new UserUR();\n             userUR.setKey(updated.getLeft().getResult());\n \n-            List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(new WorkflowResult<>(\n+            List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(new UserWorkflowResult<>(\n                     Pair.of(userUR, Boolean.FALSE),\n-                    updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n+                    updated.getLeft().getPropByRes(),\n+                    updated.getLeft().getPropByLinkedAccount(),\n+                    updated.getLeft().getPerformedTasks()));\n             taskExecutor.execute(taskInfos, false);\n         }\n     }\n@@ -295,11 +305,11 @@ public List<PropagationStatus> provision(\n             userUR.setPassword(passwordPatch);\n         }\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        WorkflowResult<Pair<UserUR, Boolean>> wfResult = new WorkflowResult<>(\n-                ImmutablePair.of(userUR, (Boolean) null), propByRes, \"update\");\n+        UserWorkflowResult<Pair<UserUR, Boolean>> wfResult = new UserWorkflowResult<>(\n+                Pair.of(userUR, (Boolean) null), propByRes, null, \"update\");\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(wfResult, changePwd, null);\n         PropagationReporter propagationReporter = taskExecutor.execute(taskInfos, nullPriorityAsync);\n@@ -311,7 +321,7 @@ public List<PropagationStatus> provision(\n     public List<PropagationStatus> deprovision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.DELETE, resources);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getDeleteTasks(\n@@ -333,7 +343,7 @@ public void requestPasswordReset(final String key) {\n \n     @Override\n     public void confirmPasswordReset(final String key, final String token, final String password) {\n-        WorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.confirmPasswordReset(key, token, password);\n+        UserWorkflowResult<Pair<UserUR, Boolean>> updated = uwfAdapter.confirmPasswordReset(key, token, password);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(updated);\n "},{"sha":"2f3f78a9fd460dd4cd2bd7259f715ab6183c918e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":202,"deletions":77,"changes":279,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -55,6 +55,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.Application;\n+import org.apache.syncope.core.persistence.api.entity.Attributable;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.GroupableRelatable;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n@@ -73,10 +74,15 @@\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.Account;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.AccountGetter;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.PlainAttrGetter;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.api.cache.VirAttrCache;\n import org.apache.syncope.core.provisioning.java.utils.ConnObjectUtils;\n@@ -143,6 +149,39 @@ public class MappingManagerImpl implements MappingManager {\n     @Autowired\n     private IntAttrNameParser intAttrNameParser;\n \n+    protected String processPreparedAttr(final Pair<String, Attribute> preparedAttr, final Set<Attribute> attributes) {\n+        String connObjectKey = null;\n+\n+        if (preparedAttr != null) {\n+            if (preparedAttr.getLeft() != null) {\n+                connObjectKey = preparedAttr.getLeft();\n+            }\n+\n+            if (preparedAttr.getRight() != null) {\n+                Attribute alreadyAdded = AttributeUtil.find(preparedAttr.getRight().getName(), attributes);\n+\n+                if (alreadyAdded == null) {\n+                    attributes.add(preparedAttr.getRight());\n+                } else {\n+                    attributes.remove(alreadyAdded);\n+\n+                    Set<Object> values = new HashSet<>();\n+                    if (alreadyAdded.getValue() != null && !alreadyAdded.getValue().isEmpty()) {\n+                        values.addAll(alreadyAdded.getValue());\n+                    }\n+\n+                    if (preparedAttr.getRight().getValue() != null) {\n+                        values.addAll(preparedAttr.getRight().getValue());\n+                    }\n+\n+                    attributes.add(AttributeBuilder.build(preparedAttr.getRight().getName(), values));\n+                }\n+            }\n+        }\n+\n+        return connObjectKey;\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public Pair<String, Set<Attribute>> prepareAttrs(\n@@ -162,32 +201,17 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n             LOG.debug(\"Processing expression '{}'\", mapItem.getIntAttrName());\n \n             try {\n-                Pair<String, Attribute> preparedAttr = prepareAttr(provision, mapItem, any, password);\n-                if (preparedAttr != null) {\n-                    if (preparedAttr.getLeft() != null) {\n-                        connObjectKey = preparedAttr.getLeft();\n-                    }\n-\n-                    if (preparedAttr.getRight() != null) {\n-                        Attribute alreadyAdded = AttributeUtil.find(preparedAttr.getRight().getName(), attributes);\n-\n-                        if (alreadyAdded == null) {\n-                            attributes.add(preparedAttr.getRight());\n-                        } else {\n-                            attributes.remove(alreadyAdded);\n-\n-                            Set<Object> values = new HashSet<>();\n-                            if (alreadyAdded.getValue() != null && !alreadyAdded.getValue().isEmpty()) {\n-                                values.addAll(alreadyAdded.getValue());\n-                            }\n-\n-                            if (preparedAttr.getRight().getValue() != null) {\n-                                values.addAll(preparedAttr.getRight().getValue());\n-                            }\n-\n-                            attributes.add(AttributeBuilder.build(preparedAttr.getRight().getName(), values));\n-                        }\n-                    }\n+                String processedConnObjectKey = processPreparedAttr(\n+                        prepareAttr(\n+                                provision,\n+                                mapItem,\n+                                any,\n+                                password,\n+                                AccountGetter.DEFAULT,\n+                                PlainAttrGetter.DEFAULT),\n+                        attributes);\n+                if (processedConnObjectKey != null) {\n+                    connObjectKey = processedConnObjectKey;\n                 }\n             } catch (Exception e) {\n                 LOG.error(\"Expression '{}' processing failed\", mapItem.getIntAttrName(), e);\n@@ -221,7 +245,81 @@ public Pair<String, Set<Attribute>> prepareAttrs(\n         return Pair.of(connObjectKey, attributes);\n     }\n \n-    private static String getIntValue(final Realm realm, final Item orgUnitItem) {\n+    @Transactional(readOnly = true)\n+    @Override\n+    public Set<Attribute> prepareAttrs(\n+            final User user,\n+            final LinkedAccount account,\n+            final String password,\n+            final boolean changePwd,\n+            final Provision provision) {\n+\n+        LOG.debug(\"Preparing resource attributes for linked account {} of user {} with provision {} \"\n+                + \"for user attributes {} with override {}\",\n+                account, user, provision, user.getPlainAttrs(), account.getPlainAttrs());\n+\n+        Set<Attribute> attributes = new HashSet<>();\n+\n+        for (Item mapItem : MappingUtils.getPropagationItems(provision.getMapping().getItems())) {\n+            LOG.debug(\"Processing expression '{}'\", mapItem.getIntAttrName());\n+\n+            try {\n+                processPreparedAttr(\n+                        prepareAttr(\n+                                provision,\n+                                mapItem,\n+                                user,\n+                                password,\n+                                acct -> account.getUsername() == null\n+                                ? AccountGetter.DEFAULT.apply(acct)\n+                                : account,\n+                                (attributable, schema) -> {\n+                                    PlainAttr<?> result = null;\n+                                    if (attributable instanceof User) {\n+                                        Optional<? extends LAPlainAttr> accountAttr = account.getPlainAttr(schema);\n+                                        if (accountAttr.isPresent()) {\n+                                            result = accountAttr.get();\n+                                        }\n+                                    }\n+                                    if (result == null) {\n+                                        result = PlainAttrGetter.DEFAULT.apply(attributable, schema);\n+                                    }\n+                                    return result;\n+                                }),\n+                        attributes);\n+            } catch (Exception e) {\n+                LOG.error(\"Expression '{}' processing failed\", mapItem.getIntAttrName(), e);\n+            }\n+        }\n+\n+        String connObjectKey = account.getConnObjectName();\n+        MappingUtils.getConnObjectKeyItem(provision).ifPresent(connObjectKeyItem -> {\n+            Attribute connObjectKeyExtAttr = AttributeUtil.find(connObjectKeyItem.getExtAttrName(), attributes);\n+            if (connObjectKeyExtAttr != null) {\n+                attributes.remove(connObjectKeyExtAttr);\n+                attributes.add(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKey));\n+            }\n+            Name name = MappingUtils.evaluateNAME(user, provision, connObjectKey);\n+            attributes.add(name);\n+            if (!connObjectKey.equals(name.getNameValue()) && connObjectKeyExtAttr == null) {\n+                attributes.add(AttributeBuilder.build(connObjectKeyItem.getExtAttrName(), connObjectKey));\n+            }\n+        });\n+\n+        if (account.isSuspended() != null) {\n+            attributes.add(AttributeBuilder.buildEnabled(!BooleanUtils.negate(account.isSuspended())));\n+        }\n+        if (!changePwd) {\n+            Attribute pwdAttr = AttributeUtil.find(OperationalAttributes.PASSWORD_NAME, attributes);\n+            if (pwdAttr != null) {\n+                attributes.remove(pwdAttr);\n+            }\n+        }\n+\n+        return attributes;\n+    }\n+\n+    private String getIntValue(final Realm realm, final Item orgUnitItem) {\n         String value = null;\n         switch (orgUnitItem.getIntAttrName()) {\n             case \"key\":\n@@ -291,12 +389,35 @@ public Pair<String, Set<Attribute>> prepareAttrs(final Realm realm, final OrgUni\n         return Pair.of(connObjectKey, attributes);\n     }\n \n+    protected String getPasswordAttrValue(final Provision provision, final Account account, final String defaultValue) {\n+        String passwordAttrValue = defaultValue;\n+        if (StringUtils.isBlank(passwordAttrValue)) {\n+            if (account.canDecodePassword()) {\n+                try {\n+                    passwordAttrValue = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not decode password for {}\", account, e);\n+                }\n+            } else if (provision.getResource().isRandomPwdIfNotProvided()) {\n+                try {\n+                    passwordAttrValue = passwordGenerator.generate(provision.getResource());\n+                } catch (InvalidPasswordRuleConf e) {\n+                    LOG.error(\"Could not generate policy-compliant random password for {}\", account, e);\n+                }\n+            }\n+        }\n+\n+        return passwordAttrValue;\n+    }\n+\n     @Override\n     public Pair<String, Attribute> prepareAttr(\n             final Provision provision,\n             final Item item,\n             final Any<?> any,\n-            final String password) {\n+            final String password,\n+            final AccountGetter accountGetter,\n+            final PlainAttrGetter plainAttrGetter) {\n \n         IntAttrName intAttrName;\n         try {\n@@ -314,7 +435,7 @@ public Pair<String, Attribute> prepareAttr(\n                 : false;\n \n         Pair<AttrSchemaType, List<PlainAttrValue>> intValues =\n-                getIntValues(provision, item, intAttrName, schemaType, any);\n+                getIntValues(provision, item, intAttrName, schemaType, any, accountGetter, plainAttrGetter);\n         schemaType = intValues.getLeft();\n         List<PlainAttrValue> values = intValues.getRight();\n \n@@ -352,24 +473,7 @@ public Pair<String, Attribute> prepareAttr(\n             if (item.isConnObjectKey()) {\n                 result = Pair.of(objValues.isEmpty() ? null : objValues.iterator().next().toString(), null);\n             } else if (item.isPassword() && any instanceof User) {\n-                String passwordAttrValue = password;\n-                if (StringUtils.isBlank(passwordAttrValue)) {\n-                    User user = (User) any;\n-                    if (user.canDecodePassword()) {\n-                        try {\n-                            passwordAttrValue = ENCRYPTOR.decode(user.getPassword(), user.getCipherAlgorithm());\n-                        } catch (Exception e) {\n-                            LOG.error(\"Could not decode password for {}\", user, e);\n-                        }\n-                    } else if (provision.getResource().isRandomPwdIfNotProvided()) {\n-                        try {\n-                            passwordAttrValue = passwordGenerator.generate(provision.getResource());\n-                        } catch (InvalidPasswordRuleConf e) {\n-                            LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n-                        }\n-                    }\n-                }\n-\n+                String passwordAttrValue = getPasswordAttrValue(provision, accountGetter.apply((User) any), password);\n                 if (passwordAttrValue == null) {\n                     result = null;\n                 } else {\n@@ -386,13 +490,16 @@ public Pair<String, Attribute> prepareAttr(\n     }\n \n     @Transactional(readOnly = true)\n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n             final Provision provision,\n             final Item mapItem,\n             final IntAttrName intAttrName,\n             final AttrSchemaType schemaType,\n-            final Any<?> any) {\n+            final Any<?> any,\n+            final AccountGetter accountGetter,\n+            final PlainAttrGetter plainAttrGetter) {\n \n         LOG.debug(\"Get internal values for {} as '{}' on {}\", any, mapItem.getIntAttrName(), provision.getResource());\n \n@@ -461,19 +568,26 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n         List<PlainAttrValue> values = new ArrayList<>();\n         boolean transform = true;\n \n-        for (Any<?> reference : references) {\n-            AnyUtils anyUtils = anyUtilsFactory.getInstance(reference);\n+        for (Any<?> ref : references) {\n+            AnyUtils anyUtils = anyUtilsFactory.getInstance(ref);\n             if (intAttrName.getField() != null) {\n                 PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n \n                 switch (intAttrName.getField()) {\n                     case \"key\":\n-                        attrValue.setStringValue(reference.getKey());\n+                        attrValue.setStringValue(ref.getKey());\n                         values.add(attrValue);\n                         break;\n \n+                    case \"username\":\n+                        if (ref instanceof Account) {\n+                            attrValue.setStringValue(accountGetter.apply((Account) ref).getUsername());\n+                            values.add(attrValue);\n+                        }\n+                        break;\n+\n                     case \"realm\":\n-                        attrValue.setStringValue(reference.getRealm().getFullPath());\n+                        attrValue.setStringValue(ref.getRealm().getFullPath());\n                         values.add(attrValue);\n                         break;\n \n@@ -490,8 +604,8 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n                                 ? provision.getMapping()\n                                 : null;\n \n-                        if (reference instanceof Group) {\n-                            Group group = (Group) reference;\n+                        if (ref instanceof Group) {\n+                            Group group = (Group) ref;\n                             String groupOwnerValue = null;\n                             if (group.getUserOwner() != null && uMapping != null) {\n                                 groupOwnerValue = getGroupOwnerValue(provision, group.getUserOwner());\n@@ -508,22 +622,22 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n                         break;\n \n                     case \"suspended\":\n-                        if (reference instanceof User) {\n-                            attrValue.setBooleanValue(((User) reference).isSuspended());\n+                        if (ref instanceof User) {\n+                            attrValue.setBooleanValue(((User) ref).isSuspended());\n                             values.add(attrValue);\n                         }\n                         break;\n \n                     case \"mustChangePassword\":\n-                        if (reference instanceof User) {\n-                            attrValue.setBooleanValue(((User) reference).isMustChangePassword());\n+                        if (ref instanceof User) {\n+                            attrValue.setBooleanValue(((User) ref).isMustChangePassword());\n                             values.add(attrValue);\n                         }\n                         break;\n \n                     default:\n                         try {\n-                            Object fieldValue = FieldUtils.readField(reference, intAttrName.getField(), true);\n+                            Object fieldValue = FieldUtils.readField(ref, intAttrName.getField(), true);\n                             if (fieldValue instanceof Date) {\n                                 // needed because ConnId does not natively supports the Date type\n                                 attrValue.setStringValue(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.\n@@ -539,22 +653,26 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n                             }\n                             values.add(attrValue);\n                         } catch (Exception e) {\n-                            LOG.error(\"Could not read value of '{}' from {}\", intAttrName.getField(), reference, e);\n+                            LOG.error(\"Could not read value of '{}' from {}\", intAttrName.getField(), ref, e);\n                         }\n                 }\n             } else if (intAttrName.getSchemaType() != null) {\n                 switch (intAttrName.getSchemaType()) {\n                     case PLAIN:\n                         PlainAttr<?> attr;\n                         if (membership == null) {\n-                            attr = reference.getPlainAttr(intAttrName.getSchema().getKey()).orElse(null);\n+                            if (ref instanceof Attributable) {\n+                                attr = plainAttrGetter.apply((Attributable) ref, intAttrName.getSchema().getKey());\n+                            } else {\n+                                attr = ref.getPlainAttr(intAttrName.getSchema().getKey()).orElse(null);\n+                            }\n                         } else {\n-                            attr = ((GroupableRelatable<?, ?, ?, ?, ?>) reference).getPlainAttr(\n+                            attr = ((GroupableRelatable<?, ?, ?, ?, ?>) ref).getPlainAttr(\n                                     intAttrName.getSchema().getKey(), membership).orElse(null);\n                         }\n                         if (attr == null) {\n                             LOG.warn(\"Invalid PlainSchema {} or PlainAttr not found for {}\",\n-                                    intAttrName.getSchema().getKey(), reference);\n+                                    intAttrName.getSchema().getKey(), ref);\n                         } else {\n                             if (attr.getUniqueValue() != null) {\n                                 values.add(anyUtils.clonePlainAttrValue(attr.getUniqueValue()));\n@@ -567,8 +685,8 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n                     case DERIVED:\n                         DerSchema derSchema = (DerSchema) intAttrName.getSchema();\n                         String derValue = membership == null\n-                                ? derAttrHandler.getValue(reference, derSchema)\n-                                : derAttrHandler.getValue(reference, membership, derSchema);\n+                                ? derAttrHandler.getValue(ref, derSchema)\n+                                : derAttrHandler.getValue(ref, membership, derSchema);\n                         if (derValue != null) {\n                             PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n                             attrValue.setStringValue(derValue);\n@@ -581,13 +699,13 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n                         transform = false;\n \n                         VirSchema virSchema = (VirSchema) intAttrName.getSchema();\n-                        LOG.debug(\"Expire entry cache {}-{}\", reference, intAttrName.getSchema().getKey());\n+                        LOG.debug(\"Expire entry cache {}-{}\", ref, intAttrName.getSchema().getKey());\n                         virAttrCache.expire(\n-                                reference.getType().getKey(), reference.getKey(), intAttrName.getSchema().getKey());\n+                                ref.getType().getKey(), ref.getKey(), intAttrName.getSchema().getKey());\n \n                         List<String> virValues = membership == null\n-                                ? virAttrHandler.getValues(reference, virSchema)\n-                                : virAttrHandler.getValues(reference, membership, virSchema);\n+                                ? virAttrHandler.getValues(ref, virSchema)\n+                                : virAttrHandler.getValues(ref, membership, virSchema);\n                         virValues.forEach(virValue -> {\n                             PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n                             attrValue.setStringValue(virValue);\n@@ -597,12 +715,12 @@ public Pair<AttrSchemaType, List<PlainAttrValue>> getIntValues(\n \n                     default:\n                 }\n-            } else if (intAttrName.getPrivilegesOfApplication() != null && reference instanceof User) {\n+            } else if (intAttrName.getPrivilegesOfApplication() != null && ref instanceof User) {\n                 Application application = applicationDAO.find(intAttrName.getPrivilegesOfApplication());\n                 if (application == null) {\n                     LOG.warn(\"Invalid application: {}\", intAttrName.getPrivilegesOfApplication());\n                 } else {\n-                    userDAO.findAllRoles((User) reference).stream().\n+                    userDAO.findAllRoles((User) ref).stream().\n                             flatMap(role -> role.getPrivileges(application).stream()).\n                             forEach(privilege -> {\n                                 PlainAttrValue attrValue = anyUtils.newPlainAttrValue();\n@@ -633,11 +751,17 @@ private String getGroupOwnerValue(final Provision provision, final Any<?> any) {\n \n         Pair<String, Attribute> preparedAttr = null;\n         if (connObjectKeyItem.isPresent()) {\n-            preparedAttr = prepareAttr(provision, connObjectKeyItem.get(), any, null);\n+            preparedAttr = prepareAttr(\n+                    provision,\n+                    connObjectKeyItem.get(),\n+                    any,\n+                    null,\n+                    AccountGetter.DEFAULT,\n+                    PlainAttrGetter.DEFAULT);\n         }\n \n         return Optional.ofNullable(preparedAttr)\n-            .map(attr -> MappingUtils.evaluateNAME(any, provision, attr.getKey()).getNameValue()).orElse(null);\n+                .map(attr -> MappingUtils.evaluateNAME(any, provision, attr.getKey()).getNameValue()).orElse(null);\n     }\n \n     @Transactional(readOnly = true)\n@@ -646,12 +770,13 @@ public Optional<String> getConnObjectKeyValue(final Any<?> any, final Provision\n         MappingItem mapItem = provision.getMapping().getConnObjectKeyItem().get();\n         Pair<AttrSchemaType, List<PlainAttrValue>> intValues;\n         try {\n-            intValues = getIntValues(\n-                    provision,\n+            intValues = getIntValues(provision,\n                     mapItem,\n                     intAttrNameParser.parse(mapItem.getIntAttrName(), provision.getAnyType().getKind()),\n                     AttrSchemaType.String,\n-                    any);\n+                    any,\n+                    AccountGetter.DEFAULT,\n+                    PlainAttrGetter.DEFAULT);\n         } catch (ParseException e) {\n             LOG.error(\"Invalid intAttrName '{}' specified, ignoring\", mapItem.getIntAttrName(), e);\n             intValues = Pair.of(AttrSchemaType.String, List.of());\n@@ -667,7 +792,7 @@ public Optional<String> getConnObjectKeyValue(final Realm realm, final OrgUnit o\n         OrgUnitItem orgUnitItem = orgUnit.getConnObjectKeyItem().get();\n \n         return Optional.ofNullable(Optional.of(orgUnitItem)\n-            .map(unitItem -> getIntValue(realm, unitItem)).orElse(null));\n+                .map(unitItem -> getIntValue(realm, unitItem)).orElse(null));\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"705d316d6e1c52cc0c6840386c41e04fded0171a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":34,"deletions":27,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -66,9 +66,11 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.AccountGetter;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.PlainAttrGetter;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n@@ -168,12 +170,12 @@ protected PlainSchema getPlainSchema(final String schemaName) {\n         return schema;\n     }\n \n-    private static void fillAttr(\n-        final List<String> values,\n-        final AnyUtils anyUtils,\n-        final PlainSchema schema,\n-        final PlainAttr<?> attr,\n-        final SyncopeClientException invalidValues) {\n+    protected void fillAttr(\n+            final List<String> values,\n+            final AnyUtils anyUtils,\n+            final PlainSchema schema,\n+            final PlainAttr<?> attr,\n+            final SyncopeClientException invalidValues) {\n \n         // if schema is multivalue, all values are considered for addition;\n         // otherwise only the fist one - if provided - is considered\n@@ -216,8 +218,13 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n                         ? ((PlainSchema) intAttrName.getSchema()).getType()\n                         : AttrSchemaType.String;\n \n-                Pair<AttrSchemaType, List<PlainAttrValue>> intValues =\n-                        mappingManager.getIntValues(provision, mapItem, intAttrName, schemaType, any);\n+                Pair<AttrSchemaType, List<PlainAttrValue>> intValues = mappingManager.getIntValues(provision,\n+                        mapItem,\n+                        intAttrName,\n+                        schemaType,\n+                        any,\n+                        AccountGetter.DEFAULT,\n+                        PlainAttrGetter.DEFAULT);\n                 if (intValues.getRight().isEmpty()\n                         && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n \n@@ -250,10 +257,10 @@ private SyncopeClientException checkMandatoryOnResources(\n     }\n \n     private static void checkMandatory(\n-        final PlainSchema schema,\n-        final PlainAttr<?> attr,\n-        final Any<?> any,\n-        final SyncopeClientException reqValMissing) {\n+            final PlainSchema schema,\n+            final PlainAttr<?> attr,\n+            final Any<?> any,\n+            final SyncopeClientException reqValMissing) {\n \n         if (attr == null\n                 && !schema.isReadonly()\n@@ -295,7 +302,7 @@ protected void processAttrPatch(\n             final PlainAttr<?> attr,\n             final AnyUtils anyUtils,\n             final Collection<ExternalResource> resources,\n-            final PropagationByResource propByRes,\n+            final PropagationByResource<String> propByRes,\n             final SyncopeClientException invalidValues) {\n \n         switch (patch.getOperation()) {\n@@ -349,13 +356,13 @@ protected void processAttrPatch(\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    protected PropagationByResource fill(\n+    protected PropagationByResource<String> fill(\n             final Any any,\n             final AnyUR anyUR,\n             final AnyUtils anyUtils,\n             final SyncopeClientCompositeException scce) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n \n         // 1. anyTypeClasses\n         for (StringPatchItem patch : anyUR.getAuxClasses()) {\n@@ -546,14 +553,14 @@ protected void fill(\n     }\n \n     protected static void fillTO(\n-        final AnyTO anyTO,\n-        final String realmFullPath,\n-        final Collection<? extends AnyTypeClass> auxClasses,\n-        final Collection<? extends PlainAttr<?>> plainAttrs,\n-        final Map<DerSchema, String> derAttrs,\n-        final Map<VirSchema, List<String>> virAttrs,\n-        final Collection<? extends ExternalResource> resources,\n-        final boolean details) {\n+            final AnyTO anyTO,\n+            final String realmFullPath,\n+            final Collection<? extends AnyTypeClass> auxClasses,\n+            final Collection<? extends PlainAttr<?>> plainAttrs,\n+            final Map<DerSchema, String> derAttrs,\n+            final Map<VirSchema, List<String>> virAttrs,\n+            final Collection<? extends ExternalResource> resources,\n+            final boolean details) {\n \n         anyTO.setRealm(realmFullPath);\n \n@@ -579,10 +586,10 @@ protected static RelationshipTO getRelationshipTO(final String relationshipType,\n     }\n \n     protected static MembershipTO getMembershipTO(\n-        final Collection<? extends PlainAttr<?>> plainAttrs,\n-        final Map<DerSchema, String> derAttrs,\n-        final Map<VirSchema, List<String>> virAttrs,\n-        final Membership<? extends Any<?>> membership) {\n+            final Collection<? extends PlainAttr<?>> plainAttrs,\n+            final Map<DerSchema, String> derAttrs,\n+            final Map<VirSchema, List<String>> virAttrs,\n+            final Membership<? extends Any<?>> membership) {\n \n         MembershipTO membershipTO = new MembershipTO.Builder(membership.getRightEnd().getKey())\n                 .groupName(membership.getRightEnd().getName())"},{"sha":"4cfae47a43b6fbf7b05262f1dc7f37e6d4170186","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -236,11 +236,11 @@ public void create(final AnyObject anyObject, final AnyObjectCR anyObjectCR) {\n     }\n \n     @Override\n-    public PropagationByResource update(final AnyObject toBeUpdated, final AnyObjectUR anyObjectUR) {\n+    public PropagationByResource<String> update(final AnyObject toBeUpdated, final AnyObjectUR anyObjectUR) {\n         // Re-merge any pending change from workflow tasks\n         AnyObject anyObject = anyObjectDAO.save(toBeUpdated);\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n "},{"sha":"a5d54868a2b31f212b66918531b64c2d8ec89c55","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -186,11 +186,11 @@ public void create(final Group group, final GroupCR groupCR) {\n     }\n \n     @Override\n-    public PropagationByResource update(final Group toBeUpdated, final GroupUR groupUR) {\n+    public PropagationByResource<String> update(final Group toBeUpdated, final GroupUR groupUR) {\n         // Re-merge any pending change from workflow tasks\n         Group group = groupDAO.save(toBeUpdated);\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n@@ -387,9 +387,9 @@ public GroupTO getGroupTO(final String key) {\n     }\n \n     private static void populateTransitiveResources(\n-        final Group group, final Any<?> any, final Map<String, PropagationByResource> result) {\n+            final Group group, final Any<?> any, final Map<String, PropagationByResource<String>> result) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         group.getResources().forEach(resource -> {\n             if (!any.getResources().contains(resource)) {\n                 propByRes.add(ResourceOperation.DELETE, resource.getKey());\n@@ -403,10 +403,10 @@ private static void populateTransitiveResources(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Map<String, PropagationByResource> findAnyObjectsWithTransitiveResources(final String groupKey) {\n+    public Map<String, PropagationByResource<String>> findAnyObjectsWithTransitiveResources(final String groupKey) {\n         Group group = groupDAO.authFind(groupKey);\n \n-        Map<String, PropagationByResource> result = new HashMap<>();\n+        Map<String, PropagationByResource<String>> result = new HashMap<>();\n \n         groupDAO.findAMemberships(group).\n                 forEach((membership) -> populateTransitiveResources(group, membership.getLeftEnd(), result));\n@@ -416,10 +416,10 @@ public Map<String, PropagationByResource> findAnyObjectsWithTransitiveResources(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public Map<String, PropagationByResource> findUsersWithTransitiveResources(final String groupKey) {\n+    public Map<String, PropagationByResource<String>> findUsersWithTransitiveResources(final String groupKey) {\n         Group group = groupDAO.authFind(groupKey);\n \n-        Map<String, PropagationByResource> result = new HashMap<>();\n+        Map<String, PropagationByResource<String>> result = new HashMap<>();\n \n         groupDAO.findUMemberships(group).\n                 forEach((membership) -> populateTransitiveResources(group, membership.getLeftEnd(), result));"},{"sha":"583bc13d447ecc733841ea4d3c59202eae95c2bb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -148,7 +148,7 @@ public Realm create(final Realm parent, final RealmTO realmTO) {\n     }\n \n     @Override\n-    public PropagationByResource update(final Realm realm, final RealmTO realmTO) {\n+    public PropagationByResource<String> update(final Realm realm, final RealmTO realmTO) {\n         realm.setName(realmTO.getName());\n         realm.setParent(realmTO.getParent() == null ? null : realmDAO.find(realmTO.getParent()));\n \n@@ -194,7 +194,7 @@ public PropagationByResource update(final Realm realm, final RealmTO realmTO) {\n \n         setTemplates(realmTO, realm);\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         realmTO.getResources().forEach(resourceKey -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             if (resource == null) {"},{"sha":"a41fe0788d51f71161d60f18442fb13f0a58db47","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":207,"deletions":79,"changes":286,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -25,21 +25,22 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.request.AttrPatch;\n-import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.to.LinkedAccountTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -50,25 +51,27 @@\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ApplicationDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n-import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.LAPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n@@ -89,6 +92,9 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    private ApplicationDAO applicationDAO;\n+\n     @Autowired\n     private AccessTokenDAO accessTokenDAO;\n \n@@ -106,6 +112,7 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     public UserTO returnUserTO(final UserTO userTO) {\n         if (!confParamOps.get(AuthContextUtils.getDomain(), \"return.password.value\", false, Boolean.class)) {\n             userTO.setPassword(null);\n+            userTO.getLinkedAccounts().forEach(account -> account.setPassword(null));\n         }\n         return userTO;\n     }\n@@ -146,6 +153,61 @@ private void setPassword(final User user, final String password, final SyncopeCl\n         }\n     }\n \n+    private void linkedAccount(\n+            final User user,\n+            final LinkedAccountTO accountTO,\n+            final AnyUtils anyUtils,\n+            final SyncopeClientException invalidValues) {\n+\n+        ExternalResource resource = resourceDAO.find(accountTO.getResource());\n+        if (resource == null) {\n+            LOG.debug(\"Ignoring invalid resource {}\", accountTO.getResource());\n+        } else {\n+            LinkedAccount account = entityFactory.newEntity(LinkedAccount.class);\n+            account.setOwner(user);\n+            user.add(account);\n+\n+            account.setConnObjectName(accountTO.getConnObjectName());\n+            account.setResource(resource);\n+            account.setUsername(accountTO.getUsername());\n+            if (StringUtils.isNotBlank(accountTO.getPassword())) {\n+                account.setPassword(accountTO.getPassword(), CipherAlgorithm.AES);\n+            }\n+            account.setSuspended(accountTO.isSuspended());\n+\n+            accountTO.getPlainAttrs().stream().\n+                    filter(attrTO -> !attrTO.getValues().isEmpty()).\n+                    forEach(attrTO -> {\n+                        PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                        if (schema != null) {\n+                            LAPlainAttr attr = account.getPlainAttr(schema.getKey()).orElse(null);\n+                            if (attr == null) {\n+                                attr = entityFactory.newEntity(LAPlainAttr.class);\n+                                attr.setSchema(schema);\n+                                attr.setOwner(user);\n+                                attr.setAccount(account);\n+                            }\n+                            fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n+\n+                            if (attr.getValuesAsStrings().isEmpty()) {\n+                                attr.setOwner(null);\n+                            } else {\n+                                account.add(attr);\n+                            }\n+                        }\n+                    });\n+\n+            accountTO.getPrivileges().forEach(key -> {\n+                Privilege privilege = applicationDAO.findPrivilege(key);\n+                if (privilege == null) {\n+                    LOG.debug(\"Invalid privilege {}, ignoring\", key);\n+                } else {\n+                    account.add(privilege);\n+                }\n+            });\n+        }\n+    }\n+\n     @Override\n     public void create(final User user, final UserCR userCR) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n@@ -191,65 +253,70 @@ public void create(final User user, final UserCR userCR) {\n         }\n         user.setRealm(realm);\n \n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(AnyTypeKind.USER);\n-        if (user.getRealm() != null) {\n-            // relationships\n-            userCR.getRelationships().forEach(relationshipTO -> {\n-                AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getOtherEndKey());\n-                if (otherEnd == null) {\n-                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getOtherEndKey());\n-                } else if (user.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {\n-                    RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n-                    if (relationshipType == null) {\n-                        LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n-                    } else {\n-                        URelationship relationship = entityFactory.newEntity(URelationship.class);\n-                        relationship.setType(relationshipType);\n-                        relationship.setRightEnd(otherEnd);\n-                        relationship.setLeftEnd(user);\n-\n-                        user.add(relationship);\n-                    }\n+        // relationships\n+        userCR.getRelationships().forEach(relationshipTO -> {\n+            AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getOtherEndKey());\n+            if (otherEnd == null) {\n+                LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getOtherEndKey());\n+            } else if (user.getRealm().getFullPath().startsWith(otherEnd.getRealm().getFullPath())) {\n+                RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n+                if (relationshipType == null) {\n+                    LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n                 } else {\n-                    LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n+                    URelationship relationship = entityFactory.newEntity(URelationship.class);\n+                    relationship.setType(relationshipType);\n+                    relationship.setRightEnd(otherEnd);\n+                    relationship.setLeftEnd(user);\n \n-                    SyncopeClientException unassignabled =\n-                            SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                    unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                    scce.addException(unassignabled);\n+                    user.add(relationship);\n                 }\n-            });\n+            } else {\n+                LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n \n-            // memberships\n-            userCR.getMemberships().forEach(membershipTO -> {\n-                Group group = membershipTO.getGroupKey() == null\n-                        ? groupDAO.findByName(membershipTO.getGroupName())\n-                        : groupDAO.find(membershipTO.getGroupKey());\n-                if (group == null) {\n-                    LOG.debug(\"Ignoring invalid group \"\n-                            + membershipTO.getGroupKey() + \" / \" + membershipTO.getGroupName());\n-                } else if (user.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n-                    UMembership membership = entityFactory.newEntity(UMembership.class);\n-                    membership.setRightEnd(group);\n-                    membership.setLeftEnd(user);\n+                SyncopeClientException unassignabled =\n+                        SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                scce.addException(unassignabled);\n+            }\n+        });\n \n-                    user.add(membership);\n+        // memberships\n+        userCR.getMemberships().forEach(membershipTO -> {\n+            Group group = membershipTO.getGroupKey() == null\n+                    ? groupDAO.findByName(membershipTO.getGroupName())\n+                    : groupDAO.find(membershipTO.getGroupKey());\n+            if (group == null) {\n+                LOG.debug(\"Ignoring invalid group {}\",\n+                        membershipTO.getGroupKey() + \" / \" + membershipTO.getGroupName());\n+            } else if (user.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n+                UMembership membership = entityFactory.newEntity(UMembership.class);\n+                membership.setRightEnd(group);\n+                membership.setLeftEnd(user);\n+\n+                user.add(membership);\n+\n+                // membership attributes\n+                fill(user, membership, membershipTO, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce);\n+            } else {\n+                LOG.error(\"{} cannot be assigned to {}\", group, user);\n \n-                    // membership attributes\n-                    fill(user, membership, membershipTO, anyUtils, scce);\n-                } else {\n-                    LOG.error(\"{} cannot be assigned to {}\", group, user);\n+                SyncopeClientException unassignable =\n+                        SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n+                unassignable.getElements().add(\"Cannot be assigned: \" + group);\n+                scce.addException(unassignable);\n+            }\n+        });\n \n-                    SyncopeClientException unassignable =\n-                            SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n-                    unassignable.getElements().add(\"Cannot be assigned: \" + group);\n-                    scce.addException(unassignable);\n-                }\n-            });\n+        // linked accounts\n+        SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n+        userCR.getLinkedAccounts().forEach(accountTO\n+                -> linkedAccount(user, accountTO, anyUtilsFactory.getLinkedAccountInstance(), invalidValues));\n+        if (!invalidValues.isEmpty()) {\n+            scce.addException(invalidValues);\n         }\n \n         // attributes and resources\n-        fill(user, userCR, anyUtils, scce);\n+        fill(user, userCR, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce);\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n@@ -258,22 +325,21 @@ public void create(final User user, final UserCR userCR) {\n     }\n \n     private boolean isPasswordMapped(final ExternalResource resource) {\n-        boolean result = false;\n-\n-        Optional<? extends Provision> provision = resource.getProvision(anyTypeDAO.findUser());\n-        if (provision.isPresent() && provision.get().getMapping() != null) {\n-            result = provision.get().getMapping().getItems().stream().anyMatch(Item::isPassword);\n-        }\n-\n-        return result;\n+        return resource.getProvision(anyTypeDAO.findUser()).\n+                filter(provision -> provision.getMapping() != null).\n+                map(provision -> provision.getMapping().getItems().stream().anyMatch(item -> item.isPassword())).\n+                orElse(false);\n     }\n \n     @Override\n-    public PropagationByResource update(final User toBeUpdated, final UserUR userUR) {\n+    public Pair<PropagationByResource<String>, PropagationByResource<Pair<String, String>>> update(\n+            final User toBeUpdated, final UserUR userUR) {\n+\n         // Re-merge any pending change from workflow tasks\n         User user = userDAO.save(toBeUpdated);\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n@@ -365,8 +431,7 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n         propByRes.merge(fill(user, userUR, anyUtils, scce));\n \n         // relationships\n-        userUR.getRelationships().stream().\n-                filter(patch -> patch.getRelationshipTO() != null).forEachOrdered((patch) -> {\n+        userUR.getRelationships().stream().filter(patch -> patch.getRelationshipTO() != null).forEach(patch -> {\n             RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n             if (relationshipType == null) {\n                 LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n@@ -419,9 +484,8 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         // memberships\n-        userUR.getMemberships().stream().\n-                filter(membPatch -> membPatch.getGroup() != null).forEachOrdered((membPatch) -> {\n-            user.getMembership(membPatch.getGroup()).ifPresent(membership -> {\n+        userUR.getMemberships().stream().filter(patch -> patch.getGroup() != null).forEach(patch -> {\n+            user.getMembership(patch.getGroup()).ifPresent(membership -> {\n                 user.remove(membership);\n                 membership.setLeftEnd(null);\n                 user.getPlainAttrs(membership).forEach(attr -> {\n@@ -432,7 +496,7 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n                     plainAttrDAO.delete(attr);\n                 });\n \n-                if (membPatch.getOperation() == PatchOperation.DELETE) {\n+                if (patch.getOperation() == PatchOperation.DELETE) {\n                     groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()).stream().\n                             filter(reasons::containsKey).\n                             forEach(resource -> {\n@@ -441,18 +505,18 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n                             });\n                 }\n             });\n-            if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                Group group = groupDAO.find(membPatch.getGroup());\n+            if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                Group group = groupDAO.find(patch.getGroup());\n                 if (group == null) {\n-                    LOG.debug(\"Ignoring invalid group {}\", membPatch.getGroup());\n+                    LOG.debug(\"Ignoring invalid group {}\", patch.getGroup());\n                 } else if (user.getRealm().getFullPath().startsWith(group.getRealm().getFullPath())) {\n                     UMembership newMembership = entityFactory.newEntity(UMembership.class);\n                     newMembership.setRightEnd(group);\n                     newMembership.setLeftEnd(user);\n \n                     user.add(newMembership);\n \n-                    membPatch.getPlainAttrs().forEach(attrTO -> {\n+                    patch.getPlainAttrs().forEach(attrTO -> {\n                         PlainSchema schema = getPlainSchema(attrTO.getSchema());\n                         if (schema == null) {\n                             LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName()\n@@ -469,10 +533,15 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n                                 attr.setSchema(schema);\n                                 user.add(attr);\n \n-                                AttrPatch patch = new AttrPatch.Builder(attrTO).build();\n                                 processAttrPatch(\n-                                        user, patch, schema, attr, anyUtils,\n-                                        resources, propByRes, invalidValues);\n+                                        user,\n+                                        new AttrPatch.Builder(attrTO).build(),\n+                                        schema,\n+                                        attr,\n+                                        anyUtils,\n+                                        resources,\n+                                        propByRes,\n+                                        invalidValues);\n                             }\n                         }\n                     });\n@@ -490,7 +559,7 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n                         }\n                         group.getResources().stream().\n                                 filter(this::isPasswordMapped).\n-                                forEachOrdered(resource -> userUR.getPassword().getResources().add(resource.getKey()));\n+                                forEach(resource -> userUR.getPassword().getResources().add(resource.getKey()));\n                     }\n                 } else {\n                     LOG.error(\"{} cannot be assigned to {}\", group, user);\n@@ -503,6 +572,42 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n             }\n         });\n \n+        // linked accounts\n+        userUR.getLinkedAccounts().stream().filter(patch -> patch.getLinkedAccountTO() != null).forEach(patch -> {\n+            user.getLinkedAccount(\n+                    patch.getLinkedAccountTO().getResource(),\n+                    patch.getLinkedAccountTO().getConnObjectName()).ifPresent(account -> {\n+\n+                user.getLinkedAccounts().remove(account);\n+                account.setOwner(null);\n+                account.getPlainAttrs().forEach(attr -> {\n+                    account.remove(attr);\n+                    attr.setOwner(null);\n+                    attr.setAccount(null);\n+                    plainAttrValueDAO.deleteAll(attr, anyUtilsFactory.getLinkedAccountInstance());\n+                    plainAttrDAO.delete(attr);\n+                });\n+\n+                if (patch.getOperation() == PatchOperation.DELETE) {\n+                    propByLinkedAccount.add(\n+                            ResourceOperation.DELETE,\n+                            Pair.of(account.getResource().getKey(), account.getConnObjectName()));\n+                }\n+            });\n+            if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n+                linkedAccount(\n+                        user,\n+                        patch.getLinkedAccountTO(),\n+                        anyUtilsFactory.getLinkedAccountInstance(),\n+                        invalidValues);\n+            }\n+        });\n+        user.getLinkedAccounts().forEach(account -> {\n+            propByLinkedAccount.add(\n+                    ResourceOperation.CREATE,\n+                    Pair.of(account.getResource().getKey(), account.getConnObjectName()));\n+        });\n+\n         // finalize resource management\n         reasons.entrySet().stream().\n                 filter(entry -> entry.getValue().isEmpty()).\n@@ -554,7 +659,7 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n \n         // Re-merge any pending change from above\n         userDAO.save(user);\n-        return propByRes;\n+        return Pair.of(propByRes, propByLinkedAccount);\n     }\n \n     @Transactional(readOnly = true)\n@@ -626,6 +731,29 @@ public UserTO getUserTO(final User user, final boolean details) {\n                     userDAO.findDynGroups(user.getKey()).stream().\n                             map(group -> new MembershipTO.Builder(group.getKey()).groupName(group.getName()).build()).\n                             collect(Collectors.toList()));\n+\n+            // linked accounts\n+            userTO.getLinkedAccounts().addAll(\n+                    user.getLinkedAccounts().stream().map(account -> {\n+                        LinkedAccountTO accountTO = new LinkedAccountTO.Builder().\n+                                resource(account.getResource().getKey()).\n+                                connObjectName(account.getConnObjectName()).\n+                                username(account.getUsername()).\n+                                password(user.getPassword()).\n+                                suspended(BooleanUtils.isTrue(account.isSuspended())).\n+                                build();\n+\n+                        account.getPlainAttrs().forEach(plainAttr -> {\n+                            accountTO.getPlainAttrs().add(\n+                                    new Attr.Builder(plainAttr.getSchema().getKey()).\n+                                            values(plainAttr.getValuesAsStrings()).build());\n+                        });\n+\n+                        accountTO.getPrivileges().addAll(account.getPrivileges().stream().\n+                                map(Entity::getKey).collect(Collectors.toList()));\n+\n+                        return accountTO;\n+                    }).collect(Collectors.toList()));\n         }\n \n         return userTO;"},{"sha":"7f51cd91e13ba198bed1c1107810e6af4d785f3d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":184,"deletions":75,"changes":259,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -24,11 +24,11 @@\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n@@ -39,11 +39,12 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n@@ -139,42 +140,60 @@ public List<PropagationTaskInfo> getCreateTasks(\n             final AnyTypeKind kind,\n             final String key,\n             final Boolean enable,\n-            final PropagationByResource propByRes,\n+            final PropagationByResource<String> propByRes,\n             final Collection<Attr> vAttrs,\n             final Collection<String> noPropResourceKeys) {\n \n-        return getCreateTasks(dao(kind).authFind(key), null, enable, propByRes, vAttrs, noPropResourceKeys);\n+        return getCreateTasks(\n+                dao(kind).authFind(key),\n+                null,\n+                enable,\n+                propByRes,\n+                null,\n+                vAttrs,\n+                noPropResourceKeys);\n     }\n \n     @Override\n     public List<PropagationTaskInfo> getUserCreateTasks(\n             final String key,\n             final String password,\n             final Boolean enable,\n-            final PropagationByResource propByRes,\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs,\n             final Collection<String> noPropResourceKeys) {\n \n-        return getCreateTasks(userDAO.authFind(key), password, enable, propByRes, vAttrs, noPropResourceKeys);\n+        return getCreateTasks(\n+                userDAO.authFind(key),\n+                password,\n+                enable,\n+                propByRes,\n+                propByLinkedAccount,\n+                vAttrs,\n+                noPropResourceKeys);\n     }\n \n     protected List<PropagationTaskInfo> getCreateTasks(\n             final Any<?> any,\n             final String password,\n             final Boolean enable,\n-            final PropagationByResource propByRes,\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs,\n             final Collection<String> noPropResourceKeys) {\n \n-        if (propByRes == null || propByRes.isEmpty()) {\n+        if ((propByRes == null || propByRes.isEmpty())\n+                && (propByLinkedAccount == null || propByLinkedAccount.isEmpty())) {\n+\n             return List.of();\n         }\n \n         if (noPropResourceKeys != null) {\n             propByRes.get(ResourceOperation.CREATE).removeAll(noPropResourceKeys);\n         }\n \n-        return createTasks(any, password, true, enable, false, propByRes, vAttrs);\n+        return createTasks(any, password, true, enable, false, propByRes, propByLinkedAccount, vAttrs);\n     }\n \n     @Override\n@@ -183,16 +202,24 @@ public List<PropagationTaskInfo> getUpdateTasks(\n             final String key,\n             final boolean changePwd,\n             final Boolean enable,\n-            final PropagationByResource propByRes,\n+            final PropagationByResource<String> propByRes,\n             final Collection<Attr> vAttrs,\n             final Collection<String> noPropResourceKeys) {\n \n-        return getUpdateTasks(dao(kind).authFind(key), null, changePwd, enable, propByRes, vAttrs, noPropResourceKeys);\n+        return getUpdateTasks(\n+                dao(kind).authFind(key),\n+                null,\n+                changePwd,\n+                enable,\n+                propByRes,\n+                null,\n+                vAttrs,\n+                noPropResourceKeys);\n     }\n \n     @Override\n     public List<PropagationTaskInfo> getUserUpdateTasks(\n-            final WorkflowResult<Pair<UserUR, Boolean>> wfResult,\n+            final UserWorkflowResult<Pair<UserUR, Boolean>> wfResult,\n             final boolean changePwd,\n             final Collection<String> noPropResourceKeys) {\n \n@@ -204,12 +231,13 @@ public List<PropagationTaskInfo> getUserUpdateTasks(\n                 changePwd,\n                 wfResult.getResult().getValue(),\n                 wfResult.getPropByRes(),\n+                wfResult.getPropByLinkedAccount(),\n                 wfResult.getResult().getKey().getVirAttrs(),\n                 noPropResourceKeys);\n     }\n \n     @Override\n-    public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<UserUR, Boolean>> wfResult) {\n+    public List<PropagationTaskInfo> getUserUpdateTasks(final UserWorkflowResult<Pair<UserUR, Boolean>> wfResult) {\n         UserUR userUR = wfResult.getResult().getLeft();\n \n         // Propagate password update only to requested resources\n@@ -221,9 +249,12 @@ public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<Us\n             tasks = new ArrayList<>();\n \n             // b. generate the propagation task list in two phases: first the ones containing password,\n-            // the the rest (with no password)\n-            WorkflowResult<Pair<UserUR, Boolean>> pwdWFResult = new WorkflowResult<>(\n-                    wfResult.getResult(), new PropagationByResource(), wfResult.getPerformedTasks());\n+            // then the rest (with no password)\n+            UserWorkflowResult<Pair<UserUR, Boolean>> pwdWFResult = new UserWorkflowResult<>(\n+                    wfResult.getResult(),\n+                    new PropagationByResource<>(),\n+                    wfResult.getPropByLinkedAccount(),\n+                    wfResult.getPerformedTasks());\n \n             Set<String> pwdResourceNames = new HashSet<>(userUR.getPassword().getResources());\n             Collection<String> allResourceNames = userDAO.findAllResourceKeys(userUR.getKey());\n@@ -239,8 +270,11 @@ public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<Us\n                 tasks.addAll(getUserUpdateTasks(pwdWFResult, true, toBeExcluded));\n             }\n \n-            WorkflowResult<Pair<UserUR, Boolean>> noPwdWFResult = new WorkflowResult<>(\n-                    wfResult.getResult(), new PropagationByResource(), wfResult.getPerformedTasks());\n+            UserWorkflowResult<Pair<UserUR, Boolean>> noPwdWFResult = new UserWorkflowResult<>(\n+                    wfResult.getResult(),\n+                    new PropagationByResource<>(),\n+                    new PropagationByResource<>(),\n+                    wfResult.getPerformedTasks());\n \n             noPwdWFResult.getPropByRes().merge(wfResult.getPropByRes());\n             noPwdWFResult.getPropByRes().removeAll(pwdResourceNames);\n@@ -260,7 +294,8 @@ protected List<PropagationTaskInfo> getUpdateTasks(\n             final String password,\n             final boolean changePwd,\n             final Boolean enable,\n-            final PropagationByResource propByRes,\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs,\n             final Collection<String> noPropResourceKeys) {\n \n@@ -275,22 +310,47 @@ protected List<PropagationTaskInfo> getUpdateTasks(\n                 enable,\n                 false,\n                 Optional.ofNullable(propByRes).orElseGet(PropagationByResource::new),\n+                null,\n                 vAttrs);\n     }\n \n     @Override\n     public List<PropagationTaskInfo> getDeleteTasks(\n             final AnyTypeKind kind,\n             final String key,\n-            final PropagationByResource propByRes,\n+            final PropagationByResource<String> propByRes,\n             final Collection<String> noPropResourceKeys) {\n \n-        Any<?> any = dao(kind).authFind(key);\n+        return getDeleteTasks(dao(kind).authFind(key), propByRes, null, noPropResourceKeys);\n+    }\n+\n+    @Override\n+    public List<PropagationTaskInfo> getUserDeleteTasks(\n+            final String key,\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n+            final Collection<String> noPropResourceKeys) {\n+\n+        if (noPropResourceKeys != null) {\n+            propByLinkedAccount.get(ResourceOperation.DELETE).\n+                    removeIf(account -> noPropResourceKeys.contains(account.getLeft()));\n+        }\n+\n+        return getDeleteTasks(userDAO.authFind(key), propByRes, propByLinkedAccount, noPropResourceKeys);\n+    }\n+\n+    protected List<PropagationTaskInfo> getDeleteTasks(\n+            final Any<?> any,\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n+            final Collection<String> noPropResourceKeys) {\n \n-        PropagationByResource localPropByRes = new PropagationByResource();\n+        PropagationByResource<String> localPropByRes = new PropagationByResource<>();\n \n         if (propByRes == null || propByRes.isEmpty()) {\n-            localPropByRes.addAll(ResourceOperation.DELETE, dao(kind).findAllResourceKeys(key));\n+            localPropByRes.addAll(\n+                    ResourceOperation.DELETE,\n+                    dao(any.getType().getKind()).findAllResourceKeys(any.getKey()));\n         } else {\n             localPropByRes.merge(propByRes);\n         }\n@@ -299,15 +359,55 @@ public List<PropagationTaskInfo> getDeleteTasks(\n             localPropByRes.removeAll(noPropResourceKeys);\n         }\n \n-        return getDeleteTasks(any, localPropByRes, noPropResourceKeys);\n+        return createTasks(any, null, false, false, true, localPropByRes, propByLinkedAccount, null);\n     }\n \n-    protected List<PropagationTaskInfo> getDeleteTasks(\n+    protected PropagationTaskInfo newTask(\n             final Any<?> any,\n-            final PropagationByResource propByRes,\n-            final Collection<String> noPropResourceKeys) {\n+            final String resource,\n+            final ResourceOperation operation,\n+            final Provision provision,\n+            final boolean deleteOnResource,\n+            final List<? extends Item> mappingItems,\n+            final Pair<String, Set<Attribute>> preparedAttrs) {\n+\n+        PropagationTaskInfo task = new PropagationTaskInfo();\n+        task.setResource(resource);\n+        task.setObjectClassName(provision.getObjectClass().getObjectClassValue());\n+        task.setAnyTypeKind(any.getType().getKind());\n+        task.setAnyType(any.getType().getKey());\n+        if (!deleteOnResource) {\n+            task.setEntityKey(any.getKey());\n+        }\n+        task.setOperation(operation);\n+        task.setConnObjectKey(preparedAttrs.getKey());\n+\n+        // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n+        // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n+        List<String> mandatoryMissing = new ArrayList<>();\n+        List<String> mandatoryNullOrEmpty = new ArrayList<>();\n+        mappingItems.stream().filter(item -> (!item.isConnObjectKey()\n+                && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any))).\n+                forEach(item -> {\n+                    Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n+                    if (attr == null) {\n+                        mandatoryMissing.add(item.getExtAttrName());\n+                    } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n+                        mandatoryNullOrEmpty.add(item.getExtAttrName());\n+                    }\n+                });\n+        if (!mandatoryMissing.isEmpty()) {\n+            preparedAttrs.getValue().add(AttributeBuilder.build(\n+                    PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n+        }\n+        if (!mandatoryNullOrEmpty.isEmpty()) {\n+            preparedAttrs.getValue().add(AttributeBuilder.build(\n+                    PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n+        }\n \n-        return createTasks(any, null, false, false, true, propByRes, null);\n+        task.setAttributes(POJOHelper.serialize(preparedAttrs.getValue()));\n+\n+        return task;\n     }\n \n     /**\n@@ -319,13 +419,18 @@ protected List<PropagationTaskInfo> getDeleteTasks(\n      * @param enable whether user must be enabled or not\n      * @param deleteOnResource whether any must be deleted anyway from external resource or not\n      * @param propByRes operation to be performed per resource\n+     * @param propByLinkedAccount operation to be performed on linked accounts\n      * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks created\n      */\n-    protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n-            final String password, final boolean changePwd,\n-            final Boolean enable, final boolean deleteOnResource,\n-            final PropagationByResource propByRes,\n+    protected List<PropagationTaskInfo> createTasks(\n+            final Any<?> any,\n+            final String password,\n+            final boolean changePwd,\n+            final Boolean enable,\n+            final boolean deleteOnResource,\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount,\n             final Collection<Attr> vAttrs) {\n \n         LOG.debug(\"Provisioning {}:\\n{}\", any, propByRes);\n@@ -390,63 +495,67 @@ protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n                 LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n                         any.getType(), resource);\n             } else {\n-                PropagationTaskInfo task = new PropagationTaskInfo();\n-                task.setResource(resource.getKey());\n-                task.setObjectClassName(provision.getObjectClass().getObjectClassValue());\n-                task.setAnyTypeKind(any.getType().getKind());\n-                task.setAnyType(any.getType().getKey());\n-                if (!deleteOnResource) {\n-                    task.setEntityKey(any.getKey());\n-                }\n-                task.setOperation(operation);\n-                task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n-\n                 Pair<String, Set<Attribute>> preparedAttrs =\n                         mappingManager.prepareAttrs(any, password, changePwd, enable, provision);\n-                task.setConnObjectKey(preparedAttrs.getKey());\n-\n-                // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n-                // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n-                List<String> mandatoryMissing = new ArrayList<>();\n-                List<String> mandatoryNullOrEmpty = new ArrayList<>();\n-                mappingItems.stream().filter(item -> (!item.isConnObjectKey()\n-                        && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any))).\n-                        forEachOrdered(item -> {\n-                            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n-                            if (attr == null) {\n-                                mandatoryMissing.add(item.getExtAttrName());\n-                            } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n-                                mandatoryNullOrEmpty.add(item.getExtAttrName());\n-                            }\n-                        });\n-                if (!mandatoryMissing.isEmpty()) {\n-                    preparedAttrs.getValue().add(AttributeBuilder.build(\n-                            PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n-                }\n-                if (!mandatoryNullOrEmpty.isEmpty()) {\n-                    preparedAttrs.getValue().add(AttributeBuilder.build(\n-                            PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n-                }\n-\n-                if (vAttrMap.containsKey(resource.getKey())) {\n-                    preparedAttrs.getValue().addAll(vAttrMap.get(resource.getKey()));\n+                if (vAttrMap.containsKey(resourceKey)) {\n+                    preparedAttrs.getValue().addAll(vAttrMap.get(resourceKey));\n                 }\n \n-                task.setAttributes(POJOHelper.serialize(preparedAttrs.getValue()));\n-\n+                PropagationTaskInfo task = newTask(\n+                        any,\n+                        resourceKey,\n+                        operation,\n+                        provision,\n+                        deleteOnResource,\n+                        mappingItems,\n+                        preparedAttrs);\n+                task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resourceKey));\n                 tasks.add(task);\n-\n                 LOG.debug(\"PropagationTask created: {}\", task);\n             }\n         });\n \n+        if (any instanceof User && propByLinkedAccount != null) {\n+            User user = (User) any;\n+            propByLinkedAccount.asMap().forEach((accountInfo, operation) -> {\n+                user.getLinkedAccount(accountInfo.getLeft(), accountInfo.getRight()).ifPresent(account -> {\n+                    Provision provision = account.getResource().getProvision(AnyTypeKind.USER.name()).orElse(null);\n+                    List<? extends Item> mappingItems = provision == null\n+                            ? List.of()\n+                            : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n+\n+                    if (provision == null) {\n+                        LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n+                                account.getResource(), AnyTypeKind.USER.name());\n+                    } else if (mappingItems.isEmpty()) {\n+                        LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n+                                AnyTypeKind.USER.name(), account.getResource());\n+                    } else {\n+                        PropagationTaskInfo accountTask = newTask(\n+                                user,\n+                                account.getResource().getKey(),\n+                                operation,\n+                                provision,\n+                                deleteOnResource,\n+                                mappingItems,\n+                                Pair.of(account.getConnObjectName(),\n+                                        mappingManager.prepareAttrs(user, account, password, changePwd, provision)));\n+                        tasks.add(accountTask);\n+\n+                        LOG.debug(\"PropagationTask created for Linked Account {}: {}\",\n+                                account.getConnObjectName(), accountTask);\n+                    }\n+                });\n+            });\n+        }\n+\n         return tasks;\n     }\n \n     @Override\n     public List<PropagationTaskInfo> createTasks(\n             final Realm realm,\n-            final PropagationByResource propByRes,\n+            final PropagationByResource<String> propByRes,\n             final Collection<String> noPropResourceKeys) {\n \n         if (noPropResourceKeys != null) {"},{"sha":"2dbb92b8ed507c8abacb3364717412e5fc082921","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPullResultHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPullResultHandler.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -475,7 +475,7 @@ protected List<ProvisioningReport> deprovision(\n                             }\n                         }\n \n-                        PropagationByResource propByRes = new PropagationByResource();\n+                        PropagationByResource<String> propByRes = new PropagationByResource<>();\n                         propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n                         taskExecutor.execute(propagationManager.getDeleteTasks(\n                                 provision.getAnyType().getKind(),"},{"sha":"cfd2a9c9068c49931e7bec1ab764296928f3546a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AbstractPushResultHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAbstractPushResultHandler.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -107,7 +107,7 @@ protected void update(\n         List<String> noPropResources = new ArrayList<>(ownedResources);\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.add(ResourceOperation.UPDATE, profile.getTask().getResource().getKey());\n         propByRes.addOldConnObjectKey(profile.getTask().getResource().getKey(), beforeObj.getUid().getUidValue());\n \n@@ -133,7 +133,7 @@ protected void deprovision(final Any<?> any, final ConnectorObject beforeObj, fi\n         List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n         propByRes.addOldConnObjectKey(profile.getTask().getResource().getKey(), beforeObj.getUid().getUidValue());\n \n@@ -156,7 +156,7 @@ protected void provision(final Any<?> any, final Boolean enable, final Provision\n         List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.getCreateTasks("},{"sha":"da34c292c92a77d2835cf56131e5cc41793d0d42","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPullResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPullResultHandler.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -234,7 +234,7 @@ private void create(\n         try {\n             Realm realm = realmDAO.save(binder.create(profile.getTask().getDestinatioRealm(), realmTO));\n \n-            PropagationByResource propByRes = new PropagationByResource();\n+            PropagationByResource<String> propByRes = new PropagationByResource<>();\n             propByRes.addAll(ResourceOperation.CREATE, realm.getResourceKeys());\n             if (unmatchingRule == UnmatchingRule.ASSIGN) {\n                 List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n@@ -319,7 +319,7 @@ private List<ProvisioningReport> update(final SyncDelta delta, final List<String\n                             }\n                         }\n \n-                        PropagationByResource propByRes = binder.update(realm, before);\n+                        PropagationByResource<String> propByRes = binder.update(realm, before);\n                         realm = realmDAO.save(realm);\n                         RealmTO updated = binder.getRealmTO(realm, true);\n \n@@ -411,7 +411,7 @@ private List<ProvisioningReport> deprovision(final SyncDelta delta, final List<S\n                             }\n                         }\n \n-                        PropagationByResource propByRes = new PropagationByResource();\n+                        PropagationByResource<String> propByRes = new PropagationByResource<>();\n                         propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n                         taskExecutor.execute(propagationManager.createTasks(realm, propByRes, null), false);\n \n@@ -605,7 +605,7 @@ private List<ProvisioningReport> delete(final SyncDelta delta, final List<String\n                             throw containedAnys;\n                         }\n \n-                        PropagationByResource propByRes = new PropagationByResource();\n+                        PropagationByResource<String> propByRes = new PropagationByResource<>();\n                         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n                         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n                         taskExecutor.execute(taskInfos, false);"},{"sha":"062265f1162ca37c42975f499b6de60fa9c2168f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultRealmPushResultHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultRealmPushResultHandler.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -103,7 +103,7 @@ private static void reportPropagation(final ProvisioningReport result, final Pro\n \n     private Realm update(final RealmTO realmTO, final ConnectorObject beforeObj, final ProvisioningReport result) {\n         Realm realm = realmDAO.findByFullPath(realmTO.getFullPath());\n-        PropagationByResource propByRes = binder.update(realm, realmTO);\n+        PropagationByResource<String> propByRes = binder.update(realm, realmTO);\n         realm = realmDAO.save(realm);\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, null);\n@@ -121,7 +121,7 @@ private void deprovision(final Realm realm, final ConnectorObject beforeObj, fin\n         List<String> noPropResources = new ArrayList<>(realm.getResourceKeys());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.addAll(ResourceOperation.DELETE, realm.getResourceKeys());\n \n         List<PropagationTaskInfo> taskInfos = propagationManager.createTasks(realm, propByRes, noPropResources);\n@@ -137,7 +137,7 @@ private void provision(final Realm realm, final ProvisioningReport result) {\n         List<String> noPropResources = new ArrayList<>(realm.getResourceKeys());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n         PropagationReporter reporter = taskExecutor.execute("},{"sha":"bfbffc360477dea90191083d4ba0113171d7e7e9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/DefaultUserPushResultHandler.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDefaultUserPushResultHandler.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -49,14 +49,15 @@ protected void provision(final Any<?> any, final Boolean enabled, final Provisio\n         List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n         PropagationReporter reporter = taskExecutor.execute(propagationManager.getUserCreateTasks(\n                 before.getKey(),\n                 null,\n                 enabled,\n                 propByRes,\n+                new PropagationByResource<>(),\n                 before.getVirAttrs(),\n                 noPropResources),\n                 false);"},{"sha":"703b8a990788be4bdaa1ca1541166480dc454d78","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultAccountRule.java","status":"modified","additions":57,"deletions":29,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -18,15 +18,21 @@\n  */\n package org.apache.syncope.core.spring.policy;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.CollectionUtils;\n \n @AccountRuleConfClass(DefaultAccountRuleConf.class)\n public class DefaultAccountRule implements AccountRule {\n@@ -45,64 +51,86 @@ public void setConf(final AccountRuleConf conf) {\n         }\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public void enforce(final User user) {\n-        this.conf.getSchemasNotPermitted().stream().\n-                map(user::getPlainAttr).\n-                filter(Optional::isPresent).\n-                map(attr -> attr.get().getValuesAsStrings()).\n-                filter(values -> (values != null && !values.isEmpty())).\n-                forEachOrdered(values -> this.conf.getWordsNotPermitted().add(values.get(0)));\n-\n-        if (user.getUsername() == null) {\n-            throw new AccountPolicyException(\"Invalid account\");\n-        }\n-\n+    protected void enforce(final String username, final Set<String> wordsNotPermitted) {\n         // check min length\n-        if (this.conf.getMinLength() > 0 && this.conf.getMinLength() > user.getUsername().length()) {\n+        if (conf.getMinLength() > 0 && conf.getMinLength() > username.length()) {\n             throw new AccountPolicyException(\"Username too short\");\n         }\n \n         // check max length\n-        if (this.conf.getMaxLength() > 0 && this.conf.getMaxLength() < user.getUsername().length()) {\n+        if (conf.getMaxLength() > 0 && conf.getMaxLength() < username.length()) {\n             throw new AccountPolicyException(\"Username too long\");\n         }\n \n         // check words not permitted\n-        this.conf.getWordsNotPermitted().stream().\n-                filter(word -> StringUtils.containsIgnoreCase(user.getUsername(), word)).\n-                forEachOrdered(item -> {\n+        wordsNotPermitted.stream().\n+                filter(word -> StringUtils.containsIgnoreCase(username, word)).\n+                forEach(item -> {\n                     throw new AccountPolicyException(\"Used word(s) not permitted\");\n                 });\n \n         // check case\n-        if (this.conf.isAllUpperCase() && !user.getUsername().equals(user.getUsername().toUpperCase())) {\n+        if (conf.isAllUpperCase() && !username.equals(username.toUpperCase())) {\n             throw new AccountPolicyException(\"No lowercase characters permitted\");\n         }\n-        if (this.conf.isAllLowerCase() && !user.getUsername().equals(user.getUsername().toLowerCase())) {\n+        if (conf.isAllLowerCase() && !username.equals(username.toLowerCase())) {\n             throw new AccountPolicyException(\"No uppercase characters permitted\");\n         }\n \n         // check pattern\n-        Pattern pattern = (this.conf.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(this.conf.getPattern());\n-        if (!pattern.matcher(user.getUsername()).matches()) {\n+        Pattern pattern = (conf.getPattern() == null) ? DEFAULT_PATTERN : Pattern.compile(conf.getPattern());\n+        if (!pattern.matcher(username).matches()) {\n             throw new AccountPolicyException(\"Username does not match pattern\");\n         }\n \n         // check prefix\n-        this.conf.getPrefixesNotPermitted().stream().\n-                filter(prefix -> user.getUsername().startsWith(prefix)).\n-                forEachOrdered(item -> {\n+        conf.getPrefixesNotPermitted().stream().\n+                filter(prefix -> username.startsWith(prefix)).\n+                forEach(item -> {\n                     throw new AccountPolicyException(\"Prefix not permitted\");\n                 });\n \n         // check suffix\n-        this.conf.getSuffixesNotPermitted().stream().\n-                filter(suffix -> user.getUsername().endsWith(suffix)).\n-                forEachOrdered(item -> {\n+        conf.getSuffixesNotPermitted().stream().\n+                filter(suffix -> username.endsWith(suffix)).\n+                forEach(item -> {\n                     throw new AccountPolicyException(\"Suffix not permitted\");\n                 });\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final User user) {\n+        Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n+        wordsNotPermitted.addAll(\n+                conf.getSchemasNotPermitted().stream().\n+                        map(schema -> user.getPlainAttr(schema)).\n+                        filter(Optional::isPresent).\n+                        map(attr -> attr.get().getValuesAsStrings()).\n+                        filter(values -> !CollectionUtils.isEmpty(values)).\n+                        flatMap(Collection::stream).\n+                        collect(Collectors.toSet()));\n+\n+        enforce(user.getUsername(), wordsNotPermitted);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final LinkedAccount account) {\n+        if (StringUtils.isBlank(account.getUsername())) {\n+            return;\n+        }\n+\n+        Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n+        wordsNotPermitted.addAll(\n+                conf.getSchemasNotPermitted().stream().\n+                        map(schema -> account.getPlainAttr(schema)).\n+                        filter(Optional::isPresent).\n+                        map(attr -> attr.get().getValuesAsStrings()).\n+                        filter(values -> !CollectionUtils.isEmpty(values)).\n+                        flatMap(Collection::stream).\n+                        collect(Collectors.toSet()));\n+\n+        enforce(account.getUsername(), wordsNotPermitted);\n+    }\n }"},{"sha":"4326075d17f209bc6420cde0f7df580fa52bb0ed","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultPasswordRule.java","status":"modified","additions":157,"deletions":148,"changes":305,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -18,18 +18,31 @@\n  */\n package org.apache.syncope.core.spring.policy;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.CollectionUtils;\n \n @PasswordRuleConfClass(DefaultPasswordRuleConf.class)\n public class DefaultPasswordRule implements PasswordRule {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultPasswordRule.class);\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     private DefaultPasswordRuleConf conf;\n \n     @Override\n@@ -47,178 +60,174 @@ public void setConf(final PasswordRuleConf conf) {\n         }\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public void enforce(final User user) {\n-        this.conf.getSchemasNotPermitted().stream().\n-                map(user::getPlainAttr).\n-                filter(Optional::isPresent).\n-                map(attr -> attr.get().getValuesAsStrings()).\n-                filter(values -> (values != null && !values.isEmpty())).\n-                forEachOrdered(values -> this.conf.getWordsNotPermitted().add(values.get(0)));\n-\n-        String clearPassword = user.getClearPassword();\n-        String password = user.getPassword();\n-\n-        if (password != null && clearPassword != null) {\n-            // check length\n-            if (this.conf.getMinLength() > 0 && this.conf.getMinLength() > clearPassword.length()) {\n-                throw new PasswordPolicyException(\"Password too short\");\n-            }\n-\n-            if (this.conf.getMaxLength() > 0 && this.conf.getMaxLength() < clearPassword.length()) {\n-                throw new PasswordPolicyException(\"Password too long\");\n-            }\n-\n-            // check words not permitted\n-            this.conf.getWordsNotPermitted().stream().\n-                    filter(word -> StringUtils.containsIgnoreCase(clearPassword, word)).\n-                    forEachOrdered(item -> {\n-                        throw new PasswordPolicyException(\"Used word(s) not permitted\");\n-                    });\n-\n-            // check digits occurrence\n-            if (this.conf.isDigitRequired() && !checkDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain digit(s)\");\n-            }\n-\n-            // check lowercase alphabetic characters occurrence\n-            if (this.conf.isLowercaseRequired() && !checkLowercase(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n-            }\n-\n-            // check uppercase alphabetic characters occurrence\n-            if (this.conf.isUppercaseRequired() && !checkUppercase(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n-            }\n-\n-            // check prefix\n-            this.conf.getPrefixesNotPermitted().stream().\n-                    filter(clearPassword::startsWith).\n-                    forEachOrdered(item -> {\n-                        throw new PasswordPolicyException(\"Prefix not permitted\");\n-                    });\n-\n-            // check suffix\n-            this.conf.getSuffixesNotPermitted().stream().\n-                    filter(clearPassword::endsWith).\n-                    forEachOrdered(item -> {\n-                        throw new PasswordPolicyException(\"Suffix not permitted\");\n-                    });\n-\n-            // check digit first occurrence\n-            if (this.conf.isMustStartWithDigit() && !checkFirstDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must start with a digit\");\n-            }\n-\n-            if (this.conf.isMustntStartWithDigit() && checkFirstDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n-            }\n-\n-            // check digit last occurrence\n-            if (this.conf.isMustEndWithDigit() && !checkLastDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must end with a digit\");\n-            }\n-\n-            if (this.conf.isMustntEndWithDigit() && checkLastDigit(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n-            }\n-\n-            // check alphanumeric characters occurence\n-            if (this.conf.isAlphanumericRequired() && !checkAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n-            }\n+    protected void enforce(final String clear, final String username, final Set<String> wordsNotPermitted) {\n+        // check length\n+        if (conf.getMinLength() > 0 && conf.getMinLength() > clear.length()) {\n+            throw new PasswordPolicyException(\"Password too short\");\n+        }\n \n-            // check non alphanumeric characters occurence\n-            if (this.conf.isNonAlphanumericRequired() && !checkNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n-            }\n+        if (conf.getMaxLength() > 0 && conf.getMaxLength() < clear.length()) {\n+            throw new PasswordPolicyException(\"Password too long\");\n+        }\n \n-            // check alphanumeric character first occurrence\n-            if (this.conf.isMustStartWithAlpha() && !checkFirstAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n-            }\n+        // check words not permitted\n+        if (!conf.isUsernameAllowed() && username != null && username.equals(clear)) {\n+            throw new PasswordPolicyException(\"Password mustn't be equal to username\");\n+        }\n \n-            if (this.conf.isMustntStartWithAlpha() && checkFirstAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n-            }\n+        wordsNotPermitted.stream().\n+                filter(word -> StringUtils.containsIgnoreCase(clear, word)).\n+                forEach(item -> {\n+                    throw new PasswordPolicyException(\"Used word(s) not permitted\");\n+                });\n \n-            // check alphanumeric character last occurrence\n-            if (this.conf.isMustEndWithAlpha() && !checkLastAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n-            }\n+        // check digits occurrence\n+        if (conf.isDigitRequired() && !PolicyPattern.DIGIT.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must contain digit(s)\");\n+        }\n \n-            if (this.conf.isMustntEndWithAlpha() && checkLastAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n-            }\n+        // check lowercase alphabetic characters occurrence\n+        if (conf.isLowercaseRequired() && !PolicyPattern.ALPHA_LOWERCASE.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must contain lowercase alphabetic character(s)\");\n+        }\n \n-            // check non alphanumeric character first occurrence\n-            if (this.conf.isMustStartWithNonAlpha() && !checkFirstNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n-            }\n+        // check uppercase alphabetic characters occurrence\n+        if (conf.isUppercaseRequired() && !PolicyPattern.ALPHA_UPPERCASE.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must contain uppercase alphabetic character(s)\");\n+        }\n \n-            if (this.conf.isMustntStartWithNonAlpha() && checkFirstNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n-            }\n+        // check prefix\n+        conf.getPrefixesNotPermitted().stream().\n+                filter(prefix -> clear.startsWith(prefix)).\n+                forEach(item -> {\n+                    throw new PasswordPolicyException(\"Prefix not permitted\");\n+                });\n+\n+        // check suffix\n+        conf.getSuffixesNotPermitted().stream().\n+                filter(suffix -> clear.endsWith(suffix)).\n+                forEach(item -> {\n+                    throw new PasswordPolicyException(\"Suffix not permitted\");\n+                });\n+\n+        // check digit first occurrence\n+        if (conf.isMustStartWithDigit() && !PolicyPattern.FIRST_DIGIT.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must start with a digit\");\n+        }\n \n-            // check non alphanumeric character last occurrence\n-            if (this.conf.isMustEndWithNonAlpha() && !checkLastNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n-            }\n+        if (conf.isMustntStartWithDigit() && PolicyPattern.FIRST_DIGIT.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password mustn't start with a digit\");\n+        }\n \n-            if (this.conf.isMustntEndWithNonAlpha() && checkLastNonAlphanumeric(clearPassword)) {\n-                throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n-            }\n+        // check digit last occurrence\n+        if (conf.isMustEndWithDigit() && !PolicyPattern.LAST_DIGIT.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must end with a digit\");\n+        }\n \n-            if (!this.conf.isUsernameAllowed()\n-                    && user.getUsername() != null && user.getUsername().equals(clearPassword)) {\n+        if (conf.isMustntEndWithDigit() && PolicyPattern.LAST_DIGIT.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password mustn't end with a digit\");\n+        }\n \n-                throw new PasswordPolicyException(\"Password mustn't be equal to username\");\n-            }\n+        // check alphanumeric characters occurence\n+        if (conf.isAlphanumericRequired() && !PolicyPattern.ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must contain alphanumeric character(s)\");\n         }\n-    }\n \n-    private static boolean checkDigit(final String str) {\n-        return PolicyPattern.DIGIT.matcher(str).matches();\n-    }\n+        // check non alphanumeric characters occurence\n+        if (conf.isNonAlphanumericRequired() && !PolicyPattern.NON_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must contain non-alphanumeric character(s)\");\n+        }\n \n-    private static boolean checkLowercase(final String str) {\n-        return PolicyPattern.ALPHA_LOWERCASE.matcher(str).matches();\n-    }\n+        // check alphanumeric character first occurrence\n+        if (conf.isMustStartWithAlpha() && !PolicyPattern.FIRST_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must start with an alphanumeric character\");\n+        }\n \n-    private static boolean checkUppercase(final String str) {\n-        return PolicyPattern.ALPHA_UPPERCASE.matcher(str).matches();\n-    }\n+        if (conf.isMustntStartWithAlpha() && PolicyPattern.FIRST_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password mustn't start with an alphanumeric character\");\n+        }\n \n-    private static boolean checkFirstDigit(final String str) {\n-        return PolicyPattern.FIRST_DIGIT.matcher(str).matches();\n-    }\n+        // check alphanumeric character last occurrence\n+        if (conf.isMustEndWithAlpha() && !PolicyPattern.LAST_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must end with an alphanumeric character\");\n+        }\n \n-    private static boolean checkLastDigit(final String str) {\n-        return PolicyPattern.LAST_DIGIT.matcher(str).matches();\n-    }\n+        if (conf.isMustntEndWithAlpha() && PolicyPattern.LAST_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password mustn't end with an alphanumeric character\");\n+        }\n \n-    private static boolean checkAlphanumeric(final String str) {\n-        return PolicyPattern.ALPHANUMERIC.matcher(str).matches();\n-    }\n+        // check non alphanumeric character first occurrence\n+        if (conf.isMustStartWithNonAlpha() && !PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must start with a non-alphanumeric character\");\n+        }\n \n-    private static boolean checkFirstAlphanumeric(final String str) {\n-        return PolicyPattern.FIRST_ALPHANUMERIC.matcher(str).matches();\n-    }\n+        if (conf.isMustntStartWithNonAlpha() && PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password mustn't start with a non-alphanumeric character\");\n+        }\n \n-    private static boolean checkLastAlphanumeric(final String str) {\n-        return PolicyPattern.LAST_ALPHANUMERIC.matcher(str).matches();\n-    }\n+        // check non alphanumeric character last occurrence\n+        if (conf.isMustEndWithNonAlpha() && !PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password must end with a non-alphanumeric character\");\n+        }\n \n-    private static boolean checkNonAlphanumeric(final String str) {\n-        return PolicyPattern.NON_ALPHANUMERIC.matcher(str).matches();\n+        if (conf.isMustntEndWithNonAlpha() && PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(clear).matches()) {\n+            throw new PasswordPolicyException(\"Password mustn't end with a non-alphanumeric character\");\n+        }\n     }\n \n-    private static boolean checkFirstNonAlphanumeric(final String str) {\n-        return PolicyPattern.FIRST_NON_ALPHANUMERIC.matcher(str).matches();\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final User user) {\n+        if (user.getPassword() != null && user.getClearPassword() != null) {\n+            Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n+            wordsNotPermitted.addAll(\n+                    conf.getSchemasNotPermitted().stream().\n+                            map(schema -> user.getPlainAttr(schema)).\n+                            filter(Optional::isPresent).\n+                            map(attr -> attr.get().getValuesAsStrings()).\n+                            filter(values -> !CollectionUtils.isEmpty(values)).\n+                            flatMap(Collection::stream).\n+                            collect(Collectors.toSet()));\n+\n+            enforce(user.getClearPassword(), user.getUsername(), wordsNotPermitted);\n+        }\n     }\n \n-    private static boolean checkLastNonAlphanumeric(final String str) {\n-        return PolicyPattern.LAST_NON_ALPHANUMERIC.matcher(str).matches();\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final LinkedAccount account) {\n+        conf.getWordsNotPermitted().addAll(\n+                conf.getSchemasNotPermitted().stream().\n+                        map(schema -> account.getPlainAttr(schema)).\n+                        filter(Optional::isPresent).\n+                        map(attr -> attr.get().getValuesAsStrings()).\n+                        filter(values -> !CollectionUtils.isEmpty(values)).\n+                        flatMap(Collection::stream).\n+                        collect(Collectors.toList()));\n+\n+        if (account.getPassword() != null) {\n+            String clear = null;\n+            if (account.canDecodePassword()) {\n+                try {\n+                    clear = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not decode password for {}\", account, e);\n+                }\n+            }\n+\n+            if (clear != null) {\n+                Set<String> wordsNotPermitted = new HashSet<>(conf.getWordsNotPermitted());\n+                wordsNotPermitted.addAll(\n+                        conf.getSchemasNotPermitted().stream().\n+                                map(schema -> account.getPlainAttr(schema)).\n+                                filter(Optional::isPresent).\n+                                map(attr -> attr.get().getValuesAsStrings()).\n+                                filter(values -> !CollectionUtils.isEmpty(values)).\n+                                flatMap(Collection::stream).\n+                                collect(Collectors.toSet()));\n+\n+                enforce(clear, account.getUsername(), wordsNotPermitted);\n+            }\n+        }\n     }\n }"},{"sha":"4a2bd3118b78949c4a56e95974c5e8db2997e988","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/HaveIBeenPwnedPasswordRule.java","status":"modified","additions":45,"deletions":24,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FHaveIBeenPwnedPasswordRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.slf4j.Logger;\n@@ -68,36 +69,56 @@ public void setConf(final PasswordRuleConf conf) {\n         }\n     }\n \n+    protected void enforce(final String clear) {\n+        try {\n+            String sha1 = ENCRYPTOR.encode(clear, CipherAlgorithm.SHA1);\n+\n+            HttpHeaders headers = new HttpHeaders();\n+            headers.set(HttpHeaders.USER_AGENT, \"Apache Syncope\");\n+            ResponseEntity<String> response = new RestTemplate().exchange(\n+                    URI.create(\"https://api.pwnedpasswords.com/range/\" + sha1.substring(0, 5)),\n+                    HttpMethod.GET,\n+                    new HttpEntity<>(null, headers),\n+                    String.class);\n+            if (StringUtils.isNotBlank(response.getBody())) {\n+                if (Stream.of(response.getBody().split(\"\\\\n\")).anyMatch(line\n+                        -> sha1.equals(sha1.substring(0, 5) + StringUtils.substringBefore(line, \":\")))) {\n+\n+                    throw new PasswordPolicyException(\"Password pwned\");\n+                }\n+            }\n+        } catch (UnsupportedEncodingException | InvalidKeyException | NoSuchAlgorithmException\n+                | BadPaddingException | IllegalBlockSizeException | NoSuchPaddingException e) {\n+\n+            LOG.error(\"Could not encode the password value as SHA1\", e);\n+        } catch (HttpStatusCodeException e) {\n+            LOG.error(\"Error while contacting the PwnedPasswords service\", e);\n+        }\n+    }\n+\n     @Transactional(readOnly = true)\n     @Override\n     public void enforce(final User user) {\n-        String clearPassword = user.getClearPassword();\n-        String password = user.getPassword();\n-\n-        if (password != null && clearPassword != null) {\n-            try {\n-                String sha1 = ENCRYPTOR.encode(clearPassword, CipherAlgorithm.SHA1);\n-\n-                HttpHeaders headers = new HttpHeaders();\n-                headers.set(HttpHeaders.USER_AGENT, \"Apache Syncope\");\n-                ResponseEntity<String> response = new RestTemplate().exchange(\n-                        URI.create(\"https://api.pwnedpasswords.com/range/\" + sha1.substring(0, 5)),\n-                        HttpMethod.GET,\n-                        new HttpEntity<>(null, headers),\n-                        String.class);\n-                if (StringUtils.isNotBlank(response.getBody())) {\n-                    if (Stream.of(response.getBody().split(\"\\\\n\")).anyMatch(line\n-                            -> sha1.equals(sha1.substring(0, 5) + StringUtils.substringBefore(line, \":\")))) {\n+        if (user.getPassword() != null && user.getClearPassword() != null) {\n+            enforce(user.getClearPassword());\n+        }\n+    }\n \n-                        throw new PasswordPolicyException(\"Password pwned\");\n-                    }\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final LinkedAccount account) {\n+        if (account.getPassword() != null) {\n+            String clear = null;\n+            if (account.canDecodePassword()) {\n+                try {\n+                    clear = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not decode password for {}\", account, e);\n                 }\n-            } catch (UnsupportedEncodingException | InvalidKeyException | NoSuchAlgorithmException\n-                    | BadPaddingException | IllegalBlockSizeException | NoSuchPaddingException e) {\n+            }\n \n-                LOG.error(\"Could not encode the password value as SHA1\", e);\n-            } catch (HttpStatusCodeException e) {\n-                LOG.error(\"Error while contacting the PwnedPasswords service\", e);\n+            if (clear != null) {\n+                enforce(clear);\n             }\n         }\n     }"},{"sha":"41f9fbcaaf4bc496ee82c4749ee05c76bdbd4854","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/TestPasswordRule.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FTestPasswordRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n @PasswordRuleConfClass(DefaultPasswordRuleConf.class)\n@@ -49,4 +50,8 @@ public void enforce(final User user) {\n         // nothing to do\n     }\n \n+    @Override\n+    public void enforce(LinkedAccount account) {\n+        // nothing to do\n+    }\n }"},{"sha":"c7bb9cb64fe967ab59a199f214697b3f4b1e04af","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/UserWorkflowAdapter.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FUserWorkflowAdapter.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -21,7 +21,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n \n /**\n  * Interface for calling underlying workflow implementations.\n@@ -34,7 +34,7 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n      * @param userCR user to be created and whether to propagate it as active\n      * @return user just created\n      */\n-    WorkflowResult<Pair<String, Boolean>> create(UserCR userCR);\n+    UserWorkflowResult<Pair<String, Boolean>> create(UserCR userCR);\n \n     /**\n      * Create an user, optionally disabling password policy check.\n@@ -44,7 +44,7 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n      * @param enabled specify true/false to force active/supended status\n      * @return user just created\n      */\n-    WorkflowResult<Pair<String, Boolean>> create(UserCR userCR, boolean disablePwdPolicyCheck, Boolean enabled);\n+    UserWorkflowResult<Pair<String, Boolean>> create(UserCR userCR, boolean disablePwdPolicyCheck, Boolean enabled);\n \n     /**\n      * Activate an user.\n@@ -53,39 +53,39 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n      * @param token to be verified for activation\n      * @return user just updated\n      */\n-    WorkflowResult<String> activate(String userKey, String token);\n+    UserWorkflowResult<String> activate(String userKey, String token);\n \n     /**\n      * Update an user.\n      *\n      * @param userUR modification set to be performed\n      * @return user just updated and propagations to be performed\n      */\n-    WorkflowResult<Pair<UserUR, Boolean>> update(UserUR userUR);\n+    UserWorkflowResult<Pair<UserUR, Boolean>> update(UserUR userUR);\n \n     /**\n      * Suspend an user.\n      *\n      * @param key to be suspended\n      * @return user just suspended\n      */\n-    WorkflowResult<String> suspend(String key);\n+    UserWorkflowResult<String> suspend(String key);\n \n     /**\n      * Suspend an user (used by internal authentication process)\n      *\n      * @param key to be suspended\n      * @return user just suspended and information whether to propagate suspension\n      */\n-    Pair<WorkflowResult<String>, Boolean> internalSuspend(String key);\n+    Pair<UserWorkflowResult<String>, Boolean> internalSuspend(String key);\n \n     /**\n      * Reactivate an user.\n      *\n      * @param userKey user to be reactivated\n      * @return user just reactivated\n      */\n-    WorkflowResult<String> reactivate(String userKey);\n+    UserWorkflowResult<String> reactivate(String userKey);\n \n     /**\n      * Request password reset for an user.\n@@ -102,7 +102,7 @@ public interface UserWorkflowAdapter extends WorkflowAdapter {\n      * @param password new password value\n      * @return user just updated and propagations to be performed\n      */\n-    WorkflowResult<Pair<UserUR, Boolean>> confirmPasswordReset(String userKey, String token, String password);\n+    UserWorkflowResult<Pair<UserUR, Boolean>> confirmPasswordReset(String userKey, String token, String password);\n \n     /**\n      * Delete an user."},{"sha":"c3bb842c512582453a7531ec30e364dab95f4987","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":18,"deletions":19,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -18,14 +18,13 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n@@ -54,45 +53,45 @@ public String getPrefix() {\n     }\n \n     @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(final UserCR userCR) {\n+    public UserWorkflowResult<Pair<String, Boolean>> create(final UserCR userCR) {\n         return create(userCR, false, null);\n     }\n \n-    protected abstract WorkflowResult<Pair<String, Boolean>> doCreate(\n+    protected abstract UserWorkflowResult<Pair<String, Boolean>> doCreate(\n             UserCR userCR, boolean disablePwdPolicyCheck, Boolean enabled);\n \n     @Override\n-    public WorkflowResult<Pair<String, Boolean>> create(\n+    public UserWorkflowResult<Pair<String, Boolean>> create(\n             final UserCR userCR,\n             final boolean disablePwdPolicyCheck,\n             final Boolean enabled) {\n \n         return doCreate(userCR, disablePwdPolicyCheck, enabled);\n     }\n \n-    protected abstract WorkflowResult<String> doActivate(User user, String token);\n+    protected abstract UserWorkflowResult<String> doActivate(User user, String token);\n \n     @Override\n-    public WorkflowResult<String> activate(final String key, final String token) {\n+    public UserWorkflowResult<String> activate(final String key, final String token) {\n         return doActivate(userDAO.authFind(key), token);\n     }\n \n-    protected abstract WorkflowResult<Pair<UserUR, Boolean>> doUpdate(User user, UserUR userUR);\n+    protected abstract UserWorkflowResult<Pair<UserUR, Boolean>> doUpdate(User user, UserUR userUR);\n \n     @Override\n-    public WorkflowResult<Pair<UserUR, Boolean>> update(final UserUR userUR) {\n-        WorkflowResult<Pair<UserUR, Boolean>> result = doUpdate(userDAO.authFind(userUR.getKey()), userUR);\n+    public UserWorkflowResult<Pair<UserUR, Boolean>> update(final UserUR userUR) {\n+        UserWorkflowResult<Pair<UserUR, Boolean>> result = doUpdate(userDAO.authFind(userUR.getKey()), userUR);\n \n         // re-read to ensure that requester's administration rights are still valid\n         userDAO.authFind(userUR.getKey());\n \n         return result;\n     }\n \n-    protected abstract WorkflowResult<String> doSuspend(User user);\n+    protected abstract UserWorkflowResult<String> doSuspend(User user);\n \n     @Override\n-    public WorkflowResult<String> suspend(final String key) {\n+    public UserWorkflowResult<String> suspend(final String key) {\n         User user = userDAO.authFind(key);\n \n         // set suspended flag\n@@ -102,10 +101,10 @@ public WorkflowResult<String> suspend(final String key) {\n     }\n \n     @Override\n-    public Pair<WorkflowResult<String>, Boolean> internalSuspend(final String key) {\n+    public Pair<UserWorkflowResult<String>, Boolean> internalSuspend(final String key) {\n         User user = userDAO.authFind(key);\n \n-        Pair<WorkflowResult<String>, Boolean> result = null;\n+        Pair<UserWorkflowResult<String>, Boolean> result = null;\n \n         Pair<Boolean, Boolean> enforce = userDAO.enforcePolicies(user);\n         if (enforce.getKey()) {\n@@ -117,16 +116,16 @@ public Pair<WorkflowResult<String>, Boolean> internalSuspend(final String key) {\n             // set suspended flag\n             user.setSuspended(Boolean.TRUE);\n \n-            result = ImmutablePair.of(doSuspend(user), enforce.getValue());\n+            result = Pair.of(doSuspend(user), enforce.getValue());\n         }\n \n         return result;\n     }\n \n-    protected abstract WorkflowResult<String> doReactivate(User user);\n+    protected abstract UserWorkflowResult<String> doReactivate(User user);\n \n     @Override\n-    public WorkflowResult<String> reactivate(final String key) {\n+    public UserWorkflowResult<String> reactivate(final String key) {\n         User user = userDAO.authFind(key);\n \n         // reset failed logins\n@@ -145,11 +144,11 @@ public void requestPasswordReset(final String key) {\n         doRequestPasswordReset(userDAO.authFind(key));\n     }\n \n-    protected abstract WorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n+    protected abstract UserWorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n             User user, String token, String password);\n \n     @Override\n-    public WorkflowResult<Pair<UserUR, Boolean>> confirmPasswordReset(\n+    public UserWorkflowResult<Pair<UserUR, Boolean>> confirmPasswordReset(\n             final String key, final String token, final String password) {\n \n         return doConfirmPasswordReset(userDAO.authFind(key), token, password);"},{"sha":"154e6972b7c58f01a1123154e8130b96c6e6e9de","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultAnyObjectWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultAnyObjectWorkflowAdapter.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -36,15 +36,15 @@ protected WorkflowResult<String> doCreate(final AnyObjectCR anyObjectCR) {\n         dataBinder.create(anyObject, anyObjectCR);\n         anyObject = anyObjectDAO.save(anyObject);\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.CREATE, anyObjectDAO.findAllResourceKeys(anyObject.getKey()));\n \n         return new WorkflowResult<>(anyObject.getKey(), propByRes, \"create\");\n     }\n \n     @Override\n     protected WorkflowResult<AnyObjectUR> doUpdate(final AnyObject anyObject, final AnyObjectUR anyObjectUR) {\n-        PropagationByResource propByRes = dataBinder.update(anyObject, anyObjectUR);\n+        PropagationByResource<String> propByRes = dataBinder.update(anyObject, anyObjectUR);\n         return new WorkflowResult<>(anyObjectUR, propByRes, \"update\");\n     }\n "},{"sha":"29cce600cba70384f4868568a8e29f3c7f0c57b0","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -36,15 +36,15 @@ protected WorkflowResult<String> doCreate(final GroupCR groupCR) {\n         dataBinder.create(group, groupCR);\n         group = groupDAO.saveAndRefreshDynMemberships(group);\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.CREATE, groupDAO.findAllResourceKeys(group.getKey()));\n \n         return new WorkflowResult<>(group.getKey(), propByRes, \"create\");\n     }\n \n     @Override\n     protected WorkflowResult<GroupUR> doUpdate(final Group group, final GroupUR groupUR) {\n-        PropagationByResource propByRes = dataBinder.update(group, groupUR);\n+        PropagationByResource<String> propByRes = dataBinder.update(group, groupUR);\n         return new WorkflowResult<>(groupUR, propByRes, \"update\");\n     }\n "},{"sha":"b53e75f0984a285af911345d20c57e387d884493","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":28,"deletions":14,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -40,7 +40,7 @@ public class DefaultUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     private ConfParamOps confParamOps;\n \n     @Override\n-    protected WorkflowResult<Pair<String, Boolean>> doCreate(\n+    protected UserWorkflowResult<Pair<String, Boolean>> doCreate(\n             final UserCR userCR,\n             final boolean disablePwdPolicyCheck,\n             final Boolean enabled) {\n@@ -69,14 +69,23 @@ protected WorkflowResult<Pair<String, Boolean>> doCreate(\n         user.setStatus(status);\n         user = userDAO.save(user);\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.CREATE, userDAO.findAllResourceKeys(user.getKey()));\n \n-        return new WorkflowResult<>(Pair.of(user.getKey(), propagateEnable), propByRes, \"create\");\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        user.getLinkedAccounts().forEach(account -> propByLinkedAccount.add(\n+                ResourceOperation.CREATE,\n+                Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+\n+        return new UserWorkflowResult<>(\n+                Pair.of(user.getKey(), propagateEnable),\n+                propByRes,\n+                propByLinkedAccount,\n+                \"create\");\n     }\n \n     @Override\n-    protected WorkflowResult<String> doActivate(final User user, final String token) {\n+    protected UserWorkflowResult<String> doActivate(final User user, final String token) {\n         if (!user.checkToken(token)) {\n             throw new WorkflowException(new IllegalArgumentException(\"Wrong token: \" + token + \" for \" + user));\n         }\n@@ -85,29 +94,34 @@ protected WorkflowResult<String> doActivate(final User user, final String token)\n         user.setStatus(\"active\");\n         User updated = userDAO.save(user);\n \n-        return new WorkflowResult<>(updated.getKey(), null, \"activate\");\n+        return new UserWorkflowResult<>(updated.getKey(), null, null, \"activate\");\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final UserUR userUR) {\n-        PropagationByResource propByRes = dataBinder.update(user, userUR);\n-        return new WorkflowResult<>(Pair.of(userUR, !user.isSuspended()), propByRes, \"update\");\n+    protected UserWorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final UserUR userUR) {\n+        Pair<PropagationByResource<String>, PropagationByResource<Pair<String, String>>> propInfo =\n+                dataBinder.update(user, userUR);\n+        return new UserWorkflowResult<>(\n+                Pair.of(userUR, !user.isSuspended()),\n+                propInfo.getLeft(),\n+                propInfo.getRight(),\n+                \"update\");\n     }\n \n     @Override\n-    protected WorkflowResult<String> doSuspend(final User user) {\n+    protected UserWorkflowResult<String> doSuspend(final User user) {\n         user.setStatus(\"suspended\");\n         User updated = userDAO.save(user);\n \n-        return new WorkflowResult<>(updated.getKey(), null, \"suspend\");\n+        return new UserWorkflowResult<>(updated.getKey(), null, null, \"suspend\");\n     }\n \n     @Override\n-    protected WorkflowResult<String> doReactivate(final User user) {\n+    protected UserWorkflowResult<String> doReactivate(final User user) {\n         user.setStatus(\"active\");\n         User updated = userDAO.save(user);\n \n-        return new WorkflowResult<>(updated.getKey(), null, \"reactivate\");\n+        return new UserWorkflowResult<>(updated.getKey(), null, null, \"reactivate\");\n     }\n \n     @Override\n@@ -119,7 +133,7 @@ protected void doRequestPasswordReset(final User user) {\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n+    protected UserWorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n             final User user, final String token, final String password) {\n \n         if (!user.checkToken(token)) {"},{"sha":"ef0b317eab0a6e2ed1ecd34a6b357a04159fda09","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -161,8 +161,8 @@ public Pair<String, List<PropagationStatus>> activate(final StatusR statusR, fin\n         if (statusR.isOnSyncope()) {\n             sendMessage(\"direct:activateUser\", statusR.getKey(), props);\n         } else {\n-            WorkflowResult<String> updated =\n-                    new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n+            UserWorkflowResult<String> updated =\n+                    new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -188,8 +188,8 @@ public Pair<String, List<PropagationStatus>> reactivate(final StatusR statusR, f\n         if (statusR.isOnSyncope()) {\n             sendMessage(\"direct:reactivateUser\", statusR.getKey(), props);\n         } else {\n-            WorkflowResult<String> updated =\n-                    new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n+            UserWorkflowResult<String> updated =\n+                    new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -215,8 +215,8 @@ public Pair<String, List<PropagationStatus>> suspend(final StatusR statusR, fina\n         if (statusR.isOnSyncope()) {\n             sendMessage(\"direct:suspendUser\", statusR.getKey(), props);\n         } else {\n-            WorkflowResult<String> updated =\n-                    new WorkflowResult<>(statusR.getKey(), null, statusR.getType().name().toLowerCase());\n+            UserWorkflowResult<String> updated =\n+                    new UserWorkflowResult<>(statusR.getKey(), null, null, statusR.getType().name().toLowerCase());\n             sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n@@ -326,8 +326,10 @@ public Pair<UserUR, List<PropagationStatus>> update(\n             result.setStatus(ProvisioningReport.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to pull status anyway (if configured)\\n\" + ex.getMessage());\n \n-            WorkflowResult<Pair<UserUR, Boolean>> updated = new WorkflowResult<>(\n-                    Pair.of(userUR, false), new PropagationByResource(),\n+            UserWorkflowResult<Pair<UserUR, Boolean>> updated = new UserWorkflowResult<>(\n+                    Pair.of(userUR, false),\n+                    new PropagationByResource<>(),\n+                    new PropagationByResource<>(),\n                     new HashSet<>());\n             sendMessage(\"direct:userInPull\", updated, props);\n             exchange = pollingConsumer.receive();"},{"sha":"046516689a4187fe87e571a4aeeaf95354f63b1f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ConfirmPasswordResetProducer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FConfirmPasswordResetProducer.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class ConfirmPasswordResetProducer extends AbstractProducer {\n@@ -38,8 +38,8 @@ public ConfirmPasswordResetProducer(final Endpoint endpoint, final AnyTypeKind a\n     @Override\n     public void process(final Exchange exchange) throws Exception {\n         if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            WorkflowResult<Pair<UserUR, Boolean>> updated =\n-                    (WorkflowResult<Pair<UserUR, Boolean>>) exchange.getIn().getBody();\n+            UserWorkflowResult<Pair<UserUR, Boolean>> updated =\n+                    (UserWorkflowResult<Pair<UserUR, Boolean>>) exchange.getIn().getBody();\n \n             List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(updated);\n "},{"sha":"fe93b6dbb4495434876f74c32730cf7829446d1d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.common.lib.request.GroupCR;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n@@ -49,14 +50,15 @@ public void process(final Exchange exchange) throws Exception {\n             Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n             if (actual instanceof UserCR) {\n-                WorkflowResult<Pair<String, Boolean>> created =\n-                        (WorkflowResult<Pair<String, Boolean>>) exchange.getIn().getBody();\n+                UserWorkflowResult<Pair<String, Boolean>> created =\n+                        (UserWorkflowResult<Pair<String, Boolean>>) exchange.getIn().getBody();\n \n                 List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserCreateTasks(\n                         created.getResult().getKey(),\n                         ((UserCR) actual).getPassword(),\n                         created.getResult().getValue(),\n                         created.getPropByRes(),\n+                        created.getPropByLinkedAccount(),\n                         ((UserCR) actual).getVirAttrs(),\n                         excludedResources);\n                 PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);"},{"sha":"fce47dcfb040d18c2b83b26396b9af0178fc1a10","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"modified","additions":25,"deletions":18,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -20,10 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -61,17 +61,23 @@ public void process(final Exchange exchange) throws Exception {\n             PropagationReporter reporter;\n             switch (getAnyTypeKind()) {\n                 case USER:\n-                    PropagationByResource propByRes = new PropagationByResource();\n+                    PropagationByResource<String> propByRes = new PropagationByResource<>();\n                     propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceKeys(key));\n+\n+                    PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+                    userDAO.findLinkedAccounts(key).forEach(account -> propByLinkedAccount.add(\n+                            ResourceOperation.DELETE,\n+                            Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+\n                     // Note here that we can only notify about \"delete\", not any other\n                     // task defined in workflow process definition: this because this\n                     // information could only be available after uwfAdapter.delete(), which\n                     // will also effectively remove user from db, thus making virtually\n                     // impossible by NotificationManager to fetch required user information\n-                    taskInfos = getPropagationManager().getDeleteTasks(\n-                            AnyTypeKind.USER,\n+                    taskInfos = getPropagationManager().getUserDeleteTasks(\n                             key,\n                             propByRes,\n+                            propByLinkedAccount,\n                             excludedResources);\n                     reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n                     exchange.setProperty(\"statuses\", reporter.getStatuses());\n@@ -81,21 +87,22 @@ public void process(final Exchange exchange) throws Exception {\n                     taskInfos = new ArrayList<>();\n                     // Generate propagation tasks for deleting users from group resources, if they are on those\n                     // resources only because of the reason being deleted (see SYNCOPE-357)\n-                    for (Map.Entry<String, PropagationByResource> entry\n-                            : groupDataBinder.findUsersWithTransitiveResources(key).entrySet()) {\n-\n-                        taskInfos.addAll(getPropagationManager().getDeleteTasks(\n-                                AnyTypeKind.USER,\n-                                entry.getKey(),\n-                                entry.getValue(),\n-                                excludedResources));\n-                    }\n+                    groupDataBinder.findUsersWithTransitiveResources(key).\n+                            forEach((anyKey, anyPropByRes) -> taskInfos.addAll(\n+                            getPropagationManager().getDeleteTasks(\n+                                    AnyTypeKind.USER,\n+                                    anyKey,\n+                                    anyPropByRes,\n+                                    excludedResources)));\n                     groupDataBinder.findAnyObjectsWithTransitiveResources(key).\n-                            forEach((k, pbr) -> taskInfos.addAll(getPropagationManager().getDeleteTasks(\n-                            AnyTypeKind.ANY_OBJECT,\n-                            k,\n-                            pbr,\n-                            excludedResources))); // Generate propagation tasks for deleting this group from resources\n+                            forEach((anyKey, anyPropByRes) -> {\n+                                taskInfos.addAll(getPropagationManager().getDeleteTasks(\n+                                        AnyTypeKind.ANY_OBJECT,\n+                                        anyKey,\n+                                        anyPropByRes,\n+                                        excludedResources));\n+                            });\n+                    // Generate propagation tasks for deleting this group from resources\n                     taskInfos.addAll(getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.GROUP,\n                             key,"},{"sha":"5d1471b45ce01351c8518803714ad63926ccb191","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeprovisionProducer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeprovisionProducer.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -60,7 +60,7 @@ public void process(final Exchange exchange) throws Exception {\n         Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n         if (null != getAnyTypeKind()) {\n-            PropagationByResource propByRes = new PropagationByResource();\n+            PropagationByResource<String> propByRes = new PropagationByResource<>();\n             List<PropagationTaskInfo> taskInfos;\n             PropagationReporter propagationReporter;\n             switch (getAnyTypeKind()) {"},{"sha":"983c01faee33931da3413a27f02036c68215259a","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/ProvisionProducer.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FProvisionProducer.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -22,7 +22,6 @@\n import java.util.stream.Collectors;\n import org.apache.camel.Endpoint;\n import org.apache.camel.Exchange;\n-import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n@@ -31,7 +30,7 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n@@ -63,18 +62,18 @@ public void process(final Exchange exchange) throws Exception {\n                         new PasswordPatch.Builder().onSyncope(true).value(password).resources(resources).build());\n             }\n \n-            PropagationByResource propByRes = new PropagationByResource();\n+            PropagationByResource<String> propByRes = new PropagationByResource<>();\n             propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-            WorkflowResult<Pair<UserUR, Boolean>> wfResult = new WorkflowResult<>(\n-                    ImmutablePair.of(userUR, (Boolean) null), propByRes, \"update\");\n+            UserWorkflowResult<Pair<UserUR, Boolean>> wfResult = new UserWorkflowResult<>(\n+                    Pair.of(userUR, (Boolean) null), propByRes, null, \"update\");\n \n             List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(wfResult, changePwd, null);\n             PropagationReporter reporter = getPropagationTaskExecutor().execute(taskInfos, nullPriorityAsync);\n \n             exchange.getMessage().setBody(reporter.getStatuses());\n         } else {\n-            PropagationByResource propByRes = new PropagationByResource();\n+            PropagationByResource<String> propByRes = new PropagationByResource<>();\n             propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n             AnyTypeKind anyTypeKind = AnyTypeKind.GROUP;"},{"sha":"14d237c3e0bcd0ad0820e7a1f08c5de00bb9b9b0","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/StatusProducer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FStatusProducer.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -89,7 +89,7 @@ public void process(final Exchange exchange) throws Exception {\n             StatusR statusR = exchange.getProperty(\"statusR\", StatusR.class);\n             Boolean nullPriorityAsync = exchange.getProperty(\"nullPriorityAsync\", Boolean.class);\n \n-            PropagationByResource propByRes = new PropagationByResource();\n+            PropagationByResource<String> propByRes = new PropagationByResource<>();\n             propByRes.addAll(ResourceOperation.UPDATE, statusR.getResources());\n             List<PropagationTaskInfo> taskInfos = getPropagationManager().getUpdateTasks(AnyTypeKind.USER,\n                     statusR.getKey(),"},{"sha":"9261bb5cb19b4d3b2a3a521d95ff67269ee507b9","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/SuspendProducer.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FSuspendProducer.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -25,7 +25,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n \n public class SuspendProducer extends AbstractProducer {\n@@ -38,17 +38,19 @@ public SuspendProducer(final Endpoint endpoint, final AnyTypeKind anyTypeKind) {\n     @Override\n     public void process(final Exchange exchange) throws Exception {\n         if (getAnyTypeKind() == AnyTypeKind.USER) {\n-            Pair<WorkflowResult<String>, Boolean> updated =\n-                    (Pair<WorkflowResult<String>, Boolean>) exchange.getIn().getBody();\n+            Pair<UserWorkflowResult<String>, Boolean> updated =\n+                    (Pair<UserWorkflowResult<String>, Boolean>) exchange.getIn().getBody();\n \n             // propagate suspension if and only if it is required by policy\n             if (updated != null && updated.getRight()) {\n                 UserUR userUR = new UserUR.Builder(updated.getLeft().getResult()).build();\n \n                 List<PropagationTaskInfo> taskInfos = getPropagationManager().getUserUpdateTasks(\n-                        new WorkflowResult<>(\n+                        new UserWorkflowResult<>(\n                                 Pair.of(userUR, Boolean.FALSE),\n-                                updated.getLeft().getPropByRes(), updated.getLeft().getPerformedTasks()));\n+                                updated.getLeft().getPropByRes(),\n+                                updated.getKey().getPropByLinkedAccount(),\n+                                updated.getLeft().getPerformedTasks()));\n                 getPropagationTaskExecutor().execute(taskInfos, false);\n             }\n         }"},{"sha":"e217fc5ebe7371683f34e233f34f99689e2dee3b","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/UpdateProducer.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FUpdateProducer.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n@@ -46,8 +47,8 @@ public void process(final Exchange exchange) throws Exception {\n             Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n             if (actual instanceof UserUR || isPull()) {\n-                WorkflowResult<Pair<UserUR, Boolean>> updated =\n-                        (WorkflowResult<Pair<UserUR, Boolean>>) exchange.getIn().getBody();\n+                UserWorkflowResult<Pair<UserUR, Boolean>> updated =\n+                        (UserWorkflowResult<Pair<UserUR, Boolean>>) exchange.getIn().getBody();\n \n                 List<PropagationTaskInfo> taskInfos;\n                 if (isPull()) {"},{"sha":"4b47eddaed1e41d51b96e79c0e1acd05e98baadc","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/UserRequestHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FUserRequestHandler.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.springframework.transaction.event.TransactionalEventListener;\n@@ -127,5 +127,5 @@ Pair<Integer, List<UserRequestForm>> getForms(\n      * @param form to be submitted\n      * @return user updated by this form submit\n      */\n-    WorkflowResult<UserUR> submitForm(UserRequestForm form);\n+    UserWorkflowResult<UserUR> submitForm(UserRequestForm form);\n }"},{"sha":"f2dbdb316349c177d328f77001516848a74b6cf4","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/WorkflowTaskManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FWorkflowTaskManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FWorkflowTaskManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FWorkflowTaskManager.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -21,7 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.to.WorkflowTask;\n import org.apache.syncope.common.lib.to.WorkflowTaskExecInput;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n \n public interface WorkflowTaskManager {\n \n@@ -66,5 +66,5 @@ public interface WorkflowTaskManager {\n      * @param workflowTaskExecInput input for task execution\n      * @return user after task execution\n      */\n-    WorkflowResult<String> executeNextTask(WorkflowTaskExecInput workflowTaskExecInput);\n+    UserWorkflowResult<String> executeNextTask(WorkflowTaskExecInput workflowTaskExecInput);\n }"},{"sha":"6f0052de58168f91c7d96190eeacbc61c9661b06","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableRuntimeUtils.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableRuntimeUtils.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -70,6 +70,8 @@ public final class FlowableRuntimeUtils {\n \n     public static final String PROP_BY_RESOURCE = \"propByResource\";\n \n+    public static final String PROP_BY_LINKEDACCOUNT = \"propByLinkedAccount\";\n+\n     public static final String PROPAGATE_ENABLE = \"propagateEnable\";\n \n     public static final String ENCRYPTED_PWD = \"encryptedPwd\";\n@@ -162,6 +164,7 @@ public static String getFormTask(final DomainProcessEngine engine, final String\n      * @param password password\n      * @param enabled is user to be enabled or not?\n      * @param propByRes current propagation actions against resources\n+     * @param propByLinkedAccount current propagation actions for linked accounts\n      */\n     public static void saveForFormSubmit(\n             final DomainProcessEngine engine,\n@@ -170,7 +173,8 @@ public static void saveForFormSubmit(\n             final UserTO userTO,\n             final String password,\n             final Boolean enabled,\n-            final PropagationByResource propByRes) {\n+            final PropagationByResource<String> propByRes,\n+            final PropagationByResource<Pair<String, String>> propByLinkedAccount) {\n \n         String formTaskId = getFormTask(engine, procInstId);\n         if (formTaskId == null) {\n@@ -191,12 +195,20 @@ public static void saveForFormSubmit(\n                     setVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD, encrypt(password));\n         }\n \n-        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.ENABLED, enabled);\n+        engine.getRuntimeService().setVariable(\n+                procInstId, FlowableRuntimeUtils.ENABLED, enabled);\n \n-        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n+        engine.getRuntimeService().setVariable(\n+                procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n         if (propByRes != null) {\n             propByRes.clear();\n         }\n+\n+        engine.getRuntimeService().setVariable(\n+                procInstId, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, propByLinkedAccount);\n+        if (propByLinkedAccount != null) {\n+            propByLinkedAccount.clear();\n+        }\n     }\n \n     public static void throwException(final FlowableException e, final String defaultMessage) {"},{"sha":"3c9bc5d3eeff7d415748b9478a2c11802c135d40","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":39,"deletions":29,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -47,7 +47,7 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n@@ -618,7 +618,7 @@ private static Map<String, String> getPropertiesForSubmit(final UserRequestForm\n     }\n \n     @Override\n-    public WorkflowResult<UserUR> submitForm(final UserRequestForm form) {\n+    public UserWorkflowResult<UserUR> submitForm(final UserRequestForm form) {\n         Pair<Task, TaskFormData> parsed = parseTask(form.getTaskId());\n \n         String authUser = AuthContextUtils.getUsername();\n@@ -627,73 +627,78 @@ public WorkflowResult<UserUR> submitForm(final UserRequestForm form) {\n                     + parsed.getLeft().getAssignee() + \" but submitted by \" + authUser));\n         }\n \n-        String procInstId = parsed.getLeft().getProcessInstanceId();\n+        String procInstID = parsed.getLeft().getProcessInstanceId();\n \n-        User user = userDAO.find(getUserKey(procInstId));\n+        User user = userDAO.find(getUserKey(procInstID));\n         if (user == null) {\n-            throw new NotFoundException(\"User with key \" + getUserKey(procInstId));\n+            throw new NotFoundException(\"User with key \" + getUserKey(procInstID));\n         }\n \n-        Set<String> preTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstId, user);\n+        Set<String> preTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstID, user);\n \n-        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.TASK, \"submit\");\n-        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.FORM_SUBMITTER, authUser);\n-        engine.getRuntimeService().setVariable(procInstId, FlowableRuntimeUtils.USER, lazyLoad(user));\n+        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.TASK, \"submit\");\n+        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.FORM_SUBMITTER, authUser);\n+        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER, lazyLoad(user));\n         try {\n             engine.getFormService().submitTaskFormData(form.getTaskId(), getPropertiesForSubmit(form));\n         } catch (FlowableException e) {\n             FlowableRuntimeUtils.throwException(e, \"While submitting form for task \" + form.getTaskId());\n         }\n-        Set<String> postTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstId, user);\n+        Set<String> postTasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInstID, user);\n         postTasks.removeAll(preTasks);\n         postTasks.add(form.getTaskId());\n-        if (procInstId.equals(FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey()))) {\n-            FlowableRuntimeUtils.updateStatus(engine, procInstId, user);\n+        if (procInstID.equals(FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey()))) {\n+            FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         }\n \n         user = userDAO.save(user);\n \n         UserUR userUR = null;\n         String clearPassword = null;\n-        PropagationByResource propByRes = null;\n+        PropagationByResource<String> propByRes = null;\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = null;\n \n         ProcessInstance afterSubmitPI = engine.getRuntimeService().\n-                createProcessInstanceQuery().processInstanceId(procInstId).singleResult();\n+                createProcessInstanceQuery().processInstanceId(procInstID).singleResult();\n         if (afterSubmitPI != null) {\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.TASK);\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.FORM_SUBMITTER);\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER);\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER_TO);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.TASK);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.FORM_SUBMITTER);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_TO);\n \n             // see if there is any propagation to be done\n             propByRes = engine.getRuntimeService().\n-                    getVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.PROP_BY_RESOURCE);\n+                    getVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE);\n+            propByLinkedAccount = engine.getRuntimeService().getVariable(\n+                    procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, PropagationByResource.class);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT);\n \n             // fetch - if available - the encrypted password\n             String encryptedPwd = engine.getRuntimeService().\n-                    getVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.ENCRYPTED_PWD);\n+                    getVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD, String.class);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.ENCRYPTED_PWD);\n             if (StringUtils.isNotBlank(encryptedPwd)) {\n                 clearPassword = FlowableRuntimeUtils.decrypt(encryptedPwd);\n             }\n \n             Boolean enabled = engine.getRuntimeService().\n-                    getVariable(procInstId, FlowableRuntimeUtils.ENABLED, Boolean.class);\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.ENABLED);\n+                    getVariable(procInstID, FlowableRuntimeUtils.ENABLED, Boolean.class);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.ENABLED);\n \n             // supports approval chains\n             FlowableRuntimeUtils.saveForFormSubmit(\n                     engine,\n-                    procInstId,\n+                    procInstID,\n                     user,\n                     dataBinder.getUserTO(user, true),\n                     clearPassword,\n                     enabled,\n-                    propByRes);\n+                    propByRes,\n+                    propByLinkedAccount);\n \n-            userUR = engine.getRuntimeService().getVariable(procInstId, FlowableRuntimeUtils.USER_UR, UserUR.class);\n-            engine.getRuntimeService().removeVariable(procInstId, FlowableRuntimeUtils.USER_UR);\n+            userUR = engine.getRuntimeService().getVariable(procInstID, FlowableRuntimeUtils.USER_UR, UserUR.class);\n+            engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_UR);\n         }\n         if (userUR == null) {\n             userUR = new UserUR();\n@@ -703,8 +708,13 @@ public WorkflowResult<UserUR> submitForm(final UserRequestForm form) {\n             if (propByRes != null) {\n                 userUR.getPassword().getResources().addAll(propByRes.get(ResourceOperation.CREATE));\n             }\n+            if (propByLinkedAccount != null) {\n+                for (Pair<String, String> account : propByLinkedAccount.get(ResourceOperation.CREATE)) {\n+                    userUR.getPassword().getResources().add(account.getLeft());\n+                }\n+            }\n         }\n \n-        return new WorkflowResult<>(userUR, propByRes, postTasks);\n+        return new UserWorkflowResult<>(userUR, propByRes, propByLinkedAccount, postTasks);\n     }\n }"},{"sha":"eeda65ee44e3a9d933fad98b077da5daab8181ec","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":63,"deletions":27,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.core.flowable.api.WorkflowTaskManager;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.flowable.support.DomainProcessEngine;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.apache.syncope.core.workflow.java.AbstractUserWorkflowAdapter;\n@@ -82,7 +82,7 @@ protected User lazyLoad(final User user) {\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<String, Boolean>> doCreate(\n+    protected UserWorkflowResult<Pair<String, Boolean>> doCreate(\n             final UserCR userCR,\n             final boolean disablePwdPolicyCheck,\n             final Boolean enabled) {\n@@ -140,21 +140,31 @@ protected WorkflowResult<Pair<String, Boolean>> doCreate(\n             propagateEnable = enabled;\n         }\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.CREATE, userDAO.findAllResourceKeys(created.getKey()));\n \n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        user.getLinkedAccounts().forEach(account -> propByLinkedAccount.add(\n+                ResourceOperation.CREATE,\n+                Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+\n         FlowableRuntimeUtils.saveForFormSubmit(\n                 engine,\n                 procInst.getProcessInstanceId(),\n                 created,\n                 dataBinder.getUserTO(created, true),\n                 userCR.getPassword(),\n                 enabled,\n-                propByRes);\n+                propByRes,\n+                propByLinkedAccount);\n \n         Set<String> tasks = FlowableRuntimeUtils.getPerformedTasks(engine, procInst.getProcessInstanceId(), user);\n \n-        return new WorkflowResult<>(Pair.of(created.getKey(), propagateEnable), propByRes, tasks);\n+        return new UserWorkflowResult<>(\n+                Pair.of(created.getKey(), propagateEnable),\n+                propByRes,\n+                propByLinkedAccount,\n+                tasks);\n     }\n \n     protected Set<String> doExecuteNextTask(\n@@ -196,7 +206,7 @@ protected Set<String> doExecuteNextTask(\n     }\n \n     @Override\n-    protected WorkflowResult<String> doActivate(final User user, final String token) {\n+    protected UserWorkflowResult<String> doActivate(final User user, final String token) {\n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n \n         Map<String, Object> variables = new HashMap<>(2);\n@@ -212,18 +222,21 @@ protected WorkflowResult<String> doActivate(final User user, final String token)\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.WF_EXECUTOR);\n \n-        return new WorkflowResult<>(updated.getKey(), null, tasks);\n+        return new UserWorkflowResult<>(updated.getKey(), null, null, tasks);\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final UserUR userUR) {\n+    protected UserWorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final UserUR userUR) {\n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n \n         // save some existing variable values for later processing, after actual update is made \n         UserUR beforeUpdate = engine.getRuntimeService().\n                 getVariable(procInstID, FlowableRuntimeUtils.USER_UR, UserUR.class);\n-        PropagationByResource propByResBeforeUpdate = engine.getRuntimeService().getVariable(\n+        PropagationByResource<String> propByResBeforeUpdate = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n+        @SuppressWarnings(\"unchecked\")\n+        PropagationByResource<Pair<String, String>> propByLinkedAccountBeforeUpdate = engine.getRuntimeService().\n+                getVariable(procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, PropagationByResource.class);\n \n         // whether the initial status is a form task\n         boolean inFormTask = FlowableRuntimeUtils.getFormTask(engine, procInstID) != null;\n@@ -256,28 +269,35 @@ protected WorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final\n             engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_UR);\n         }\n \n-        PropagationByResource propByRes = engine.getRuntimeService().getVariable(\n+        @SuppressWarnings(\"unchecked\")\n+        PropagationByResource<String> propByRes = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE);\n \n+        @SuppressWarnings(\"unchecked\")\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = engine.getRuntimeService().getVariable(\n+                procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, PropagationByResource.class);\n+        engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT);\n+\n         FlowableRuntimeUtils.saveForFormSubmit(\n                 engine,\n                 procInstID,\n                 updated,\n                 dataBinder.getUserTO(updated, true),\n                 userUR.getPassword() == null ? null : userUR.getPassword().getValue(),\n                 null,\n-                Optional.ofNullable(propByResBeforeUpdate).orElse(propByRes));\n+                Optional.ofNullable(propByResBeforeUpdate).orElse(propByRes),\n+                Optional.ofNullable(propByLinkedAccountBeforeUpdate).orElse(propByLinkedAccount));\n \n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE, Boolean.class);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE);\n \n-        return new WorkflowResult<>(Pair.of(userUR, propagateEnable), propByRes, tasks);\n+        return new UserWorkflowResult<>(Pair.of(userUR, propagateEnable), propByRes, propByLinkedAccount, tasks);\n     }\n \n     @Override\n-    protected WorkflowResult<String> doSuspend(final User user) {\n+    protected UserWorkflowResult<String> doSuspend(final User user) {\n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n \n         Set<String> performedTasks =\n@@ -289,11 +309,11 @@ protected WorkflowResult<String> doSuspend(final User user) {\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.WF_EXECUTOR);\n \n-        return new WorkflowResult<>(updated.getKey(), null, performedTasks);\n+        return new UserWorkflowResult<>(updated.getKey(), null, null, performedTasks);\n     }\n \n     @Override\n-    protected WorkflowResult<String> doReactivate(final User user) {\n+    protected UserWorkflowResult<String> doReactivate(final User user) {\n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n \n         Set<String> performedTasks =\n@@ -306,7 +326,7 @@ protected WorkflowResult<String> doReactivate(final User user) {\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.WF_EXECUTOR);\n \n-        return new WorkflowResult<>(updated.getKey(), null, performedTasks);\n+        return new UserWorkflowResult<>(updated.getKey(), null, null, performedTasks);\n     }\n \n     @Override\n@@ -327,7 +347,7 @@ protected void doRequestPasswordReset(final User user) {\n     }\n \n     @Override\n-    protected WorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n+    protected UserWorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n             final User user, final String token, final String password) {\n \n         Map<String, Object> variables = new HashMap<>(5);\n@@ -347,17 +367,22 @@ protected WorkflowResult<Pair<UserUR, Boolean>> doConfirmPasswordReset(\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.WF_EXECUTOR);\n \n-        PropagationByResource propByRes = engine.getRuntimeService().getVariable(\n+        @SuppressWarnings(\"unchecked\")\n+        PropagationByResource<String> propByRes = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE);\n-        UserUR updatedPatch = engine.getRuntimeService().getVariable(procInstID, FlowableRuntimeUtils.USER_UR,\n-                UserUR.class);\n+        @SuppressWarnings(\"unchecked\")\n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = engine.getRuntimeService().getVariable(\n+                procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, PropagationByResource.class);\n+        engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT);\n+        UserUR updatedReq = engine.getRuntimeService().getVariable(\n+                procInstID, FlowableRuntimeUtils.USER_UR, UserUR.class);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.USER_UR);\n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE, Boolean.class);\n         engine.getRuntimeService().removeVariable(procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE);\n \n-        return new WorkflowResult<>(Pair.of(updatedPatch, propagateEnable), propByRes, tasks);\n+        return new UserWorkflowResult<>(Pair.of(updatedReq, propagateEnable), propByRes, propByLinkedAccount, tasks);\n     }\n \n     @Override\n@@ -366,9 +391,14 @@ protected void doDelete(final User user) {\n \n         doExecuteNextTask(procInstID, user, Map.of(FlowableRuntimeUtils.TASK, \"delete\"));\n \n-        PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource<String> propByRes = new PropagationByResource<>();\n         propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceKeys(user.getKey()));\n \n+        PropagationByResource<Pair<String, String>> propByLinkedAccount = new PropagationByResource<>();\n+        user.getLinkedAccounts().forEach(account -> propByLinkedAccount.add(\n+                ResourceOperation.DELETE,\n+                Pair.of(account.getResource().getKey(), account.getConnObjectName())));\n+\n         if (engine.getRuntimeService().createProcessInstanceQuery().\n                 processInstanceId(procInstID).active().list().isEmpty()) {\n \n@@ -387,7 +417,8 @@ protected void doDelete(final User user) {\n                     dataBinder.getUserTO(user, true),\n                     null,\n                     null,\n-                    propByRes);\n+                    propByRes,\n+                    propByLinkedAccount);\n \n             FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n             userDAO.save(user);\n@@ -399,7 +430,7 @@ protected void doDelete(final User user) {\n     }\n \n     @Override\n-    public WorkflowResult<String> executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput) {\n+    public UserWorkflowResult<String> executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput) {\n         User user = userDAO.authFind(workflowTaskExecInput.getUserKey());\n \n         String procInstID = FlowableRuntimeUtils.getWFProcInstID(engine, user.getKey());\n@@ -426,8 +457,12 @@ public WorkflowResult<String> executeNextTask(final WorkflowTaskExecInput workfl\n                 engine.getHistoryService().deleteHistoricProcessInstance(procInstID);\n             }\n         } else {\n-            PropagationByResource propByRes = engine.getRuntimeService().\n+            @SuppressWarnings(\"unchecked\")\n+            PropagationByResource<String> propByRes = engine.getRuntimeService().\n                     getVariable(procInstID, FlowableRuntimeUtils.PROP_BY_RESOURCE, PropagationByResource.class);\n+            @SuppressWarnings(\"unchecked\")\n+            PropagationByResource<Pair<String, String>> propByLinkedAccount = engine.getRuntimeService().getVariable(\n+                    procInstID, FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, PropagationByResource.class);\n \n             FlowableRuntimeUtils.saveForFormSubmit(\n                     engine,\n@@ -436,10 +471,11 @@ public WorkflowResult<String> executeNextTask(final WorkflowTaskExecInput workfl\n                     dataBinder.getUserTO(user, true),\n                     null,\n                     null,\n-                    propByRes);\n+                    propByRes,\n+                    propByLinkedAccount);\n         }\n \n-        return new WorkflowResult<>(user.getKey(), null, performedTasks);\n+        return new UserWorkflowResult<>(user.getKey(), null, null, performedTasks);\n     }\n \n     protected static void navigateAvailableTasks(final FlowElement flow, final List<String> availableTasks) {"},{"sha":"222c4ccec40cf30d6322e36d52b134e09b9e3b29","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/PasswordReset.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FPasswordReset.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -58,11 +59,13 @@ protected void doExecute(final DelegateExecution execution) {\n                         value(password).build()).\n                 build();\n \n-        PropagationByResource propByRes = dataBinder.update(user, req);\n+        Pair<PropagationByResource<String>, PropagationByResource<Pair<String, String>>> propInfo =\n+                dataBinder.update(user, req);\n \n         // report updated user and propagation by resource as result\n         execution.setVariable(FlowableRuntimeUtils.USER, user);\n         execution.setVariable(FlowableRuntimeUtils.USER_UR, req);\n-        execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n+        execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propInfo.getLeft());\n+        execution.setVariable(FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, propInfo.getRight());\n     }\n }"},{"sha":"64deb252688aea310feec4f69a929a644ac051ef","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/task/Update.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FUpdate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FUpdate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Ftask%2FUpdate.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.flowable.task;\n \n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -47,11 +48,13 @@ protected void doExecute(final DelegateExecution execution) {\n \n             user = userDAO.save(user);\n \n-            PropagationByResource propByRes = dataBinder.update(user, req);\n+            Pair<PropagationByResource<String>, PropagationByResource<Pair<String, String>>> propInfo =\n+                    dataBinder.update(user, req);\n \n             // report updated user and propagation by resource as result\n             execution.setVariable(FlowableRuntimeUtils.USER, user);\n-            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propInfo.getLeft());\n+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, propInfo.getRight());\n         }\n     }\n }"},{"sha":"832b23b140ea4f2d6040f51e29b3e5adb2e43846","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserRequestLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserRequestLogic.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -37,10 +37,10 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.flowable.api.UserRequestHandler;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.flowable.engine.runtime.ProcessInstance;\n@@ -167,7 +167,7 @@ public Pair<Integer, List<UserRequestForm>> getForms(\n             final int size,\n             final List<OrderByClause> orderByClauses) {\n         evaluateKey(userKey);\n-        \n+\n         return userRequestHandler.getForms(userKey, page, size, orderByClauses);\n     }\n \n@@ -183,15 +183,16 @@ public UserTO submitForm(final UserRequestForm form) {\n                     \"Submitting forms for user\" + form.getUsername() + \" not allowed\");\n         }\n \n-        WorkflowResult<UserUR> wfResult = userRequestHandler.submitForm(form);\n+        UserWorkflowResult<UserUR> wfResult = userRequestHandler.submitForm(form);\n \n         // propByRes can be made empty by the workflow definition if no propagation should occur \n         // (for example, with rejected users)\n         if (wfResult.getPropByRes() != null && !wfResult.getPropByRes().isEmpty()) {\n             List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(\n-                    new WorkflowResult<>(\n+                    new UserWorkflowResult<>(\n                             Pair.of(wfResult.getResult(), Boolean.TRUE),\n                             wfResult.getPropByRes(),\n+                            wfResult.getPropByLinkedAccount(),\n                             wfResult.getPerformedTasks()));\n \n             taskExecutor.execute(taskInfos, false);"},{"sha":"e7bce81bdd779024f07c2ac656c7e818dd8870b4","filename":"ext/flowable/logic/src/main/java/org/apache/syncope/core/logic/UserWorkflowTaskLogic.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserWorkflowTaskLogic.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -32,9 +32,9 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.flowable.api.WorkflowTaskManager;\n+import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskInfo;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Lazy;\n@@ -69,13 +69,16 @@ public List<WorkflowTask> getAvailableTasks(final String key) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     public UserTO executeNextTask(final WorkflowTaskExecInput workflowTaskExecInput) {\n-        WorkflowResult<String> updated = wfTaskManager.executeNextTask(workflowTaskExecInput);\n+        UserWorkflowResult<String> updated = wfTaskManager.executeNextTask(workflowTaskExecInput);\n \n         UserUR userUR = new UserUR.Builder(updated.getResult()).build();\n \n-        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(new WorkflowResult<>(\n-                Pair.<UserUR, Boolean>of(userUR, null),\n-                updated.getPropByRes(), updated.getPerformedTasks()));\n+        List<PropagationTaskInfo> taskInfos = propagationManager.getUserUpdateTasks(\n+                new UserWorkflowResult<>(\n+                        Pair.<UserUR, Boolean>of(userUR, null),\n+                        updated.getPropByRes(),\n+                        updated.getPropByLinkedAccount(),\n+                        updated.getPerformedTasks()));\n \n         taskExecutor.execute(taskInfos, false);\n "},{"sha":"7ed5bd5443f82cd1f2e6e68c64e298c0371de470","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/AssignDirectorGroup.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FAssignDirectorGroup.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference.flowable;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.core.flowable.impl.FlowableRuntimeUtils;\n@@ -52,11 +53,13 @@ protected void doExecute(final DelegateExecution execution) {\n             userUR.setKey(user.getKey());\n             userUR.getMemberships().add(new MembershipUR.Builder(\"ebf97068-aa4b-4a85-9f01-680e8c4cf227\").build());\n \n-            PropagationByResource propByRes = dataBinder.update(user, userUR);\n+            Pair<PropagationByResource<String>, PropagationByResource<Pair<String, String>>> propInfo =\n+                    dataBinder.update(user, userUR);\n \n             // report updated user and propagation by resource as result\n             execution.setVariable(FlowableRuntimeUtils.USER, user);\n-            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propInfo.getLeft());\n+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, propInfo.getRight());\n         } else {\n             LOG.info(\"Second level was not approved, not assigning the director group to \" + user.getUsername());\n         }"},{"sha":"f6f021fd30fc768e4e885cd1ec5ed596939e8329","filename":"fit/core-reference/src/main/java-all/org/apache/syncope/fit/core/reference/flowable/CreateARelationship.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava-all%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2Fflowable%2FCreateARelationship.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.fit.core.reference.flowable;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.RelationshipUR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n@@ -57,11 +58,13 @@ protected void doExecute(final DelegateExecution execution) {\n                     otherEnd(\"PRINTER\", printer).type(\"neighborhood\").build()).\n                     build());\n \n-            PropagationByResource propByRes = dataBinder.update(user, userUR);\n+            Pair<PropagationByResource<String>, PropagationByResource<Pair<String, String>>> propInfo =\n+                    dataBinder.update(user, userUR);\n \n             // report updated user and propagation by resource as result\n             execution.setVariable(FlowableRuntimeUtils.USER, user);\n-            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propByRes);\n+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_RESOURCE, propInfo.getLeft());\n+            execution.setVariable(FlowableRuntimeUtils.PROP_BY_LINKEDACCOUNT, propInfo.getRight());\n         } else {\n             LOG.info(\"Printer assignment to \" + user.getUsername() + \" was not approved\");\n         }"},{"sha":"67a6457a267ce8801a4c8ac1df68675be950a435","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestAccountRule.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestAccountRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.policy.AccountPolicyException;\n import org.springframework.transaction.annotation.Transactional;\n@@ -43,8 +44,16 @@ public void setConf(final AccountRuleConf conf) {\n     @Transactional(readOnly = true)\n     @Override\n     public void enforce(final User user) {\n-        if (!user.getUsername().contains(this.conf.getMustContainSubstring())) {\n-            throw new AccountPolicyException(\"Username not containing \" + this.conf.getMustContainSubstring());\n+        if (!user.getUsername().contains(conf.getMustContainSubstring())) {\n+            throw new AccountPolicyException(\"Username not containing \" + conf.getMustContainSubstring());\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final LinkedAccount accout) {\n+        if (accout.getUsername() != null && !accout.getUsername().contains(conf.getMustContainSubstring())) {\n+            throw new AccountPolicyException(\"Username not containing \" + conf.getMustContainSubstring());\n         }\n     }\n }"},{"sha":"df61508756be69a2774b33cea225be1a98fc6916","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestPasswordRule.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestPasswordRule.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -21,13 +21,21 @@\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.persistence.api.entity.user.LinkedAccount;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.spring.policy.PasswordPolicyException;\n+import org.apache.syncope.core.spring.security.Encryptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.transaction.annotation.Transactional;\n \n @PasswordRuleConfClass(TestPasswordRuleConf.class)\n public class TestPasswordRule implements PasswordRule {\n \n+    protected static final Logger LOG = LoggerFactory.getLogger(TestPasswordRule.class);\n+\n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     private TestPasswordRuleConf conf;\n \n     @Override\n@@ -48,8 +56,27 @@ public void setConf(final PasswordRuleConf conf) {\n     @Transactional(readOnly = true)\n     @Override\n     public void enforce(final User user) {\n-        if (user.getClearPassword() != null && !user.getClearPassword().endsWith(this.conf.getMustEndWith())) {\n-            throw new PasswordPolicyException(\"Password not ending with \" + this.conf.getMustEndWith());\n+        if (user.getClearPassword() != null && !user.getClearPassword().endsWith(conf.getMustEndWith())) {\n+            throw new PasswordPolicyException(\"Password not ending with \" + conf.getMustEndWith());\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void enforce(final LinkedAccount account) {\n+        if (account.getPassword() != null) {\n+            String clear = null;\n+            if (account.canDecodePassword()) {\n+                try {\n+                    clear = ENCRYPTOR.decode(account.getPassword(), account.getCipherAlgorithm());\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not decode password for {}\", account, e);\n+                }\n+            }\n+\n+            if (clear != null && !clear.endsWith(conf.getMustEndWith())) {\n+                throw new PasswordPolicyException(\"Password not ending with \" + conf.getMustEndWith());\n+            }\n         }\n     }\n }"},{"sha":"8bd6f25e2d694d2130f4f3ad579734aece6ebef0","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LinkedAccountITCase.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLinkedAccountITCase.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import javax.naming.NamingException;\n+import javax.naming.directory.Attributes;\n+import javax.naming.ldap.LdapContext;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.to.LinkedAccountTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+public class LinkedAccountITCase extends AbstractITCase {\n+\n+    @Test\n+    public void createWithLinkedAccount() throws NamingException {\n+        UserCR userCR = UserITCase.getSample(\n+                \"linkedAccount\" + RandomStringUtils.randomNumeric(5) + \"@syncope.apache.org\");\n+\n+        LinkedAccountTO account = new LinkedAccountTO.Builder().\n+                connObjectName(\"uid=\" + userCR.getUsername() + \",ou=People,o=isp\").\n+                resource(RESOURCE_NAME_LDAP).\n+                build();\n+        account.getPlainAttrs().add(attr(\"surname\", \"LINKED_SURNAME\"));\n+        userCR.getLinkedAccounts().add(account);\n+\n+        UserTO user = createUser(userCR).getEntity();\n+        assertNotNull(user.getKey());\n+\n+        LdapContext ldapObj = (LdapContext) getLdapRemoteObject(\n+                RESOURCE_LDAP_ADMIN_DN, RESOURCE_LDAP_ADMIN_PWD, account.getConnObjectName());\n+        assertNotNull(ldapObj);\n+\n+        Attributes ldapAttrs = ldapObj.getAttributes(\"\");\n+        assertEquals(\n+                user.getPlainAttr(\"email\").get().getValues().get(0),\n+                ldapAttrs.get(\"mail\").getAll().next().toString());\n+        assertEquals(\"LINKED_SURNAME\", ldapAttrs.get(\"sn\").getAll().next().toString());\n+    }\n+}"},{"sha":"7d8dd43e93a8c71a7b3fbd092e01dd9a24ff453f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -81,7 +81,7 @@ public void misc() {\n             createUser(userCR);\n             fail(\"This should not happen\");\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidUser, e.getType());\n+            assertEquals(ClientExceptionType.InvalidEntity, e.getType());\n             assertTrue(e.getMessage().contains(\"InvalidPlainAttr: fullname not allowed for membership of group\"));\n         }\n "},{"sha":"df4be73f670cd7942be71307b1fbeb89144ee9ae","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/enduser/EnduserITCase.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FEnduserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FEnduserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fenduser%2FEnduserITCase.java?ref=6d120ebd6b1cbf5755ba5d4f58ad6dca382eef6e","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.fit.enduser;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.pages.Login;\n import org.apache.syncope.client.enduser.pages.SelfPasswordReset;\n@@ -38,7 +42,6 @@\n import org.apache.wicket.markup.html.form.PasswordTextField;\n import org.apache.wicket.markup.html.form.TextField;\n import org.apache.wicket.util.tester.FormTester;\n-import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class EnduserITCase extends AbstractEnduserITCase {\n@@ -56,7 +59,7 @@ public void selfCreate() {\n \n         UTILITY_UI.getTester().assertComponent(WIZARD_FORM + \":view:username:textField\", TextField.class);\n         FormTester formTester = UTILITY_UI.getTester().newFormTester(WIZARD_FORM);\n-        Assertions.assertNotNull(formTester);\n+        assertNotNull(formTester);\n         formTester.setValue(\"view:username:textField\", username);\n         UTILITY_UI.getTester().executeAjaxEvent(WIZARD_FORM + \":buttons:next\", Constants.ON_CLICK);\n \n@@ -85,7 +88,7 @@ public void selfCreate() {\n                 TextField.class);\n \n         formTester = UTILITY_UI.getTester().newFormTester(WIZARD_FORM);\n-        Assertions.assertNotNull(formTester);\n+        assertNotNull(formTester);\n         formTester.setValue(UTILITY_UI.findComponentByMarkupId(WIZARD_FORM\n                 + \":view:plainSchemas:tabs:0:body:content:schemas\",\n                 \"fullname\").getPageRelativePath().replace(WIZARD_FORM + ':', StringUtils.EMPTY) + \":textField\",\n@@ -122,11 +125,11 @@ public void selfCreate() {\n         UTILITY_UI.getTester().assertRenderedPage(Login.class);\n         UTILITY_UI.getTester().assertComponent(\"login:username\", TextField.class);\n \n-        Assertions.assertFalse(userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+        assertFalse(userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getUserSearchConditionBuilder().is(\"username\").equalTo(username).query()).\n                 build()).getResult().isEmpty());\n \n-        Assertions.assertNotNull(userService.read(username));\n+        assertNotNull(userService.read(username));\n \n         UTILITY_UI.getTester().cleanupFeedbackMessages();\n \n@@ -161,7 +164,7 @@ public void selfPasswordReset() {\n         UTILITY_UI.getTester().assertComponent(pwdResetForm + \":selfPwdResetPanel:securityQuestion\", TextField.class);\n \n         FormTester formTester = UTILITY_UI.getTester().newFormTester(pwdResetForm);\n-        Assertions.assertNotNull(formTester);\n+        assertNotNull(formTester);\n         // 1. set username to selfpwdreset\n         formTester.setValue(UTILITY_UI.findComponentById(pwdResetForm + \":selfPwdResetPanel\", \"username\"),\n                 \"selfpwdreset\");\n@@ -171,13 +174,13 @@ public void selfPasswordReset() {\n                 getContent());\n         // 3. submit form and receive an error\n         formTester = UTILITY_UI.getTester().newFormTester(pwdResetForm);\n-        Assertions.assertNotNull(formTester);\n+        assertNotNull(formTester);\n         UTILITY_UI.getTester().executeAjaxEvent(pwdResetForm + \":selfPwdResetPanel:submit\", Constants.ON_CLICK);\n         UTILITY_UI.getTester().assertErrorMessages(\"InvalidSecurityAnswer []\");\n         UTILITY_UI.getTester().cleanupFeedbackMessages();\n         // 3.1 set the correct answer\n         formTester = UTILITY_UI.getTester().newFormTester(pwdResetForm);\n-        Assertions.assertNotNull(formTester);\n+        assertNotNull(formTester);\n         UTILITY_UI.getTester().assertComponent(pwdResetForm + \":selfPwdResetPanel:securityAnswer\", TextField.class);\n         formTester.setValue(\"selfPwdResetPanel:securityAnswer\", \"ananswer\");\n         UTILITY_UI.getTester().executeAjaxEvent(pwdResetForm + \":selfPwdResetPanel:securityAnswer\", Constants.ON_CHANGE);\n@@ -216,7 +219,7 @@ public void mustChangePassword() {\n \n         FormTester formTester = UTILITY_UI.getTester().newFormTester(changePwdForm);\n \n-        Assertions.assertNotNull(formTester);\n+        assertNotNull(formTester);\n         // 1. set new password\n         formTester.setValue(UTILITY_UI.findComponentById(changePwdForm + \":password\", \"passwordField\"), \"password124\");\n         // 2. confirm password\n@@ -266,7 +269,7 @@ public void selfUpdate() {\n                 TextField.class);\n \n         FormTester formTester = UTILITY_UI.getTester().newFormTester(WIZARD_FORM);\n-        Assertions.assertNotNull(formTester);\n+        assertNotNull(formTester);\n         UTILITY_UI.getTester().assertComponent(UTILITY_UI.findComponentByMarkupId(\n                 WIZARD_FORM + \":view:plainSchemas:tabs:0:body:content:schemas\", \"email\").getPageRelativePath()\n                 + \":textField\",\n@@ -298,8 +301,8 @@ public void selfUpdate() {\n         UTILITY_UI.getTester().assertRenderedPage(Login.class);\n         UTILITY_UI.getTester().assertComponent(\"login:username\", TextField.class);\n \n-        Assertions.assertEquals(\"active\", userService.read(username).getStatus());\n-        Assertions.assertEquals(newEmail, userService.read(username).getPlainAttr(\"email\").get().getValues().get(0));\n+        assertEquals(\"active\", userService.read(username).getStatus());\n+        assertEquals(newEmail, userService.read(username).getPlainAttr(\"email\").get().getValues().get(0));\n \n         UTILITY_UI.getTester().cleanupFeedbackMessages();\n     }"}]}