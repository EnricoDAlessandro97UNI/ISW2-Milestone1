{"sha":"ce3253355f26507f56cea0d00bc9adf68520c508","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNlMzI1MzM1NWYyNjUwN2Y1NmNlYTBkMDBiYzlhZGY2ODUyMGM1MDg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-06-20T17:23:54Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-06-20T17:23:54Z"},"message":"Making Payara working again (#199)","tree":{"sha":"bb937996394594adc29563c8b8b3ab5388cede03","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/bb937996394594adc29563c8b8b3ab5388cede03"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ce3253355f26507f56cea0d00bc9adf68520c508","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7kYqCRBK7hj4Ov3rIwAAdHIIAEJev/wPGgiZhoSZLbVYzMzw\nHsdY4vJe0zQpR7JvzyhOELQLQkJQcCYjcYXFTNF+L0BudJKfRZr3XRRXcbEYEz46\nMR5YVvl7b0XDjpYrVOz2tO/JV8aglFxUQMyX4Hph2B0twtBL0yynZnOiFDpus7Cq\nSHexpPJK2wagbeFFFkLDdkscEJVWb4C62And3wFpiCBKX8DuK9P38Q5OUQLC2QtV\n3FlMtVgOoU+hRRnI0BsjekODoqV65GG9S25F+7985/V8/k8SY7NC4BfixGLmEn1x\nMqw20/9F4seGrnfktvqT6M1MUpRlVPome5LGcN6afh79RGij/R30kIJVJusjh+Y=\n=RIbZ\n-----END PGP SIGNATURE-----\n","payload":"tree bb937996394594adc29563c8b8b3ab5388cede03\nparent 8f624bdac909bce6e00bad87259b4f11d5dd2da4\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1592673834 +0200\ncommitter GitHub <noreply@github.com> 1592673834 +0200\n\nMaking Payara working again (#199)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce3253355f26507f56cea0d00bc9adf68520c508","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ce3253355f26507f56cea0d00bc9adf68520c508","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ce3253355f26507f56cea0d00bc9adf68520c508/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"8f624bdac909bce6e00bad87259b4f11d5dd2da4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8f624bdac909bce6e00bad87259b4f11d5dd2da4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8f624bdac909bce6e00bad87259b4f11d5dd2da4"}],"stats":{"total":540,"additions":348,"deletions":192},"files":[{"sha":"c2a2b812faab19d636f3f92a84a4ae04e69e6686","filename":".travis.yml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/.travis.yml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/.travis.yml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.travis.yml?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -92,9 +92,9 @@ jobs:\n     - stage: fit\n       name: \"Integration Tests: Wildfly / H2 / JSON Content-Type\"\n       script: mvn -f fit/core-reference/pom.xml -P wildfly-it -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n-      #- stage: fit\n-      #name: \"Integration Tests: Payara / H2 / JSON Content-Type\"\n-      #script: mvn -f fit/core-reference/pom.xml -P payara-it -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n+    - stage: fit\n+      name: \"Integration Tests: Payara / H2 / JSON Content-Type\"\n+      script: mvn -f fit/core-reference/pom.xml -P payara-it -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true\n     - stage: fit\n       name: \"Integration Tests: Tomcat / PostgreSQL / JSON Content-Type\"\n       script: mvn -f fit/core-reference/pom.xml -P postgres-it -Dinvoker.streamLogs=true -Dmodernizer.skip=true -Dianal.skip=true -Drat.skip=true -Dcheckstyle.skip=true -Djacoco.skip=true"},{"sha":"c8ce65f920db30a6d88a6d050d06aeb1786ee54f","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemRequest.java","status":"modified","additions":87,"deletions":11,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -20,20 +20,30 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n import java.util.Enumeration;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import javax.servlet.ReadListener;\n import javax.servlet.ServletInputStream;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletRequestWrapper;\n import javax.ws.rs.core.HttpHeaders;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.syncope.common.rest.api.batch.BatchRequestItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.http.MediaType;\n \n public class BatchItemRequest extends HttpServletRequestWrapper {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(BatchItemRequest.class);\n+\n     private final String basePath;\n \n     private final BatchRequestItem batchItem;\n@@ -85,6 +95,28 @@ public String getMethod() {\n         return batchItem.getMethod();\n     }\n \n+    @Override\n+    public String getServerName() {\n+        try {\n+            return super.getServerName();\n+        } catch (Exception e) {\n+            LOG.debug(\"While delegating to wrapped request\", e);\n+            return Optional.ofNullable(getHeader(HttpHeaders.HOST)).\n+                    map(host -> StringUtils.substringBefore(host, \":\")).orElse(null);\n+        }\n+    }\n+\n+    @Override\n+    public int getServerPort() {\n+        try {\n+            return super.getServerPort();\n+        } catch (Exception e) {\n+            LOG.debug(\"While delegating to wrapped request\", e);\n+            return Optional.ofNullable(getHeader(HttpHeaders.HOST)).\n+                    map(host -> NumberUtils.toInt(StringUtils.substringAfter(host, \":\"))).orElse(0);\n+        }\n+    }\n+\n     @Override\n     public StringBuffer getRequestURL() {\n         return new StringBuffer(basePath).append(getRequestURI());\n@@ -121,21 +153,65 @@ public long getContentLengthLong() {\n \n     @Override\n     public String getHeader(final String name) {\n-        return batchItem.getHeaders().containsKey(name)\n-                ? batchItem.getHeaders().get(name).get(0).toString()\n-                : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)\n-                ? MediaType.ALL_VALUE\n-                : super.getHeader(name);\n+        try {\n+            return batchItem.getHeaders().containsKey(name)\n+                    ? batchItem.getHeaders().get(name).get(0).toString()\n+                    : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)\n+                    ? MediaType.ALL_VALUE\n+                    : super.getHeader(name);\n+        } catch (Exception e) {\n+            LOG.debug(\"While delegating to wrapped request\", e);\n+            return null;\n+        }\n     }\n \n     @Override\n     public Enumeration<String> getHeaders(final String name) {\n-        return batchItem.getHeaders().containsKey(name)\n-                ? Collections.enumeration(\n-                        batchItem.getHeaders().get(name).stream().map(Object::toString).collect(Collectors.toList()))\n-                : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)\n-                ? Collections.enumeration(List.of(MediaType.ALL_VALUE))\n-                : super.getHeaders(name);\n+        try {\n+            return batchItem.getHeaders().containsKey(name)\n+                    ? Collections.enumeration(batchItem.getHeaders().get(name).stream().\n+                            map(Object::toString).collect(Collectors.toList()))\n+                    : HttpHeaders.CONTENT_TYPE.equals(name) || HttpHeaders.ACCEPT.equals(name)\n+                    ? Collections.enumeration(List.of(MediaType.ALL_VALUE))\n+                    : super.getHeaders(name);\n+        } catch (Exception e) {\n+            LOG.debug(\"While delegating to wrapped request\", e);\n+            return Collections.emptyEnumeration();\n+        }\n+    }\n+\n+    @Override\n+    public Enumeration<String> getHeaderNames() {\n+        try {\n+            return super.getHeaderNames();\n+        } catch (Exception e) {\n+            LOG.debug(\"While delegating to wrapped request\", e);\n+\n+            Set<String> names = new HashSet<>(batchItem.getHeaders().keySet());\n+            names.add(HttpHeaders.CONTENT_TYPE);\n+            names.add(HttpHeaders.ACCEPT);\n+            return Collections.enumeration(names);\n+        }\n+    }\n+\n+    @Override\n+    public Object getAttribute(final String name) {\n+        try {\n+            return super.getAttribute(name);\n+        } catch (Exception e) {\n+            LOG.debug(\"While delegating to wrapped request\", e);\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String getCharacterEncoding() {\n+        try {\n+            return super.getCharacterEncoding();\n+        } catch (Exception e) {\n+            LOG.debug(\"While delegating to wrapped request\", e);\n+            return StandardCharsets.UTF_8.name();\n+        }\n     }\n \n     @Override"},{"sha":"b83c66f50f01dc35f7d8b3cc3acf05c64e020bc5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":77,"deletions":2,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -18,13 +18,23 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n+import java.io.PrintStream;\n import java.lang.reflect.InvocationTargetException;\n import java.nio.charset.StandardCharsets;\n+import java.util.Enumeration;\n import java.util.Properties;\n import java.util.concurrent.Executor;\n import java.util.concurrent.ThreadPoolExecutor;\n import javax.annotation.Resource;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+import javax.naming.NamingException;\n import javax.sql.DataSource;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.LogOutputStream;\n+import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n@@ -41,6 +51,8 @@\n import org.apache.syncope.core.provisioning.java.job.SchedulerDBInit;\n import org.apache.syncope.core.provisioning.java.job.SchedulerShutdown;\n import org.apache.syncope.core.provisioning.java.propagation.PropagationManagerImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.ApplicationContext;\n@@ -55,6 +67,7 @@\n import org.springframework.core.env.Environment;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n+import org.springframework.jndi.JndiObjectFactoryBean;\n import org.springframework.mail.javamail.JavaMailSender;\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n import org.springframework.scheduling.annotation.AsyncConfigurer;\n@@ -74,6 +87,8 @@\n @Configuration\n public class ProvisioningContext implements EnvironmentAware, AsyncConfigurer {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(ProvisioningContext.class);\n+\n     @Resource(name = \"MasterDataSource\")\n     private DataSource masterDataSource;\n \n@@ -188,14 +203,74 @@ public JobManager jobManager() {\n \n     @ConditionalOnMissingBean\n     @Bean\n-    public JavaMailSender mailSender() {\n-        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n+    public JavaMailSender mailSender() throws IllegalArgumentException, NamingException {\n+        JavaMailSenderImpl mailSender = new JavaMailSenderImpl() {\n+\n+            @Override\n+            protected Transport connectTransport() throws MessagingException {\n+                // ensure that no auth means no auth\n+                if (StringUtils.isBlank(getUsername())) {\n+                    Transport transport = getTransport(getSession());\n+                    transport.connect(getHost(), getPort(), null, null);\n+                    return transport;\n+                }\n+\n+                return super.connectTransport();\n+            }\n+        };\n         mailSender.setDefaultEncoding(env.getProperty(\"smtpEncoding\"));\n         mailSender.setHost(env.getProperty(\"smtpHost\"));\n         mailSender.setPort(env.getProperty(\"smtpPort\", Integer.class));\n         mailSender.setUsername(env.getProperty(\"smtpUsername\"));\n         mailSender.setPassword(env.getProperty(\"smtpPassword\"));\n         mailSender.setProtocol(env.getProperty(\"smtpProtocol\"));\n+\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"[Mail] host:port = {}:{}\", mailSender.getHost(), mailSender.getPort());\n+            LOG.debug(\"[Mail] protocol = {}\", mailSender.getProtocol());\n+            LOG.debug(\"[Mail] username = {}\", mailSender.getUsername());\n+            LOG.debug(\"[Mail] default encoding = {}\", mailSender.getDefaultEncoding());\n+        }\n+\n+        JndiObjectFactoryBean mailSession = new JndiObjectFactoryBean();\n+        mailSession.setJndiName(\"mail/syncopeNotification\");\n+        try {\n+            mailSession.afterPropertiesSet();\n+        } catch (NamingException e) {\n+            LOG.debug(\"While looking up JNDI for mail session\", e);\n+        }\n+\n+        Session session = (Session) mailSession.getObject();\n+        if (session == null) {\n+            Properties javaMailProperties = mailSender.getJavaMailProperties();\n+\n+            Properties props = PropertyUtils.read(ProvisioningContext.class, \"mail.properties\", \"conf.directory\");\n+            for (Enumeration<?> e = props.propertyNames(); e.hasMoreElements();) {\n+                String prop = (String) e.nextElement();\n+                if (prop.startsWith(\"mail.smtp.\")) {\n+                    javaMailProperties.setProperty(prop, props.getProperty(prop));\n+                }\n+            }\n+\n+            if (StringUtils.isNotBlank(mailSender.getUsername())) {\n+                javaMailProperties.setProperty(\"mail.smtp.auth\", \"true\");\n+            }\n+\n+            if (LOG.isDebugEnabled()) {\n+                mailSender.getJavaMailProperties().\n+                        forEach((key, value) -> LOG.debug(\"[Mail] property: {} = {}\", key, value));\n+            }\n+\n+            String mailDebug = props.getProperty(\"mail.debug\", \"false\");\n+            if (BooleanUtils.toBoolean(mailDebug)) {\n+                session = mailSender.getSession();\n+                session.setDebug(true);\n+                session.setDebugOut(new PrintStream(new LogOutputStream(LOG)));\n+            }\n+        } else {\n+            mailSender.setSession(session);\n+        }\n+\n         return mailSender;\n     }\n "},{"sha":"13a700b60af0ae2bd7275062be1daa1bd40482e5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java","status":"modified","additions":1,"deletions":41,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -18,18 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.notification;\n \n-import java.io.PrintStream;\n import java.util.Date;\n-import java.util.Enumeration;\n import java.util.List;\n-import java.util.Properties;\n import java.util.concurrent.atomic.AtomicReference;\n-import javax.mail.Session;\n import javax.mail.internet.MimeMessage;\n-import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.LogOutputStream;\n-import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -42,20 +35,17 @@\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.security.Encryptor;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mail.javamail.JavaMailSender;\n-import org.springframework.mail.javamail.JavaMailSenderImpl;\n import org.springframework.mail.javamail.MimeMessageHelper;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class DefaultNotificationJobDelegate implements InitializingBean, NotificationJobDelegate {\n+public class DefaultNotificationJobDelegate implements NotificationJobDelegate {\n \n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJobDelegate.class);\n \n@@ -80,36 +70,6 @@ public class DefaultNotificationJobDelegate implements InitializingBean, Notific\n \n     private boolean interrupted;\n \n-    @Override\n-    public void afterPropertiesSet() throws Exception {\n-        if (mailSender instanceof JavaMailSenderImpl) {\n-            JavaMailSenderImpl javaMailSender = (JavaMailSenderImpl) mailSender;\n-\n-            Properties javaMailProperties = javaMailSender.getJavaMailProperties();\n-\n-            Properties props = PropertyUtils.read(Encryptor.class, \"mail.properties\", \"conf.directory\");\n-            for (Enumeration<?> e = props.propertyNames(); e.hasMoreElements();) {\n-                String prop = (String) e.nextElement();\n-                if (prop.startsWith(\"mail.smtp.\")) {\n-                    javaMailProperties.setProperty(prop, props.getProperty(prop));\n-                }\n-            }\n-\n-            if (StringUtils.isNotBlank(javaMailSender.getUsername())) {\n-                javaMailProperties.setProperty(\"mail.smtp.auth\", \"true\");\n-            }\n-\n-            javaMailSender.setJavaMailProperties(javaMailProperties);\n-\n-            String mailDebug = props.getProperty(\"mail.debug\", \"false\");\n-            if (BooleanUtils.toBoolean(mailDebug)) {\n-                Session session = javaMailSender.getSession();\n-                session.setDebug(true);\n-                session.setDebugOut(new PrintStream(new LogOutputStream(LOG)));\n-            }\n-        }\n-    }\n-\n     @Override\n     public String currentStatus() {\n         return status.get();"},{"sha":"125b5f61b9356a132ba51b888abd113943145d52","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -244,7 +244,7 @@ protected boolean authenticate(final User user, final String password) {\n                 Optional<String> connObjectKeyValue = mappingManager.getConnObjectKeyValue(user, provision.get());\n                 if (connObjectKeyValue.isEmpty()) {\n                     throw new AccountNotFoundException(\n-                        \"Unable to locate conn object key value for \" + userType.getKey());\n+                            \"Unable to locate conn object key value for \" + userType.getKey());\n                 }\n                 connObjectKey = connObjectKeyValue.get();\n                 Uid uid = connFactory.getConnector(resource).authenticate(connObjectKey, password, null);\n@@ -405,8 +405,7 @@ public Pair<String, Set<SyncopeGrantedAuthority>> authenticate(final JWTAuthenti\n \n             if (BooleanUtils.isTrue(user.isMustChangePassword())) {\n                 LOG.debug(\"User {} must change password, resetting authorities\", username);\n-                authorities = Set.of(\n-                        new SyncopeGrantedAuthority(IdRepoEntitlement.MUST_CHANGE_PASSWORD));\n+                authorities = Set.of(new SyncopeGrantedAuthority(IdRepoEntitlement.MUST_CHANGE_PASSWORD));\n             }\n         }\n "},{"sha":"846693cee3b7f6c537070dee81cc71493ea0b904","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthentication.java","status":"modified","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -22,7 +22,10 @@\n import java.util.HashSet;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.springframework.security.core.Authentication;\n \n@@ -92,4 +95,54 @@ public void setAuthenticated(final boolean authenticated) throws IllegalArgument\n     public String getName() {\n         return Optional.ofNullable(username).orElseGet(claims::getSubject);\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                append(claims).\n+                append(details).\n+                append(username).\n+                append(authorities).\n+                append(authenticated).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final JWTAuthentication other = (JWTAuthentication) obj;\n+        return new EqualsBuilder().\n+                append(claims, other.claims).\n+                append(details, other.details).\n+                append(username, other.username).\n+                append(authorities, other.authorities).\n+                append(authenticated, other.authenticated).\n+                build();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString()).append(\": \");\n+        sb.append(\"Principal: \").append(this.getPrincipal()).append(\"; \");\n+        sb.append(\"Authenticated: \").append(this.isAuthenticated()).append(\"; \");\n+        sb.append(\"Details: \").append(this.getDetails()).append(\"; \");\n+\n+        if (!authorities.isEmpty()) {\n+            sb.append(\"Granted Authorities: \");\n+            sb.append(authorities.stream().map(SyncopeGrantedAuthority::toString).collect(Collectors.joining(\", \")));\n+        } else {\n+            sb.append(\"Not granted any authorities\");\n+        }\n+\n+        return sb.toString();\n+    }\n }"},{"sha":"e78c4943f630c75b2b94a34081e2f5d032abd8c4","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java","status":"modified","additions":26,"deletions":12,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -20,16 +20,17 @@\n \n import java.io.IOException;\n import java.util.Optional;\n+import java.util.Set;\n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.ws.rs.core.HttpHeaders;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jws.JwsException;\n import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.AuthenticationManager;\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.core.AuthenticationException;\n@@ -45,20 +46,26 @@ public class JWTAuthenticationFilter extends BasicAuthenticationFilter {\n \n     private static final Logger LOG = LoggerFactory.getLogger(JWTAuthenticationFilter.class);\n \n-    @Autowired\n-    private AuthenticationEntryPoint authenticationEntryPoint;\n+    private final AuthenticationEntryPoint authenticationEntryPoint;\n \n-    @Autowired\n-    private SyncopeAuthenticationDetailsSource authenticationDetailsSource;\n+    private final SyncopeAuthenticationDetailsSource authenticationDetailsSource;\n \n-    @Autowired\n-    private AuthDataAccessor dataAccessor;\n+    private final AuthDataAccessor dataAccessor;\n \n-    @Autowired\n-    private DefaultCredentialChecker credentialChecker;\n+    private final DefaultCredentialChecker credentialChecker;\n+\n+    public JWTAuthenticationFilter(\n+            final AuthenticationManager authenticationManager,\n+            final AuthenticationEntryPoint authenticationEntryPoint,\n+            final SyncopeAuthenticationDetailsSource authenticationDetailsSource,\n+            final AuthDataAccessor dataAccessor,\n+            final DefaultCredentialChecker credentialChecker) {\n \n-    public JWTAuthenticationFilter(final AuthenticationManager authenticationManager) {\n         super(authenticationManager);\n+        this.authenticationEntryPoint = authenticationEntryPoint;\n+        this.authenticationDetailsSource = authenticationDetailsSource;\n+        this.dataAccessor = dataAccessor;\n+        this.credentialChecker = credentialChecker;\n     }\n \n     @Override\n@@ -87,8 +94,15 @@ protected void doFilterInternal(\n                 throw new BadCredentialsException(\"Invalid signature found in JWT\");\n             }\n \n-            SecurityContextHolder.getContext().setAuthentication(\n-                    new JWTAuthentication(consumer.getJwtClaims(), authenticationDetailsSource.buildDetails(request)));\n+            JWTAuthentication jwtAuthentication =\n+                    new JWTAuthentication(consumer.getJwtClaims(), authenticationDetailsSource.buildDetails(request));\n+            AuthContextUtils.callAsAdmin(jwtAuthentication.getDetails().getDomain(), () -> {\n+                Pair<String, Set<SyncopeGrantedAuthority>> authenticated = dataAccessor.authenticate(jwtAuthentication);\n+                jwtAuthentication.setUsername(authenticated.getLeft());\n+                jwtAuthentication.getAuthorities().addAll(authenticated.getRight());\n+                return null;\n+            });\n+            SecurityContextHolder.getContext().setAuthentication(jwtAuthentication);\n \n             chain.doFilter(request, response);\n         } catch (JwsException e) {"},{"sha":"9580070277feaf64927eb22aef46b66984223fa3","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationProvider.java","status":"modified","additions":2,"deletions":12,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -18,9 +18,6 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import java.util.Date;\n-import java.util.Set;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.AuthenticationProvider;\n@@ -39,17 +36,10 @@ public class JWTAuthenticationProvider implements AuthenticationProvider {\n \n     @Override\n     public Authentication authenticate(final Authentication authentication) throws AuthenticationException {\n-        final JWTAuthentication jwtAuthentication = (JWTAuthentication) authentication;\n-\n-        AuthContextUtils.callAsAdmin(jwtAuthentication.getDetails().getDomain(), () -> {\n-            Pair<String, Set<SyncopeGrantedAuthority>> authenticated = dataAccessor.authenticate(jwtAuthentication);\n-            jwtAuthentication.setUsername(authenticated.getLeft());\n-            jwtAuthentication.getAuthorities().addAll(authenticated.getRight());\n-            return null;\n-        });\n+        JWTAuthentication jwtAuthentication = (JWTAuthentication) authentication;\n \n         JwtClaims claims = jwtAuthentication.getClaims();\n-        Long referenceTime = new Date().getTime();\n+        Long referenceTime = System.currentTimeMillis();\n \n         Long expiryTime = claims.getExpiryTime();\n         if (expiryTime == null || (expiryTime * 1000L) < referenceTime) {"},{"sha":"76313ecaf3af1aace4ebe4c98acd51498dafe9de","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -211,7 +211,7 @@ protected Authentication finalizeAuthentication(\n     }\n \n     @Override\n-    public boolean supports(final Class<? extends Object> type) {\n-        return type.equals(UsernamePasswordAuthenticationToken.class);\n+    public boolean supports(final Class<?> authentication) {\n+        return UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication);\n     }\n }"},{"sha":"f421dd69143156ac3b9cab45d6c8014bf433cdff","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/WebSecurityContext.java","status":"modified","additions":22,"deletions":39,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FWebSecurityContext.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.spring.security;\n \n import javax.annotation.Resource;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n@@ -29,13 +31,10 @@\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n import org.springframework.security.config.http.SessionCreationPolicy;\n import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.web.AuthenticationEntryPoint;\n import org.springframework.security.web.access.AccessDeniedHandler;\n import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;\n import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\n import org.springframework.security.web.context.NullSecurityContextRepository;\n-import org.springframework.security.web.context.SecurityContextPersistenceFilter;\n-import org.springframework.security.web.context.SecurityContextRepository;\n import org.springframework.security.web.firewall.DefaultHttpFirewall;\n import org.springframework.security.web.firewall.HttpFirewall;\n \n@@ -46,6 +45,9 @@ public class WebSecurityContext extends WebSecurityConfigurerAdapter {\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n+    @Autowired\n+    private ApplicationContext ctx;\n+\n     public WebSecurityContext() {\n         super(true);\n         SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);\n@@ -82,58 +84,39 @@ protected void configure(final AuthenticationManagerBuilder builder) throws Exce\n     }\n \n     @Bean\n-    public SecurityContextRepository securityContextRepository() {\n-        return new NullSecurityContextRepository();\n-    }\n-\n-    @Bean\n-    public SecurityContextPersistenceFilter securityContextPersistenceFilter() {\n-        return new SecurityContextPersistenceFilter(securityContextRepository());\n+    public AccessDeniedHandler accessDeniedHandler() {\n+        return new SyncopeAccessDeniedHandler();\n     }\n \n-    @Bean\n-    public AuthenticationEntryPoint basicAuthenticationEntryPoint() {\n+    @Override\n+    protected void configure(final HttpSecurity http) throws Exception {\n         SyncopeBasicAuthenticationEntryPoint basicAuthenticationEntryPoint = new SyncopeBasicAuthenticationEntryPoint();\n         basicAuthenticationEntryPoint.setRealmName(\"Apache Syncope authentication\");\n-        return basicAuthenticationEntryPoint;\n-    }\n \n-    @Bean\n-    public SyncopeAuthenticationDetailsSource authenticationDetailsSource() {\n-        return new SyncopeAuthenticationDetailsSource();\n-    }\n+        SyncopeAuthenticationDetailsSource authenticationDetailsSource = new SyncopeAuthenticationDetailsSource();\n \n-    @Bean\n-    public AccessDeniedHandler accessDeniedHandler() {\n-        return new SyncopeAccessDeniedHandler();\n-    }\n-\n-    @Bean\n-    public JWTAuthenticationFilter jwtAuthenticationFilter() throws Exception {\n-        return new JWTAuthenticationFilter(authenticationManager());\n-    }\n+        JWTAuthenticationFilter jwtAuthenticationFilter = new JWTAuthenticationFilter(\n+                authenticationManager(),\n+                basicAuthenticationEntryPoint,\n+                authenticationDetailsSource,\n+                ctx.getBean(AuthDataAccessor.class),\n+                ctx.getBean(DefaultCredentialChecker.class));\n \n-    @Bean\n-    public MustChangePasswordFilter mustChangePasswordFilter() {\n-        return new MustChangePasswordFilter();\n-    }\n-\n-    @Override\n-    protected void configure(final HttpSecurity http) throws Exception {\n         http.authorizeRequests().\n                 antMatchers(\"/**\").permitAll().and().\n                 sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().\n-                securityContext().securityContextRepository(securityContextRepository()).and().\n+                securityContext().securityContextRepository(new NullSecurityContextRepository()).and().\n                 anonymous().principal(anonymousUser).and().\n-                httpBasic().authenticationEntryPoint(basicAuthenticationEntryPoint()).\n-                authenticationDetailsSource(authenticationDetailsSource()).and().\n+                httpBasic().authenticationEntryPoint(basicAuthenticationEntryPoint).\n+                authenticationDetailsSource(authenticationDetailsSource).and().\n                 exceptionHandling().accessDeniedHandler(accessDeniedHandler()).and().\n-                addFilterBefore(jwtAuthenticationFilter(), BasicAuthenticationFilter.class).\n-                addFilterBefore(mustChangePasswordFilter(), FilterSecurityInterceptor.class).\n+                addFilterBefore(jwtAuthenticationFilter, BasicAuthenticationFilter.class).\n+                addFilterBefore(new MustChangePasswordFilter(), FilterSecurityInterceptor.class).\n                 headers().disable().\n                 csrf().disable();\n     }\n \n+    @ConditionalOnMissingBean\n     @Bean\n     public AuthDataAccessor authDataAccessor() {\n         return new AuthDataAccessor();"},{"sha":"d52abeadcbe1918e12e8dc106458eac99573c962","filename":"ext/self-keymaster/client/src/main/java/org/apache/syncope/common/keymaster/client/self/SelfKeymasterServiceOps.java","status":"modified","additions":2,"deletions":23,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Fclient%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fself%2FSelfKeymasterServiceOps.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.CompletionStage;\n-import javax.ws.rs.HttpMethod;\n import javax.ws.rs.Path;\n import javax.ws.rs.client.Entity;\n import javax.ws.rs.core.MediaType;\n@@ -31,19 +30,14 @@\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.ext.self.keymaster.api.service.NetworkServiceService;\n+import org.apache.syncope.ext.self.keymaster.api.service.NetworkServiceService.Action;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.backoff.BackOffExecution;\n import org.springframework.util.backoff.ExponentialBackOff;\n \n public class SelfKeymasterServiceOps extends SelfKeymasterOps implements ServiceOps {\n \n-    private enum Action {\n-        register,\n-        unregister\n-\n-    }\n-\n     private static final Logger LOG = LoggerFactory.getLogger(ServiceOps.class);\n \n     private final int maxRetries;\n@@ -129,22 +123,7 @@ private void retry(\n     }\n \n     private CompletionStage<Response> completionStage(final Action action, final NetworkService service) {\n-        CompletionStage<Response> completionStage = null;\n-        switch (action) {\n-            case register:\n-                completionStage = rx(path).\n-                        post(Entity.entity(service, MediaType.APPLICATION_JSON));\n-                break;\n-\n-            case unregister:\n-                completionStage = rx(path).\n-                        method(HttpMethod.DELETE, Entity.entity(service, MediaType.APPLICATION_JSON));\n-                break;\n-\n-            default:\n-        }\n-\n-        return completionStage;\n+        return rx(path + \"?action=\" + action.name()).post(Entity.entity(service, MediaType.APPLICATION_JSON));\n     }\n \n     @Override"},{"sha":"aade9af53a7f37a4f70d684b60e1a56ff05b37f0","filename":"ext/self-keymaster/rest-api/src/main/java/org/apache/syncope/ext/self/keymaster/api/service/NetworkServiceService.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fapi%2Fservice%2FNetworkServiceService.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -23,12 +23,12 @@\n import java.util.concurrent.CompletableFuture;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n-import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n@@ -39,6 +39,12 @@\n @Path(\"networkServices\")\n public interface NetworkServiceService extends Serializable {\n \n+    enum Action {\n+        register,\n+        unregister\n+\n+    }\n+\n     @GET\n     @Path(\"{serviceType}\")\n     @Produces({ MediaType.APPLICATION_JSON })\n@@ -52,10 +58,7 @@ public interface NetworkServiceService extends Serializable {\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON })\n     @Produces({ MediaType.APPLICATION_JSON })\n-    CompletableFuture<Response> register(@NotNull NetworkService networkService);\n-\n-    @DELETE\n-    @Consumes({ MediaType.APPLICATION_JSON })\n-    @Produces({ MediaType.APPLICATION_JSON })\n-    CompletableFuture<Response> unregister(@NotNull NetworkService networkService);\n+    CompletableFuture<Response> action(\n+            @NotNull NetworkService networkService,\n+            @QueryParam(\"action\") Action action);\n }"},{"sha":"e04c3507d5297002e3185937161f885278f036a7","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/service/NetworkServiceServiceImpl.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fservice%2FNetworkServiceServiceImpl.java?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -48,18 +48,13 @@ public NetworkService get(final NetworkService.Type serviceType) {\n \n     @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n     @Override\n-    public CompletableFuture<Response> register(final NetworkService networkService) {\n+    public CompletableFuture<Response> action(final NetworkService networkService, final Action action) {\n         return CompletableFuture.supplyAsync(() -> {\n-            logic.register(networkService);\n-            return Response.noContent().build();\n-        });\n-    }\n-\n-    @PreAuthorize(\"@environment.getProperty('keymaster.username') == authentication.name and not(isAnonymous())\")\n-    @Override\n-    public CompletableFuture<Response> unregister(final NetworkService networkService) {\n-        return CompletableFuture.supplyAsync(() -> {\n-            logic.unregister(networkService);\n+            if (action == Action.unregister) {\n+                logic.unregister(networkService);\n+            } else {\n+                logic.register(networkService);\n+            }\n             return Response.noContent().build();\n         });\n     }"},{"sha":"bf3e4316862d4cfe19f701862371a33291013e5f","filename":"fit/build-tools/pom.xml","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fbuild-tools%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fbuild-tools%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fpom.xml?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -371,17 +371,19 @@ under the License.\n           <artifactId>jakarta.faces</artifactId>\n           <version>${javax.faces.version}</version>\n         </dependency>\n-\n-        <dependency>\n-          <groupId>com.fasterxml.jackson.dataformat</groupId>\n-          <artifactId>jackson-dataformat-xml</artifactId>\n-        </dependency>\n       </dependencies>\n \n       <build>\n         <defaultGoal>clean verify cargo:run</defaultGoal>\n \n         <plugins>\n+          <plugin>\n+            <artifactId>maven-war-plugin</artifactId>\n+            <configuration>\n+              <packagingExcludes>WEB-INF/lib/bval-*.jar</packagingExcludes>\n+            </configuration>\n+          </plugin>\n+\n           <plugin>\n             <groupId>org.codehaus.cargo</groupId>\n             <artifactId>cargo-maven2-plugin</artifactId>"},{"sha":"6b646d090bb9ff8ace56afe9fc76a05709061180","filename":"fit/console-reference/src/main/webapp/WEB-INF/payara-web.xml","status":"renamed","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -16,10 +16,16 @@ software distributed under the License is distributed on an\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n-\n -->\n-<!DOCTYPE glassfish-web-app PUBLIC \"-//GlassFish.org//DTD \n-GlassFish Application Server 3.1 Servlet 3.0//EN\" \"http://glassfish.org/dtds/glassfish-web-app_3_0-1.dtd\">\n-<glassfish-web-app error-url=\"\">\n+<!DOCTYPE payara-web-app PUBLIC \"-//Payara.fish//DTD Payara Server 4 Servlet 3.0//EN\" \"https://docs.payara.fish/schemas/payara-web-app_4.dtd\">\n+<payara-web-app error-url=\"\">\n+  <!-- Uncomment this when using JNDI DataSource -->\n+  <!--<resource-ref>\n+    <res-ref-name>jdbc/syncopeMasterDataSource</res-ref-name>\n+    <jndi-name>jdbc/syncopeMasterDataSource</jndi-name>\n+  </resource-ref>-->\n   <class-loader delegate=\"false\"/>\n-</glassfish-web-app>\n+  <jsp-config>\n+    <property name=\"httpMethods\" value=\"GET,POST,HEAD,PUT,DELETE\"/>\n+  </jsp-config>\n+</payara-web-app>","previous_filename":"fit/console-reference/src/main/webapp/WEB-INF/glassfish-web.xml"},{"sha":"eb6ff137bd145f6d866d9c686e245f3774c552e0","filename":"fit/core-reference/pom.xml","status":"modified","additions":25,"deletions":7,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -1519,7 +1519,6 @@ under the License.\n       </build>\n     </profile>\n     \n-    <!-- Running IT with this profile requires prior build of ../build-tools with -Ppayara -->\n     <profile>\n       <id>payara-it</id>\n \n@@ -1541,17 +1540,36 @@ under the License.\n           <artifactId>jakarta.faces</artifactId>\n           <version>${javax.faces.version}</version>\n         </dependency>\n-\n-        <dependency>\n-          <groupId>com.fasterxml.jackson.dataformat</groupId>\n-          <artifactId>jackson-dataformat-xml</artifactId>\n-        </dependency>\n       </dependencies>\n \n       <build>\n         <defaultGoal>clean verify</defaultGoal>\n \n         <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-antrun-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>adjust-buildtools-for-payara</id>\n+                <phase>prepare-package</phase>\n+                <configuration>\n+                  <target>\n+                    <unzip src=\"${settings.localRepository}/org/apache/syncope/fit/syncope-fit-build-tools/${project.version}/syncope-fit-build-tools-${project.version}.war\"\n+                           dest=\"${project.build.outputDirectory}/syncope-fit-buildtools\"/>\n+                    <delete file=\"${project.build.outputDirectory}/syncope-fit-buildtools/WEB-INF/lib/bval-jsr-${bval.version}.jar\"/>\n+                    <copy file=\"${settings.localRepository}/org/glassfish/jakarta.faces/${javax.faces.version}/jakarta.faces-${javax.faces.version}.jar\"\n+                          todir=\"${project.build.outputDirectory}/syncope-fit-buildtools/WEB-INF/lib\"/>\n+                  </target>\n+                </configuration>\n+                <goals>\n+                  <goal>run</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n           <plugin>\n             <groupId>org.codehaus.cargo</groupId>\n             <artifactId>cargo-maven2-plugin</artifactId>\n@@ -1582,7 +1600,7 @@ under the License.\n               </configuration>\n               <deployables>\n                 <deployable>\n-                  <location>${basedir}/../build-tools/target/syncope-fit-build-tools-${project.version}</location>\n+                  <location>${project.build.outputDirectory}/syncope-fit-buildtools</location>\n                   <properties>\n                     <context>syncope-fit-build-tools</context>\n                   </properties>"},{"sha":"6b646d090bb9ff8ace56afe9fc76a05709061180","filename":"fit/core-reference/src/main/webapp/WEB-INF/payara-web.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -25,9 +25,6 @@ under the License.\n     <jndi-name>jdbc/syncopeMasterDataSource</jndi-name>\n   </resource-ref>-->\n   <class-loader delegate=\"false\"/>\n-  <scanning-exclude>*</scanning-exclude>\n-  <scanning-exclude>*</scanning-exclude>\n-  <jaxrs-roles-allowed-enabled>false</jaxrs-roles-allowed-enabled>\n   <jsp-config>\n     <property name=\"httpMethods\" value=\"GET,POST,HEAD,PUT,DELETE\"/>\n   </jsp-config>"},{"sha":"6b646d090bb9ff8ace56afe9fc76a05709061180","filename":"fit/enduser-reference/src/main/webapp/WEB-INF/payara-web.xml","status":"renamed","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fpayara-web.xml?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -16,10 +16,16 @@ software distributed under the License is distributed on an\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n-\n -->\n-<!DOCTYPE glassfish-web-app PUBLIC \"-//GlassFish.org//DTD \n-GlassFish Application Server 3.1 Servlet 3.0//EN\" \"http://glassfish.org/dtds/glassfish-web-app_3_0-1.dtd\">\n-<glassfish-web-app error-url=\"\">\n+<!DOCTYPE payara-web-app PUBLIC \"-//Payara.fish//DTD Payara Server 4 Servlet 3.0//EN\" \"https://docs.payara.fish/schemas/payara-web-app_4.dtd\">\n+<payara-web-app error-url=\"\">\n+  <!-- Uncomment this when using JNDI DataSource -->\n+  <!--<resource-ref>\n+    <res-ref-name>jdbc/syncopeMasterDataSource</res-ref-name>\n+    <jndi-name>jdbc/syncopeMasterDataSource</jndi-name>\n+  </resource-ref>-->\n   <class-loader delegate=\"false\"/>\n-</glassfish-web-app>\n+  <jsp-config>\n+    <property name=\"httpMethods\" value=\"GET,POST,HEAD,PUT,DELETE\"/>\n+  </jsp-config>\n+</payara-web-app>","previous_filename":"fit/enduser-reference/src/main/webapp/WEB-INF/glassfish-web.xml"},{"sha":"1eb67bfa01c264b914419340714bca8936bb1514","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ce3253355f26507f56cea0d00bc9adf68520c508/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ce3253355f26507f56cea0d00bc9adf68520c508/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=ce3253355f26507f56cea0d00bc9adf68520c508","patch":"@@ -509,7 +509,7 @@ under the License.\n \n     <tomcat.version>9.0.36</tomcat.version>\n     <wildfly.version>20.0.0.Final</wildfly.version>\n-    <payara.version>5.201</payara.version>\n+    <payara.version>5.2020.2</payara.version>\n     <javax.faces.version>2.3.14</javax.faces.version>\n \n     <docker.postgresql.version>12</docker.postgresql.version>"}]}