{"sha":"26c99ad4d6509a9c8b29df5500bcd9961d4187cd","node_id":"C_kwDOJfYA1toAKDI2Yzk5YWQ0ZDY1MDlhOWM4YjI5ZGY1NTAwYmNkOTk2MWQ0MTg3Y2Q","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-08-16T14:34:48Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-08-16T14:34:48Z"},"message":"Getting rid of Cocoon 3","tree":{"sha":"4f17fa3488c97b955ea111807196fb959f50ea05","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4f17fa3488c97b955ea111807196fb959f50ea05"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/26c99ad4d6509a9c8b29df5500bcd9961d4187cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/26c99ad4d6509a9c8b29df5500bcd9961d4187cd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/26c99ad4d6509a9c8b29df5500bcd9961d4187cd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"1c078370dd72f75cb2cf389f7701f067b883347a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1c078370dd72f75cb2cf389f7701f067b883347a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1c078370dd72f75cb2cf389f7701f067b883347a"}],"stats":{"total":1054,"additions":674,"deletions":380},"files":[{"sha":"7703503fa3b879ec77ed250a4a0a1feb43851f17","filename":"core/idrepo/logic/pom.xml","status":"modified","additions":55,"deletions":10,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fpom.xml?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -52,15 +52,6 @@ under the License.\n       <artifactId>aspectjweaver</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>org.apache.cocoon.sax</groupId>\n-      <artifactId>cocoon-sax</artifactId>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.cocoon.optional</groupId>\n-      <artifactId>cocoon-optional</artifactId>\n-    </dependency>\n-\n     <dependency>\n       <groupId>org.apache.xmlgraphics</groupId>\n       <artifactId>fop</artifactId>\n@@ -81,6 +72,39 @@ under the License.\n       <artifactId>syncope-core-provisioning-java</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-workflow-java</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-jpa</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-simple</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.h2database</groupId>\n+      <artifactId>h2</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>\n@@ -90,7 +114,28 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n     </resources>\n-        \n+    <testResources>\n+      <testResource>\n+        <directory>${basedir}/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../persistence-jpa/src/main/resources</directory>\n+        <includes>\n+          <include>persistence.properties</include>\n+        </includes>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../persistence-jpa/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+      <testResource>\n+        <directory>${basedir}/../../provisioning-java/src/test/resources</directory>\n+        <filtering>true</filtering>\n+      </testResource>\n+    </testResources>\n+\n     <plugins>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>"},{"sha":"95803a43a34921de3ac786dc50d1e979df81ceae","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":72,"deletions":40,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.logic;\n \n import java.io.ByteArrayInputStream;\n+import java.io.File;\n import java.io.OutputStream;\n import java.lang.reflect.Method;\n import java.nio.charset.StandardCharsets;\n@@ -28,19 +29,26 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.zip.ZipInputStream;\n import javax.ws.rs.core.Response;\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Templates;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.sax.SAXResult;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+import javax.xml.transform.sax.TransformerHandler;\n+import javax.xml.transform.stream.StreamResult;\n import javax.xml.transform.stream.StreamSource;\n-import org.apache.cocoon.pipeline.NonCachingPipeline;\n-import org.apache.cocoon.pipeline.Pipeline;\n-import org.apache.cocoon.sax.SAXPipelineComponent;\n-import org.apache.cocoon.sax.component.XMLGenerator;\n-import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.fop.apps.FopFactory;\n+import org.apache.fop.apps.FopFactoryBuilder;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ExecTO;\n@@ -54,9 +62,6 @@\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n-import org.apache.syncope.core.logic.cocoon.FopSerializer;\n-import org.apache.syncope.core.logic.cocoon.TextSerializer;\n-import org.apache.syncope.core.logic.cocoon.XSLTTransformer;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n@@ -78,6 +83,22 @@\n \n public class ReportLogic extends AbstractExecutableLogic<ReportTO> {\n \n+    protected static final Pattern XSLT_PARAMETER_NAME_PATTERN = Pattern.compile(\"[a-zA-Z_][\\\\w\\\\-\\\\.]*\");\n+\n+    protected static final SAXTransformerFactory TRAX_FACTORY;\n+\n+    protected static final FopFactory FOP_FACTORY = new FopFactoryBuilder(new File(\".\").toURI()).build();\n+\n+    static {\n+        TRAX_FACTORY = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+        TRAX_FACTORY.setURIResolver((href, base) -> null);\n+        try {\n+            TRAX_FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        } catch (TransformerConfigurationException e) {\n+            LOG.error(\"Could not enable secure XML processing\", e);\n+        }\n+    }\n+\n     protected final ReportDAO reportDAO;\n \n     protected final ReportExecDAO reportExecDAO;\n@@ -227,8 +248,27 @@ public ReportExec getReportExec(final String executionKey) {\n         return reportExec;\n     }\n \n+    protected Transformer buildXSLTTransformer(final String template, final Map<String, Object> parameters)\n+            throws TransformerConfigurationException {\n+\n+        Templates templates = TRAX_FACTORY.newTemplates(\n+                new StreamSource(IOUtils.toInputStream(template, StandardCharsets.UTF_8)));\n+        TransformerHandler transformerHandler = TRAX_FACTORY.newTransformerHandler(templates);\n+\n+        Transformer transformer = transformerHandler.getTransformer();\n+        parameters.forEach((name, values) -> {\n+            if (XSLT_PARAMETER_NAME_PATTERN.matcher(name).matches()) {\n+                transformer.setParameter(name, values);\n+            }\n+        });\n+\n+        return transformer;\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_READ + \"')\")\n-    public static void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n+    public void exportExecutionResult(\n+            final OutputStream os,\n+            final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n \n         // streaming SAX handler from a compressed byte array stream\n@@ -238,9 +278,6 @@ public static void exportExecutionResult(final OutputStream os, final ReportExec\n             // a single ZipEntry in the ZipInputStream (see ReportJob)\n             zis.getNextEntry();\n \n-            Pipeline<SAXPipelineComponent> pipeline = new NonCachingPipeline<>();\n-            pipeline.addComponent(new XMLGenerator(zis));\n-\n             Map<String, Object> parameters = new HashMap<>();\n             parameters.put(\"status\", reportExec.getStatus());\n             parameters.put(\"message\", reportExec.getMessage());\n@@ -249,49 +286,44 @@ public static void exportExecutionResult(final OutputStream os, final ReportExec\n \n             switch (format) {\n                 case HTML:\n-                    XSLTTransformer xsl2html = new XSLTTransformer(new StreamSource(\n-                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getHTMLTemplate(),\n-                                    StandardCharsets.UTF_8)));\n-                    xsl2html.setParameters(parameters);\n-                    pipeline.addComponent(xsl2html);\n-                    pipeline.addComponent(XMLSerializer.createXHTMLSerializer());\n+                    Transformer html = buildXSLTTransformer(\n+                            reportExec.getReport().getTemplate().getHTMLTemplate(), parameters);\n+                    html.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+                    html.transform(\n+                            new StreamSource(zis),\n+                            new StreamResult(os));\n                     break;\n \n                 case PDF:\n-                    XSLTTransformer xsl2pdf = new XSLTTransformer(new StreamSource(\n-                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getFOTemplate(),\n-                                    StandardCharsets.UTF_8)));\n-                    xsl2pdf.setParameters(parameters);\n-                    pipeline.addComponent(xsl2pdf);\n-                    pipeline.addComponent(new FopSerializer(MimeConstants.MIME_PDF));\n+                    Transformer pdf = buildXSLTTransformer(\n+                            reportExec.getReport().getTemplate().getFOTemplate(), parameters);\n+                    pdf.transform(\n+                            new StreamSource(zis),\n+                            new SAXResult(FOP_FACTORY.newFop(MimeConstants.MIME_PDF, os).getDefaultHandler()));\n                     break;\n \n                 case RTF:\n-                    XSLTTransformer xsl2rtf = new XSLTTransformer(new StreamSource(\n-                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getFOTemplate(),\n-                                    StandardCharsets.UTF_8)));\n-                    xsl2rtf.setParameters(parameters);\n-                    pipeline.addComponent(xsl2rtf);\n-                    pipeline.addComponent(new FopSerializer(MimeConstants.MIME_RTF));\n+                    Transformer rtf = buildXSLTTransformer(\n+                            reportExec.getReport().getTemplate().getFOTemplate(), parameters);\n+                    rtf.transform(\n+                            new StreamSource(zis),\n+                            new SAXResult(FOP_FACTORY.newFop(MimeConstants.MIME_RTF, os).getDefaultHandler()));\n                     break;\n \n                 case CSV:\n-                    XSLTTransformer xsl2csv = new XSLTTransformer(new StreamSource(\n-                            IOUtils.toInputStream(reportExec.getReport().getTemplate().getCSVTemplate(),\n-                                    StandardCharsets.UTF_8)));\n-                    xsl2csv.setParameters(parameters);\n-                    pipeline.addComponent(xsl2csv);\n-                    pipeline.addComponent(new TextSerializer());\n+                    Transformer csv = buildXSLTTransformer(\n+                            reportExec.getReport().getTemplate().getCSVTemplate(), parameters);\n+                    csv.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+                    csv.transform(\n+                            new StreamSource(zis),\n+                            new StreamResult(os));\n                     break;\n \n                 case XML:\n                 default:\n-                    pipeline.addComponent(XMLSerializer.createXMLSerializer());\n+                    zis.transferTo(os);\n             }\n \n-            pipeline.setup(os);\n-            pipeline.execute();\n-\n             LOG.debug(\"Result of {} successfully exported as {}\", reportExec, format);\n         } catch (Exception e) {\n             LOG.error(\"While exporting content\", e);"},{"sha":"14124cd18ad3438de51d7128ea72fdb67986a105","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/cocoon/FopSerializer.java","status":"removed","additions":0,"deletions":83,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c078370dd72f75cb2cf389f7701f067b883347a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FFopSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c078370dd72f75cb2cf389f7701f067b883347a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FFopSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FFopSerializer.java?ref=1c078370dd72f75cb2cf389f7701f067b883347a","patch":"@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.cocoon;\n-\n-import java.io.File;\n-import java.io.OutputStream;\n-import org.apache.cocoon.pipeline.ProcessingException;\n-import org.apache.cocoon.pipeline.caching.CacheKey;\n-import org.apache.cocoon.pipeline.caching.SimpleCacheKey;\n-import org.apache.cocoon.pipeline.component.CachingPipelineComponent;\n-import org.apache.cocoon.pipeline.util.StringRepresentation;\n-import org.apache.cocoon.sax.AbstractSAXSerializer;\n-import org.apache.fop.apps.FOPException;\n-import org.apache.fop.apps.Fop;\n-import org.apache.fop.apps.FopFactory;\n-import org.apache.fop.apps.FopFactoryBuilder;\n-import org.apache.xmlgraphics.util.MimeConstants;\n-import org.xml.sax.ContentHandler;\n-\n-public class FopSerializer extends AbstractSAXSerializer implements CachingPipelineComponent {\n-\n-    private static final FopFactory FOP_FACTORY = new FopFactoryBuilder(new File(\".\").toURI()).build();\n-\n-    private String outputFormat;\n-\n-    /**\n-     * Create a new FOP serializer that produces a PDF in output\n-     */\n-    public FopSerializer() {\n-        this(MimeConstants.MIME_PDF);\n-    }\n-\n-    /**\n-     * Create a new FOP serializer that produces the specified mime\n-     *\n-     * @param outputFormat the output's mime type\n-     */\n-    public FopSerializer(final String outputFormat) {\n-        if (outputFormat == null) {\n-            throw new IllegalArgumentException(\"The parameter 'outputFormat' mustn't be null.\");\n-        }\n-\n-        this.outputFormat = outputFormat;\n-    }\n-\n-    @Override\n-    public CacheKey constructCacheKey() {\n-        return new SimpleCacheKey();\n-    }\n-\n-    @Override\n-    public void setOutputStream(final OutputStream outputStream) {\n-        try {\n-            Fop fop = FOP_FACTORY.newFop(this.outputFormat, outputStream);\n-            ContentHandler fopContentHandler = fop.getDefaultHandler();\n-\n-            this.setContentHandler(fopContentHandler);\n-        } catch (FOPException e) {\n-            throw new ProcessingException(\"Impossible to initialize FOPSerializer\", e);\n-        }\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return StringRepresentation.buildString(this, \"outputFormat=\" + this.outputFormat);\n-    }\n-}"},{"sha":"eb5dab6366b5b8082eda6d1b122beeb0e9372940","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/cocoon/XSLTTransformer.java","status":"removed","additions":0,"deletions":195,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1c078370dd72f75cb2cf389f7701f067b883347a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1c078370dd72f75cb2cf389f7701f067b883347a/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java?ref=1c078370dd72f75cb2cf389f7701f067b883347a","patch":"@@ -1,195 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.cocoon;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.regex.Pattern;\n-import javax.xml.XMLConstants;\n-import javax.xml.transform.Source;\n-import javax.xml.transform.Templates;\n-import javax.xml.transform.Transformer;\n-import javax.xml.transform.TransformerConfigurationException;\n-import javax.xml.transform.sax.SAXResult;\n-import javax.xml.transform.sax.SAXTransformerFactory;\n-import javax.xml.transform.sax.TransformerHandler;\n-import org.apache.cocoon.pipeline.SetupException;\n-import org.apache.cocoon.pipeline.caching.CacheKey;\n-import org.apache.cocoon.pipeline.component.CachingPipelineComponent;\n-import org.apache.cocoon.pipeline.util.StringRepresentation;\n-import org.apache.cocoon.sax.AbstractSAXTransformer;\n-import org.apache.cocoon.sax.SAXConsumer;\n-import org.apache.cocoon.sax.util.SAXConsumerAdapter;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class XSLTTransformer extends AbstractSAXTransformer implements CachingPipelineComponent {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(XSLTTransformer.class);\n-\n-    /**\n-     * A generic transformer factory to parse XSLTs.\n-     */\n-    private static final SAXTransformerFactory TRAX_FACTORY = createNewSAXTransformerFactory();\n-\n-    /**\n-     * The XSLT parameters name pattern.\n-     */\n-    private static final Pattern XSLT_PARAMETER_NAME_PATTERN = Pattern.compile(\"[a-zA-Z_][\\\\w\\\\-\\\\.]*\");\n-\n-    /**\n-     * The XSLT parameters reference.\n-     */\n-    private Map<String, Object> parameters;\n-\n-    /**\n-     * The XSLT Template reference.\n-     */\n-    private Templates templates;\n-\n-    private Source source;\n-\n-    public XSLTTransformer(final Source source) {\n-        super();\n-        this.load(source, null);\n-    }\n-\n-    /**\n-     * Creates a new transformer reading the XSLT from the Source source and setting the TransformerFactory attributes.\n-     *\n-     * This constructor is useful when users want to perform XSLT transformation using <a\n-     * href=\"http://xml.apache.org/xalan-j/xsltc_usage.html\">xsltc</a>.\n-     *\n-     * @param source the XSLT source\n-     * @param attributes the Transformer Factory attributes\n-     */\n-    public XSLTTransformer(final Source source, final Map<String, Object> attributes) {\n-        super();\n-        this.load(source, attributes);\n-    }\n-\n-    /**\n-     * Method useful to create a new transformer reading the XSLT from the URL source and setting the Transformer\n-     * Factory attributes.\n-     *\n-     * This method is useful when users want to perform XSLT transformation using <a\n-     * href=\"http://xml.apache.org/xalan-j/xsltc_usage.html\">xsltc</a>.\n-     *\n-     * @param source the XSLT source\n-     * @param attributes the Transformer Factory attributes\n-     */\n-    private void load(final Source source, final Map<String, Object> attributes) {\n-        if (source == null) {\n-            throw new IllegalArgumentException(\"The parameter 'source' mustn't be null.\");\n-        }\n-\n-        this.source = source;\n-\n-        this.load(this.source, this.source.toString(), attributes);\n-    }\n-\n-    private void load(final Source source, final String localCacheKey, final Map<String, Object> attributes) {\n-        LOG.debug(\"{} local cache miss: {}\", getClass().getSimpleName(), localCacheKey);\n-\n-        // XSLT has to be parsed\n-        final SAXTransformerFactory transformerFactory;\n-        if (attributes == null || attributes.isEmpty()) {\n-            transformerFactory = TRAX_FACTORY;\n-        } else {\n-            transformerFactory = createNewSAXTransformerFactory();\n-            attributes.forEach(transformerFactory::setAttribute);\n-        }\n-\n-        try {\n-            this.templates = transformerFactory.newTemplates(source);\n-        } catch (TransformerConfigurationException e) {\n-            throw new SetupException(\"Impossible to read XSLT from '\" + source + \"', see nested exception\", e);\n-        }\n-    }\n-\n-    /**\n-     * Sets the XSLT parameters to be applied to XSLT stylesheet.\n-     *\n-     * @param parameters the XSLT parameters to be applied to XSLT stylesheet\n-     */\n-    public void setParameters(final Map<String, ? extends Object> parameters) {\n-        if (parameters == null) {\n-            this.parameters = null;\n-        } else {\n-            this.parameters = new HashMap<>(parameters);\n-        }\n-    }\n-\n-    @Override\n-    protected void setSAXConsumer(final SAXConsumer consumer) {\n-        TransformerHandler transformerHandler;\n-        try {\n-            transformerHandler = TRAX_FACTORY.newTransformerHandler(this.templates);\n-        } catch (Exception e) {\n-            throw new SetupException(\"Could not initialize transformer handler.\", e);\n-        }\n-\n-        if (this.parameters != null) {\n-            final Transformer transformer = transformerHandler.getTransformer();\n-\n-            this.parameters.forEach((name, values) -> {\n-                // is valid XSLT parameter name\n-                if (XSLT_PARAMETER_NAME_PATTERN.matcher(name).matches()) {\n-                    transformer.setParameter(name, values);\n-                }\n-            });\n-        }\n-\n-        final SAXResult result = new SAXResult();\n-        result.setHandler(consumer);\n-        // According to TrAX specs, all TransformerHandlers are LexicalHandlers\n-        result.setLexicalHandler(consumer);\n-        transformerHandler.setResult(result);\n-\n-        final SAXConsumerAdapter saxConsumerAdapter = new SAXConsumerAdapter();\n-        saxConsumerAdapter.setContentHandler(transformerHandler);\n-        super.setSAXConsumer(saxConsumerAdapter);\n-    }\n-\n-    @Override\n-    public CacheKey constructCacheKey() {\n-        return null;\n-    }\n-\n-    /**\n-     * Utility method to create a new transformer factory.\n-     *\n-     * @return a new transformer factory\n-     */\n-    private static SAXTransformerFactory createNewSAXTransformerFactory() {\n-        SAXTransformerFactory transformerFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n-        transformerFactory.setURIResolver((href, base) -> null);\n-        try {\n-            transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n-        } catch (TransformerConfigurationException e) {\n-            LOG.error(\"Could not enable secure XML processing\", e);\n-        }\n-        return transformerFactory;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return StringRepresentation.buildString(this, \"src=<\" + this.source + '>');\n-    }\n-}"},{"sha":"80a069689edc5f7ef0c682e6e35a795e22c08872","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/AbstractTest.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractTest.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import javax.persistence.EntityManager;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.springframework.orm.jpa.EntityManagerFactoryUtils;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(classes = { IdRepoLogicTestContext.class })\n+public abstract class AbstractTest {\n+\n+    protected EntityManager entityManager() {\n+        EntityManager entityManager = EntityManagerFactoryUtils.getTransactionalEntityManager(\n+                EntityManagerFactoryUtils.findEntityManagerFactory(\n+                        ApplicationContextProvider.getBeanFactory(), AuthContextUtils.getDomain()));\n+        if (entityManager == null) {\n+            throw new IllegalStateException(\"Could not find EntityManager for domain \" + AuthContextUtils.getDomain());\n+        }\n+\n+        return entityManager;\n+    }\n+\n+    @BeforeAll\n+    public static void init() {\n+        EntitlementsHolder.getInstance().addAll(IdRepoEntitlement.values());\n+    }\n+}"},{"sha":"7ebb0b17402a3260ea8af173ba610b8d44a22b72","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/DummyConfParamOps.java","status":"renamed","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyConfParamOps.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -16,27 +16,28 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.logic.cocoon;\n+package org.apache.syncope.core.logic;\n \n-import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.nio.charset.StandardCharsets;\n-import org.apache.cocoon.pipeline.caching.CacheKey;\n-import org.apache.cocoon.pipeline.caching.SimpleCacheKey;\n-import org.apache.cocoon.pipeline.component.CachingPipelineComponent;\n-import org.apache.cocoon.sax.AbstractSAXSerializer;\n-import org.apache.tika.sax.ToTextContentHandler;\n+import java.util.Map;\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n \n-public class TextSerializer extends AbstractSAXSerializer implements CachingPipelineComponent {\n+public class DummyConfParamOps implements ConfParamOps {\n \n     @Override\n-    public void setOutputStream(final OutputStream outputStream) {\n-        super.setOutputStream(outputStream);\n-        setContentHandler(new ToTextContentHandler(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8)));\n+    public Map<String, Object> list(final String domain) {\n+        return Map.of();\n     }\n \n     @Override\n-    public CacheKey constructCacheKey() {\n-        return new SimpleCacheKey();\n+    public <T> T get(final String domain, final String key, final T defaultValue, final Class<T> reference) {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public <T> void set(final String domain, final String key, final T value) {\n+    }\n+\n+    @Override\n+    public void remove(final String domain, final String key) {\n     }\n }","previous_filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/cocoon/TextSerializer.java"},{"sha":"840c11edb85757b547b7f489b1b9dd3a260210e5","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/DummyDomainOps.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyDomainOps.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+\n+public class DummyDomainOps implements DomainOps {\n+\n+    private final DomainRegistry domainRegistry;\n+\n+    public DummyDomainOps(final DomainRegistry domainRegistry) {\n+        this.domainRegistry = domainRegistry;\n+    }\n+\n+    @Override\n+    public List<Domain> list() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    public Domain read(final String key) {\n+        return new Domain.Builder(key).build();\n+    }\n+\n+    @Override\n+    public void create(final Domain domain) {\n+        domainRegistry.register(domain);\n+    }\n+\n+    @Override\n+    public void changeAdminPassword(final String key, final String password, final CipherAlgorithm cipherAlgorithm) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void adjustPoolSize(final String key, final int maxPoolSize, final int minIdle) {\n+        // nothing to do\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        // nothing to do\n+    }\n+}"},{"sha":"28c68461c15e021612046c05fc14f4833776d834","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/DummyImplementationLookup.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyImplementationLookup.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.AccountRuleConf;\n+import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n+import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n+import org.apache.syncope.common.lib.policy.PushCorrelationRuleConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.dao.AccountRule;\n+import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n+import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.provisioning.java.job.report.UserReportlet;\n+\n+public class DummyImplementationLookup implements ImplementationLookup {\n+\n+    @Override\n+    public int getOrder() {\n+        return -1;\n+    }\n+\n+    @Override\n+    public Set<String> getClassNames(final String type) {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public Set<Class<?>> getJWTSSOProviderClasses() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public Class<? extends Reportlet> getReportletClass(\n+            final Class<? extends ReportletConf> reportletConfClass) {\n+\n+        if (UserReportletConf.class.equals(reportletConfClass)) {\n+            return UserReportlet.class;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends AccountRule> getAccountRuleClass(\n+            final Class<? extends AccountRuleConf> accountRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends PasswordRule> getPasswordRuleClass(\n+            final Class<? extends PasswordRuleConf> passwordRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends PullCorrelationRule> getPullCorrelationRuleClass(\n+            final Class<? extends PullCorrelationRuleConf> pullCorrelationRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Class<? extends PushCorrelationRule> getPushCorrelationRuleClass(\n+            final Class<? extends PushCorrelationRuleConf> pushCorrelationRuleConfClass) {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<Class<?>> getAuditAppenderClasses() {\n+        return Set.of();\n+    }\n+}"},{"sha":"efdedf03b997c481297c23525177ebb0e38ec8b5","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/DummyServiceOps.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDummyServiceOps.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+\n+public class DummyServiceOps implements ServiceOps {\n+\n+    @Override\n+    public void register(final NetworkService service) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public void unregister(final NetworkService service) {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public List<NetworkService> list(final NetworkService.Type serviceType) {\n+        return List.of();\n+    }\n+\n+    @Override\n+    public NetworkService get(final NetworkService.Type serviceType) {\n+        return null;\n+    }\n+}"},{"sha":"d647b7ca827eda1c98d947db8e430cd30fe40d50","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/IdRepoLogicTestContext.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicTestContext.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.DomainRegistry;\n+import org.apache.syncope.core.persistence.api.ImplementationLookup;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.apache.syncope.core.persistence.jpa.MasterDomain;\n+import org.apache.syncope.core.persistence.jpa.PersistenceContext;\n+import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n+import org.apache.syncope.core.provisioning.java.ProvisioningContext;\n+import org.apache.syncope.core.spring.security.SecurityContext;\n+import org.apache.syncope.core.workflow.java.WorkflowContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@PropertySource(\"classpath:core-test.properties\")\n+@Import({ IdRepoLogicContext.class, IdRepoLogicContext.class, SecurityContext.class,\n+    PersistenceContext.class, MasterDomain.class, ProvisioningContext.class, WorkflowContext.class })\n+@Configuration(proxyBeanMethods = false)\n+public class IdRepoLogicTestContext {\n+\n+    @Bean\n+    public TestInitializer testInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        return new TestInitializer(domainLoader, domainHolder, contentLoader, ctx);\n+    }\n+\n+    @Bean\n+    public ImplementationLookup implementationLookup() {\n+        return new DummyImplementationLookup();\n+    }\n+\n+    @Bean\n+    public ConfParamOps confParamOps() {\n+        return new DummyConfParamOps();\n+    }\n+\n+    @Bean\n+    public DomainOps domainOps(final DomainRegistry domainRegistry) {\n+        return new DummyDomainOps(domainRegistry);\n+    }\n+\n+    @Bean\n+    public ServiceOps serviceOps() {\n+        return new DummyServiceOps();\n+    }\n+}"},{"sha":"366a1f3b677beeb117f869653475f83543c11075","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/ReportLogicTest.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogicTest.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.IdMEntitlement;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.ReportExec;\n+import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n+import org.apache.syncope.core.provisioning.java.job.report.DefaultReportJobDelegate;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class ReportLogicTest extends AbstractTest {\n+\n+    @BeforeAll\n+    public static void setAuthContext() {\n+        List<GrantedAuthority> authorities = IdMEntitlement.values().stream().\n+                map(entitlement -> new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)).\n+                collect(Collectors.toList());\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"admin\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(SyncopeConstants.MASTER_DOMAIN, null));\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+    }\n+\n+    @AfterAll\n+    public static void unsetAuthContext() {\n+        SecurityContextHolder.getContext().setAuthentication(null);\n+    }\n+\n+    @Autowired\n+    private ReportLogic logic;\n+\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    @Autowired\n+    private ReportExecDAO reportExecDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    private void checkExport(final String execKey, final ReportExecExportFormat fmt) throws IOException {\n+        ReportExecExportFormat format = Optional.ofNullable(fmt).orElse(ReportExecExportFormat.XML);\n+        ReportExec reportExec = logic.getReportExec(execKey);\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+\n+        logic.exportExecutionResult(os, reportExec, format);\n+\n+        os.close();\n+        byte[] entity = os.toByteArray();\n+        assertTrue(entity.length > 0);\n+    }\n+\n+    @Test\n+    public void executeAndExport() throws Exception {\n+        ReportTO report = logic.read(\"0062ea9c-924d-4ecf-9961-4492a8cc6d1b\");\n+        assertNotNull(report);\n+        assertTrue(report.isActive());\n+\n+        report.getExecutions().forEach(exec -> logic.deleteExecution(exec.getKey()));\n+\n+        report = logic.read(report.getKey());\n+        assertTrue(report.getExecutions().isEmpty());\n+\n+        ReportJobDelegate delegate = new DefaultReportJobDelegate(reportDAO, reportExecDAO, entityFactory);\n+        delegate.execute(report.getKey(), \"test\");\n+\n+        report = logic.read(report.getKey());\n+        assertFalse(report.getExecutions().isEmpty());\n+\n+        String execKey = report.getExecutions().get(0).getKey();\n+\n+        checkExport(execKey, ReportExecExportFormat.XML);\n+        checkExport(execKey, ReportExecExportFormat.HTML);\n+        checkExport(execKey, ReportExecExportFormat.PDF);\n+        checkExport(execKey, ReportExecExportFormat.RTF);\n+        checkExport(execKey, ReportExecExportFormat.CSV);\n+    }\n+}"},{"sha":"05ad8941d2458e9a7b6f9dadc57a97b76c24af36","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/TestInitializer.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTestInitializer.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.persistence.api.content.ContentLoader;\n+import org.apache.syncope.core.persistence.jpa.StartupDomainLoader;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.transaction.support.TransactionSynchronizationManager;\n+\n+public class TestInitializer implements InitializingBean {\n+\n+    private final StartupDomainLoader domainLoader;\n+\n+    private final DomainHolder domainHolder;\n+\n+    private final ContentLoader contentLoader;\n+\n+    private final ConfigurableApplicationContext ctx;\n+\n+    public TestInitializer(\n+            final StartupDomainLoader domainLoader,\n+            final DomainHolder domainHolder,\n+            final ContentLoader contentLoader,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        this.domainLoader = domainLoader;\n+        this.domainHolder = domainHolder;\n+        this.contentLoader = contentLoader;\n+        this.ctx = ctx;\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        ApplicationContextProvider.setApplicationContext(ctx);\n+        ApplicationContextProvider.setBeanFactory((DefaultListableBeanFactory) ctx.getBeanFactory());\n+\n+        if (!TransactionSynchronizationManager.isSynchronizationActive()) {\n+            TransactionSynchronizationManager.initSynchronization();\n+        }\n+\n+        domainLoader.load();\n+\n+        contentLoader.load(\n+                SyncopeConstants.MASTER_DOMAIN,\n+                domainHolder.getDomains().get(SyncopeConstants.MASTER_DOMAIN));\n+    }\n+}"},{"sha":"a2834c84024a311f514c561b2945fa91ce94b1bd","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -75,7 +75,7 @@ public ReportTO read(final String key) {\n     public Response exportExecutionResult(final String executionKey, final ReportExecExportFormat fmt) {\n         ReportExecExportFormat format = Optional.ofNullable(fmt).orElse(ReportExecExportFormat.XML);\n         ReportExec reportExec = logic.getReportExec(executionKey);\n-        StreamingOutput sout = (os) -> ReportLogic.exportExecutionResult(os, reportExec, format);\n+        StreamingOutput sout = os -> logic.exportExecutionResult(os, reportExec, format);\n \n         return Response.ok(sout).\n                 header(HttpHeaders.CONTENT_DISPOSITION,"},{"sha":"7385c405d51dae8f70cfbdbff875c9dbc41e4b83","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -174,7 +174,8 @@ public void execute(final String reportKey, final String executor) throws JobExe\n                         status.set(\"Invoking reportlet \" + report.getReportlets().get(i).getKey());\n                         reportlet.get().extract(handler, status);\n                     } catch (Throwable t) {\n-                        LOG.error(\"While executing reportlet {} for report {}\", reportlet, reportKey, t);\n+                        LOG.error(\"While executing reportlet {} for report {}\",\n+                                report.getReportlets().get(i).getKey(), reportKey, t);\n \n                         execution.setStatus(ReportExecStatus.FAILURE);\n "},{"sha":"496772d5f69fe79bf8820213a4820dde803e7ba9","filename":"docker/core/src/main/resources/log4j2.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -86,9 +86,6 @@ under the License.\n     <asyncLogger name=\"liquibase\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n     </asyncLogger>\n-    <asyncLogger name=\"org.apache.cocoon\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"console\"/>\n-    </asyncLogger>\n     <asyncLogger name=\"org.apache.fop\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n     </asyncLogger>"},{"sha":"77f1ab79483b498dc56186d72cdc2eac1356a72b","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -132,9 +132,6 @@ under the License.\n     <asyncLogger name=\"liquibase\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n-    <asyncLogger name=\"org.apache.cocoon\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n     <asyncLogger name=\"org.apache.fop\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>"},{"sha":"51736c4dcdc858a4b3fca35d005c1d0a57b7cdb1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportTemplateITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportTemplateITCase.java?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -161,9 +161,7 @@ public void safeTemplate() throws IOException {\n         response = REPORT_SERVICE.exportExecutionResult(execKey, ReportExecExportFormat.HTML);\n         String result = IOUtils.toString((InputStream) response.getEntity(), StandardCharsets.UTF_8);\n         assertNotNull(result);\n-        assertTrue(result.startsWith(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n-                + \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \"\n-                + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"));\n+        assertTrue(result.startsWith(\"<html\"));\n \n         String malicious = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n                 + \"<!DOCTYPE xsl:stylesheet \""},{"sha":"a40b0f00679391e7e541dc17492c3035277dc2b1","filename":"pom.xml","status":"modified","additions":9,"deletions":26,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/26c99ad4d6509a9c8b29df5500bcd9961d4187cd/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=26c99ad4d6509a9c8b29df5500bcd9961d4187cd","patch":"@@ -115,7 +115,7 @@ under the License.\n       <email>ilgrosso@apache.org</email>\n       <name>Francesco Chicchiriccò</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>ASF member</role>\n         <role>PMC chair</role>\n@@ -126,7 +126,7 @@ under the License.\n       <id>fmartelli</id>\n       <name>Fabio Martelli</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>PMC member</role>\n       </roles>\n@@ -136,7 +136,7 @@ under the License.\n       <id>mdisabatino</id>\n       <name>Marco Di Sabatino Di Diodoro</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>PMC member</role>\n       </roles>\n@@ -146,7 +146,7 @@ under the License.\n       <id>massi</id>\n       <name>Massimiliano Perrone</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>PMC member</role>\n       </roles>\n@@ -271,7 +271,7 @@ under the License.\n       <id>andreapatricelli</id>\n       <name>Andrea Patricelli</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>PMC member</role>\n       </roles>\n@@ -292,8 +292,6 @@ under the License.\n     <developer>\n       <id>matteodc</id>\n       <name>Matteo Di Carlo</name>\n-      <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>committer</role>\n       </roles>\n@@ -304,7 +302,7 @@ under the License.\n       <id>skylark17</id>\n       <name>Matteo Alessandroni</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>PMC member</role>\n       </roles>\n@@ -315,7 +313,7 @@ under the License.\n       <id>loredicola</id>\n       <name>Lorenzo Di Cola</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>committer</role>\n       </roles>\n@@ -325,8 +323,6 @@ under the License.\n     <developer>\n       <id>dimaayash</id>\n       <name>Dima Ayash</name>\n-      <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>committer</role>\n       </roles>\n@@ -336,7 +332,7 @@ under the License.\n       <id>mmoayyed</id>\n       <name>Misagh Moayyed</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>committer</role>\n       </roles>\n@@ -346,7 +342,7 @@ under the License.\n       <id>sgarofalo</id>\n       <name>Samuel Garofalo</name>\n       <organization>Tirasa</organization>\n-      <organizationUrl>http://www.tirasa.net/</organizationUrl>\n+      <organizationUrl>https://www.tirasa.net/</organizationUrl>\n       <roles>\n         <role>committer</role>\n       </roles>\n@@ -430,8 +426,6 @@ under the License.\n \n     <jasypt.version>1.9.3</jasypt.version>\n \n-    <cocoon.version>3.0.0-alpha-3</cocoon.version>\n-\n     <groovy.version>4.0.4</groovy.version>\n \n     <flowable.version>6.7.2</flowable.version>\n@@ -1174,17 +1168,6 @@ under the License.\n         <version>${jasypt.version}</version>\n       </dependency>\n \n-      <dependency>\n-        <groupId>org.apache.cocoon.sax</groupId>\n-        <artifactId>cocoon-sax</artifactId>\n-        <version>${cocoon.version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>org.apache.cocoon.optional</groupId>\n-        <artifactId>cocoon-optional</artifactId>\n-        <version>${cocoon.version}</version>\n-      </dependency>\n-\n       <dependency>\n         <groupId>org.apache.xmlgraphics</groupId>\n         <artifactId>fop</artifactId>"}]}