{"sha":"74a626cf4b860b947c21e88d9d0983b79e34d126","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc0YTYyNmNmNGI4NjBiOTQ3YzIxZTg4ZDlkMDk4M2I3OWUzNGQxMjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-07-17T06:30:29Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-07-17T06:30:29Z"},"message":"[SYNCOPE-1615] Loggers actuator for all components (#278)","tree":{"sha":"4804d06cfb824e9de81019ecd9eb4611f5798f15","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4804d06cfb824e9de81019ecd9eb4611f5798f15"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/74a626cf4b860b947c21e88d9d0983b79e34d126","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8nkFCRBK7hj4Ov3rIwAACAMIAIn2Tvu5akkwhKcKwe3lJqQy\nxmQlBhOstucwTqZC2qGIpO3oKpHOZclVhcpw2DDihKfPjQf76O+r3lb/C8yy3hlQ\n2OnC6vG0me1vdJ3+YiEQiVIkz71S0f9jO3/fKi/7Ud/MRNoWlX+kY53LrRRgKGDz\npuAwxO8k2k0xJLk+P7jiyMc3y9P9IlGLfFbWsM8q01HnogrONHfxPjhHJ9ujcf9F\n38p30/h7fw7IPlcIFh3x8XRK0tk+5W1iaDNNRphAY6iPZXpkGTsID8QmZNINoFjx\nIdZXMvVM5yurkGyOsGKV7a0pcmDoe3F3y+CWgfWCpjqZaAGTqvttVs6UK1+c06c=\n=l3HY\n-----END PGP SIGNATURE-----\n","payload":"tree 4804d06cfb824e9de81019ecd9eb4611f5798f15\nparent 2a4b485a935b097a07e9b925bcaca5afa3150b51\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1626503429 +0200\ncommitter GitHub <noreply@github.com> 1626503429 +0200\n\n[SYNCOPE-1615] Loggers actuator for all components (#278)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/74a626cf4b860b947c21e88d9d0983b79e34d126","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/74a626cf4b860b947c21e88d9d0983b79e34d126","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/74a626cf4b860b947c21e88d9d0983b79e34d126/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"2a4b485a935b097a07e9b925bcaca5afa3150b51","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a4b485a935b097a07e9b925bcaca5afa3150b51","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a4b485a935b097a07e9b925bcaca5afa3150b51"}],"stats":{"total":4315,"additions":1549,"deletions":2766},"files":[{"sha":"00f2f44458831c83a357bde9895fe3aa061be16d","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/panels/ConnObjectListViewPanel_fr_CA.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel_fr_CA.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConnObjectListViewPanel_fr_CA.properties"},{"sha":"f5b8e4a17a8572a8ffe09633bd79897838dd98c1","filename":"client/idm/console/src/main/resources/org/apache/syncope/client/console/panels/ConnObjects_fr_CA.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjects_fr_CA.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConnObjects_fr_CA.properties"},{"sha":"47fae0164b0903d8502b8498e6af7599d6ff48a6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryDetails.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDetails.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.JsonDiffPanel;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.UserTO;"},{"sha":"a12ee8fb64bce12d8f6167b9a895605a37b6a31c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -27,14 +27,14 @@\n import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n import org.apache.syncope.client.console.panels.DirectoryPanel;\n import org.apache.syncope.client.console.panels.MultilevelPanel;\n-import org.apache.syncope.client.console.rest.LoggerRestClient;\n+import org.apache.syncope.client.console.rest.AuditRestClient;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -49,7 +49,7 @@\n import org.apache.wicket.model.StringResourceModel;\n \n public abstract class AuditHistoryDirectoryPanel<T extends Serializable> extends DirectoryPanel<\n-        AuditEntry, AuditEntry, AuditHistoryDirectoryPanel<T>.AuditHistoryProvider, LoggerRestClient>\n+        AuditEntry, AuditEntry, AuditHistoryDirectoryPanel<T>.AuditHistoryProvider, AuditRestClient>\n         implements ModalPanel {\n \n     private static final long serialVersionUID = -8248734710505211261L;\n@@ -90,7 +90,7 @@ public AuditHistoryDirectoryPanel(\n         this.auditRestoreEntitlement = auditRestoreEntitlement;\n         this.pageRef = pageRef;\n \n-        this.restClient = new LoggerRestClient();\n+        this.restClient = new AuditRestClient();\n         initResultTable();\n     }\n "},{"sha":"9d86c1a944e6af7b9b76fd89943431e6bf475069","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.log.EventCategory;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditLoggerName;"},{"sha":"83ff337935fb6dcc83f0fda6b14a393ab1e7b11a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/events/EventSelectionPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventSelectionPanel.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,7 +24,7 @@\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormChoiceComponentUpdatingBehavior;\n-import org.apache.syncope.common.lib.log.EventCategory;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.wicket.ajax.AjaxRequestTarget;"},{"sha":"acca0ac189474ede4ce125ededa99c56e61b2603","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.client.console.panels.search.UserSearchPanel;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.ImplementationRestClient;\n-import org.apache.syncope.client.console.rest.LoggerRestClient;\n+import org.apache.syncope.client.console.rest.AuditRestClient;\n import org.apache.syncope.client.console.rest.NotificationRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n@@ -165,7 +165,7 @@ public Events(final NotificationWrapper modelObject) {\n \n             add(new EventCategoryPanel(\n                     \"eventSelection\",\n-                    LoggerRestClient.listEvents(),\n+                    AuditRestClient.listEvents(),\n                     new PropertyModel<List<String>>(modelObject.getInnerObject(), \"events\")) {\n \n                 private static final long serialVersionUID = 6429053774964787735L;"},{"sha":"0184357e9986438d28e79828c2eba813cee1c16f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Audit.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAudit.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -25,8 +25,8 @@\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.events.EventCategoryPanel;\n import org.apache.syncope.client.console.events.SelectedEventsPanel;\n-import org.apache.syncope.client.console.rest.LoggerRestClient;\n-import org.apache.syncope.common.lib.log.EventCategory;\n+import org.apache.syncope.client.console.rest.AuditRestClient;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -45,7 +45,7 @@ public Audit(final PageParameters parameters) {\n \n         body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n \n-        List<String> events = LoggerRestClient.listAudits().stream().\n+        List<String> events = AuditRestClient.list().stream().\n                 map(audit -> AuditLoggerName.buildEvent(\n                 audit.getType(),\n                 audit.getCategory(),\n@@ -62,7 +62,7 @@ public Audit(final PageParameters parameters) {\n \n         form.add(new EventCategoryPanel(\n                 \"auditPanel\",\n-                LoggerRestClient.listEvents(),\n+                AuditRestClient.listEvents(),\n                 new ListModel<>(events)) {\n \n             private static final long serialVersionUID = 6113164334533550277L;\n@@ -74,7 +74,7 @@ protected List<String> getListAuthRoles() {\n \n             @Override\n             protected List<String> getChangeAuthRoles() {\n-                return List.of(IdRepoEntitlement.AUDIT_ENABLE, IdRepoEntitlement.AUDIT_DISABLE);\n+                return List.of(IdRepoEntitlement.AUDIT_UPDATE);\n             }\n \n             @Override\n@@ -95,7 +95,7 @@ public void onEventAction(final IEvent<?> event) {\n                                 ? null : eventCategory.getKey().getEvents().iterator().next(),\n                                 eventCategory.getValue());\n \n-                        LoggerRestClient.disableAudit(auditLoggerName);\n+                        AuditRestClient.disableAudit(auditLoggerName);\n                     });\n \n                     eventSelectionChanged.getToBeAdded().forEach(toBeAdded -> {\n@@ -110,7 +110,7 @@ public void onEventAction(final IEvent<?> event) {\n                                 ? null : eventCategory.getKey().getEvents().iterator().next(),\n                                 eventCategory.getValue());\n \n-                        LoggerRestClient.enableAudit(auditLoggerName);\n+                        AuditRestClient.enableAudit(auditLoggerName);\n                     });\n                 }\n             }"},{"sha":"0dfdd981f2332807b0acc144978d2416080d65b6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -290,7 +290,7 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n         liContainer = new WebMarkupContainer(getLIContainerId(\"logs\"));\n         confULContainer.add(liContainer);\n         link = BookmarkablePageLinkBuilder.build(\"logs\", Logs.class);\n-        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.LOG_LIST);\n+        MetaDataRoleAuthorizationStrategy.authorize(link, WebPage.RENDER, IdRepoEntitlement.LOGGER_LIST);\n         liContainer.add(link);\n \n         liContainer = new WebMarkupContainer(getLIContainerId(\"types\"));"},{"sha":"5f59e9807a0d833a77181fc29a5262cb247248a8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/LogViewer.java","status":"removed","additions":0,"deletions":137,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,137 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.pages;\n-\n-import java.time.Duration;\n-import java.time.temporal.ChronoUnit;\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.commons.collections4.list.SetUniqueList;\n-import org.apache.syncope.client.console.panels.LogStatementPanel;\n-import org.apache.syncope.client.console.rest.LoggerRestClient;\n-import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.AjaxSelfUpdatingTimerBehavior;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.WebPage;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.util.ListModel;\n-\n-public class LogViewer extends WebPage {\n-\n-    private static final int MAX_STATEMENTS_PER_APPENDER = 50;\n-\n-    private static final long serialVersionUID = -7578329899052708105L;\n-\n-    public LogViewer() {\n-        WebMarkupContainer viewer = new WebMarkupContainer(\"viewer\");\n-        viewer.setOutputMarkupId(true);\n-        add(viewer);\n-\n-        AjaxDropDownChoicePanel<String> appenders = new AjaxDropDownChoicePanel<>(\n-                \"appenders\", \"Appender\", new Model<>(), false);\n-        MetaDataRoleAuthorizationStrategy.authorize(appenders, ENABLE, IdRepoEntitlement.LOG_READ);\n-        appenders.setChoices(LoggerRestClient.listMemoryAppenders());\n-        viewer.add(appenders);\n-\n-        WebMarkupContainer stContainer = new WebMarkupContainer(\"stContainer\");\n-        stContainer.setOutputMarkupId(true);\n-        viewer.add(stContainer);\n-\n-        Model<Long> lastTimeInMillis = Model.of(0L);\n-        IModel<List<LogStatement>> statementViewModel = new ListModel<>(new ArrayList<>());\n-        ListView<LogStatement> statementView = new ListView<LogStatement>(\"statements\", statementViewModel) {\n-\n-            private static final long serialVersionUID = -9180479401817023838L;\n-\n-            @Override\n-            protected void populateItem(final ListItem<LogStatement> item) {\n-                LogStatementPanel panel = new LogStatementPanel(\"statement\", item.getModelObject());\n-                panel.setOutputMarkupId(true);\n-                item.add(panel);\n-            }\n-        };\n-        statementView.setOutputMarkupId(true);\n-        stContainer.add(statementView);\n-        stContainer.add(new AjaxSelfUpdatingTimerBehavior(Duration.of(10, ChronoUnit.SECONDS)) {\n-\n-            private static final long serialVersionUID = 7298597675929755960L;\n-\n-            @Override\n-            protected void onPostProcessTarget(final AjaxRequestTarget target) {\n-                // save scroll position\n-                target.prependJavaScript(\n-                        String.format(\"window.scrollTop = $('#%s').scrollTop();\", stContainer.getMarkupId()));\n-\n-                List<LogStatement> recentLogStatements = appenders.getModelObject() == null\n-                        ? new ArrayList<>()\n-                        : LoggerRestClient.getLastLogStatements(appenders.getModelObject(),\n-                    lastTimeInMillis.getObject());\n-                if (!recentLogStatements.isEmpty()) {\n-                    lastTimeInMillis.setObject(recentLogStatements.get(recentLogStatements.size() - 1).getTimeMillis());\n-\n-                    int currentSize = statementView.getModelObject().size();\n-                    int recentSize = recentLogStatements.size();\n-\n-                    List<LogStatement> newModelObject = SetUniqueList.<LogStatement>setUniqueList(\n-                            new ArrayList<>(MAX_STATEMENTS_PER_APPENDER));\n-                    if (currentSize <= MAX_STATEMENTS_PER_APPENDER - recentSize) {\n-                        newModelObject.addAll(statementView.getModelObject());\n-                    } else {\n-                        newModelObject.addAll(statementView.getModelObject().\n-                                subList(currentSize - (MAX_STATEMENTS_PER_APPENDER - recentSize), currentSize));\n-                    }\n-                    newModelObject.addAll(recentLogStatements);\n-\n-                    statementViewModel.setObject(newModelObject);\n-                    target.add(stContainer);\n-\n-                }\n-\n-                // restore scroll position - might not work perfectly if items were removed from the top\n-                target.appendJavaScript(\n-                        String.format(\"$('#%s').scrollTop(window.scrollTop);\", stContainer.getMarkupId()));\n-            }\n-        });\n-\n-        appenders.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                List<LogStatement> lastStatements = appenders.getModelObject() == null\n-                        ? new ArrayList<>()\n-                        : LoggerRestClient.getLastLogStatements(appenders.getModelObject(), 0);\n-                statementViewModel.setObject(lastStatements);\n-                target.add(stContainer);\n-\n-                lastTimeInMillis.setObject(0L);\n-            }\n-        });\n-    }\n-}"},{"sha":"7704f006ad2c8a59930287ceb798c1ada27ca4ca","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/pages/Logs.java","status":"modified","additions":93,"deletions":7,"changes":100,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogs.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -20,21 +20,43 @@\n \n import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n-import org.apache.syncope.client.console.panels.ConsoleLogPanel;\n-import org.apache.syncope.client.console.panels.CoreLogPanel;\n+import org.apache.syncope.client.console.panels.LogsPanel;\n+import org.apache.syncope.client.console.rest.LoggerConf;\n+import org.apache.syncope.client.console.rest.LoggerConfOp;\n+import org.apache.syncope.client.console.rest.LoggerConfRestClient;\n+import org.apache.syncope.common.keymaster.client.api.DomainOps;\n+import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.springframework.boot.logging.LogLevel;\n+import org.springframework.boot.logging.LoggerConfiguration;\n+import org.springframework.boot.logging.LoggingSystem;\n \n public class Logs extends BasePage {\n \n     private static final long serialVersionUID = -1100228004207271271L;\n \n+    @SpringBean\n+    private ServiceOps serviceOps;\n+\n+    @SpringBean\n+    private DomainOps domainOps;\n+\n+    @SpringBean\n+    private LoggingSystem loggingSystem;\n+\n     public Logs(final PageParameters parameters) {\n         super(parameters);\n \n@@ -46,29 +68,93 @@ public Logs(final PageParameters parameters) {\n     }\n \n     private List<ITab> buildTabList() {\n+        List<ITab> tabs = new ArrayList<>();\n \n-        final List<ITab> tabs = new ArrayList<>(2);\n+        List<Domain> domains = domainOps.list();\n \n-        tabs.add(new AbstractTab(new Model<>(\"Core\")) {\n+        List<NetworkService> coreInstances = serviceOps.list(NetworkService.Type.CORE);\n+        tabs.add(new AbstractTab(Model.of(NetworkService.Type.CORE.name())) {\n \n             private static final long serialVersionUID = -6815067322125799251L;\n \n             @Override\n             public Panel getPanel(final String panelId) {\n-                return new CoreLogPanel(panelId, getPageReference());\n+                return new LogsPanel(panelId, new LoggerConfRestClient(coreInstances, domains), getPageReference());\n             }\n         });\n \n-        tabs.add(new AbstractTab(new Model<>(\"Console\")) {\n+        tabs.add(new AbstractTab(Model.of(NetworkService.Type.CONSOLE.name())) {\n \n             private static final long serialVersionUID = -6815067322125799251L;\n \n             @Override\n             public Panel getPanel(final String panelId) {\n-                return new ConsoleLogPanel(panelId, getPageReference());\n+                return new LogsPanel(panelId, new LoggerConfOp() {\n+\n+                    private static final long serialVersionUID = 24740659553491L;\n+\n+                    @Override\n+                    public List<LoggerConf> list() {\n+                        Collection<LoggerConfiguration> configurations = loggingSystem.getLoggerConfigurations();\n+                        if (configurations == null) {\n+                            return List.of();\n+                        }\n+\n+                        return configurations.stream().map(conf -> {\n+                            LoggerConf loggerConf = new LoggerConf();\n+                            loggerConf.setKey(conf.getName());\n+                            loggerConf.setLevel(conf.getEffectiveLevel());\n+                            return loggerConf;\n+                        }).sorted(Comparator.comparing(LoggerConf::getKey)).collect(Collectors.toList());\n+                    }\n+\n+                    @Override\n+                    public void setLevel(final String key, final LogLevel level) {\n+                        loggingSystem.setLogLevel(key, level);\n+                    }\n+                }, getPageReference());\n             }\n         });\n \n+        List<NetworkService> euInstances = serviceOps.list(NetworkService.Type.ENDUSER);\n+        if (!euInstances.isEmpty()) {\n+            tabs.add(new AbstractTab(Model.of(NetworkService.Type.ENDUSER.name())) {\n+\n+                private static final long serialVersionUID = -6815067322125799251L;\n+\n+                @Override\n+                public Panel getPanel(final String panelId) {\n+                    return new LogsPanel(panelId, new LoggerConfRestClient(euInstances, domains), getPageReference());\n+                }\n+            });\n+        }\n+\n+        List<NetworkService> waInstances = serviceOps.list(NetworkService.Type.WA);\n+        if (!waInstances.isEmpty()) {\n+            tabs.add(new AbstractTab(Model.of(NetworkService.Type.WA.name())) {\n+\n+                private static final long serialVersionUID = -6815067322125799251L;\n+\n+                @Override\n+                public Panel getPanel(final String panelId) {\n+                    return new LogsPanel(panelId, new LoggerConfRestClient(waInstances, domains), getPageReference());\n+                }\n+            });\n+        }\n+\n+        List<NetworkService> sraInstances = serviceOps.list(NetworkService.Type.SRA);\n+        if (!sraInstances.isEmpty()) {\n+            tabs.add(new AbstractTab(Model.of(NetworkService.Type.SRA.name())) {\n+\n+                private static final long serialVersionUID = -6815067322125799251L;\n+\n+                @Override\n+                public Panel getPanel(final String panelId) {\n+                    return new LogsPanel(panelId, new LoggerConfRestClient(sraInstances, domains), getPageReference());\n+                }\n+            });\n+        }\n+\n         return tabs;\n     }\n }"},{"sha":"1a1ac60671530825007d72932c9a3c821bc9945b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AbstractLogsPanel.java","status":"removed","additions":0,"deletions":112,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractLogsPanel.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,112 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import java.io.Serializable;\n-import java.util.List;\n-import org.apache.syncope.client.console.SyncopeConsoleSession;\n-import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.console.pages.BasePage;\n-import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.wicket.Component;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.util.ListModel;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public abstract class AbstractLogsPanel<T extends Serializable> extends Panel {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(AbstractLogsPanel.class);\n-\n-    private static final long serialVersionUID = -6313532280206208227L;\n-\n-    protected WebMarkupContainer loggerContainer;\n-\n-    public AbstractLogsPanel(\n-            final String id,\n-            final PageReference pageRef,\n-            final List<LoggerTO> loggerTOs) {\n-\n-        super(id);\n-\n-        loggerContainer = new WebMarkupContainer(\"loggerContainer\");\n-        loggerContainer.setOutputMarkupId(true);\n-        add(loggerContainer);\n-\n-        ListViewPanel.Builder<LoggerTO> builder = new ListViewPanel.Builder<LoggerTO>(LoggerTO.class, pageRef) {\n-\n-            private static final long serialVersionUID = 6957788356709885298L;\n-\n-            @Override\n-            protected Component getValueComponent(final String key, final LoggerTO loggerTO) {\n-                if (\"level\".equalsIgnoreCase(key)) {\n-                    AjaxDropDownChoicePanel<LoggerLevel> loggerTOs = new AjaxDropDownChoicePanel<>(\n-                            \"field\", getString(\"level\"), Model.of(loggerTO.getLevel()), false);\n-                    MetaDataRoleAuthorizationStrategy.authorize(loggerTOs, ENABLE, IdRepoEntitlement.LOG_SET_LEVEL);\n-\n-                    loggerTOs.hideLabel();\n-                    loggerTOs.setChoices(List.of(LoggerLevel.values()));\n-                    loggerTOs.setNullValid(false);\n-                    loggerTOs.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-                        private static final long serialVersionUID = -1107858522700306810L;\n-\n-                        @Override\n-                        protected void onUpdate(final AjaxRequestTarget target) {\n-                            try {\n-                                loggerTO.setLevel(loggerTOs.getModelObject());\n-                                update(loggerTO);\n-                                SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n-                                target.add(loggerTOs);\n-                            } catch (SyncopeClientException e) {\n-                                LOG.error(\"Error updating the logger level\", e);\n-                                SyncopeConsoleSession.get().onException(e);\n-                            }\n-                            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n-                        }\n-                    });\n-                    return loggerTOs;\n-                } else {\n-                    return super.getValueComponent(key, loggerTO);\n-                }\n-            }\n-        };\n-\n-        builder.setItems(loggerTOs).\n-                setModel(new ListModel<>(loggerTOs)).\n-                includes(Constants.KEY_FIELD_NAME, \"level\").\n-                withChecks(ListViewPanel.CheckAvailability.NONE).\n-                setCaptionVisible(false).\n-                setReuseItem(false);\n-\n-        loggerContainer.add(builder.build(\"logger\"));\n-    }\n-\n-    protected abstract void update(LoggerTO loggerTO);\n-}"},{"sha":"b0f7f6801c6cde5fe12923e261492692e5c44263","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ConsoleLogPanel.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,78 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.List;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.config.LoggerConfig;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.wicket.PageReference;\n-\n-public class ConsoleLogPanel extends AbstractLogsPanel<LoggerTO> {\n-\n-    private static final long serialVersionUID = -9165749229623482717L;\n-\n-    public ConsoleLogPanel(final String id, final PageReference pageReference) {\n-        super(id, pageReference, ConsoleLoggerController.getLoggers());\n-    }\n-\n-    @Override\n-    protected void update(final LoggerTO loggerTO) {\n-        ConsoleLoggerController.setLogLevel(loggerTO.getKey(), loggerTO.getLevel());\n-    }\n-\n-    private static class ConsoleLoggerController implements Serializable {\n-\n-        private static final long serialVersionUID = -1550459341476431714L;\n-\n-        public static List<LoggerTO> getLoggers() {\n-            LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-\n-            List<LoggerTO> result = new ArrayList<>();\n-            ctx.getConfiguration().getLoggers().values().forEach(logger -> {\n-                String loggerName = LogManager.ROOT_LOGGER_NAME.equals(logger.getName())\n-                        ? SyncopeConstants.ROOT_LOGGER : logger.getName();\n-                if (logger.getLevel() != null) {\n-                    LoggerTO loggerTO = new LoggerTO();\n-                    loggerTO.setKey(loggerName);\n-                    loggerTO.setLevel(LoggerLevel.fromLevel(logger.getLevel()));\n-                    result.add(loggerTO);\n-                }\n-            });\n-            result.sort(Comparator.comparing(LoggerTO::getKey));\n-\n-            return result;\n-        }\n-\n-        public static void setLogLevel(final String name, final LoggerLevel level) {\n-            LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-            LoggerConfig logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n-                    ? ctx.getConfiguration().getLoggerConfig(LogManager.ROOT_LOGGER_NAME)\n-                    : ctx.getConfiguration().getLoggerConfig(name);\n-            logConf.setLevel(level.getLevel());\n-            ctx.updateLoggers();\n-        }\n-    }\n-}"},{"sha":"053da7ef1030b457f0c005a5c7b7ccf3373c89b8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/CoreLogPanel.java","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,44 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import org.apache.syncope.client.console.pages.LogViewer;\n-import org.apache.syncope.client.console.rest.LoggerRestClient;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n-import org.apache.wicket.markup.html.link.PopupSettings;\n-\n-public class CoreLogPanel extends AbstractLogsPanel<LoggerTO> {\n-\n-    private static final long serialVersionUID = 3905038169553185171L;\n-\n-    public CoreLogPanel(final String id, final PageReference pageReference) {\n-        super(id, pageReference, LoggerRestClient.listLogs());\n-\n-        BookmarkablePageLink<Void> viewer = new BookmarkablePageLink<>(\"viewer\", LogViewer.class);\n-        viewer.setPopupSettings(new PopupSettings().setHeight(600).setWidth(800));\n-        loggerContainer.add(viewer);\n-    }\n-\n-    @Override\n-    protected void update(final LoggerTO loggerTO) {\n-        LoggerRestClient.setLogLevel(loggerTO);\n-    }\n-}"},{"sha":"b1ab0691f79d3fed75ea35f4894c2cbe528bd31f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/LogStatementPanel.java","status":"removed","additions":0,"deletions":92,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogStatementPanel.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,92 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import com.googlecode.wicket.jquery.core.Options;\n-import com.googlecode.wicket.jquery.ui.JQueryUIBehavior;\n-import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Alert;\n-import de.agilecoders.wicket.core.util.Attributes;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.commons.lang3.time.FastDateFormat;\n-import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.wicket.markup.ComponentTag;\n-import org.apache.wicket.markup.html.WebMarkupContainer;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.Model;\n-\n-public class LogStatementPanel extends Panel {\n-\n-    private static final long serialVersionUID = 1610867968070669922L;\n-\n-    private static final FastDateFormat FORMAT = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS\");\n-\n-    private final String labelCssClass;\n-\n-    public LogStatementPanel(final String id, final LogStatement statement) {\n-        super(id);\n-\n-        Alert.Type type;\n-        switch (statement.getLevel()) {\n-            case DEBUG:\n-                type = Alert.Type.Success;\n-                break;\n-\n-            case INFO:\n-                type = Alert.Type.Info;\n-                break;\n-\n-            case ERROR:\n-                type = Alert.Type.Danger;\n-                break;\n-\n-            case WARN:\n-                type = Alert.Type.Warning;\n-                break;\n-\n-            default:\n-                type = Alert.Type.Info;\n-        }\n-        labelCssClass = \"alert-\" + type.name().toLowerCase();\n-\n-        add(new Label(\"logger\", Model.of(statement.getLoggerName())));\n-        add(new Label(\"instant\", Model.of(FORMAT.format(statement.getTimeMillis()))));\n-        add(new Label(\"message\", Model.of(statement.getMessage())));\n-\n-        WebMarkupContainer collapse = new WebMarkupContainer(\"collapse\");\n-        collapse.setOutputMarkupId(true);\n-        collapse.setOutputMarkupPlaceholderTag(true);\n-        collapse.setVisible(StringUtils.isNotBlank(statement.getStackTrace()));\n-        collapse.add(new JQueryUIBehavior(\n-                '#' + collapse.getMarkupId(), \"accordion\", new Options(\"active\", false).set(\"collapsible\", true)));\n-        add(collapse);\n-\n-        Label stacktrace = new Label(\"stacktrace\", Model.of(statement.getStackTrace()));\n-        stacktrace.setOutputMarkupId(true);\n-        collapse.add(stacktrace);\n-    }\n-\n-    @Override\n-    protected void onComponentTag(final ComponentTag tag) {\n-        super.onComponentTag(tag);\n-\n-        checkComponentTag(tag, \"div\");\n-        Attributes.addClass(tag, labelCssClass);\n-    }\n-}"},{"sha":"40ab7472fc4d49b67560ece0b1ea7d1c979476e0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/LogsPanel.java","status":"added","additions":193,"deletions":0,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.console.rest.LoggerConf;\n+import org.apache.syncope.client.console.rest.LoggerConfOp;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.logging.LogLevel;\n+\n+public class LogsPanel extends Panel {\n+\n+    private static final long serialVersionUID = -6313532280206208227L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LogsPanel.class);\n+\n+    private final IModel<List<LoggerConf>> loggerConfs = new LoadableDetachableModel<List<LoggerConf>>() {\n+\n+        private static final long serialVersionUID = 5275935387613157437L;\n+\n+        @Override\n+        protected List<LoggerConf> load() {\n+            return loggerConfOp.list();\n+        }\n+    };\n+\n+    private final LoggerConfOp loggerConfOp;\n+\n+    private final ListViewPanel<LoggerConf> loggerConfsView;\n+\n+    public LogsPanel(final String id, final LoggerConfOp loggerConfOp, final PageReference pageRef) {\n+        super(id);\n+        this.loggerConfOp = loggerConfOp;\n+\n+        WebMarkupContainer searchBoxContainer = new WebMarkupContainer(\"searchBox\");\n+        add(searchBoxContainer.setOutputMarkupId(true));\n+\n+        Form<?> form = new Form<>(\"form\");\n+        searchBoxContainer.add(form);\n+\n+        Model<String> keywordModel = new Model<>(StringUtils.EMPTY);\n+\n+        AjaxTextFieldPanel filter = new AjaxTextFieldPanel(\"filter\", \"filter\", keywordModel, true);\n+        form.add(filter.hideLabel().setOutputMarkupId(true).setRenderBodyOnly(true));\n+\n+        AjaxButton search = new AjaxButton(\"search\") {\n+\n+            private static final long serialVersionUID = 8390605330558248736L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target) {\n+                send(LogsPanel.this, Broadcast.EXACT, new LoggerConfSearchEvent(target, keywordModel.getObject()));\n+            }\n+        };\n+        form.add(search.setOutputMarkupId(true));\n+        form.setDefaultButton(search);\n+\n+        WebMarkupContainer loggerContainer = new WebMarkupContainer(\"loggerContainer\");\n+        add(loggerContainer.setOutputMarkupId(true));\n+\n+        ListViewPanel.Builder<LoggerConf> builder = new ListViewPanel.Builder<LoggerConf>(LoggerConf.class, pageRef) {\n+\n+            private static final long serialVersionUID = 6957788356709885298L;\n+\n+            @Override\n+            protected Component getValueComponent(final String key, final LoggerConf loggerConf) {\n+                if (\"level\".equalsIgnoreCase(key)) {\n+                    AjaxDropDownChoicePanel<LogLevel> loggerLevel = new AjaxDropDownChoicePanel<>(\n+                            \"field\", getString(\"level\"), Model.of(loggerConf.getLevel()), false);\n+                    MetaDataRoleAuthorizationStrategy.authorize(loggerLevel, ENABLE, IdRepoEntitlement.LOGGER_UPDATE);\n+\n+                    loggerLevel.hideLabel();\n+                    loggerLevel.setChoices(List.of(LogLevel.values()));\n+                    loggerLevel.setNullValid(false);\n+                    loggerLevel.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                        private static final long serialVersionUID = -1107858522700306810L;\n+\n+                        @Override\n+                        protected void onUpdate(final AjaxRequestTarget target) {\n+                            try {\n+                                loggerConf.setLevel(loggerLevel.getModelObject());\n+                                loggerConfOp.setLevel(loggerConf.getKey(), loggerConf.getLevel());\n+\n+                                SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                                target.add(loggerLevel);\n+                            } catch (SyncopeClientException e) {\n+                                LOG.error(\"Error updating the logger level\", e);\n+                                SyncopeConsoleSession.get().onException(e);\n+                            }\n+                            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+                        }\n+                    });\n+                    return loggerLevel;\n+                } else {\n+                    return super.getValueComponent(key, loggerConf);\n+                }\n+            }\n+        };\n+\n+        builder.setItems(loggerConfs.getObject()).\n+                setModel(loggerConfs).\n+                includes(Constants.KEY_FIELD_NAME, \"level\").\n+                withChecks(ListViewPanel.CheckAvailability.NONE).\n+                setCaptionVisible(false).\n+                setReuseItem(false);\n+\n+        loggerConfsView = (ListViewPanel<LoggerConf>) builder.build(\"logger\");\n+        loggerContainer.add(loggerConfsView);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof LoggerConfSearchEvent) {\n+            LoggerConfSearchEvent payload = LoggerConfSearchEvent.class.cast(event.getPayload());\n+            AjaxRequestTarget target = payload.getTarget();\n+\n+            String keyword = payload.getKeyword();\n+            if (StringUtils.isBlank(keyword)) {\n+                loggerConfsView.refreshList(loggerConfs.getObject());\n+            } else {\n+                loggerConfsView.refreshList(loggerConfs.getObject().stream().\n+                        filter(l -> l.getKey().contains(keyword)).collect(Collectors.toList()));\n+            }\n+            target.add(loggerConfsView);\n+        } else {\n+            super.onEvent(event);\n+        }\n+    }\n+\n+    private static class LoggerConfSearchEvent implements Serializable {\n+\n+        private static final long serialVersionUID = -282052400565266028L;\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final String keyword;\n+\n+        LoggerConfSearchEvent(final AjaxRequestTarget target, final String keyword) {\n+            this.target = target;\n+            this.keyword = keyword;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public String getKeyword() {\n+            return keyword;\n+        }\n+    }\n+}"},{"sha":"636013b82573bc4881bf0ed1a4ae9fdab98692cd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypePanel.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -243,7 +243,7 @@ public void onEvent(final IEvent<?> event) {\n                     keyword = \"*\" + keyword;\n                 }\n                 if (!StringUtils.endsWith(keyword, \"*\")) {\n-                    keyword = keyword + \"*\";\n+                    keyword += \"*\";\n                 }\n             }\n "},{"sha":"3cf291f6d0b3ca655dc211e82d19d1db4475aac6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/AuditRestClient.java","status":"renamed","additions":30,"deletions":52,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuditRestClient.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -18,60 +18,43 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.util.ArrayList;\n-import java.util.Comparator;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n-import org.apache.syncope.common.lib.log.EventCategory;\n-import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.rest.api.LoggerWrapper;\n import org.apache.syncope.common.rest.api.beans.AuditQuery;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n+import org.apache.syncope.common.rest.api.service.AuditService;\n \n-public class LoggerRestClient extends BaseRestClient {\n+public class AuditRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 4579786978763032240L;\n \n-    public static List<String> listMemoryAppenders() {\n-        return getService(LoggerService.class).memoryAppenders().stream().\n-                map(LogAppender::getName).collect(Collectors.toList());\n-    }\n-\n-    public static List<LogStatement> getLastLogStatements(final String appender, final long lastStatementTime) {\n-        List<LogStatement> result = new ArrayList<>();\n-        getService(LoggerService.class).getLastLogStatements(appender).stream().\n-                filter(statement -> statement.getTimeMillis() > lastStatementTime).\n-                forEachOrdered(result::add);\n-\n-        return result;\n-    }\n-\n-    public static List<LoggerTO> listLogs() {\n-        List<LoggerTO> logs = getService(LoggerService.class).list(LoggerType.LOG);\n-        logs.sort(Comparator.comparing(LoggerTO::getKey));\n-\n-        return logs;\n-    }\n-\n-    public static List<AuditLoggerName> listAudits() {\n-        return LoggerWrapper.wrap(getService(LoggerService.class).list(LoggerType.AUDIT));\n+    public static List<AuditLoggerName> list() {\n+        return getService(AuditService.class).list().stream().\n+                map(a -> {\n+                    try {\n+                        return AuditLoggerName.fromAuditKey(a.getKey());\n+                    } catch (Exception e) {\n+                        LOG.error(\"Unexpected when parsing {}\", a.getKey(), e);\n+                        return null;\n+                    }\n+                }).\n+                filter(Objects::nonNull).\n+                collect(Collectors.toList());\n     }\n \n     public static Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n         Map<String, Set<AuditLoggerName>> result = new HashMap<>();\n-        listAudits().forEach(audit -> {\n+        list().forEach(audit -> {\n             if (!result.containsKey(audit.getCategory())) {\n                 result.put(audit.getCategory(), new HashSet<>());\n             }\n@@ -82,28 +65,23 @@ public static Map<String, Set<AuditLoggerName>> listAuditsByCategory() {\n         return result;\n     }\n \n-    public static void setLogLevel(final LoggerTO loggerTO) {\n-        getService(LoggerService.class).update(LoggerType.LOG, loggerTO);\n-    }\n-\n     public static void enableAudit(final AuditLoggerName auditLoggerName) {\n-        LoggerTO loggerTO = new LoggerTO();\n-        loggerTO.setKey(auditLoggerName.toLoggerName());\n-        loggerTO.setLevel(LoggerLevel.DEBUG);\n-        getService(LoggerService.class).update(LoggerType.AUDIT, loggerTO);\n-    }\n-\n-    public static void deleteLog(final String name) {\n-        getService(LoggerService.class).delete(LoggerType.LOG, name);\n+        AuditConfTO audit = new AuditConfTO();\n+        audit.setKey(auditLoggerName.toAuditKey());\n+        audit.setActive(true);\n+        getService(AuditService.class).update(audit);\n     }\n \n     public static void disableAudit(final AuditLoggerName auditLoggerName) {\n-        getService(LoggerService.class).delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n+        AuditConfTO audit = new AuditConfTO();\n+        audit.setKey(auditLoggerName.toAuditKey());\n+        audit.setActive(false);\n+        getService(AuditService.class).update(audit);\n     }\n \n     public static List<EventCategory> listEvents() {\n         try {\n-            return getService(LoggerService.class).events();\n+            return getService(AuditService.class).events();\n         } catch (Exception e) {\n             return List.of();\n         }\n@@ -130,7 +108,7 @@ public List<AuditEntry> search(\n                 orderBy(toOrderBy(sort)).\n                 build();\n \n-        return getService(LoggerService.class).search(query).getResult();\n+        return getService(AuditService.class).search(query).getResult();\n     }\n \n     public int count(\n@@ -149,6 +127,6 @@ public int count(\n                 events(events).\n                 result(result).\n                 build();\n-        return getService(LoggerService.class).search(query).getTotalCount();\n+        return getService(AuditService.class).search(query).getTotalCount();\n     }\n }","previous_filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java"},{"sha":"8600ffd9c59e14b1bc0dab9cfc51c9e63aea4909","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerConf.java","status":"renamed","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConf.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,32 +16,32 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.client.console.rest;\n \n-import org.apache.logging.log4j.Level;\n+import java.io.Serializable;\n+import org.springframework.boot.logging.LogLevel;\n \n-public enum LoggerLevel {\n+public class LoggerConf implements Serializable {\n \n-    OFF(Level.OFF),\n-    FATAL(Level.FATAL),\n-    ERROR(Level.ERROR),\n-    WARN(Level.WARN),\n-    INFO(Level.INFO),\n-    DEBUG(Level.DEBUG),\n-    TRACE(Level.TRACE),\n-    ALL(Level.ALL);\n+    private static final long serialVersionUID = 15926519538056L;\n \n-    private final Level level;\n+    private String key;\n \n-    LoggerLevel(final Level level) {\n-        this.level = level;\n+    private LogLevel level;\n+\n+    public String getKey() {\n+        return key;\n     }\n \n-    public Level getLevel() {\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public LogLevel getLevel() {\n         return level;\n     }\n \n-    public static LoggerLevel fromLevel(final Level level) {\n-        return LoggerLevel.valueOf(level.name());\n+    public void setLevel(final LogLevel level) {\n+        this.level = level;\n     }\n }","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/LoggerLevel.java"},{"sha":"dc0ce5c487be07cc7a54f668eeba56132c590375","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerConfOp.java","status":"renamed","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfOp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfOp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfOp.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,21 +16,15 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.log;\n+package org.apache.syncope.client.console.rest;\n \n-import org.apache.syncope.common.lib.BaseBean;\n+import java.io.Serializable;\n+import java.util.List;\n+import org.springframework.boot.logging.LogLevel;\n \n-public class LogAppender implements BaseBean {\n+public interface LoggerConfOp extends Serializable {\n \n-    private static final long serialVersionUID = 5975199884460548302L;\n+    List<LoggerConf> list();\n \n-    private String name;\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n+    void setLevel(String key, LogLevel level);\n }","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/log/LogAppender.java"},{"sha":"65a2b4f96e440e1cf5902bb9a050231155851339","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerConfRestClient.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerConfRestClient.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n+import org.apache.syncope.client.ui.commons.rest.RestClient;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.logging.LogLevel;\n+\n+public class LoggerConfRestClient implements RestClient, LoggerConfOp {\n+\n+    private static final long serialVersionUID = 16051907544728L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerConfRestClient.class);\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final List<NetworkService> instances;\n+\n+    private final List<String> domains;\n+\n+    public LoggerConfRestClient(final List<NetworkService> instances, final List<Domain> domains) {\n+        this.instances = instances;\n+        this.domains = Stream.concat(\n+                Stream.of(SyncopeConstants.MASTER_DOMAIN), domains.stream().map(Domain::getKey)).\n+                collect(Collectors.toList());\n+    }\n+\n+    private String getActuatorEndpoint(final NetworkService instance) {\n+        String address = instance.getAddress();\n+        if (address.contains(\"/rest\")) {\n+            address = address.replace(\"/rest\", \"\");\n+        }\n+        return address + \"actuator/loggers\";\n+    }\n+\n+    private WebClient webClient(final NetworkService instance) {\n+        return WebClient.create(\n+                getActuatorEndpoint(instance),\n+                SyncopeWebApplication.get().getAnonymousUser(),\n+                SyncopeWebApplication.get().getAnonymousKey(),\n+                null).\n+                accept(MediaType.APPLICATION_JSON_TYPE).\n+                type(MediaType.APPLICATION_JSON_TYPE);\n+    }\n+\n+    @Override\n+    public List<LoggerConf> list() {\n+        List<LoggerConf> loggerConfs = new ArrayList<>();\n+\n+        try {\n+            Response response = webClient(instances.get(0)).get();\n+            if (response.getStatus() == Response.Status.OK.getStatusCode()) {\n+                JsonNode node = MAPPER.readTree((InputStream) response.getEntity());\n+                if (node.has(\"loggers\")) {\n+                    for (Iterator<Map.Entry<String, JsonNode>> itor = node.get(\"loggers\").fields(); itor.hasNext();) {\n+                        Map.Entry<String, JsonNode> entry = itor.next();\n+\n+                        LoggerConf loggerConf = new LoggerConf();\n+                        loggerConf.setKey(entry.getKey());\n+                        if (entry.getValue().has(\"effectiveLevel\")) {\n+                            loggerConf.setLevel(LogLevel.valueOf(entry.getValue().get(\"effectiveLevel\").asText()));\n+                        } else {\n+                            loggerConf.setLevel(LogLevel.OFF);\n+                        }\n+\n+                        if (!loggerConf.getKey().startsWith(AuditLoggerName.AUDIT_PREFIX)\n+                                && domains.stream().noneMatch(domain -> loggerConf.getKey().startsWith(domain))) {\n+\n+                            loggerConfs.add(loggerConf);\n+                        }\n+                    }\n+                }\n+            } else {\n+                LOG.error(\"Unexpected response for loggers from {}: {}\",\n+                        getActuatorEndpoint(instances.get(0)), response.getStatus());\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Could not fetch loggers from {}\", getActuatorEndpoint(instances.get(0)), e);\n+        }\n+\n+        loggerConfs.sort(Comparator.comparing(LoggerConf::getKey));\n+        return loggerConfs;\n+    }\n+\n+    @Override\n+    public void setLevel(final String key, final LogLevel level) {\n+        instances.forEach(i -> webClient(i).path(key).post(\"{\\\"configuredLevel\\\": \\\"\" + level.name() + \"\\\"}\"));\n+    }\n+}"},{"sha":"c68b2e4bb5bb9b30997dcb2db81271cb2e5fb69d","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/pages/LogViewer.html","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogViewer.html?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,34 +0,0 @@\n-<!DOCTYPE html>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <head>\n-    <title>Apache Syncope - Log Viewer</title>\n-  </head>\n-  <body>\n-    <div wicket:id=\"viewer\" style=\"padding: 5px;\">\n-      <div wicket:id=\"appenders\" style=\"margin-bottom: 10px;\"></div>\n-      <div wicket:id=\"stContainer\" style=\"overflow-y: auto; overflow-x: auto; max-width: 100vw; max-height: 85vh;\">\n-        <div wicket:id=\"statements\">\n-          <div wicket:id=\"statement\"/>\n-        </div>\n-      </div>\n-    </div>\n-  </body>\n-</html>\n\\ No newline at end of file"},{"sha":"a4cd02460878ef325c24642e9bfed41e260ed14d","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConsoleLogPanel.html","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel.html?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,27 +0,0 @@\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n-  <wicket:panel>\n-    <span wicket:id=\"loggerContainer\">\n-      <div class=\"logs\">\n-        <span wicket:id=\"logger\">[logger]</span>\n-      </div>\n-    </span>\n-  </wicket:panel>\n-</html>"},{"sha":"135955cdedcf59e14ec2415186c786698519d879","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConsoleLogPanel_fr_CA.properties","status":"removed","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_fr_CA.properties?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,18 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-logger=Enregistreur de donn�es\n-level=Niveau"},{"sha":"8a8971543e42b376ed0eae7e1d8f1d789b2d1720","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConsoleLogPanel_it.properties","status":"removed","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_it.properties?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,18 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-logger=Logger\n-level=Livello"},{"sha":"936c13e610a710f43ed5281ac490686fe4b49d85","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConsoleLogPanel_ja.properties","status":"removed","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConsoleLogPanel_ja.properties?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,18 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-logger=\\u30ed\\u30b0\\u53d6\\u5f97\n-level=\\u30ec\\u30d9\\u30eb"},{"sha":"11bf815c69f39dea2f0cace33f1c2e5e58462c36","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/CoreLogPanel.properties","status":"removed","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel.properties?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,18 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-logger=Logger\n-level=Level"},{"sha":"11bf815c69f39dea2f0cace33f1c2e5e58462c36","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/CoreLogPanel_pt_BR.properties","status":"removed","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel_pt_BR.properties?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,18 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-logger=Logger\n-level=Level"},{"sha":"22348f537461e755c5958cb827322705f1bc8ae8","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/CoreLogPanel_ru.properties","status":"removed","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FCoreLogPanel_ru.properties?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,21 +0,0 @@\n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-#\n-#   http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-#\n-# logger=Логгер\n-logger=\\u041b\\u043e\\u0433\\u0433\\u0435\\u0440\n-# level=Уровень\n-level=\\u0423\\u0440\\u043e\\u0432\\u0435\\u043d\\u044c"},{"sha":"fa47713b4d5ee9f159d85bb5268fc0acb0583e6f","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/LogsPanel.html","status":"renamed","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.html?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -18,13 +18,21 @@\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n+    <div wicket:id=\"searchBox\">\n+      <form wicket:id=\"form\">\n+        <div class=\"input-group mb-3\">\n+          <span wicket:id=\"filter\">[FILTER]</span>\n+          <span class=\"input-group-btn\">\n+            <button type=\"button\" class=\"btn btn-default btn-flat\" wicket:id=\"search\">\n+              <span class=\"fas fa-search\" aria-hidden=\"true\"></span>\n+            </button>\n+          </span>\n+        </div>\n+      </form>\n+    </div>\n+\n     <span wicket:id=\"loggerContainer\">\n       <div class=\"logs\">\n-        <div class=\"logviewer-btn\">\n-          <button class=\"btn btn-success\" wicket:id=\"viewer\">\n-            <span class=\"far fa-list-alt\"></span> Log Viewer\n-          </button>\n-        </div>\n         <span wicket:id=\"logger\">[logger]</span>\n       </div>\n     </span>","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/CoreLogPanel.html"},{"sha":"38bb3c2f0b3c19e68b4187bfc80f2e708f4d5e6a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/LogsPanel.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,3 +16,4 @@\n # under the License.\n logger=Logger\n level=Level\n+newLoggerConf=Are you sure you want to create a new logger?","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConsoleLogPanel.properties"},{"sha":"ff19781ecab2751d588ca155a9d413ae75f373e6","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/LogsPanel_fr_CA.properties","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_fr_CA.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -14,5 +14,6 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-logger=Enregistreur de donn�es\n+logger=Enregistreur de donn\\u00e9es\n level=Niveau\n+newLoggerConf=Are you sure you want to create a new logger?","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/CoreLogPanel_fr_CA.properties"},{"sha":"e974729f8e989ab74c4a4a27ee108979129c2bf8","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/LogsPanel_it.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_it.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,3 +16,4 @@\n # under the License.\n logger=Logger\n level=Livello\n+newLoggerConf=Sicuro di voler creare un nuovo logger?","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/CoreLogPanel_it.properties"},{"sha":"b7035eb1d1d937f2cc1000e2da82e322ff3bcf01","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/LogsPanel_ja.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_ja.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,3 +16,4 @@\n # under the License.\n logger=\\u30ed\\u30b0\\u53d6\\u5f97\n level=\\u30ec\\u30d9\\u30eb\n+newLoggerConf=Are you sure you want to create a new logger?","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/CoreLogPanel_ja.properties"},{"sha":"38bb3c2f0b3c19e68b4187bfc80f2e708f4d5e6a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/LogsPanel_pt_BR.properties","status":"renamed","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_pt_BR.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,3 +16,4 @@\n # under the License.\n logger=Logger\n level=Level\n+newLoggerConf=Are you sure you want to create a new logger?","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConsoleLogPanel_pt_BR.properties"},{"sha":"5ad96be0353f0fa36c9aac3f3db6be325338be13","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/LogsPanel_ru.properties","status":"renamed","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLogsPanel_ru.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -15,7 +15,8 @@\n # specific language governing permissions and limitations\n # under the License.\n #\n-# logger=Логгер\n+# logger=\\u00d0\\u009b\\u00d0\\u00be\\u00d0\\u00b3\\u00d0\\u00b3\\u00d0\\u00b5\\u00d1\\u0080\n logger=\\u041b\\u043e\\u0433\\u0433\\u0435\\u0440\n-# level=Уровень\n+# level=\\u00d0\\u00a3\\u00d1\\u0080\\u00d0\\u00be\\u00d0\\u00b2\\u00d0\\u00b5\\u00d0\\u00bd\\u00d1\\u008c\n level=\\u0423\\u0440\\u043e\\u0432\\u0435\\u043d\\u044c\n+newLoggerConf=Are you sure you want to create a new logger?","previous_filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/ConsoleLogPanel_ru.properties"},{"sha":"a81ba34530dc4ff39b6dab53d5177ed053a59d5b","filename":"common/idrepo/lib/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fpom.xml?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -79,10 +79,6 @@ under the License.\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.logging.log4j</groupId>\n-      <artifactId>log4j-api</artifactId>\n-    </dependency>\n     \n     <dependency>\n       <groupId>org.junit.jupiter</groupId>"},{"sha":"4fe9aa276e37f053b825533584f97534ac51dda4","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/audit/AuditEntry.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FAuditEntry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FAuditEntry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FAuditEntry.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.log;\n+package org.apache.syncope.common.lib.audit;\n \n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/log/AuditEntry.java"},{"sha":"86820196755750bd6470d6491d4e39630e2cdc07","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/audit/EventCategory.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FEventCategory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FEventCategory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Faudit%2FEventCategory.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.log;\n+package org.apache.syncope.common.lib.audit;\n \n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/log/EventCategory.java"},{"sha":"64ba4cd219213a07fd3761569134478af536d10c","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/log/LogStatement.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLogStatement.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,107 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.log;\n-\n-import org.apache.syncope.common.lib.BaseBean;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-\n-public class LogStatement implements BaseBean {\n-\n-    private static final long serialVersionUID = -2931205859104653385L;\n-\n-    private LoggerLevel level;\n-\n-    private String loggerName;\n-\n-    private String message;\n-\n-    private String stackTrace;\n-\n-    private long timeMillis;\n-\n-    private long threadId;\n-\n-    private String threadName;\n-\n-    private int threadPriority;\n-\n-    public LoggerLevel getLevel() {\n-        return level;\n-    }\n-\n-    public void setLevel(final LoggerLevel level) {\n-        this.level = level;\n-    }\n-\n-    public String getLoggerName() {\n-        return loggerName;\n-    }\n-\n-    public void setLoggerName(final String loggerName) {\n-        this.loggerName = loggerName;\n-    }\n-\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    public void setMessage(final String message) {\n-        this.message = message;\n-    }\n-\n-    public String getStackTrace() {\n-        return stackTrace;\n-    }\n-\n-    public void setStackTrace(final String stackTrace) {\n-        this.stackTrace = stackTrace;\n-    }\n-\n-    public long getTimeMillis() {\n-        return timeMillis;\n-    }\n-\n-    public void setTimeMillis(final long timeMillis) {\n-        this.timeMillis = timeMillis;\n-    }\n-\n-    public long getThreadId() {\n-        return threadId;\n-    }\n-\n-    public void setThreadId(final long threadId) {\n-        this.threadId = threadId;\n-    }\n-\n-    public String getThreadName() {\n-        return threadName;\n-    }\n-\n-    public void setThreadName(final String threadName) {\n-        this.threadName = threadName;\n-    }\n-\n-    public int getThreadPriority() {\n-        return threadPriority;\n-    }\n-\n-    public void setThreadPriority(final int threadPriority) {\n-        this.threadPriority = threadPriority;\n-    }\n-}"},{"sha":"5646fe017d0497bbf4793e807b995a93f923f813","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/log/LoggerTO.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Flog%2FLoggerTO.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,77 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.log;\n-\n-import javax.ws.rs.PathParam;\n-import org.apache.commons.lang3.builder.EqualsBuilder;\n-import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.BaseBean;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-\n-public class LoggerTO implements BaseBean {\n-\n-    private static final long serialVersionUID = -7794833835668648505L;\n-\n-    private String key;\n-\n-    private LoggerLevel level;\n-\n-    public LoggerLevel getLevel() {\n-        return level;\n-    }\n-\n-    public void setLevel(final LoggerLevel level) {\n-        this.level = level;\n-    }\n-\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @PathParam(\"key\")\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return new HashCodeBuilder().\n-                append(key).\n-                append(level).\n-                build();\n-    }\n-\n-    @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        final LoggerTO other = (LoggerTO) obj;\n-        return new EqualsBuilder().\n-                append(key, other.key).\n-                append(level, other.level).\n-                build();\n-    }\n-}"},{"sha":"806446210985c2a03929db39ad240b48981fa9c8","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/AuditConfTO.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditConfTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditConfTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAuditConfTO.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.ws.rs.PathParam;\n+\n+public class AuditConfTO implements EntityTO {\n+\n+    private static final long serialVersionUID = 7077562682788L;\n+\n+    private String key;\n+\n+    private boolean active;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public boolean isActive() {\n+        return active;\n+    }\n+\n+    public void setActive(final boolean active) {\n+        this.active = active;\n+    }\n+}"},{"sha":"21e354ff22863c966118ca3c82daade57ae36644","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/AuditLoggerName.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAuditLoggerName.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -28,16 +28,18 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.BaseBean;\n-import org.apache.syncope.common.lib.log.EventCategory;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n \n public class AuditLoggerName implements BaseBean {\n \n     private static final long serialVersionUID = -647989486671786839L;\n \n+    public static final String AUDIT_PREFIX = \"syncope.audit\";\n+\n     public static String getAuditLoggerName(final String domain) {\n-        return LoggerType.AUDIT.getPrefix() + '.' + domain;\n+        return AUDIT_PREFIX + '.' + domain;\n     }\n \n     public static String getAuditEventLoggerName(final String domain, final String loggerName) {\n@@ -91,8 +93,8 @@ public String getSubcategory() {\n         return subcategory;\n     }\n \n-    public String toLoggerName() {\n-        return new StringBuilder().append(LoggerType.AUDIT.getPrefix()).append('.').\n+    public String toAuditKey() {\n+        return new StringBuilder().append(AUDIT_PREFIX).append('.').\n                 append(buildEvent(type, category, subcategory, event, result)).toString();\n     }\n \n@@ -128,19 +130,16 @@ public boolean equals(final Object obj) {\n                 build();\n     }\n \n-    public static AuditLoggerName fromLoggerName(final String loggerName)\n-            throws ParseException {\n-\n-        if (StringUtils.isBlank(loggerName)) {\n+    public static AuditLoggerName fromAuditKey(final String key) throws ParseException {\n+        if (StringUtils.isBlank(key)) {\n             throw new IllegalArgumentException(\"Null value not permitted\");\n         }\n \n-        if (!loggerName.startsWith(LoggerType.AUDIT.getPrefix())) {\n-            throw new ParseException(\"Audit logger name must start with \" + LoggerType.AUDIT.getPrefix(), 0);\n+        if (!key.startsWith(AUDIT_PREFIX)) {\n+            throw new ParseException(\"Audit logger name must start with \" + AUDIT_PREFIX, 0);\n         }\n \n-        Map.Entry<EventCategory, Result> eventCategory = parseEventCategory(\n-                loggerName.replaceAll(LoggerType.AUDIT.getPrefix() + '.', \"\"));\n+        Map.Entry<EventCategory, Result> eventCategory = parseEventCategory(key.replace(AUDIT_PREFIX + '.', \"\"));\n \n         return new AuditLoggerName(\n                 eventCategory.getKey().getType(),"},{"sha":"1dc1ebf5561d263230cd599ba84e80dfead8ed28","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoEntitlement.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoEntitlement.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -110,8 +110,6 @@ public final class IdRepoEntitlement {\n \n     public static final String SCHEMA_DELETE = \"SCHEMA_DELETE\";\n \n-    public static final String AUDIT_SEARCH = \"AUDIT_SEARCH\";\n-\n     public static final String USER_SEARCH = \"USER_SEARCH\";\n \n     public static final String USER_CREATE = \"USER_CREATE\";\n@@ -200,23 +198,17 @@ public final class IdRepoEntitlement {\n \n     public static final String REPORT_EXECUTE = \"REPORT_EXECUTE\";\n \n-    public static final String LOG_READ = \"LOG_READ\";\n-\n-    public static final String LOG_LIST = \"LOG_LIST\";\n-\n-    public static final String LOG_SET_LEVEL = \"LOG_SET_LEVEL\";\n-\n-    public static final String LOG_DELETE = \"LOG_DELETE\";\n+    public static final String AUDIT_SEARCH = \"AUDIT_SEARCH\";\n \n     public static final String AUDIT_LIST = \"AUDIT_LIST\";\n \n     public static final String AUDIT_READ = \"AUDIT_READ\";\n \n     public static final String AUDIT_CREATE = \"AUDIT_CREATE\";\n \n-    public static final String AUDIT_ENABLE = \"AUDIT_ENABLE\";\n+    public static final String AUDIT_UPDATE = \"AUDIT_UPDATE\";\n \n-    public static final String AUDIT_DISABLE = \"AUDIT_DISABLE\";\n+    public static final String AUDIT_DELETE = \"AUDIT_DELETE\";\n \n     public static final String SECURITY_QUESTION_CREATE = \"SECURITY_QUESTION_CREATE\";\n \n@@ -250,6 +242,10 @@ public final class IdRepoEntitlement {\n \n     public static final String DELEGATION_DELETE = \"DELEGATION_DELETE\";\n \n+    public static final String LOGGER_LIST = \"LOGGER_LIST\";\n+\n+    public static final String LOGGER_UPDATE = \"LOGGER_UPDATE\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"fad075e61caf272f57abf4f748b4965b9f561bcb","filename":"common/idrepo/lib/src/test/java/org/apache/syncope/common/lib/SerializationTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSerializationTest.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -28,7 +28,6 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.UUID;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n@@ -40,6 +39,7 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.junit.jupiter.api.Test;\n \n@@ -49,13 +49,13 @@ public abstract class SerializationTest {\n \n     @Test\n     public void emptyListAsRoot() throws IOException {\n-        List<LoggerTO> original = new ArrayList<>();\n+        List<ReportTO> original = new ArrayList<>();\n \n         StringWriter writer = new StringWriter();\n         objectMapper().writeValue(writer, original);\n \n-        List<LoggerTO> actual = objectMapper().readValue(writer.toString(),\n-                new TypeReference<List<LoggerTO>>() {\n+        List<ReportTO> actual = objectMapper().readValue(writer.toString(),\n+                new TypeReference<List<ReportTO>>() {\n         });\n         assertEquals(original, actual);\n     }"},{"sha":"b48fbb51dc3a816f1479259e8b3bae7ffb0ec7a9","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/LoggerWrapper.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FLoggerWrapper.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.rest.api;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-\n-public final class LoggerWrapper {\n-\n-    private LoggerWrapper() {\n-        // empty constructor for static utility class\n-    }\n-\n-    public static List<AuditLoggerName> wrap(final Collection<LoggerTO> logger) {\n-        List<AuditLoggerName> result = new ArrayList<>();\n-        logger.forEach(loggerTO -> {\n-            try {\n-                result.add(AuditLoggerName.fromLoggerName(loggerTO.getKey()));\n-            } catch (Exception ignore) {\n-                // ignore\n-            }\n-        });\n-        return result;\n-    }\n-\n-    public static List<LoggerTO> unwrap(final Collection<AuditLoggerName> auditNames) {\n-        return auditNames.stream().map(name -> {\n-            LoggerTO loggerTO = new LoggerTO();\n-            loggerTO.setKey(name.toLoggerName());\n-            loggerTO.setLevel(LoggerLevel.DEBUG);\n-            return loggerTO;\n-        }).collect(Collectors.toList());\n-    }\n-}"},{"sha":"a86dd8cb5fcd8a3be78345c43a65086ea7f1e968","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuditService.java","status":"renamed","additions":55,"deletions":72,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuditService.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -38,127 +38,110 @@\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n-import org.apache.syncope.common.lib.log.EventCategory;\n-import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.beans.AuditQuery;\n \n /**\n- * REST operations for logging and auditing.\n+ * REST operations for audit.\n  */\n-@Tag(name = \"Loggers\")\n+@Tag(name = \"Audit\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n-@Path(\"loggers\")\n-public interface LoggerService extends JAXRSService {\n+@Path(\"audit\")\n+public interface AuditService extends JAXRSService {\n \n     /**\n-     * Returns the list of memory appenders available in the current logging configuration.\n+     * Returns a list of all audits.\n      *\n-     * @return the list of memory appenders available in the current logging configuration\n+     * @return list of all audits.\n      */\n     @GET\n-    @Path(\"memoryAppenders\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<LogAppender> memoryAppenders();\n+    List<AuditConfTO> list();\n \n     /**\n-     * Return the last log statements available in the provided memory appender.\n+     * Returns audit with matching key.\n      *\n-     * @param memoryAppender memory appender name\n-     * @return the last log statements available in the provided memory appender\n+     * @param key audit key to be read\n+     * @return audit with matching key\n      */\n     @GET\n-    @Path(\"memoryAppenders/{memoryAppender}/lastLogStatements\")\n+    @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<LogStatement> getLastLogStatements(@NotNull @PathParam(\"memoryAppender\") String memoryAppender);\n+    AuditConfTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n-     * Returns the list of all managed events in audit.\n+     * Creates a new audit.\n      *\n-     * @return list of all managed events in audit\n+     * @param auditTO audit to be created\n      */\n-    @GET\n-    @Path(\"events\")\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\", description = \"Audit successfully created\"))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<EventCategory> events();\n+    void create(@NotNull AuditConfTO auditTO);\n \n     /**\n-     * Returns a paged list of audit entries matching the given query.\n+     * Updates the audit matching the provided key.\n      *\n-     * @param auditQuery query conditions\n-     * @return paged list of audit entries matching the given query\n+     * @param auditTO audit to be stored\n      */\n-    @GET\n-    @Path(\"AUDIT/entries\")\n+    @Parameter(name = \"key\", description = \"Audit's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    PagedResult<AuditEntry> search(@BeanParam AuditQuery auditQuery);\n+    void update(@NotNull AuditConfTO auditTO);\n \n     /**\n-     * Create an audit entry.\n+     * Deletes the audit matching the provided key.\n      *\n-     * @param auditEntry audit entry to persist.\n+     * @param key audit key to be deleted\n      */\n-    @POST\n-    @Path(\"AUDIT/entries\")\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void create(@NotNull AuditEntry auditEntry);\n-    \n-    /**\n-     * Returns logger with matching type and name.\n-     *\n-     * @param type LoggerType to be selected.\n-     * @param name Logger name to be read\n-     * @return logger with matching type and name\n-     */\n-    @GET\n-    @Path(\"{type}/{name}\")\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    LoggerTO read(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);\n+    void delete(@NotNull @PathParam(\"key\") String key);\n \n     /**\n-     * Returns a list of loggers with matching type.\n+     * Returns the list of all managed events in audit.\n      *\n-     * @param type LoggerType to be selected\n-     * @return list of loggers with matching type\n+     * @return list of all managed events in audit\n      */\n     @GET\n-    @Path(\"{type}\")\n+    @Path(\"events\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<LoggerTO> list(@NotNull @PathParam(\"type\") LoggerType type);\n+    List<EventCategory> events();\n \n     /**\n-     * Creates or updates (if existing) the logger with matching name.\n+     * Returns a paged list of audit entries matching the given query.\n      *\n-     * @param type LoggerType to be selected\n-     * @param logger Logger to be created or updated\n+     * @param auditQuery query conditions\n+     * @return paged list of audit entries matching the given query\n      */\n-    @Parameter(name = \"key\", description = \"Logger's key\", in = ParameterIn.PATH, schema =\n-            @Schema(type = \"string\"))\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @PUT\n-    @Path(\"{type}/{key}\")\n-    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @GET\n+    @Path(\"entries\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull @PathParam(\"type\") LoggerType type, @NotNull LoggerTO logger);\n+    PagedResult<AuditEntry> search(@BeanParam AuditQuery auditQuery);\n \n     /**\n-     * Deletes the logger with matching name.\n+     * Create an audit entry.\n      *\n-     * @param type LoggerType to be selected\n-     * @param name Logger name to be deleted\n+     * @param auditEntry audit entry to persist.\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n-    @DELETE\n-    @Path(\"{type}/{name}\")\n-    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void delete(@NotNull @PathParam(\"type\") LoggerType type, @NotNull @PathParam(\"name\") String name);\n+    @POST\n+    @Path(\"entries\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void create(@NotNull AuditEntry auditEntry);\n }","previous_filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java"},{"sha":"a57ff6f5d2e1912cf098bde9134579eb10150815","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AuditLogic.java","status":"renamed","additions":75,"deletions":203,"changes":278,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAuditLogic.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -23,42 +23,33 @@\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.LoggerConfig;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.log.EventCategory;\n-import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.syncope.core.logic.audit.AuditAppender;\n-import org.apache.syncope.core.logic.init.LoggerLoader;\n-import org.apache.syncope.core.persistence.api.DomainHolder;\n+import org.apache.syncope.core.logic.init.AuditLoader;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n@@ -70,25 +61,23 @@\n import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n import org.springframework.core.type.classreading.MetadataReader;\n import org.springframework.core.type.classreading.MetadataReaderFactory;\n-import org.springframework.dao.InvalidDataAccessApiUsageException;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.SystemPropertyUtils;\n-import org.apache.syncope.core.provisioning.api.data.LoggerDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n \n @Component\n-public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n+public class AuditLogic extends AbstractTransactionalLogic<AuditConfTO> {\n \n     @Autowired\n-    private DomainHolder domainHolder;\n+    private AuditLoader auditLoader;\n \n     @Autowired\n-    private LoggerLoader loggerLoader;\n-\n-    @Autowired\n-    private LoggerDAO loggerDAO;\n+    private AuditConfDAO auditDAO;\n \n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n@@ -97,214 +86,76 @@ public class LoggerLogic extends AbstractTransactionalLogic<EntityTO> {\n     private EntityFactory entityFactory;\n \n     @Autowired\n-    private LoggerDataBinder binder;\n+    private AuditDataBinder binder;\n \n     @Autowired\n     private AuditManager auditManager;\n \n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    @Transactional(readOnly = true)\n-    public List<LogAppender> memoryAppenders() {\n-        return loggerLoader.getMemoryAppenders().keySet().stream().map(appender -> {\n-            LogAppender logAppender = new LogAppender();\n-            logAppender.setName(appender);\n-            return logAppender;\n-        }).collect(Collectors.toList());\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    @Transactional(readOnly = true)\n-    public List<LogStatement> getLastLogStatements(final String memoryAppender) {\n-        MemoryAppender appender = loggerLoader.getMemoryAppenders().get(memoryAppender);\n-        if (appender == null) {\n-            throw new NotFoundException(\"Appender \" + memoryAppender);\n-        }\n-\n-        return appender.getStatements().stream().collect(Collectors.toList());\n-    }\n-\n-    private List<LoggerTO> list(final LoggerType type) {\n-        return loggerDAO.findAll(type).stream().map(binder::getLoggerTO).collect(Collectors.toList());\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_LIST + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    @Transactional(readOnly = true)\n-    public List<LoggerTO> listLogs() {\n-        return list(LoggerType.LOG).stream().\n-                filter(logger -> !logger.getKey().startsWith(SyncopeConstants.MASTER_DOMAIN)).\n-                filter(logger -> domainHolder.getDomains().keySet().stream().\n-                noneMatch(domain -> logger.getKey().startsWith(domain))).\n-                collect(Collectors.toList());\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public List<AuditLoggerName> listAudits() {\n-        return list(LoggerType.AUDIT).stream().\n-                map(logger -> {\n-                    AuditLoggerName result = null;\n-                    try {\n-                        result = AuditLoggerName.fromLoggerName(logger.getKey());\n-                    } catch (Exception e) {\n-                        LOG.warn(\"Unexpected audit logger name: {}\", logger.getKey(), e);\n-                    }\n-\n-                    return result;\n-                }).\n-                filter(Objects::nonNull).\n-                collect(Collectors.toList());\n-    }\n-\n-    private static void throwInvalidLogger(final LoggerType type) {\n-        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidLogger);\n-        sce.getElements().add(\"Expected \" + type.name());\n-\n-        throw sce;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_READ + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    @Transactional(readOnly = true)\n-    public LoggerTO readLog(final String name) {\n-        return listLogs().stream().\n-                filter(logger -> logger.getKey().equals(name)).findFirst().\n-                orElseThrow(() -> new NotFoundException(\"Logger \" + name));\n+    public List<AuditConfTO> list() {\n+        return auditDAO.findAll().stream().map(binder::getAuditTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_READ + \"')\")\n     @Transactional(readOnly = true)\n-    public LoggerTO readAudit(final String name) {\n-        return listAudits().stream().\n-                filter(logger -> logger.toLoggerName().equals(name)).findFirst().\n-                map(binder::getLoggerTO).orElseThrow(() -> new NotFoundException(\"Audit \" + name));\n+    public AuditConfTO read(final String key) {\n+        return Optional.ofNullable(auditDAO.find(key)).map(binder::getAuditTO).\n+                orElseThrow(() -> new NotFoundException(\"Audit \" + key));\n     }\n \n-    private LoggerTO setLevel(final String name, final Level level, final LoggerType expectedType) {\n-        Logger syncopeLogger = loggerDAO.find(name);\n-        if (syncopeLogger == null) {\n-            LOG.debug(\"Logger {} not found: creating new...\", name);\n-\n-            syncopeLogger = entityFactory.newEntity(Logger.class);\n-            syncopeLogger.setKey(name);\n-            syncopeLogger.setType(name.startsWith(LoggerType.AUDIT.getPrefix())\n-                    ? LoggerType.AUDIT\n-                    : LoggerType.LOG);\n-        }\n-\n-        if (expectedType != syncopeLogger.getType()) {\n-            throwInvalidLogger(expectedType);\n-        }\n-\n-        syncopeLogger.setLevel(LoggerLevel.fromLevel(level));\n-        syncopeLogger = loggerDAO.save(syncopeLogger);\n-\n-        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n-        LoggerConfig logConf;\n-\n-        if (LoggerType.AUDIT.equals(syncopeLogger.getType())) {\n-            String auditLoggerName = AuditLoggerName.getAuditEventLoggerName(\n-                    AuthContextUtils.getDomain(), syncopeLogger.getKey());\n-\n-            logConf = ctx.getConfiguration().getLoggerConfig(auditLoggerName);\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_CREATE + \"')\")\n+    public void create(final AuditConfTO auditTO) {\n+        AuditConf audit = entityFactory.newEntity(AuditConf.class);\n+        audit.setKey(auditTO.getKey());\n+        audit.setActive(auditTO.isActive());\n+        audit = auditDAO.save(audit);\n \n-            // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n-            boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(logConf.getName());\n-            if (isRootLogConf) {\n-                logConf = new LoggerConfig(auditLoggerName, null, false);\n-            }\n-            for (AuditAppender auditAppender : loggerLoader.auditAppenders(AuthContextUtils.getDomain())) {\n-                if (auditAppender.getEvents().stream().anyMatch(event -> name.equalsIgnoreCase(event.toLoggerName()))) {\n-                    LoggerLoader.addAppenderToContext(ctx, auditAppender, logConf);\n-                }\n-            }\n-            if (isRootLogConf) {\n-                ctx.getConfiguration().addLogger(auditLoggerName, logConf);\n-            }\n-        } else {\n-            logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n-                    ? ctx.getConfiguration().getLoggerConfig(LogManager.ROOT_LOGGER_NAME)\n-                    : ctx.getConfiguration().getLoggerConfig(name);\n+        if (audit.isActive()) {\n+            setLevel(audit.getKey(), Level.DEBUG);\n         }\n-\n-        logConf.setLevel(level);\n-        ctx.updateLoggers();\n-\n-        return binder.getLoggerTO(syncopeLogger);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_SET_LEVEL + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    public LoggerTO setLogLevel(final String name, final Level level) {\n-        return setLevel(name, level, LoggerType.LOG);\n-    }\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_UPDATE + \"')\")\n+    public void update(final AuditConfTO auditTO) {\n+        AuditConf audit = Optional.ofNullable(auditDAO.find(auditTO.getKey())).\n+                orElseThrow(() -> new NotFoundException(\"Audit \" + auditTO.getKey()));\n+        audit.setActive(auditTO.isActive());\n+        audit = auditDAO.save(audit);\n \n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_ENABLE + \"')\")\n-    public void enableAudit(final AuditLoggerName auditLoggerName) {\n-        try {\n-            setLevel(auditLoggerName.toLoggerName(), Level.DEBUG, LoggerType.AUDIT);\n-        } catch (IllegalArgumentException | InvalidDataAccessApiUsageException e) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidLogger);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n+        if (audit.isActive()) {\n+            setLevel(audit.getKey(), Level.OFF);\n         }\n     }\n \n-    private LoggerTO delete(final String name, final LoggerType expectedType) {\n-        Logger syncopeLogger = loggerDAO.find(name);\n-        if (syncopeLogger == null) {\n-            throw new NotFoundException(\"Logger \" + name);\n-        }\n-        if (expectedType != syncopeLogger.getType()) {\n-            throwInvalidLogger(expectedType);\n-        }\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_DELETE + \"')\")\n+    public void delete(final String key) {\n+        AuditConf audit = Optional.ofNullable(auditDAO.find(key)).\n+                orElseThrow(() -> new NotFoundException(\"Audit \" + key));\n+        auditDAO.delete(audit);\n \n-        LoggerTO loggerToDelete = binder.getLoggerTO(syncopeLogger);\n+        setLevel(audit.getKey(), Level.OFF);\n+    }\n \n-        // remove SyncopeLogger from local storage, so that LoggerLoader won't load this next time\n-        loggerDAO.delete(syncopeLogger);\n+    private void setLevel(final String key, final Level level) {\n+        String auditLoggerName = AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), key);\n \n-        // set log level to OFF in order to disable configured logger until next reboot\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+        LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(auditLoggerName);\n \n-        String auditLoggerName = AuditLoggerName.getAuditEventLoggerName(\n-                AuthContextUtils.getDomain(), syncopeLogger.getKey());\n-        org.apache.logging.log4j.core.Logger logger = SyncopeConstants.ROOT_LOGGER.equals(name)\n-                ? ctx.getLogger(LogManager.ROOT_LOGGER_NAME)\n-                : LoggerType.AUDIT.equals(syncopeLogger.getType())\n-                ? ctx.getLogger(auditLoggerName)\n-                : ctx.getLogger(name);\n+        // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n+        auditLoader.auditAppenders(AuthContextUtils.getDomain()).stream().\n+                filter(appender -> appender.getEvents().stream().\n+                anyMatch(event -> key.equalsIgnoreCase(event.toAuditKey()))).\n+                forEach(auditAppender -> AuditLoader.addAppenderToContext(ctx, auditAppender, logConf));\n \n-        logger.setLevel(Level.OFF);\n+        logConf.setLevel(level);\n         ctx.updateLoggers();\n-\n-        return loggerToDelete;\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.LOG_DELETE + \"') and authentication.details.domain == \"\n-            + \"T(org.apache.syncope.common.lib.SyncopeConstants).MASTER_DOMAIN\")\n-    public LoggerTO deleteLog(final String name) {\n-        return delete(name, LoggerType.LOG);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_DISABLE + \"')\")\n-    public void disableAudit(final AuditLoggerName auditLoggerName) {\n-        try {\n-            delete(auditLoggerName.toLoggerName(), LoggerType.AUDIT);\n-        } catch (NotFoundException e) {\n-            LOG.debug(\"Ignoring disable of non existing logger {}\", auditLoggerName.toLoggerName());\n-        } catch (IllegalArgumentException | InvalidDataAccessApiUsageException e) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidLogger);\n-            sce.getElements().add(e.getMessage());\n-            throw sce;\n-        }\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.AUDIT_LIST + \"') \"\n             + \"or hasRole('\" + IdRepoEntitlement.NOTIFICATION_LIST + \"')\")\n-    public List<EventCategory> listAuditEvents() {\n+    public List<EventCategory> events() {\n         // use set to avoid duplications or null elements\n         Set<EventCategory> events = new HashSet<>();\n \n@@ -413,8 +264,8 @@ public Pair<Integer, List<AuditEntry>> search(\n             final AuditElements.Result result,\n             final List<OrderByClause> orderByClauses) {\n \n-        int count = loggerDAO.countAuditEntries(entityKey, type, category, subcategory, events, result);\n-        List<AuditEntry> matching = loggerDAO.findAuditEntries(\n+        int count = auditDAO.countEntries(entityKey, type, category, subcategory, events, result);\n+        List<AuditEntry> matching = auditDAO.searchEntries(\n                 entityKey, page, size, type, category, subcategory, events, result, orderByClauses);\n         return Pair.of(count, matching);\n     }\n@@ -444,9 +295,30 @@ public void create(final AuditEntry auditEntry) {\n     }\n \n     @Override\n-    protected EntityTO resolveReference(final Method method, final Object... args)\n+    protected AuditConfTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof AuditConfTO) {\n+                    key = ((AuditConfTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getAuditTO(auditDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n         throw new UnresolvedReferenceException();\n     }\n }","previous_filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java"},{"sha":"c942730723f451a70d5567101ef404a3c4914efc","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/MemoryAppender.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FMemoryAppender.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,96 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic;\n-\n-import java.util.Queue;\n-import org.apache.logging.log4j.core.Appender;\n-import org.apache.logging.log4j.core.Filter;\n-import org.apache.logging.log4j.core.LogEvent;\n-import org.apache.logging.log4j.core.appender.AbstractAppender;\n-import org.apache.logging.log4j.core.config.Property;\n-import org.apache.logging.log4j.core.config.plugins.Plugin;\n-import org.apache.logging.log4j.core.config.plugins.PluginAttribute;\n-import org.apache.logging.log4j.core.config.plugins.PluginElement;\n-import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n-import org.apache.logging.log4j.message.Message;\n-import org.apache.logging.log4j.message.ReusableMessage;\n-import org.apache.syncope.common.lib.collections.CircularFifoQueue;\n-import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n-\n-@Plugin(name = \"Memory\", category = \"Core\", elementType = Appender.ELEMENT_TYPE, printObject = true)\n-public class MemoryAppender extends AbstractAppender {\n-\n-    private final CircularFifoQueue<LogStatement> statements;\n-\n-    protected MemoryAppender(\n-            final String name,\n-            final int size,\n-            final Filter filter,\n-            final boolean ignoreExceptions) {\n-\n-        super(name, filter, null, ignoreExceptions, Property.EMPTY_ARRAY);\n-        this.statements = new CircularFifoQueue<>(size);\n-    }\n-\n-    @Override\n-    public void append(final LogEvent event) {\n-        LogStatement statement = new LogStatement();\n-\n-        statement.setLevel(LoggerLevel.fromLevel(event.getLevel()));\n-        statement.setLoggerName(event.getLoggerName());\n-\n-        Message msg = event.getMessage();\n-        statement.setMessage((msg instanceof ReusableMessage\n-                ? ((ReusableMessage) msg).memento()\n-                : msg).getFormattedMessage());\n-\n-        statement.setTimeMillis(event.getTimeMillis());\n-\n-        if (event.getThrown() != null) {\n-            statement.setStackTrace(ExceptionUtils2.getFullStackTrace(event.getThrown()));\n-        }\n-\n-        statement.setThreadId(event.getThreadId());\n-        statement.setThreadName(event.getThreadName());\n-        statement.setThreadPriority(event.getThreadPriority());\n-\n-        this.statements.add(statement);\n-    }\n-\n-    public Queue<LogStatement> getStatements() {\n-        return statements;\n-    }\n-\n-    @PluginFactory\n-    public static MemoryAppender createAppender(\n-            @PluginAttribute(\"name\") final String name,\n-            @PluginAttribute(value = \"size\", defaultInt = 10) final int size,\n-            @PluginElement(\"Filter\") final Filter filter,\n-            @PluginAttribute(value = \"ignoreExceptions\", defaultBoolean = true) final boolean ignoreExceptions) {\n-\n-        return new MemoryAppender(\n-                name,\n-                size,\n-                filter,\n-                ignoreExceptions);\n-    }\n-\n-}"},{"sha":"896bd85a7a067cffb1e4cc9a268b3c48e9a3b495","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/audit/JdbcAuditAppender.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Faudit%2FJdbcAuditAppender.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -29,9 +29,9 @@\n import org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource;\n import org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n \n public class JdbcAuditAppender extends DefaultAuditAppender {\n \n@@ -51,7 +51,7 @@ protected void initTargetAppender() {\n             setConfiguration(ctx.getConfiguration()).setName(\"LOGGER\").setPattern(\"%logger\").build(),\n             ColumnMapping.newBuilder().\n             setConfiguration(ctx.getConfiguration()).\n-            setName(LoggerDAO.AUDIT_MESSAGE_COLUMN).setPattern(\"%message\").build(),\n+            setName(AuditConfDAO.AUDIT_ENTRY_MESSAGE_COLUMN).setPattern(\"%message\").build(),\n             ColumnMapping.newBuilder().\n             setConfiguration(ctx.getConfiguration()).setName(\"THROWABLE\").setPattern(\"%ex{full}\").build()\n         };\n@@ -63,7 +63,7 @@ protected void initTargetAppender() {\n                     setIgnoreExceptions(false).\n                     setConnectionSource(new DataSourceConnectionSource(domain, domainHolder.getDomains().get(domain))).\n                     setBufferSize(0).\n-                    setTableName(LoggerDAO.AUDIT_TABLE).\n+                    setTableName(AuditConfDAO.AUDIT_ENTRY_TABLE).\n                     setColumnMappings(columnMappings).\n                     build();\n             appender.start();"},{"sha":"b8dcaf786a0be875f9c290494cd3b224f683bc70","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/AuditAccessor.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditAccessor.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n+\n+/**\n+ * Domain-sensible (via {@code @Transactional} access to audit data.\n+ *\n+ * @see AuditLoader\n+ */\n+@Component\n+public class AuditAccessor {\n+\n+    @Autowired\n+    private AuditConfDAO auditDAO;\n+\n+    @Transactional\n+    public void synchronizeLoggingWithAudit(final LoggerContext ctx) {\n+        Map<String, AuditConf> audits = auditDAO.findAll().stream().\n+                collect(Collectors.toMap(\n+                        audit -> AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), audit.getKey()),\n+                        Function.identity()));\n+\n+        audits.forEach((logger, audit) -> {\n+            LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(logger);\n+            logConf.setLevel(audit.isActive() ? Level.DEBUG : Level.OFF);\n+        });\n+\n+        ctx.updateLoggers();\n+    }\n+}"},{"sha":"280415a968e50f60d0d4b18d05e54432beccc9eb","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/AuditLoader.java","status":"renamed","additions":5,"deletions":17,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FAuditLoader.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.core.logic.init;\n \n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import javax.sql.DataSource;\n@@ -32,7 +30,6 @@\n import org.apache.logging.log4j.core.config.LoggerConfig;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.core.logic.audit.AuditAppender;\n-import org.apache.syncope.core.logic.MemoryAppender;\n import org.apache.syncope.core.logic.audit.JdbcAuditAppender;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n@@ -45,19 +42,17 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class LoggerLoader implements SyncopeCoreLoader {\n+public class AuditLoader implements SyncopeCoreLoader {\n \n     @Autowired\n-    private LoggerAccessor loggerAccessor;\n+    private AuditAccessor auditAccessor;\n \n     @Autowired\n     private ImplementationLookup implementationLookup;\n \n     @Value(\"${enable.jdbcAuditAppender:true}\")\n     private boolean enableJdbcAuditAppender;\n \n-    private final Map<String, MemoryAppender> memoryAppenders = new HashMap<>();\n-\n     @Override\n     public int getOrder() {\n         return 300;\n@@ -67,10 +62,6 @@ public int getOrder() {\n     public void load(final String domain, final DataSource datasource) {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n-        ctx.getConfiguration().getAppenders().entrySet().stream().\n-                filter(entry -> entry.getValue() instanceof MemoryAppender).\n-                forEach(entry -> memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue()));\n-\n         if (enableJdbcAuditAppender) {\n             JdbcAuditAppender jdbcAuditAppender = (JdbcAuditAppender) ApplicationContextProvider.getBeanFactory().\n                     createBean(JdbcAuditAppender.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n@@ -84,7 +75,7 @@ public void load(final String domain, final DataSource datasource) {\n \n         // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n         auditAppenders(domain).forEach(auditAppender -> auditAppender.getEvents().stream().\n-                map(event -> AuditLoggerName.getAuditEventLoggerName(domain, event.toLoggerName())).\n+                map(event -> AuditLoggerName.getAuditEventLoggerName(domain, event.toAuditKey())).\n                 forEach(domainAuditLoggerName -> {\n                     LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n                     boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());\n@@ -99,17 +90,13 @@ public void load(final String domain, final DataSource datasource) {\n                 }));\n \n         AuthContextUtils.callAsAdmin(domain, () -> {\n-            loggerAccessor.synchronizeLog4J(ctx);\n+            auditAccessor.synchronizeLoggingWithAudit(ctx);\n             return null;\n         });\n \n         ctx.updateLoggers();\n     }\n \n-    public Map<String, MemoryAppender> getMemoryAppenders() {\n-        return memoryAppenders;\n-    }\n-\n     public List<AuditAppender> auditAppenders(final String domain) throws BeansException {\n         return implementationLookup.getAuditAppenderClasses().stream().map(clazz -> {\n             AuditAppender auditAppender;\n@@ -119,6 +106,7 @@ public List<AuditAppender> auditAppenders(final String domain) throws BeansExcep\n             } else {\n                 auditAppender = (AuditAppender) ApplicationContextProvider.getBeanFactory().\n                         createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+                ApplicationContextProvider.getBeanFactory().registerSingleton(clazz.getName(), auditAppender);\n                 auditAppender.init(domain);\n             }\n             return auditAppender;","previous_filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java"},{"sha":"4b057e329955cd643e4569912feeb5836a074f39","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerAccessor.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerAccessor.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,98 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.init;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.core.LoggerContext;\n-import org.apache.logging.log4j.core.config.LoggerConfig;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n-import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-/**\n- * Domain-sensible (via {@code @Transactional} access to logger / audit data.\n- *\n- * @see LoggerLoader\n- */\n-@Component\n-public class LoggerAccessor {\n-\n-    @Autowired\n-    private LoggerDAO loggerDAO;\n-\n-    @Autowired\n-    private EntityFactory entityFactory;\n-\n-    @Transactional\n-    public void synchronizeLog4J(final LoggerContext ctx) {\n-        Map<String, Logger> syncopeLoggers = new HashMap<>();\n-        if (SyncopeConstants.MASTER_DOMAIN.equals(AuthContextUtils.getDomain())) {\n-            for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.LOG)) {\n-                syncopeLoggers.put(syncopeLogger.getKey(), syncopeLogger);\n-            }\n-        }\n-        for (Logger syncopeLogger : loggerDAO.findAll(LoggerType.AUDIT)) {\n-            syncopeLoggers.put(AuditLoggerName.getAuditEventLoggerName(\n-                    AuthContextUtils.getDomain(), syncopeLogger.getKey()), syncopeLogger);\n-        }\n-\n-        /*\n-         * Traverse all defined log4j loggers: if there is a matching SyncopeLogger, set log4j level accordingly,\n-         * otherwise create a SyncopeLogger instance with given name and level.\n-         */\n-        for (LoggerConfig logConf : ctx.getConfiguration().getLoggers().values()) {\n-            String loggerName = LogManager.ROOT_LOGGER_NAME.equals(logConf.getName())\n-                    ? SyncopeConstants.ROOT_LOGGER : logConf.getName();\n-            if (logConf.getLevel() != null) {\n-                if (syncopeLoggers.containsKey(loggerName)) {\n-                    logConf.setLevel(syncopeLoggers.get(loggerName).getLevel().getLevel());\n-                    syncopeLoggers.remove(loggerName);\n-                } else if (!loggerName.startsWith(LoggerType.AUDIT.getPrefix())\n-                        || !loggerName.startsWith(AuthContextUtils.getDomain() + '.' + LoggerType.AUDIT.getPrefix())) {\n-\n-                    Logger syncopeLogger = entityFactory.newEntity(Logger.class);\n-                    syncopeLogger.setKey(loggerName);\n-                    syncopeLogger.setLevel(LoggerLevel.fromLevel(logConf.getLevel()));\n-                    syncopeLogger.setType(LoggerType.LOG);\n-                    loggerDAO.save(syncopeLogger);\n-                }\n-            }\n-        }\n-\n-        /*\n-         * Foreach SyncopeLogger not found in log4j create a new log4j logger with given name and level.\n-         */\n-        for (Map.Entry<String, Logger> entry : syncopeLoggers.entrySet()) {\n-            LoggerConfig logConf = ctx.getConfiguration().getLoggerConfig(entry.getKey());\n-            logConf.setLevel(entry.getValue().getLevel().getLevel());\n-        }\n-\n-        ctx.updateLoggers();\n-    }\n-}"},{"sha":"998ee7689d461f96a475fafcb107f74c294990cd","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AuditServiceImpl.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAuditServiceImpl.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.rest.api.beans.AuditQuery;\n+import org.apache.syncope.common.rest.api.service.AuditService;\n+import org.apache.syncope.core.logic.AuditLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class AuditServiceImpl extends AbstractServiceImpl implements AuditService {\n+\n+    @Autowired\n+    private AuditLogic logic;\n+\n+    @Override\n+    public List<AuditConfTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public AuditConfTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public void create(final AuditConfTO auditTO) {\n+        logic.create(auditTO);\n+    }\n+\n+    @Override\n+    public void update(final AuditConfTO auditTO) {\n+        logic.update(auditTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+    @Override\n+    public void create(final AuditEntry auditEntry) {\n+        logic.create(auditEntry);\n+    }\n+\n+    @Override\n+    public List<EventCategory> events() {\n+        return logic.events();\n+    }\n+\n+    @Override\n+    public PagedResult<AuditEntry> search(final AuditQuery auditQuery) {\n+        Pair<Integer, List<AuditEntry>> result = logic.search(\n+                auditQuery.getEntityKey(),\n+                auditQuery.getPage(),\n+                auditQuery.getSize(),\n+                auditQuery.getType(),\n+                auditQuery.getCategory(),\n+                auditQuery.getSubcategory(),\n+                auditQuery.getEvents(),\n+                auditQuery.getResult(),\n+                getOrderByClauses(auditQuery.getOrderBy()));\n+\n+        return buildPagedResult(result.getRight(), auditQuery.getPage(), auditQuery.getSize(), result.getLeft());\n+    }\n+}"},{"sha":"9367c9db3ac0a8dc06112cfeb2262f0e7f49635a","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/LoggerServiceImpl.java","status":"removed","additions":0,"deletions":150,"changes":150,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FLoggerServiceImpl.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,150 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.rest.cxf.service;\n-\n-import java.text.ParseException;\n-import java.util.List;\n-import javax.ws.rs.BadRequestException;\n-import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n-import org.apache.syncope.common.lib.log.EventCategory;\n-import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.rest.api.LoggerWrapper;\n-import org.apache.syncope.common.rest.api.beans.AuditQuery;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n-import org.apache.syncope.core.logic.LoggerLogic;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Service;\n-\n-@Service\n-public class LoggerServiceImpl extends AbstractServiceImpl implements LoggerService {\n-\n-    @Autowired\n-    private LoggerLogic logic;\n-\n-    @Override\n-    public List<LogAppender> memoryAppenders() {\n-        return logic.memoryAppenders();\n-    }\n-\n-    @Override\n-    public List<LogStatement> getLastLogStatements(final String memoryAppender) {\n-        return logic.getLastLogStatements(memoryAppender);\n-    }\n-    \n-    @Override\n-    public void create(final AuditEntry auditEntry) {\n-        logic.create(auditEntry);\n-    }\n-\n-    @Override\n-    public void delete(final LoggerType type, final String name) {\n-        switch (type) {\n-            case LOG:\n-                logic.deleteLog(name);\n-                break;\n-\n-            case AUDIT:\n-                try {\n-                logic.disableAudit(AuditLoggerName.fromLoggerName(name));\n-            } catch (IllegalArgumentException | ParseException e) {\n-                throw new BadRequestException(e);\n-            }\n-            break;\n-\n-            default:\n-                throw new BadRequestException();\n-        }\n-    }\n-\n-    @Override\n-    public List<LoggerTO> list(final LoggerType type) {\n-        switch (type) {\n-            case LOG:\n-                return logic.listLogs();\n-\n-            case AUDIT:\n-                List<AuditLoggerName> auditLogger = logic.listAudits();\n-                return LoggerWrapper.unwrap(auditLogger);\n-\n-            default:\n-                throw new BadRequestException();\n-        }\n-    }\n-\n-    @Override\n-    public LoggerTO read(final LoggerType type, final String name) {\n-        switch (type) {\n-            case LOG:\n-                return logic.readLog(name);\n-\n-            case AUDIT:\n-                return logic.readAudit(name);\n-\n-            default:\n-                throw new BadRequestException();\n-        }\n-    }\n-\n-    @Override\n-    public void update(final LoggerType type, final LoggerTO logger) {\n-        switch (type) {\n-            case LOG:\n-                logic.setLogLevel(logger.getKey(), logger.getLevel().getLevel());\n-                break;\n-\n-            case AUDIT:\n-                try {\n-                logic.enableAudit(AuditLoggerName.fromLoggerName(logger.getKey()));\n-            } catch (Exception e) {\n-                throw new BadRequestException(e);\n-            }\n-            break;\n-\n-            default:\n-                throw new BadRequestException();\n-        }\n-    }\n-\n-    @Override\n-    public List<EventCategory> events() {\n-        return logic.listAuditEvents();\n-    }\n-\n-    @Override\n-    public PagedResult<AuditEntry> search(final AuditQuery auditQuery) {\n-        Pair<Integer, List<AuditEntry>> result = logic.search(\n-                auditQuery.getEntityKey(),\n-                auditQuery.getPage(),\n-                auditQuery.getSize(),\n-                auditQuery.getType(),\n-                auditQuery.getCategory(),\n-                auditQuery.getSubcategory(),\n-                auditQuery.getEvents(),\n-                auditQuery.getResult(),\n-                getOrderByClauses(auditQuery.getOrderBy()));\n-\n-        return buildPagedResult(result.getRight(), auditQuery.getPage(), auditQuery.getSize(), result.getLeft());\n-    }\n-}"},{"sha":"96d215838ecf19ec0712acf8d04c1b99c6a77dc2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AuditConfDAO.java","status":"renamed","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAuditConfDAO.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -19,37 +19,34 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n \n-public interface LoggerDAO extends DAO<Logger> {\n+public interface AuditConfDAO extends DAO<AuditConf> {\n \n-    String AUDIT_TABLE = \"SYNCOPEAUDIT\";\n+    String AUDIT_ENTRY_TABLE = \"AuditEntry\";\n \n-    String AUDIT_MESSAGE_COLUMN = \"MESSAGE\";\n+    String AUDIT_ENTRY_MESSAGE_COLUMN = \"MESSAGE\";\n \n-    Logger find(String key);\n+    AuditConf find(String key);\n \n-    List<Logger> findAll(LoggerType type);\n+    List<AuditConf> findAll();\n \n-    Logger save(Logger logger);\n+    AuditConf save(AuditConf auditConf);\n \n-    void delete(String key);\n+    void delete(AuditConf auditConf);\n \n-    void delete(Logger logger);\n-\n-    int countAuditEntries(\n+    int countEntries(\n             String entityKey,\n             AuditElements.EventCategoryType type,\n             String category,\n             String subcategory,\n             List<String> events,\n             AuditElements.Result result);\n \n-    List<AuditEntry> findAuditEntries(\n+    List<AuditEntry> searchEntries(\n             String entityKey,\n             int page,\n             int size,","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/LoggerDAO.java"},{"sha":"b43edcf13118764fdfc982c52077c45cf1502c0b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AuditConf.java","status":"renamed","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAuditConf.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -18,18 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n+public interface AuditConf extends ProvidedKeyEntity {\n \n-public interface Logger extends Entity {\n+    boolean isActive();\n \n-    void setKey(String name);\n-\n-    LoggerLevel getLevel();\n-\n-    void setLevel(LoggerLevel level);\n-\n-    LoggerType getType();\n-\n-    void setType(LoggerType type);\n+    void setActive(boolean active);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Logger.java"},{"sha":"7f2a0987d16b6b0956c84d1d56e49d8c9bf26ddd","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONLoggerDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONLoggerDAO.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.springframework.util.CollectionUtils;\n \n-public abstract class AbstractJPAJSONLoggerDAO extends JPALoggerDAO {\n+public abstract class AbstractJPAJSONLoggerDAO extends JPAAuditConfDAO {\n \n     private static final ObjectMapper MAPPER = new ObjectMapper();\n "},{"sha":"4b64c8c5f1b8ed6682f928c04bb673c157b9f1d0","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAuditConfDAO.java","status":"renamed","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAuditConfDAO.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -23,24 +23,28 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n-public class MyJPAJSONLoggerDAO extends AbstractJPAJSONLoggerDAO {\n+public class MyJPAJSONAuditConfDAO extends AbstractJPAJSONLoggerDAO {\n \n     private static class MyMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n \n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n             if (entityKey != null) {\n-                query.append('(').append(AUDIT_MESSAGE_COLUMN).append(\"->'$.before' LIKE '%\").append(entityKey).\n-                        append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\"->'$.input' LIKE '%\").append(entityKey).\n-                        append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\"->'$.output' LIKE '%\").append(entityKey).\n+                query.append('(').\n+                        append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\"->'$.before' LIKE '%\").append(entityKey).\n+                        append(\"%' OR \").\n+                        append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\"->'$.input' LIKE '%\").append(entityKey).\n+                        append(\"%' OR \").\n+                        append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\"->'$.output' LIKE '%\").append(entityKey).\n                         append(\"%')\");\n             }\n \n             if (!containers.isEmpty()) {\n                 if (entityKey != null) {\n                     query.append(\" AND (\");\n                 }\n-                query.append(containers.stream().map(container -> \"JSON_CONTAINS(\" + AUDIT_MESSAGE_COLUMN + \", '\"\n+                query.append(containers.stream().\n+                        map(container -> \"JSON_CONTAINS(\" + AUDIT_ENTRY_MESSAGE_COLUMN + \", '\"\n                         + POJOHelper.serialize(container).replace(\"'\", \"''\")\n                         + \"')\").collect(Collectors.joining(\" OR \")));\n                 if (entityKey != null) {","previous_filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONLoggerDAO.java"},{"sha":"4e9acf5d11bf3600d00b17688646fb88a315e230","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAuditConfDAO.java","status":"renamed","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAuditConfDAO.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,24 +24,28 @@\n import org.apache.syncope.core.persistence.jpa.dao.AbstractJPAJSONLoggerDAO.JSONMessageCriteriaBuilder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n \n-public class PGJPAJSONLoggerDAO extends AbstractJPAJSONLoggerDAO {\n+public class PGJPAJSONAuditConfDAO extends AbstractJPAJSONLoggerDAO {\n \n     private static class PGMessageCriteriaBuilder extends JSONMessageCriteriaBuilder {\n \n         @Override\n         protected String doBuild(final List<ObjectNode> containers) {\n             if (entityKey != null) {\n-                query.append('(').append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'before' LIKE '%\").append(entityKey).\n-                        append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'input' LIKE '%\").append(entityKey).\n-                        append(\"%' OR \").append(AUDIT_MESSAGE_COLUMN).append(\" ->> 'output' LIKE '%\").append(entityKey).\n+                query.append('(').\n+                        append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\" ->> 'before' LIKE '%\").append(entityKey).\n+                        append(\"%' OR \").\n+                        append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\" ->> 'input' LIKE '%\").append(entityKey).\n+                        append(\"%' OR \").\n+                        append(AUDIT_ENTRY_MESSAGE_COLUMN).append(\" ->> 'output' LIKE '%\").append(entityKey).\n                         append(\"%')\");\n             }\n \n             if (!containers.isEmpty()) {\n                 if (entityKey != null) {\n                     query.append(\" AND (\");\n                 }\n-                query.append(containers.stream().map(container -> AUDIT_MESSAGE_COLUMN + \"::jsonb @> '\"\n+                query.append(containers.stream().\n+                        map(container -> AUDIT_ENTRY_MESSAGE_COLUMN + \"::jsonb @> '\"\n                         + POJOHelper.serialize(container).replace(\"'\", \"''\")\n                         + \"'::jsonb\").collect(Collectors.joining(\" OR \")));\n                 if (entityKey != null) {\n@@ -55,7 +59,7 @@ protected String doBuild(final List<ObjectNode> containers) {\n \n     @Override\n     protected String select() {\n-        return AUDIT_MESSAGE_COLUMN + \"::text\";\n+        return AUDIT_ENTRY_MESSAGE_COLUMN + \"::text\";\n     }\n \n     @Override","previous_filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONLoggerDAO.java"},{"sha":"2ffba2e5c0189858293a3986cf49fbaa888a2bd8","filename":"core/persistence-jpa-json/src/main/resources/audit/audit_myjson.sql","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_myjson.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_myjson.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_myjson.sql?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -15,7 +15,7 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n+CREATE TABLE IF NOT EXISTS AuditEntry (\n   EVENT_DATE TIMESTAMP,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,"},{"sha":"010422250d01a7e25bc98d9f6017e685e8792e12","filename":"core/persistence-jpa-json/src/main/resources/audit/audit_pgjsonb.sql","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_pgjsonb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_pgjsonb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_pgjsonb.sql?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -15,11 +15,11 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n+CREATE TABLE IF NOT EXISTS AuditEntry (\n   EVENT_DATE TIMESTAMP,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,\n   MESSAGE JSONB NOT NULL,\n   THROWABLE TEXT\n );\n-CREATE INDEX SYNCOPEAUDIT_idx ON SYNCOPEAUDIT USING gin ((MESSAGE) jsonb_path_ops)\n+CREATE INDEX AuditEntry_idx ON AuditEntry USING gin ((MESSAGE) jsonb_path_ops)"},{"sha":"fe430c2fcdaa6222ef249f4481344e39239f274d","filename":"core/persistence-jpa-json/src/main/resources/myjson/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fmyjson%2Fpersistence.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONLoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"f8eb86e6f83ec54d62d0ab9055f35d026e7b2a30","filename":"core/persistence-jpa-json/src/main/resources/pgjsonb/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fpgjsonb%2Fpersistence.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONLoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"bf0e75a27b58df2bf856058f0f01ca260a0b5618","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -2428,48 +2428,48 @@ $$ }&#10;\n   <SyncopeRole_entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n   <SyncopeRole_entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n \n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AUTHENTICATION]:[validate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AuthenticationEvent]:[auth]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[confirmPasswordReset]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[mustChangePassword]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[requestPasswordReset]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfCreate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfStatus]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfUpdate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[status]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[provisionMembers]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[WA]:[]:[AUTHENTICATION]:[validate]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[WA]:[]:[AuthenticationEvent]:[auth]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[assign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[confirmPasswordReset]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[deprovision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[link]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[mustChangePassword]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[provision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[requestPasswordReset]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfCreate]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfStatus]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfUpdate]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[status]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[assign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[deprovision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[provisionMembers]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unassign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unlink]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n </dataset>"},{"sha":"d5825f6cca63d433e477106676fea223fa7150e5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -26,7 +26,6 @@\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -48,6 +47,7 @@\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.core.env.Environment;\n import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n \n @PropertySource(\"classpath:persistence.properties\")\n @PropertySource(value = \"file:${conf.directory}/persistence.properties\", ignoreResourceNotFound = true)\n@@ -182,13 +182,13 @@ public AnyObjectDAO anyObjectDAO()\n         return (AnyObjectDAO) Class.forName(env.getProperty(\"anyObject.dao\")).getConstructor().newInstance();\n     }\n \n-    @ConditionalOnMissingBean(name = \"loggerDAO\")\n+    @ConditionalOnMissingBean(name = \"auditDAO\")\n     @Bean\n-    public LoggerDAO loggerDAO()\n+    public AuditConfDAO auditDAO()\n             throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,\n             IllegalArgumentException, InvocationTargetException {\n \n-        return (LoggerDAO) Class.forName(env.getProperty(\"logger.dao\")).getConstructor().newInstance();\n+        return (AuditConfDAO) Class.forName(env.getProperty(\"audit.dao\")).getConstructor().newInstance();\n     }\n \n     @Bean"},{"sha":"7074f89c01b7b7d1552d8f59f73907b338d457bf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -71,7 +71,7 @@\n import org.apache.syncope.core.persistence.api.DomainHolder;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n import org.apache.syncope.core.persistence.api.content.ContentExporter;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAccessToken;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n@@ -109,7 +109,7 @@ public class XMLContentExporter implements ContentExporter {\n     private static final Logger LOG = LoggerFactory.getLogger(XMLContentExporter.class);\n \n     private static final Set<String> TABLE_PREFIXES_TO_BE_EXCLUDED = Stream.of(\n-            \"QRTZ_\", \"LOGGING\", \"NotificationTask_recipients\", LoggerDAO.AUDIT_TABLE, JPAReportExec.TABLE,\n+            \"QRTZ_\", \"LOGGING\", \"NotificationTask_recipients\", AuditConfDAO.AUDIT_ENTRY_TABLE, JPAReportExec.TABLE,\n             JPATaskExec.TABLE, JPAUser.TABLE, JPAUPlainAttr.TABLE, JPAUPlainAttrValue.TABLE,\n             JPAUPlainAttrUniqueValue.TABLE, JPAURelationship.TABLE, JPAUMembership.TABLE,\n             JPAAnyObject.TABLE, JPAAPlainAttr.TABLE, JPAAPlainAttrValue.TABLE, JPAAPlainAttrUniqueValue.TABLE,\n@@ -468,7 +468,7 @@ private Map<String, Pair<String, String>> relationTables(final BidiMap<String, E\n                         String tableName = joinTable.name();\n                         if (StringUtils.isBlank(tableName)) {\n                             tableName = entities.getKey(e) + \"_\"\n-                                    + entities.getKey((EntityType) ((PluralAttribute) a).getElementType());\n+                                    + entities.getKey(((PluralAttribute) a).getElementType());\n                         }\n \n                         relationTables.put("},{"sha":"cc30eadb972bb212f151eb428585d16eb510ffbe","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAuditConfDAO.java","status":"renamed","additions":25,"deletions":42,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAuditConfDAO.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -26,18 +26,16 @@\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n-import org.apache.syncope.core.persistence.jpa.entity.JPALogger;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAuditConf;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n \n-public class JPALoggerDAO extends AbstractDAO<Logger> implements LoggerDAO {\n+public class JPAAuditConfDAO extends AbstractDAO<AuditConf> implements AuditConfDAO {\n \n     protected static class MessageCriteriaBuilder {\n \n@@ -49,31 +47,31 @@ protected String andIfNeeded() {\n \n         protected MessageCriteriaBuilder entityKey(final String entityKey) {\n             if (entityKey != null) {\n-                query.append(andIfNeeded()).append(AUDIT_MESSAGE_COLUMN).\n+                query.append(andIfNeeded()).append(AUDIT_ENTRY_MESSAGE_COLUMN).\n                         append(\" LIKE '%key%\").append(entityKey).append(\"%'\");\n             }\n             return this;\n         }\n \n         public MessageCriteriaBuilder type(final AuditElements.EventCategoryType type) {\n             if (type != null) {\n-                query.append(andIfNeeded()).append(AUDIT_MESSAGE_COLUMN).\n+                query.append(andIfNeeded()).append(AUDIT_ENTRY_MESSAGE_COLUMN).\n                         append(\" LIKE '%\\\"type\\\":\\\"\").append(type.name()).append(\"\\\"%'\");\n             }\n             return this;\n         }\n \n         public MessageCriteriaBuilder category(final String category) {\n             if (StringUtils.isNotBlank(category)) {\n-                query.append(andIfNeeded()).append(AUDIT_MESSAGE_COLUMN).\n+                query.append(andIfNeeded()).append(AUDIT_ENTRY_MESSAGE_COLUMN).\n                         append(\" LIKE '%\\\"category\\\":\\\"\").append(category).append(\"\\\"%'\");\n             }\n             return this;\n         }\n \n         public MessageCriteriaBuilder subcategory(final String subcategory) {\n             if (StringUtils.isNotBlank(subcategory)) {\n-                query.append(andIfNeeded()).append(AUDIT_MESSAGE_COLUMN).\n+                query.append(andIfNeeded()).append(AUDIT_ENTRY_MESSAGE_COLUMN).\n                         append(\" LIKE '%\\\"subcategory\\\":\\\"\").append(subcategory).append(\"\\\"%'\");\n             }\n             return this;\n@@ -83,7 +81,7 @@ public MessageCriteriaBuilder events(final List<String> events) {\n             if (!events.isEmpty()) {\n                 query.append(andIfNeeded()).append(\"( \").\n                         append(events.stream().\n-                                map(event -> AUDIT_MESSAGE_COLUMN + \" LIKE '%\\\"event\\\":\\\"\" + event + \"\\\"%'\").\n+                                map(event -> AUDIT_ENTRY_MESSAGE_COLUMN + \" LIKE '%\\\"event\\\":\\\"\" + event + \"\\\"%'\").\n                                 collect(Collectors.joining(\" OR \"))).\n                         append(\" )\");\n             }\n@@ -92,7 +90,7 @@ public MessageCriteriaBuilder events(final List<String> events) {\n \n         public MessageCriteriaBuilder result(final AuditElements.Result result) {\n             if (result != null) {\n-                query.append(andIfNeeded()).append(AUDIT_MESSAGE_COLUMN).\n+                query.append(andIfNeeded()).append(AUDIT_ENTRY_MESSAGE_COLUMN).\n                         append(\" LIKE '%\\\"result\\\":\\\"\").append(result.name()).append(\"\\\"%' \");\n             }\n             return this;\n@@ -104,48 +102,33 @@ public String build() {\n     }\n \n     @Override\n-    public Logger find(final String key) {\n-        return entityManager().find(JPALogger.class, key);\n+    public AuditConf find(final String key) {\n+        return entityManager().find(JPAAuditConf.class, key);\n     }\n \n     @Override\n-    public List<Logger> findAll(final LoggerType type) {\n-        TypedQuery<Logger> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPALogger.class.getSimpleName() + \" e WHERE e.type=:type\", Logger.class);\n-        query.setParameter(\"type\", type);\n+    public List<AuditConf> findAll() {\n+        TypedQuery<AuditConf> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAuditConf.class.getSimpleName() + \" e \", AuditConf.class);\n         return query.getResultList();\n     }\n \n     @Override\n-    public Logger save(final Logger logger) {\n-        // Audit loggers must be either OFF or DEBUG, no more options\n-        if (LoggerType.AUDIT == logger.getType() && LoggerLevel.OFF != logger.getLevel()) {\n-            logger.setLevel(LoggerLevel.DEBUG);\n-        }\n-        return entityManager().merge(logger);\n-    }\n-\n-    @Override\n-    public void delete(final Logger logger) {\n-        entityManager().remove(logger);\n+    public AuditConf save(final AuditConf auditConf) {\n+        return entityManager().merge(auditConf);\n     }\n \n     @Override\n-    public void delete(final String key) {\n-        Logger logger = find(key);\n-        if (logger == null) {\n-            return;\n-        }\n-\n-        delete(logger);\n+    public void delete(final AuditConf auditConf) {\n+        entityManager().remove(auditConf);\n     }\n \n     protected MessageCriteriaBuilder messageCriteriaBuilder(final String entityKey) {\n         return new MessageCriteriaBuilder().entityKey(entityKey);\n     }\n \n     @Override\n-    public int countAuditEntries(\n+    public int countEntries(\n             final String entityKey,\n             final AuditElements.EventCategoryType type,\n             final String category,\n@@ -154,7 +137,7 @@ public int countAuditEntries(\n             final AuditElements.Result result) {\n \n         String queryString = \"SELECT COUNT(0)\"\n-                + \" FROM \" + AUDIT_TABLE\n+                + \" FROM \" + AUDIT_ENTRY_TABLE\n                 + \" WHERE \" + messageCriteriaBuilder(entityKey).\n                         type(type).\n                         category(category).\n@@ -168,12 +151,12 @@ public int countAuditEntries(\n     }\n \n     protected String select() {\n-        return AUDIT_MESSAGE_COLUMN;\n+        return AUDIT_ENTRY_MESSAGE_COLUMN;\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<AuditEntry> findAuditEntries(\n+    public List<AuditEntry> searchEntries(\n             final String entityKey,\n             final int page,\n             final int itemsPerPage,\n@@ -185,7 +168,7 @@ public List<AuditEntry> findAuditEntries(\n             final List<OrderByClause> orderByClauses) {\n \n         String queryString = \"SELECT \" + select()\n-                + \" FROM \" + AUDIT_TABLE\n+                + \" FROM \" + AUDIT_ENTRY_TABLE\n                 + \" WHERE \" + messageCriteriaBuilder(entityKey).\n                         type(type).\n                         category(category).","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPALoggerDAO.java"},{"sha":"77625268e3baa0763b04bae65df34ac6eb959866","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAuditConf.java","status":"renamed","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAuditConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAuditConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAuditConf.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -16,30 +16,31 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.common.lib.types;\n+package org.apache.syncope.core.persistence.jpa.entity;\n \n-import org.apache.commons.lang3.StringUtils;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n \n-public enum LoggerType {\n+@Entity\n+@Table(name = JPAAuditConf.TABLE)\n+public class JPAAuditConf extends AbstractProvidedKeyEntity implements AuditConf {\n \n-    /**\n-     * This type describes a common logger used to handle system and application events.\n-     */\n-    LOG(StringUtils.EMPTY),\n-    /**\n-     * Audit logger only focus on security related events, usually logging how did what and when.\n-     * In case of a security incident audit loggers should allow an administrator to recall all\n-     * actions a certain user has done.\n-     */\n-    AUDIT(\"syncope.audit\");\n+    private static final long serialVersionUID = 943012777014416027L;\n \n-    private final String prefix;\n+    public static final String TABLE = \"AuditConf\";\n \n-    LoggerType(final String prefix) {\n-        this.prefix = prefix;\n+    @NotNull\n+    private Boolean active = true;\n+\n+    @Override\n+    public boolean isActive() {\n+        return active;\n     }\n \n-    public String getPrefix() {\n-        return prefix;\n+    @Override\n+    public void setActive(final boolean active) {\n+        this.active = active;\n     }\n }","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/LoggerType.java"},{"sha":"0b1b3694fc17c7715252b4dbadd48a455492ec0d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -35,7 +35,6 @@\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -168,6 +167,7 @@\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.CASSPClientApp;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRPClientApp;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n \n public class JPAEntityFactory implements EntityFactory {\n \n@@ -302,8 +302,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAAnyTemplatePullTask();\n         } else if (reference.equals(SecurityQuestion.class)) {\n             result = (E) new JPASecurityQuestion();\n-        } else if (reference.equals(Logger.class)) {\n-            result = (E) new JPALogger();\n+        } else if (reference.equals(AuditConf.class)) {\n+            result = (E) new JPAAuditConf();\n         } else if (reference.equals(DynRoleMembership.class)) {\n             result = (E) new JPADynRoleMembership();\n         } else if (reference.equals(ADynGroupMembership.class)) {"},{"sha":"ce5e1abbb042d2626196e01d76d2d5dc2344db82","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPALogger.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPALogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPALogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPALogger.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,80 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.entity;\n-\n-import javax.persistence.Column;\n-import javax.persistence.Entity;\n-import javax.persistence.EnumType;\n-import javax.persistence.Enumerated;\n-import javax.persistence.Id;\n-import javax.persistence.Table;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n-\n-@Entity\n-@Table(name = JPALogger.TABLE)\n-public class JPALogger extends AbstractEntity implements Logger {\n-\n-    private static final long serialVersionUID = 943012777014416027L;\n-\n-    public static final String TABLE = \"SyncopeLogger\";\n-\n-    @Id\n-    @Column(name = \"logName\")\n-    private String key;\n-\n-    @Column(name = \"logLevel\", nullable = false)\n-    @Enumerated(EnumType.STRING)\n-    private LoggerLevel level;\n-\n-    @Column(name = \"logType\", nullable = false)\n-    @Enumerated(EnumType.STRING)\n-    private LoggerType type;\n-\n-    @Override\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    @Override\n-    public void setKey(final String name) {\n-        this.key = name;\n-    }\n-\n-    @Override\n-    public LoggerLevel getLevel() {\n-        return level;\n-    }\n-\n-    @Override\n-    public void setLevel(final LoggerLevel level) {\n-        this.level = level;\n-    }\n-\n-    @Override\n-    public LoggerType getType() {\n-        return type;\n-    }\n-\n-    @Override\n-    public void setType(final LoggerType type) {\n-        this.type = type;\n-    }\n-}"},{"sha":"23eefc2ce6682d19f2a07c4c4fc8054e5ac96285","filename":"core/persistence-jpa/src/main/resources/audit/audit.sql","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit.sql?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -15,7 +15,7 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n+CREATE TABLE IF NOT EXISTS AuditEntry (\n   EVENT_DATE TIMESTAMP,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,"},{"sha":"161234224fb4bac2ebe09c3f6c110435ff7b08cb","filename":"core/persistence-jpa/src/main/resources/audit/audit_mariadb.sql","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mariadb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mariadb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mariadb.sql?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -15,7 +15,7 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n+CREATE TABLE IF NOT EXISTS AuditEntry (\n   EVENT_DATE TIMESTAMP,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,"},{"sha":"e3ab42ebe5cd8713d7ae156808aed90fabdb28b2","filename":"core/persistence-jpa/src/main/resources/audit/audit_mysql_innodb.sql","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_mysql_innodb.sql?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -15,7 +15,7 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-CREATE TABLE IF NOT EXISTS SYNCOPEAUDIT (\n+CREATE TABLE IF NOT EXISTS AuditEntry (\n   EVENT_DATE TIMESTAMP,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,"},{"sha":"6dd4d0292157afe740b972dfcdfc026005ab19e5","filename":"core/persistence-jpa/src/main/resources/audit/audit_oracle.sql","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_oracle.sql?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -15,7 +15,7 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-CREATE TABLE SYNCOPEAUDIT (\n+CREATE TABLE AuditEntry (\n   EVENT_DATE TIMESTAMP,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,"},{"sha":"a802cdb99036c87a2ccc56521536bcdfb4cfd5c3","filename":"core/persistence-jpa/src/main/resources/audit/audit_sqlserver.sql","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Faudit%2Faudit_sqlserver.sql?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -15,10 +15,10 @@\n -- specific language governing permissions and limitations\n -- under the License.\n \n-IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[SYNCOPEAUDIT]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n-DROP TABLE [dbo].[SYNCOPEAUDIT];\n+IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[AuditEntry]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)\n+DROP TABLE [dbo].[AuditEntry];\n \n-CREATE TABLE SYNCOPEAUDIT (\n+CREATE TABLE AuditEntry (\n   EVENT_DATE DATETIME,\n   LOGGER_LEVEL VARCHAR(255) NOT NULL,\n   LOGGER VARCHAR(255) NOT NULL,"},{"sha":"0ed337d6cc62bf5bd4c2f9f6b2fa3bfdface88f5","filename":"core/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.JPALoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"239e2576127427137b79b41149567af214f3a30e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RoleTest.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRoleTest.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -57,9 +58,7 @@ public void findAll() {\n         List<Role> list = roleDAO.findAll();\n         assertNotNull(list);\n         assertFalse(list.isEmpty());\n-        for (Role role : list) {\n-            assertNotNull(role);\n-        }\n+        list.forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n@@ -68,8 +67,8 @@ public void save() {\n         role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.findByFullPath(\"/even/two\"));\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_UPDATE);\n \n         Role actual = roleDAO.save(role);\n         assertNotNull(actual);"},{"sha":"180d97ca8c651d02f7a1c376d27c4d41a0228c3a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -82,8 +82,8 @@ public void searchByDynMembership() {\n         role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.findByFullPath(\"/even/two\"));\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_UPDATE);\n \n         DynRoleMembership dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n         dynMembership.setFIQLCond(\"cool==true\");"},{"sha":"768e7e998f230c63810cbc22f96fb71af8d9a4b7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RoleTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRoleTest.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -120,8 +120,8 @@ public void dynMembership() {\n         role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.findByFullPath(\"/even/two\"));\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_UPDATE);\n \n         DynRoleMembership dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n         dynMembership.setFIQLCond(\"cool==true\");\n@@ -184,8 +184,8 @@ public void delete() {\n         role.setKey(\"new\");\n         role.add(realmDAO.getRoot());\n         role.add(realmDAO.findByFullPath(\"/even/two\"));\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_UPDATE);\n \n         role = roleDAO.save(role);\n         assertNotNull(role);"},{"sha":"25d377664a59d71ed7fc246a1891a926108fbeba","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -2515,48 +2515,48 @@ $$ }&#10;\n   <SyncopeRole_entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n   <SyncopeRole_entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n \n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AUTHENTICATION]:[validate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AuthenticationEvent]:[auth]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[confirmPasswordReset]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[mustChangePassword]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[requestPasswordReset]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfCreate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfStatus]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfUpdate]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[status]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[provisionMembers]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n-  <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[WA]:[]:[AUTHENTICATION]:[validate]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[WA]:[]:[AuthenticationEvent]:[auth]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[ConnectorLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[assign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[confirmPasswordReset]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[deprovision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[link]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[mustChangePassword]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[provision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[requestPasswordReset]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfCreate]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfStatus]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[selfUpdate]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[status]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unassign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[unlink]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[UserLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[assign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[deprovision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[provisionMembers]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unassign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[unlink]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[GroupLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n+\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[assign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[create]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[delete]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[deprovision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[link]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[provision]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unassign]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[unlink]:[SUCCESS]\" active=\"1\"/>\n+  <AuditConf id=\"syncope.audit.[LOGIC]:[AnyObjectLogic]:[]:[update]:[SUCCESS]\" active=\"1\"/>\n \n </dataset>"},{"sha":"f7ecfbf6884536ed2d4a13a6a47ee92b901e9690","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AuditDataBinder.java","status":"renamed","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAuditDataBinder.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -18,13 +18,10 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n \n-public interface LoggerDataBinder {\n+public interface AuditDataBinder {\n \n-    LoggerTO getLoggerTO(Logger logger);\n-\n-    LoggerTO getLoggerTO(AuditLoggerName auditLoggerName);\n+    AuditConfTO getAuditTO(AuditConf audit);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/LoggerDataBinder.java"},{"sha":"ce9b6311580578027a68ff962f6a02db6284a361","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAuditManager.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAuditManager.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -22,17 +22,15 @@\n import java.util.Date;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.provisioning.api.event.AfterHandlingEvent;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -41,6 +39,8 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n \n @Transactional(readOnly = true)\n public class DefaultAuditManager implements AuditManager {\n@@ -77,7 +77,7 @@ private static Object maskSensitive(final Object object) {\n     }\n \n     @Autowired\n-    private LoggerDAO loggerDAO;\n+    private AuditConfDAO auditDAO;\n \n     @Override\n     public boolean auditRequested(\n@@ -92,18 +92,17 @@ public boolean auditRequested(\n         auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, Result.SUCCESS));\n         auditEntry.setDate(new Date());\n \n-        org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n-                loggerDAO.find(auditEntry.getLogger().toLoggerName());\n-        boolean auditRequested = syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG;\n+        AuditConf audit = auditDAO.find(auditEntry.getLogger().toAuditKey());\n+        boolean auditRequested = audit != null && audit.isActive();\n \n         if (auditRequested) {\n             return true;\n         }\n \n         auditEntry.setLogger(new AuditLoggerName(type, category, subcategory, event, Result.FAILURE));\n \n-        syncopeLogger = loggerDAO.find(auditEntry.getLogger().toLoggerName());\n-        auditRequested = syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG;\n+        audit = auditDAO.find(auditEntry.getLogger().toAuditKey());\n+        auditRequested = audit != null && audit.isActive();\n \n         return auditRequested;\n     }\n@@ -138,9 +137,8 @@ public void audit(\n \n         AuditLoggerName auditLoggerName = new AuditLoggerName(type, category, subcategory, event, condition);\n \n-        org.apache.syncope.core.persistence.api.entity.Logger syncopeLogger =\n-                loggerDAO.find(auditLoggerName.toLoggerName());\n-        if (syncopeLogger != null && syncopeLogger.getLevel() == LoggerLevel.DEBUG) {\n+        AuditConf audit = auditDAO.find(auditLoggerName.toAuditKey());\n+        if (audit != null && audit.isActive()) {\n             Throwable throwable = null;\n             if (output instanceof Throwable) {\n                 throwable = (Throwable) output;\n@@ -166,7 +164,7 @@ public void audit(\n             Logger logger = LoggerFactory.getLogger(\n                     AuditLoggerName.getAuditLoggerName(AuthContextUtils.getDomain()));\n             Logger eventLogger = LoggerFactory.getLogger(\n-                    AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), syncopeLogger.getKey()));\n+                    AuditLoggerName.getAuditEventLoggerName(AuthContextUtils.getDomain(), audit.getKey()));\n             String serializedAuditEntry = POJOHelper.serialize(auditEntry);\n \n             if (throwable == null) {"},{"sha":"a74d0cc8a0896498713dd5870c477bf77f08ace2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AuditDataBinderImpl.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAuditDataBinderImpl.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n+import org.apache.syncope.core.persistence.api.entity.AuditConf;\n+\n+@Component\n+public class AuditDataBinderImpl implements AuditDataBinder {\n+\n+    @Override\n+    public AuditConfTO getAuditTO(final AuditConf audit) {\n+        AuditConfTO auditTO = new AuditConfTO();\n+        auditTO.setKey(audit.getKey());\n+        auditTO.setActive(audit.isActive());\n+        return auditTO;\n+    }\n+}"},{"sha":"906c92dc111a98e9d76e8df9a254c571c90dce20","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/LoggerDataBinderImpl.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FLoggerDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FLoggerDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FLoggerDataBinderImpl.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,46 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.data;\n-\n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.core.persistence.api.entity.Logger;\n-import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.provisioning.api.data.LoggerDataBinder;\n-\n-@Component\n-public class LoggerDataBinderImpl implements LoggerDataBinder {\n-\n-    @Override\n-    public LoggerTO getLoggerTO(final Logger logger) {\n-        LoggerTO loggerTO = new LoggerTO();\n-        loggerTO.setKey(logger.getKey());\n-        loggerTO.setLevel(logger.getLevel());\n-        return loggerTO;\n-    }\n-\n-    @Override\n-    public LoggerTO getLoggerTO(final AuditLoggerName auditLoggerName) {\n-        LoggerTO loggerTO = new LoggerTO();\n-        loggerTO.setKey(auditLoggerName.toLoggerName());\n-        loggerTO.setLevel(LoggerLevel.DEBUG);\n-        return loggerTO;\n-    }\n-}"},{"sha":"beccfc044b5885bb388be189e44aca95d8a990bb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AuditReportlet.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -23,11 +23,10 @@\n import java.util.concurrent.atomic.AtomicReference;\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n-import org.apache.syncope.core.persistence.api.dao.LoggerDAO;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n@@ -36,6 +35,7 @@\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n import org.xml.sax.helpers.AttributesImpl;\n+import org.apache.syncope.core.persistence.api.dao.AuditConfDAO;\n \n @ReportletConfClass(AuditReportletConf.class)\n public class AuditReportlet extends AbstractReportlet {\n@@ -48,12 +48,12 @@ public class AuditReportlet extends AbstractReportlet {\n     private DataSource datasource;\n \n     private void doExtractConf(final ContentHandler handler, final AtomicReference<String> status) throws SAXException {\n-        status.set(\"Fetching \" + conf.getSize() + \" rows from the \" + LoggerDAO.AUDIT_TABLE + \" table\");\n+        status.set(\"Fetching \" + conf.getSize() + \" rows from the \" + AuditConfDAO.AUDIT_ENTRY_TABLE + \" table\");\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(datasource);\n         jdbcTemplate.setMaxRows(conf.getSize());\n         List<Map<String, Object>> rows = jdbcTemplate.\n-                queryForList(\"SELECT * FROM \" + LoggerDAO.AUDIT_TABLE + \" ORDER BY EVENT_DATE DESC\");\n+                queryForList(\"SELECT * FROM \" + AuditConfDAO.AUDIT_ENTRY_TABLE + \" ORDER BY EVENT_DATE DESC\");\n \n         handler.startElement(\"\", \"\", \"events\", null);\n         AttributesImpl atts = new AttributesImpl();\n@@ -119,7 +119,7 @@ private void doExtractConf(final ContentHandler handler, final AtomicReference<S\n         }\n         handler.endElement(\"\", \"\", \"events\");\n \n-        status.set(\"Fetched \" + conf.getSize() + \" rows from the SYNCOPEAUDIT table\");\n+        status.set(\"Fetched \" + conf.getSize() + \" rows from the \" + AuditConfDAO.AUDIT_ENTRY_TABLE + \" table\");\n     }\n \n     @Override"},{"sha":"d9796f2192370f47ee2d8581350c91bb4591a442","filename":"docker/core/src/main/resources/log4j2.xml","status":"modified","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -25,151 +25,111 @@ under the License.\n       <PatternLayout pattern=\"%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} %highlight{${LOG_LEVEL_PATTERN:-%5p}}{FATAL=red blink, ERROR=red, WARN=yellow bold, INFO=green, DEBUG=green bold, TRACE=blue} [%11.11t] %style{%-60.60c{60}}{cyan} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}\"/>\n     </Console>\n \n-    <Memory name=\"main\" size=\"25\"/>\n-\n-    <Memory name=\"persistence\" size=\"25\"/>\n-\n-    <Memory name=\"rest\" size=\"25\"/>\n-\n-    <Memory name=\"connid\" size=\"25\"/>\n-    \n   </appenders>\n   \n   <loggers>\n     \n     <asyncLogger name=\"org.apache.syncope.core.persistence\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework.orm\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.openjpa\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.ibatis\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.apache.syncope.core.rest\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework.web\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.http\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.identityconnectors\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     <asyncLogger name=\"net.tirasa.connid\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning.api.ConnIdBundleManager\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.logic\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.quartz\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.flowable\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"liquibase\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.cocoon\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.fop\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.wss4j\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.xml\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.opensaml\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"io.swagger\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.reflections\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.elasticsearch\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"io.netty\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"com.zaxxer.hikari\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     \n     <!-- To enable when setting 'mail.debug=true' in mail.properties -->\n     <!--<asyncLogger name=\"org.apache.syncope.core.provisioning.java.job.notification\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"javax.mail\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </asyncLogger>-->\n     \n     <root level=\"INFO\">\n       <appender-ref ref=\"console\"/>\n-      <appender-ref ref=\"main\"/>\n     </root>\n     \n   </loggers>"},{"sha":"34293b8b332c6413eb29c1c0f80e397e30182f82","filename":"docker/core/src/main/resources/persistence.properties.all","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.all?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.JPALoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditConfDAO\n openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}"},{"sha":"f32258e7e8f7f7f080445644b77532c1368ee882","filename":"docker/core/src/main/resources/persistence.properties.myjson","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.myjson?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -25,5 +25,5 @@ user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n conf.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONConfDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONLoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"ab20e0ddb4b14858c89be34241b716f36d8644d6","filename":"docker/core/src/main/resources/persistence.properties.pgjsonb","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties.pgjsonb?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONLoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditConfDAO\n openjpa.RemoteCommitProvider=${OPENJPA_REMOTE_COMMIT}"},{"sha":"6cbab3802bf5caa88fcb1ae9c7c2a85a1f5a22fb","filename":"ext/elasticsearch/persistence-jpa/src/main/resources/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fpersistence.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.JPALoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"cbe4f44a02a8fa8ed7300bfd830d46083bd8117d","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileAuditAppender.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileAuditAppender.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -57,13 +57,13 @@ public Set<AuditLoggerName> getEvents() {\n     protected void initTargetAppender() {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n         // get log file path from existing file appender\n-        RollingRandomAccessFileAppender mainFile =\n-                (RollingRandomAccessFileAppender) ctx.getConfiguration().getAppender(\"mainFile\");\n+        RollingRandomAccessFileAppender main =\n+                (RollingRandomAccessFileAppender) ctx.getConfiguration().getAppender(\"main\");\n \n-        String pathPrefix = mainFile == null\n+        String pathPrefix = main == null\n                 ? System.getProperty(\"user.dir\") + StringUtils.replace(\"/target/log\", \"/\", File.separator)\n                 + File.separator\n-                : StringUtils.replace(mainFile.getFileName(), \"core.log\", StringUtils.EMPTY);\n+                : StringUtils.replace(main.getFileName(), \"core.log\", StringUtils.EMPTY);\n \n         targetAppender = FileAppender.newBuilder().\n                 setName(getTargetAppenderName())."},{"sha":"afc7528d8535a882aef088d627c1a178ca2fc53a","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestFileRewriteAuditAppender.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestFileRewriteAuditAppender.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -49,9 +49,9 @@ protected void initTargetAppender() {\n         LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n \n         // get log file path from existing file appender\n-        RollingRandomAccessFileAppender mainFile =\n-                (RollingRandomAccessFileAppender) ctx.getConfiguration().getAppender(\"mainFile\");\n-        String pathPrefix = StringUtils.replace(mainFile.getFileName(), \"core.log\", StringUtils.EMPTY);\n+        RollingRandomAccessFileAppender main =\n+                (RollingRandomAccessFileAppender) ctx.getConfiguration().getAppender(\"main\");\n+        String pathPrefix = StringUtils.replace(main.getFileName(), \"core.log\", StringUtils.EMPTY);\n \n         targetAppender = FileAppender.newBuilder().\n                 setName(getTargetAppenderName())."},{"sha":"6cbab3802bf5caa88fcb1ae9c7c2a85a1f5a22fb","filename":"fit/core-reference/src/main/resources/elasticsearch/persistence.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Felasticsearch%2Fpersistence.properties?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -24,5 +24,5 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.JPALoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.JPAAuditConfDAO\n openjpa.RemoteCommitProvider=sjvm"},{"sha":"acecff4fb39adc18375743675ae7eddc7cd777c5","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":4,"deletions":44,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -21,7 +21,7 @@ under the License.\n \n   <appenders>\n \n-    <RollingRandomAccessFile name=\"mainFile\" fileName=\"${log.directory}/core.log\"\n+    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/core.log\"\n                              filePattern=\"${log.directory}/core-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n@@ -32,9 +32,8 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n-    <Memory name=\"main\" size=\"25\"/>\n \n-    <RollingRandomAccessFile name=\"persistenceFile\" fileName=\"${log.directory}/core-persistence.log\"\n+    <RollingRandomAccessFile name=\"persistence\" fileName=\"${log.directory}/core-persistence.log\"\n                              filePattern=\"${log.directory}/core-persistence-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n@@ -45,9 +44,8 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n-    <Memory name=\"persistence\" size=\"25\"/>\n \n-    <RollingRandomAccessFile name=\"restFile\" fileName=\"${log.directory}/core-rest.log\"\n+    <RollingRandomAccessFile name=\"rest\" fileName=\"${log.directory}/core-rest.log\"\n                              filePattern=\"${log.directory}/core-rest-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n@@ -58,9 +56,8 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n-    <Memory name=\"rest\" size=\"25\"/>\n \n-    <RollingRandomAccessFile name=\"connidFile\" fileName=\"${log.directory}/core-connid.log\"\n+    <RollingRandomAccessFile name=\"connid\" fileName=\"${log.directory}/core-connid.log\"\n                              filePattern=\"${log.directory}/core-connid-%d{yyyy-MM-dd}.log.gz\"\n                              immediateFlush=\"false\" append=\"true\">\n       <PatternLayout>\n@@ -71,160 +68,123 @@ under the License.\n         <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n       </Policies>\n     </RollingRandomAccessFile>\n-    <Memory name=\"connid\" size=\"25\"/>\n     \n   </appenders>\n   \n   <loggers>\n     \n     <asyncLogger name=\"org.apache.syncope.core.persistence\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"persistenceFile\"/>\n       <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework.orm\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"persistenceFile\"/>\n       <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.openjpa\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"persistenceFile\"/>\n       <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.ibatis\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"persistenceFile\"/>\n       <appender-ref ref=\"persistence\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.apache.syncope.core.rest\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"restFile\"/>\n       <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework.web\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"restFile\"/>\n       <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.http\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"restFile\"/>\n       <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"restFile\"/>\n       <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.ext.self.keymaster\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"restFile\"/>\n       <appender-ref ref=\"rest\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.identityconnectors\" additivity=\"false\" level=\"DEBUG\">\n-      <appender-ref ref=\"connidFile\"/>\n       <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     <asyncLogger name=\"net.tirasa.connid\" additivity=\"false\" level=\"DEBUG\">\n-      <appender-ref ref=\"connidFile\"/>\n       <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning.api.ConnIdBundleManager\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"connidFile\"/>\n       <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     \n     <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.provisioning\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.syncope.core.logic\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.quartz\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.flowable\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"liquibase\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.cocoon\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.fop\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.wss4j\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.xml\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.bval\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.opensaml\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"io.swagger\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.reflections\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.elasticsearch\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"io.netty\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"com.zaxxer.hikari\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.zookeeper\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"org.apache.curator\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     \n     <!-- To enable when setting 'mail.debug=true' in mail.properties -->\n     <!--<asyncLogger name=\"org.apache.syncope.core.provisioning.java.job.notification\" additivity=\"false\" level=\"DEBUG\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     <asyncLogger name=\"javax.mail\" additivity=\"false\" level=\"DEBUG\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>-->\n     \n     <root level=\"INFO\">\n-      <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </root>\n     "},{"sha":"8770f2f5db2b4be8b52aee2a1f50d7ec82cac77a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -63,7 +63,7 @@\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.UserUR;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.GroupCR;\n@@ -114,7 +114,6 @@\n import org.apache.syncope.common.rest.api.service.ClientAppService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.NotificationService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthAccountService;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n@@ -161,6 +160,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+import org.apache.syncope.common.rest.api.service.AuditService;\n \n @SpringJUnitConfig({ CoreITContext.class, SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })\n public abstract class AbstractITCase {\n@@ -287,7 +287,7 @@ public abstract class AbstractITCase {\n \n     protected static ConnectorService connectorService;\n \n-    protected static LoggerService loggerService;\n+    protected static AuditService auditService;\n \n     protected static ReportTemplateService reportTemplateService;\n \n@@ -402,7 +402,7 @@ public static void restSetup() {\n         groupService = adminClient.getService(GroupService.class);\n         resourceService = adminClient.getService(ResourceService.class);\n         connectorService = adminClient.getService(ConnectorService.class);\n-        loggerService = adminClient.getService(LoggerService.class);\n+        auditService = adminClient.getService(AuditService.class);\n         reportTemplateService = adminClient.getService(ReportTemplateService.class);\n         reportService = adminClient.getService(ReportService.class);\n         taskService = adminClient.getService(TaskService.class);\n@@ -891,7 +891,7 @@ protected List<AuditEntry> query(final AuditQuery query, final int maxWaitSecond\n                 Thread.sleep(1000);\n             } catch (InterruptedException e) {\n             }\n-            results = loggerService.search(query).getResult();\n+            results = auditService.search(query).getResult();\n             i++;\n         } while (results.isEmpty() && i < maxWaitSeconds);\n         return results;"},{"sha":"b67c386dac46786ca885d3c81262be7a98114356","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/AbstractConsoleITCase.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FAbstractConsoleITCase.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -46,6 +46,7 @@\n import org.apache.wicket.util.tester.WicketTester;\n import org.junit.jupiter.api.BeforeAll;\n import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n+import org.springframework.boot.logging.LoggingSystem;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -111,6 +112,12 @@ public UserFormFinalizerUtils userFormFinalizerUtils() {\n         public PolicyTabProvider idRepoPolicyTabProvider() {\n             return new IdRepoPolicyTabProvider();\n         }\n+\n+        @Bean\n+        public LoggingSystem loggingSystem() {\n+            System.setProperty(LoggingSystem.SYSTEM_PROPERTY, LoggingSystem.NONE);\n+            return LoggingSystem.get(getClass().getClassLoader());\n+        }\n     }\n \n     @BeforeAll"},{"sha":"07c94896fff0522ed875ea4e327b982a98751213","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/console/LogsITCase.java","status":"modified","additions":7,"deletions":35,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fconsole%2FLogsITCase.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -23,9 +23,7 @@\n import java.lang.reflect.InvocationTargetException;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.console.pages.Logs;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n import org.apache.wicket.Component;\n-import org.apache.wicket.ajax.markup.html.AjaxFallbackLink;\n import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n@@ -47,15 +45,15 @@ public void login() {\n     }\n \n     @Test\n-    public void readCoreLogs() {\n+    public void readLogs() {\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:0:link\");\n         TESTER.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n \n         assertNotNull(searchLog(KEY, CONTAINER_PATH, \"io.swagger\"));\n     }\n \n     @Test\n-    public void updateCoreLogs() {\n+    public void updateLogs() {\n         TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:0:link\");\n         TESTER.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n \n@@ -73,42 +71,16 @@ public void updateCoreLogs() {\n         assertSuccessMessage();\n     }\n \n-    @Test\n-    public void readConsoleLogs() {\n-        TESTER.assertComponent(\"body:content:tabbedPanel:tabs-container:tabs:1:link\", AjaxFallbackLink.class);\n-        TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:1:link\");\n-        TESTER.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n-\n-        assertNotNull(searchLog(KEY, CONTAINER_PATH, \"org.apache.wicket\"));\n-    }\n-\n-    @Test\n-    public void updateConsoleLogs() {\n-        TESTER.clickLink(\"body:content:tabbedPanel:tabs-container:tabs:1:link\");\n-        TESTER.assertComponent(CONTAINER_PATH, WebMarkupContainer.class);\n-\n-        Component result = searchLog(KEY, CONTAINER_PATH, \"org.apache.wicket\");\n-        assertNotNull(result);\n-\n-        TESTER.getRequest().setMethod(Form.METHOD_GET);\n-        TESTER.getRequest().addParameter(\n-                result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", \"6\");\n-        TESTER.assertComponent(\n-                result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", DropDownChoice.class);\n-        TESTER.executeAjaxEvent(\n-                result.getPageRelativePath() + \":fields:1:field:dropDownChoiceField\", Constants.ON_CHANGE);\n-\n-        assertSuccessMessage();\n-    }\n-\n     private static Component searchLog(final String property, final String searchPath, final String key) {\n         Component component = TESTER.getComponentFromLastRenderedPage(searchPath);\n \n         Component result = component.getPage().\n-                visitChildren(ListItem.class, (final ListItem<LoggerTO> object, final IVisit<Component> visit) -> {\n+                visitChildren(ListItem.class, (final ListItem<?> object, final IVisit<Component> visit) -> {\n                     try {\n-                        if (object.getModelObject() instanceof LoggerTO && PropertyResolver.getPropertyGetter(\n-                                property, object.getModelObject()).invoke(object.getModelObject()).equals(key)) {\n+                        if (\"LoggerConf\".equals(object.getModelObject().getClass().getSimpleName())\n+                                && PropertyResolver.getPropertyGetter(property, object.getModelObject()).\n+                                        invoke(object.getModelObject()).equals(key)) {\n+\n                             visit.stop(object);\n                         }\n                     } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {"},{"sha":"d93f7903f6fe44b22617bce0b153cd1061ad4461","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuditITCase.java","status":"modified","additions":345,"deletions":5,"changes":350,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuditITCase.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -18,31 +18,61 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.awaitility.Awaitility.await;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Properties;\n import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n+import org.apache.syncope.common.lib.audit.EventCategory;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.AuditQuery;\n+import org.apache.syncope.common.rest.api.beans.ReconQuery;\n import org.apache.syncope.core.logic.ConnectorLogic;\n+import org.apache.syncope.core.logic.GroupLogic;\n+import org.apache.syncope.core.logic.ReportLogic;\n+import org.apache.syncope.core.logic.ResourceLogic;\n import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n@@ -185,7 +215,7 @@ public void findByConnector() throws JsonProcessingException {\n                 event(\"update\").\n                 result(AuditElements.Result.SUCCESS).\n                 build();\n-        List<AuditEntry> entries = loggerService.search(query).getResult();\n+        List<AuditEntry> entries = auditService.search(query).getResult();\n         int pre = entries.size();\n \n         ConnInstanceTO ldapConn = connectorService.read(connectorKey, null);\n@@ -217,4 +247,314 @@ public void findByConnector() throws JsonProcessingException {\n         assertEquals(originalCapabilities, ldapConn.getCapabilities());\n         assertEquals(originalConfProp, ldapConn.getConf(\"maintainPosixGroupMembership\").get());\n     }\n+\n+    @Test\n+    public void enableDisable() {\n+        AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                AuditElements.EventCategoryType.LOGIC,\n+                ReportLogic.class.getSimpleName(),\n+                null,\n+                \"deleteExecution\",\n+                AuditElements.Result.FAILURE);\n+\n+        List<AuditConfTO> audits = auditService.list();\n+        assertFalse(audits.stream().anyMatch(a -> a.getKey().equals(auditLoggerName.toAuditKey())));\n+\n+        AuditConfTO audit = new AuditConfTO();\n+        audit.setKey(auditLoggerName.toAuditKey());\n+        audit.setActive(true);\n+        auditService.create(audit);\n+\n+        audits = auditService.list();\n+        assertTrue(audits.stream().anyMatch(a -> a.getKey().equals(auditLoggerName.toAuditKey())));\n+\n+        auditService.delete(audit.getKey());\n+\n+        audits = auditService.list();\n+        assertFalse(audits.stream().anyMatch(a -> a.getKey().equals(auditLoggerName.toAuditKey())));\n+    }\n+\n+    @Test\n+    public void listAuditEvents() {\n+        List<EventCategory> events = auditService.events();\n+\n+        boolean found = false;\n+\n+        for (EventCategory eventCategoryTO : events) {\n+            if (UserLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(AuditElements.EventCategoryType.LOGIC, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"search\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"doCreate\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"setStatusOnWfAdapter\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategory eventCategoryTO : events) {\n+            if (GroupLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(AuditElements.EventCategoryType.LOGIC, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"search\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategory eventCategoryTO : events) {\n+            if (ResourceLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n+                assertEquals(AuditElements.EventCategoryType.LOGIC, eventCategoryTO.getType());\n+                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"read\"));\n+                assertTrue(eventCategoryTO.getEvents().contains(\"delete\"));\n+                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategory eventCategoryTO : events) {\n+            if (AnyTypeKind.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n+                if (RESOURCE_NAME_LDAP.equals(eventCategoryTO.getSubcategory())\n+                        && AuditElements.EventCategoryType.PULL == eventCategoryTO.getType()) {\n+\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n+                    found = true;\n+                }\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategory eventCategoryTO : events) {\n+            if (AnyTypeKind.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n+                if (RESOURCE_NAME_CSV.equals(eventCategoryTO.getSubcategory())\n+                        && AuditElements.EventCategoryType.PROPAGATION == eventCategoryTO.getType()) {\n+\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n+                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n+                    found = true;\n+                }\n+            }\n+        }\n+        assertTrue(found);\n+\n+        found = false;\n+        for (EventCategory eventCategoryTO : events) {\n+            if (AuditElements.EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && \"PullJobDelegate\".equals(eventCategoryTO.getCategory())) {\n+                found = true;\n+            }\n+        }\n+        assertTrue(found);\n+    }\n+\n+    private static void checkLogFileFor(\n+            final Path path,\n+            final Function<String, Boolean> checker,\n+            final int maxWaitSeconds)\n+            throws IOException {\n+\n+        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n+            try {\n+                return checker.apply(Files.readString(path, StandardCharsets.UTF_8));\n+            } catch (Exception e) {\n+                return false;\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void saveAuditEvent() {\n+        AuditEntry auditEntry = new AuditEntry();\n+        auditEntry.setWho(\"syncope-user \" + UUID.randomUUID().toString());\n+        auditEntry.setLogger(new AuditLoggerName(\n+                AuditElements.EventCategoryType.WA,\n+                null,\n+                AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n+                \"validate\",\n+                AuditElements.Result.SUCCESS));\n+        auditEntry.setDate(new Date());\n+        auditEntry.setBefore(UUID.randomUUID().toString());\n+        auditEntry.setOutput(UUID.randomUUID().toString());\n+        assertDoesNotThrow(() -> auditService.create(auditEntry));\n+\n+        PagedResult<AuditEntry> events = auditService.search(new AuditQuery.Builder().\n+                size(1).\n+                type(auditEntry.getLogger().getType()).\n+                category(auditEntry.getLogger().getCategory()).\n+                subcategory(auditEntry.getLogger().getSubcategory()).\n+                event(auditEntry.getLogger().getEvent()).\n+                result(auditEntry.getLogger().getResult()).\n+                build());\n+        assertNotNull(events);\n+        assertEquals(1, events.getSize());\n+    }\n+\n+    @Test\n+    public void saveAuthEvent() {\n+        AuditEntry auditEntry = new AuditEntry();\n+        auditEntry.setWho(\"syncope-user \" + UUID.randomUUID().toString());\n+        auditEntry.setLogger(new AuditLoggerName(\n+                AuditElements.EventCategoryType.WA,\n+                null,\n+                \"AuthenticationEvent\",\n+                \"auth\",\n+                AuditElements.Result.SUCCESS));\n+        auditEntry.setDate(new Date());\n+        auditEntry.setBefore(UUID.randomUUID().toString());\n+        auditEntry.setOutput(UUID.randomUUID().toString());\n+        assertDoesNotThrow(() -> auditService.create(auditEntry));\n+\n+        PagedResult<AuditEntry> events = auditService.search(new AuditQuery.Builder().\n+                size(1).\n+                type(auditEntry.getLogger().getType()).\n+                category(auditEntry.getLogger().getCategory()).\n+                subcategory(auditEntry.getLogger().getSubcategory()).\n+                event(auditEntry.getLogger().getEvent()).\n+                result(auditEntry.getLogger().getResult()).\n+                build());\n+        assertNotNull(events);\n+        assertEquals(1, events.getSize());\n+    }\n+\n+    @Test\n+    public void customAuditAppender() throws IOException, InterruptedException {\n+        try (InputStream propStream = getClass().getResourceAsStream(\"/test.properties\")) {\n+            Properties props = new Properties();\n+            props.load(propStream);\n+\n+            Path auditFilePath = Paths.get(props.getProperty(\"test.log.dir\")\n+                    + File.separator + \"audit_for_Master_file.log\");\n+            Files.write(auditFilePath, new byte[0], StandardOpenOption.TRUNCATE_EXISTING);\n+\n+            Path auditNoRewriteFilePath = Paths.get(props.getProperty(\"test.log.dir\")\n+                    + File.separator + \"audit_for_Master_norewrite_file.log\");\n+            Files.write(auditNoRewriteFilePath, new byte[0], StandardOpenOption.TRUNCATE_EXISTING);\n+\n+            // check that resource update is transformed and logged onto an audit file.\n+            ResourceTO resource = resourceService.read(RESOURCE_NAME_CSV);\n+            assertNotNull(resource);\n+            resource.setPropagationPriority(100);\n+            resourceService.update(resource);\n+\n+            ConnInstanceTO connector = connectorService.readByResource(RESOURCE_NAME_CSV, null);\n+            assertNotNull(connector);\n+            connector.setPoolConf(new ConnPoolConfTO());\n+            connectorService.update(connector);\n+\n+            // check audit_for_Master_file.log, it should contain only a static message\n+            checkLogFileFor(\n+                    auditFilePath,\n+                    content -> content.contains(\n+                            \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n+                            + \" - This is a static test message\"),\n+                    10);\n+\n+            // nothing expected in audit_for_Master_norewrite_file.log instead\n+            checkLogFileFor(\n+                    auditNoRewriteFilePath,\n+                    content -> !content.contains(\n+                            \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n+                            + \" - This is a static test message\"),\n+                    10);\n+        } catch (IOException e) {\n+            fail(\"Unable to read/write log files\", e);\n+        }\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE976() {\n+        List<EventCategory> events = auditService.events();\n+        assertNotNull(events);\n+\n+        EventCategory userLogic = events.stream().\n+                filter(object -> \"UserLogic\".equals(object.getCategory())).findAny().get();\n+        assertNotNull(userLogic);\n+        assertEquals(1, userLogic.getEvents().stream().filter(\"create\"::equals).count());\n+    }\n+\n+    @Test\n+    public void issueSYNCOPE1446() {\n+        AuditLoggerName createSuccess = new AuditLoggerName(\n+                AuditElements.EventCategoryType.PROPAGATION,\n+                AnyTypeKind.ANY_OBJECT.name().toLowerCase(),\n+                RESOURCE_NAME_DBSCRIPTED,\n+                \"create\",\n+                AuditElements.Result.SUCCESS);\n+        AuditLoggerName createFailure = new AuditLoggerName(\n+                AuditElements.EventCategoryType.PROPAGATION,\n+                AnyTypeKind.ANY_OBJECT.name().toLowerCase(),\n+                RESOURCE_NAME_DBSCRIPTED,\n+                \"create\",\n+                AuditElements.Result.FAILURE);\n+        AuditLoggerName updateSuccess = new AuditLoggerName(\n+                AuditElements.EventCategoryType.PROPAGATION,\n+                AnyTypeKind.ANY_OBJECT.name().toLowerCase(),\n+                RESOURCE_NAME_DBSCRIPTED,\n+                \"update\",\n+                AuditElements.Result.SUCCESS);\n+        AuditLoggerName updateFailure = new AuditLoggerName(\n+                AuditElements.EventCategoryType.PROPAGATION,\n+                AnyTypeKind.ANY_OBJECT.name().toLowerCase(),\n+                RESOURCE_NAME_DBSCRIPTED,\n+                \"update\",\n+                AuditElements.Result.FAILURE);\n+        try {\n+            // 1. setup audit for propagation\n+            AuditConfTO audit = new AuditConfTO();\n+            audit.setKey(createSuccess.toAuditKey());\n+            audit.setActive(true);\n+            auditService.create(audit);\n+\n+            audit.setKey(createFailure.toAuditKey());\n+            auditService.create(audit);\n+\n+            audit.setKey(updateSuccess.toAuditKey());\n+            auditService.create(audit);\n+\n+            audit.setKey(updateFailure.toAuditKey());\n+            auditService.create(audit);\n+\n+            // 2. push on resource\n+            PushTaskTO pushTask = new PushTaskTO();\n+            pushTask.setPerformCreate(true);\n+            pushTask.setPerformUpdate(true);\n+            pushTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n+            pushTask.setMatchingRule(MatchingRule.UPDATE);\n+            reconciliationService.push(new ReconQuery.Builder(PRINTER, RESOURCE_NAME_DBSCRIPTED).\n+                    anyKey(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").build(), pushTask);\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected exception\", e);\n+            fail(e::getMessage);\n+        } finally {\n+            try {\n+                auditService.delete(createSuccess.toAuditKey());\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+            try {\n+                auditService.delete(createFailure.toAuditKey());\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+            try {\n+                auditService.delete(updateSuccess.toAuditKey());\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+            try {\n+                auditService.delete(updateFailure.toAuditKey());\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+        }\n+    }\n }"},{"sha":"21b9877ca5ab8388b2355d3f13b30f5a7f2927d1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DelegationITCase.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDelegationITCase.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -35,16 +35,14 @@\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n import org.apache.syncope.common.lib.to.DelegationTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.common.rest.api.beans.AuditQuery;\n import org.apache.syncope.common.rest.api.service.DelegationService;\n@@ -206,10 +204,10 @@ public void operations() {\n                 null,\n                 \"search\",\n                 AuditElements.Result.SUCCESS);\n-        LoggerTO authLogin = new LoggerTO();\n-        authLogin.setKey(authLoginSuccess.toLoggerName());\n-        authLogin.setLevel(LoggerLevel.DEBUG);\n-        loggerService.update(LoggerType.AUDIT, authLogin);\n+        AuditConfTO authLogin = new AuditConfTO();\n+        authLogin.setKey(authLoginSuccess.toAuditKey());\n+        authLogin.setActive(true);\n+        auditService.create(authLogin);\n \n         // 1. bellini delegates rossini\n         DelegationTO delegation = new DelegationTO();\n@@ -266,7 +264,7 @@ public void operations() {\n         assertTrue(entries.stream().anyMatch(entry -> \"rossini [delegated by bellini]\".equals(entry.getWho())));\n \n         // 6. disable audit\n-        authLogin.setLevel(LoggerLevel.OFF);\n-        loggerService.update(LoggerType.AUDIT, authLogin);\n+        authLogin.setActive(false);\n+        auditService.update(authLogin);\n     }\n }"},{"sha":"227350fedc32415608c2d9fc5e8c3da06ced5fbc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"removed","additions":0,"deletions":517,"changes":517,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/2a4b485a935b097a07e9b925bcaca5afa3150b51/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/2a4b485a935b097a07e9b925bcaca5afa3150b51/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=2a4b485a935b097a07e9b925bcaca5afa3150b51","patch":"@@ -1,517 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.fit.core;\n-\n-import static org.awaitility.Awaitility.await;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardOpenOption;\n-import java.text.ParseException;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Properties;\n-import java.util.UUID;\n-import java.util.concurrent.TimeUnit;\n-import java.util.function.Function;\n-import javax.ws.rs.core.Response;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n-import org.apache.syncope.common.lib.log.EventCategory;\n-import org.apache.syncope.common.lib.log.LogAppender;\n-import org.apache.syncope.common.lib.log.LogStatement;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n-import org.apache.syncope.common.lib.to.ConnInstanceTO;\n-import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n-import org.apache.syncope.common.lib.to.PagedResult;\n-import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.to.ResourceTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n-import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n-import org.apache.syncope.common.lib.types.MatchingRule;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.common.lib.types.UnmatchingRule;\n-import org.apache.syncope.common.rest.api.LoggerWrapper;\n-import org.apache.syncope.common.rest.api.beans.AuditQuery;\n-import org.apache.syncope.common.rest.api.beans.ReconQuery;\n-import org.apache.syncope.core.logic.ConnectorLogic;\n-import org.apache.syncope.core.logic.ReportLogic;\n-import org.apache.syncope.core.logic.ResourceLogic;\n-import org.apache.syncope.core.logic.GroupLogic;\n-import org.apache.syncope.core.logic.UserLogic;\n-import org.apache.syncope.fit.AbstractITCase;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-\n-public class LoggerITCase extends AbstractITCase {\n-\n-    @Test\n-    public void listMemoryAppenders() {\n-        List<LogAppender> memoryAppenders = loggerService.memoryAppenders();\n-        assertNotNull(memoryAppenders);\n-        assertFalse(memoryAppenders.isEmpty());\n-        memoryAppenders.forEach(appender -> {\n-            assertNotNull(appender);\n-            assertNotNull(appender.getName());\n-        });\n-    }\n-\n-    @Test\n-    public void lastStatements() {\n-        List<LogStatement> statements = loggerService.getLastLogStatements(\"connid\");\n-        assertNotNull(statements);\n-        assertFalse(statements.isEmpty());\n-\n-        LogStatement statement = statements.get(0);\n-        assertNotNull(statement);\n-        assertNotNull(statement.getLoggerName());\n-        assertNotNull(statement.getLevel());\n-        assertNotNull(statement.getMessage());\n-        assertNotNull(statement.getTimeMillis());\n-    }\n-\n-    @Test\n-    public void listLogs() {\n-        List<LoggerTO> loggers = loggerService.list(LoggerType.LOG);\n-        assertNotNull(loggers);\n-        assertFalse(loggers.isEmpty());\n-        loggers.forEach(Assertions::assertNotNull);\n-    }\n-\n-    @Test\n-    public void listAudits() throws ParseException {\n-        List<LoggerTO> audits = loggerService.list(LoggerType.AUDIT);\n-        assertNotNull(audits);\n-        assertFalse(audits.isEmpty());\n-        for (LoggerTO audit : audits) {\n-            assertNotNull(AuditLoggerName.fromLoggerName(audit.getKey()));\n-        }\n-    }\n-\n-    @Test\n-    public void setLevel() {\n-        List<LoggerTO> loggers = loggerService.list(LoggerType.LOG);\n-        assertNotNull(loggers);\n-        int startSize = loggers.size();\n-\n-        LoggerTO logger = new LoggerTO();\n-        logger.setKey(\"TEST\");\n-        logger.setLevel(LoggerLevel.INFO);\n-        loggerService.update(LoggerType.LOG, logger);\n-        logger = loggerService.read(LoggerType.LOG, logger.getKey());\n-        assertNotNull(logger);\n-        assertEquals(LoggerLevel.INFO, logger.getLevel());\n-\n-        loggers = loggerService.list(LoggerType.LOG);\n-        assertNotNull(loggers);\n-        assertEquals(startSize + 1, loggers.size());\n-\n-        // TEST Delete\n-        loggerService.delete(LoggerType.LOG, \"TEST\");\n-        loggers = loggerService.list(LoggerType.LOG);\n-        assertNotNull(loggers);\n-        assertEquals(startSize, loggers.size());\n-    }\n-\n-    @Test\n-    public void enableDisableAudit() {\n-        AuditLoggerName auditLoggerName = new AuditLoggerName(\n-                EventCategoryType.LOGIC,\n-                ReportLogic.class.getSimpleName(),\n-                null,\n-                \"deleteExecution\",\n-                AuditElements.Result.FAILURE);\n-\n-        List<AuditLoggerName> audits = LoggerWrapper.wrap(loggerService.list(LoggerType.AUDIT));\n-        assertNotNull(audits);\n-        assertFalse(audits.contains(auditLoggerName));\n-\n-        LoggerTO loggerTO = new LoggerTO();\n-        loggerTO.setKey(auditLoggerName.toLoggerName());\n-        loggerTO.setLevel(LoggerLevel.DEBUG);\n-        loggerService.update(LoggerType.AUDIT, loggerTO);\n-\n-        audits = LoggerWrapper.wrap(loggerService.list(LoggerType.AUDIT));\n-        assertNotNull(audits);\n-        assertTrue(audits.contains(auditLoggerName));\n-\n-        loggerService.delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n-\n-        audits = LoggerWrapper.wrap(loggerService.list(LoggerType.AUDIT));\n-        assertNotNull(audits);\n-        assertFalse(audits.contains(auditLoggerName));\n-    }\n-\n-    @Test\n-    public void listAuditEvents() {\n-        final List<EventCategory> events = loggerService.events();\n-\n-        boolean found = false;\n-\n-        for (EventCategory eventCategoryTO : events) {\n-            if (UserLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n-                assertEquals(EventCategoryType.LOGIC, eventCategoryTO.getType());\n-                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n-                assertTrue(eventCategoryTO.getEvents().contains(\"search\"));\n-                assertFalse(eventCategoryTO.getEvents().contains(\"doCreate\"));\n-                assertFalse(eventCategoryTO.getEvents().contains(\"setStatusOnWfAdapter\"));\n-                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n-                found = true;\n-            }\n-        }\n-        assertTrue(found);\n-\n-        found = false;\n-        for (EventCategory eventCategoryTO : events) {\n-            if (GroupLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n-                assertEquals(EventCategoryType.LOGIC, eventCategoryTO.getType());\n-                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n-                assertTrue(eventCategoryTO.getEvents().contains(\"search\"));\n-                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n-                found = true;\n-            }\n-        }\n-        assertTrue(found);\n-\n-        found = false;\n-        for (EventCategory eventCategoryTO : events) {\n-            if (ResourceLogic.class.getSimpleName().equals(eventCategoryTO.getCategory())) {\n-                assertEquals(EventCategoryType.LOGIC, eventCategoryTO.getType());\n-                assertTrue(eventCategoryTO.getEvents().contains(\"create\"));\n-                assertTrue(eventCategoryTO.getEvents().contains(\"read\"));\n-                assertTrue(eventCategoryTO.getEvents().contains(\"delete\"));\n-                assertFalse(eventCategoryTO.getEvents().contains(\"resolveReference\"));\n-                found = true;\n-            }\n-        }\n-        assertTrue(found);\n-\n-        found = false;\n-        for (EventCategory eventCategoryTO : events) {\n-            if (AnyTypeKind.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n-                if (RESOURCE_NAME_LDAP.equals(eventCategoryTO.getSubcategory())\n-                        && EventCategoryType.PULL == eventCategoryTO.getType()) {\n-\n-                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n-                    found = true;\n-                }\n-            }\n-        }\n-        assertTrue(found);\n-\n-        found = false;\n-        for (EventCategory eventCategoryTO : events) {\n-            if (AnyTypeKind.USER.name().toLowerCase().equals(eventCategoryTO.getCategory())) {\n-                if (RESOURCE_NAME_CSV.equals(eventCategoryTO.getSubcategory())\n-                        && EventCategoryType.PROPAGATION == eventCategoryTO.getType()) {\n-\n-                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.CREATE.name().toLowerCase()));\n-                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.UPDATE.name().toLowerCase()));\n-                    assertTrue(eventCategoryTO.getEvents().contains(ResourceOperation.DELETE.name().toLowerCase()));\n-                    found = true;\n-                }\n-            }\n-        }\n-        assertTrue(found);\n-\n-        found = false;\n-        for (EventCategory eventCategoryTO : events) {\n-            if (EventCategoryType.TASK == eventCategoryTO.getType()\n-                    && \"PullJobDelegate\".equals(eventCategoryTO.getCategory())) {\n-                found = true;\n-            }\n-        }\n-        assertTrue(found);\n-    }\n-\n-    private static void checkLogFileFor(\n-            final Path path,\n-            final Function<String, Boolean> checker,\n-            final int maxWaitSeconds)\n-            throws IOException {\n-\n-        await().atMost(maxWaitSeconds, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS).until(() -> {\n-            try {\n-                return checker.apply(Files.readString(path, StandardCharsets.UTF_8));\n-            } catch (Exception e) {\n-                return false;\n-            }\n-        });\n-    }\n-\n-    @Test\n-    public void saveAuditEvent() {\n-        AuditEntry auditEntry = new AuditEntry();\n-        auditEntry.setWho(\"syncope-user \" + UUID.randomUUID().toString());\n-        auditEntry.setLogger(new AuditLoggerName(\n-                EventCategoryType.WA,\n-                \"LoggerLogic\",\n-                AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n-                \"validate\",\n-                AuditElements.Result.SUCCESS));\n-        auditEntry.setDate(new Date());\n-        auditEntry.setBefore(UUID.randomUUID().toString());\n-        auditEntry.setOutput(UUID.randomUUID().toString());\n-        assertDoesNotThrow(() -> loggerService.create(auditEntry));\n-\n-        PagedResult<AuditEntry> events = loggerService.search(new AuditQuery.Builder().\n-                size(1).\n-                type(auditEntry.getLogger().getType()).\n-                category(auditEntry.getLogger().getCategory()).\n-                subcategory(auditEntry.getLogger().getSubcategory()).\n-                event(auditEntry.getLogger().getEvent()).\n-                result(auditEntry.getLogger().getResult()).\n-                build());\n-        assertNotNull(events);\n-        assertEquals(1, events.getSize());\n-    }\n-    \n-    @Test\n-    public void saveAuthEvent() {\n-        AuditEntry auditEntry = new AuditEntry();\n-        auditEntry.setWho(\"syncope-user \" + UUID.randomUUID().toString());\n-        auditEntry.setLogger(new AuditLoggerName(\n-                EventCategoryType.WA,\n-                \"LoggerLogic\",\n-                \"AuthenticationEvent\",\n-                \"auth\",\n-                AuditElements.Result.SUCCESS));\n-        auditEntry.setDate(new Date());\n-        auditEntry.setBefore(UUID.randomUUID().toString());\n-        auditEntry.setOutput(UUID.randomUUID().toString());\n-        assertDoesNotThrow(() -> loggerService.create(auditEntry));\n-\n-        PagedResult<AuditEntry> events = loggerService.search(new AuditQuery.Builder().\n-                size(1).\n-                type(auditEntry.getLogger().getType()).\n-                category(auditEntry.getLogger().getCategory()).\n-                subcategory(auditEntry.getLogger().getSubcategory()).\n-                event(auditEntry.getLogger().getEvent()).\n-                result(auditEntry.getLogger().getResult()).\n-                build());\n-        assertNotNull(events);\n-        assertEquals(1, events.getSize());\n-    }\n-\n-    @Test\n-    public void customAuditAppender() throws IOException, InterruptedException {\n-        AuditLoggerName auditLoggerResUpd = new AuditLoggerName(\n-                EventCategoryType.LOGIC,\n-                ResourceLogic.class.getSimpleName(),\n-                null,\n-                \"update\",\n-                AuditElements.Result.SUCCESS);\n-        LoggerTO resUpd = new LoggerTO();\n-        resUpd.setKey(auditLoggerResUpd.toLoggerName());\n-\n-        AuditLoggerName auditLoggerConnUpd = new AuditLoggerName(\n-                EventCategoryType.LOGIC,\n-                ConnectorLogic.class.getSimpleName(),\n-                null,\n-                \"update\",\n-                AuditElements.Result.SUCCESS);\n-        LoggerTO connUpd = new LoggerTO();\n-        connUpd.setKey(auditLoggerConnUpd.toLoggerName());\n-\n-        try (InputStream propStream = getClass().getResourceAsStream(\"/test.properties\")) {\n-            Properties props = new Properties();\n-            props.load(propStream);\n-\n-            Path auditFilePath = Paths.get(props.getProperty(\"test.log.dir\")\n-                    + File.separator + \"audit_for_Master_file.log\");\n-            Files.write(auditFilePath, new byte[0], StandardOpenOption.TRUNCATE_EXISTING);\n-\n-            Path auditNoRewriteFilePath = Paths.get(props.getProperty(\"test.log.dir\")\n-                    + File.separator + \"audit_for_Master_norewrite_file.log\");\n-            Files.write(auditNoRewriteFilePath, new byte[0], StandardOpenOption.TRUNCATE_EXISTING);\n-\n-            // 1. Enable audit for resource update -> catched by FileRewriteAuditAppender\n-            resUpd.setLevel(LoggerLevel.DEBUG);\n-            loggerService.update(LoggerType.AUDIT, resUpd);\n-\n-            // 2. Enable audit for connector update -> NOT catched by FileRewriteAuditAppender\n-            connUpd.setLevel(LoggerLevel.DEBUG);\n-            loggerService.update(LoggerType.AUDIT, connUpd);\n-\n-            // 3. check that resource update is transformed and logged onto an audit file.\n-            ResourceTO resource = resourceService.read(RESOURCE_NAME_CSV);\n-            assertNotNull(resource);\n-            resource.setPropagationPriority(100);\n-            resourceService.update(resource);\n-\n-            ConnInstanceTO connector = connectorService.readByResource(RESOURCE_NAME_CSV, null);\n-            assertNotNull(connector);\n-            connector.setPoolConf(new ConnPoolConfTO());\n-            connectorService.update(connector);\n-\n-            // check audit_for_Master_file.log, it should contain only a static message\n-            checkLogFileFor(\n-                    auditFilePath,\n-                    content -> content.contains(\n-                            \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n-                            + \" - This is a static test message\"),\n-                    10);\n-\n-            // nothing expected in audit_for_Master_norewrite_file.log instead\n-            checkLogFileFor(\n-                    auditNoRewriteFilePath,\n-                    content -> !content.contains(\n-                            \"DEBUG Master.syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\"\n-                            + \" - This is a static test message\"),\n-                    10);\n-\n-            // clean audit_for_Master_file.log\n-            Files.write(auditFilePath, new byte[0], StandardOpenOption.TRUNCATE_EXISTING);\n-            loggerService.delete(LoggerType.AUDIT, \"syncope.audit.[LOGIC]:[ResourceLogic]:[]:[update]:[SUCCESS]\");\n-\n-            resource = resourceService.read(RESOURCE_NAME_CSV);\n-            assertNotNull(resource);\n-            resource.setPropagationPriority(200);\n-            resourceService.update(resource);\n-\n-            // check that nothing has been written to audit_for_Master_file.log\n-            assertTrue(StringUtils.isEmpty(Files.readString(auditFilePath, StandardCharsets.UTF_8)));\n-        } catch (IOException e) {\n-            fail(\"Unable to read/write log files\", e);\n-        } finally {\n-            resUpd.setLevel(LoggerLevel.ERROR);\n-            loggerService.update(LoggerType.AUDIT, resUpd);\n-\n-            connUpd.setLevel(LoggerLevel.ERROR);\n-            loggerService.update(LoggerType.AUDIT, connUpd);\n-        }\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE708() {\n-        try {\n-            loggerService.read(LoggerType.LOG, \"notExists\");\n-            fail(\"Reading non-existing logger, it should go in exception\");\n-        } catch (final WebServiceException ex) {\n-            fail(\"Exception is WebServiceException but it should be SyncopeClientException\");\n-        } catch (final SyncopeClientException ex) {\n-            assertEquals(Response.Status.NOT_FOUND, ex.getType().getResponseStatus());\n-        }\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE976() {\n-        List<EventCategory> events = loggerService.events();\n-        assertNotNull(events);\n-\n-        EventCategory userLogic = events.stream().\n-                filter(object -> \"UserLogic\".equals(object.getCategory())).findAny().get();\n-        assertNotNull(userLogic);\n-        assertEquals(1, userLogic.getEvents().stream().filter(\"create\"::equals).count());\n-    }\n-\n-    @Test\n-    public void issueSYNCOPE1446() {\n-        AuditLoggerName createSuccess = new AuditLoggerName(\n-                AuditElements.EventCategoryType.PROPAGATION,\n-                AnyTypeKind.ANY_OBJECT.name().toLowerCase(),\n-                RESOURCE_NAME_DBSCRIPTED,\n-                \"create\",\n-                AuditElements.Result.SUCCESS);\n-        AuditLoggerName createFailure = new AuditLoggerName(\n-                AuditElements.EventCategoryType.PROPAGATION,\n-                AnyTypeKind.ANY_OBJECT.name().toLowerCase(),\n-                RESOURCE_NAME_DBSCRIPTED,\n-                \"create\",\n-                AuditElements.Result.FAILURE);\n-        AuditLoggerName updateSuccess = new AuditLoggerName(\n-                AuditElements.EventCategoryType.PROPAGATION,\n-                AnyTypeKind.ANY_OBJECT.name().toLowerCase(),\n-                RESOURCE_NAME_DBSCRIPTED,\n-                \"update\",\n-                AuditElements.Result.SUCCESS);\n-        AuditLoggerName updateFailure = new AuditLoggerName(\n-                AuditElements.EventCategoryType.PROPAGATION,\n-                AnyTypeKind.ANY_OBJECT.name().toLowerCase(),\n-                RESOURCE_NAME_DBSCRIPTED,\n-                \"update\",\n-                AuditElements.Result.FAILURE);\n-        try {\n-            // 1. setup audit for propagation\n-            LoggerTO loggerTO = new LoggerTO();\n-            loggerTO.setKey(createSuccess.toLoggerName());\n-            loggerTO.setLevel(LoggerLevel.DEBUG);\n-            loggerService.update(LoggerType.AUDIT, loggerTO);\n-\n-            loggerTO.setKey(createFailure.toLoggerName());\n-            loggerService.update(LoggerType.AUDIT, loggerTO);\n-\n-            loggerTO.setKey(updateSuccess.toLoggerName());\n-            loggerService.update(LoggerType.AUDIT, loggerTO);\n-\n-            loggerTO.setKey(updateFailure.toLoggerName());\n-            loggerService.update(LoggerType.AUDIT, loggerTO);\n-\n-            // 2. push on resource\n-            PushTaskTO pushTask = new PushTaskTO();\n-            pushTask.setPerformCreate(true);\n-            pushTask.setPerformUpdate(true);\n-            pushTask.setUnmatchingRule(UnmatchingRule.PROVISION);\n-            pushTask.setMatchingRule(MatchingRule.UPDATE);\n-            reconciliationService.push(new ReconQuery.Builder(PRINTER, RESOURCE_NAME_DBSCRIPTED).\n-                    anyKey(\"fc6dbc3a-6c07-4965-8781-921e7401a4a5\").build(), pushTask);\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception\", e);\n-            fail(e::getMessage);\n-        } finally {\n-            try {\n-                loggerService.delete(LoggerType.AUDIT, createSuccess.toLoggerName());\n-            } catch (Exception e) {\n-                // ignore\n-            }\n-            try {\n-                loggerService.delete(LoggerType.AUDIT, createFailure.toLoggerName());\n-            } catch (Exception e) {\n-                // ignore\n-            }\n-            try {\n-                loggerService.delete(LoggerType.AUDIT, updateSuccess.toLoggerName());\n-            } catch (Exception e) {\n-                // ignore\n-            }\n-            try {\n-                loggerService.delete(LoggerType.AUDIT, updateFailure.toLoggerName());\n-            } catch (Exception e) {\n-                // ignore\n-            }\n-        }\n-    }\n-}"},{"sha":"02175e16d53b5c62cf17efa7f75d971e60d0c32f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -27,7 +27,6 @@\n \n import java.util.List;\n import java.util.Locale;\n-import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n@@ -51,7 +50,6 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.ExecStatus;\n import org.apache.syncope.common.lib.types.MatchingRule;\n@@ -64,7 +62,6 @@\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.common.rest.api.service.ReconciliationService;\n import org.apache.syncope.common.rest.api.service.ResourceService;\n@@ -97,18 +94,6 @@ public void multitenancyCheck() {\n         adminClient = clientFactory.create(ADMIN_UNAME, \"password2\");\n     }\n \n-    @Test\n-    public void masterOnly() {\n-        try {\n-            adminClient.getService(LoggerService.class).list(LoggerType.LOG);\n-            fail(\"This should not happen\");\n-        } catch (ForbiddenException e) {\n-            assertNotNull(e);\n-        }\n-\n-        adminClient.getService(LoggerService.class).list(LoggerType.AUDIT);\n-    }\n-\n     @Test\n     public void readPlainSchemas() {\n         assertEquals(1, adminClient.getService(SchemaService.class)."},{"sha":"2dcd233e30e342208b6b812d7f2545f6ad8ced6e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.report.AuditReportletConf;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n-import org.apache.syncope.common.lib.log.LoggerTO;\n+import org.apache.syncope.common.lib.to.AuditConfTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n@@ -48,8 +48,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n-import org.apache.syncope.common.lib.types.LoggerLevel;\n-import org.apache.syncope.common.lib.types.LoggerType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -303,10 +301,9 @@ public void auditReport() throws IOException {\n                 AuditElements.Result.SUCCESS);\n \n         try {\n-            LoggerTO loggerTO = new LoggerTO();\n-            loggerTO.setKey(auditLoggerName.toLoggerName());\n-            loggerTO.setLevel(LoggerLevel.DEBUG);\n-            loggerService.update(LoggerType.AUDIT, loggerTO);\n+            AuditConfTO audit = new AuditConfTO();\n+            audit.setKey(auditLoggerName.toAuditKey());\n+            auditService.create(audit);\n \n             ImplementationTO auditReportlet = new ImplementationTO();\n             auditReportlet.setKey(\"UserReportletConf\" + getUUIDString());\n@@ -329,7 +326,7 @@ public void auditReport() throws IOException {\n             report = reportService.read(report.getKey());\n             assertNotNull(report.getLastExec());\n         } finally {\n-            loggerService.delete(LoggerType.AUDIT, auditLoggerName.toLoggerName());\n+            auditService.delete(auditLoggerName.toAuditKey());\n         }\n     }\n "},{"sha":"6f5e2cc1a0f0a0ee58b2c84e2ff1a72a4a12beca","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RoleITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRoleITCase.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -45,7 +45,7 @@ public static RoleTO getSampleRoleTO(final String name) {\n         RoleTO role = new RoleTO();\n         role.setKey(name + getUUIDString());\n         role.getRealms().add(\"/even\");\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_UPDATE);\n \n         return role;\n     }\n@@ -70,8 +70,8 @@ public void create() {\n         RoleTO role = new RoleTO();\n         role.getRealms().add(SyncopeConstants.ROOT_REALM);\n         role.getRealms().add(\"/even/two\");\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_SET_LEVEL);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_CREATE);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_UPDATE);\n \n         try {\n             createRole(role);\n@@ -89,7 +89,7 @@ public void create() {\n     public void createWithTilde() {\n         RoleTO role = new RoleTO();\n         role.getRealms().add(SyncopeConstants.ROOT_REALM);\n-        role.getEntitlements().add(IdRepoEntitlement.LOG_LIST);\n+        role.getEntitlements().add(IdRepoEntitlement.AUDIT_UPDATE);\n         role.setKey(\"new~\" + getUUIDString());\n         role = createRole(role);\n         assertNotNull(role);"},{"sha":"000547b66b983b41f4e1e1d0c1d61baad3253649","filename":"pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -1742,11 +1742,6 @@ under the License.\n         <artifactId>slf4j-api</artifactId>\n         <version>${slf4j.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>org.apache.logging.log4j</groupId>\n-        <artifactId>log4j-api</artifactId>\n-        <version>${log4j.version}</version>\n-      </dependency>\n       <dependency>\n         <groupId>org.apache.logging.log4j</groupId>\n         <artifactId>log4j-core</artifactId>"},{"sha":"5bbaaae7242141d12d74826ef972d4c62709fe8c","filename":"src/main/asciidoc/reference-guide/concepts/audit.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Faudit.adoc?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -20,7 +20,7 @@\n \n The audit feature allows to capture <<audit-events,events>> occurring within the <<core>> and to log relevant information\n about them. +\n-By default, events are logged as entries into the `SYNCOPEAUDIT` table of the internal storage.\n+By default, events are logged as entries into the `AuditEntry` table of the internal storage.\n \n Once events are reported, they can be used as input for external tools.\n \n@@ -36,7 +36,7 @@ except for the admin console <<console-configuration-audit,tooling>>, which is n\n \n ==== Audit Appenders\n \n-In addition to insertions into the `SYNCOPEAUDIT` table, events are also available for custom handling via Audit\n+In addition to insertions into the `AuditEntry` table, events are also available for custom handling via Audit\n Appenders, based on https://logging.apache.org/log4j/2.x/manual/appenders.html[Apache Log4j 2 Appenders^]. +\n This allows to empower the available implementations or to write new ones in order to route audit messages, with optional\n transformation (rewrite), to files, queues, sockets, syslog, etc."},{"sha":"1118406888b227a27979b7e026db0b5d66cfb773","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/dbms.adoc","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Fdbms.adoc?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -91,7 +91,7 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONLoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.PGJPAJSONAuditConfDAO\n ....\n \n In `provisioning.properties`, replace as follows:\n@@ -224,7 +224,7 @@ any.search.visitor=org.apache.syncope.core.persistence.api.search.SearchCondVisi\n user.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONUserDAO\n group.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONGroupDAO\n anyObject.dao=org.apache.syncope.core.persistence.jpa.dao.JPAJSONAnyObjectDAO\n-logger.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONLoggerDAO\n+audit.dao=org.apache.syncope.core.persistence.jpa.dao.MyJPAJSONAuditConfDAO\n ....\n \n In `provisioning.properties`, replace as follows:"},{"sha":"d76814f58b2b7667d3323aaf2bbb90f5f3da2188","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManager.java","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManager.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -25,21 +25,16 @@\n import org.apereo.cas.audit.spi.AbstractAuditTrailManager;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.common.rest.api.service.AuditService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.inspektr.audit.AuditActionContext;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.apache.syncope.client.lib.SyncopeClient;\n \n public class SyncopeWAAuditTrailManager extends AbstractAuditTrailManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWAAuditTrailManager.class);\n-\n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n \n     private final WARestClient waRestClient;\n@@ -71,12 +66,14 @@ protected void saveAuditRecord(final AuditActionContext audit) {\n                     ? AuditElements.Result.FAILURE\n                     : AuditElements.Result.SUCCESS;\n \n-            AuditLoggerName auditLogger = new AuditLoggerName(AuditElements.EventCategoryType.WA,\n-                    \"LoggerLogic\", AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n-                    audit.getActionPerformed(), result);\n-\n+            AuditLoggerName auditLogger = new AuditLoggerName(\n+                    AuditElements.EventCategoryType.WA,\n+                    null,\n+                    AuditElements.AUTHENTICATION_CATEGORY.toUpperCase(),\n+                    audit.getActionPerformed(),\n+                    result);\n             auditEntry.setLogger(auditLogger);\n-            syncopeClient.getService(LoggerService.class).create(auditEntry);\n+            syncopeClient.getService(AuditService.class).create(auditEntry);\n         } catch (JsonProcessingException e) {\n             LOG.error(\"During serialization\", e);\n         }"},{"sha":"1286ea11141648c89abeb313c675c1f60bbdb9a4","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/events/SyncopeWAEventRepository.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepository.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -26,10 +26,10 @@\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditLoggerName;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.common.rest.api.service.AuditService;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apereo.cas.support.events.CasEventRepositoryFilter;\n import org.apereo.cas.support.events.dao.AbstractCasEventRepository;\n@@ -85,11 +85,14 @@ public void saveInternal(final CasEvent event) {\n                 auditEntry.setDate(new Date(event.getTimestamp()));\n             }\n             auditEntry.setOutput(output);\n-            AuditLoggerName auditLogger = new AuditLoggerName(AuditElements.EventCategoryType.WA,\n-                    \"LoggerLogic\", event.getType().toUpperCase(),\n-                    String.valueOf(event.getId()), AuditElements.Result.SUCCESS);\n+            AuditLoggerName auditLogger = new AuditLoggerName(\n+                    AuditElements.EventCategoryType.WA,\n+                    null,\n+                    event.getType().toUpperCase(),\n+                    String.valueOf(event.getId()),\n+                    AuditElements.Result.SUCCESS);\n             auditEntry.setLogger(auditLogger);\n-            syncopeClient.getService(LoggerService.class).create(auditEntry);\n+            syncopeClient.getService(AuditService.class).create(auditEntry);\n         } catch (JsonProcessingException e) {\n             LOG.error(\"During serialization\", e);\n         }\n@@ -99,5 +102,4 @@ public void saveInternal(final CasEvent event) {\n     public Collection<? extends CasEvent> load() {\n         throw new UnsupportedOperationException(\"Fetching authentication events from WA is not supported\");\n     }\n-\n }"},{"sha":"7c2a352e0e91c63d08033907f49279cbd7ff6069","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/audit/SyncopeWAAuditTrailManagerTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Faudit%2FSyncopeWAAuditTrailManagerTest.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -25,24 +25,24 @@\n \n import java.util.Date;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.syncope.wa.starter.AbstractTest;\n import org.apereo.inspektr.audit.AuditActionContext;\n import org.junit.jupiter.api.Test;\n+import org.apache.syncope.common.rest.api.service.AuditService;\n \n public class SyncopeWAAuditTrailManagerTest extends AbstractTest {\n \n-    private static LoggerService loggerService;\n+    private static AuditService loggerService;\n \n     private static WARestClient getWaRestClient() {\n         WARestClient restClient = mock(WARestClient.class);\n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        loggerService = mock(LoggerService.class);\n+        loggerService = mock(AuditService.class);\n \n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n-        when(syncopeClient.getService(LoggerService.class)).thenReturn(loggerService);\n+        when(syncopeClient.getService(AuditService.class)).thenReturn(loggerService);\n \n         return restClient;\n     }"},{"sha":"cd6ac5a35ee6c134a5b138159f34bb494e3b56ff","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/events/SyncopeWAEventRepositoryTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/74a626cf4b860b947c21e88d9d0983b79e34d126/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepositoryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/74a626cf4b860b947c21e88d9d0983b79e34d126/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepositoryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fevents%2FSyncopeWAEventRepositoryTest.java?ref=74a626cf4b860b947c21e88d9d0983b79e34d126","patch":"@@ -25,25 +25,25 @@\n \n import java.util.Map;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.common.lib.log.AuditEntry;\n-import org.apache.syncope.common.rest.api.service.LoggerService;\n+import org.apache.syncope.common.lib.audit.AuditEntry;\n import org.apache.syncope.wa.bootstrap.WARestClient;\n import org.apache.syncope.wa.starter.AbstractTest;\n import org.apereo.cas.support.events.CasEventRepositoryFilter;\n import org.apereo.cas.support.events.dao.CasEvent;\n import org.junit.jupiter.api.Test;\n+import org.apache.syncope.common.rest.api.service.AuditService;\n \n public class SyncopeWAEventRepositoryTest extends AbstractTest {\n \n-    private static LoggerService loggerService;\n+    private static AuditService auditService;\n \n     private static WARestClient getWaRestClient() {\n         WARestClient restClient = mock(WARestClient.class);\n         SyncopeClient syncopeClient = mock(SyncopeClient.class);\n-        loggerService = mock(LoggerService.class);\n+        auditService = mock(AuditService.class);\n \n         when(restClient.getSyncopeClient()).thenReturn(syncopeClient);\n-        when(syncopeClient.getService(LoggerService.class)).thenReturn(loggerService);\n+        when(syncopeClient.getService(AuditService.class)).thenReturn(auditService);\n \n         return restClient;\n     }\n@@ -54,7 +54,7 @@ public void saveInternal() {\n         SyncopeWAEventRepository eventRepository = new SyncopeWAEventRepository(CasEventRepositoryFilter.noOp(),\n                 getWaRestClient());\n         eventRepository.saveInternal(event);\n-        verify(loggerService).create(any(AuditEntry.class));\n+        verify(auditService).create(any(AuditEntry.class));\n     }\n \n }"}]}