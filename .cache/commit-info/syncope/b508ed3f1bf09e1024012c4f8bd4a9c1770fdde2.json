{"sha":"b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI1MDhlZDNmMWJmMDllMTAyNDAxMmM0ZjhiZDRhOWMxNzcwZmRkZTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-06-26T12:45:09Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-06-26T14:47:22Z"},"message":"[SYNCOPE-1455] Initial auth support (with session and cache management) + implementation for OAuth2 and OIDC (SAML2 and WA missing)","tree":{"sha":"c6575c165eb36c0229440da9843cf8a5e2921f0a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c6575c165eb36c0229440da9843cf8a5e2921f0a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b7bff16870e22cadce534daeaef3c8511152bb7d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b7bff16870e22cadce534daeaef3c8511152bb7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b7bff16870e22cadce534daeaef3c8511152bb7d"}],"stats":{"total":2420,"additions":1910,"deletions":510},"files":[{"sha":"bf21b023b1d86d716fef4eb4a8fa7c3aa02c811e","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/SRA.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -23,7 +23,7 @@\n import java.util.List;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.annotations.AMPage;\n-import org.apache.syncope.client.console.panels.GatewayRouteDirectoryPanel;\n+import org.apache.syncope.client.console.panels.SRARouteDirectoryPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n@@ -33,12 +33,12 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n-@AMPage(label = \"Gateway\", icon = \"fas fa-share-alt\", listEntitlement = \"\", priority = 0)\n-public class Gateway extends BasePage {\n+@AMPage(label = \"SRA\", icon = \"fas fa-share-alt\", listEntitlement = \"\", priority = 0)\n+public class SRA extends BasePage {\n \n     private static final long serialVersionUID = 9200112197134882164L;\n \n-    public Gateway(final PageParameters parameters) {\n+    public SRA(final PageParameters parameters) {\n         super(parameters);\n \n         body.add(BookmarkablePageLinkBuilder.build(\"dashboard\", \"dashboardBr\", Dashboard.class));\n@@ -60,7 +60,7 @@ private List<ITab> buildTabList() {\n \n             @Override\n             public Panel getPanel(final String panelId) {\n-                return new GatewayRouteDirectoryPanel(panelId, getPageReference());\n+                return new SRARouteDirectoryPanel(panelId, getPageReference());\n             }\n         });\n ","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/Gateway.java"},{"sha":"d986b85d450a6a0e783fb641f6bab43a9c31ec40","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARouteDirectoryPanel.java","status":"renamed","additions":40,"deletions":37,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteDirectoryPanel.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -28,16 +28,17 @@\n import org.apache.syncope.client.console.commons.AMConstants;\n import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.client.console.pages.BasePage;\n-import org.apache.syncope.client.console.panels.GatewayRouteDirectoryPanel.GatewayRouteProvider;\n-import org.apache.syncope.client.console.rest.GatewayRouteRestClient;\n+import org.apache.syncope.client.console.panels.SRARouteDirectoryPanel.SRARouteProvider;\n+import org.apache.syncope.client.console.rest.SRARouteRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.PageReference;\n@@ -51,12 +52,12 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.StringResourceModel;\n \n-public class GatewayRouteDirectoryPanel\n-        extends DirectoryPanel<GatewayRouteTO, GatewayRouteTO, GatewayRouteProvider, GatewayRouteRestClient> {\n+public class SRARouteDirectoryPanel\n+        extends DirectoryPanel<SRARouteTO, SRARouteTO, SRARouteProvider, SRARouteRestClient> {\n \n     private static final long serialVersionUID = -2334397933375604015L;\n \n-    public GatewayRouteDirectoryPanel(final String id, final PageReference pageRef) {\n+    public SRARouteDirectoryPanel(final String id, final PageReference pageRef) {\n         super(id, pageRef);\n         disableCheckBoxes();\n \n@@ -68,19 +69,19 @@ public GatewayRouteDirectoryPanel(final String id, final PageReference pageRef)\n             modal.show(false);\n         });\n \n-        restClient = new GatewayRouteRestClient();\n+        restClient = new SRARouteRestClient();\n \n-        addNewItemPanelBuilder(new GatewayRouteWizardBuilder(new GatewayRouteTO(), pageRef), true);\n+        addNewItemPanelBuilder(new SRARouteWizardBuilder(new SRARouteTO(), pageRef), true);\n         initResultTable();\n \n-        utilityAjaxLink = new AjaxLink<GatewayRouteTO>(\"utility\") {\n+        utilityAjaxLink = new AjaxLink<SRARouteTO>(\"utility\") {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n             @Override\n             public void onClick(final AjaxRequestTarget target) {\n                 try {\n-                    GatewayRouteRestClient.push();\n+                    SRARouteRestClient.push();\n                     SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (Exception e) {\n@@ -97,56 +98,58 @@ public void onClick(final AjaxRequestTarget target) {\n     }\n \n     @Override\n-    protected List<IColumn<GatewayRouteTO, String>> getColumns() {\n-        List<IColumn<GatewayRouteTO, String>> columns = new ArrayList<>();\n+    protected List<IColumn<SRARouteTO, String>> getColumns() {\n+        List<IColumn<SRARouteTO, String>> columns = new ArrayList<>();\n \n         columns.add(new KeyPropertyColumn<>(new StringResourceModel(\"key\", this), \"key\"));\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"name\", this), \"name\", \"name\"));\n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"order\", this), \"order\", \"order\"));\n         columns.add(new PropertyColumn<>(new StringResourceModel(\"target\", this), \"target\", \"target\"));\n-        columns.add(new PropertyColumn<>(new StringResourceModel(\"status\", this), \"status\", \"status\"));\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"type\", this), \"type\", \"type\"));\n+        columns.add(new BooleanPropertyColumn<>(new StringResourceModel(\"logout\", this), \"logout\", \"logout\"));\n+        columns.add(new BooleanPropertyColumn<>(new StringResourceModel(\"csrf\", this), \"csrf\", \"csrf\"));\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"order\", this), \"order\", \"order\"));\n \n         return columns;\n     }\n \n     @Override\n-    protected ActionsPanel<GatewayRouteTO> getActions(final IModel<GatewayRouteTO> model) {\n-        ActionsPanel<GatewayRouteTO> panel = super.getActions(model);\n+    protected ActionsPanel<SRARouteTO> getActions(final IModel<SRARouteTO> model) {\n+        ActionsPanel<SRARouteTO> panel = super.getActions(model);\n \n-        panel.add(new ActionLink<GatewayRouteTO>() {\n+        panel.add(new ActionLink<SRARouteTO>() {\n \n             private static final long serialVersionUID = -4608353559809323466L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final GatewayRouteTO ignore) {\n-                send(GatewayRouteDirectoryPanel.this, Broadcast.EXACT,\n+            public void onClick(final AjaxRequestTarget target, final SRARouteTO ignore) {\n+                send(SRARouteDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                GatewayRouteRestClient.read(model.getObject().getKey()), target));\n+                                SRARouteRestClient.read(model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, AMEntitlement.GATEWAY_ROUTE_UPDATE);\n \n-        panel.add(new ActionLink<GatewayRouteTO>() {\n+        panel.add(new ActionLink<SRARouteTO>() {\n \n             private static final long serialVersionUID = -4608353559809323466L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final GatewayRouteTO ignore) {\n-                GatewayRouteTO clone = SerializationUtils.clone(model.getObject());\n+            public void onClick(final AjaxRequestTarget target, final SRARouteTO ignore) {\n+                SRARouteTO clone = SerializationUtils.clone(model.getObject());\n                 clone.setKey(null);\n-                send(GatewayRouteDirectoryPanel.this, Broadcast.EXACT,\n+                send(SRARouteDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(clone, target));\n             }\n         }, ActionLink.ActionType.CLONE, AMEntitlement.GATEWAY_ROUTE_CREATE);\n \n-        panel.add(new ActionLink<GatewayRouteTO>() {\n+        panel.add(new ActionLink<SRARouteTO>() {\n \n             private static final long serialVersionUID = -4608353559809323466L;\n \n             @Override\n-            public void onClick(final AjaxRequestTarget target, final GatewayRouteTO ignore) {\n-                GatewayRouteTO route = model.getObject();\n+            public void onClick(final AjaxRequestTarget target, final SRARouteTO ignore) {\n+                SRARouteTO route = model.getObject();\n                 try {\n-                    GatewayRouteRestClient.delete(route.getKey());\n+                    SRARouteRestClient.delete(route.getKey());\n                     SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n                     target.add(container);\n                 } catch (SyncopeClientException e) {\n@@ -166,41 +169,41 @@ protected Collection<ActionLink.ActionType> getBatches() {\n     }\n \n     @Override\n-    protected GatewayRouteProvider dataProvider() {\n-        return new GatewayRouteProvider(rows);\n+    protected SRARouteProvider dataProvider() {\n+        return new SRARouteProvider(rows);\n     }\n \n     @Override\n     protected String paginatorRowsKey() {\n         return AMConstants.PREF_GATEWAYROUTE_PAGINATOR_ROWS;\n     }\n \n-    protected static final class GatewayRouteProvider extends DirectoryDataProvider<GatewayRouteTO> {\n+    protected static final class SRARouteProvider extends DirectoryDataProvider<SRARouteTO> {\n \n         private static final long serialVersionUID = 5282134321828253058L;\n \n-        private final SortableDataProviderComparator<GatewayRouteTO> comparator;\n+        private final SortableDataProviderComparator<SRARouteTO> comparator;\n \n-        public GatewayRouteProvider(final int paginatorRows) {\n+        public SRARouteProvider(final int paginatorRows) {\n             super(paginatorRows);\n             setSort(\"name\", SortOrder.ASCENDING);\n             comparator = new SortableDataProviderComparator<>(this);\n         }\n \n         @Override\n-        public Iterator<? extends GatewayRouteTO> iterator(final long first, final long count) {\n-            List<GatewayRouteTO> list = GatewayRouteRestClient.list();\n+        public Iterator<? extends SRARouteTO> iterator(final long first, final long count) {\n+            List<SRARouteTO> list = SRARouteRestClient.list();\n             list.sort(comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return GatewayRouteRestClient.list().size();\n+            return SRARouteRestClient.list().size();\n         }\n \n         @Override\n-        public IModel<GatewayRouteTO> model(final GatewayRouteTO route) {\n+        public IModel<SRARouteTO> model(final SRARouteTO route) {\n             return new CompoundPropertyModel<>(route);\n         }\n     }","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteDirectoryPanel.java"},{"sha":"8500910d7b1fcdbe3940daa26dca4b401ece98a1","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARouteFilterPanel.java","status":"renamed","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -28,8 +28,8 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.FilterFactory;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARouteFilterFactory;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -41,11 +41,11 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n \n-public class GatewayRouteFilterPanel extends Panel {\n+public class SRARouteFilterPanel extends Panel {\n \n     private static final long serialVersionUID = -4576690020841569281L;\n \n-    public GatewayRouteFilterPanel(final String id, final IModel<List<GatewayRouteFilter>> model) {\n+    public SRARouteFilterPanel(final String id, final IModel<List<SRARouteFilter>> model) {\n         super(id);\n         setOutputMarkupId(true);\n \n@@ -66,17 +66,17 @@ protected String createRelAttribute() {\n             }\n         }));\n \n-        ListView<GatewayRouteFilter> filters = new ListView<GatewayRouteFilter>(\"filters\", model) {\n+        ListView<SRARouteFilter> filters = new ListView<SRARouteFilter>(\"filters\", model) {\n \n             private static final long serialVersionUID = 6741044372185745296L;\n \n             @Override\n-            protected void populateItem(final ListItem<GatewayRouteFilter> item) {\n-                GatewayRouteFilter filter = item.getModelObject();\n+            protected void populateItem(final ListItem<SRARouteFilter> item) {\n+                SRARouteFilter filter = item.getModelObject();\n \n-                AjaxDropDownChoicePanel<FilterFactory> factory =\n+                AjaxDropDownChoicePanel<SRARouteFilterFactory> factory =\n                         new AjaxDropDownChoicePanel<>(\"factory\", \"factory\", new PropertyModel<>(filter, \"factory\"));\n-                factory.setChoices(List.of(FilterFactory.values()));\n+                factory.setChoices(List.of(SRARouteFilterFactory.values()));\n                 item.add(factory.hideLabel());\n \n                 AjaxTextFieldPanel args =\n@@ -93,7 +93,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         model.getObject().remove(item.getIndex());\n \n                         item.getParent().removeAll();\n-                        target.add(GatewayRouteFilterPanel.this);\n+                        target.add(SRARouteFilterPanel.this);\n                     }\n                 }, ActionLink.ActionType.DELETE, StringUtils.EMPTY, true).hideLabel();\n                 if (model.getObject().size() > 1) {\n@@ -104,12 +104,12 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                                GatewayRouteFilter pre = model.getObject().get(item.getIndex() - 1);\n+                                SRARouteFilter pre = model.getObject().get(item.getIndex() - 1);\n                                 model.getObject().set(item.getIndex(), pre);\n                                 model.getObject().set(item.getIndex() - 1, filter);\n \n                                 item.getParent().removeAll();\n-                                target.add(GatewayRouteFilterPanel.this);\n+                                target.add(SRARouteFilterPanel.this);\n                             }\n                         }, ActionLink.ActionType.UP, StringUtils.EMPTY).hideLabel();\n                     }\n@@ -120,12 +120,12 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                                GatewayRouteFilter post = model.getObject().get(item.getIndex() + 1);\n+                                SRARouteFilter post = model.getObject().get(item.getIndex() + 1);\n                                 model.getObject().set(item.getIndex(), post);\n                                 model.getObject().set(item.getIndex() + 1, filter);\n \n                                 item.getParent().removeAll();\n-                                target.add(GatewayRouteFilterPanel.this);\n+                                target.add(SRARouteFilterPanel.this);\n                             }\n                         }, ActionLink.ActionType.DOWN, StringUtils.EMPTY).hideLabel();\n                     }\n@@ -142,8 +142,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target) {\n-                model.getObject().add(new GatewayRouteFilter());\n-                target.add(GatewayRouteFilterPanel.this);\n+                model.getObject().add(new SRARouteFilter());\n+                target.add(SRARouteFilterPanel.this);\n             }\n         };\n         addFilterBtn.setDefaultFormProcessing(false);","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteFilterPanel.java"},{"sha":"e81fa5bdc84dfda4aa3d5ae10341edc2167c2491","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARoutePredicatePanel.java","status":"renamed","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -29,9 +29,9 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicateCond;\n-import org.apache.syncope.common.lib.types.PredicateFactory;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateCond;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateFactory;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -43,11 +43,11 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.PropertyModel;\n \n-public class GatewayRoutePredicatePanel extends Panel {\n+public class SRARoutePredicatePanel extends Panel {\n \n     private static final long serialVersionUID = -5321936363511301735L;\n \n-    public GatewayRoutePredicatePanel(final String id, final IModel<List<GatewayRoutePredicate>> model) {\n+    public SRARoutePredicatePanel(final String id, final IModel<List<SRARoutePredicate>> model) {\n         super(id);\n         setOutputMarkupId(true);\n \n@@ -68,30 +68,30 @@ protected String createRelAttribute() {\n             }\n         }));\n \n-        ListView<GatewayRoutePredicate> predicates = new ListView<GatewayRoutePredicate>(\"predicates\", model) {\n+        ListView<SRARoutePredicate> predicates = new ListView<SRARoutePredicate>(\"predicates\", model) {\n \n             private static final long serialVersionUID = 1814616131938968887L;\n \n             @Override\n-            protected void populateItem(final ListItem<GatewayRoutePredicate> item) {\n-                GatewayRoutePredicate predicate = item.getModelObject();\n+            protected void populateItem(final ListItem<SRARoutePredicate> item) {\n+                SRARoutePredicate predicate = item.getModelObject();\n \n                 AjaxCheckBoxPanel negate =\n                         new AjaxCheckBoxPanel(\"negate\", \"negate\", new PropertyModel<>(predicate, \"negate\"));\n                 item.add(negate.hideLabel());\n \n-                AjaxDropDownChoicePanel<PredicateFactory> factory =\n+                AjaxDropDownChoicePanel<SRARoutePredicateFactory> factory =\n                         new AjaxDropDownChoicePanel<>(\"factory\", \"factory\", new PropertyModel<>(predicate, \"factory\"));\n-                factory.setChoices(List.of(PredicateFactory.values()));\n+                factory.setChoices(List.of(SRARoutePredicateFactory.values()));\n                 item.add(factory.hideLabel());\n \n                 AjaxTextFieldPanel args =\n                         new AjaxTextFieldPanel(\"args\", \"args\", new PropertyModel<>(predicate, \"args\"));\n                 item.add(args.hideLabel());\n \n-                AjaxDropDownChoicePanel<GatewayRoutePredicateCond> cond =\n+                AjaxDropDownChoicePanel<SRARoutePredicateCond> cond =\n                         new AjaxDropDownChoicePanel<>(\"cond\", \"cond\", new PropertyModel<>(predicate, \"cond\"));\n-                cond.setChoices(List.of(GatewayRoutePredicateCond.values()));\n+                cond.setChoices(List.of(SRARoutePredicateCond.values()));\n                 item.add(cond.hideLabel());\n \n                 ActionsPanel<Serializable> actions = new ActionsPanel<>(\"actions\", null);\n@@ -104,7 +104,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n                         model.getObject().remove(item.getIndex());\n \n                         item.getParent().removeAll();\n-                        target.add(GatewayRoutePredicatePanel.this);\n+                        target.add(SRARoutePredicatePanel.this);\n                     }\n                 }, ActionLink.ActionType.DELETE, StringUtils.EMPTY, true).hideLabel();\n                 if (model.getObject().size() > 1) {\n@@ -115,12 +115,12 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                                GatewayRoutePredicate pre = model.getObject().get(item.getIndex() - 1);\n+                                SRARoutePredicate pre = model.getObject().get(item.getIndex() - 1);\n                                 model.getObject().set(item.getIndex(), pre);\n                                 model.getObject().set(item.getIndex() - 1, predicate);\n \n                                 item.getParent().removeAll();\n-                                target.add(GatewayRoutePredicatePanel.this);\n+                                target.add(SRARoutePredicatePanel.this);\n                             }\n                         }, ActionLink.ActionType.UP, StringUtils.EMPTY).hideLabel();\n                     }\n@@ -131,12 +131,12 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                             @Override\n                             public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n-                                GatewayRoutePredicate post = model.getObject().get(item.getIndex() + 1);\n+                                SRARoutePredicate post = model.getObject().get(item.getIndex() + 1);\n                                 model.getObject().set(item.getIndex(), post);\n                                 model.getObject().set(item.getIndex() + 1, predicate);\n \n                                 item.getParent().removeAll();\n-                                target.add(GatewayRoutePredicatePanel.this);\n+                                target.add(SRARoutePredicatePanel.this);\n                             }\n                         }, ActionLink.ActionType.DOWN, StringUtils.EMPTY).hideLabel();\n                     }\n@@ -153,8 +153,8 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n             @Override\n             protected void onSubmit(final AjaxRequestTarget target) {\n-                model.getObject().add(new GatewayRoutePredicate());\n-                target.add(GatewayRoutePredicatePanel.this);\n+                model.getObject().add(new SRARoutePredicate());\n+                target.add(SRARoutePredicatePanel.this);\n             }\n         };\n         addPredicateBtn.setDefaultFormProcessing(false);","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel.java"},{"sha":"f05849b07f8694bc5119da16b92ba67a7c09491d","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARouteWizardBuilder.java","status":"renamed","additions":78,"deletions":19,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -20,11 +20,15 @@\n \n import java.io.Serializable;\n import java.net.URI;\n-import org.apache.syncope.client.console.rest.GatewayRouteRestClient;\n+import java.util.List;\n+import org.apache.syncope.client.console.rest.SRARouteRestClient;\n import org.apache.syncope.client.console.wizards.BaseAjaxWizardBuilder;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardModel;\n import org.apache.wicket.extensions.wizard.WizardStep;\n@@ -35,26 +39,26 @@\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.validation.validator.UrlValidator;\n \n-public class GatewayRouteWizardBuilder extends BaseAjaxWizardBuilder<GatewayRouteTO> {\n+public class SRARouteWizardBuilder extends BaseAjaxWizardBuilder<SRARouteTO> {\n \n     private static final long serialVersionUID = 2060352959114706419L;\n \n-    public GatewayRouteWizardBuilder(final GatewayRouteTO route, final PageReference pageRef) {\n+    public SRARouteWizardBuilder(final SRARouteTO route, final PageReference pageRef) {\n         super(route, pageRef);\n     }\n \n     @Override\n-    protected Serializable onApplyInternal(final GatewayRouteTO modelObject) {\n+    protected Serializable onApplyInternal(final SRARouteTO modelObject) {\n         if (modelObject.getKey() == null) {\n-            GatewayRouteRestClient.create(modelObject);\n+            SRARouteRestClient.create(modelObject);\n         } else {\n-            GatewayRouteRestClient.update(modelObject);\n+            SRARouteRestClient.update(modelObject);\n         }\n         return modelObject;\n     }\n \n     @Override\n-    protected WizardModel buildModelSteps(final GatewayRouteTO modelObject, final WizardModel wizardModel) {\n+    protected WizardModel buildModelSteps(final SRARouteTO modelObject, final WizardModel wizardModel) {\n         wizardModel.add(new Profile(modelObject));\n         wizardModel.add(new Predicates(modelObject));\n         wizardModel.add(new Filters(modelObject));\n@@ -65,17 +69,12 @@ public static class Profile extends WizardStep {\n \n         private static final long serialVersionUID = 8610155719550948702L;\n \n-        public Profile(final GatewayRouteTO route) {\n+        public Profile(final SRARouteTO route) {\n             add(new AjaxTextFieldPanel(\n                     \"name\", \"name\", new PropertyModel<>(route, \"name\"), false).\n                     addRequiredLabel().setEnabled(true));\n \n-            add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(0).build(\n-                    \"order\", \"order\", Integer.class, new PropertyModel<>(route, \"order\")).\n-                    setRequired(true));\n-\n-            AjaxTextFieldPanel target = new AjaxTextFieldPanel(\n-                    \"target\", \"target\", new IModel<String>() {\n+            AjaxTextFieldPanel target = new AjaxTextFieldPanel(\"target\", \"target\", new IModel<String>() {\n \n                 private static final long serialVersionUID = 1015030402166681242L;\n \n@@ -96,26 +95,86 @@ public void setObject(final String object) {\n             target.addRequiredLabel().setEnabled(true);\n             target.getField().add(new UrlValidator(new String[] { \"http\", \"https\" }));\n             add(target);\n+\n+            AjaxTextFieldPanel error = new AjaxTextFieldPanel(\"error\", \"error\", new IModel<String>() {\n+\n+                private static final long serialVersionUID = 1015030402166681242L;\n+\n+                @Override\n+                public String getObject() {\n+                    return route.getError() == null ? null : route.getError().toASCIIString();\n+                }\n+\n+                @Override\n+                public void setObject(final String object) {\n+                    if (object == null) {\n+                        route.setError(null);\n+                    } else {\n+                        route.setError(URI.create(object));\n+                    }\n+                }\n+            }, false);\n+            error.getField().add(new UrlValidator(new String[] { \"http\", \"https\" }));\n+            add(error);\n+\n+            AjaxDropDownChoicePanel<SRARouteType> type =\n+                    new AjaxDropDownChoicePanel<>(\"type\", \"type\", new PropertyModel<>(route, \"type\"));\n+            type.setChoices(List.of(SRARouteType.values()));\n+            type.addRequiredLabel().setEnabled(true);\n+            add(type);\n+\n+            AjaxCheckBoxPanel logout =\n+                    new AjaxCheckBoxPanel(\"logout\", \"logout\", new PropertyModel<>(route, \"logout\"));\n+            add(logout);\n+\n+            AjaxTextFieldPanel postLogout = new AjaxTextFieldPanel(\"postLogout\", \"postLogout\", new IModel<String>() {\n+\n+                private static final long serialVersionUID = 1015030402166681242L;\n+\n+                @Override\n+                public String getObject() {\n+                    return route.getPostLogout() == null ? null : route.getPostLogout().toASCIIString();\n+                }\n+\n+                @Override\n+                public void setObject(final String object) {\n+                    if (object == null) {\n+                        route.setPostLogout(null);\n+                    } else {\n+                        route.setPostLogout(URI.create(object));\n+                    }\n+                }\n+            }, false);\n+            postLogout.getField().add(new UrlValidator(new String[] { \"http\", \"https\" }));\n+            add(postLogout);\n+\n+            AjaxCheckBoxPanel csrf =\n+                    new AjaxCheckBoxPanel(\"csrf\", \"csrf\", new PropertyModel<>(route, \"csrf\"));\n+            add(csrf);\n+\n+            add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(0).build(\n+                    \"order\", \"order\", Integer.class, new PropertyModel<>(route, \"order\")).\n+                    setRequired(true));\n         }\n     }\n \n     public static class Predicates extends WizardStep {\n \n         private static final long serialVersionUID = 5934389493874714599L;\n \n-        public Predicates(final GatewayRouteTO route) {\n+        public Predicates(final SRARouteTO route) {\n             super(new ResourceModel(\"predicates\"), Model.of());\n-            add(new GatewayRoutePredicatePanel(\"predicates\", new ListModel<>(route.getPredicates())));\n+            add(new SRARoutePredicatePanel(\"predicates\", new ListModel<>(route.getPredicates())));\n         }\n     }\n \n     public static class Filters extends WizardStep {\n \n         private static final long serialVersionUID = -6552124285142294023L;\n \n-        public Filters(final GatewayRouteTO route) {\n+        public Filters(final SRARouteTO route) {\n             super(new ResourceModel(\"filters\"), Model.of());\n-            add(new GatewayRouteFilterPanel(\"filters\", new ListModel<>(route.getFilters())));\n+            add(new SRARouteFilterPanel(\"filters\", new ListModel<>(route.getFilters())));\n         }\n     }\n }","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/GatewayRouteWizardBuilder.java"},{"sha":"47dfe63f16a9b3e94cfa5c89e78c83801e107984","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/SRARouteRestClient.java","status":"renamed","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRARouteRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRARouteRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSRARouteRestClient.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -19,34 +19,34 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.List;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n-import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n \n-public class GatewayRouteRestClient extends BaseRestClient {\n+public class SRARouteRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -7379778542101161274L;\n \n-    public static List<GatewayRouteTO> list() {\n-        return getService(GatewayRouteService.class).list();\n+    public static List<SRARouteTO> list() {\n+        return getService(SRARouteService.class).list();\n     }\n \n-    public static GatewayRouteTO read(final String key) {\n-        return getService(GatewayRouteService.class).read(key);\n+    public static SRARouteTO read(final String key) {\n+        return getService(SRARouteService.class).read(key);\n     }\n \n-    public static void create(final GatewayRouteTO route) {\n-        getService(GatewayRouteService.class).create(route);\n+    public static void create(final SRARouteTO route) {\n+        getService(SRARouteService.class).create(route);\n     }\n \n-    public static void update(final GatewayRouteTO route) {\n-        getService(GatewayRouteService.class).update(route);\n+    public static void update(final SRARouteTO route) {\n+        getService(SRARouteService.class).update(route);\n     }\n \n     public static void delete(final String key) {\n-        getService(GatewayRouteService.class).delete(key);\n+        getService(SRARouteService.class).delete(key);\n     }\n \n     public static void push() {\n-        getService(GatewayRouteService.class).pushToSRA();\n+        getService(SRARouteService.class).pushToSRA();\n     }\n }","previous_filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/GatewayRouteRestClient.java"},{"sha":"f42ca2c3a84d34afb05d4c6847de4aeeb09486d2","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/SRA.html","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.html?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -29,7 +29,7 @@ <h1>&nbsp;</h1>\n               <li class=\"breadcrumb-item\">\n                 <a wicket:id=\"dashboardBr\"><i class=\"fa fa-tachometer-alt\"></i> <wicket:message key=\"dashboard\"></wicket:message></a>\n               </li>\n-              <li class=\"breadcrumb-item active\"><wicket:message key=\"gateway\"/></li>\n+              <li class=\"breadcrumb-item active\"><wicket:message key=\"sra\"/></li>\n             </ol>\n           </div>\n         </div>","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/Gateway.html"},{"sha":"7e7ef6144a5b18aafb1ddb5db6d63c93108821bf","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/SRA.properties","status":"renamed","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -14,13 +14,17 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-gateway=Gateway\n+sra=SRA\n routes=Routes\n metrics=Metrics\n order=Order\n target=Target\n-status=Status\n+type=Type\n any.new=New gateway route\n any.edit=Edit ${name}\n predicates=Predicates\n filters=Filters\n+logout=Logout\n+csrf=CSRF\n+error=Error URI\n+postLogout=Post-logout URI","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/Gateway.properties"},{"sha":"1123afa82ddd65e213c249c3eca971ac3608a2f1","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/SRARouteDirectoryPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRARouteDirectoryPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRARouteDirectoryPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRARouteDirectoryPanel.html?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/GatewayRouteDirectoryPanel.html"},{"sha":"ee54f92d4c6327f098d0f2ed38fc09e3d17eeb1f","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/SRA_it.properties","status":"renamed","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_it.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -14,13 +14,17 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-gateway=Gateway\n+sra=SRA\n routes=Rotte\n metrics=Metriche\n order=Ordine\n target=Obiettivo\n-status=Stato\n+type=Tipo\n any.new=Nuova rotta del gateway\n any.edit=Modifica ${name}\n-predicates=Predicates\n-filters=Filters\n+predicates=Predicati\n+filters=Filtri\n+logout=Logout\n+csrf=CSRF\n+error=URI di errore\n+postLogout=URI di post-logout","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/Gateway_it.properties"},{"sha":"6871cb301d0f8d3cf4bfff0c537d7e5dc5325b8f","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/SRA_ja.properties","status":"renamed","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_ja.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -14,13 +14,17 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-gateway=\\u30b2\\u30fc\\u30c8\\u30a6\\u30a7\\u30a4\n+sra=SRA\n routes=\\u30eb\\u30fc\\u30c8\n metrics=\\u30e1\\u30c8\\u30ea\\u30af\\u30b9\n order=\\u9806\\u5e8f\n target=\\u30bf\\u30fc\\u30b2\\u30c3\\u30c8\n-status=\\u30b9\\u30c6\\u30fc\\u30bf\\u30b9\n+type=Type\n any.new=\\u65b0\\u3057\\u3044\\u30b2\\u30fc\\u30c8\\u30a6\\u30a7\\u30a4\\u30eb\\u30fc\\u30c8\n any.edit=${name} \\u3092\\u7de8\\u96c6\n predicates=\\u8ff0\\u8a9e\n filters=\\u30d5\\u30a3\\u30eb\\u30bf\\u30fc\n+logout=Logout\n+csrf=CSRF\n+error=Error URI\n+postLogout=Post-logout URI","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/Gateway_ja.properties"},{"sha":"7e7ef6144a5b18aafb1ddb5db6d63c93108821bf","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/SRA_pt_BR.properties","status":"renamed","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_pt_BR.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -14,13 +14,17 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-gateway=Gateway\n+sra=SRA\n routes=Routes\n metrics=Metrics\n order=Order\n target=Target\n-status=Status\n+type=Type\n any.new=New gateway route\n any.edit=Edit ${name}\n predicates=Predicates\n filters=Filters\n+logout=Logout\n+csrf=CSRF\n+error=Error URI\n+postLogout=Post-logout URI","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/Gateway_ru.properties"},{"sha":"7e7ef6144a5b18aafb1ddb5db6d63c93108821bf","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/SRA_ru.properties","status":"renamed","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSRA_ru.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -14,13 +14,17 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-gateway=Gateway\n+sra=SRA\n routes=Routes\n metrics=Metrics\n order=Order\n target=Target\n-status=Status\n+type=Type\n any.new=New gateway route\n any.edit=Edit ${name}\n predicates=Predicates\n filters=Filters\n+logout=Logout\n+csrf=CSRF\n+error=Error URI\n+postLogout=Post-logout URI","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/pages/Gateway_pt_BR.properties"},{"sha":"a078ad3b4dfd5105460525509351aab2213c813f","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteFilterPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.html?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteFilterPanel.html"},{"sha":"bf63f319a6d3ddf9d220aefaf7502dcaf786902e","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteFilterPanel.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -16,4 +16,4 @@\n # under the License.\n factory=Factory\n args=Arguments\n-factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#_gatewayfilter_factories\"  target=\"blank\">Spring Cloud Gateay documentation</a> for more information\n+factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#_gatewayfilter_factories\"  target=\"blank\">Spring Cloud Gateway documentation</a> for more information","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteFilterPanel.properties"},{"sha":"2cf742fe388193aa5ddf2e31ca28004bd3a1217f","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteFilterPanel_it.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_it.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -16,4 +16,4 @@\n # under the License.\n factory=Factory\n args=Argomenti\n-factoryInfo.help=Consultare la <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#\\n_gatewayfilter_factories\"  target=\"blank\">documentazione di Spring Cloud Gateay</a> per maggiori informazioni\n+factoryInfo.help=Consultare la <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#\\n_gatewayfilter_factories\"  target=\"blank\">documentazione di Spring Cloud Gateway</a> per maggiori informazioni","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteFilterPanel_it.properties"},{"sha":"5d59db1b9b3c392b09498173d8649e5291ac8f5b","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteFilterPanel_ja.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_ja.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteFilterPanel_ja.properties"},{"sha":"bf63f319a6d3ddf9d220aefaf7502dcaf786902e","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteFilterPanel_pt_BR.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_pt_BR.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -16,4 +16,4 @@\n # under the License.\n factory=Factory\n args=Arguments\n-factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#_gatewayfilter_factories\"  target=\"blank\">Spring Cloud Gateay documentation</a> for more information\n+factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#_gatewayfilter_factories\"  target=\"blank\">Spring Cloud Gateway documentation</a> for more information","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteFilterPanel_pt_BR.properties"},{"sha":"bf63f319a6d3ddf9d220aefaf7502dcaf786902e","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteFilterPanel_ru.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteFilterPanel_ru.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -16,4 +16,4 @@\n # under the License.\n factory=Factory\n args=Arguments\n-factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#_gatewayfilter_factories\"  target=\"blank\">Spring Cloud Gateay documentation</a> for more information\n+factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#_gatewayfilter_factories\"  target=\"blank\">Spring Cloud Gateway documentation</a> for more information","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteFilterPanel_ru.properties"},{"sha":"5840692d8c38add2e0305b386a1cfbf3dbe94eeb","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARoutePredicatePanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.html?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel.html"},{"sha":"0bf3c9cd5751c46404fb61be3d43d985a94aa71f","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARoutePredicatePanel.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,4 +18,4 @@ negate=Negate\n factory=Factory\n args=Arguments\n cond=Condition\n-factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#gateway-request-predicates-factories\"  target=\"blank\">Spring Cloud Gateay documentation</a> for more information\n+factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#gateway-request-predicates-factories\"  target=\"blank\">Spring Cloud Gateway documentation</a> for more information","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel_pt_BR.properties"},{"sha":"ad9e3600e213f4d023829255caa9140d98c94d62","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARoutePredicatePanel_it.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_it.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,4 +18,4 @@ negate=Nega\n factory=Factory\n args=Argomenti\n cond=Condizione\n-factoryInfo.help=Consultare la <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#gateway-request-predicates-factories\"  target=\"blank\">documentazione di Spring Cloud Gateay</a> per maggiori informazioni\n+factoryInfo.help=Consultare la <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#gateway-request-predicates-factories\"  target=\"blank\">documentazione di Spring Cloud Gateway</a> per maggiori informazioni","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel_it.properties"},{"sha":"43c983945d849346f6fab054280ca5765dafbf78","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARoutePredicatePanel_ja.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_ja.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel_ja.properties"},{"sha":"0bf3c9cd5751c46404fb61be3d43d985a94aa71f","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARoutePredicatePanel_pt_BR.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_pt_BR.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,4 +18,4 @@ negate=Negate\n factory=Factory\n args=Arguments\n cond=Condition\n-factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#gateway-request-predicates-factories\"  target=\"blank\">Spring Cloud Gateay documentation</a> for more information\n+factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#gateway-request-predicates-factories\"  target=\"blank\">Spring Cloud Gateway documentation</a> for more information","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel.properties"},{"sha":"0bf3c9cd5751c46404fb61be3d43d985a94aa71f","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARoutePredicatePanel_ru.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARoutePredicatePanel_ru.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,4 +18,4 @@ negate=Negate\n factory=Factory\n args=Arguments\n cond=Condition\n-factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#gateway-request-predicates-factories\"  target=\"blank\">Spring Cloud Gateay documentation</a> for more information\n+factoryInfo.help=Check <a href=\"https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/${spring-cloud-gateway.version}/single/spring-cloud-gateway.html#gateway-request-predicates-factories\"  target=\"blank\">Spring Cloud Gateway documentation</a> for more information","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRoutePredicatePanel_ru.properties"},{"sha":"24c716b8bcd833a06f4b802f87b73fb8826b3565","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteWizardBuilder$Filters.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Filters.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Filters.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Filters.html?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteWizardBuilder$Filters.html"},{"sha":"215fe1a6bf498f5d6c8aa54a50614f7e67c8a607","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteWizardBuilder$Predicates.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Predicates.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Predicates.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Predicates.html?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteWizardBuilder$Predicates.html"},{"sha":"99b4eb23219f4effe6350b85819de7bc1e113b99","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/SRARouteWizardBuilder$Profile.html","status":"renamed","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder%24Profile.html?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -19,7 +19,12 @@\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n     <div class=\"form-group\"><span wicket:id=\"name\">[name]</span></div>\n-    <div class=\"form-group\"><span wicket:id=\"order\">[order]</span></div>\n     <div class=\"form-group\"><span wicket:id=\"target\">[target]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"error\">[error]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"type\">[type]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"logout\">[logout]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"postLogout\">[postLogout]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"csrf\">[csrf]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"order\">[order]</span></div>\n   </wicket:panel>\n </html>","previous_filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/panels/GatewayRouteWizardBuilder$Profile.html"},{"sha":"eb9fae8a583103812d37f2c827bab23de75f0071","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SRARouteTO.java","status":"renamed","additions":81,"deletions":18,"changes":99,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSRARouteTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSRARouteTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSRARouteTO.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -24,24 +24,35 @@\n import javax.ws.rs.PathParam;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n \n-public class GatewayRouteTO implements NamedEntityTO {\n+public class SRARouteTO implements NamedEntityTO {\n \n     private static final long serialVersionUID = 4044528284951757870L;\n \n     private String key;\n \n     private String name;\n \n-    private int order = 0;\n-\n     private URI target;\n \n-    private final List<GatewayRouteFilter> filters = new ArrayList<>();\n+    private URI error;\n+\n+    private SRARouteType type = SRARouteType.PUBLIC;\n+\n+    private boolean logout = false;\n+\n+    private URI postLogout;\n+\n+    private boolean csrf = true;\n \n-    private final List<GatewayRoutePredicate> predicates = new ArrayList<>();\n+    private int order = 0;\n+\n+    private final List<SRARouteFilter> filters = new ArrayList<>();\n+\n+    private final List<SRARoutePredicate> predicates = new ArrayList<>();\n \n     @Override\n     public String getKey() {\n@@ -64,14 +75,6 @@ public void setName(final String name) {\n         this.name = name;\n     }\n \n-    public int getOrder() {\n-        return order;\n-    }\n-\n-    public void setOrder(final int order) {\n-        this.order = order;\n-    }\n-\n     public URI getTarget() {\n         return target;\n     }\n@@ -80,11 +83,59 @@ public void setTarget(final URI target) {\n         this.target = target;\n     }\n \n-    public List<GatewayRouteFilter> getFilters() {\n+    public URI getError() {\n+        return error;\n+    }\n+\n+    public void setError(final URI error) {\n+        this.error = error;\n+    }\n+\n+    public SRARouteType getType() {\n+        return type;\n+    }\n+\n+    public void setType(final SRARouteType type) {\n+        this.type = type;\n+    }\n+\n+    public boolean isLogout() {\n+        return logout;\n+    }\n+\n+    public void setLogout(final boolean logout) {\n+        this.logout = logout;\n+    }\n+\n+    public URI getPostLogout() {\n+        return postLogout;\n+    }\n+\n+    public void setPostLogout(final URI postLogout) {\n+        this.postLogout = postLogout;\n+    }\n+\n+    public boolean isCsrf() {\n+        return csrf;\n+    }\n+\n+    public void setCsrf(final boolean csrf) {\n+        this.csrf = csrf;\n+    }\n+\n+    public int getOrder() {\n+        return order;\n+    }\n+\n+    public void setOrder(final int order) {\n+        this.order = order;\n+    }\n+\n+    public List<SRARouteFilter> getFilters() {\n         return filters;\n     }\n \n-    public List<GatewayRoutePredicate> getPredicates() {\n+    public List<SRARoutePredicate> getPredicates() {\n         return predicates;\n     }\n \n@@ -94,6 +145,12 @@ public int hashCode() {\n                 append(key).\n                 append(name).\n                 append(target).\n+                append(error).\n+                append(type).\n+                append(logout).\n+                append(postLogout).\n+                append(csrf).\n+                append(order).\n                 append(filters).\n                 append(predicates).\n                 build();\n@@ -110,11 +167,17 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final GatewayRouteTO other = (GatewayRouteTO) obj;\n+        final SRARouteTO other = (SRARouteTO) obj;\n         return new EqualsBuilder().\n                 append(key, other.key).\n                 append(name, other.name).\n                 append(target, other.target).\n+                append(error, other.error).\n+                append(type, other.type).\n+                append(logout, other.logout).\n+                append(postLogout, other.postLogout).\n+                append(csrf, other.csrf).\n+                append(order, other.order).\n                 append(filters, other.filters).\n                 append(predicates, other.predicates).\n                 build();","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/GatewayRouteTO.java"},{"sha":"b95f90544f7d363b4cceb9812f473bac7e6b654f","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARouteFilter.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilter.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -22,15 +22,15 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.BaseBean;\n \n-public class GatewayRouteFilter implements BaseBean {\n+public class SRARouteFilter implements BaseBean {\n \n     private static final long serialVersionUID = -635785645207375128L;\n \n     public static class Builder {\n \n-        private final GatewayRouteFilter instance = new GatewayRouteFilter();\n+        private final SRARouteFilter instance = new SRARouteFilter();\n \n-        public Builder factory(final FilterFactory factory) {\n+        public Builder factory(final SRARouteFilterFactory factory) {\n             instance.setFactory(factory);\n             return this;\n         }\n@@ -40,20 +40,20 @@ public Builder args(final String args) {\n             return this;\n         }\n \n-        public GatewayRouteFilter build() {\n+        public SRARouteFilter build() {\n             return instance;\n         }\n     }\n \n-    private FilterFactory factory;\n+    private SRARouteFilterFactory factory;\n \n     private String args;\n \n-    public FilterFactory getFactory() {\n+    public SRARouteFilterFactory getFactory() {\n         return factory;\n     }\n \n-    public void setFactory(final FilterFactory factory) {\n+    public void setFactory(final SRARouteFilterFactory factory) {\n         this.factory = factory;\n     }\n \n@@ -84,7 +84,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final GatewayRouteFilter other = (GatewayRouteFilter) obj;\n+        final SRARouteFilter other = (SRARouteFilter) obj;\n         return new EqualsBuilder().\n                 append(factory, other.factory).\n                 append(args, other.args).","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRouteFilter.java"},{"sha":"af22d21ac2ff1aa8617d362a8ac196cbc6bfc945","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARouteFilterFactory.java","status":"renamed","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteFilterFactory.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-public enum FilterFactory {\n+public enum SRARouteFilterFactory {\n     ADD_REQUEST_HEADER,\n     ADD_REQUEST_PARAMETER,\n     ADD_RESPONSE_HEADER,\n@@ -45,6 +45,7 @@ public enum FilterFactory {\n     LINK_REWRITE,\n     CLIENT_CERTS_TO_REQUEST_HEADER,\n     QUERY_PARAM_TO_REQUEST_HEADER,\n+    PRINCIPAL_TO_REQUEST_HEADER,\n     CUSTOM\n \n }","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/FilterFactory.java"},{"sha":"e6dd9f263a0435ef07a6e7489fd3019df6d2109d","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARoutePredicate.java","status":"renamed","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicate.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -22,25 +22,25 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.common.lib.BaseBean;\n \n-public class GatewayRoutePredicate implements BaseBean {\n+public class SRARoutePredicate implements BaseBean {\n \n     private static final long serialVersionUID = -635785645207375128L;\n \n     public static class Builder {\n \n-        private final GatewayRoutePredicate instance = new GatewayRoutePredicate();\n+        private final SRARoutePredicate instance = new SRARoutePredicate();\n \n         public Builder negate() {\n             instance.setNegate(true);\n             return this;\n         }\n \n-        public Builder cond(final GatewayRoutePredicateCond cond) {\n+        public Builder cond(final SRARoutePredicateCond cond) {\n             instance.setCond(cond);\n             return this;\n         }\n \n-        public Builder factory(final PredicateFactory factory) {\n+        public Builder factory(final SRARoutePredicateFactory factory) {\n             instance.setFactory(factory);\n             return this;\n         }\n@@ -50,16 +50,16 @@ public Builder args(final String args) {\n             return this;\n         }\n \n-        public GatewayRoutePredicate build() {\n+        public SRARoutePredicate build() {\n             return instance;\n         }\n     }\n \n     private boolean negate;\n \n-    private GatewayRoutePredicateCond cond;\n+    private SRARoutePredicateCond cond;\n \n-    private PredicateFactory factory;\n+    private SRARoutePredicateFactory factory;\n \n     private String args;\n \n@@ -71,19 +71,19 @@ public void setNegate(final boolean negate) {\n         this.negate = negate;\n     }\n \n-    public GatewayRoutePredicateCond getCond() {\n+    public SRARoutePredicateCond getCond() {\n         return cond;\n     }\n \n-    public void setCond(final GatewayRoutePredicateCond cond) {\n+    public void setCond(final SRARoutePredicateCond cond) {\n         this.cond = cond;\n     }\n \n-    public PredicateFactory getFactory() {\n+    public SRARoutePredicateFactory getFactory() {\n         return factory;\n     }\n \n-    public void setFactory(final PredicateFactory factory) {\n+    public void setFactory(final SRARoutePredicateFactory factory) {\n         this.factory = factory;\n     }\n \n@@ -115,7 +115,7 @@ public boolean equals(final Object obj) {\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final GatewayRoutePredicate other = (GatewayRoutePredicate) obj;\n+        final SRARoutePredicate other = (SRARoutePredicate) obj;\n         return new EqualsBuilder().\n                 append(cond, other.cond).\n                 append(factory, other.factory).","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRoutePredicate.java"},{"sha":"97726eacb3476277b58cf692ed90cdf2c493f77a","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARoutePredicateCond.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateCond.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-public enum GatewayRoutePredicateCond {\n+public enum SRARoutePredicateCond {\n     AND,\n     OR\n ","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/GatewayRoutePredicateCond.java"},{"sha":"1a30f24c2f858ec3f5ace409245f0677d7dee3eb","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARoutePredicateFactory.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARoutePredicateFactory.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-public enum PredicateFactory {\n+public enum SRARoutePredicateFactory {\n     AFTER,\n     BEFORE,\n     BETWEEN,","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/PredicateFactory.java"},{"sha":"3977140bc6f3eeb5dad676ee7ce6f88b3fbba2ba","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SRARouteType.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSRARouteType.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public enum SRARouteType {\n+    PUBLIC,\n+    PROTECTED\n+\n+}"},{"sha":"28389227daccc5866b03d1e5fc8249e90abeec10","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SRARouteService.java","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSRARouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSRARouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSRARouteService.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -40,18 +40,18 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n- * REST operations for gateway routes.\n+ * REST operations for SRA routes.\n  */\n-@Tag(name = \"GatewayRoutes\")\n+@Tag(name = \"SRARoutes\")\n @SecurityRequirements({\n     @SecurityRequirement(name = \"BasicAuthentication\"),\n     @SecurityRequirement(name = \"Bearer\") })\n @Path(\"gatewayRoutes\")\n-public interface GatewayRouteService extends JAXRSService {\n+public interface SRARouteService extends JAXRSService {\n \n     /**\n      * Returns a list of all existing routes.\n@@ -60,7 +60,7 @@ public interface GatewayRouteService extends JAXRSService {\n      */\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<GatewayRouteTO> list();\n+    List<SRARouteTO> list();\n \n     /**\n      * Creates a new route.\n@@ -80,7 +80,7 @@ public interface GatewayRouteService extends JAXRSService {\n     @POST\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    Response create(@NotNull GatewayRouteTO routeTO);\n+    Response create(@NotNull SRARouteTO routeTO);\n \n     /**\n      * Returns route with matching key.\n@@ -91,7 +91,7 @@ public interface GatewayRouteService extends JAXRSService {\n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    GatewayRouteTO read(@NotNull @PathParam(\"key\") String key);\n+    SRARouteTO read(@NotNull @PathParam(\"key\") String key);\n \n     /**\n      * Updates route with matching key.\n@@ -106,7 +106,7 @@ public interface GatewayRouteService extends JAXRSService {\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    void update(@NotNull GatewayRouteTO routeTO);\n+    void update(@NotNull SRARouteTO routeTO);\n \n     /**\n      * Deletes route with matching key.","previous_filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/GatewayRouteService.java"},{"sha":"31643b8c24bdffaf727e3d30aae72ab6d7e518e7","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/SRARouteLogic.java","status":"renamed","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSRARouteLogic.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -35,25 +35,25 @@\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.apache.syncope.common.lib.types.AMEntitlement;\n-import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n+import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n-import org.apache.syncope.core.provisioning.api.data.GatewayRouteDataBinder;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n+import org.apache.syncope.core.provisioning.api.data.SRARouteDataBinder;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n @Component\n-public class GatewayRouteLogic extends AbstractTransactionalLogic<GatewayRouteTO> {\n+public class SRARouteLogic extends AbstractTransactionalLogic<SRARouteTO> {\n \n     @Autowired\n-    private GatewayRouteDAO routeDAO;\n+    private SRARouteDAO routeDAO;\n \n     @Autowired\n-    private GatewayRouteDataBinder binder;\n+    private SRARouteDataBinder binder;\n \n     @Autowired\n     private EntityFactory entityFactory;\n@@ -68,47 +68,47 @@ public class GatewayRouteLogic extends AbstractTransactionalLogic<GatewayRouteTO\n     private String anonymousKey;\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public List<GatewayRouteTO> list() {\n-        return routeDAO.findAll().stream().map(binder::getGatewayRouteTO).collect(Collectors.toList());\n+    public List<SRARouteTO> list() {\n+        return routeDAO.findAll().stream().map(binder::getSRARouteTO).collect(Collectors.toList());\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_CREATE + \"')\")\n-    public GatewayRouteTO create(final GatewayRouteTO routeTO) {\n-        GatewayRoute route = entityFactory.newEntity(GatewayRoute.class);\n-        binder.getGatewayRoute(route, routeTO);\n+    public SRARouteTO create(final SRARouteTO routeTO) {\n+        SRARoute route = entityFactory.newEntity(SRARoute.class);\n+        binder.getSRARoute(route, routeTO);\n \n-        return binder.getGatewayRouteTO(routeDAO.save(route));\n+        return binder.getSRARouteTO(routeDAO.save(route));\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n-    public GatewayRouteTO read(final String key) {\n-        GatewayRoute route = routeDAO.find(key);\n+    public SRARouteTO read(final String key) {\n+        SRARoute route = routeDAO.find(key);\n         if (route == null) {\n-            throw new NotFoundException(\"GatewayRoute \" + key);\n+            throw new NotFoundException(\"SRARoute \" + key);\n         }\n-        return binder.getGatewayRouteTO(route);\n+        return binder.getSRARouteTO(route);\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_UPDATE + \"')\")\n-    public GatewayRouteTO update(final GatewayRouteTO routeTO) {\n-        GatewayRoute route = routeDAO.find(routeTO.getKey());\n+    public SRARouteTO update(final SRARouteTO routeTO) {\n+        SRARoute route = routeDAO.find(routeTO.getKey());\n         if (route == null) {\n-            throw new NotFoundException(\"GatewayRoute \" + routeTO.getKey());\n+            throw new NotFoundException(\"SRARoute \" + routeTO.getKey());\n         }\n \n-        binder.getGatewayRoute(route, routeTO);\n+        binder.getSRARoute(route, routeTO);\n \n-        return binder.getGatewayRouteTO(routeDAO.save(route));\n+        return binder.getSRARouteTO(routeDAO.save(route));\n     }\n \n     @PreAuthorize(\"hasRole('\" + AMEntitlement.GATEWAY_ROUTE_DELETE + \"')\")\n-    public GatewayRouteTO delete(final String key) {\n-        GatewayRoute route = routeDAO.find(key);\n+    public SRARouteTO delete(final String key) {\n+        SRARoute route = routeDAO.find(key);\n         if (route == null) {\n-            throw new NotFoundException(\"GatewayRoute \" + key);\n+            throw new NotFoundException(\"SRARoute \" + key);\n         }\n \n-        GatewayRouteTO deleted = binder.getGatewayRouteTO(route);\n+        SRARouteTO deleted = binder.getSRARouteTO(route);\n         routeDAO.delete(route);\n         return deleted;\n     }\n@@ -132,7 +132,7 @@ public void pushToSRA() {\n     }\n \n     @Override\n-    protected GatewayRouteTO resolveReference(final Method method, final Object... args)\n+    protected SRARouteTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n \n         String key = null;\n@@ -143,15 +143,15 @@ protected GatewayRouteTO resolveReference(final Method method, final Object... a\n             for (int i = 0; key == null && i < args.length; i++) {\n                 if (args[i] instanceof String) {\n                     key = (String) args[i];\n-                } else if (args[i] instanceof GatewayRouteTO) {\n-                    key = ((GatewayRouteTO) args[i]).getKey();\n+                } else if (args[i] instanceof SRARouteTO) {\n+                    key = ((SRARouteTO) args[i]).getKey();\n                 }\n             }\n         }\n \n         if (key != null) {\n             try {\n-                return binder.getGatewayRouteTO(routeDAO.find(key));\n+                return binder.getSRARouteTO(routeDAO.find(key));\n             } catch (Throwable ignore) {\n                 LOG.debug(\"Unresolved reference\", ignore);\n                 throw new UnresolvedReferenceException(ignore);","previous_filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/GatewayRouteLogic.java"},{"sha":"8bbda31c6acbe40f9a0ed236b6ea213bd2ec77ff","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SRARouteServiceImpl.java","status":"renamed","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSRARouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSRARouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSRARouteServiceImpl.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -21,40 +21,40 @@\n import java.net.URI;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n-import org.apache.syncope.core.logic.GatewayRouteLogic;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n+import org.apache.syncope.core.logic.SRARouteLogic;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n-public class GatewayRouteServiceImpl extends AbstractServiceImpl implements GatewayRouteService {\n+public class SRARouteServiceImpl extends AbstractServiceImpl implements SRARouteService {\n \n     @Autowired\n-    private GatewayRouteLogic logic;\n+    private SRARouteLogic logic;\n \n     @Override\n-    public List<GatewayRouteTO> list() {\n+    public List<SRARouteTO> list() {\n         return logic.list();\n     }\n \n     @Override\n-    public Response create(final GatewayRouteTO routeTO) {\n-        GatewayRouteTO createdRoute = logic.create(routeTO);\n+    public Response create(final SRARouteTO routeTO) {\n+        SRARouteTO createdRoute = logic.create(routeTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(createdRoute.getKey()).build();\n         return Response.created(location).\n                 header(RESTHeaders.RESOURCE_KEY, createdRoute.getKey()).\n                 build();\n     }\n \n     @Override\n-    public GatewayRouteTO read(final String key) {\n+    public SRARouteTO read(final String key) {\n         return logic.read(key);\n     }\n \n     @Override\n-    public void update(final GatewayRouteTO routeTO) {\n+    public void update(final SRARouteTO routeTO) {\n         logic.update(routeTO);\n     }\n ","previous_filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GatewayRouteServiceImpl.java"},{"sha":"081a5e90ebc6f9cbbc01ec3e31845e7beb86f295","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SRARouteDAO.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSRARouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSRARouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSRARouteDAO.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -19,17 +19,17 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n \n-public interface GatewayRouteDAO extends DAO<GatewayRoute> {\n+public interface SRARouteDAO extends DAO<SRARoute> {\n \n-    GatewayRoute find(String key);\n+    SRARoute find(String key);\n \n-    List<GatewayRoute> findAll();\n+    List<SRARoute> findAll();\n \n-    GatewayRoute save(GatewayRoute route);\n+    SRARoute save(SRARoute route);\n \n     void delete(String key);\n \n-    void delete(GatewayRoute route);\n+    void delete(SRARoute route);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GatewayRouteDAO.java"},{"sha":"7814225c73e4bebf5fec42ca8a75bd0e9835fef4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SRARoute.java","status":"renamed","additions":32,"deletions":11,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSRARoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSRARoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSRARoute.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -20,28 +20,49 @@\n \n import java.net.URI;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n \n-public interface GatewayRoute extends Entity {\n+public interface SRARoute extends Entity {\n \n     String getName();\n \n     void setName(String name);\n \n-    int getOrder();\n-\n-    void setOrder(int order);\n-\n     URI getTarget();\n \n     void setTarget(URI target);\n \n-    List<GatewayRouteFilter> getFilters();\n+    URI getError();\n+\n+    void setError(URI error);\n+\n+    SRARouteType getType();\n+\n+    void setType(SRARouteType type);\n+\n+    boolean isLogout();\n+\n+    void setLogout(boolean logout);\n+\n+    URI getPostLogout();\n+\n+    void setPostLogout(URI postLogout);\n+\n+    boolean isCsrf();\n+\n+    void setCsrf(boolean csrf);\n+\n+    int getOrder();\n+\n+    void setOrder(int order);\n+\n+    List<SRARouteFilter> getFilters();\n \n-    void setFilters(List<GatewayRouteFilter> filters);\n+    void setFilters(List<SRARouteFilter> filters);\n \n-    List<GatewayRoutePredicate> getPredicates();\n+    List<SRARoutePredicate> getPredicates();\n \n-    void setPredicates(List<GatewayRoutePredicate> predicates);\n+    void setPredicates(List<SRARoutePredicate> predicates);\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/GatewayRoute.java"},{"sha":"3bb8bebdc2d51b8b31182c9ce248318aedb2f228","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASRARouteDAO.java","status":"renamed","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASRARouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASRARouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASRARouteDAO.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -20,39 +20,39 @@\n \n import java.util.List;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n-import org.apache.syncope.core.persistence.jpa.entity.JPAGatewayRoute;\n+import org.apache.syncope.core.persistence.jpa.entity.JPASRARoute;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n+import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n \n @Repository\n-public class JPAGatewayRouteDAO extends AbstractDAO<GatewayRoute> implements GatewayRouteDAO {\n+public class JPASRARouteDAO extends AbstractDAO<SRARoute> implements SRARouteDAO {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public GatewayRoute find(final String key) {\n-        return entityManager().find(JPAGatewayRoute.class, key);\n+    public SRARoute find(final String key) {\n+        return entityManager().find(JPASRARoute.class, key);\n     }\n \n     @Transactional(readOnly = true)\n     @Override\n-    public List<GatewayRoute> findAll() {\n-        TypedQuery<GatewayRoute> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAGatewayRoute.class.getSimpleName() + \" e\", GatewayRoute.class);\n+    public List<SRARoute> findAll() {\n+        TypedQuery<SRARoute> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASRARoute.class.getSimpleName() + \" e\", SRARoute.class);\n \n         return query.getResultList();\n     }\n \n     @Override\n     @Transactional(rollbackFor = Throwable.class)\n-    public GatewayRoute save(final GatewayRoute report) {\n+    public SRARoute save(final SRARoute report) {\n         return entityManager().merge(report);\n     }\n \n     @Override\n     public void delete(final String key) {\n-        GatewayRoute report = find(key);\n+        SRARoute report = find(key);\n         if (report == null) {\n             return;\n         }\n@@ -61,7 +61,7 @@ public void delete(final String key) {\n     }\n \n     @Override\n-    public void delete(final GatewayRoute report) {\n+    public void delete(final SRARoute report) {\n         entityManager().remove(report);\n     }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGatewayRouteDAO.java"},{"sha":"5db4207da548945903279bd5ec330439335409d3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n@@ -165,6 +164,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModule;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPAAuthModuleItem;\n import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2IdPMetadata;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n \n public class JPAEntityFactory implements EntityFactory {\n \n@@ -315,8 +315,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPARemediation();\n         } else if (reference.equals(Batch.class)) {\n             result = (E) new JPABatch();\n-        } else if (reference.equals(GatewayRoute.class)) {\n-            result = (E) new JPAGatewayRoute();\n+        } else if (reference.equals(SRARoute.class)) {\n+            result = (E) new JPASRARoute();\n         } else if (reference.equals(AuthModule.class)) {\n             result = (E) new JPAAuthModule();\n         } else if (reference.equals(AuthModuleItem.class)) {"},{"sha":"a851c2b40e9892972cf557c86ec84363442204e2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASRARoute.java","status":"renamed","additions":91,"deletions":24,"changes":115,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASRARoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASRARoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASRARoute.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -24,32 +24,49 @@\n \n import javax.persistence.Column;\n import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n-import org.apache.syncope.core.persistence.jpa.validation.entity.GatewayRouteCheck;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.SRARouteCheck;\n \n @Entity\n-@Table(name = JPAGatewayRoute.TABLE)\n-@GatewayRouteCheck\n-public class JPAGatewayRoute extends AbstractGeneratedKeyEntity implements GatewayRoute {\n+@Table(name = JPASRARoute.TABLE)\n+@SRARouteCheck\n+public class JPASRARoute extends AbstractGeneratedKeyEntity implements SRARoute {\n \n     private static final long serialVersionUID = -8718852361106840530L;\n \n-    public static final String TABLE = \"GatewayRoute\";\n+    public static final String TABLE = \"SRARoute\";\n \n     @Column(unique = true, nullable = false)\n     private String name;\n \n-    private Integer routeOrder;\n-\n     @NotNull\n     private String target;\n \n+    private String error;\n+\n+    @NotNull\n+    @Enumerated(EnumType.STRING)\n+    private SRARouteType routeType;\n+\n+    @NotNull\n+    private Boolean logout = false;\n+\n+    private String postLogout;\n+\n+    @NotNull\n+    private Boolean csrf = true;\n+\n+    private Integer routeOrder;\n+\n     @Lob\n     private String predicates;\n \n@@ -67,46 +84,96 @@ public void setName(final String name) {\n     }\n \n     @Override\n-    public int getOrder() {\n-        return Optional.ofNullable(routeOrder).orElse(0);\n+    public URI getTarget() {\n+        return URI.create(target);\n     }\n \n     @Override\n-    public void setOrder(final int order) {\n-        this.routeOrder = order;\n+    public void setTarget(final URI target) {\n+        this.target = Optional.ofNullable(target).map(URI::toASCIIString).orElse(null);\n     }\n \n     @Override\n-    public URI getTarget() {\n-        return URI.create(target);\n+    public URI getError() {\n+        return Optional.ofNullable(error).map(URI::create).orElse(null);\n     }\n \n     @Override\n-    public void setTarget(final URI target) {\n-        this.target = Optional.ofNullable(target).map(URI::toASCIIString).orElse(null);\n+    public void setError(final URI error) {\n+        this.error = Optional.ofNullable(error).map(URI::toASCIIString).orElse(null);\n+    }\n+\n+    @Override\n+    public SRARouteType getType() {\n+        return routeType;\n+    }\n+\n+    @Override\n+    public void setType(final SRARouteType type) {\n+        this.routeType = type;\n+    }\n+\n+    @Override\n+    public boolean isLogout() {\n+        return logout;\n+    }\n+\n+    @Override\n+    public void setLogout(final boolean logout) {\n+        this.logout = logout;\n+    }\n+\n+    @Override\n+    public URI getPostLogout() {\n+        return Optional.ofNullable(postLogout).map(URI::create).orElse(null);\n+    }\n+\n+    @Override\n+    public void setPostLogout(final URI postLogout) {\n+        this.postLogout = Optional.ofNullable(postLogout).map(URI::toASCIIString).orElse(null);\n+    }\n+\n+    @Override\n+    public boolean isCsrf() {\n+        return csrf;\n+    }\n+\n+    @Override\n+    public void setCsrf(final boolean csrf) {\n+        this.csrf = csrf;\n+    }\n+\n+    @Override\n+    public int getOrder() {\n+        return Optional.ofNullable(routeOrder).orElse(0);\n+    }\n+\n+    @Override\n+    public void setOrder(final int order) {\n+        this.routeOrder = order;\n     }\n \n     @Override\n-    public List<GatewayRouteFilter> getFilters() {\n+    public List<SRARouteFilter> getFilters() {\n         return filters == null\n                 ? List.of()\n-                : List.of(POJOHelper.deserialize(filters, GatewayRouteFilter[].class));\n+                : List.of(POJOHelper.deserialize(filters, SRARouteFilter[].class));\n     }\n \n     @Override\n-    public void setFilters(final List<GatewayRouteFilter> filters) {\n+    public void setFilters(final List<SRARouteFilter> filters) {\n         this.filters = POJOHelper.serialize(filters);\n     }\n \n     @Override\n-    public List<GatewayRoutePredicate> getPredicates() {\n+    public List<SRARoutePredicate> getPredicates() {\n         return predicates == null\n                 ? List.of()\n-                : List.of(POJOHelper.deserialize(predicates, GatewayRoutePredicate[].class));\n+                : List.of(POJOHelper.deserialize(predicates, SRARoutePredicate[].class));\n     }\n \n     @Override\n-    public void setPredicates(final List<GatewayRoutePredicate> predicates) {\n+    public void setPredicates(final List<SRARoutePredicate> predicates) {\n         this.predicates = POJOHelper.serialize(predicates);\n     }\n }","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAGatewayRoute.java"},{"sha":"d9a3214c4357540cdb8c373152e9929625e9cdb9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SRARouteCheck.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSRARouteCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSRARouteCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSRARouteCheck.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -29,11 +29,11 @@\n \n @Target({ ElementType.TYPE })\n @Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = GatewayRouteValidator.class)\n+@Constraint(validatedBy = SRARouteValidator.class)\n @Documented\n-public @interface GatewayRouteCheck {\n+public @interface SRARouteCheck {\n \n-    String message() default \"{org.apache.syncope.core.persistence.validation.gatewayroute}\";\n+    String message() default \"{org.apache.syncope.core.persistence.validation.sraroute}\";\n \n     Class<?>[] groups() default {};\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/GatewayRouteCheck.java"},{"sha":"fef13063448aa7c4b33bd64283567e76560b0669","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SRARouteValidator.java","status":"renamed","additions":20,"deletions":3,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSRARouteValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSRARouteValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSRARouteValidator.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -20,12 +20,13 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n \n-public class GatewayRouteValidator extends AbstractValidator<GatewayRouteCheck, GatewayRoute> {\n+public class SRARouteValidator extends AbstractValidator<SRARouteCheck, SRARoute> {\n \n     @Override\n-    public boolean isValid(final GatewayRoute route, final ConstraintValidatorContext context) {\n+    public boolean isValid(final SRARoute route, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n         boolean isValid = true;\n@@ -38,6 +39,22 @@ public boolean isValid(final GatewayRoute route, final ConstraintValidatorContex\n             isValid = false;\n         }\n \n+        if (route.getType() == SRARouteType.PUBLIC && route.isLogout()) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidMapping, \"Logout route cannot be public\")).\n+                    addPropertyNode(\"routeType\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n+        if (route.getPostLogout() != null && !route.isLogout()) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidMapping, \"Can set postLogout only for logout routes\")).\n+                    addPropertyNode(\"postLogout\").addConstraintViolation();\n+\n+            isValid = false;\n+        }\n+\n         if (route.getPredicates().size() > 1\n                 && route.getPredicates().stream().allMatch(predicate -> predicate.getCond() != null)) {\n ","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/GatewayRouteValidator.java"},{"sha":"f8c0ce4a594349aeae7e06d5a402be1e148a237c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SRARouteTest.java","status":"renamed","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSRARouteTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSRARouteTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSRARouteTest.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -26,26 +26,27 @@\n import java.util.List;\n import java.util.UUID;\n import javax.ws.rs.HttpMethod;\n-import org.apache.syncope.common.lib.types.FilterFactory;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.PredicateFactory;\n-import org.apache.syncope.core.persistence.api.dao.GatewayRouteDAO;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.common.lib.types.SRARouteFilterFactory;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateFactory;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n+import org.apache.syncope.core.persistence.api.dao.SRARouteDAO;\n \n @Transactional(\"Master\")\n-public class GatewayRouteTest extends AbstractTest {\n+public class SRARouteTest extends AbstractTest {\n \n     @Autowired\n-    private GatewayRouteDAO routeDAO;\n+    private SRARouteDAO routeDAO;\n \n     @Test\n     public void find() {\n-        GatewayRoute route = routeDAO.find(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+        SRARoute route = routeDAO.find(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n         assertNotNull(route);\n         assertEquals(1, route.getPredicates().size());\n \n@@ -55,20 +56,21 @@ public void find() {\n \n     @Test\n     public void findAll() {\n-        List<GatewayRoute> routes = routeDAO.findAll();\n+        List<SRARoute> routes = routeDAO.findAll();\n         assertNotNull(routes);\n         assertEquals(1, routes.size());\n     }\n \n     @Test\n     public void save() {\n-        GatewayRoute route = entityFactory.newEntity(GatewayRoute.class);\n+        SRARoute route = entityFactory.newEntity(SRARoute.class);\n         route.setName(\"just for test\");\n         route.setTarget(URI.create(\"http://httpbin.org:80\"));\n-        route.setPredicates(List.of(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.METHOD).args(HttpMethod.GET).build()));\n-        route.setFilters(List.of(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build()));\n+        route.setType(SRARouteType.PUBLIC);\n+        route.setPredicates(List.of(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.METHOD).args(HttpMethod.GET).build()));\n+        route.setFilters(List.of(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build()));\n \n         int beforeCount = routeDAO.findAll().size();\n \n@@ -82,7 +84,7 @@ public void save() {\n \n     @Test\n     public void delete() {\n-        GatewayRoute route = routeDAO.find(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+        SRARoute route = routeDAO.find(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n         assertNotNull(route);\n \n         routeDAO.delete(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");","previous_filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GatewayRouteTest.java"},{"sha":"225b40ab707bd8f3c9f18b3637631a4d0f544a7c","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -2465,7 +2465,9 @@ $$ }&#10;\n   \n   <SecurityQuestion id=\"887028ea-66fc-41e7-b397-620d7ea6dfbb\" content=\"What's your mother's maiden name?\"/>\n \n-  <GatewayRoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\" predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n+  <SRARoute id=\"ec7bada2-3dd6-460c-8441-65521d005ffa\" name=\"basic1\" target=\"http://httpbin.org:80\"\n+            logout=\"0\" csrf=\"1\"\n+            predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n "},{"sha":"b16788ca024b8a2c51282165836d8222466e0beb","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SRARouteDataBinder.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSRARouteDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSRARouteDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSRARouteDataBinder.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.api.data;\n \n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n \n-public interface GatewayRouteDataBinder {\n+public interface SRARouteDataBinder {\n \n-    void getGatewayRoute(GatewayRoute report, GatewayRouteTO reportTO);\n+    void getSRARoute(SRARoute route, SRARouteTO routeTO);\n \n-    GatewayRouteTO getGatewayRouteTO(GatewayRoute report);\n+    SRARouteTO getSRARouteTO(SRARoute route);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/GatewayRouteDataBinder.java"},{"sha":"9b89ee5b68f1217b0869f8a96340f5301faf259b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SRARouteDataBinderImpl.java","status":"renamed","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSRARouteDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSRARouteDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSRARouteDataBinderImpl.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -20,17 +20,17 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.core.persistence.api.entity.GatewayRoute;\n-import org.apache.syncope.core.provisioning.api.data.GatewayRouteDataBinder;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.SRARoute;\n+import org.apache.syncope.core.provisioning.api.data.SRARouteDataBinder;\n \n @Component\n-public class GatewayRouteDataBinderImpl implements GatewayRouteDataBinder {\n+public class SRARouteDataBinderImpl implements SRARouteDataBinder {\n \n     @Override\n-    public void getGatewayRoute(final GatewayRoute route, final GatewayRouteTO routeTO) {\n+    public void getSRARoute(final SRARoute route, final SRARouteTO routeTO) {\n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n         if (StringUtils.isBlank(routeTO.getName())) {\n             sce.getElements().add(\"name\");\n@@ -43,19 +43,29 @@ public void getGatewayRoute(final GatewayRoute route, final GatewayRouteTO route\n         }\n \n         route.setName(routeTO.getName());\n-        route.setOrder(routeTO.getOrder());\n         route.setTarget(routeTO.getTarget());\n+        route.setError(routeTO.getError());\n+        route.setType(routeTO.getType());\n+        route.setLogout(routeTO.isLogout());\n+        route.setPostLogout(routeTO.getPostLogout());\n+        route.setCsrf(routeTO.isCsrf());\n+        route.setOrder(routeTO.getOrder());\n         route.setFilters(routeTO.getFilters());\n         route.setPredicates(routeTO.getPredicates());\n     }\n \n     @Override\n-    public GatewayRouteTO getGatewayRouteTO(final GatewayRoute route) {\n-        GatewayRouteTO routeTO = new GatewayRouteTO();\n+    public SRARouteTO getSRARouteTO(final SRARoute route) {\n+        SRARouteTO routeTO = new SRARouteTO();\n         routeTO.setKey(route.getKey());\n         routeTO.setName(route.getName());\n-        routeTO.setOrder(route.getOrder());\n         routeTO.setTarget(route.getTarget());\n+        routeTO.setError(route.getError());\n+        routeTO.setType(route.getType());\n+        routeTO.setLogout(route.isLogout());\n+        routeTO.setPostLogout(route.getPostLogout());\n+        routeTO.setCsrf(route.isCsrf());\n+        routeTO.setOrder(route.getOrder());\n         routeTO.getFilters().addAll(route.getFilters());\n         routeTO.getPredicates().addAll(route.getPredicates());\n ","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GatewayRouteDataBinderImpl.java"},{"sha":"9ebf39684ad7910b792b20b6d3efb0722b74cdce","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -459,8 +459,8 @@ public UserWorkflowResult<String> executeNextTask(final WorkflowTaskExecInput wo\n         FlowableRuntimeUtils.updateStatus(engine, procInstID, user);\n         user = userDAO.save(user);\n \n-        engine.getRuntimeService().setVariable(procInstID, FlowableRuntimeUtils.USER_TO, dataBinder.\n-                getUserTO(user, true));\n+        engine.getRuntimeService().setVariable(\n+                procInstID, FlowableRuntimeUtils.USER_TO, dataBinder.getUserTO(user, true));\n \n         if (engine.getRuntimeService().createProcessInstanceQuery().\n                 processInstanceId(procInstID).active().list().isEmpty()) {"},{"sha":"4e574599128eb8f83e5efa51e0bb1c896fdf94dd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -146,7 +146,6 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.common.rest.api.service.UserRequestService;\n import org.apache.syncope.common.rest.api.service.BpmnProcessService;\n-import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n import org.apache.syncope.common.rest.api.service.SAML2IdPMetadataConfService;\n import org.apache.syncope.common.rest.api.service.wa.SAML2IdPMetadataService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n@@ -159,6 +158,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n \n @SpringJUnitConfig({ CoreITContext.class, SelfKeymasterClientContext.class, ZookeeperKeymasterClientContext.class })\n public abstract class AbstractITCase {\n@@ -323,7 +323,7 @@ public abstract class AbstractITCase {\n \n     protected static RemediationService remediationService;\n \n-    protected static GatewayRouteService gatewayRouteService;\n+    protected static SRARouteService gatewayRouteService;\n \n     protected static CamelRouteService camelRouteService;\n \n@@ -411,7 +411,7 @@ public static void restSetup() {\n         securityQuestionService = adminClient.getService(SecurityQuestionService.class);\n         implementationService = adminClient.getService(ImplementationService.class);\n         remediationService = adminClient.getService(RemediationService.class);\n-        gatewayRouteService = adminClient.getService(GatewayRouteService.class);\n+        gatewayRouteService = adminClient.getService(SRARouteService.class);\n         camelRouteService = adminClient.getService(CamelRouteService.class);\n         saml2SpService = adminClient.getService(SAML2SPService.class);\n         saml2IdPService = adminClient.getService(SAML2IdPService.class);"},{"sha":"45190bde8b8558e9e3f72653c975b7d3c50c0dd1","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SRARouteITCase.java","status":"renamed","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSRARouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSRARouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSRARouteITCase.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -29,21 +29,21 @@\n import javax.ws.rs.HttpMethod;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.common.lib.types.FilterFactory;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.PredicateFactory;\n-import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.apache.syncope.common.lib.types.SRARouteFilterFactory;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateFactory;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.Test;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n \n-public class GatewayRouteITCase extends AbstractITCase {\n+public class SRARouteITCase extends AbstractITCase {\n \n     @Test\n     public void read() {\n-        GatewayRouteTO route = gatewayRouteService.read(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n+        SRARouteTO route = gatewayRouteService.read(\"ec7bada2-3dd6-460c-8441-65521d005ffa\");\n         assertNotNull(route);\n         assertEquals(1, route.getPredicates().size());\n \n@@ -57,26 +57,26 @@ public void read() {\n \n     @Test\n     public void findAll() {\n-        List<GatewayRouteTO> routes = gatewayRouteService.list();\n+        List<SRARouteTO> routes = gatewayRouteService.list();\n         assertNotNull(routes);\n         assertFalse(routes.isEmpty());\n     }\n \n     @Test\n     public void createUpdateDelete() {\n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setName(\"just for test\");\n         route.setTarget(URI.create(\"http://httpbin.org:80\"));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.METHOD).args(HttpMethod.GET).build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.METHOD).args(HttpMethod.GET).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_REQUEST_HEADER).args(\"X-Request-Foo, Bar\").build());\n \n         int beforeCount = gatewayRouteService.list().size();\n \n         Response response = gatewayRouteService.create(route);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatusInfo().getStatusCode());\n-        route = getObject(response.getLocation(), GatewayRouteService.class, GatewayRouteTO.class);\n+        route = getObject(response.getLocation(), SRARouteService.class, SRARouteTO.class);\n         assertNotNull(route);\n         assertNotNull(route.getKey());\n \n@@ -98,7 +98,7 @@ public void createUpdateDelete() {\n \n     @Test\n     public void exceptions() {\n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         try {\n             gatewayRouteService.create(route);\n             fail();","previous_filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GatewayRouteITCase.java"},{"sha":"924baa5a5e9964b9d98d06e483f565095db1381d","filename":"sra/pom.xml","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fpom.xml?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -42,30 +42,42 @@ under the License.\n       <groupId>org.springframework.cloud</groupId>\n       <artifactId>spring-cloud-starter-gateway</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework.cloud</groupId>\n+      <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-security</artifactId>\n+      <artifactId>spring-boot-starter-actuator</artifactId>\n       <exclusions>\n         <exclusion>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-logging</artifactId>\n         </exclusion>\n-      </exclusions>    \n-    </dependency>\n-    <dependency>\n-      <groupId>org.springframework.cloud</groupId>\n-      <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n+      </exclusions>\n     </dependency>\n+\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n-      <artifactId>spring-boot-starter-actuator</artifactId>\n+      <artifactId>spring-boot-starter-security</artifactId>\n       <exclusions>\n         <exclusion>\n           <groupId>org.springframework.boot</groupId>\n           <artifactId>spring-boot-starter-logging</artifactId>\n         </exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-oauth2-client</artifactId>\n+    </dependency>\n+\n+    <dependency> \n+      <groupId>org.springframework.session</groupId> \n+      <artifactId>spring-session-core</artifactId> \n+    </dependency>\n+\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-log4j2</artifactId>"},{"sha":"bec1f075bccd0fcd7f08b564ef7dc5da89886d39","filename":"sra/src/main/java/org/apache/syncope/sra/RouteProvider.java","status":"modified","additions":29,"deletions":10,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.sra;\n \n import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n import java.util.function.Consumer;\n@@ -31,13 +32,13 @@\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n import org.apache.syncope.sra.filters.ClientCertsToRequestHeaderFilterFactory;\n import org.apache.syncope.sra.filters.CustomGatewayFilterFactory;\n import org.apache.syncope.sra.filters.LinkRewriteGatewayFilterFactory;\n+import org.apache.syncope.sra.filters.PrincipalToRequestHeaderFilterFactory;\n import org.apache.syncope.sra.filters.QueryParamToRequestHeaderFilterFactory;\n import org.apache.syncope.sra.predicates.CustomRoutePredicateFactory;\n import org.slf4j.Logger;\n@@ -90,6 +91,7 @@\n import org.springframework.stereotype.Component;\n import org.springframework.util.unit.DataSize;\n import org.springframework.web.server.ServerWebExchange;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n \n @Component\n public class RouteProvider {\n@@ -113,8 +115,10 @@ public class RouteProvider {\n \n     private SyncopeClient client;\n \n+    private final List<SRARouteTO> routeTOs = new ArrayList<>();\n+\n     @SuppressWarnings(\"unchecked\")\n-    private GatewayFilter toFilter(final GatewayRouteTO route, final GatewayRouteFilter gwfilter)\n+    private GatewayFilter toFilter(final SRARouteTO route, final SRARouteFilter gwfilter)\n             throws ClassNotFoundException {\n \n         GatewayFilter filter;\n@@ -314,6 +318,14 @@ private GatewayFilter toFilter(final GatewayRouteTO route, final GatewayRouteFil\n                         apply(c -> c.setName(gwfilter.getArgs().trim()));\n                 break;\n \n+            case PRINCIPAL_TO_REQUEST_HEADER:\n+                filter = ApplicationContextUtils.getOrCreateBean(\n+                        ctx,\n+                        PrincipalToRequestHeaderFilterFactory.class.getName(),\n+                        PrincipalToRequestHeaderFilterFactory.class).\n+                        apply(c -> c.setName(gwfilter.getArgs().trim()));\n+                break;\n+\n             case CUSTOM:\n                 String[] customArgs = gwfilter.getArgs().split(\";\");\n                 Consumer<CustomGatewayFilterFactory.Config> customConsumer = customArgs.length > 1\n@@ -339,7 +351,7 @@ private GatewayFilter toFilter(final GatewayRouteTO route, final GatewayRouteFil\n         return filter instanceof Ordered ? filter : new OrderedGatewayFilter(filter, 0);\n     }\n \n-    private AsyncPredicate<ServerWebExchange> toPredicate(final GatewayRoutePredicate gwpredicate, final boolean negate)\n+    private AsyncPredicate<ServerWebExchange> toPredicate(final SRARoutePredicate gwpredicate, final boolean negate)\n             throws ClassNotFoundException {\n \n         AsyncPredicate<ServerWebExchange> predicate;\n@@ -430,7 +442,7 @@ private AsyncPredicate<ServerWebExchange> toPredicate(final GatewayRoutePredicat\n         return negate ? predicate.negate() : predicate;\n     }\n \n-    private Route.AsyncBuilder toRoute(final GatewayRouteTO gwroute) {\n+    private Route.AsyncBuilder toRoute(final SRARouteTO gwroute) {\n         Route.AsyncBuilder builder = new Route.AsyncBuilder().\n                 id(gwroute.getKey()).order(gwroute.getOrder()).uri(gwroute.getTarget());\n \n@@ -494,8 +506,15 @@ public List<Route.AsyncBuilder> fetch() {\n             }\n         }\n \n-        return client.getService(GatewayRouteService.class).list().stream().\n-                map(this::toRoute).\n-                collect(Collectors.toList());\n+        synchronized (routeTOs) {\n+            routeTOs.clear();\n+            routeTOs.addAll(client.getService(SRARouteService.class).list());\n+        }\n+\n+        return routeTOs.stream().map(this::toRoute).collect(Collectors.toList());\n+    }\n+\n+    public List<SRARouteTO> getRouteTOs() {\n+        return routeTOs;\n     }\n }"},{"sha":"159af5a5008ef5623218f4fa8c93255d7c62225d","filename":"sra/src/main/java/org/apache/syncope/sra/SecurityConfig.java","status":"modified","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSecurityConfig.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -20,16 +20,29 @@\n \n import java.util.Objects;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.sra.security.CsrfRouteMatcher;\n+import org.apache.syncope.sra.security.LogoutRouteMatcher;\n+import org.apache.syncope.sra.security.OAuth2SecurityConfigUtils;\n+import org.apache.syncope.sra.security.PublicRouteMatcher;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.actuate.autoconfigure.security.reactive.EndpointRequest;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n import org.springframework.core.env.Environment;\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;\n import org.springframework.security.core.userdetails.User;\n import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrations;\n+import org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n import org.springframework.security.web.server.SecurityWebFilterChain;\n import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n@@ -38,10 +51,21 @@\n @Configuration\n public class SecurityConfig {\n \n+    private static final String AM_TYPE = \"am.type\";\n+\n+    public enum AMType {\n+        OIDC,\n+        OAUTH2,\n+        SAML2,\n+        WA\n+\n+    }\n+\n     @Autowired\n     private Environment env;\n \n     @Bean\n+    @Order(0)\n     public SecurityWebFilterChain actuatorSecurityFilterChain(final ServerHttpSecurity http) {\n         ServerWebExchangeMatcher actuatorMatcher = EndpointRequest.toAnyEndpoint();\n         return http.securityMatcher(actuatorMatcher).\n@@ -60,4 +84,66 @@ public MapReactiveUserDetailsService userDetailsService() {\n                 build();\n         return new MapReactiveUserDetailsService(user);\n     }\n+\n+    @Bean\n+    @ConditionalOnProperty(name = AM_TYPE, havingValue = \"OIDC\")\n+    public ReactiveClientRegistrationRepository oidcClientRegistrationRepository() {\n+        return new InMemoryReactiveClientRegistrationRepository(\n+                ClientRegistrations.fromOidcIssuerLocation(env.getProperty(\"am.oidc.configuration\")).\n+                        registrationId(\"OIDC\").\n+                        clientId(env.getProperty(\"am.oidc.client.id\")).\n+                        clientSecret(env.getProperty(\"am.oidc.client.secret\")).\n+                        build());\n+    }\n+\n+    @Bean\n+    @ConditionalOnProperty(name = AM_TYPE, havingValue = \"OAUTH2\")\n+    public ReactiveClientRegistrationRepository oauth2ClientRegistrationRepository() {\n+        return new InMemoryReactiveClientRegistrationRepository(\n+                ClientRegistration.withRegistrationId(\"OAUTH2\").\n+                        redirectUriTemplate(\"{baseUrl}/{action}/oauth2/code/{registrationId}\").\n+                        tokenUri(env.getProperty(\"am.oauth2.tokenUri\")).\n+                        authorizationUri(env.getProperty(\"am.oauth2.authorizationUri\")).\n+                        userInfoUri(env.getProperty(\"am.oauth2.userInfoUri\")).\n+                        userNameAttributeName(env.getProperty(\"am.oauth2.userNameAttributeName\")).\n+                        clientId(env.getProperty(\"am.oauth2.client.id\")).\n+                        clientSecret(env.getProperty(\"am.oauth2.client.secret\")).\n+                        scope(env.getProperty(\"am.oauth2.scopes\", String[].class)).\n+                        authorizationGrantType(new AuthorizationGrantType(env.getProperty(\"am.oauth2.grantType\"))).\n+                        build());\n+    }\n+\n+    @Bean\n+    @Order(1)\n+    @ConditionalOnProperty(name = AM_TYPE)\n+    public SecurityWebFilterChain routesSecurityFilterChain(\n+            final ServerHttpSecurity http,\n+            final CacheManager cacheManager,\n+            final LogoutRouteMatcher logoutRouteMatcher,\n+            final PublicRouteMatcher publicRouteMatcher,\n+            final CsrfRouteMatcher csrfRouteMatcher,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        AMType amType = AMType.valueOf(env.getProperty(AM_TYPE));\n+\n+        ServerHttpSecurity.AuthorizeExchangeSpec builder = http.authorizeExchange().\n+                matchers(publicRouteMatcher).permitAll().\n+                anyExchange().authenticated();\n+\n+        switch (amType) {\n+            case OIDC:\n+            case OAUTH2:\n+                OAuth2SecurityConfigUtils.forLogin(http, amType, ctx);\n+                OAuth2SecurityConfigUtils.forLogout(builder, amType, cacheManager, logoutRouteMatcher, ctx);\n+                break;\n+\n+            case SAML2:\n+                break;\n+\n+            case WA:\n+            default:\n+        }\n+\n+        return builder.and().csrf().requireCsrfProtectionMatcher(csrfRouteMatcher).and().build();\n+    }\n }"},{"sha":"27c1edcd7bf0bad0eacaffd8184eb0a95c4d3cc0","filename":"sra/src/main/java/org/apache/syncope/sra/SessionConfig.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSessionConfig.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSessionConfig.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSessionConfig.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import java.util.List;\n+import org.apache.syncope.sra.session.CacheManagerReactiveSessionRepository;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.cache.annotation.EnableCaching;\n+import org.springframework.cache.concurrent.ConcurrentMapCache;\n+import org.springframework.cache.support.SimpleCacheManager;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.session.MapSession;\n+import org.springframework.session.ReactiveSessionRepository;\n+import org.springframework.session.config.annotation.web.server.EnableSpringWebSession;\n+\n+@Configuration\n+@EnableCaching\n+@EnableSpringWebSession\n+public class SessionConfig {\n+\n+    public static final String DEFAULT_CACHE = \"default\";\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public ReactiveSessionRepository<MapSession> reactiveSessionRepository() {\n+        return new CacheManagerReactiveSessionRepository();\n+    }\n+\n+    @ConditionalOnMissingBean\n+    @Bean\n+    public CacheManager cacheManager() {\n+        SimpleCacheManager cacheManager = new SimpleCacheManager();\n+        cacheManager.setCaches(List.of(new ConcurrentMapCache(DEFAULT_CACHE)));\n+        return cacheManager;\n+    }\n+}"},{"sha":"8c9c91ab280ff1e54467ca3b472d1a4fa8b4d72f","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAWebExceptionHandler.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAWebExceptionHandler.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra;\n+\n+import io.netty.channel.unix.Errors.NativeIoException;\n+import java.net.ConnectException;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.cloud.gateway.event.RefreshRoutesEvent;\n+import org.springframework.cloud.gateway.support.NotFoundException;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.InvalidMediaTypeException;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.security.oauth2.core.OAuth2AuthorizationException;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebExceptionHandler;\n+import reactor.core.publisher.Mono;\n+\n+@Component\n+@Order(-2)\n+public class SyncopeSRAWebExceptionHandler implements WebExceptionHandler, ApplicationListener<RefreshRoutesEvent> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeSRAWebExceptionHandler.class);\n+\n+    private static final Map<String, Optional<URI>> CACHE = new ConcurrentHashMap<>();\n+\n+    @Autowired\n+    private RouteProvider routeProvider;\n+\n+    @Value(\"${global.error}\")\n+    private URI globalError;\n+\n+    @Override\n+    public void onApplicationEvent(final RefreshRoutesEvent event) {\n+        CACHE.clear();\n+    }\n+\n+    private URI getError(final ServerWebExchange exchange) {\n+        URI error = globalError;\n+        String routeId = exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_PREDICATE_ROUTE_ATTR);\n+        if (StringUtils.isNotBlank(routeId)) {\n+            Optional<URI> routeError = Optional.ofNullable(CACHE.get(routeId)).orElseGet(() -> {\n+                URI uri = null;\n+                Optional<SRARouteTO> route = routeProvider.getRouteTOs().stream().\n+                        filter(r -> routeId.equals(r.getKey())).findFirst();\n+                if (route.isPresent()) {\n+                    uri = route.get().getError();\n+                }\n+\n+                return CACHE.put(routeId, Optional.ofNullable(uri));\n+            });\n+            if (routeError.isPresent()) {\n+                error = routeError.get();\n+            }\n+        }\n+\n+        return error;\n+    }\n+\n+    private boolean acceptsTextHtml(final ServerHttpRequest request) {\n+        try {\n+            List<MediaType> acceptedMediaTypes = request.getHeaders().getAccept();\n+            acceptedMediaTypes.remove(MediaType.ALL);\n+            MediaType.sortBySpecificityAndQuality(acceptedMediaTypes);\n+            return acceptedMediaTypes.stream().anyMatch(MediaType.TEXT_HTML::isCompatibleWith);\n+        } catch (InvalidMediaTypeException e) {\n+            LOG.debug(\"Unexpected exception\", e);\n+            return false;\n+        }\n+    }\n+\n+    private Mono<Void> doHandle(final ServerWebExchange exchange, final Throwable throwable, final HttpStatus status) {\n+        try {\n+            if (acceptsTextHtml(exchange.getRequest())) {\n+                exchange.getResponse().setStatusCode(HttpStatus.SEE_OTHER);\n+\n+                URI error = getError(exchange);\n+                exchange.getResponse().getHeaders().add(HttpHeaders.LOCATION, error.toASCIIString());\n+            } else {\n+                exchange.getResponse().setStatusCode(status);\n+\n+                exchange.getResponse().getHeaders().add(\n+                        RESTHeaders.ERROR_CODE, HttpStatus.NOT_FOUND.toString());\n+                exchange.getResponse().getHeaders().add(\n+                        RESTHeaders.ERROR_INFO, throwable.getMessage().replace(\"\\n\", \" \"));\n+            }\n+        } catch (UnsupportedOperationException e) {\n+            LOG.debug(\"Could not perform, ignoring\", e);\n+        }\n+\n+        return exchange.getResponse().setComplete();\n+    }\n+\n+    @Override\n+    public Mono<Void> handle(final ServerWebExchange exchange, final Throwable throwable) {\n+        if (throwable instanceof ConnectException\n+                || throwable instanceof NativeIoException\n+                || throwable instanceof NotFoundException) {\n+\n+            LOG.error(\"ConnectException thrown\", throwable);\n+\n+            return doHandle(exchange, throwable, HttpStatus.NOT_FOUND);\n+        } else if (throwable instanceof OAuth2AuthorizationException) {\n+            LOG.error(\"OAuth2AuthorizationException thrown\", throwable);\n+\n+            return doHandle(exchange, throwable, HttpStatus.INTERNAL_SERVER_ERROR);\n+        }\n+\n+        return Mono.error(throwable);\n+    }\n+}"},{"sha":"ea56f97e23f415d690083f2e4e6a2dd2aaad59fd","filename":"sra/src/main/java/org/apache/syncope/sra/filters/ModifyResponseGatewayFilterFactory.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FModifyResponseGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FModifyResponseGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FModifyResponseGatewayFilterFactory.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -77,11 +77,9 @@ public Mono<Void> filter(final ServerWebExchange exchange, final GatewayFilterCh\n             return chain.filter(exchange.mutate().response(decorate(exchange)).build());\n         }\n \n-        @SuppressWarnings(\"squid:S3776\")\n         private ServerHttpResponse decorate(final ServerWebExchange exchange) {\n             return new ServerHttpResponseDecorator(exchange.getResponse()) {\n \n-                @SuppressWarnings(\"squid:S3358\")\n                 @Override\n                 public Mono<Void> writeWith(final Publisher<? extends DataBuffer> body) {\n                     return skipCond(this)"},{"sha":"cf5925d89d4cc26f15340256453a058bc8835e47","filename":"sra/src/main/java/org/apache/syncope/sra/filters/PrincipalToRequestHeaderFilterFactory.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FPrincipalToRequestHeaderFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FPrincipalToRequestHeaderFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Ffilters%2FPrincipalToRequestHeaderFilterFactory.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.filters;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.sra.SessionConfig;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.cloud.gateway.filter.GatewayFilter;\n+import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;\n+import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory.NameConfig;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.security.oauth2.core.oidc.StandardClaimNames;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.security.oauth2.core.user.OAuth2User;\n+import org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository;\n+import org.springframework.session.Session;\n+import reactor.core.publisher.Mono;\n+\n+public class PrincipalToRequestHeaderFilterFactory extends AbstractGatewayFilterFactory<NameConfig> {\n+\n+    @Autowired\n+    private CacheManager cacheManager;\n+\n+    public PrincipalToRequestHeaderFilterFactory() {\n+        super(NameConfig.class);\n+    }\n+\n+    @Override\n+    public GatewayFilter apply(final NameConfig config) {\n+        return (exchange, chain) -> exchange.getSession().\n+                flatMap(session -> Mono.justOrEmpty(Optional.ofNullable(\n+                cacheManager.getCache(SessionConfig.DEFAULT_CACHE).get(session.getId(), Session.class)).\n+                map(cachedSession -> {\n+                    String principal = null;\n+\n+                    SecurityContext ctx = cachedSession.getAttribute(\n+                            WebSessionServerSecurityContextRepository.DEFAULT_SPRING_SECURITY_CONTEXT_ATTR_NAME);\n+                    if (ctx != null && ctx.getAuthentication() != null) {\n+                        if (ctx.getAuthentication().getPrincipal() instanceof OidcUser) {\n+                            principal = ((OidcUser) ctx.getAuthentication().getPrincipal()).\n+                                    getIdToken().getTokenValue();\n+                        } else if (ctx.getAuthentication().getPrincipal() instanceof OAuth2User) {\n+                            principal = Objects.toString(((OAuth2User) ctx.getAuthentication().getPrincipal()).\n+                                    getAttributes().get(StandardClaimNames.PREFERRED_USERNAME), null);\n+                        } else {\n+                            principal = ctx.getAuthentication().getName();\n+                        }\n+                    }\n+\n+                    return principal;\n+                }))).\n+                transform(principal -> principal.flatMap(p -> StringUtils.isEmpty(p)\n+                ? chain.filter(exchange)\n+                : chain.filter(exchange.mutate().\n+                        request(exchange.getRequest().mutate().\n+                                headers(headers -> headers.add(config.getName(), p)).build()).\n+                        build()))).\n+                switchIfEmpty(chain.filter(exchange));\n+    }\n+}"},{"sha":"7047386c68ac2f599d8cde88416a41a890300559","filename":"sra/src/main/java/org/apache/syncope/sra/security/AbstractRouteMatcher.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractRouteMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractRouteMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FAbstractRouteMatcher.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.syncope.sra.RouteProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gateway.event.RefreshRoutesEvent;\n+import org.springframework.cloud.gateway.route.Route;\n+import org.springframework.cloud.gateway.route.RouteLocator;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+public abstract class AbstractRouteMatcher\n+        implements ServerWebExchangeMatcher, ApplicationListener<RefreshRoutesEvent> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractRouteMatcher.class);\n+\n+    protected static final Map<String, Map<String, Boolean>> CACHE = new ConcurrentHashMap<>();\n+\n+    @Autowired\n+    private RouteLocator routeLocator;\n+\n+    @Autowired\n+    protected RouteProvider routeProvider;\n+\n+    protected abstract String getCacheName();\n+\n+    protected abstract boolean routeBehavior(Route route);\n+\n+    @Override\n+    public void onApplicationEvent(final RefreshRoutesEvent event) {\n+        Optional.ofNullable(CACHE.get(getCacheName())).ifPresent(Map::clear);\n+    }\n+\n+    @Override\n+    public Mono<MatchResult> matches(final ServerWebExchange exchange) {\n+        // see org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping#lookupRoute\n+        return routeLocator.getRoutes().\n+                // individually filter routes so that filterWhen error delaying is not a problem\n+                concatMap(route -> Mono.just(route).filterWhen(r -> r.getPredicate().apply(exchange)).\n+                // instead of immediately stopping main flux due to error, log and swallow it\n+                doOnError(e -> LOG.error(\"Error applying predicate for route: {}\", route.getId(), e)).\n+                onErrorResume(e -> Mono.empty())).\n+                next().\n+                flatMap(route -> {\n+                    exchange.getAttributes().put(ServerWebExchangeUtils.GATEWAY_PREDICATE_ROUTE_ATTR, route.getId());\n+                    LOG.debug(\"[{}] Route found: {}\", getClass().getName(), route);\n+\n+                    boolean cond = Optional.ofNullable(CACHE.get(getCacheName()).get(route.getId())).orElseGet(() -> {\n+                        boolean result = routeBehavior(route);\n+                        CACHE.get(getCacheName()).put(route.getId(), result);\n+                        return result;\n+                    });\n+                    LOG.debug(\"[{}] Condition matched: {}\", getClass().getName(), cond);\n+\n+                    return cond ? MatchResult.match() : MatchResult.notMatch();\n+                }).switchIfEmpty(Mono.defer(() -> {\n+            LOG.debug(\"[{}] No Route found\", getClass().getName());\n+            return MatchResult.notMatch();\n+        }));\n+    }\n+}"},{"sha":"d15a7e9e569afb8029c0353bea5f9c68f1ac6196","filename":"sra/src/main/java/org/apache/syncope/sra/security/CsrfRouteMatcher.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FCsrfRouteMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FCsrfRouteMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FCsrfRouteMatcher.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.cloud.gateway.route.Route;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+@Component\n+public class CsrfRouteMatcher extends AbstractRouteMatcher {\n+\n+    private static final String CACHE_NAME = CsrfRouteMatcher.class.getName();\n+\n+    private static final Set<HttpMethod> ALLOWED_METHODS = Set.of(\n+            HttpMethod.GET, HttpMethod.HEAD, HttpMethod.TRACE, HttpMethod.OPTIONS);\n+\n+    static {\n+        CACHE.put(CACHE_NAME, new ConcurrentHashMap<>());\n+    }\n+\n+    @Autowired\n+    private PublicRouteMatcher publicRouteMatcher;\n+\n+    @Override\n+    protected String getCacheName() {\n+        return CACHE_NAME;\n+    }\n+\n+    @Override\n+    protected boolean routeBehavior(final Route route) {\n+        return routeProvider.getRouteTOs().stream().\n+                filter(r -> route.getId().equals(r.getKey())).findFirst().\n+                map(SRARouteTO::isCsrf).orElse(true)\n+                && !publicRouteMatcher.routeBehavior(route);\n+    }\n+\n+    @Override\n+    public Mono<MatchResult> matches(final ServerWebExchange exchange) {\n+        return Mono.just(exchange.getRequest()).\n+                map(HttpRequest::getMethod).\n+                filter(ALLOWED_METHODS::contains).\n+                flatMap(m -> MatchResult.notMatch()).\n+                switchIfEmpty(super.matches(exchange));\n+    }\n+}"},{"sha":"aeff3dc2ff3c6f72abf158b104f864a5e0ffc31c","filename":"sra/src/main/java/org/apache/syncope/sra/security/LogoutRouteMatcher.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FLogoutRouteMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FLogoutRouteMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FLogoutRouteMatcher.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.springframework.cloud.gateway.route.Route;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class LogoutRouteMatcher extends AbstractRouteMatcher {\n+\n+    private static final String CACHE_NAME = LogoutRouteMatcher.class.getName();\n+\n+    static {\n+        CACHE.put(CACHE_NAME, new ConcurrentHashMap<>());\n+    }\n+\n+    @Override\n+    protected String getCacheName() {\n+        return CACHE_NAME;\n+    }\n+\n+    @Override\n+    protected boolean routeBehavior(final Route route) {\n+        return routeProvider.getRouteTOs().stream().\n+                filter(r -> route.getId().equals(r.getKey())).findFirst().\n+                map(SRARouteTO::isLogout).orElse(false);\n+    }\n+}"},{"sha":"5be5e5203af43662614ec1efcc0ac6eb561d982a","filename":"sra/src/main/java/org/apache/syncope/sra/security/OAuth2SecurityConfigUtils.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOAuth2SecurityConfigUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOAuth2SecurityConfigUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOAuth2SecurityConfigUtils.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security;\n+\n+import java.util.Collections;\n+import org.apache.syncope.sra.ApplicationContextUtils;\n+import org.apache.syncope.sra.SecurityConfig.AMType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.authentication.DelegatingReactiveAuthenticationManager;\n+import org.springframework.security.authentication.ReactiveAuthenticationManager;\n+import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.oauth2.client.InMemoryReactiveOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.authentication.OAuth2LoginReactiveAuthenticationManager;\n+import org.springframework.security.oauth2.client.endpoint.WebClientReactiveAuthorizationCodeTokenResponseClient;\n+import org.springframework.security.oauth2.client.oidc.authentication.OidcAuthorizationCodeReactiveAuthenticationManager;\n+import org.springframework.security.oauth2.client.oidc.userinfo.OidcReactiveOAuth2UserService;\n+import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.userinfo.DefaultReactiveOAuth2UserService;\n+import org.springframework.security.oauth2.client.web.server.AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.server.OAuth2AuthorizationRequestRedirectWebFilter;\n+import org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizationCodeAuthenticationTokenConverter;\n+import org.springframework.security.oauth2.client.web.server.ServerOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.server.authentication.OAuth2LoginAuthenticationWebFilter;\n+import org.springframework.security.web.server.DelegatingServerAuthenticationEntryPoint.DelegateEntry;\n+import org.springframework.security.web.server.ServerAuthenticationEntryPoint;\n+import org.springframework.security.web.server.authentication.AuthenticationWebFilter;\n+import org.springframework.security.web.server.authentication.RedirectServerAuthenticationEntryPoint;\n+import org.springframework.security.web.server.authentication.RedirectServerAuthenticationSuccessHandler;\n+import org.springframework.security.web.server.authentication.logout.LogoutWebFilter;\n+import org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository;\n+import org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher;\n+import reactor.core.publisher.Mono;\n+\n+public final class OAuth2SecurityConfigUtils {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAuth2SecurityConfigUtils.class);\n+\n+    private static ReactiveAuthenticationManager authenticationManager(final AMType amType) {\n+        WebClientReactiveAuthorizationCodeTokenResponseClient client =\n+                new WebClientReactiveAuthorizationCodeTokenResponseClient();\n+        ReactiveAuthenticationManager authenticationManager =\n+                new OAuth2LoginReactiveAuthenticationManager(client, new DefaultReactiveOAuth2UserService());\n+\n+        if (AMType.OIDC == amType) {\n+            OidcAuthorizationCodeReactiveAuthenticationManager oidc =\n+                    new OidcAuthorizationCodeReactiveAuthenticationManager(client, new OidcReactiveOAuth2UserService());\n+            authenticationManager = new DelegatingReactiveAuthenticationManager(oidc, authenticationManager);\n+        }\n+\n+        return authenticationManager;\n+    }\n+\n+    public static void forLogin(\n+            final ServerHttpSecurity http,\n+            final AMType amType,\n+            final ApplicationContext ctx) {\n+\n+        ReactiveClientRegistrationRepository clientRegistrationRepository =\n+                ctx.getBean(ReactiveClientRegistrationRepository.class);\n+\n+        ReactiveOAuth2AuthorizedClientService authorizedClientService =\n+                new InMemoryReactiveOAuth2AuthorizedClientService(clientRegistrationRepository);\n+        ServerOAuth2AuthorizedClientRepository authorizedClientRepository =\n+                new AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository(authorizedClientService);\n+\n+        OAuth2AuthorizationRequestRedirectWebFilter authRequestRedirectFilter =\n+                new OAuth2AuthorizationRequestRedirectWebFilter(clientRegistrationRepository);\n+\n+        AuthenticationWebFilter authenticationFilter =\n+                new OAuth2LoginAuthenticationWebFilter(authenticationManager(amType), authorizedClientRepository);\n+        authenticationFilter.setRequiresAuthenticationMatcher(\n+                new PathPatternParserServerWebExchangeMatcher(\"/login/oauth2/code/{registrationId}\"));\n+        authenticationFilter.setServerAuthenticationConverter(\n+                new ServerOAuth2AuthorizationCodeAuthenticationTokenConverter(clientRegistrationRepository));\n+        authenticationFilter.setAuthenticationSuccessHandler(new RedirectServerAuthenticationSuccessHandler());\n+        authenticationFilter.setAuthenticationFailureHandler((exchange, ex) -> Mono.error(ex));\n+        authenticationFilter.setSecurityContextRepository(new WebSessionServerSecurityContextRepository());\n+\n+        MediaTypeServerWebExchangeMatcher htmlMatcher = new MediaTypeServerWebExchangeMatcher(MediaType.TEXT_HTML);\n+        htmlMatcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));\n+        ServerAuthenticationEntryPoint entrypoint =\n+                new RedirectServerAuthenticationEntryPoint(\"/oauth2/authorization/\" + amType.name());\n+        http.exceptionHandling().authenticationEntryPoint(new DelegateEntry(htmlMatcher, entrypoint).getEntryPoint());\n+\n+        http.addFilterAt(authRequestRedirectFilter, SecurityWebFiltersOrder.HTTP_BASIC);\n+        http.addFilterAt(authenticationFilter, SecurityWebFiltersOrder.AUTHENTICATION);\n+    }\n+\n+    public static void forLogout(\n+            final ServerHttpSecurity.AuthorizeExchangeSpec builder,\n+            final AMType amType,\n+            final CacheManager cacheManager,\n+            final LogoutRouteMatcher logoutRouteMatcher,\n+            final ConfigurableApplicationContext ctx) {\n+\n+        builder.and().logout().disable();\n+\n+        LogoutWebFilter logoutWebFilter = new LogoutWebFilter();\n+        logoutWebFilter.setRequiresLogoutMatcher(logoutRouteMatcher);\n+        logoutWebFilter.setLogoutHandler(new SessionRemovalServerLogoutHandler(cacheManager));\n+\n+        if (AMType.OIDC == amType) {\n+            try {\n+                OidcClientInitiatedServerLogoutSuccessHandler handler = ApplicationContextUtils.getOrCreateBean(\n+                        ctx,\n+                        OidcClientInitiatedServerLogoutSuccessHandler.class.getName(),\n+                        OidcClientInitiatedServerLogoutSuccessHandler.class);\n+                logoutWebFilter.setLogoutSuccessHandler(handler);\n+            } catch (ClassNotFoundException e) {\n+                LOG.error(\"While creating instance of {}\",\n+                        OidcClientInitiatedServerLogoutSuccessHandler.class.getName(), e);\n+            }\n+        }\n+\n+        builder.and().addFilterAt(logoutWebFilter, SecurityWebFiltersOrder.LOGOUT);\n+    }\n+\n+    private OAuth2SecurityConfigUtils() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"77097276feef821017442c9fe30f267ebda09a2a","filename":"sra/src/main/java/org/apache/syncope/sra/security/OidcClientInitiatedServerLogoutSuccessHandler.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOidcClientInitiatedServerLogoutSuccessHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOidcClientInitiatedServerLogoutSuccessHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FOidcClientInitiatedServerLogoutSuccessHandler.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security;\n+\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.annotation.Resource;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.sra.RouteProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.cloud.gateway.event.RefreshRoutesEvent;\n+import org.springframework.cloud.gateway.support.ServerWebExchangeUtils;\n+import org.springframework.context.ApplicationListener;\n+import reactor.core.publisher.Mono;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.security.web.server.DefaultServerRedirectStrategy;\n+import org.springframework.security.web.server.ServerRedirectStrategy;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import org.springframework.security.web.server.authentication.logout.RedirectServerLogoutSuccessHandler;\n+import org.springframework.security.web.server.authentication.logout.ServerLogoutSuccessHandler;\n+import org.springframework.util.Assert;\n+import org.springframework.web.util.UriComponentsBuilder;\n+\n+/**\n+ * A reactive logout success handler for initiating OIDC logout through the user agent.\n+ *\n+ * @see <a href=\"https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\">RP-Initiated Logout</a>\n+ * @see org.springframework.security.web.server.authentication.logout.ServerLogoutSuccessHandler\n+ */\n+public class OidcClientInitiatedServerLogoutSuccessHandler\n+        implements ServerLogoutSuccessHandler, ApplicationListener<RefreshRoutesEvent> {\n+\n+    private static final Map<String, Optional<URI>> CACHE = new ConcurrentHashMap<>();\n+\n+    private final ServerRedirectStrategy redirectStrategy = new DefaultServerRedirectStrategy();\n+\n+    private final RedirectServerLogoutSuccessHandler serverLogoutSuccessHandler =\n+            new RedirectServerLogoutSuccessHandler();\n+\n+    @Resource(name = \"oidcClientRegistrationRepository\")\n+    private ReactiveClientRegistrationRepository clientRegistrationRepository;\n+\n+    @Autowired\n+    private RouteProvider routeProvider;\n+\n+    @Value(\"${global.postLogout}\")\n+    private URI globalPostLogout;\n+\n+    @Override\n+    public void onApplicationEvent(final RefreshRoutesEvent event) {\n+        CACHE.clear();\n+    }\n+\n+    @Override\n+    public Mono<Void> onLogoutSuccess(final WebFilterExchange exchange, final Authentication authentication) {\n+        return Mono.just(authentication).\n+                filter(OAuth2AuthenticationToken.class::isInstance).\n+                filter(token -> authentication.getPrincipal() instanceof OidcUser).\n+                map(OAuth2AuthenticationToken.class::cast).\n+                flatMap(this::endSessionEndpoint).\n+                map(endSessionEndpoint -> endpointUri(exchange, endSessionEndpoint, authentication)).\n+                switchIfEmpty(serverLogoutSuccessHandler.onLogoutSuccess(exchange, authentication).then(Mono.empty())).\n+                flatMap(endpointUri -> redirectStrategy.sendRedirect(exchange.getExchange(), endpointUri));\n+    }\n+\n+    private Mono<URI> endSessionEndpoint(final OAuth2AuthenticationToken token) {\n+        String registrationId = token.getAuthorizedClientRegistrationId();\n+        return clientRegistrationRepository.findByRegistrationId(registrationId).\n+                map(ClientRegistration::getProviderDetails).\n+                map(ClientRegistration.ProviderDetails::getConfigurationMetadata).\n+                flatMap(configurationMetadata -> Mono.justOrEmpty(configurationMetadata.get(\"end_session_endpoint\"))).\n+                map(Object::toString).\n+                map(URI::create);\n+    }\n+\n+    private URI endpointUri(\n+            final WebFilterExchange exchange,\n+            final URI endSessionEndpoint,\n+            final Authentication authentication) {\n+\n+        UriComponentsBuilder builder = UriComponentsBuilder.fromUri(endSessionEndpoint);\n+        builder.queryParam(\"id_token_hint\", idToken(authentication));\n+\n+        URI postLogout = globalPostLogout;\n+        String routeId = exchange.getExchange().getAttribute(ServerWebExchangeUtils.GATEWAY_PREDICATE_ROUTE_ATTR);\n+        if (StringUtils.isNotBlank(routeId)) {\n+            Optional<URI> routePostLogout = Optional.ofNullable(CACHE.get(routeId)).orElseGet(() -> {\n+                URI uri = null;\n+                Optional<SRARouteTO> route = routeProvider.getRouteTOs().stream().\n+                        filter(r -> routeId.equals(r.getKey())).findFirst();\n+                if (route.isPresent()) {\n+                    uri = route.get().getPostLogout();\n+                }\n+\n+                return CACHE.put(routeId, Optional.ofNullable(uri));\n+            });\n+            if (routePostLogout.isPresent()) {\n+                postLogout = routePostLogout.get();\n+            }\n+        }\n+        builder.queryParam(\"post_logout_redirect_uri\", postLogout);\n+\n+        return builder.encode(StandardCharsets.UTF_8).build().toUri();\n+    }\n+\n+    private String idToken(final Authentication authentication) {\n+        return ((OidcUser) authentication.getPrincipal()).getIdToken().getTokenValue();\n+    }\n+\n+    /**\n+     * The URL to redirect to after successfully logging out when not originally an OIDC login\n+     *\n+     * @param logoutSuccessUrl the url to redirect to. Default is \"/login?logout\".\n+     */\n+    public void setLogoutSuccessUrl(final URI logoutSuccessUrl) {\n+        Assert.notNull(logoutSuccessUrl, \"logoutSuccessUrl cannot be null\");\n+        this.serverLogoutSuccessHandler.setLogoutSuccessUrl(logoutSuccessUrl);\n+    }\n+}"},{"sha":"7e5e10e6800e1693e78d9d6ab19f93999edf26d7","filename":"sra/src/main/java/org/apache/syncope/sra/security/PublicRouteMatcher.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FPublicRouteMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FPublicRouteMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FPublicRouteMatcher.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n+import org.springframework.cloud.gateway.route.Route;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PublicRouteMatcher extends AbstractRouteMatcher {\n+\n+    private static final String CACHE_NAME = PublicRouteMatcher.class.getName();\n+\n+    static {\n+        CACHE.put(CACHE_NAME, new ConcurrentHashMap<>());\n+    }\n+\n+    @Override\n+    protected String getCacheName() {\n+        return CACHE_NAME;\n+    }\n+\n+    @Override\n+    protected boolean routeBehavior(final Route route) {\n+        return routeProvider.getRouteTOs().stream().\n+                filter(r -> route.getId().equals(r.getKey())).findFirst().\n+                map(r -> r.getType() == SRARouteType.PUBLIC).orElse(true);\n+    }\n+}"},{"sha":"0c2558639a3fa51bffc61bdd66cfc2b80b6c29c1","filename":"sra/src/main/java/org/apache/syncope/sra/security/SessionRemovalServerLogoutHandler.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FSessionRemovalServerLogoutHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FSessionRemovalServerLogoutHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2FSessionRemovalServerLogoutHandler.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.security;\n+\n+import org.apache.syncope.sra.SessionConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.WebFilterExchange;\n+import org.springframework.security.web.server.authentication.logout.ServerLogoutHandler;\n+import reactor.core.publisher.Mono;\n+\n+public class SessionRemovalServerLogoutHandler implements ServerLogoutHandler {\n+\n+    private static final Logger EVENTS = LoggerFactory.getLogger(\"events\");\n+\n+    private final CacheManager cacheManager;\n+\n+    public SessionRemovalServerLogoutHandler(final CacheManager cacheManager) {\n+        this.cacheManager = cacheManager;\n+    }\n+\n+    @Override\n+    public Mono<Void> logout(final WebFilterExchange exchange, final Authentication authentication) {\n+        return exchange.getExchange().getSession().doOnNext(session -> {\n+            session.invalidate();\n+            EVENTS.debug(\"Invalidate session {}\", (authentication == null) ? null : authentication.getPrincipal());\n+            cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getId());\n+        }).flatMap(session -> Mono.empty());\n+    }\n+}"},{"sha":"6ef98cfa30de875422ec4036f3a04f56c3a69c11","filename":"sra/src/main/java/org/apache/syncope/sra/session/CacheManagerReactiveSessionRepository.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsession%2FCacheManagerReactiveSessionRepository.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsession%2FCacheManagerReactiveSessionRepository.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsession%2FCacheManagerReactiveSessionRepository.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.sra.session;\n+\n+import org.apache.syncope.sra.SessionConfig;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.CacheManager;\n+import org.springframework.session.MapSession;\n+import org.springframework.session.ReactiveSessionRepository;\n+import reactor.core.publisher.Mono;\n+\n+public class CacheManagerReactiveSessionRepository implements ReactiveSessionRepository<MapSession> {\n+\n+    @Autowired\n+    private CacheManager cacheManager;\n+\n+    @Override\n+    public Mono<MapSession> createSession() {\n+        return Mono.just(new MapSession());\n+    }\n+\n+    @Override\n+    public Mono<Void> save(final MapSession session) {\n+        return Mono.fromRunnable(() -> {\n+            if (!session.getId().equals(session.getOriginalId())) {\n+                cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(session.getOriginalId());\n+            }\n+            cacheManager.getCache(SessionConfig.DEFAULT_CACHE).put(session.getId(), session);\n+        });\n+    }\n+\n+    @Override\n+    public Mono<MapSession> findById(final String id) {\n+        return Mono.defer(() -> Mono.justOrEmpty(\n+                cacheManager.getCache(SessionConfig.DEFAULT_CACHE).get(id, MapSession.class)).\n+                map(MapSession::new).\n+                switchIfEmpty(deleteById(id).then(Mono.empty())));\n+    }\n+\n+    @Override\n+    public Mono<Void> deleteById(final String id) {\n+        return Mono.fromRunnable(() -> cacheManager.getCache(SessionConfig.DEFAULT_CACHE).evictIfPresent(id));\n+    }\n+}"},{"sha":"0e6263a165ef2580ad05cc85cbc9756dc826b452","filename":"sra/src/main/resources/sra.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fresources%2Fsra.properties?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -18,3 +18,6 @@ anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n useGZIPCompression=true\n+\n+global.error=/error\n+global.postLogout=/logout"},{"sha":"271f3de604f7a4057a55fd0b210b7a0ba885100f","filename":"sra/src/test/java/org/apache/syncope/sra/AbstractTest.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FAbstractTest.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -27,6 +27,7 @@\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.cloud.contract.wiremock.AutoConfigureWireMock;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.test.context.ContextConfiguration;\n \n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@@ -47,6 +48,9 @@ public static boolean available(int port) {\n     @Autowired\n     protected RouteRefresher routeRefresher;\n \n+    @Autowired\n+    protected ConfigurableApplicationContext ctx;\n+\n     @Value(\"${local.server.port}\")\n     protected int gatewayPort;\n "},{"sha":"bc8912969d1663e6dbf964cd359b3b38751bf437","filename":"sra/src/test/java/org/apache/syncope/sra/RouteProviderTest.java","status":"modified","additions":188,"deletions":123,"changes":311,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProviderTest.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -21,30 +21,48 @@\n import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;\n import static com.github.tomakehurst.wiremock.client.WireMock.post;\n import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.verify;\n import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import com.fasterxml.jackson.databind.JsonNode;\n import java.io.IOException;\n import java.net.URI;\n import java.time.ZonedDateTime;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n-import org.apache.syncope.common.lib.types.FilterFactory;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicateCond;\n-import org.apache.syncope.common.lib.types.PredicateFactory;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.common.lib.types.SRARouteFilterFactory;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateCond;\n+import org.apache.syncope.common.lib.types.SRARouteType;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateFactory;\n import org.apache.syncope.sra.filters.BodyPropertyAddingGatewayFilterFactory;\n+import org.apache.syncope.sra.filters.PrincipalToRequestHeaderFilterFactory;\n import org.apache.syncope.sra.predicates.BodyPropertyMatchingRoutePredicateFactory;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.Cache;\n+import org.springframework.cache.CacheManager;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextImpl;\n+import org.springframework.security.oauth2.core.oidc.OidcIdToken;\n+import org.springframework.security.oauth2.core.oidc.user.OidcUser;\n+import org.springframework.security.web.server.context.WebSessionServerSecurityContextRepository;\n+import org.springframework.session.MapSession;\n+import org.springframework.session.Session;\n+import org.springframework.test.util.ReflectionTestUtils;\n import org.springframework.test.web.reactive.server.WebTestClient;\n import org.springframework.web.reactive.function.BodyInserters;\n \n@@ -72,15 +90,15 @@ public void addResponseHeader() {\n         stubFor(get(urlEqualTo(\"/addResponseHeader\")).willReturn(aResponse()));\n \n         // 3. create route configuration\n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"addResponseHeader\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.METHOD).args(\"GET\").build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.PATH).args(\"/addResponseHeader\").cond(GatewayRoutePredicateCond.AND).build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,World\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.METHOD).args(\"GET\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/addResponseHeader\").cond(SRARoutePredicateCond.AND).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,World\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -92,8 +110,8 @@ public void addResponseHeader() {\n \n         // 5. update route configuration\n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,WorldZ\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_RESPONSE_HEADER).args(\"Hello,WorldZ\").build());\n \n         routeRefresher.refresh();\n \n@@ -119,40 +137,40 @@ public void addRequestHeader() {\n \n         stubFor(get(urlEqualTo(\"/requestHeader\")).withHeader(\"Hello\", equalTo(\"World\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"requestHeader\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.REMOTE_ADDR).args(\"localhost\").build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_REQUEST_HEADER).args(\"Hello,World\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.REMOTE_ADDR).args(\"localhost\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_REQUEST_HEADER).args(\"Hello,World\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n         webClient.get().uri(\"/requestHeader\").exchange().expectStatus().isOk();\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_REQUEST_HEADER).args(\"Hello,Mondo\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_REQUEST_HEADER).args(\"Hello,Mondo\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n         webClient.get().uri(\"/requestHeader\").exchange().expectStatus().isNotFound();\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.REMOVE_REQUEST_HEADER).args(\"Hello\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.REMOVE_REQUEST_HEADER).args(\"Hello\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n         webClient.get().uri(\"/requestHeader\").header(\"Hello\", \"World\").exchange().expectStatus().isNotFound();\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.SET_REQUEST_HEADER).args(\"Hello, World\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SET_REQUEST_HEADER).args(\"Hello, World\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -172,13 +190,13 @@ public void hystrix() {\n                         withBody(\"no fallback\").\n                         withFixedDelay(3000)));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"hystrix\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.HOST).args(\"*.hystrix.com\").build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.HYSTRIX).args(\"fallbackcmd,forward:/fallback\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.HOST).args(\"*.hystrix.com\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.HYSTRIX).args(\"fallbackcmd,forward:/fallback\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -197,11 +215,11 @@ public void requestHeaderToRequestUri() {\n \n         stubFor(get(urlEqualTo(\"/requestHeaderToRequestUri\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"requestHeaderToRequestUri\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.REQUEST_HEADER_TO_REQUEST_URI).args(\"NewUri\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.REQUEST_HEADER_TO_REQUEST_URI).args(\"NewUri\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -217,11 +235,11 @@ public void responseHeader() {\n \n         stubFor(get(urlEqualTo(\"/responseHeader\")).willReturn(aResponse().withHeader(\"Hello\", \"World\")));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"responseHeader\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.REMOVE_RESPONSE_HEADER).args(\"Hello\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.REMOVE_RESPONSE_HEADER).args(\"Hello\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -240,8 +258,8 @@ public void responseHeader() {\n                 expectHeader().valueEquals(\"Hello\", \"World\");\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.REWRITE_RESPONSE_HEADER).args(\"Hello,World,Mondo\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.REWRITE_RESPONSE_HEADER).args(\"Hello,World,Mondo\").build());\n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n@@ -250,8 +268,8 @@ public void responseHeader() {\n                 expectHeader().valueEquals(\"Hello\", \"Mondo\");\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.SET_RESPONSE_HEADER).args(\"Hello,Mondo\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SET_RESPONSE_HEADER).args(\"Hello,Mondo\").build());\n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n@@ -267,20 +285,20 @@ public void addRequestParameter() {\n         stubFor(get(urlEqualTo(\"/addRequestParameter?Hello=World\")).withQueryParam(\"Hello\", equalTo(\"World\")).\n                 willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"addRequestParameter\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_REQUEST_PARAMETER).args(\"Hello,World\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_REQUEST_PARAMETER).args(\"Hello,World\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n         webClient.get().uri(\"/addRequestParameter\").exchange().expectStatus().isOk();\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_REQUEST_PARAMETER).args(\"Hello,Mondo\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_REQUEST_PARAMETER).args(\"Hello,Mondo\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -294,13 +312,13 @@ public void rewritePath() {\n \n         stubFor(get(urlEqualTo(\"/rewrite\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"rewrite\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.REWRITE_PATH).args(\"/remove/(?<segment>.*), /${segment}\").build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.SECURE_HEADERS).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.REWRITE_PATH).args(\"/remove/(?<segment>.*), /${segment}\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SECURE_HEADERS).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -327,10 +345,10 @@ public void rewritePath() {\n                 expectHeader().doesNotExist(\"X-XSS-Protection\");\n \n         route.getFilters().clear();\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.PATH).args(\"/remove/{segment}\").build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.SET_PATH).args(\"/{segment}\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/remove/{segment}\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SET_PATH).args(\"/{segment}\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -339,8 +357,8 @@ public void rewritePath() {\n                 expectStatus().isOk();\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.STRIP_PREFIX).args(\"1\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.STRIP_PREFIX).args(\"1\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -354,11 +372,11 @@ public void redirect() {\n \n         stubFor(get(urlEqualTo(\"/redirect\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"redirect\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.REDIRECT).args(\"307,http://127.0.0.1:\" + wiremockPort).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.REDIRECT).args(\"307,http://127.0.0.1:\" + wiremockPort).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -373,7 +391,7 @@ public void redirect() {\n         webClient.get().uri(\"/redirect\").exchange().expectStatus().isOk();\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().factory(FilterFactory.SET_STATUS).args(\"404\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().factory(SRARouteFilterFactory.SET_STATUS).args(\"404\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -387,20 +405,20 @@ public void datetime() {\n \n         stubFor(get(urlEqualTo(\"/prefix/datetime\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"datetime\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.AFTER).args(ZonedDateTime.now().minusYears(1).toString()).build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.BEFORE).args(ZonedDateTime.now().plusYears(1).toString()).\n-                cond(GatewayRoutePredicateCond.AND).build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.BETWEEN).args(ZonedDateTime.now().minusYears(1).toString() + \",\"\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.AFTER).args(ZonedDateTime.now().minusYears(1).toString()).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.BEFORE).args(ZonedDateTime.now().plusYears(1).toString()).\n+                cond(SRARoutePredicateCond.AND).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.BETWEEN).args(ZonedDateTime.now().minusYears(1).toString() + \",\"\n                 + ZonedDateTime.now().plusYears(1).toString()).\n-                cond(GatewayRoutePredicateCond.AND).build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.PREFIX_PATH).args(\"/prefix\").build());\n+                cond(SRARoutePredicateCond.AND).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.PREFIX_PATH).args(\"/prefix\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -409,23 +427,23 @@ public void datetime() {\n                 expectStatus().isOk();\n \n         route.getPredicates().clear();\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.AFTER).args(ZonedDateTime.now().plusYears(1).toString()).build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.BEFORE).args(ZonedDateTime.now().minusYears(1).toString()).\n-                cond(GatewayRoutePredicateCond.OR).build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.BETWEEN).args(ZonedDateTime.now().plusYears(1).toString() + \",\"\n-                + ZonedDateTime.now().minusYears(1).toString()).cond(GatewayRoutePredicateCond.OR).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.AFTER).args(ZonedDateTime.now().plusYears(1).toString()).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.BEFORE).args(ZonedDateTime.now().minusYears(1).toString()).\n+                cond(SRARoutePredicateCond.OR).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.BETWEEN).args(ZonedDateTime.now().plusYears(1).toString() + \",\"\n+                + ZonedDateTime.now().minusYears(1).toString()).cond(SRARoutePredicateCond.OR).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n         webClient.get().uri(\"/datetime\").exchange().expectStatus().isNotFound();\n \n         route.getPredicates().clear();\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.BEFORE).negate().args(ZonedDateTime.now().minusYears(1).toString()).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.BEFORE).negate().args(ZonedDateTime.now().minusYears(1).toString()).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -439,16 +457,16 @@ public void header() {\n \n         stubFor(get(urlEqualTo(\"/header\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"header\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.COOKIE).args(\"Hello,World\").build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.HOST).args(\"host\").cond(GatewayRoutePredicateCond.AND).build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.HEADER).args(\"Hello,World\").cond(GatewayRoutePredicateCond.AND).build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().factory(FilterFactory.PRESERVE_HOST_HEADER).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.COOKIE).args(\"Hello,World\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.HOST).args(\"host\").cond(SRARoutePredicateCond.AND).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.HEADER).args(\"Hello,World\").cond(SRARoutePredicateCond.AND).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().factory(SRARouteFilterFactory.PRESERVE_HOST_HEADER).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -470,26 +488,26 @@ public void header() {\n     public void query() {\n         stubFor(get(urlEqualTo(\"/query?name=value\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"query\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.QUERY).args(\"name,value\").build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.SAVE_SESSION).build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.SET_REQUEST_SIZE).args(\"5000\").build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.RETRY).args(\"3\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.QUERY).args(\"name,value\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SAVE_SESSION).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.SET_REQUEST_SIZE).args(\"5000\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.RETRY).args(\"3\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n         webClient.get().uri(\"/query?name=value\").exchange().expectStatus().isOk();\n \n         route.getPredicates().clear();\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.QUERY).args(\"name,anotherValue\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.QUERY).args(\"name,anotherValue\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -503,11 +521,11 @@ public void path() {\n         stubFor(get(urlEqualTo(\"/pathMatcher/2\")).willReturn(aResponse()));\n         stubFor(get(urlEqualTo(\"/pathMatcher/2/3\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"pathMatcher\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.PATH).args(\"/pathMatcher/**\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/pathMatcher/**\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -524,10 +542,10 @@ public void linkRewrite() {\n                 withHeader(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_VALUE).\n                 withBody(\"<html><head></head><body><a href=\\\"/absolute\\\">absolute link</a></body></html>\")));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"linkRewrite\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getFilters().add(new GatewayRouteFilter.Builder().factory(FilterFactory.LINK_REWRITE).\n+        route.getFilters().add(new SRARouteFilter.Builder().factory(SRARouteFilterFactory.LINK_REWRITE).\n                 args(\"http://localhost:\" + gatewayPort).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n@@ -541,7 +559,7 @@ public void linkRewrite() {\n                 });\n \n         route.getFilters().clear();\n-        route.getFilters().add(new GatewayRouteFilter.Builder().factory(FilterFactory.LINK_REWRITE).\n+        route.getFilters().add(new SRARouteFilter.Builder().factory(SRARouteFilterFactory.LINK_REWRITE).\n                 args(\"http://localhost:\" + gatewayPort + \",true\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n@@ -560,11 +578,11 @@ public void clientCertToRequestHeader() {\n         stubFor(get(urlEqualTo(\"/clientCert\")).willReturn(aResponse().\n                 withHeader(HttpHeaders.CONTENT_TYPE, MediaType.TEXT_HTML_VALUE)));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"clientCert\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -582,11 +600,11 @@ public void queryParamToRequestHeader() {\n         stubFor(get(urlEqualTo(\"/queryParamToRequestHeader?Header=Test&Header=Test1\")).\n                 withHeader(\"Hello\", equalTo(\"World\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"queryParamToRequestHeader\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.QUERY_PARAM_TO_REQUEST_HEADER).args(\"Hello\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.QUERY_PARAM_TO_REQUEST_HEADER).args(\"Hello\").build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -601,26 +619,73 @@ public void queryParamToRequestHeader() {\n                 expectStatus().isOk();\n     }\n \n+    @Test\n+    public void principalToRequestHeader() throws IllegalArgumentException, IllegalAccessException {\n+        // first mock...\n+        OidcIdToken oidcIdToken = mock(OidcIdToken.class);\n+        when(oidcIdToken.getTokenValue()).thenReturn(\"john.doe\");\n+\n+        OidcUser user = mock(OidcUser.class);\n+        when(user.getIdToken()).thenReturn(oidcIdToken);\n+\n+        Authentication authentication = mock(Authentication.class);\n+        when(authentication.getPrincipal()).thenReturn(user);\n+\n+        MapSession session = new MapSession();\n+        session.setAttribute(\n+                WebSessionServerSecurityContextRepository.DEFAULT_SPRING_SECURITY_CONTEXT_ATTR_NAME,\n+                new SecurityContextImpl(authentication));\n+\n+        Cache cache = mock(Cache.class);\n+        when(cache.get(anyString(), eq(Session.class))).thenReturn(session);\n+\n+        CacheManager cacheManager = mock(CacheManager.class);\n+        when(cacheManager.getCache(eq(SessionConfig.DEFAULT_CACHE))).thenReturn(cache);\n+\n+        PrincipalToRequestHeaderFilterFactory factory = new PrincipalToRequestHeaderFilterFactory();\n+        ReflectionTestUtils.setField(factory, \"cacheManager\", cacheManager);\n+        ctx.getBeanFactory().registerSingleton(PrincipalToRequestHeaderFilterFactory.class.getName(), factory);\n+\n+        // ...then test\n+        stubFor(get(urlEqualTo(\"/principalToRequestHeader\")).willReturn(aResponse()));\n+\n+        SRARouteTO route = new SRARouteTO();\n+        route.setKey(\"principalToRequestHeader\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.setType(SRARouteType.PROTECTED);\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.PRINCIPAL_TO_REQUEST_HEADER).args(\"HTTP_REMOTE_USER\").build());\n+\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n+        routeRefresher.refresh();\n+\n+        webClient.get().uri(\"/principalToRequestHeader\").exchange().\n+                expectStatus().isOk();\n+\n+        verify(getRequestedFor(urlEqualTo(\"/principalToRequestHeader\")).\n+                withHeader(\"HTTP_REMOTE_USER\", equalTo(\"john.doe\")));\n+    }\n+\n     @Test\n     public void custom() {\n         stubFor(post(urlEqualTo(\"/custom\")).\n                 willReturn(aResponse().\n                         withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).\n                         withBody(\"{\\\"data\\\": \\\"data\\\"}\")));\n \n-        GatewayRouteTO routeTO = new GatewayRouteTO();\n-        routeTO.setKey(\"custom\");\n-        routeTO.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        routeTO.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.CUSTOM).\n+        SRARouteTO route = new SRARouteTO();\n+        route.setKey(\"custom\");\n+        route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.CUSTOM).\n                 args(BodyPropertyMatchingRoutePredicateFactory.class.getName() + \";cool\").build());\n-        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.ADD_RESPONSE_HEADER).args(\"Custom,matched\").build());\n-        routeTO.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.CUSTOM).\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.ADD_RESPONSE_HEADER).args(\"Custom,matched\").build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.CUSTOM).\n                 args(BodyPropertyAddingGatewayFilterFactory.class.getName() + \";customized=true\").build());\n \n-        SyncopeCoreTestingServer.ROUTES.put(routeTO.getKey(), routeTO);\n+        SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n \n         webClient.post().uri(\"/custom\")."},{"sha":"d30aefb4284d81f9d01bceae7e91937c371e658f","filename":"sra/src/test/java/org/apache/syncope/sra/SyncopeCoreTestingServer.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeCoreTestingServer.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -31,19 +31,19 @@\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n-import org.apache.syncope.common.rest.api.service.GatewayRouteService;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n import org.springframework.stereotype.Component;\n+import org.apache.syncope.common.rest.api.service.SRARouteService;\n \n @Component\n public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n \n     public static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n \n-    public static final Map<String, GatewayRouteTO> ROUTES = new ConcurrentHashMap<>();\n+    public static final Map<String, SRARouteTO> ROUTES = new ConcurrentHashMap<>();\n \n     @Autowired\n     private RouteRefresher routeRefresher;\n@@ -57,10 +57,9 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n             // 1. start (mocked) Core as embedded CXF\n             JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n             sf.setAddress(ADDRESS);\n-            sf.setResourceClasses(GatewayRouteService.class);\n-            sf.setResourceProvider(\n-                    GatewayRouteService.class,\n-                    new SingletonResourceProvider(new StubGatewayRouteService(), true));\n+            sf.setResourceClasses(SRARouteService.class);\n+            sf.setResourceProvider(SRARouteService.class,\n+                    new SingletonResourceProvider(new StubSRARouteService(), true));\n             sf.setProviders(List.of(new JacksonJsonProvider()));\n             sf.create();\n \n@@ -72,32 +71,32 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n         }\n     }\n \n-    public class StubGatewayRouteService implements GatewayRouteService {\n+    public class StubSRARouteService implements SRARouteService {\n \n         @Override\n-        public List<GatewayRouteTO> list() {\n+        public List<SRARouteTO> list() {\n             return ROUTES.values().stream().\n-                    sorted(Comparator.comparing(GatewayRouteTO::getKey)).\n+                    sorted(Comparator.comparing(SRARouteTO::getKey)).\n                     collect(Collectors.toList());\n         }\n \n         @Override\n-        public Response create(final GatewayRouteTO routeTO) {\n+        public Response create(final SRARouteTO routeTO) {\n             ROUTES.putIfAbsent(routeTO.getKey(), routeTO);\n             return Response.noContent().build();\n         }\n \n         @Override\n-        public GatewayRouteTO read(final String key) {\n-            GatewayRouteTO route = ROUTES.get(key);\n+        public SRARouteTO read(final String key) {\n+            SRARouteTO route = ROUTES.get(key);\n             if (route == null) {\n                 throw new NotFoundException();\n             }\n             return route;\n         }\n \n         @Override\n-        public void update(final GatewayRouteTO routeTO) {\n+        public void update(final SRARouteTO routeTO) {\n             read(routeTO.getKey());\n             ROUTES.put(routeTO.getKey(), routeTO);\n         }"},{"sha":"8733a24a6f6bcbdcb04fe2dfc204039411098584","filename":"sra/src/test/java/org/apache/syncope/sra/TLSRouteProviderTest.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FTLSRouteProviderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FTLSRouteProviderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FTLSRouteProviderTest.java?ref=b508ed3f1bf09e1024012c4f8bd4a9c1770fdde2","patch":"@@ -39,12 +39,12 @@\n import java.security.cert.CertificateException;\n import javax.net.ssl.KeyManagerFactory;\n import javax.net.ssl.SSLException;\n-import org.apache.syncope.common.lib.to.GatewayRouteTO;\n-import org.apache.syncope.common.lib.types.FilterFactory;\n-import org.apache.syncope.common.lib.types.GatewayRouteFilter;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicate;\n-import org.apache.syncope.common.lib.types.GatewayRoutePredicateCond;\n-import org.apache.syncope.common.lib.types.PredicateFactory;\n+import org.apache.syncope.common.lib.to.SRARouteTO;\n+import org.apache.syncope.common.lib.types.SRARouteFilterFactory;\n+import org.apache.syncope.common.lib.types.SRARouteFilter;\n+import org.apache.syncope.common.lib.types.SRARoutePredicate;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateCond;\n+import org.apache.syncope.common.lib.types.SRARoutePredicateFactory;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.springframework.http.client.reactive.ClientHttpConnector;\n@@ -98,15 +98,15 @@ public void clientAuth() throws SSLException, KeyStoreException, IOException, No\n \n         stubFor(get(urlEqualTo(\"/getWithClientAuth\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"getWithClientAuth\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.METHOD).args(\"GET\").build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.PATH).args(\"/getWithClientAuth\").cond(GatewayRoutePredicateCond.AND).build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.METHOD).args(\"GET\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/getWithClientAuth\").cond(SRARoutePredicateCond.AND).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();\n@@ -128,15 +128,15 @@ public void withoutClientCert() throws SSLException, KeyStoreException, IOExcept\n \n         stubFor(get(urlEqualTo(\"/withoutClientCert\")).willReturn(aResponse()));\n \n-        GatewayRouteTO route = new GatewayRouteTO();\n+        SRARouteTO route = new SRARouteTO();\n         route.setKey(\"withoutClientCert\");\n         route.setTarget(URI.create(\"http://localhost:\" + wiremockPort));\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.METHOD).args(\"GET\").build());\n-        route.getPredicates().add(new GatewayRoutePredicate.Builder().\n-                factory(PredicateFactory.PATH).args(\"/withoutClientCert\").cond(GatewayRoutePredicateCond.AND).build());\n-        route.getFilters().add(new GatewayRouteFilter.Builder().\n-                factory(FilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.METHOD).args(\"GET\").build());\n+        route.getPredicates().add(new SRARoutePredicate.Builder().\n+                factory(SRARoutePredicateFactory.PATH).args(\"/withoutClientCert\").cond(SRARoutePredicateCond.AND).build());\n+        route.getFilters().add(new SRARouteFilter.Builder().\n+                factory(SRARouteFilterFactory.CLIENT_CERTS_TO_REQUEST_HEADER).build());\n \n         SyncopeCoreTestingServer.ROUTES.put(route.getKey(), route);\n         routeRefresher.refresh();"}]}