{"sha":"419fccfeba9ebd63112e98e00350e5be90706ce8","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQxOWZjY2ZlYmE5ZWJkNjMxMTJlOThlMDAzNTBlNWJlOTA3MDZjZTg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-26T14:55:56Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-26T14:55:56Z"},"message":"[SYNCOPE-666] Several JPA tests added","tree":{"sha":"18b48e344d02ae2c2dfd20f28ffcbb3501aa3bd4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/18b48e344d02ae2c2dfd20f28ffcbb3501aa3bd4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/419fccfeba9ebd63112e98e00350e5be90706ce8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/419fccfeba9ebd63112e98e00350e5be90706ce8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/419fccfeba9ebd63112e98e00350e5be90706ce8","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/419fccfeba9ebd63112e98e00350e5be90706ce8/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a78a6f1f7624bb834ada494cff969ed36ca4a85b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a78a6f1f7624bb834ada494cff969ed36ca4a85b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a78a6f1f7624bb834ada494cff969ed36ca4a85b"}],"stats":{"total":1208,"additions":1078,"deletions":130},"files":[{"sha":"6e05a52c093cbdfdf8561b3f10bf676399b5207f","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -25,6 +25,7 @@ public enum EntityViolationType {\n \n     Standard(\"\"),\n     InvalidAccountPolicy(\"org.apache.syncope.core.persistence.validation.accountpolicy\"),\n+    InvalidAnyType(\"org.apache.syncope.core.persistence.validation.anytype\"),\n     InvalidConnInstanceLocation(\"org.apache.syncope.core.persistence.validation.conninstance.location\"),\n     InvalidConnPoolConf(\"org.apache.syncope.core.persistence.validation.conninstance.poolConf\"),\n     InvalidMapping(\"org.apache.syncope.core.persistence.validation.mapping\"),"},{"sha":"bd2f938186469ceff42dc4d8dd56fa0a6c64fdd4","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -20,16 +20,22 @@\n \n import java.util.Collection;\n import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n \n public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     List<AnyObject> findByAnyType(String anyTypeName);\n \n     List<Group> findDynGroupMemberships(AnyObject anyObject);\n \n+    List<ARelationship> findARelationships(AnyObject anyObject);\n+\n+    List<URelationship> findURelationships(AnyObject anyObject);\n+\n     Collection<Group> findAllGroups(AnyObject anyObject);\n \n     Collection<Long> findAllGroupKeys(AnyObject anyObject);"},{"sha":"32483b5a1e1c7ea585c18abfbaaa655b0392bb6d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyTypeDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n \n public interface AnyTypeDAO extends DAO<AnyType, String> {\n \n@@ -29,6 +30,8 @@ public interface AnyTypeDAO extends DAO<AnyType, String> {\n \n     AnyType findGroup();\n \n+    List<AnyType> findByTypeClass(AnyTypeClass anyTypeClass);\n+\n     List<AnyType> findAll();\n \n     AnyType save(AnyType anyType);"},{"sha":"70161f9172b81cdd9a8754fb3416fd0fcc19da93","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DerSchemaDAO.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDerSchemaDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -18,19 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n \n-public interface DerSchemaDAO extends DAO<DerSchema, String> {\n+public interface DerSchemaDAO extends SchemaDAO<DerSchema, DerAttr<?>> {\n \n-    DerSchema find(String name);\n-\n-    List<DerSchema> findAll();\n-\n-    <T extends DerAttr<?>> List<T> findAttrs(DerSchema schema, Class<T> reference);\n-\n-    DerSchema save(DerSchema derSchema);\n-\n-    void delete(String key);\n }"},{"sha":"df51db4059ccb076417f54bd504189a9fc9c5620","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPlainSchemaDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -18,19 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n \n-public interface PlainSchemaDAO extends DAO<PlainSchema, String> {\n+public interface PlainSchemaDAO extends SchemaDAO<PlainSchema, PlainAttr<?>> {\n \n-    PlainSchema find(String name);\n-\n-    List<PlainSchema> findAll();\n-\n-    <T extends PlainAttr<?>> List<T> findAttrs(PlainSchema schema, Class<T> reference);\n-\n-    PlainSchema save(PlainSchema derSchema);\n-\n-    void delete(String key);\n }"},{"sha":"4b361153f33dacf71b821e52fbc65dc41ab4262f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSchemaDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.Attr;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n+\n+public interface SchemaDAO<S extends Schema, A extends Attr<S, ?>> extends DAO<S, String> {\n+\n+    S find(String name);\n+\n+    List<S> findByAnyTypeClass(AnyTypeClass anyTypeClass);\n+\n+    List<S> findAll();\n+\n+    <T extends A> List<T> findAttrs(S schema, Class<T> reference);\n+\n+    S save(S derSchema);\n+\n+    void delete(String key);\n+}"},{"sha":"2bcd81c99e711e7464990f8ee57482c2aaa83188","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FVirSchemaDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -18,19 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n \n-public interface VirSchemaDAO extends DAO<VirSchema, String> {\n-\n-    VirSchema find(String name);\n-\n-    List<VirSchema> findAll();\n-\n-    <T extends VirAttr<?>> List<T> findAttrs(VirSchema virSchema, Class<T> reference);\n-\n-    VirSchema save(VirSchema derSchema);\n-\n-    void delete(String key);\n+public interface VirSchemaDAO extends SchemaDAO<VirSchema, VirAttr<?>> {\n }"},{"sha":"ec6bf50b725d72606383994e6678b50c32e5fecd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Schema.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSchema.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -22,6 +22,10 @@\n \n public interface Schema extends Entity<String> {\n \n+    AnyTypeClass getAnyTypeClass();\n+\n+    void setAnyTypeClass(AnyTypeClass anyTypeClass);\n+\n     AttrSchemaType getType();\n \n     String getMandatoryCondition();"},{"sha":"298f5c4e8f78d906b29154909937a884745c49d6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":39,"deletions":1,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -32,21 +32,30 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObjectDAO {\n \n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);\n@@ -76,6 +85,35 @@ public List<AnyObject> findByAnyType(final String anyTypeName) {\n         return query.getResultList();\n     }\n \n+    @Override\n+    public List<ARelationship> findARelationships(final AnyObject anyObject) {\n+        TypedQuery<ARelationship> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAARelationship.class.getSimpleName()\n+                + \" e WHERE e.rightEnd=:anyObject\", ARelationship.class);\n+        query.setParameter(\"anyObject\", anyObject);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<URelationship> findURelationships(final AnyObject anyObject) {\n+        TypedQuery<URelationship> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + JPAURelationship.class.getSimpleName()\n+                + \" e WHERE e.rightEnd=:anyObject\", URelationship.class);\n+        query.setParameter(\"anyObject\", anyObject);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public AnyObject save(final AnyObject anyObject) {\n+        AnyObject merged = super.save(anyObject);\n+\n+        groupDAO.refreshDynMemberships(merged);\n+\n+        return merged;\n+    }\n+\n     @Override\n     public void delete(final AnyObject any) {\n         for (Group group : findDynGroupMemberships(any)) {\n@@ -90,7 +128,7 @@ public void delete(final AnyObject any) {\n     public List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n         TypedQuery<Group> query = entityManager.createQuery(\n                 \"SELECT e.group FROM \" + JPAADynGroupMembership.class.getSimpleName()\n-                + \" e WHERE :anyObject MEMBER OF e.members\", Group.class);\n+                + \" e WHERE :anyObject MEMBER OF e.anyObjects\", Group.class);\n         query.setParameter(\"anyObject\", anyObject);\n \n         return query.getResultList();"},{"sha":"3339c9a5c45278dc99e514bfc321a9dc7e1b8c6a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -21,13 +21,34 @@\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n @Repository\n public class JPAAnyTypeClassDAO extends AbstractDAO<AnyTypeClass, String> implements AnyTypeClassDAO {\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private VirSchemaDAO virSchemaDAO;\n+\n     @Override\n     public AnyTypeClass find(final String key) {\n         return entityManager.find(JPAAnyTypeClass.class, key);\n@@ -52,6 +73,20 @@ public void delete(final String key) {\n             return;\n         }\n \n+        for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+            schema.setAnyTypeClass(null);\n+        }\n+        for (DerSchema schema : derSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+            schema.setAnyTypeClass(null);\n+        }\n+        for (VirSchema schema : virSchemaDAO.findByAnyTypeClass(anyTypeClass)) {\n+            schema.setAnyTypeClass(null);\n+        }\n+\n+        for (AnyType type : anyTypeDAO.findByTypeClass(anyTypeClass)) {\n+            type.remove(anyTypeClass);\n+        }\n+\n         entityManager.remove(anyTypeClass);\n     }\n "},{"sha":"43428110c20d2326f2d94fdf8a99fc5772529cb2","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -23,9 +23,9 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.springframework.stereotype.Repository;\n-import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAAnyTypeDAO extends AbstractDAO<AnyType, String> implements AnyTypeDAO {\n@@ -35,27 +35,25 @@ public AnyType find(final String key) {\n         return entityManager.find(JPAAnyType.class, key);\n     }\n \n-    private AnyType find(final AnyTypeKind typeKind) {\n-        AnyType anyType = find(typeKind.name());\n-        if (anyType == null) {\n-            anyType = new JPAAnyType();\n-            anyType.setKey(typeKind.name());\n-            anyType.setKind(typeKind);\n-            anyType = save(anyType);\n-        }\n-        return anyType;\n-    }\n-\n-    @Transactional(readOnly = false)\n     @Override\n     public AnyType findUser() {\n-        return find(AnyTypeKind.USER);\n+        return find(AnyTypeKind.USER.name());\n     }\n \n-    @Transactional(readOnly = false)\n     @Override\n     public AnyType findGroup() {\n-        return find(AnyTypeKind.GROUP);\n+        return find(AnyTypeKind.GROUP.name());\n+    }\n+\n+    public List<AnyType> findByTypeClass(final AnyTypeClass anyTypeClass) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAAnyType.class.getSimpleName()).\n+                append(\" e WHERE :anyTypeClass MEMBER OF e.classes\");\n+\n+        TypedQuery<AnyType> query = entityManager.createQuery(queryString.toString(), AnyType.class);\n+        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+\n+        return query.getResultList();\n     }\n \n     @Override\n@@ -77,6 +75,10 @@ public void delete(final String key) {\n             return;\n         }\n \n+        if (anyType.equals(findUser()) || anyType.equals(findGroup())) {\n+            throw new IllegalArgumentException(key + \" cannot be deleted\");\n+        }\n+\n         entityManager.remove(anyType);\n     }\n "},{"sha":"a849ef501de25117b69df46065a85c909dfb7f06","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.DerAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.DerAttr;\n@@ -47,6 +48,18 @@ public DerSchema find(final String key) {\n         return entityManager.find(JPADerSchema.class, key);\n     }\n \n+    @Override\n+    public List<DerSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPADerSchema.class.getSimpleName()).\n+                append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n+\n+        TypedQuery<DerSchema> query = entityManager.createQuery(queryString.toString(), DerSchema.class);\n+        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<DerSchema> findAll() {\n         TypedQuery<DerSchema> query = entityManager.createQuery(\n@@ -56,7 +69,7 @@ public List<DerSchema> findAll() {\n \n     @Override\n     public <T extends DerAttr<?>> List<T> findAttrs(final DerSchema schema, final Class<T> reference) {\n-        final StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(((JPADerAttrDAO) derAttrDAO).getJPAEntityReference(reference).getSimpleName()).\n                 append(\" e WHERE e.schema=:schema\");\n \n@@ -89,6 +102,8 @@ public void delete(final String key) {\n             resourceDAO.deleteMapping(key, anyUtils.derIntMappingType());\n         }\n \n+        schema.getAnyTypeClass().remove(schema);\n+\n         entityManager.remove(schema);\n     }\n }"},{"sha":"50865c3d7bee8ed0c24bde15809e1c1594bc506a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n@@ -47,6 +48,18 @@ public PlainSchema find(final String key) {\n         return entityManager.find(JPAPlainSchema.class, key);\n     }\n \n+    @Override\n+    public List<PlainSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAPlainSchema.class.getSimpleName()).\n+                append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n+\n+        TypedQuery<PlainSchema> query = entityManager.createQuery(queryString.toString(), PlainSchema.class);\n+        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<PlainSchema> findAll() {\n         TypedQuery<PlainSchema> query = entityManager.createQuery(\n@@ -89,6 +102,8 @@ public void delete(final String key) {\n             resourceDAO.deleteMapping(key, anyUtils.plainIntMappingType());\n         }\n \n+        schema.getAnyTypeClass().remove(schema);\n+\n         entityManager.remove(schema);\n     }\n }"},{"sha":"7045ddc15c1b3ff74e7efdaeb857c2939a285e21","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -45,7 +45,6 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n-import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPADynRoleMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n@@ -152,11 +151,7 @@ public List<User> findBySecurityQuestion(final SecurityQuestion securityQuestion\n \n     @Override\n     public User save(final User user) {\n-        User merged = entityManager.merge(user);\n-        for (UVirAttr virAttr : merged.getVirAttrs()) {\n-            virAttr.getValues().clear();\n-            virAttr.getValues().addAll(user.getVirAttr(virAttr.getSchema().getKey()).getValues());\n-        }\n+        User merged = super.save(user);\n \n         roleDAO.refreshDynMemberships(merged);\n         groupDAO.refreshDynMemberships(merged);"},{"sha":"cc4ffe42e77e0a295ceebebe3cad4646ba648ba6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.VirAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n@@ -47,6 +48,18 @@ public VirSchema find(final String key) {\n         return entityManager.find(JPAVirSchema.class, key);\n     }\n \n+    @Override\n+    public List<VirSchema> findByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAVirSchema.class.getSimpleName()).\n+                append(\" e WHERE e.anyTypeClass=:anyTypeClass\");\n+\n+        TypedQuery<VirSchema> query = entityManager.createQuery(queryString.toString(), VirSchema.class);\n+        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+\n+        return query.getResultList();\n+    }\n+\n     @Override\n     public List<VirSchema> findAll() {\n         TypedQuery<VirSchema> query = entityManager.createQuery(\n@@ -89,6 +102,8 @@ public void delete(final String key) {\n             resourceDAO.deleteMapping(key, anyUtils.virIntMappingType());\n         }\n \n+        schema.getAnyTypeClass().remove(schema);\n+\n         entityManager.remove(schema);\n     }\n }"},{"sha":"d50cdba8fba6cd165e52731ab3d8faa128742960","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyType.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyType.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -34,9 +34,11 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.AnyTypeCheck;\n \n @Entity\n @Table(name = JPAAnyType.TABLE)\n+@AnyTypeCheck\n @Cacheable\n public class JPAAnyType extends AbstractEntity<String> implements AnyType {\n "},{"sha":"e4f0db9af571497e28d31c7f8664af932f25569b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java","status":"modified","additions":5,"deletions":20,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTypeClass.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -21,12 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.Cacheable;\n-import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n-import javax.persistence.JoinColumn;\n-import javax.persistence.JoinTable;\n import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n@@ -46,25 +43,13 @@ public class JPAAnyTypeClass extends AbstractEntity<String> implements AnyTypeCl\n     @Id\n     private String name;\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns =\n-            @JoinColumn(name = \"anyTypeClass_name\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"plainSchema_name\"))\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"anyTypeClass\")\n     private List<JPAPlainSchema> plainSchemas = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns =\n-            @JoinColumn(name = \"anyTypeClass_name\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"derSchema_name\"))\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"anyTypeClass\")\n     private List<JPADerSchema> derSchemas = new ArrayList<>();\n \n-    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n-    @JoinTable(joinColumns =\n-            @JoinColumn(name = \"anyTypeClass_name\"),\n-            inverseJoinColumns =\n-            @JoinColumn(name = \"virSchema_name\"))\n+    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"anyTypeClass\")\n     private List<JPAVirSchema> virSchemas = new ArrayList<>();\n \n     @Override\n@@ -102,7 +87,7 @@ public boolean add(final DerSchema facet) {\n \n     @Override\n     public boolean remove(final DerSchema facet) {\n-        checkType(facet, JPAPlainSchema.class);\n+        checkType(facet, JPADerSchema.class);\n         return this.derSchemas.remove((JPADerSchema) facet);\n     }\n \n@@ -119,7 +104,7 @@ public boolean add(final VirSchema facet) {\n \n     @Override\n     public boolean remove(final VirSchema facet) {\n-        checkType(facet, JPAPlainSchema.class);\n+        checkType(facet, JPAVirSchema.class);\n         return this.virSchemas.remove((JPAVirSchema) facet);\n     }\n "},{"sha":"62fc5d6c4a292742a33691d603b8414ae5a75e22","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADerSchema.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADerSchema.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -22,8 +22,10 @@\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaNameCheck;\n \n@@ -40,6 +42,9 @@ public class JPADerSchema extends AbstractEntity<String> implements DerSchema {\n     @Id\n     private String name;\n \n+    @OneToOne\n+    private JPAAnyTypeClass anyTypeClass;\n+\n     @Column(nullable = false)\n     private String expression;\n \n@@ -53,6 +58,17 @@ public void setKey(final String key) {\n         this.name = key;\n     }\n \n+    @Override\n+    public AnyTypeClass getAnyTypeClass() {\n+        return anyTypeClass;\n+    }\n+\n+    @Override\n+    public void setAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+        checkType(anyTypeClass, JPAAnyTypeClass.class);\n+        this.anyTypeClass = (JPAAnyTypeClass) anyTypeClass;\n+    }\n+\n     @Override\n     public String getExpression() {\n         return expression;"},{"sha":"6a152b02ac4305f4a447778dd93a1c0bf36f555b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -22,6 +22,8 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n@@ -43,7 +45,11 @@\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ARelationship;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttrValue;\n@@ -77,7 +83,11 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttr;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrUniqueValue;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAARelationship;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAnyObject;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttr;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.conf.JPACPlainAttrValue;\n@@ -128,6 +138,12 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAPushPolicy();\n         } else if (reference.equals(SyncPolicy.class)) {\n             result = (T) new JPASyncPolicy();\n+        } else if (reference.equals(AnyTypeClass.class)) {\n+            result = (T) new JPAAnyTypeClass();\n+        } else if (reference.equals(AnyType.class)) {\n+            result = (T) new JPAAnyType();\n+        } else if (reference.equals(AnyObject.class)) {\n+            result = (T) new JPAAnyObject();\n         } else if (reference.equals(Role.class)) {\n             result = (T) new JPARole();\n         } else if (reference.equals(User.class)) {\n@@ -156,6 +172,12 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAConnInstance();\n         } else if (reference.equals(PlainSchema.class)) {\n             result = (T) new JPAPlainSchema();\n+        } else if (reference.equals(APlainAttr.class)) {\n+            result = (T) new JPAAPlainAttr();\n+        } else if (reference.equals(APlainAttrValue.class)) {\n+            result = (T) new JPAAPlainAttrValue();\n+        } else if (reference.equals(APlainAttrUniqueValue.class)) {\n+            result = (T) new JPAAPlainAttrUniqueValue();\n         } else if (reference.equals(UPlainAttr.class)) {\n             result = (T) new JPAUPlainAttr();\n         } else if (reference.equals(UPlainAttrValue.class)) {"},{"sha":"d4935e98e43251156231ef7adbe5fd00326ad099","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAPlainSchema.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAPlainSchema.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n import javax.persistence.Lob;\n+import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n@@ -34,6 +35,7 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.Validator;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.attrvalue.validation.BasicValidator;\n import org.apache.syncope.core.persistence.jpa.validation.entity.PlainSchemaCheck;\n@@ -52,6 +54,9 @@ public class JPAPlainSchema extends AbstractEntity<String> implements PlainSchem\n     @Id\n     private String name;\n \n+    @OneToOne\n+    private JPAAnyTypeClass anyTypeClass;\n+\n     @Column(nullable = false)\n     @Enumerated(EnumType.STRING)\n     private AttrSchemaType type;\n@@ -121,6 +126,17 @@ public void setKey(final String name) {\n         this.name = name;\n     }\n \n+    @Override\n+    public AnyTypeClass getAnyTypeClass() {\n+        return anyTypeClass;\n+    }\n+\n+    @Override\n+    public void setAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+        checkType(anyTypeClass, JPAAnyTypeClass.class);\n+        this.anyTypeClass = (JPAAnyTypeClass) anyTypeClass;\n+    }\n+\n     @Override\n     public AttrSchemaType getType() {\n         return type;"},{"sha":"d268affe8d3d73a0c1ca1c5d692bad1a2dd4ae5d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -22,10 +22,12 @@\n import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SchemaNameCheck;\n \n@@ -42,6 +44,9 @@ public class JPAVirSchema extends AbstractEntity<String> implements VirSchema {\n     @Id\n     private String name;\n \n+    @OneToOne\n+    private JPAAnyTypeClass anyTypeClass;\n+\n     @Basic\n     @Min(0)\n     @Max(1)\n@@ -63,6 +68,17 @@ public void setKey(final String key) {\n         this.name = key;\n     }\n \n+    @Override\n+    public AnyTypeClass getAnyTypeClass() {\n+        return anyTypeClass;\n+    }\n+\n+    @Override\n+    public void setAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+        checkType(anyTypeClass, JPAAnyTypeClass.class);\n+        this.anyTypeClass = (JPAAnyTypeClass) anyTypeClass;\n+    }\n+\n     @Override\n     public AttrSchemaType getType() {\n         return AttrSchemaType.String;"},{"sha":"8e1387933624524b8c8d2a65749744e4a371be56","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/JPAProvision.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FJPAProvision.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -27,6 +27,7 @@\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n+import javax.validation.constraints.NotNull;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n@@ -55,6 +56,7 @@ public class JPAProvision extends AbstractEntity<Long> implements Provision {\n     @ManyToOne\n     private JPAAnyType anyType;\n \n+    @NotNull\n     private String objectClass;\n \n     @Lob"},{"sha":"957fd71812a04833e82d748ff15abbcd8c4eddb4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeCheck.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = AnyTypeValidator.class)\n+@Documented\n+public @interface AnyTypeCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.anytype}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"56192956931407568ddde0bab5ebb3d739dbff33","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyTypeValidator.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyTypeValidator.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+\n+public class AnyTypeValidator extends AbstractValidator<AnyTypeCheck, AnyType> {\n+\n+    @Override\n+    public boolean isValid(final AnyType object, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid;\n+        switch (object.getKind()) {\n+            case USER:\n+                isValid = AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey());\n+                break;\n+\n+            case GROUP:\n+                isValid = AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey());\n+                break;\n+\n+            case ANY_OBJECT:\n+            default:\n+                isValid = !AnyTypeKind.USER.name().equalsIgnoreCase(object.getKey())\n+                        && !AnyTypeKind.GROUP.name().equalsIgnoreCase(object.getKey());\n+        }\n+\n+        if (!isValid) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidAnyType, \"Name / kind mismatch\")).\n+                    addPropertyNode(\"name\").addConstraintViolation();\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"9ad20820ee3896e6ed72855a1caab81887804110","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":22,"deletions":6,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -138,12 +140,26 @@ public boolean isValid(final ExternalResource resource, final ConstraintValidato\n             }\n         }\n \n-        return CollectionUtils.matchesAll(resource.getProvisions(), new Predicate<Provision>() {\n+        final Set<String> objectClasses = new HashSet<>();\n+        boolean validMappings = CollectionUtils.matchesAll(resource.getProvisions(),\n+                new Predicate<Provision>() {\n+\n+                    @Override\n+                    public boolean evaluate(final Provision provision) {\n+                        if (provision.getObjectClass() != null) {\n+                            objectClasses.add(provision.getObjectClass().getObjectClassValue());\n+                        }\n+                        return isValid(provision.getAnyType(), provision.getMapping(), context);\n+                    }\n+                });\n+\n+        if (objectClasses.size() < resource.getProvisions().size()) {\n+            context.buildConstraintViolationWithTemplate(getTemplate(EntityViolationType.InvalidResource,\n+                    \"Each provision requires a different ObjectClass\")).\n+                    addPropertyNode(\"provisions\").addConstraintViolation();\n+            return false;\n+        }\n \n-            @Override\n-            public boolean evaluate(final Provision provision) {\n-                return isValid(provision.getAnyType(), provision.getMapping(), context);\n-            }\n-        });\n+        return validMappings;\n     }\n }"},{"sha":"746314ce40b3b1c31aa17d4f5f74129223df284a","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -66,6 +66,15 @@ under the License.\n     </attributes>\n   </entity>\n   \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AMembership\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AMembership\" pk-column-value=\"SEQ_AMembership\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPARole\">\n     <attributes>\n       <id name=\"id\">\n@@ -83,7 +92,7 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n-  \n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">\n@@ -102,6 +111,15 @@ under the License.\n     </attributes>\n   </entity>\n   \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_UMembership\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_UMembership\" pk-column-value=\"SEQ_UMembership\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"e3a4a74c931f9866fe4a3bf721838f9144fb527d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AnyObjectTest.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyObjectTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyObjectTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyObjectTest.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class AnyObjectTest extends AbstractTest {\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Test\n+    public void findAll() {\n+        List<AnyObject> list = anyObjectDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n+        assertFalse(list.isEmpty());\n+    }\n+\n+    @Test\n+    public void find() {\n+        AnyObject anyObject = anyObjectDAO.find(2L);\n+        assertNotNull(anyObject);\n+        assertNotNull(anyObject.getType());\n+        assertFalse(anyObject.getType().getClasses().isEmpty());\n+    }\n+\n+    @Test\n+    public void save() {\n+        AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n+        anyObject.setRealm(realmDAO.find(SyncopeConstants.ROOT_REALM));\n+\n+        anyObject = anyObjectDAO.save(anyObject);\n+        assertNotNull(anyObject);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        AnyObject anyObject = anyObjectDAO.find(2L);\n+        anyObjectDAO.delete(anyObject.getKey());\n+\n+        AnyObject actual = anyObjectDAO.find(2L);\n+        assertNull(actual);\n+    }\n+}"},{"sha":"c77ea93121f0b0791487fd87109faf8692de2f53","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AnyTypeClassTest.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyTypeClassTest.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class AnyTypeClassTest extends AbstractTest {\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n+    @Test\n+    public void find() {\n+        AnyTypeClass minimalGroup = anyTypeClassDAO.find(\"minimal group\");\n+        assertNotNull(minimalGroup);\n+\n+        assertFalse(minimalGroup.getPlainSchemas().isEmpty());\n+        assertFalse(minimalGroup.getDerSchemas().isEmpty());\n+        assertFalse(minimalGroup.getVirSchemas().isEmpty());\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<AnyTypeClass> list = anyTypeClassDAO.findAll();\n+        assertFalse(list.isEmpty());\n+    }\n+\n+    @Test\n+    public void save() {\n+        AnyTypeClass newClass = entityFactory.newEntity(AnyTypeClass.class);\n+        newClass.setKey(\"new class\");\n+        newClass.add(plainSchemaDAO.find(\"firstname\"));\n+\n+        newClass = anyTypeClassDAO.save(newClass);\n+        assertNotNull(newClass);\n+        assertFalse(newClass.getPlainSchemas().isEmpty());\n+        assertTrue(newClass.getDerSchemas().isEmpty());\n+        assertTrue(newClass.getVirSchemas().isEmpty());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        AnyTypeClass minimalUser = anyTypeClassDAO.find(\"minimal user\");\n+        assertNotNull(minimalUser);\n+\n+        anyTypeClassDAO.delete(minimalUser.getKey());\n+        assertNull(anyTypeClassDAO.find(\"minimal user\"));\n+    }\n+}"},{"sha":"2337a32635c6a8196f9669da0438f48c29354d66","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AnyTypeTest.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnyTypeTest.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class AnyTypeTest extends AbstractTest {\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n+    @Test\n+    public void find() {\n+        AnyType userType = anyTypeDAO.findUser();\n+        assertNotNull(userType);\n+        assertEquals(AnyTypeKind.USER, userType.getKind());\n+        assertEquals(AnyTypeKind.USER.name(), userType.getKey());\n+        assertFalse(userType.getClasses().isEmpty());\n+\n+        AnyType groupType = anyTypeDAO.findGroup();\n+        assertNotNull(groupType);\n+        assertEquals(AnyTypeKind.GROUP, groupType.getKind());\n+        assertEquals(AnyTypeKind.GROUP.name(), groupType.getKey());\n+        assertFalse(groupType.getClasses().isEmpty());\n+\n+        AnyType otherType = anyTypeDAO.find(\"OTHER\");\n+        assertNotNull(otherType);\n+        assertEquals(AnyTypeKind.ANY_OBJECT, otherType.getKind());\n+        assertEquals(\"OTHER\", otherType.getKey());\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<AnyType> list = anyTypeDAO.findAll();\n+        assertFalse(list.isEmpty());\n+    }\n+\n+    @Test\n+    public void save() {\n+        AnyType newType = entityFactory.newEntity(AnyType.class);\n+        newType.setKey(\"new type\");\n+        newType.setKind(AnyTypeKind.ANY_OBJECT);\n+        newType.add(anyTypeClassDAO.find(\"generic membership\"));\n+        newType.add(anyTypeClassDAO.find(\"csv\"));\n+\n+        newType = anyTypeDAO.save(newType);\n+        assertNotNull(newType);\n+        assertFalse(newType.getClasses().isEmpty());\n+    }\n+\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveInvalidKind() {\n+        AnyType newType = entityFactory.newEntity(AnyType.class);\n+        newType.setKey(\"new type\");\n+        newType.setKind(AnyTypeKind.USER);\n+        anyTypeDAO.save(newType);\n+    }\n+\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveInvalidName() {\n+        AnyType newType = entityFactory.newEntity(AnyType.class);\n+        newType.setKey(\"group\");\n+        newType.setKind(AnyTypeKind.ANY_OBJECT);\n+        anyTypeDAO.save(newType);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        AnyType otherType = anyTypeDAO.find(\"OTHER\");\n+        assertNotNull(otherType);\n+\n+        anyTypeDAO.delete(otherType.getKey());\n+        assertNull(anyTypeDAO.find(\"OTHER\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void deleteInvalid() {\n+        anyTypeDAO.delete(anyTypeDAO.findUser().getKey());\n+    }\n+}"},{"sha":"5fd6f53f595ef664abeef8e8882b55ba8012ff37","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/ResourceTest.java","status":"modified","additions":45,"deletions":6,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FResourceTest.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -41,6 +41,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -108,6 +109,7 @@ public void save() {\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n         provision.setResource(resource);\n         resource.add(provision);\n \n@@ -146,6 +148,7 @@ public void saveInvalidMappingIntAttr() {\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n         provision.setResource(resource);\n         resource.add(provision);\n \n@@ -159,8 +162,7 @@ public void saveInvalidMappingIntAttr() {\n         mapping.add(connObjectKey);\n \n         // save the resource\n-        ExternalResource actual = resourceDAO.save(resource);\n-        assertNotNull(actual);\n+        resourceDAO.save(resource);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n@@ -173,6 +175,7 @@ public void saveInvalidConnObjectKeyMapping() {\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n         provision.setResource(resource);\n         resource.add(provision);\n \n@@ -186,8 +189,7 @@ public void saveInvalidConnObjectKeyMapping() {\n         mapping.setConnObjectKeyItem(connObjectKey);\n \n         // save the resource\n-        ExternalResource actual = resourceDAO.save(resource);\n-        assertNotNull(actual);\n+        resourceDAO.save(resource);\n     }\n \n     @Test(expected = InvalidEntityException.class)\n@@ -200,6 +202,7 @@ public void saveInvalidMappingExtAttr() {\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n         provision.setResource(resource);\n         resource.add(provision);\n \n@@ -218,8 +221,42 @@ public void saveInvalidMappingExtAttr() {\n         item.setIntMappingType(IntMappingType.UserPlainSchema);\n         mapping.add(item);\n \n-        ExternalResource actual = resourceDAO.save(resource);\n-        assertNotNull(actual);\n+        resourceDAO.save(resource);\n+    }\n+\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveInvalidProvision() {\n+        ExternalResource resource = entityFactory.newEntity(ExternalResource.class);\n+        resource.setKey(\"invalidProvision\");\n+\n+        Provision provision = entityFactory.newEntity(Provision.class);\n+        provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n+        provision.setResource(resource);\n+        resource.add(provision);\n+\n+        Mapping mapping = entityFactory.newEntity(Mapping.class);\n+        mapping.setProvision(provision);\n+        provision.setMapping(mapping);\n+\n+        MappingItem connObjectKey = entityFactory.newEntity(MappingItem.class);\n+        connObjectKey.setExtAttrName(\"username\");\n+        connObjectKey.setIntAttrName(\"fullname\");\n+        connObjectKey.setIntMappingType(IntMappingType.UserId);\n+        connObjectKey.setPurpose(MappingPurpose.BOTH);\n+        mapping.setConnObjectKeyItem(connObjectKey);\n+\n+        provision = entityFactory.newEntity(Provision.class);\n+        provision.setAnyType(anyTypeDAO.findGroup());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n+        provision.setResource(resource);\n+        resource.add(provision);\n+\n+        ConnInstance connector = resourceDAO.find(\"ws-target-resource-1\").getConnector();\n+        resource.setConnector(connector);\n+\n+        // save the resource\n+        resourceDAO.save(resource);\n     }\n \n     @Test\n@@ -232,6 +269,7 @@ public void saveWithGroupMappingType() {\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n         provision.setResource(resource);\n         resource.add(provision);\n \n@@ -312,6 +350,7 @@ public void issueSYNCOPE645() {\n \n         Provision provision = entityFactory.newEntity(Provision.class);\n         provision.setAnyType(anyTypeDAO.findUser());\n+        provision.setObjectClass(ObjectClass.ACCOUNT);\n         provision.setResource(resource);\n         resource.add(provision);\n "},{"sha":"4b5f2f55c8d3f2d0f4d1cb0670db71337ead9625","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/AnyTypeClassTest.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeClassTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeClassTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeClassTest.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class AnyTypeClassTest extends AbstractTest {\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n+    @Test\n+    public void delete() {\n+        AnyTypeClass minimalUser = anyTypeClassDAO.find(\"minimal user\");\n+        assertNotNull(minimalUser);\n+\n+        PlainSchema surname = plainSchemaDAO.find(\"surname\");\n+        assertNotNull(surname);\n+        assertTrue(minimalUser.getPlainSchemas().contains(surname));\n+        int before = minimalUser.getPlainSchemas().size();\n+\n+        plainSchemaDAO.delete(\"surname\");\n+\n+        anyTypeClassDAO.flush();\n+\n+        minimalUser = anyTypeClassDAO.find(\"minimal user\");\n+        assertNotNull(minimalUser);\n+        assertEquals(before, minimalUser.getPlainSchemas().size() + 1);\n+    }\n+}"},{"sha":"e6a919dddc697670c36b88b3760bb24fbe987439","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/AnyTypeTest.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FAnyTypeTest.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class AnyTypeTest extends AbstractTest {\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private AnyTypeClassDAO anyTypeClassDAO;\n+\n+    @Test\n+    public void delete() {\n+        AnyType userType = anyTypeDAO.findUser();\n+        assertNotNull(userType);\n+\n+        AnyTypeClass other = anyTypeClassDAO.find(\"other\");\n+        assertNotNull(other);\n+        assertTrue(userType.getClasses().contains(other));\n+        int before = userType.getClasses().size();\n+\n+        anyTypeClassDAO.delete(\"other\");\n+\n+        try {\n+        anyTypeDAO.flush();\n+        } catch(Exception e) {\n+            System.err.println(\"EEEEEEEEEEEE\");\n+            e.printStackTrace();\n+        }\n+        \n+        userType = anyTypeDAO.findUser();\n+        assertNotNull(userType);\n+        assertEquals(before, userType.getClasses().size() + 1);\n+    }\n+}"},{"sha":"c9b551a0b5c3a8af3a7117456d08fa786d106df5","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/GroupTest.java","status":"modified","additions":106,"deletions":1,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -34,19 +34,25 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.APlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUDynGroupMembership;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -58,6 +64,12 @@ public class GroupTest extends AbstractTest {\n     @Autowired\n     private EntityManager entityManager;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -137,7 +149,7 @@ private Collection<Group> findDynGroupMemberships(final User user) {\n     }\n \n     @Test\n-    public void dynMembership() {\n+    public void udynMembership() {\n         // 0. create user matching the condition below\n         User user = entityFactory.newEntity(User.class);\n         user.setUsername(\"username\");\n@@ -215,4 +227,97 @@ public Long transform(final User input) {\n         assertTrue(dynGroupMemberships.isEmpty());\n     }\n \n+    /**\n+     * Static copy of {@link org.apache.syncope.core.persistence.jpa.dao.JPAAnyObjectDAO} method with same signature:\n+     * required for avoiding creating of a new transaction - good for general use case but bad for the way how\n+     * this test class is architected.\n+     */\n+    private List<Group> findDynGroupMemberships(final AnyObject anyObject) {\n+        TypedQuery<Group> query = entityManager.createQuery(\n+                \"SELECT e.group FROM \" + JPAADynGroupMembership.class.getSimpleName()\n+                + \" e WHERE :anyObject MEMBER OF e.anyObjects\", Group.class);\n+        query.setParameter(\"anyObject\", anyObject);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Test\n+    public void adynMembership() {\n+        // 0. create any object matching the condition below\n+        AnyObject anyObject = entityFactory.newEntity(AnyObject.class);\n+        anyObject.setType(anyTypeDAO.find(\"OTHER\"));\n+        anyObject.setRealm(realmDAO.find(\"/even/two\"));\n+\n+        APlainAttr attribute = entityFactory.newEntity(APlainAttr.class);\n+        attribute.setSchema(plainSchemaDAO.find(\"cool\"));\n+        attribute.setOwner(anyObject);\n+        attribute.add(\"true\", anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT));\n+        anyObject.add(attribute);\n+\n+        anyObject = anyObjectDAO.save(anyObject);\n+        Long newAnyObjectKey = anyObject.getKey();\n+        assertNotNull(newAnyObjectKey);\n+\n+        // 1. create group with dynamic membership\n+        Group group = entityFactory.newEntity(Group.class);\n+        group.setRealm(realmDAO.getRoot());\n+        group.setName(\"new\");\n+\n+        ADynGroupMembership dynMembership = entityFactory.newEntity(ADynGroupMembership.class);\n+        dynMembership.setFIQLCond(\"cool==true\");\n+        dynMembership.setGroup(group);\n+\n+        group.setADynMembership(dynMembership);\n+\n+        Group actual = groupDAO.save(group);\n+        assertNotNull(actual);\n+\n+        groupDAO.flush();\n+\n+        // 2. verify that dynamic membership is there\n+        actual = groupDAO.find(actual.getKey());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getADynMembership());\n+        assertNotNull(actual.getADynMembership().getKey());\n+        assertEquals(actual, actual.getADynMembership().getGroup());\n+\n+        // 3. verify that expected any objects have the created group dynamically assigned\n+        assertEquals(2, actual.getADynMembership().getMembers().size());\n+        assertEquals(new HashSet<>(Arrays.asList(2L, newAnyObjectKey)),\n+                CollectionUtils.collect(actual.getADynMembership().getMembers(), new Transformer<AnyObject, Long>() {\n+\n+                    @Override\n+                    public Long transform(final AnyObject input) {\n+                        return input.getKey();\n+                    }\n+                }, new HashSet<Long>()));\n+\n+        anyObject = anyObjectDAO.find(2L);\n+        assertNotNull(anyObject);\n+        Collection<Group> dynGroupMemberships = findDynGroupMemberships(anyObject);\n+        assertEquals(1, dynGroupMemberships.size());\n+        assertTrue(dynGroupMemberships.contains(actual.getADynMembership().getGroup()));\n+\n+        // 4. delete the new any object and verify that dynamic membership was updated\n+        anyObjectDAO.delete(newAnyObjectKey);\n+\n+        anyObjectDAO.flush();\n+\n+        actual = groupDAO.find(actual.getKey());\n+        assertEquals(1, actual.getADynMembership().getMembers().size());\n+        assertEquals(2L, actual.getADynMembership().getMembers().get(0).getKey(), 0);\n+\n+        // 5. delete group and verify that dynamic membership was also removed\n+        Long dynMembershipKey = actual.getADynMembership().getKey();\n+\n+        groupDAO.delete(actual);\n+\n+        groupDAO.flush();\n+\n+        assertNull(entityManager.find(JPAADynGroupMembership.class, dynMembershipKey));\n+\n+        dynGroupMemberships = findDynGroupMemberships(anyObject);\n+        assertTrue(dynGroupMemberships.isEmpty());\n+    }\n+\n }"},{"sha":"5a12044d641d1260feba90267821d106d932ac89","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/UserTest.java","status":"modified","additions":57,"deletions":2,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FUserTest.java?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -18,11 +18,14 @@\n  */\n package org.apache.syncope.core.persistence.jpa.relationship;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -31,6 +34,8 @@\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.URelationship;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -39,6 +44,9 @@\n @Transactional\n public class UserTest extends AbstractTest {\n \n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -55,7 +63,12 @@ public class UserTest extends AbstractTest {\n     private PlainAttrValueDAO plainAttrValueDAO;\n \n     @Test\n-    public void test() {\n+    public void delete() {\n+        List<UMembership> memberships = groupDAO.findUMemberships(groupDAO.find(7L));\n+        assertFalse(memberships.isEmpty());\n+        List<URelationship> relationships = anyObjectDAO.findURelationships(anyObjectDAO.find(1L));\n+        assertFalse(relationships.isEmpty());\n+\n         userDAO.delete(4L);\n \n         userDAO.flush();\n@@ -65,7 +78,49 @@ public void test() {\n         assertNull(plainAttrValueDAO.find(22L, UPlainAttrValue.class));\n         assertNotNull(plainSchemaDAO.find(\"loginDate\"));\n \n-        List<UMembership> memberships = groupDAO.findUMemberships(groupDAO.find(7L));\n+        memberships = groupDAO.findUMemberships(groupDAO.find(7L));\n         assertTrue(memberships.isEmpty());\n+        relationships = anyObjectDAO.findURelationships(anyObjectDAO.find(1L));\n+        assertTrue(relationships.isEmpty());\n+    }\n+\n+    @Test\n+    public void ships() {\n+        User user = userDAO.find(4L);\n+        assertNotNull(user);\n+        assertEquals(1, user.getMemberships().size());\n+        assertEquals(7L, user.getMemberships().get(0).getRightEnd().getKey(), 0);\n+\n+        user.remove(user.getMemberships().get(0));\n+\n+        UMembership newM = entityFactory.newEntity(UMembership.class);\n+        newM.setLeftEnd(user);\n+        newM.setRightEnd(groupDAO.find(13L));\n+        user.add(newM);\n+\n+        userDAO.save(user);\n+\n+        userDAO.flush();\n+\n+        user = userDAO.find(4L);\n+        assertEquals(1, user.getMemberships().size());\n+        assertEquals(13L, user.getMemberships().get(0).getRightEnd().getKey(), 0);\n+        assertEquals(1, user.getRelationships().size());\n+        assertEquals(1L, user.getRelationships().get(0).getRightEnd().getKey(), 0);\n+\n+        user.remove(user.getRelationships().get(0));\n+\n+        URelationship newR = entityFactory.newEntity(URelationship.class);\n+        newR.setLeftEnd(user);\n+        newR.setRightEnd(anyObjectDAO.find(2L));\n+        user.add(newR);\n+\n+        userDAO.save(user);\n+\n+        userDAO.flush();\n+\n+        user = userDAO.find(4L);\n+        assertEquals(1, user.getRelationships().size());\n+        assertEquals(2L, user.getRelationships().get(0).getRightEnd().getKey(), 0);\n     }\n }"},{"sha":"8d2ef54d9aba01f8e18dd396fb20bc4e665c705b","filename":"core/persistence-jpa/src/test/resources/content.xml","status":"modified","additions":60,"deletions":36,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/419fccfeba9ebd63112e98e00350e5be90706ce8/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=419fccfeba9ebd63112e98e00350e5be90706ce8","patch":"@@ -112,10 +112,24 @@ under the License.\n   <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n           specification='{\"userJavaRule\":null,\"groupJavaRule\":null,\"conflictResolutionAction\":\"IGNORE\",\"userAltSearchSchemas\":[],\"groupAltSearchSchemas\":[]}'/>\n \n+  <AnyTypeClass name=\"generic membership\"/>\n+\n   <AnyType name=\"USER\" kind=\"USER\"/>\n+  <AnyTypeClass name=\"minimal user\"/>\n+  <AnyType_AnyTypeClass anyType_name=\"USER\" anyTypeClass_name=\"minimal user\"/>\n+  <AnyTypeClass name=\"other\"/>\n+  <AnyType_AnyTypeClass anyType_name=\"USER\" anyTypeClass_name=\"other\"/>\n+\n   <AnyType name=\"GROUP\" kind=\"GROUP\"/>\n+  <AnyTypeClass name=\"minimal group\"/>\n+  <AnyType_AnyTypeClass anyType_name=\"GROUP\" anyTypeClass_name=\"minimal group\"/>\n+  \n   <AnyType name=\"OTHER\" kind=\"ANY_OBJECT\"/>\n+  <AnyTypeClass name=\"minimal other\"/>\n+  <AnyType_AnyTypeClass anyType_name=\"OTHER\" anyTypeClass_name=\"minimal other\"/>\n       \n+  <AnyTypeClass name=\"csv\"/>\n+\n   <Realm id=\"1\" name=\"/\" passwordPolicy_id=\"4\"/>\n   <Realm id=\"2\" name=\"odd\" parent_id=\"1\" accountPolicy_id=\"6\"/>\n   <Realm id=\"3\" name=\"even\" parent_id=\"1\"/>\n@@ -229,14 +243,18 @@ under the License.\n                 realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+  <SyncopeGroup_AnyTypeClass group_id=\"12\" anyTypeClass_name=\"csv\"/>  \n   <SyncopeGroup id=\"13\" name=\"bGroupForPropagation\"\n                 realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+  <SyncopeGroup_AnyTypeClass group_id=\"13\" anyTypeClass_name=\"csv\"/>  \n   <SyncopeGroup id=\"14\" name=\"artDirector\"\n                 realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+  \n+  <URelationship id=\"1\" user_id=\"4\" anyObject_id=\"1\"/>\n \n   <UMembership id=\"1\" user_id=\"1\" group_id=\"1\"/>\n   <UMembership id=\"2\" user_id=\"2\" group_id=\"1\"/>\n@@ -246,84 +264,90 @@ under the License.\n   <UMembership id=\"6\" user_id=\"2\" group_id=\"3\"/>\n   <UMembership id=\"7\" user_id=\"5\" group_id=\"14\"/>\n \n-  <PlainSchema name=\"fullname\" type=\"String\"\n+  <PlainSchema name=\"fullname\" type=\"String\" anyTypeClass_name=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"/>\n-  <PlainSchema name=\"userId\" type=\"String\"\n+  <PlainSchema name=\"userId\" type=\"String\" anyTypeClass_name=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"1\" readonly=\"0\"\n                validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n-  <PlainSchema name=\"loginDate\" type=\"Date\"\n+  <PlainSchema name=\"loginDate\" type=\"Date\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"\n                conversionPattern=\"yyyy-MM-dd\"/>\n-  <PlainSchema name=\"firstname\" type=\"String\"\n+  <PlainSchema name=\"firstname\" type=\"String\" anyTypeClass_name=\"minimal user\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"surname\" type=\"String\"\n+  <PlainSchema name=\"surname\" type=\"String\" anyTypeClass_name=\"minimal user\"\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"type\" type=\"String\"\n+  <PlainSchema name=\"type\" type=\"String\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"email\" type=\"String\"\n+  <PlainSchema name=\"email\" type=\"String\" anyTypeClass_name=\"minimal user\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                validatorClass=\"org.apache.syncope.core.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n-  <PlainSchema name=\"activationDate\" type=\"Date\"\n+  <PlainSchema name=\"activationDate\" type=\"Date\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n-  <PlainSchema name=\"uselessReadonly\" type=\"String\"\n+  <PlainSchema name=\"uselessReadonly\" type=\"String\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"1\"/>\n-  <PlainSchema name=\"cool\" type=\"Boolean\"\n+  <PlainSchema name=\"cool\" type=\"Boolean\" anyTypeClass_name=\"minimal other\" \n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"gender\" type=\"Enum\"\n+  <PlainSchema name=\"gender\" type=\"Enum\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                enumerationValues=\"M;F\"/>\n-  <PlainSchema name=\"aLong\" type=\"Long\"\n+  <PlainSchema name=\"aLong\" type=\"Long\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"makeItDouble\" type=\"Long\"\n+  <PlainSchema name=\"makeItDouble\" type=\"Long\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"obscure\" type=\"Encrypted\"\n+  <PlainSchema name=\"obscure\" type=\"Encrypted\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                secretKey=\"7abcdefghilmnopqrstuvz9#\" cipherAlgorithm=\"SHA\"/>\n-  <PlainSchema name=\"photo\" type=\"Binary\"\n+  <PlainSchema name=\"photo\" type=\"Binary\" anyTypeClass_name=\"other\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                mimeType=\"image/jpeg\"/>\n \n-  <DerSchema name=\"csvuserid\" expression=\"firstname + ',' + surname\"/>\n-  <DerSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n-  <DerSchema name=\"noschema\" expression=\"surname + ', ' + notfound\"/>\n+  <DerSchema name=\"csvuserid\" expression=\"firstname + ',' + surname\" anyTypeClass_name=\"csv\"/>\n+  <DerSchema name=\"cn\" expression=\"surname + ', ' + firstname\" anyTypeClass_name=\"minimal user\"/>\n+  <DerSchema name=\"noschema\" expression=\"surname + ', ' + notfound\" anyTypeClass_name=\"other\"/>\n \n-  <VirSchema name=\"virtualdata\"/>\n+  <VirSchema name=\"virtualdata\" anyTypeClass_name=\"minimal user\"/>\n \n-  <PlainSchema name=\"icon\" type=\"String\"\n+  <PlainSchema name=\"icon\" type=\"String\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>                \n-  <PlainSchema name=\"show\" type=\"Boolean\"\n+  <PlainSchema name=\"show\" type=\"Boolean\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"rderived_sx\" type=\"String\"\n+  <PlainSchema name=\"rderived_sx\" type=\"String\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"rderived_dx\" type=\"String\"\n+  <PlainSchema name=\"rderived_dx\" type=\"String\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>           \n-  <PlainSchema name=\"title\" type=\"String\"\n+  <PlainSchema name=\"title\" type=\"String\" anyTypeClass_name=\"minimal group\"\n                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n-  <DerSchema name=\"rderiveddata\" expression=\"rderived_sx + '-' + rderived_dx\"/>\n-  <DerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n-  <DerSchema name=\"rderToBePropagated\" expression=\"rderived_sx + '-' + rderived_dx\"/>\n+  <DerSchema name=\"rderiveddata\" expression=\"rderived_sx + '-' + rderived_dx\"\n+             anyTypeClass_name=\"minimal group\"/>\n+  <DerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"\n+             anyTypeClass_name=\"minimal group\"/>\n+  <DerSchema name=\"rderToBePropagated\" expression=\"rderived_sx + '-' + rderived_dx\"\n+             anyTypeClass_name=\"minimal group\"/>\n \n-  <VirSchema name=\"rvirtualdata\"/>\n+  <VirSchema name=\"rvirtualdata\" anyTypeClass_name=\"minimal group\"/>\n \n-  <!-- rderiveddata is used to verify der schema deletion -->\n   <DerSchema name=\"rderivedschema\" expression=\"rderived_sx + '-' + rderived_dx\"/>\n \n-  <PlainSchema name=\"subscriptionDate\" type=\"Date\"\n+  <PlainSchema name=\"subscriptionDate\" type=\"Date\" anyTypeClass_name=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n-  <PlainSchema name=\"mderived_sx\" type=\"String\"\n+  <PlainSchema name=\"mderived_sx\" type=\"String\" anyTypeClass_name=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <PlainSchema name=\"mderived_dx\" type=\"String\"\n+  <PlainSchema name=\"mderived_dx\" type=\"String\" anyTypeClass_name=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>          \n-  <PlainSchema name=\"postalAddress\" type=\"String\"\n+  <PlainSchema name=\"postalAddress\" type=\"String\" anyTypeClass_name=\"generic membership\"\n                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n \n   <DerSchema name=\"mderiveddata\" expression=\"mderived_sx + '-' + mderived_dx\"/>\n-  <DerSchema name=\"mderToBePropagated\" expression=\"mderived_sx + '-' + mderived_dx\"/>\n+  <DerSchema name=\"mderToBePropagated\" expression=\"mderived_sx + '-' + mderived_dx\" \n+             anyTypeClass_name=\"generic membership\"/>\n \n   <VirSchema name=\"mvirtualdata\"/>\n+        \n+  <APlainAttr id=\"1\" owner_id=\"2\" schema_name=\"cool\"/>\n+  <APlainAttrValue id=\"1\" attribute_id=\"1\" booleanValue=\"1\"/>\n   \n   <UPlainAttr id=\"99\" owner_id=\"1\" schema_name=\"type\"/>\n   <UPlainAttrValue id=\"9\" attribute_id=\"99\" stringValue=\"G\"/>\n@@ -1035,13 +1059,13 @@ under the License.\n \n   <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template=\"requestPasswordReset\" \n-                traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n+                traceLevel=\"FAILURES\"/> \n   <AnyAbout id=\"1\" anyType_name=\"USER\" notification_id=\"1\" about=\"token!=$null\"/>\n   <Notification_events Notification_id=\"1\" event=\"[CUSTOM]:[]:[]:[requestPasswordReset]:[SUCCESS]\"/>\n   \n   <Notification id=\"2\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserPlainSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset successful\" template=\"confirmPasswordReset\" \n-                traceLevel=\"FAILURES\" userAbout=\"token!=$null\"/> \n+                traceLevel=\"FAILURES\"/> \n   <Notification_events Notification_id=\"2\" event=\"[CUSTOM]:[]:[]:[confirmPasswordReset]:[SUCCESS]\"/>\n \n   <Notification id=\"10\" sender=\"test@syncope.apache.org\" subject=\"Test subject\" template=\"test\" selfAsRecipient=\"0\" "}]}